[{"__type__":"cc.EffectAsset","_name":"HueColor","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"program":"HueColor|HueColor-vs|HueColor-fs","properties":{"texture":{"value":"white","type":29},"u_fragmentColor":{"value":[1,1,1,1],"inspector":{"type":"color"},"type":16}}}]}],"shaders":[{"hash":156604079,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n\n","frag":"\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\nuniform ARGS{\n  vec4 u_fragmentColor;\n}\n\nin vec2 v_uv0;\nuniform sampler2D texture;\n\nvec3 rgb2hsv(vec3 c)\n{\n\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-5;\n    return vec3(abs(q.z  + (q.w - q.y) / (6.0 * d  + e)), d / (q.x +  e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx +  K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main () { \n  vec4 texColor = texture2D(texture, v_uv0);\n  gl_FragColor = texColor;\n  if(texColor.a > 0.01)\n  {\n      vec3 hsv = rgb2hsv(texColor.rgb);\n      hsv.x = hsv.x +  u_fragmentColor.r;\n      hsv.y = clamp(hsv.y +  2.0 * (u_fragmentColor.g - 0.5), 0.0, 1.0);\n      hsv.z = clamp(hsv.z  + 2.0 * (u_fragmentColor.b - 0.5), 0.0, 1.0);\n      vec3 rgbColor = hsv2rgb(hsv);\n      gl_FragColor = vec4(rgbColor.rgb, texColor.a);\n  }\n}\n\n"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n\n","frag":"\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\nuniform vec4 u_fragmentColor;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n\nvec3 rgb2hsv(vec3 c)\n{\n\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-5;\n    return vec3(abs(q.z  + (q.w - q.y) / (6.0 * d  + e)), d / (q.x +  e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx +  K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid main () { \n  vec4 texColor = texture2D(texture, v_uv0);\n  gl_FragColor = texColor;\n  if(texColor.a > 0.01)\n  {\n      vec3 hsv = rgb2hsv(texColor.rgb);\n      hsv.x = hsv.x +  u_fragmentColor.r;\n      hsv.y = clamp(hsv.y +  2.0 * (u_fragmentColor.g - 0.5), 0.0, 1.0);\n      hsv.z = clamp(hsv.z  + 2.0 * (u_fragmentColor.b - 0.5), 0.0, 1.0);\n      vec3 rgbColor = hsv2rgb(hsv);\n      gl_FragColor = vec4(rgbColor.rgb, texColor.a);\n  }\n}\n\n"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"ARGS","members":[{"name":"u_fragmentColor","type":16,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":[],"binding":30}],"dependencies":{},"name":"HueColor|HueColor-vs|HueColor-fs"}]},{"__type__":"cc.Material","_name":"HueColor","_effectAsset":{"__uuid__":"63FJBdAgNAl7kZsl+FaG6V"},"_defines":{"USE_TEXTURE":true,"USE_ALPHA_TEST":false},"_props":{"u_fragmentColor":{"__type__":"cc.Color","r":206,"g":113,"b":119,"a":0}}}]
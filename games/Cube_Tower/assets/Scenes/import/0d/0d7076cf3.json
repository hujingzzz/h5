[1,["caE3+6hkVMyYigcj3kSN6C@f9941","bctXr3YPNMq5H4XHVcnvVN","b21ajk4OVCFaI/V+PhIEwx","c1fALl+y9O7rcdRXyuttEI","eegj9vXiNKnZIP+idCPo2Q@f9941","9130Am4qdJc5vZgP6QC3VU@6c48a","f6SJZOjTJB/JrJeh5xTdF7","d4rvzUFUND3JkDeZ3trf4T","45kJO5Za5Di76ZxpT2HpN6","b5snqx50BDmLQHhI/CssiX@6c48a","eadHiwQI1AUrcD8NI1Xglf","20g1ukYUVPvKWKBRznAKo+@f9941","74FHccKbxNSrieq0Xupve+","19U8buGCpBoKF8or2ipqwe@6c48a","0cSTdMWAFM3rvsABxj0oLP","47YTgGHGBK9KFdaEX6IFQN","7eDf6SCGpKtYyLTvgsy5lp","35kijYVVBJEKpJxZw8Gjl5","49gzYSRRlNzK/ZDiJm3lbe@f9941","12Y9dMgWdJKJGmTiZyQR9H@17020","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","d3x4IMKphEKYvHuEU7yaxB","79XPoW/N5KRI4jPPbCPm3U","3fb5W9qVJG0qpjVVyxEQke","0aDVYaA/lLL4Jq268cxfdE@6c48a","dfthHZSE1Azo9qUYlByVt3@6c48a","13ndxwafxNopBo7FA8O1WM","241GIJ2WNDHbLpgPiQ5x0X@f9941","9bknYdtJRJqquKf+nC97ks","411k87jBlIMZrpWgmfEXy9","964FMB5u5E6JV7nOISENOk","d1NGQ2rJZCcbhjH0/erZWw","5eXto5mOpKBq89YYVenc3K@6c48a","458d5ymVZJa5AYwj+TnkAT@6c48a","9aQ96f/1ZK06MgGrFmEOP3","ba6WTtEqBMYJC8zKmP/rcI","f0NM+XOc1NtIgasPPXRteE","bdsiw/ZzRPjqVt1nzsjZT6","aakOI3jQ5EaIfp9PqCp9Ic","12Y9dMgWdJKJGmTiZyQR9H@a804a","a3zQCfCrBCDZJ4uf2rk5u8","beqIctrg1Fg4PXs0xj8fQ4@f9941","ff7PlvTktOT4dPeAF91EKl@1008c","eb+oJ7CARAa4FJEsipeUGv","bbfy98TXRNsKcSAJj2T3qE","50u6ipYltAeYiOa0/0WAHT@f94d2","bfNVUHhrFPNIWzAa+CQXD4@ebe84","80YG8VVkhEEaRlhrbORGB5@0960d","fc3rh+Vk1HXJrpIYsuVXhO@f9941","83Mo4StotFK4+hbbDXPVPt@6c48a","5fArA5+9VEh5Unea0BWqx4@f9941","4ccE9EbdhGP5oN7m+uCp1u","38p/JjTbRA/ZM3O46ElGyx@f9941","47ybXtLZ5A67rJvaoW97AK@f9941","21BbCRnORIYpTXlQHgmdPn","e7PaSylAxNsJGlWiQjvVIq@6c48a","157kFjB6NI0ZjFgeb01vKP@f9941","dayIxUSIlGUoOYdFyM/hWv","41RTU08KxPvIgz4uUdzeSX","c6dikiC9pK171tS9m5cZfr","7b/cd4+ZpEGYNrM0GX/9h+","12Y9dMgWdJKJGmTiZyQR9H@fc873","e1tpuxZdNKU5HOhvKhy3vd@6c48a","06EtGNN4ROUI5pYjJrO+wq","8dRQX+HDBMdoYGFV6I2gOP@f9941","01kv5TdHFKApUTO7zPmZJm","883naem4JIk6qErbYP15T4","8dDuAO1EJNTof32jabvSsy@6c48a","feS+Oim1pKGoItvor9c9ac","94TkpVKsxHopwRMEB9lMDk@f9941","5aW5bNec9J5ohbBumvdHmx@f9941","a5C2OKS09Gr56/jfr8JbDh","e0sz7W62RE/4AlPIyJ4rVn","d0Wb/NxZ1As63pkLfmeJAJ","06v+J3vChNSbhSwvhARNL7","d2bey0NPJF5K/Z9aM2/y/x","1brw/JvvpFnIvdrxpFCgMZ","d8ITjdJ65J27jrON7HkdFq@f9941","95J4eiNC5PS46/3KIfOKP3","99GXHEIyREFY9JMRF8lFRG@f9941","03dkRa2lVKdbcnuzFKQprn","b2fqEhseNB9qTwg3eaBMji@70c3d","c7eWgrp05Enq1HV2tAbbSY@0c18a","76XbSWhf5Nu58yy09j/dWf@482cf","7dSdBs77VBP4APJEj/UYIH@862d4","dbz5zR6GJGgavEM9jY6fNA@d23d2","51kbPy0wNMPJtRnUwbu5Rb@baa15","9eGqfC7vpBVZ2wAJmO3l5j@4b134","cfTpGFd81Ksq68S9yz0+J9@2f364","89MXmCUv9Ov4RziM+8aRE8@0fcfa","3fyClbaGJFz5H8HgmoHoqe@ec7f1","edgBqm/ttJybdMEeLCQl0P@1eac0","2euHe/WatLXoRwOBRtxds2@4f646","9aOcxg+KhEH478N+yKTA8s@57ec8","b5YpM+QfJKJrddvoJe2V7h@a8d5c","5cgLF+TQxFnKfPzycxCxAG@6812d","b7kHmp0sBN66Kok5I3wbCS@d1e5f","99QdSVSUVF4J/vB3sez3aS@c1af8","adb0W5KlZCJ6VOcijwcTox@32c6a","544gKVZjlGvoNIwG/+pV5M@3f7b0","e1OFZtympH55XYter7c/Rl@3f590","c7suwoopNKyaOehSH43jdV@f9e07","13C+M9jvtGBKczUYHwda6Q","e54pKiUuRAH4QQYbYUr0q2","daLu5h7pBGP7vNlBU8ROFc","a9ciBN1WxPj79jedaq0quh","67z5h0yvhPfaXCfdD3nz8Z","775UBtVwlLGLk3o21N4W8I","79n9eoM59Lgq4IrC8q/x7l","76rmvWLeZEtbSGvRti8NNF","d6K6NwbqpC45SpBRkP3qEa@638ba","72rlalWuJOhrQuDs7JLXsX@6c48a","ffl3L6PkREpaWuOW30FeC8","a3yhcyCCVOAbLXYM01zD7w","67T1eJBilG9o+6wuiSh+k7@408eb","48CaBYJAZLzLzQDpT3h9uJ@f62fa","4eBGyNSOBOt7JaDxqLNIwF@f352c","165hLPoVdL17g0N2G7I3ee","ec8SIyk9BLE5VnkH0oylwE@6c48a","a0+NcmevZGd7ol3MnakYVe","8aruAyoSFNoazrKwBWGKJ1","c3Lgor+oJM4YuPcWlFspp8@f9941","a0jTGwZcpAloFOuEbZ5TrX@f9941","6bViF+RQxJSJfHSsoz2xMb","6eu2lNtlRIW5OTv7/+uxyy","e39Ms1to1Nu4y5I1eYQeFo","f53lYrXlRNq5YTCYnPxK15","f4jofQEhtKuKAX3jpVMxgj","9didMS6tNLw7Ft4paE1Hl7","b3spTF+DJDrorlmdpYTh6s","b5nZbXXA5Ob5tHmvmU7cjz","22KgKpx/xGVoJsL57FWNCI","ed2tjZAfhIqrlraFn0z6nP@3e9b7","adOqJthyJBa6G6PzIWKael@678ab","cdd4jL2d5MHobR0bJXPk+p@c244a","d96yFaYhVNvqwZApbAVz7q","f9rqCjsR9P/6e/R3PHmR6N","47FjzSQjBDI54L+ofdoJC+@6c48a","f8jPaawz5Npa5mBALcitOQ","70pJ/3Q61E3Zmxf2W/n42c","c3GpAbZxtMPZJG+abl8UuQ","3ettQ3QCNBsIV+Ealfpdy6@2cd2b","e3o8htjGJJa6IXi1Gyy6FR","f6k3PZqsNBybAjIRTPSH5Q","c43pGCiiVCMZE4miDEprLc@0e59a","afAdeoDw9Fq6L4qKP2jjXt","e1OFZtympH55XYter7c/Rl@ecee6","bfmMtzr4BKmZmX3xZKFvu+","870L3omnxOwq9fiCdJnhyr","40+KuGRZhGnbkYfcMvvUgZ","0ftns4yOhFP7rVqeKf1a23","0fy0JuDZdEFLu7Nfd++wKo","82MQEW2ulPqoRYqpDNqR7T","20GyRP5pFF9pU0o04llct9","f73vBSHFdMiZmEvJA+3ryO","67fenIPP1F4790AY2X7/Uh","0dfQ051iBOLa1AE7XF2uK8","a2fNNVt1lB1JmNAoBZE01P","9956WMue5JSYRjHHMKh4x4","28MUdnCipE94/tFCQ5/Cl4","fdxUDMg+FKd5l74czAumFG","f1fCiRruhC7Lz6eZxAUlPM","6ewcG4l9dBw4ScUXX9v3TV","a7TFioGd9CJYqH8N+yJWwQ","5fNMXSIo5KkYHxqVtqs6cn","fbsVm0XutPYq85z1OSO2j5","ac9VT97xFAkqSOTYBQxroy","2fZHbSA0pO/q+Mj22aLQpw","b2zVaVcZFOI4wzGS/3dmK7","b52u7xOeVJfZdxzRj/0Ykc","49KE3HJCpJVLyg7JAnTtmP","fdQcfVEqlKoJDlEAqRU3yu","06zde2EVBDB4deRPBiR4+D","6fIwnrBQhNs62mJpOkBB1M","34ZaNJKzNNO5X4A2r4V2dF","3fVcKh5ShKxbIP8S0W9OtW","3dFbRDbV1Eqqef1fOLGPf3","05jMMoZmNFT544YBRrphjV","3eTrnX+FhCwoCMwyDvmWD/","f9KXCUvbBPFpTJzuasK0kt","59phXLfedO3JuwQISQhq55","a3DlPis/hP0r1S7ulf0b0p","01EMrxkylKCqnTWY4kDr7D","f2QNclZ3RH2aV3W/8M3zMG","86FwwOeqBMaJTQQkGsnZa5","69HmLh6KpPs6BsmBqh7pdy","caak4X1ExOHIPkx1gczROi@f9941","0eNGXgewZNWrXzi4eh6pVY","25RW0P8yxGnpL1VIlxZDBX","e7NhHEYexOhIwbfDueY2VU","92OWmi0J9LvLJh5C99B64c","951JpRXxNFUIB9jqbDBdBf","4b08OquSJNOoZ3Xx5PCwTx@f9941","26b2Dh9dZOHZB8ONJDPdx9","fdRgO02s9Ld6mtZO+WuvA2","d7DY3IqWNB0qhS1ck3iUED","93ZbzT1KlPiZfakCLNUEsA","15MVKYyI1PvbZ6b86i+lvZ","acASjebPBAq7kn6ZAGu5uV","ab0BlDnQdFaItC+Wz5kPgP","10FZHf5YBI+bZfi2MU34Fe","99QdSVSUVF4J/vB3sez3aS@726c1","b4Q31Ro+JDc4z5Hao5UU8/","c5HTsXRf5EGKd1gIPOBnUz@825ed","c5HTsXRf5EGKd1gIPOBnUz@7d6ab","5cgLF+TQxFnKfPzycxCxAG@13c6c","76XbSWhf5Nu58yy09j/dWf@b60bf","e6DL9/KgtFGJwyZTHiw34j","a8Ofyb9TlMIrlQZv70qhBw","7df28ghq1Cj6OYyqgS+Z1b","22BwgbEYNJSZP8+LLEr3Ck","77TmHxBsNFOoLPCtsMNZV0","17OMvhmrVNdIQVeM43c2+/","c0apHtDyBD9Y2iqwmVOA8l","56duDiSVBFX4/rYc5zc5X8","5ckx17sDNEz6HSZ6gZ896M","a2YJ/yHMdB1bIQ68Kj+HV6","4fWXFr30lOqbRk+AlIjR+h","99BpM9yCdDzpJ6yEcLEKD+","8222EpWqJGpZZ9Ec+3TSEG","27n/ib7x5GM4Xlj/74LtQG","e0yJKshP9E37Z0938Mgjpa","9deSQaz1FN54ox1Q4rLb/q","0cncXbHXVKrptSq+AdfWyS@1056d","2euHe/WatLXoRwOBRtxds2@3c6be","34JDcg001PH4SZJqYkSvVN","7dSdBs77VBP4APJEj/UYIH@7fd05","a8yy7IkkRCqLAjPBiTwmaX","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","3fyClbaGJFz5H8HgmoHoqe@33f9d","79Ju9BC4VLDYixxI6tI6b+@f9941","ccN4VA4YxDnKzLe2fpCME6@f9941","55jdrQwoFGK7sDP2O82lQ8","40lNW8NphPba+haJMSHFrA","49KCyVd3pKhJR8k5U/7cnT","c30tEDulpIUahlE1OrZomG","60HyogIHFGh5YYVrsV/1EP","7fSRNxWB5LhJHDImAgHIMB","51kbPy0wNMPJtRnUwbu5Rb@4196b","544gKVZjlGvoNIwG/+pV5M@f6c3a","e8dk5kJvlPvo7IkD4LN5eJ","bfAox3UQNIDaizH+xtWQyQ","50u5IpRNdCfYTqWp/QfkrE","d8pCK/tc1CYrjgbPXXVUff","e9nxzx0chFiJzTKOhJf5CH@6c48a","b5YpM+QfJKJrddvoJe2V7h@e567b","9eGqfC7vpBVZ2wAJmO3l5j@17d9a","20C8YyrSRO2JpDQ37sqC23","edgBqm/ttJybdMEeLCQl0P@02e3b","cd44bOVKdKB5yHgBR3Jb3O","adb0W5KlZCJ6VOcijwcTox@cedb5","89MXmCUv9Ov4RziM+8aRE8@a7d69","f8vRAzBmZDLYo/mQ/+ndIe@b4e5d","dbz5zR6GJGgavEM9jY6fNA@d261c","9aOcxg+KhEH478N+yKTA8s@0bd7e","c7eWgrp05Enq1HV2tAbbSY@e7d69","b2fqEhseNB9qTwg3eaBMji@7da2f","c7suwoopNKyaOehSH43jdV@b0092","27NZNIZaFLDY/7ieLAst9r","18z8HsqM9PD6KiGmzJo/cx","b7kHmp0sBN66Kok5I3wbCS@2fbfa","cfTpGFd81Ksq68S9yz0+J9@71bdb","643EzH3tRGb7EoznsJlnhF","3csnqf+4hNqqNGxMoeFSiX","691na27MhIW50hnZbE+mzv","49F9a14gxOwbJDZK5idOSz","69eZl+GkZAw6glMiCxw1fP","1dHAsM3TZGLLtFD1VhRXJd","0bKlit6E1L/45YMHsd71Ci@6c48a","1dwG24X8BJsr/8Q3kN+Fcy@6c48a","51+tjFnEdC/ocBiQgNo9bb","ff7PlvTktOT4dPeAF91EKl@4ac35","01nr6V6JZHxpejrthNEAnp@f10f1","01nr6V6JZHxpejrthNEAnp@29428","b0qKwGvalHkL/d6vdFtSgP@f9941","e7OyE7YyBP7bbIReQmk86U@f9941","38dvFe6lxANaOayYqvEGXU","b5rsshQg9I4JpG2RvaPVao@f9941","e1bEl8/ktPu4Na6cdnpx5A","65tIBARy5Fa6lYC4Ffs/ji@f9941","43SroQCgBLm5cYmZapgjMA@f9941","1a1aN0gIJGt7siiTc3mWZi@f9941","c4CtF7uJVCJoHMKQxzNRRy@f9941","94Dg7hrZRJbLmm4gxJYCmI","c7TSIT5EFEWq1QbKrB9eEy","82Ks/4KsNMb5tWebKdkrjN","eenvN61m1J25ES4hlCTLgA","29oUQ15NxPaKUOz9YbBw6s","4bmlw3HvhF37V/PPHel0BL","06MMkdH6pNhKZqBtxYqyPy@cf430","06MMkdH6pNhKZqBtxYqyPy@5c421","99kTuj6AdCQIazXDT4o01G@17952","08FmsGFj1Co4ghvRCNe7l5@90a35","08FmsGFj1Co4ghvRCNe7l5@18907","bbxquLWAtDM56TUeCDZ87V","0cncXbHXVKrptSq+AdfWyS@44601","0cncXbHXVKrptSq+AdfWyS@5b1d4","37va5QrUtP/JGot/vFsItw@da86b","03ixxzscFFYoCbEmhiQ0Qm","aeexYGWwFBx4/P4A1FmrNR@7db75","05hDFigw9Fs7n49sR2mEnv","cdd4jL2d5MHobR0bJXPk+p@bb2af","d7wH9C0bBCtaFJatphTN15","d67DVgTPVDBqT+VYeDQRQS","ae3zwNoPNNVp2Rm9uUOEmG","0eL3jHrchEELnt8g+JGmN5@6dda2","0eL3jHrchEELnt8g+JGmN5@93735","27VfxVWOVA6rDLTZ1MnbiW@f7074","4bvvxTQ41An65r34u2+RCT@c85cb","12sy2vqsxLpqLQvPfA0KeZ@73df1","12sy2vqsxLpqLQvPfA0KeZ@09513","157kFjB6NI0ZjFgeb01vKP@6c48a","57UgcWSMhKGYrPQcn4d3+w@f9941","a26C2ljdZCWpHXja4Ih+g+","e7PMULPuZHvJ96CO6lleMc","43Y5sG4OJFvpzoSoHKqyCR","1a1aN0gIJGt7siiTc3mWZi@6c48a","1bd/J2kzBPkY7C0fOYrsCI@a4e62","1bd/J2kzBPkY7C0fOYrsCI@0344e","1daJeGv8hIBrCDYRrW8dol@ade6d","1daJeGv8hIBrCDYRrW8dol@e97c4","1e607HVMZANbi5JiRYPqdU@44b9f","1e607HVMZANbi5JiRYPqdU@bea09","1f5N8l5DtKo7EOlIrVguDz@9f069","1f5N8l5DtKo7EOlIrVguDz@d8f22","1daJeGv8hIBrCDYRrW8dol@d56b5","20g1ukYUVPvKWKBRznAKo+@6c48a","241GIJ2WNDHbLpgPiQ5x0X@6c48a","27VfxVWOVA6rDLTZ1MnbiW@2bc87","27VfxVWOVA6rDLTZ1MnbiW@b608f","c0jFfpqVRHT7CURHvk4fvb@b4cec","2bPjo1Qg5FVLrp8u3QUuoQ@6c48a","839RfstXxF1IRJtXXY4dMg@e77e3","faXyixPOVNDpnBXexCNF94@5c421","38DQ4H1I5MQarUOFUtEorv@645cb","75nOjWMaNNM6O2nQlEHYt7@7d0a2","72+J64IjVIOrRmgyy/lnXd@c92ed","6e4K2/7wlA0YOeKN3qHRnQ@2adba","f0pBWTlVZJIpU8Yx3lx/y6@cab79","64co0hzn5O+arcUKwiJ08r@42227","d89A+bjdBGGYYK1qwFkpFG@bb1eb","71QcKMevNLpbsJiogRDfJP@60715","ac/E7VCehGt492ycDEpguF@45a4e","01nr6V6JZHxpejrthNEAnp@e6f22","bbnXRp0K1Mw4uLpL5oQiBL@d84ae","2euHe/WatLXoRwOBRtxds2@1bb18","6blRW5aUJPw5VjZt4Xbkqv@af651","32y3a3zYRGbIfr9bwsc2dE@73c61","32y3a3zYRGbIfr9bwsc2dE@ac3e5","57ZD14qyZKl6FktQ6+Qjh9@e8225","85dFCHoWBCsKYCMuqh7xbZ@6c48a","37va5QrUtP/JGot/vFsItw@d52e4","37va5QrUtP/JGot/vFsItw@fd4a2","38DQ4H1I5MQarUOFUtEorv@2e2da","38DQ4H1I5MQarUOFUtEorv@42545","92hV48pOxDDa4wIgjMt/kp","38p/JjTbRA/ZM3O46ElGyx@6c48a","b5/33byRRG6JdPhtE/zhwn","7026fl0s9G2Jo7UWJCVgAy","c2gPFv/ihDg6Z1bNAaSRKt","c9ltVKPvNC/5zDVa1BAVcy","3cf1Cu9OZEOKuuYAae5+Rh@81c0f","3cf1Cu9OZEOKuuYAae5+Rh@3a858","3dDqYolTNDSqjncv35pTnp@35fe0","3dDqYolTNDSqjncv35pTnp@88b23","a2gmgH3nVPkqxj293IDuzr","3f3kXI7mNEy4vMcK+v0ih7","a8WTSC+p5Ac4RLhvklaxxH","52/3KBSHFCnogqwkNfU59v","25Yl5NS6tPbbxYUK9N0I3d","fa3FAsExZMKK1z+NeBxmoY","3ettQ3QCNBsIV+Ealfpdy6@9bcf8","3ettQ3QCNBsIV+Ealfpdy6@6fdb7","3fyClbaGJFz5H8HgmoHoqe@cdfe2","db24Ij7r1Ieren4RiiVlV6","43SroQCgBLm5cYmZapgjMA@6c48a","a7MTB5qONENqF7gvNDmYaX","64vNXVRxFGiKqi31Ps9PdF","47ybXtLZ5A67rJvaoW97AK@6c48a","97D4OuyNdL048sZ4Hfej5U@6db04","b6EeQM+jlLDZQ7NvzDzsDL","9aoz2rn7xBlYgMOZV83Bo6","1bAV+vNoVMqp1RogaYL/xj","49gzYSRRlNzK/ZDiJm3lbe@6c48a","87tKi3j3xGI7U2z3cw/X+p","09WFbRUDVEOYJaLcKaympJ","4bvvxTQ41An65r34u2+RCT@5b57a","4bvvxTQ41An65r34u2+RCT@d78fc","4b08OquSJNOoZ3Xx5PCwTx@6c48a","4eichtYuBFK7GEybo4VuId@242c0","4eichtYuBFK7GEybo4VuId@b2c37","50u6ipYltAeYiOa0/0WAHT@4d711","50u6ipYltAeYiOa0/0WAHT@b80d4","51kbPy0wNMPJtRnUwbu5Rb@ea756","51+JWUM45MvrNqh3cPhmeH@f241c","51+JWUM45MvrNqh3cPhmeH@5c421","54TknWPwVPqJqeCR+Y/Czo@6c48a","efSWrXlz9INroB4y8mvMsA","f6/JQLPIVOvYoeuYugLfYX","1bpVTi2v9GU7HwEjniKBrr","1f5N8l5DtKo7EOlIrVguDz@8db91","06MMkdH6pNhKZqBtxYqyPy@2f010","51+JWUM45MvrNqh3cPhmeH@cd7f2","84ODC1/Z1JU4OMZPfhiGad","b5fcGoXR5IT4ljeGZ6l7YU","3eNg0FzJ1LYpk0W9Vf1D4f","544gKVZjlGvoNIwG/+pV5M@cbb8f","57UgcWSMhKGYrPQcn4d3+w@6c48a","57ZD14qyZKl6FktQ6+Qjh9@e6475","57ZD14qyZKl6FktQ6+Qjh9@d482b","5aW5bNec9J5ohbBumvdHmx@6c48a","5cgLF+TQxFnKfPzycxCxAG@d8d51","5dG1KYKNZFUbeRQvNPn8j/@53f97","5dG1KYKNZFUbeRQvNPn8j/@54ccb","5fArA5+9VEh5Unea0BWqx4@6c48a","32y3a3zYRGbIfr9bwsc2dE@45dd9","64co0hzn5O+arcUKwiJ08r@2dd45","64co0hzn5O+arcUKwiJ08r@b45a1","65tIBARy5Fa6lYC4Ffs/ji@6c48a","d9ZnhwpcVKr4AW85ZL7451@d639f","68hiAjVTFOA5D4sQ/6zDuE@d3bd4","68hiAjVTFOA5D4sQ/6zDuE@41ac8","6blRW5aUJPw5VjZt4Xbkqv@5b9a6","6blRW5aUJPw5VjZt4Xbkqv@45f73","6eWV7ZPUdAkqYEWkdjVAjG@eb276","6eWV7ZPUdAkqYEWkdjVAjG@c6e33","6eWV7ZPUdAkqYEWkdjVAjG@6924c","6e4K2/7wlA0YOeKN3qHRnQ@21c72","6e4K2/7wlA0YOeKN3qHRnQ@d8a69","68hiAjVTFOA5D4sQ/6zDuE@2fafe","c5M9doA3pGgIc+Via6NGbh","12Y9dMgWdJKJGmTiZyQR9H@8abdc","d9RMZX25xChKHQL/qig5yS","95HVcRh25OW5y2llI+JaAl","71QcKMevNLpbsJiogRDfJP@812cc","71QcKMevNLpbsJiogRDfJP@38a9f","72+J64IjVIOrRmgyy/lnXd@12f8c","72+J64IjVIOrRmgyy/lnXd@e97c4","75nOjWMaNNM6O2nQlEHYt7@ce9cd","75nOjWMaNNM6O2nQlEHYt7@2e7eb","76XbSWhf5Nu58yy09j/dWf@5150d","33bTAlU99GPqR9S1pVwfwG","9dHuzRYYRNR73ufZTBAqZE","1e607HVMZANbi5JiRYPqdU@6397a","887sx7tMVKYKVim2mSSVLr@d4ad7","cc3d8D7q9FdLruQQRoJZ7I@3f699","29+emHF1hFVbG8frdX5o2E","79Ju9BC4VLDYixxI6tI6b+@6c48a","7dSdBs77VBP4APJEj/UYIH@43857","0dwSBnz6BG3qs2NZBNufsF","781bTuBc5P9qHwbxkDNOAU","4bXnRMNsJFfKyg2voQgyYi","54xYIybcFMDLSvj1dzHUII","2d3P7E3kRGS4zi0oLIlz21","951aZ5srZK/aFEMzXdz/IR","54thyxc4pFqaduGFl3q5LF","80YG8VVkhEEaRlhrbORGB5@cca6e","80YG8VVkhEEaRlhrbORGB5@0d8b3","27Yo5aAR5Ntb+jgfErw+a7","e0iwNJUNdK4ropj/s+sFyb","839RfstXxF1IRJtXXY4dMg@bafe5","839RfstXxF1IRJtXXY4dMg@90ea3","03W/ragWhDzJrSgY7NV0Xq","dc8gycz/hHBa6mqN0iAl6h","e2zJH57A1D24RynW/Wk2X3","e0mTQiWY5KzpKJ9Y5LPy2W","10p6KV/8pHWpSgvzk57olP","72cHf4qa9JMZ2cUkRATyhN","6eS5tpSOdAKJcUmgGI1A9F","4cDlFcgTlMvbDW40+xfCPe","12sy2vqsxLpqLQvPfA0KeZ@33aff","887sx7tMVKYKVim2mSSVLr@3604e","887sx7tMVKYKVim2mSSVLr@7594b","89MXmCUv9Ov4RziM+8aRE8@7a59b","e7wl1ZzhJDTaXvTIqIqHBa@08914","8bv4XdXL5LnoyPRyZ6e/pb@abfda","8bv4XdXL5LnoyPRyZ6e/pb@40189","8dRQX+HDBMdoYGFV6I2gOP@6c48a","94TkpVKsxHopwRMEB9lMDk@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","f9KCwKSP5BEpXjaqOqSOPT@c5828","97D4OuyNdL048sZ4Hfej5U@44804","97D4OuyNdL048sZ4Hfej5U@d8a69","99QdSVSUVF4J/vB3sez3aS@eea49","99kTuj6AdCQIazXDT4o01G@dfbcf","99kTuj6AdCQIazXDT4o01G@97b51","3cf1Cu9OZEOKuuYAae5+Rh@a99af","9aOcxg+KhEH478N+yKTA8s@60679","646+Z8V6VPPZpooyv9gW6F","9eGqfC7vpBVZ2wAJmO3l5j@138db","9ffY+YuVtHsq1iC4psITsd@b9763","9ffY+YuVtHsq1iC4psITsd@cce37","a0jTGwZcpAloFOuEbZ5TrX@6c48a","a04HV/W0xMMoVGPgjU6o7x@6284c","a04HV/W0xMMoVGPgjU6o7x@a8165","5dG1KYKNZFUbeRQvNPn8j/@d8169","0eL3jHrchEELnt8g+JGmN5@62b5e","0bznSYcKZJi6sduVI4brQz@6c48a","173rzDCmtLirAL3Fi4hVge","8ePeiZ7PVCer/tP0Im/HxO","a04HV/W0xMMoVGPgjU6o7x@6c586","ac/E7VCehGt492ycDEpguF@20240","ac/E7VCehGt492ycDEpguF@f702a","adOqJthyJBa6G6PzIWKael@21ffe","adOqJthyJBa6G6PzIWKael@70a10","adb0W5KlZCJ6VOcijwcTox@18557","aeexYGWwFBx4/P4A1FmrNR@063ae","aeexYGWwFBx4/P4A1FmrNR@70a10","b0qKwGvalHkL/d6vdFtSgP@6c48a","b2fqEhseNB9qTwg3eaBMji@bf9fa","3dDqYolTNDSqjncv35pTnp@78c48","b5YpM+QfJKJrddvoJe2V7h@859cb","a7NEhiVaxOmq4ruDBFL7K9","0f0VKeb/tP5Z5MbsvGXcA9","49Qq489O5Hi6r0+HouM4le","b5rsshQg9I4JpG2RvaPVao@6c48a","08FmsGFj1Co4ghvRCNe7l5@6ad9c","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","b7kHmp0sBN66Kok5I3wbCS@eb87c","bbnXRp0K1Mw4uLpL5oQiBL@77a1a","bbnXRp0K1Mw4uLpL5oQiBL@05e54","2bPjo1Qg5FVLrp8u3QUuoQ@f9941","b3DAUapdlHIrpydKKLVWLw","eeY+2/plNA04Nwi5+bGlEx@6c48a","e7MSwmStpEE7PsJu7sJ5Xb","beqIctrg1Fg4PXs0xj8fQ4@6c48a","bfNVUHhrFPNIWzAa+CQXD4@285dd","bfNVUHhrFPNIWzAa+CQXD4@0b3b2","1bd/J2kzBPkY7C0fOYrsCI@7fb70","c0jFfpqVRHT7CURHvk4fvb@a0177","c0jFfpqVRHT7CURHvk4fvb@9a1ef","faLwxJLhRF/pXM5wgdsJJi","c3Lgor+oJM4YuPcWlFspp8@6c48a","c4CtF7uJVCJoHMKQxzNRRy@6c48a","c43pGCiiVCMZE4miDEprLc@f0cae","c43pGCiiVCMZE4miDEprLc@13319","c7eWgrp05Enq1HV2tAbbSY@34d41","c7suwoopNKyaOehSH43jdV@308f0","caak4X1ExOHIPkx1gczROi@6c48a","ccN4VA4YxDnKzLe2fpCME6@6c48a","cc3d8D7q9FdLruQQRoJZ7I@788b3","cc3d8D7q9FdLruQQRoJZ7I@03807","cdd4jL2d5MHobR0bJXPk+p@5a3b5","cfTpGFd81Ksq68S9yz0+J9@9645f","d6K6NwbqpC45SpBRkP3qEa@7c7f1","d6K6NwbqpC45SpBRkP3qEa@70a10","a9ETyHmtxL7ZgQUFsXomB/@6c48a","d8ITjdJ65J27jrON7HkdFq@6c48a","d89A+bjdBGGYYK1qwFkpFG@f7ea1","d89A+bjdBGGYYK1qwFkpFG@c5c89","d9ZnhwpcVKr4AW85ZL7451@64cfc","d9ZnhwpcVKr4AW85ZL7451@c2d4f","d94i0LLVpK0L14aPzYufNe@39098","d94i0LLVpK0L14aPzYufNe@3e56e","dbz5zR6GJGgavEM9jY6fNA@5c390","e1OFZtympH55XYter7c/Rl@affd9","e4aje+YNlLwa4SzSuuT/8B@42735","e4aje+YNlLwa4SzSuuT/8B@69165","e7OyE7YyBP7bbIReQmk86U@6c48a","b1rQPh77NAaZJBX/dr1+Ar","e7wl1ZzhJDTaXvTIqIqHBa@ef971","e7wl1ZzhJDTaXvTIqIqHBa@7b9da","58ahD5ralG5KIRLQcM8L40","55MQA5ZUZF6Y3iJniueAFV","6azJRRF8JEQZM4Gw+10rzh","380uoHmM1HtKcv03PyFCwH","7eenc3FFNGN6/glekiVICJ","04LhIy85JCmbmQVZHzS090","3ei5zKrUJCx4xF78MRFuS+","01mn1bEapACoLPFDcK4EFU","4cybZ2qzJJ07lniGvIpH5X","5c6cseuftEQJad2kXSV8F7","0cm26aWc5JQr7siuI5CmGK","055vq6wg9PRY4THynhWSRe","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","29Zz/LetFFhpmd4nvWMTxw","edgBqm/ttJybdMEeLCQl0P@fbe56","ed2tjZAfhIqrlraFn0z6nP@5f9a5","ed2tjZAfhIqrlraFn0z6nP@70a10","bc+GnKT9xOaaUJecB3oSUH","a9eAdJiaFGda//Klslv4it","79P9UX5atAO6K8Mzyw4AQt","79R7fJtO1KiqNW7q1HDgiS","cdd8whYh1C9YvxboJd5DGq","77319xcVtIVIqWDgjGtjOo","d1pFXxrpBJMq/39g8/hIfX","a6bd/eEepK6pX/n5+Slzqj","9dA4XZosFMjZ/ADX+l1L82","15kUMzY/pF+pSEXOWavKEN","97Wsy2Q4ZJT7NkbW9Scn02","39/bzMxaBEg5KqRxs86O5d","83iNWgbgRDQZKdgHKv/ssH","78RkkNifNHWpN2ML+v1cVS","11S/8b2iROW505BqefxqkJ","0d2QUqmkBMe7VizaI7S7Ja","b21d8/fSVOSKLNyR0u9eCl","bdarPXFvBKiZybpkyEls5G","84SJNDsWVPaIwSMG6fK6OI","01lHNM9H5P85aJxnbRAWno","6bBUIuuthNH6NZx0cOb2pQ","f0pBWTlVZJIpU8Yx3lx/y6@de7e1","f0pBWTlVZJIpU8Yx3lx/y6@f051b","d94i0LLVpK0L14aPzYufNe@fd5ac","9ffY+YuVtHsq1iC4psITsd@9274c","f8vRAzBmZDLYo/mQ/+ndIe@185d8","f8vRAzBmZDLYo/mQ/+ndIe@5c421","f9KCwKSP5BEpXjaqOqSOPT@83c18","f9KCwKSP5BEpXjaqOqSOPT@b4f62","e4aje+YNlLwa4SzSuuT/8B@7569e","fc3rh+Vk1HXJrpIYsuVXhO@6c48a","4eichtYuBFK7GEybo4VuId@2e1d1","8bv4XdXL5LnoyPRyZ6e/pb@6e50e","9aO6YgMLJLcreXFivvADdM","ff7PlvTktOT4dPeAF91EKl@0ca75"],["node","targetInfo","_spriteFrame","root","asset","target","_parent","_particleSystem","_mainTexture","value","data","_font","_mesh","source","to","from","_effectAsset","_defaultClip","clip","_target","_normalSprite","base","head","commonLabel","graph","_animator","_hoverSprite","_pressedSprite","_disabledSprite","_anyState","_exitState","_entryState","_stunController","_textureSource","_movement","_hpManager","mainTexture","shootPrefab","headModel","_worldSettingsPrefab","_towersDataPrefab","_enemy","_button","entryNode","_cancelButton","_confirmButton","prefabRootNode","_backButton","_material2","_lackingButton","_formatter","_attackVFX","_detectionRange","_targetChooserPrefab","_setModelsToUI","_collider","noise1Texture","noise2Texture","enemyPrefab","_adsButton","_towerTabButton","_commonTabButton","_resetUpgradesButton","_commonConfirmationPanelNode","_towersConfirmationPanelNode","_levelHintsPrefab","_activeStarSprite","_inactiveStarSprite","_pointerNode","_towerBaseParent","_towerHeadParent","_towersBasePrefab","_lookAtTarget","_pulsarVFXScaler","_pulsarSpawnNode","_beamSpawnNode","_node","_sprite","_label","_towerHolder","_terrainPrefab","_outterBlockPrefab","_rayDebugNode","_burnSpecialPrefab","_commonBulletPrefab","_modelsToUI","_baseModelPrefab","scene","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_components","_prefab","_parent","_children","_lpos","_lrot","_euler","_lscale"],-3,9,4,1,2,5,5,5,5],["cc.Widget",["_alignFlags","_top","_alignMode","_originalHeight","_bottom","_originalWidth","_left","_right","_horizontalCenter","_enabled","_isAbsLeft","node","__prefab","_target"],-8,1,4,1],"cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_objFlags","_id","_components","_prefab","_parent","_children","_lpos","_lscale","_lrot","_euler","__editorExtras__"],-2,12,4,1,2,5,5,5,5,11],["cc.ParticleSystem",["loop","playOnAwake","duration","_capacity","_aabbHalfX","_aabbHalfY","_simulationSpace","_enabled","_prewarm","startSize3D","_aabbHalfZ","scaleSpace","simulationSpeed","__prefab","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","_materials","node","bursts"],-10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,1,9],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","_enabled","_fillRange","node","_spriteFrame","__prefab","_color"],-2,1,6,4,5],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_lineHeight","_overflow","_enableWrapText","_horizontalAlign","_verticalAlign","node","__prefab","_color","_font"],-6,1,4,5,6],["cc.ShapeModule",["_enable","radius","emitFrom","length","_shapeType","_angle","alignToDirection","radiusThickness","randomDirectionAmount","sphericalDirectionAmount","arcSpeed","_rotation","_scale","_position"],-7,4,5,5,5],["cc.Node",["_name","_layer","_active","_prefab","_components","_parent","_lrot","_euler","_lpos","_children","_lscale"],0,4,2,1,5,5,5,12,5],["cc.Button",["_transition","_zoomScale","_interactable","node","__prefab","clickEvents","_target","_normalSprite","_normalColor","_hoverSprite","_pressedSprite","_disabledSprite"],0,1,4,9,1,6,5,6,6,6],["cc.Layout",["_layoutType","_resizeMode","_spacingX","_spacingY","_paddingTop","_paddingBottom","_enabled","_paddingLeft","_paddingRight","_constraint","_constraintNum","_verticalDirection","_isAlign","node","__prefab"],-10,1,4],["cc.RealKeyframeValue",["interpolationMode","rightTangent","leftTangent","value","rightTangentWeight","leftTangentWeight","tangentWeightMode"],-4],["cc.CurveRange",["mode","multiplier","constant","constantMax","constantMin","spline","splineMin","splineMax"],-2,4,4,4],["cc.Animation",["_enabled","playOnLoad","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.Node",["_name","_layer","_active","_children","_components","_prefab","_lpos","_parent"],0,12,9,4,5,1],["cc.ParticleSystemRenderer",["_renderMode","_alignSpace","_velocityScale","_mainTexture","_mesh"],0,6,6],["cc.animation.AnimationTransition",["duration","exitConditionEnabled","relativeDuration","_exitCondition","from","to","conditions"],-1,1,1,9],["cc.Node",["_name","_layer","_children","_components","_prefab","_parent","_lrot","_euler","_lpos"],1,2,2,4,1,5,5,5],["cc.ParticleSystem",["loop","playOnAwake","duration","startSize3D","startRotation3D","_simulationSpace","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts"],-3,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["1eddcq+dFJL6Kd35j8xBAOw",["duration","easing","useCustomStartValue","valueStart","valueEnd","node","__prefab","target","onComplete"],-2,1,4,1,9],["cc.PrefabInfo",["fileId","root","asset","instance","targetOverrides","nestedPrefabInstanceRoots"],2,1,6,4,9,2],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.GradientRange",["_mode","gradient","color","colorMin","colorMax","gradientMin","gradientMax"],2,4,5,5,5,4,4],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode","mountedComponents","mountedChildren"],2,9,1,9,9],["c4d68jIEQZKZ5AKzGQQzzsP",["prefix","sufix","node","commonLabel","__prefab","_formatter"],1,1,1,4,1],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.MeshRenderer",["_name","_enabled","node","__prefab","lightmapSettings","_mesh","_materials"],1,1,4,4,6,3],["cc.Material",["_defines","_states","_name","_techIdx","_props"],-1,12],["cc.ColorKey",["time","color"],2,5],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","_enable","cycleCount","frameOverTime","startFrame"],-1,4,4],["da750P4YkNMQaDYb6vs4+jf",["_eventID","_delay","node","_onEventRaised","__prefab"],1,1,9,4],["cc.TargetOverrideInfo",["propertyPath","targetInfo","source","target","sourceInfo"],2,4,1,1,4],["c9120oqWzNEu7ayinGm/kcL",["_eventID","_delay","node","_onEventRaised","__prefab"],1,1,9,4],["cc.Camera",["_visibility","_clearFlags","_priority","_name","_projection","node","_color"],-2,1,5],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.RotationOvertimeModule",["_enable","_separateAxes","x","y","z"],1,4,4,4],["cc.TrailModule",["widthFromParticle","_enable","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],1,4,4,4,4,1],["cc.Canvas",["_alignCanvasWithScreen","node","__prefab"],2,1,4],["2022ebMdchE2pNL1SpqTm8g",["_debug","node","_animator","__prefab"],2,1,1,4],["eb61d1BRKpDnpWImZxs1KwG",["_eventID","_data","node","__prefab"],1,1,4],["a2b25EHeuNHtrhlTfnn9xoq",["_key","_delay","node","__prefab"],1,1,4],["72ee5PZ+hdMopet3lRswSwG",["_onStart","node","__prefab"],3,9,1,4],["cc.LabelOutline",["_width","_enabled","node","__prefab","_color"],1,1,4,5],["cc.animation.AnimationController",["node","__prefab","graph"],3,1,4,6],["aef56Y21r9E+J7yXKIjObFP",["_enemyID","_tier","node","__prefab","_initializeEnemyData","_hpManager","_movement","_stunController"],1,1,4,9,1,1,1],["133b7ahIhlFXJe04KNJ+98c",["node","__prefab","_onDeath","_enemy","_onHit"],3,1,4,9,1,9],["80495HhBfdC64qEifbVQrbr",["_buttonState","node","__prefab","_setCost","_button","_hideButton","_setButtonActive","_setButtonInactive","_hideClickedButton","_setName","_setEnable","_setDisable","_setButtonSelected","_setButtonDeselected","_setButtonLocked","_setButtonUnlocked"],2,1,4,9,1,9,9,9,9,9,9,9,9,9,9,9],["cc.animation.BindableNumber",["variable","value"],1],["ColumnDelayData",["delay","column"],1],["c3d3d1BwjRM46w7Jwj5DBqA",["elasticity","to","__prefab","node","target"],2,5,4,1,1],["LevelHintData",["levelID","info","displayType","displayTowerID","displayEnemyID"],-2],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_components","_prefab","_parent","_lscale"],2,12,12,4,1,5],["a8166/pfj5AOJwP6C7HTwV/",["_key","node","_onKeyPressed","__prefab"],2,1,9,4],["99672sUg5NFw4x7bEPAiyHE",["node","__prefab"],3,1,4],["cc.Material",["_props","_defines","_states"],0],["cc.ParticleSystem",["duration","_materials","startSize3D","startRotation3D","loop","playOnAwake","_capacity","node","__prefab","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.Burst",["_time","count"],2,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.AlphaKey",["alpha","time"],1],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["dampen","limitX","limitY","limitZ","limit"],2,4,4,4,4],["12ea43w32ZDAL2+IVCNZlsZ",["duration","node","__prefab","target","valueEnd","valueStart"],2,1,4,1,5,5],["5e48d52AelOTqiPc6aCFTma",["_includeChildren","_runOnLoad","node","__prefab"],1,1,4],["645f8g3LiVNPYTP4Crp5TTR",["node","__prefab"],3,1,4],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedComponents"],1,9,9],["6fb142grTxIZJl7xQ9x01vD",["_maxHPText","_maxEnergyText","_energyRechargeText","_gunText","_cannonText","_laserText","node","__prefab","_onShow","_onHide","_confirmButton","_cancelButton","_setItemCost","_setItemName","_setItemDescription","_setItemAttack","_setItemSpeed","_setItemRange","_gunTowers","_cannonTowers","_laserTowers","_towersDataPrefab","_backButton","_lackingButton","_setItemEnergy","_setPurchased","_setPurchaseAvailable","_setPurchaseNotAvailableNoEnergy"],-3,1,4,9,9,1,1,9,9,9,9,9,9,9,9,9,6,1,1,9,9,9,9],["TowerShopEntryModel",["head","base"],3,1,1],["Data",["_key","_actions"],2,9],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["51cbayfFYRI0b4PXBU6JCiq",["_eventID","node","__prefab"],2,1,4],["ac879rTendCEbpZWFz/jexs",["_audioKey","node","__prefab"],2,1,4],["0ca47t6TKlPq7GfoQTtu5fu",["_levelOffset","node","_setCurrentLevel","__prefab"],2,1,9,4],["dd9c0fxyXpOX7Q1l8AlM8Gz",["_eventID","node","_onEventRaised","__prefab"],2,1,9,4],["cc.RigidBody",["_type","_group","node","__prefab"],1,1,4],["cc.BoxCollider",["_isTrigger","node","__prefab","_size","_center"],2,1,4,5,5],["1bef6jJvZ9JSrZKP9zLO/+3",["__prefab","_onStunBegin","_onStunEnd","node"],3,4,9,9,1],["cc.animation.Layer",["name","_stateMachine"],2,4],["cc.animation.ClipMotion",["clip"],3,6],["cd32dlNM6hEkokUGHlLV8y+",["_eventID","_data","node","__prefab"],1,1,4],["b2629pBo9BDtrAXL8hN6QoS",["__prefab","node","_button"],3,4,1,1],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["cc.animation.UnaryCondition",["operator","operand"],2,4],["cc.animation.PlainVariable",["_type","_value"],1],["d9dbaePcK9EmpC+u+4XoTKT",["_emptyChange","_debug","node","__prefab","_objects"],1,1,4,9],["UpgradeState",["_currentStateID","_nextStateID","_costToUpgrade","_readableName","_id","_modelNode"],-2,1],["925cc7HsYRKfKoUI6HIv/Em",["duration","useRelativeValue","__prefab","onComplete","valueEnd","node","target"],1,4,9,5,1,1],["WorldSettingsData",["maxLevel","worldID","minLevel"],0],["TowerUpgradeEntryData",["entryType","entryNode"],2,1],["ebaab2OBJ5OarmKfYyuWVeW",["_sceneLoaderEventId","_sceneName","_delay","node"],0,1],["TowerData",["id","storeID","description","readableName","upgradeID","headModel"],-2,6],["cc.Node",["_objFlags","__editorExtras__","_parent","_prefab"],1,4,4],["cc.PrefabInfo",["root","fileId","asset"],1,1],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.PrefabInfo",["root","fileId","asset"],1,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["17bd6e7Ug9Jf40Gp1zz8+EI",["_freezeDuration","node","__prefab"],2,1,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cf6d2i9odJJNo3fjHspWuC9",["node","__prefab","_onEnable","_onCollided","_onCollidedParticles"],3,1,4,9,9,2],["cc.RealCurve",["_times","_values"],2,9],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["12ea43w32ZDAL2+IVCNZlsZ",["target","duration","node","__prefab","valueStart","valueEnd"],1,1,4,5,5],["ca75cIVvLBMl7Ykys8006FJ",["_initialEnergy","_rechargeAmount","_maxEnergy","node","__prefab","_towersDataPrefab"],0,1,4,6],["b1095ptzkVKS5ePz++tOAKw",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["26530mDlypKVbgkyPCFjn/T",["node","__prefab","_enemyPrefabs","_enemyPrefabsOffset","_setModelsToUI"],3,1,4,3,9,1],["EnemyPrefabOffsetData",["offset","enemyPrefab"],3,8,6],["cc.TargetOverrideInfo",["propertyPath","source","targetInfo"],2,4,4],["cc.TargetInfo",["localID"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["40d56SAqbRLmZZawWUx77UJ",["__prefab","_commonColumns","_towerColumns","_ownedTreeLineColor","_availableTreeLineColor","_lockedTreeLineColor","_activateCommonTab","_activateTowersTab","_onBackToMenu","_defaultUpgrades"],3,4,9,9,8,8,8,9,9,9,4],["ShopColumn",["nodes"],3,2],["CommonUpgrade",["maxEnergy","energyRecharge","maxHP"],0],["cc.Animation",["_clips","node","__prefab"],2,1,4],["53d3fTbnFxPOLwJ9KE2Kruy",["node","__prefab","_animationEvents"],3,1,4,9],["4633boUp01PnK/YH7enPkIw",["node","__prefab","_towerTreeLines","_ownedTreeLineColor","_availableTreeLineColor","_lockedTreeLineColor"],3,1,4,4,8,8,8],["ShopPageTowerTreeLines",["treeLines"],3,9],["TowerTreeLines",["towerID","lineNodes"],2,2],["3ee1589zapM9JITH6e5vok4",["node","__prefab"],3,1,4],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,2],["cc.UIMeshRenderer",["__prefab"],3,4],["2e422rMyxhPNoAP/9tU8bNO",["node","__prefab","_hpEntries","_setCurrentValue","_animateCurrentValue","_setTotalValue"],3,1,4,2,9,9,9],["48f99m4mrhOfJj9PX5MTE9r",["node","__prefab","_starsAnimators","_activeStarSprite","_inactiveStarSprite"],3,1,4,2,6,6],["bf1ee1D121LrYfqbYo8LfSs",["node","__prefab","_setCurrentValue","_setTotalValue"],3,1,4,9,9],["826172kECFGjq4DVDVtJUzR",["node","__prefab","_energyEntries","_energyLockEntries","_setCurrentValue","_setTotalValue","_onEnergyFull","_onNotEnergyFull"],3,1,4,2,2,9,9,9,9],["38246A7yIhB9pH55CZX1oMb",["node","__prefab","_setHintText","_setHintModel","_levelHintsPrefab"],3,1,4,9,9,6],["09fd5YmvChK1qMRLrEa1jkX",["_eventID","node","__prefab"],2,1,4],["56f824up7tJH6vIYn6FglJc",["node","__prefab","_onEnable"],3,1,4,9],["45356D3D1dGypgAffMAEUkM",["node","__prefab","_adsButton","_openAdsPanelButton"],3,1,4,1,1],["d8c24sveLFFz6xbXsQUJL9R",["node","__prefab","_onLastLevel"],3,1,4,9],["8caceFDiJpLCp8Q+7rXBUKZ",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["634b0b0+spC5rwO9HtRDINm",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["2c777uJJKlMQKZijqaRubSj",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["eff21f12D1AfZxhjzNkUlQX",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["2a5b8vcKbdMO4UH9X0N4O7k",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["042b84REhpIkrcWQXDTBB9U",["_length","node","__prefab"],2,1,4],["f6b09ehRv5GY5ZX2VxS2Sj1",["node","__prefab","_onGetCurrency"],3,1,4,9],["cc.SphereCollider",["_isTrigger","_radius","node","__prefab"],1,1,4],["5a0eaVysqhMqoORZai6uA9P",["__prefab","_target"],3,4,1],["62285pUnQZPabUSSmdd/Zu1",["node","__prefab","_pSystems","_onFinished"],3,1,4,2,9],["f42c8MUO3JGzqBnIvM7zfpb",["node","__prefab","_targetNode","_onReachedDestination"],3,1,4,1,9],["4dee2eFUPZHNKQRW/WBo2uh",["node","__prefab","_pointerParent","_pointerNode","_uiPositionOffset","_onShow","_onHide","_uiConstructionPosition","_uiUpgradePosition","_uiScale","_commonScale"],3,1,4,1,1,8,9,9,5,5,5,5],["78e68VG5n1LtqisCiyJPS9I",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["ea4deEUC69CLYW1FXWHWimn",["node","__prefab","_onSpawn"],3,1,4,9],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["b6b88lnaNhOIYa+C0LFNa5B",["node","__prefab","_sfxs"],3,1,4,2],["f55faVr9BhB65ZsbgP52ExD",["node","__prefab","_themeModels","_worldSettingsPrefab"],3,1,4,2,6],["71b59j50pJOQYyfqjE0LpJs",["node","__prefab","_enemy"],3,1,4,1],["28a939hTddDx7kAZtJaeXXi",["_loop","_duration","node","__prefab","_onReachTimer"],1,1,4,9],["cc.animation.AnimationGraph",["_layers","_variables"],3,9,11],["cc.animation.StateMachine",["_states","_transitions","_entryState","_exitState","_anyState"],3,2,9,1,1,1],["cc.animation.Transition",["from","to"],3,1,1],["cc.animation.TriggerCondition",["trigger"],2],["cc.animation.TriggerVariable",["_flags"],2],["cc.animation.State",["name"],2],["cc.animation.Motion",["name","motion"],2,4],["9724cyw/qJC54XASWo2Oks7",["_destroyTowerTitle","_destroyTowerDescription","_levelUpTowerDescription","node","__prefab","_enableStats","_disableStats","_setName","_setDescription","_setDamage","_setSpeed","_setRange"],0,1,4,9,9,9,9,9,9,9],["cc.animation.BindableBoolean",["variable"],2],["12290cr8jJAjbgZr/tKZ9ku",["node","__prefab","_width","_color","_material2"],3,1,4,4,4,6],["cc.animation.BinaryCondition",["lhs","rhs"],3,4,4],["cc.animation.EmptyStateTransition",["duration","from","to","conditions"],2,1,1,9],["cc.animation.EmptyState",["name"],2],["b65aftrretCPqoXV85A31xE",["node","__prefab"],3,1,4],["RandomizerEntry",["_chance","_node"],2,1],["c2467V6o2dIzJlGyn2L2FDD",["_randomizeOnEnable","node","__prefab","_min","_max","_targetNode"],2,1,4,5,5,2],["34d5dMnUohLwIpOOtI38H+y",["node","__prefab","_towerHeadParent","_towerBaseParent","_setModelsToUI","_towersBasePrefab","_towersDataPrefab"],3,1,4,1,1,1,6,6],["6224ediLkZG84aZ/Y7G48dr",["node","__prefab","_enemiesPrefabs"],3,1,4,3],["e4500P8ArFGmJVAHcDYRV4l",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["eabd4jLlnpI9pLiRtNsUPbD",["_damage","_radius","_attackModifier","_stunDuration","_stunFrequency","node","__prefab","_towerNode","_detectionRange","_attackVFX","_chainAttackData","_lookAtTarget","_targetChooserPrefab"],-2,1,4,1,1,1,4,1,6],["ChainSpecialData",[],3],["0e0544yblFGAInBmDlibiCW",["node","__prefab","_sfxs"],3,1,4,2],["b6223hbyb9EN43KLh0Z0lQR",["_baseTowerID","_energyCost","_currentUpgradeState","_towerType","node","__prefab","_upgrades","_onBeginDestruction"],-1,1,4,9,9],["73d3de5uWhKsLUv3xQl1Qmu",["node","__prefab","_tower","_shootVFXs","_onBeamStarted","_onBeamStopped"],3,1,4,1,9,9,9],["ShootVFXData",["key","shootPrefab"],2,6],["955699OWahJqo9EFR6ii5ti",["node","__prefab","_tower","_auraVFXs"],3,1,4,1,2],["b902aOEwNdPBYlSlwTCn6gl",["_scaleX","_scaleY","_multiplier","node","__prefab"],0,1,4],["b46f3gbdcBN4Zzu1k+puyPE",["__prefab","_renderNode"],3,4,1],["1c9a7hThbRDAZOJlNfeGc8g",["_towerType","node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_damageModifier","_setSlow","_setStun","_setChainAttack","_setSingleTarget"],2,1,4,1,9,9,9,9,9,9,9,9],["c75d1lxJgZOt6RDeS6sCJMj",["_tutorialStartDelay","_towersIDUpgradeOrder","_towersIDConstructionOrder","node","__prefab"],0,1,4],["22dbfDFrMNJE7Cj5beOtQhf",["node","__prefab","_node"],3,1,4,1],["b2074tyucJAB5HC6PM0fXYi",["node","__prefab","_sprite","_showBar","_hideBar"],3,1,4,1,9,9],["079e0oHz71Oao8qfSApBiG5",["node","__prefab"],3,1,4],["b5600xDovpC0YN63dQkxnxN",["node","__prefab","_columnsDelays","_onShow","_onHide","_onDamage"],3,1,4,9,9,9,9],["317c6F7ceNOYIWXyslqWvh4",["node","__prefab","_setCost","_button","_setStateLocked","_setStatePurchased","_canPurchase","_canNotPurchase","_setBonus"],3,1,4,9,1,9,9,9,9,9],["35f56npZQBBL4Oe13kNE+Oz",["node","__prefab","_label"],3,1,4,1],["49a11a/LjxMzoQg6t3SZkfy",["_dmg","_duration","node","__prefab","_collider","_burnParticles","_onPreFinishBurn"],1,1,4,1,2,9],["cc.CapsuleCollider",["_cylinderHeight","node","__prefab"],2,1,4],["f5a6aDPK29N6IWgXWw1eZoP",["node","__prefab"],3,1,4],["ca967I1gMNLm6CKVgweRwFH",["node","__prefab"],3,1,4],["78c1blW921HzpFUNin1bCvq",["node","__prefab","_leftBlocksData","_rightBlocksData","_topBlocksData","_bottomBlocksData"],3,1,4,4,4,4,4],["BoundaryBlockData",["blockSide","blockNodes"],2,2],["cb730GgZGlA0o2b0bqxYlIm",["node","__prefab","_onSelectedConstruction","_onDeselectedConstruction","_onDisableSelectionConstruction","_onSelectedUpgrades","_onDeselectedUpgrades","_onDisableSelectionUpgrades"],3,1,4,9,9,9,9,9,9],["9af9dOKerdLvJjnt/yI4qE+",["node","__prefab","_onTap"],3,1,4,9],["adf59GLSYVGZJ3dfVqyt6MG",["_physicsGroup","node","__prefab","_target"],2,1,4,1],["642bcspAnpEK4LUpupK8i0T",["node","__prefab","_onUpgraded","_towersDataPrefab"],3,1,4,9,6],["9c66529d09P4Zt3iRYdMpnm",["node","__prefab","_towersPrefabs","_towerHolder","_onConstructed"],3,1,4,3,1,9],["730c2m+dVlIkomlZBav90dv",["node","__prefab","_towerHolder","_onDestruct"],3,1,4,1,9],["4b49aIoOPNJGbyOKIzv2YTd",["_oneStar","_twoStars","_threeStars","node","__prefab"],0,1,4],["42f642WIEJAjprBy1WVF7oY",["node","__prefab"],3,1,4],["1bb54x5k2ZLwpsDBRHVFrFw",["node","__prefab","_entries","_onTowerConstructed","_showTowerInfo"],3,1,4,9,9,9],["TowerContructionEntryData",["entryType","entryNode"],2,1],["641aap4CudNrKMJCJ5DOmSr",["node","__prefab"],3,1,4],["85ba8zO9clG9KMZhnWVluYT",["_debug","node","__prefab"],2,1,4],["cc.Line",["node","__prefab","_width","_color"],3,1,4,4,4],["4cab1fyCaNOmL8JHIOImiw3",["node","__prefab"],3,1,4],["31cdcvhPtdJNZjVbuOE4DwI",["_eventID","node","__prefab"],2,1,4],["b091d/zYThK/q6JkfRYKBAK",["_startHP","node","__prefab","_onDamage","_onDeath","_onHPChanged","_setInitialHP"],2,1,4,9,9,9,9],["8047a44vKNE9LmKzAWzaOGd",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["e93b2BayABBuKYLltRfqtdm",["_debug","_levelID","node","__prefab","_blocksPrefabs","_terrainPrefab","_outterBlockPrefab"],1,1,4,3,6,6],["d99f8q9JitMHpjrz0o8jKu2",["_damage","_radius","_attackCD","_sniperShotBitMask","node","__prefab","_towerNode","_detectionRange","_attackVFX","_towerHeads","_rayDebugNode","_targetChooserPrefab"],-1,1,4,1,1,1,2,1,6],["da0622vv4BBe4nNeJ2WOyKd",["_radiusMultiplier","node","__prefab","_collider"],2,1,4,1],["d955ajLtu5AIoknVee9/pvJ",["_commonBulletTime","node","__prefab","_tower","_shootVFXs","_bulletSpawnNode","_onShoot"],2,1,4,1,9,1,9],["9b749big4dCWY0qDLrSNM9k",["node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_setCCTargets","_setSpecial1"],3,1,4,1,9,9,9,9,9],["5fec0TnEtNP1biJdJcxsype",["node","__prefab","_worlds"],3,1,4,9],["77a88FwFMtCkZjVL/KGGjAk",["node","_setCost","_button","_setStateLocked","_setStatePurchased","_canPurchase","_canNotPurchase","_towersDataPrefab"],3,1,9,1,9,9,9,9,6],["90668MDLy5GBJFMTozjY7sY",["__prefab","_showUI","_hideUI","_tierUpUpgrades","_commonUpgrades","_showUpgradeInfo","_confirmUpgrade","_confirmDestroy","_setTierUpUI","_setLevelUpUI"],3,4,9,9,9,9,9,9,9,9,9],["cc.TTFFont",["_name","_native"],1],["a7f6bBnGXlLbINkQ05pYpA3",["_damage","_radius","_attackCD","_explosionRadius","node","__prefab","_towerNode","_detectionRange","_attackVFX","_towerHeads","_targetChooserPrefab","_burnSpecialPrefab"],-1,1,4,1,1,1,2,6,6],["97706eZG7NIeIhTP7rVP1by",["_commonBulletTime","_cannonBallMaxHeight","_upDurationRatio","__prefab","_tower","_shootVFXs","_bulletSpawnNode","_onShoot"],0,4,1,9,1,9],["0839b4XFnBGtI9sWdMf7EcQ",["_towerType","node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_setExplosionRange","_setCCTargets","_setBurn"],2,1,4,1,9,9,9,9,9,9],["cc.Mask",["node","__prefab"],3,1,4],["ca25cTenhxIzImdddRm852A",["node","__prefab","_towersParent","_modelsToUI","_baseModelPrefab","_towersDataPrefab"],3,1,4,2,1,6,6],["29dcbqkeLJDCo7uiXlubGL/",["node","__prefab","_entriesNodes"],3,1,4,2],["d9b9bef0lhJPpkTK435/cg4",["node","__prefab"],3,1,4],["710b7Q048pC8YCG3KuHhukj",["node","__prefab","_hints"],3,1,4,9],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_useHDR","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["000c51TwuJO376hxWHMUlLQ",["node"],3,1],["62983V6q7JGY4d/T7hVoD1g",["_sceneLoaderEventId","node","_onEventRaised"],2,1,9],["c99ab4sHxBIBJG6xEOLqr69",["_description","node"],2,1],["d7a81e91EBDlImajYv5iUSd",["_levelOffset","node","_setLevelSize"],2,1,9],["326a1KkFqpHRqr1jwdngHKG",["node"],3,1],["93f08a/C8BE67WCaBfvDFAN",["_text","node"],2,1],["6b287l31gNFBaX7EFR/A6A6",["node"],3,1],["a244cA/M4JL4pS/9LzK/i0G",["node"],3,1],["e0caaBJSNhJLaMvEEEox6BD",["node","_colors","_camera","_worldSettingsPrefab"],3,1,12,1,6],["4e1b0GHVi1IfJ8x0OM8H5sb",["_raycastMask","node","_camera"],2,1,1],["89893HroElBZIX8W3bm42pq",["_cameras","node"],2,1],["08524cnmRxO0573l3kVRWOj",["node","__prefab","_gunTowers","_cannonTowers","_laserTowers"],3,1,4,9,9,9]],[[12,1],[97,0,2],[110,0,2],[26,0,1,2,2],[12,2,2],[112,0,1,2,2],[23,1],[11,0,3,1,2,5],[22,0,1,3,3],[19,0,1,2,1],[102,0,1,2],[111,0,1,2,3],[61,0,1,3],[11,0,3,3],[114,0,1,2,2],[12,0,1,5,3],[94,0,1,2,3],[113,0,1,2,3],[29,0,1,2],[103,0,1,2,1],[23,0,1,2],[63,1,2,3,4,1],[21,0,1,3,2,2],[5,0,5,7,8,6,2],[38,2,3,4,5,6,1],[60,0,1,2],[62,1,2,3,4,1],[12,0,4,3,4],[30,4,5,1],[59,1,1],[0,4,5,8,7,3],[15,3,1],[37,2,3,4,1],[0,0,1,8,6,7,3],[22,0,1,2,3,4],[115,0,1,2,2],[12,0,5,2],[7,10,1],[36,0,2,3,4,5,2],[35,0,1,1],[11,0,3,1,4,2,5,7],[0,0,1,8,6,7,10,3],[0,0,8,9,7,2],[96,0,1,2,3],[61,0,2],[98,1],[5,1,0,5,7,8,6,3],[19,0,1,2,3,1],[19,0,1,1],[24,0,2,1,2],[35,1,1],[29,0,2],[11,0,1,4,2,5,6],[0,0,1,8,9,6,7,10,3],[12,0,3,3],[0,0,9,7,2],[8,0,5,4,3,2],[56,0,1,1],[53,0,2],[36,2,3,4,5,1],[67,0,1,2,3],[165,0,2],[27,2,3,6,4,5,1],[166,0,1,2],[0,0,8,6,7,11,12,2],[0,0,8,6,7,2],[23,2,1],[32,0,2,3,1,2],[100,0,1,2,3],[37,0,2,3,4,2],[6,0,1,2,4,3,9,10,11,12,6],[32,0,2,4,3,1,2],[80,0,1],[8,0,5,4,3,10,2],[18,2,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,4],[129,0,1,1],[53,1],[28,2,1,0,4,4],[0,0,1,8,6,7,11,12,3],[8,0,1,5,4,3,6,7,3],[0,0,1,9,6,7,10,3],[24,0,2,3,1,2],[16,0,1,4,5,6,3],[0,0,1,8,9,6,7,3],[69,0,1,1],[0,0,1,8,6,7,10,11,12,3],[4,2,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[11,0,3,4,5,5],[13,1,2,3,4,5,2],[32,0,3,1,2],[0,4,5,7,3],[163,0,2],[36,0,1,2,3,4,5,3],[7,2,10,2],[71,1,2,1],[27,0,2,3,6,4,5,2],[25,2,4,3,1],[12,1,2],[0,0,8,7,2],[0,0,2,8,9,7,3],[45,0,1,1],[164,0,2],[0,0,8,7,10,2],[0,0,2,1,8,6,7,10,4],[168,0,2],[26,0,1,2,4,3,2],[29,1,1],[40,1,3,2,1],[5,0,5,7,6,2],[8,0,5,4,3,6,7,2],[69,1],[148,0,1,2,3,3],[3,0,1,7,5,6,9,3],[8,0,1,5,4,3,3],[161,0,1,2,3,4,1],[162,0,1,1],[11,3,1,4,2,5,6],[1,0,6,7,1,4,5,3,11,12,8],[150,0,1,2,3,1],[4,2,0,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[18,2,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,3],[15,0,2,3,3],[19,0,2,1],[76,1,0,2,3,3],[77,0,1,2,3,2],[149,0,1,1],[151,0,1,2,3,1],[0,0,2,8,6,7,13,3],[1,0,5,3,11,12,4],[4,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,5],[7,0,4,10,3],[15,1],[7,0,2,1,3,5,10,11,6],[62,0,1,2,3,4,2],[3,0,1,7,5,6,3],[12,0,1,6,7,3],[29,1],[0,0,1,9,6,7,3],[28,3,1,0,4,4],[73,0,1,2,2],[87,0,1,2,4,3,5,6],[0,0,6,7,2],[22,1],[11,1,4,2,5,5],[0,0,1,8,9,7,3],[78,3,0,1,2,1],[60,1,1],[30,2,0,1,4,5,4],[1,0,2,11,12,3],[160,0,1,1],[3,0,1,8,5,6,3],[8,0,4,3,2],[14,0,3,4,5,2],[22,0,1,2,4],[71,0,1,2,2],[9,0,1,3,4,5,3],[79,1,1],[84,1,1],[52,0,1,4,2,5],[0,0,2,1,8,6,7,4],[35,0,1],[0,0,8,6,2],[184,0,1,2],[18,2,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,4],[12,0,2],[11,0,6,3,1,4,2,7],[11,0,6,3,1,2,5,7],[1,0,11,12,2],[128,0,1,1],[0,0,1,8,6,7,10,13,3],[3,0,1,8,5,6,9,3],[30,2,0,1,3,4,5,5],[1,0,5,3,2,11,12,5],[47,0,1,2,1],[157,0,1,2,3,1],[84,0,1,2],[85,0,1,3],[0,0,2],[0,0,1,8,9,6,7,10,13,3],[1,0,1,11,12,3],[126,0,1,2],[6,0,1,2,4,6,3,9,10,11,12,7],[22,0,1,3],[116,0,1,2,2],[9,0,1,3,4,5,8,6,7,9,10,11,3],[6,0,1,2,4,3,9,10,6],[80,1],[38,1,0,2,3,4,5,6,3],[0,0,8,9,6,7,13,2],[8,0,5,4,3,8,6,7,2],[13,0,2,3,4,2],[44,0,2,3,4,2],[46,0,2,3,4,5,6,7,2],[87,0,1,2,3,5,5],[93,0,1,2,3,3],[4,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[12,2,1,3],[0,0,2,1,8,9,6,7,10,4],[0,0,8,9,6,7,2],[19,1,1],[1,0,1,4,5,3,11,12,6],[70,0,1,2],[131,0,1],[138,0,1,2,1],[47,0,1,2,3,1],[28,1,0,4,3],[31,0,2,4,3,2],[24,0,1,2],[67,0,1,3,2,3],[118,0,1,2,2],[13,2,3,4,5,1],[5,0,2,5,7,8,6,3],[5,5,7,8,6,1],[79,0,1,2],[171,0,1,2,3,2],[52,0,1,3,2,5],[92,0,1,2,3,5,5],[4,2,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,4],[7,0,4,2,6,1,10,6],[13,0,2,3,4,5,2],[123,0,1,2,1],[6,0,1,2,4,5,3,9,10,11,7],[174,0,1,2],[0,0,1,6,7,3],[0,0,1,8,9,6,7,10,11,12,3],[0,0,1,8,6,7,13,3],[0,0,9,6,7,10,2],[0,0,9,7,10,2],[54,0,1,2,3,2],[7,0,2,6,1,3,5,10,11,7],[7,0,4,2,1,10,5],[11,0,1,2,4],[106,0,1,2,3,2],[13,0,2,3,2],[46,0,1,2,3,4,5,6,7,3],[158,0,1,2,1],[81,0,2,3,2],[0,0,2,8,6,7,3],[0,0,2,1,8,9,6,7,4],[0,0,1,8,6,7,10,11,13,12,3],[26,0,1,2,3,2],[101,0,1,2,3,4,1],[4,0,6,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[4,1,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,2],[64,0,1,2,3,5,4,2],[64,0,1,2,3,4,2],[1,0,1,4,3,11,12,5],[10,0,4,3,13,14,4],[10,1,0,2,13,14,4],[5,3,1,0,5,7,6,4],[172,0,2],[92,0,1,2,3,4,5,6],[0,0,9,7,10,11,12,2],[0,0,2,1,9,6,7,4],[8,0,9,3,2],[19,0,1],[1,0,4,2,11,12,4],[1,0,1,2,11,12,4],[1,0,1,4,3,2,11,12,13,6],[32,0,2,1,2],[10,1,0,4,5,3,13,14,6],[10,1,0,7,8,2,13,14,6],[41,0,1,2,3,3],[5,1,0,5,7,6,3],[46,0,1,2,3,4,5,6,3],[78,0,1,2,1],[155,0,1,1],[0,0,9,6,7,2],[0,0,8,9,6,2],[0,0,1,8,6,10,3],[3,0,1,7,5,6,10,3],[3,0,2,1,7,8,5,6,4],[8,0,2,1,5,4,3,4],[8,0,1,5,4,3,8,6,7,3],[27,0,1,2,3,4,5,3],[56,0,1],[4,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,1],[4,11,2,0,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[58,0,1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,3],[30,0,1,3,4,5,4],[38,0,2,3,4,5,6,2],[15,0,2],[1,0,6,7,1,4,5,3,11,8],[5,1,0,5,8,6,3],[6,0,1,2,4,3,9,10,11,6],[6,0,1,2,5,6,9,10,11,6],[50,1,0,3],[0,0,1,8,9,6,3],[0,0,1,8,6,3],[0,0,1,8,6,10,11,12,3],[8,0,5,4,3,8,2],[55,0,1,2,2],[15,0,3,2],[1,0,5,2,11,12,4],[1,0,3,11,12,3],[40,0,1,3,2,2],[42,0,2,3,2],[130,0,1,1],[153,0,1,2,3,2],[82,0,1],[246,0,1,2],[0,0,2,1,8,9,6,7,10,13,4],[0,0,2,1,8,6,7,13,4],[3,0,1,7,8,5,6,3],[3,0,7,8,5,6,10,2],[14,0,1,3,4,5,3],[65,0,1,2,3,3],[1,0,6,1,4,3,2,11,12,13,7],[1,0,7,1,4,3,2,11,12,13,7],[1,0,5,3,2,11,12,13,5],[66,0,1,1],[9,2,0,1,3,4,5,8,6,7,9,10,11,4],[9,0,1,3,4,5,7,3],[9,0,3,4,5,8,6,7,9,10,11,2],[6,0,7,1,2,4,3,9,10,11,12,7],[6,0,7,1,2,4,3,9,10,7],[141,0,1,2,3,2],[45,0,1],[16,0,4,5,2],[83,0,1,2,4],[187,0,1,1],[0,0,1,9,6,7,10,11,12,3],[0,0,9,7,11,12,2],[0,0,2,1,8,9,6,7,10,11,12,4],[0,0,8,9,7,10,2],[0,0,8,9,6,7,10,2],[0,0,1,8,7,3],[0,0,4,1,8,6,7,4],[0,0,1,8,9,6,10,3],[3,0,1,8,5,6,11,12,3],[3,0,1,5,6,3],[14,0,1,7,3,4,5,6,3],[21,0,1,3,4,2,2],[4,9,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[4,7,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[18,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,3],[23,0,3,4,2],[23,0,5,6,2],[59,0,1,2],[31,1,0,2,3,3],[39,1,2,1],[1,0,1,4,3,11,12,13,5],[120,0,1],[13,0,2,2],[5,2,5,7,8,6,2],[5,0,5,6,2],[42,0,2,2],[6,0,7,1,2,4,3,9,10,11,7],[6,0,7,1,2,4,5,6,3,9,10,11,9],[6,0,7,8,1,2,4,5,3,9,10,11,9],[6,0,1,2,4,3,9,11,12,6],[44,1,0,2,3,4,3],[75,0,1,3,2,2],[75,0,1,2,2],[16,0,2,1,4,5,6,4],[16,0,1,3,4,5,6,4],[82,1,0,2,1],[169,0,1,2,3,4,1],[201,0,1,2],[0,0,2,1,9,6,7,10,11,12,4],[0,0,1,9,6,7,10,11,13,12,3],[0,0,1,8,9,6,7,11,12,3],[0,0,1,8,7,10,3],[0,0,2,1,8,6,7,10,11,12,4],[0,0,8,9,7,13,2],[0,0,8,7,10,11,12,2],[0,0,1,6,7,10,3],[0,0,1,9,6,10,11,12,3],[0,0,3,8,9,3],[8,0,9,3,8,2],[8,0,1,9,4,3,3],[8,0,5,9,3,2],[21,0,1,2,2],[7,0,1,3,5,10,13,11,5],[63,0,1,2,3,4,2],[31,1,0,2,4,3,3],[1,0,6,7,1,4,5,3,2,11,12,9],[1,9,0,1,11,12,4],[1,0,4,5,2,11,12,5],[1,0,6,7,1,4,5,3,2,11,12,13,9],[1,0,1,11,12,13,3],[1,0,6,1,2,11,12,5],[13,1,3,4,5,2],[13,0,1,2,3,4,5,3],[68,0,1,2,3,4,5,6,7,8,9,10,11,22,23,12,13,14,15,16,24,17,18,19,20,25,26,27,21,7],[10,6,0,7,8,2,13,14,6],[10,0,13,14,2],[9,0,1,3,4,5,6,3],[9,0,3,5,8,6,7,9,10,11,2],[5,3,0,5,7,6,3],[5,3,0,5,7,8,6,3],[5,5,7,6,1],[5,1,0,2,5,7,8,6,4],[5,0,5,8,6,2],[124,0,1,2,3,4,5,1],[125,0,1],[42,1,0,2,3],[25,0,2,4,3,5,2],[6,0,1,2,4,6,3,9,10,12,7],[6,0,1,2,4,5,3,9,10,7],[44,2,3,4,1],[146,0,1,2,2],[76,0,2,3,2],[16,0,4,5,6,2],[16,1,4,5,6,2],[81,0,1,2,3,3],[170,0,1,1],[49,0,2],[182,0,1,2,3,4,5,6,7,5],[185,0,1,2,3,1],[211,0,1,2],[90,0,1,2],[245,0,1,2,2],[91,0,1,3,3],[91,2,0,1,3,4],[249,0,1,2],[0,0,2,8,9,6,7,3],[0,0,2,8,6,7,10,13,3],[0,0,2,8,9,6,7,13,3],[0,0,1,8,9,7,10,3],[0,0,8,6,7,10,13,2],[0,0,2,1,8,9,7,4],[0,0,1,8,9,6,10,11,12,3],[0,0,2,6,3],[0,0,6,2],[0,0,1,8,6,11,12,3],[3,0,7,8,5,6,2],[14,0,7,3,4,5,2],[21,0,1,3,5,2,2],[55,0,1,3,2,2],[4,2,12,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[4,1,8,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[4,2,8,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[4,9,2,0,1,4,5,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,8],[58,2,3,0,4,5,6,1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,8],[7,0,2,6,1,3,5,10,7],[7,0,2,1,3,5,10,6],[11,0,4,5,4],[37,0,1,2,3,4,3],[15,0,1,4,3,3],[31,0,2,3,2],[1,0,4,11,12,3],[1,0,1,8,2,11,12,5],[1,0,1,4,11,12,4],[1,0,5,11,12,3],[1,0,1,2,11,4],[1,0,5,11,3],[24,0,2,4,1,2],[24,0,2,4,3,1,2],[117,0,1,2,2],[13,2,3,4,1],[68,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,7],[10,1,4,5,3,13,14,5],[10,1,0,3,11,12,13,14,6],[9,3,4,5,6,1],[9,0,1,3,4,5,8,6,3],[9,0,1,3,4,7,3],[9,0,3,4,8,6,7,9,10,11,2],[41,0,1,2,3],[5,1,0,2,5,7,6,4],[5,2,5,8,6,2],[72,0,1,2,2],[72,0,1,2],[25,0,2,4,3,2],[25,1,2,4,3,2],[127,0,1,1],[6,0,1,2,3,9,10,11,12,5],[6,0,1,2,4,5,6,3,9,10,11,12,8],[33,0,2,4,3,2],[159,0,1,2,3,4,3],[83,0,3,1,2,5],[49,1,2],[173,0,1,1],[86,0,2,3,4,2],[178,0,1,2,3,2],[50,1,2],[88,0,1,2,3,4,3],[216,0,1,2,2],[89,1,2,0,4],[90,0,2],[227,0,1,3],[0,0,1,9,6,7,10,13,3],[0,0,2,1,9,6,7,10,13,4],[0,0,2,1,6,7,4],[0,0,2,1,9,6,7,10,4],[0,0,1,9,6,7,11,13,12,3],[0,0,2,1,6,7,10,4],[0,0,2,6,7,3],[0,0,2,6,7,10,11,13,12,3],[0,0,2,6,7,10,13,3],[0,0,8,6,7,13,2],[0,0,6,7,10,13,2],[0,0,2,1,9,7,10,4],[0,0,1,8,7,10,11,12,3],[0,0,8,6,7,11,13,12,2],[0,0,3,9,3],[0,0,2,1,9,6,4],[0,0,2,1,9,6,10,4],[0,0,1,9,6,10,3],[0,0,2,3,8,9,6,4],[0,0,2,8,6,3],[0,0,3,8,9,6,3],[0,0,1,9,6,3],[0,0,8,6,10,2],[0,0,8,9,2],[0,0,8,6,10,11,12,2],[3,0,1,5,6,11,10,12,3],[3,0,2,1,8,5,6,9,4],[3,0,1,7,8,5,6,9,3],[3,0,1,7,8,5,6,9,11,12,3],[3,0,2,1,7,5,6,9,4],[3,0,1,5,6,9,3],[3,3,7,6,13,2],[3,0,1,8,5,6,10,3],[3,0,1,8,5,6,11,10,12,3],[3,0,2,1,7,5,6,10,4],[3,0,7,5,6,2],[3,0,4,8,5,9,11,12,3],[3,0,1,5,9,3],[8,0,1,4,3,8,6,7,3],[14,0,2,1,3,4,5,6,4],[14,0,1,3,4,5,6,3],[14,0,2,1,7,3,4,5,6,4],[54,0,4,1,2,3,5,2],[17,0,1,5,2,3,4,3],[17,0,1,2,3,4,6,7,3],[17,0,1,5,2,3,4,6,7,3],[17,0,5,2,3,4,6,7,2],[17,0,2,3,4,8,2],[17,0,1,2,3,4,8,3],[26,0,4,3,2],[21,0,1,3,4,5,2,2],[95,0,1,2,3,4,3],[27,0,1,2,3,6,4,5,3],[99,0,1,2,2],[28,0,4,2],[57,0,2,1,4],[57,0,1,3],[4,2,0,1,4,5,10,6,38,13,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,8],[4,2,0,1,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[4,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,2],[4,8,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[4,0,1,38,13,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[4,2,0,1,4,5,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,7],[4,0,1,4,5,10,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[4,7,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,2],[4,7,0,6,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,4],[18,3,4,2,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,7],[18,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,2],[7,0,2,1,3,10,5],[7,0,2,1,3,5,10,13,11,6],[7,0,4,1,10,4],[7,0,4,6,1,7,10,12,6],[7,0,1,3,5,10,5],[7,0,4,6,8,9,10,12,6],[7,0,4,2,10,12,4],[15,0,1,4,3],[104,0,1,2,3,4,5,3],[105,0,1,2,3,4,5,4],[107,0,1,2,3,4,1],[108,0,1,1],[65,0,2,3,2],[39,0,1,2,2],[39,1,1],[1,0,7,1,8,2,11,12,6],[1,0,6,1,2,11,12,13,5],[1,11,12,1],[1,0,7,4,2,11,12,5],[1,0,6,7,1,4,10,5,3,11,12,9],[1,0,6,7,4,11,12,5],[1,0,1,5,3,2,11,12,6],[1,0,5,3,2,11,5],[1,0,2,11,3],[1,0,5,3,11,4],[66,0,1],[109,0,1,2,2],[119,0,1,2,3,4,5,6,7,8,9,1],[121,0,1,2,4],[13,0,2,4,2],[122,0,1,2,2],[40,0,1,2,2],[70,0,2],[10,0,2,3,9,10,13,14,6],[10,6,1,0,2,13,14,5],[10,1,0,5,3,13,14,5],[10,1,0,2,13,4],[9,3,4,5,1],[9,3,4,5,8,6,1],[9,3,4,5,7,1],[9,3,4,5,8,6,7,9,10,11,1],[41,0,2,3,2],[5,0,2,5,7,6,3],[5,1,0,4,5,7,8,6,4],[5,1,0,4,5,7,8,4],[5,5,8,6,1],[73,0,1,2],[25,2,3,1],[132,0,1,2,3,4,5,1],[6,0,1,3,9,10,11,4],[6,0,8,1,2,4,5,3,9,10,11,8],[6,0,1,2,4,5,6,3,9,10,11,8],[6,0,1,2,4,3,9,11,6],[133,0,1,2,3,4,1],[134,0,1,2,3,1],[135,0,1,2,3,4,5,6,7,1],[136,0,1,2,3,4,1],[43,1,2,0,1],[43,2,0,1],[43,1,0,1],[74,0,1,3,2,2],[74,0,1,2,2],[137,0,1,2,2],[139,0,1,2,3,1],[140,0,1,2,1],[33,1,0,2,4,3,3],[33,0,2,3,2],[33,1,0,2,3,3],[142,0,1,2,3,2],[143,0,1,2,3,2],[144,0,1,2,3,2],[20,1,2,5,6,7,8,3],[20,1,2,5,6,7,3],[20,0,5,6,7,2],[20,0,3,4,5,6,7,4],[20,0,5,6,2],[20,0,3,4,5,6,4],[145,0,1,2,3,2],[45,0,1,2,1],[147,0,1,2,1],[77,0,1,2,4,2],[47,0,1,4,2,1],[152,0,1,2,3,4,5,6,7,8,9,10,1],[154,0,1,2,1],[156,0,1,2,1],[16,0,1,4,5,3],[48,0,1,2,3,4,6,7,5,8,2],[48,0,1,2,3,4,5,8,2],[48,0,1,2,9,3,4,6,7,5,10,11,12,13,14,15,2],[167,0,1,2,3,4,5,6,7,8,9,10,11,4],[85,0,2],[49,1],[86,0,1,2,3,4,3],[175,0,1,2,3,4,5,2],[176,0,1,2,3,4,5,6,1],[177,0,1,2,1],[179,0,1,2,3,4,5,6,7,8,9,10,11,12,6],[180,1],[181,0,1,2,1],[183,0,1,2,3,4,5,1],[186,0,1,2,3,4,4],[188,0,1,2,3,4,5,6,7,8,9,10,11,2],[189,0,1,2,3,4,4],[190,0,1,2,1],[191,0,1,2,3,4,1],[192,0,1,1],[193,0,1,2,3,4,5,1],[50,0,2],[194,0,1,2,3,4,5,6,7,8,1],[195,0,1,2,1],[196,0,1,2,3,4,5,6,3],[197,0,1,2,2],[198,0,1,1],[199,0,1,1],[200,0,1,2,3,4,5,1],[202,0,1,2,3,4,5,6,7,1],[203,0,1,2,1],[204,0,1,2,3,2],[205,0,1,2,3,1],[206,0,1,2,3,4,1],[207,0,1,2,3,1],[208,0,1,2,3,4,4],[209,0,1,1],[210,0,1,2,3,4,1],[212,0,1,1],[213,0,1,2,2],[214,0,1,2,3,1],[215,0,1,1],[51,2,1,1],[51,3,2,4,1,1],[51,0,3,4,1,2],[88,0,1,5,2,6,3,4,3],[217,0,1,2,3,4,5,6,2],[218,0,1,2,3,2],[219,0,1,2,3,4,5,6,3],[220,0,1,2,3,4,5,6,7,8,9,10,11,5],[221,0,1,2,3,2],[222,0,1,2,3,4,5,6,2],[223,0,1,2,3,4,5,6,7,1],[224,0,1,2,1],[89,0,2],[225,0,1,2,3,4,5,6,7,1],[226,0,1,2,3,4,5,6,7,8,9,1],[228,0,1,2,3,4,5,6,7,8,9,10,11,5],[229,0,1,2,3,4,5,6,7,4],[230,0,1,2,3,4,5,6,7,8,9,2],[231,0,1,1],[232,0,1,2,3,4,5,1],[233,0,1,2,1],[234,0,1,1],[235,0,1,2,1],[52,0,1,3],[236,0,2],[237,0,1,2,3,2],[238,0,1,2,3,4,1],[239,0,1,2,3,4,2],[240,0,1,1],[241,0,1,2,2],[242,1],[243,1],[244,0,1],[247,0,1,2,2],[34,0,5,6,2],[34,3,4,1,0,5,6,5],[34,2,1,0,5,6,4],[34,2,1,0,5,4],[248,0,1],[250,0,1],[251,0,1],[252,0,1,2,3,1],[253,0,1,2,2],[254,0,1,2],[255,0,1,2,3,4,1]],[[[[58,"SM_TowerOmegaBeamBody_01"],[55,"SM_TowerOmegaBeamBody_01",[-2],[3,"a8rRRSGbdZ75rtdYdCxXvt",-1,0]],[64,"SM_TowerOmegaBeamBody_01",1,[[62,-3,[1,"ebLTCL4wZWyoex5cTjGOhH"],[0],[45],1]],[3,"39Vq44EYlYEbQuQOG7elsR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,147]],[[[58,"P-Freeze-RewardedAdsBonus"],[267,"P-Freeze-RewardedAdsBonus",[-3,-4],[[534,20,-2,[1,"88GsfAF85P9IcFS34cG0Dl"]]],[3,"80fcPs02lOuKj5k9FDAJ+8",-1,0]],[65,"On Key Down",1,[[429,32,-7,[1,"34SR2rZ05HGahfTlbjED9/"],[[8,"17bd6e7Ug9Jf40Gp1zz8+EI","startFreeze",1],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-5],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-6]]],[57,-8,[1,"10NIkB/PlJu7HAmdLTrpX5"]]],[3,"68gUZjRrhJE5uDhRG2qpEj",1,0]],[237,"On Key Down Back",false,1,[[429,32,-10,[1,"88swSBzzFJl4LNxDUzulG4"],[[8,"17bd6e7Ug9Jf40Gp1zz8+EI","endFreeze",1],[8,"99672sUg5NFw4x7bEPAiyHE","activate",2],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-9]]],[57,-11,[1,"13YT/m5YRMXLijAHiLT492"]]],[3,"6fHvTFnzVMH4gVqAgXxMOq",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-2,3,0,5,2,0,5,3,0,0,2,0,0,2,0,5,3,0,0,3,0,0,3,0,10,1,11],[],[],[]],[[[68,".bin",2004275656,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7680,"length":1728,"count":432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7680,"count":160,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3311835825443268,-0.33062636852264404,0.6501219272613525],"maxPosition",8,[1,0.3303724229335785,0.33056652545928955,0.7618473172187805]]],-1],0,0,[],[],[]],[[[76],[55,"SM_CubeDetail_02",[-2],[3,"69vp2YjNJakaIDVHGspGD6",-1,0]],[64,"SM_CubeDetail_02",1,[[62,-3,[1,"01NEcE4CpQBazU43NjyQzP"],[0],[45],1]],[3,"c9ucpxjKVRCIO4qU72PVxG",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[273,274]],[[[77,"SM_CubeDetail_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-GunTower-Bullet"],[137,"P-GunTower-Bullet",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4294311224]]],11]]],0,0,[0],[16],[41]],[[[58,"P-EnergySystem"],[267,"P-EnergySystem",[-3],[[558,2,[0.2,0.3,0.4,0.5,0.6,0.7],[4,5,6,7,8,10],-2,[1,"37gZdiDRRLp461ECx2nX/u"],0]],[3,"984XA+aJRLtqRQQNLDETJ9",-1,0]],[42,"Events",1,[-4,-5,-6,-7],[3,"9f8q54wE1LRYxz/GE4XQf/",1,0]],[65,"On Game Started",2,[[206,1,-8,[1,"21XIer/xhIDIUEz+MN35Ws"],[[8,"ca75cIVvLBMl7Ykys8006FJ","activate",1]]]],[3,"88Kpm3aFxDaqYtAbwbC/i6",1,0]],[65,"On Game Defeat",2,[[206,4,-9,[1,"a3zUMEQgVC9poxNz6YgfEm"],[[8,"ca75cIVvLBMl7Ykys8006FJ","deactivate",1]]]],[3,"474RatdMdGvrad/BrkaDAG",1,0]],[65,"On Game Victory",2,[[206,3,-10,[1,"3dayK0riRE+5TzpO3jYZim"],[[8,"ca75cIVvLBMl7Ykys8006FJ","deactivate",1]]]],[3,"973zhlTNBAlawvRQfLc/Uq",1,0]],[65,"On Tower Destroyed",2,[[232,11,-11,[1,"65G+RbidxGM7Ldk+TqnYgR"],[[8,"ca75cIVvLBMl7Ykys8006FJ","towerDestroyed",1]]]],[3,"968hJd/R1I47wKZNOyV/iM",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,0,3,0,0,4,0,0,5,0,0,6,0,10,1,11],[0],[40],[37]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{"depthTest":false},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295]]],11]]],0,0,[0],[16],[32]],[[[58,"Enemies Holder"],[506,"Enemies Holder",8388608,[[[48,-2,[1,"87LB7sm/BL5aImv6f8bkEK"]],-3,[559,-5,[1,"be/6Of8Z5IcrtZCfJL6G+j"],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],[[560,[1,0,-0.2,0],29]],-4]],4,1,4],[3,"feXYlDJrhOiIHGtymY3yxW",-1,0],[3,0.23911761839433449,-0.09904576054128762,-0.3696438106143861,0.8923991008325228],[1,60,60,60.00000000000001],[1,30,0,-45]],[306,true,true,1,[1,"38JEqV6MtBrIIB0I78QUIw"]]],0,[0,3,1,0,0,1,0,-2,2,0,54,2,0,0,1,0,10,1,5],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,58],[148,121,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,121]],[[[58,"Game_Canvas"],[80,"Game_Canvas",33554432,[-199,-200,-201,-202,-203,-204,-205],[[9,-195,[1,"39YbcMoONPnqpEYIvfvLdK"],[5,414,896]],[340,-196,[1,"3emJQGNNNCgKZTM9PDiHF9"]],[200,45,-5.684341886080802e-14,-5.684341886080802e-14,414,896,-197,[1,"1cPLaltcNBeqjAoq8eDZ0T"]],[310,-198,[1,"66oqUtOZZPhJfhG2s8pKUM"]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-194,0,[[71,["_enemyModels","0","enemyNode"],-71,[2,["fcglxwqyJPLImoJ297eYFo"]],-70,[2,["7e5RAOazJDUoqdJyOb9q5f"]]],[71,["_enemyModels","1","enemyNode"],-73,[2,["fcglxwqyJPLImoJ297eYFo"]],-72,[2,["02tfv4BbdAxpSCsGntWHOx"]]],[71,["_enemyModels","2","enemyNode"],-75,[2,["fcglxwqyJPLImoJ297eYFo"]],-74,[2,["a86TWrORNDdonkl8tekAPI"]]],[71,["_enemyModels","3","enemyNode"],-77,[2,["fcglxwqyJPLImoJ297eYFo"]],-76,[2,["ab+gkUD2pBFJNP5SgZltSD"]]],[71,["_enemyModels","4","enemyNode"],-79,[2,["fcglxwqyJPLImoJ297eYFo"]],-78,[2,["29iYbQ/FJGBb/hqN0z9DZm"]]],[71,["_enemyModels","5","enemyNode"],-81,[2,["fcglxwqyJPLImoJ297eYFo"]],-80,[2,["ebk8B9FqtJ56e1xPxl/Tpg"]]],[71,["_enemyModels","6","enemyNode"],-83,[2,["fcglxwqyJPLImoJ297eYFo"]],-82,[2,["310L5OB6VHzbFd+EzwX1YG"]]],[71,["_enemyModels","7","enemyNode"],-85,[2,["fcglxwqyJPLImoJ297eYFo"]],-84,[2,["5cKF4dTqVIJ5L7VSbllisq"]]],[71,["_enemyModels","8","enemyNode"],-87,[2,["fcglxwqyJPLImoJ297eYFo"]],-86,[2,["1cE/3a3NhIspuSjA4NYPQj"]]],[71,["_enemyModels","9","enemyNode"],-89,[2,["fcglxwqyJPLImoJ297eYFo"]],-88,[2,["ecTABl1IJJ1KhKpjMdPvkX"]]],[71,["_enemyModels","10","enemyNode"],-91,[2,["fcglxwqyJPLImoJ297eYFo"]],-90,[2,["4aGaO5twNItJ9FFcSTgTAh"]]],[71,["_enemyModels","11","enemyNode"],-93,[2,["fcglxwqyJPLImoJ297eYFo"]],-92,[2,["c0iyYl2rBHx5TfkU/oItpZ"]]],[71,["_enemyModels","12","enemyNode"],-95,[2,["fcglxwqyJPLImoJ297eYFo"]],-94,[2,["5bIlpMottGHbAEAGkT0PlM"]]],[71,["_enemyModels","13","enemyNode"],-97,[2,["fcglxwqyJPLImoJ297eYFo"]],-96,[2,["ccjJGYo+JJ3Zdhg0WkW3HB"]]],[71,["_enemyModels","14","enemyNode"],-99,[2,["fcglxwqyJPLImoJ297eYFo"]],-98,[2,["f9xH5AXxtFdLZihQRnUi9e"]]],[71,["_enemyModels","15","enemyNode"],-101,[2,["fcglxwqyJPLImoJ297eYFo"]],-100,[2,["c8sIcAK59EqJbrDB5pLFfn"]]],[71,["_enemyModels","16","enemyNode"],-103,[2,["fcglxwqyJPLImoJ297eYFo"]],-102,[2,["f0XmGFRx9F74rNFCRis9jR"]]],[71,["_enemyModels","17","enemyNode"],-105,[2,["fcglxwqyJPLImoJ297eYFo"]],-104,[2,["52LbepvlBDTZU7uCBwPrnh"]]],[71,["_enemyModels","18","enemyNode"],-107,[2,["fcglxwqyJPLImoJ297eYFo"]],-106,[2,["39fj1OoStFnJ+G91QAvHk2"]]],[71,["_enemyModels","19","enemyNode"],-109,[2,["fcglxwqyJPLImoJ297eYFo"]],-108,[2,["fdmaT7GbJBHqo2JsEOdVP5"]]],[71,["_enemyModels","20","enemyNode"],-111,[2,["fcglxwqyJPLImoJ297eYFo"]],-110,[2,["8a8fEgx9FOVaZbVsegsAbV"]]],[71,["_enemyModels","21","enemyNode"],-113,[2,["fcglxwqyJPLImoJ297eYFo"]],-112,[2,["54TnVpzZ1JxKQgwWdIkLZ+"]]],[71,["_enemyModels","22","enemyNode"],-115,[2,["fcglxwqyJPLImoJ297eYFo"]],-114,[2,["3aSaHn47VG4LAW7+nTRFc6"]]],[71,["_enemyModels","23","enemyNode"],-117,[2,["fcglxwqyJPLImoJ297eYFo"]],-116,[2,["1d8gqqvh9HnrYEbHds5dbn"]]],[71,["_enemyModels","24","enemyNode"],-119,[2,["fcglxwqyJPLImoJ297eYFo"]],-118,[2,["26gvRVhA1NMojbSmcu0Ni3"]]],[71,["_enemyModels","25","enemyNode"],-121,[2,["fcglxwqyJPLImoJ297eYFo"]],-120,[2,["f4bjzu+j1Lf5KG0Gxo3jIR"]]],[71,["_enemyModels","26","enemyNode"],-123,[2,["fcglxwqyJPLImoJ297eYFo"]],-122,[2,["d6YcNMfGdIl7HbFCcdLOY0"]]],[71,["_enemyModels","27","enemyNode"],-125,[2,["fcglxwqyJPLImoJ297eYFo"]],-124,[2,["8eaPRwQy9MWKNAx+nIaefe"]]],[71,["_enemyModels","28","enemyNode"],-127,[2,["fcglxwqyJPLImoJ297eYFo"]],-126,[2,["c7tyKdOsROLIgx/j5t56bv"]]],[67,["_activateCommonTab","0","target"],-129,-128,[2,["7362Z2cI5M+onEkzK+mZj2"]]],[67,["_activateCommonTab","1","target"],-131,-130,[2,["e42yyndwVO/aCmpTo4uG1N"]]],[67,["_activateTowersTab","0","target"],-133,-132,[2,["7362Z2cI5M+onEkzK+mZj2"]]],[67,["_activateTowersTab","1","target"],-135,-134,[2,["e42yyndwVO/aCmpTo4uG1N"]]],[67,["_commonColumns","0","nodes","0"],-137,-136,[2,["70wDt2VWFD16VzFvDwRYUS","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","0","nodes","1"],-139,-138,[2,["12TKHhc5VBtp/TmmEQHdUG","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","0","nodes","2"],-141,-140,[2,["10JdPBYMhGnZ7POjjFfsYp","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","0","nodes","3"],-143,-142,[2,["d3JBcK9n5CMKAvyx4MB1lS","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","0","nodes","4"],-145,-144,[2,["2bVHPZZ1RNJ6fidDqIWUxV","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","1","nodes","0"],-147,-146,[2,["30/wQAvnZPtIlQh+02+xvR","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","1","nodes","1"],-149,-148,[2,["19bXoDYZZMwIWZXL+JWh4K","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","1","nodes","2"],-151,-150,[2,["8dbz7ZnHtA9Knqi4FyY/lY","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","1","nodes","3"],-153,-152,[2,["99ZQUlZ7tEmKW7YuEmcHGg","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","1","nodes","4"],-155,-154,[2,["28dsWsrZRJsa1s8v2wwP01","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","2","nodes","0"],-157,-156,[2,["1dL964mdlLSpQJfrQ+8Kf3","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","2","nodes","1"],-159,-158,[2,["9a5mG4j9FHdrFfb/KI8evN","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","2","nodes","2"],-161,-160,[2,["c9a9b8rHlKD6gzFgvH6LuM","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","2","nodes","3"],-163,-162,[2,["81wIZ5/fZCKq2nc2h8aG/A","75a1vm5JJA+ohuNwq5URob"]]],[67,["_commonColumns","2","nodes","4"],-165,-164,[2,["edIDYcAodIpZMhXSxHy4a7","75a1vm5JJA+ohuNwq5URob"]]],[67,["_backButton"],-167,-166,[2,["d7jlzszTJE6LT11SWlXp7u"]]],[67,["_towerTabButton"],-169,-168,[2,["63ZKqYhbdDH62zpdPLShJi"]]],[67,["_commonTabButton"],-171,-170,[2,["0bZdeupMZH+aGv7jzSxkpI"]]],[67,["_resetUpgradesButton"],-173,-172,[2,["6dZWzsyptFIpCouE4rT1kz"]]],[67,["_commonConfirmationPanelNode"],-175,-174,[2,["03X1qSFq5D1q+bTyc0esLD"]]],[67,["_towersConfirmationPanelNode"],-177,-176,[2,["89KfShwWpLgbsnSJI63bnY"]]],[67,["_towerColumns","0","nodes","0"],-179,-178,[2,["d7Qi7A1tdH/LTTi6o0sKpj","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","1"],-181,-180,[2,["15DJ7jmq1Ae66WkKJeB5w1","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","2"],-183,-182,[2,["74FoDqeghE5JvREcQdepbY","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","3"],-185,-184,[2,["08YItQGcBFQpduqVLVCrtO","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","4"],-187,-186,[2,["8aYv3hX5FKB5nbxfplnPh8","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","5"],-189,-188,[2,["c4vzRLahNK5pcaIc4/EzI3","54x3LC6jNKF6d4tobLj//p"]]],[67,["_towerColumns","0","nodes","6"],-191,-190,[2,["78ZYB+NMNHz7TSPoxDnk9O","54x3LC6jNKF6d4tobLj//p"]]],[67,["_onGetCurrency","0","target"],-193,-192,[2,["29v7IVSbBP6ruZqbVhKPb6"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69]],[1,207,447.99999999999994,0]],[90,0,{},[22,"feXYlDJrhOiIHGtymY3yxW",-211,[49,"4bbjznBsZOa5a9i8ALge3c",1,[[11,"Enemies Holder",["_name"],-206],[5,["_lpos"],-207,[1,0,0,227.162]],[5,["_lrot"],-208,[3,0.0805214068653804,0.3812272063696535,-0.03335305878500261,0.9203638919632243]],[5,["_euler"],-209,[1,10,45,0]],[5,["_lscale"],-210,[1,130,130,130]],[17,false,["_active"],[2,["7e5RAOazJDUoqdJyOb9q5f"]]],[17,false,["_active"],[2,["02tfv4BbdAxpSCsGntWHOx"]]]]],60]],[90,0,{},[332,"68bll21PNLdos7u2gIR3Y0",-335,[49,"8a0yrC1IRBQrJDZQlYZoBK",1,[[11,"Holder_ShopItemUpgrade-001",["_name"],-214],[5,["_lpos"],-215,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-216],[5,["_lpos"],-217,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-218],[5,["_lpos"],-219,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-220],[5,["_lpos"],-221,[1,0,-158,0]],[11,"Holder_ShopItemUpgrade-001",["_name"],-222],[5,["_lpos"],-223,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-224],[5,["_lpos"],-225,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-226],[5,["_lpos"],-227,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-228],[5,["_lpos"],-229,[1,0,-158,0]],[11,"Holder_ShopItemUpgrade-001",["_name"],-230],[5,["_lpos"],-231,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-232],[5,["_lpos"],-233,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-234],[5,["_lpos"],-235,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-236],[5,["_lpos"],-237,[1,0,-158,0]],[11,"ShopPanel",["_name"],-238],[5,["_lpos"],-239,[1,0,0,512]],[5,["_lrot"],-240,[3,0,0,0,1]],[5,["_euler"],-241,[1,0,0,0]],[11,"Icon_Currency Outline",["_name"],-242],[5,["_lpos"],-243,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-244],[5,["_lpos"],-245,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-246],[5,["_lpos"],-247,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-248],[5,["_lpos"],-249,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-250],[5,["_lpos"],-251,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-252],[5,["_lpos"],-253,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-254],[5,["_lpos"],-255,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-256],[5,["_lpos"],-257,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-258],[5,["_lpos"],-259,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-260],[5,["_lpos"],-261,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-262],[5,["_lpos"],-263,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-264],[5,["_lpos"],-265,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-266],[5,["_lpos"],-267,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-268],[5,["_lpos"],-269,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-270],[5,["_lpos"],-271,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-272],[5,["_lpos"],-273,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-274],[5,["_lpos"],-275,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-276],[5,["_lpos"],-277,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-278],[5,["_lpos"],-279,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-280],[5,["_lpos"],-281,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-282],[5,["_lpos"],-283,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-284],[5,["_lpos"],-285,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-286],[5,["_lpos"],-287,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-288],[5,["_lpos"],-289,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-290],[5,["_lpos"],-291,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-292],[5,["_lpos"],-293,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-294],[5,["_lpos"],-295,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-296],[5,["_lpos"],-297,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-298],[5,["_lpos"],-299,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-300],[5,["_lpos"],-301,[1,9.999999999999998,0,0]],[11,"Icon_Currency",["_name"],-302],[5,["_lpos"],-303,[1,0,0,0]],[11,"Icon_Currency",["_name"],-304],[5,["_lpos"],-305,[1,0,0,0]],[11,"Icon_Currency",["_name"],-306],[5,["_lpos"],-307,[1,0,0,0]],[11,"Icon_Currency",["_name"],-308],[5,["_lpos"],-309,[1,0,0,0]],[11,"Icon_Currency",["_name"],-310],[5,["_lpos"],-311,[1,0,0,0]],[11,"Icon_Currency",["_name"],-312],[5,["_lpos"],-313,[1,0,0,0]],[11,"Icon_Currency",["_name"],-314],[5,["_lpos"],-315,[1,0,0,0]],[11,"Icon_Currency",["_name"],-316],[5,["_lpos"],-317,[1,0,0,0]],[11,"Icon_Currency",["_name"],-318],[5,["_lpos"],-319,[1,0,0,0]],[11,"Icon_Currency",["_name"],-320],[5,["_lpos"],-321,[1,0,0,0]],[11,"Icon_Currency",["_name"],-322],[5,["_lpos"],-323,[1,0,0,0]],[11,"Icon_Currency",["_name"],-324],[5,["_lpos"],-325,[1,0,0,0]],[11,"Icon_Currency",["_name"],-326],[5,["_lpos"],-327,[1,0,0,0]],[11,"Icon_Currency",["_name"],-328],[5,["_lpos"],-329,[1,0,0,0]],[11,"Icon_Currency",["_name"],-330],[5,["_lpos"],-331,[1,0,0,0]],[11,false,["_active"],-332],[14,["_contentSize"],[2,["49ShHhZ/dCq7pq5/7C7C5w"]],[5,414,896]],[11,0,["_top"],-333],[11,0,["_bottom"],-334]]],[[71,["_animator"],-213,[2,["9fkwbwsEJNtp1a9YblePmY"]],-212,[2,["836Ayw0qlL5aalHfUNDfhK"]]]],156]],[576,[1,"62+auc2TpIt6JnSqjO5EIL"],[[342,[-349,-350,-351,-352,-353]],[342,[-354,-355,-356,-357,-358]],[342,[-359,-360,-361,-362,-363]]],[[342,[-342,-343,-344,-345,-346,-347,-348]]],[4,4292928274],[4,4281556991],[4,4289238409],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-340],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-341]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-338],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-339]],[[34,"40d56SAqbRLmZZawWUx77UJ","setTab","0",-336],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exitShop",-337]],[577,4,0.2,6]],[271,"Holder_Confirmation Tower",false,33554432,3,[-434,-435,-436,-437,-438,-439,-440,-441],[[[48,-364,[1,"20eHYBW8BJMpRGFDjQJcID"]],[219,false,-365,[1,"ecGj5xSt5Dn7mm7kQ03bt4"],[408,409,410,411,412,413,414],415],-366,[384,"Increase Max HP to {data}","Increase Max Energy to {data}","Increase Energy Recharge Rate to {data}","Unlock {data} gun upgrade","Unlock {data} cannon upgrade","Unlock {data} laser upgrade",-428,[1,"a2ksuvARpJhb8eBZ1ELSBo"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-426],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-427]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-425]],-424,-423,-422,-421,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-420]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-419]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-418]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-417]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-416]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-415]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-414]],[[84,-401,-400],[84,-403,-402],[84,-405,-404],[84,-407,-406],[84,-409,-408],[84,-411,-410],[84,-413,-412]],[[84,-387,-386],[84,-389,-388],[84,-391,-390],[84,-393,-392],[84,-395,-394],[84,-397,-396],[84,-399,-398]],[[84,-373,-372],[84,-375,-374],[84,-377,-376],[84,-379,-378],[84,-381,-380],[84,-383,-382],[84,-385,-384]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,true",-371]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,false",-369],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-370]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,true",-367],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-368]],416],[57,-429,[1,"f1VUB86bFEoZrcuGkjXRBj"]],[107,-431,[1,"73q4M5YzhOn7JoFARIzVHl"],-430],[220,-433,[1,"b4P8HiCZRJuZV5WSX0WUAS"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-432]]]]]],4,4,1,4,4,4,4],[16,null,"89KfShwWpLgbsnSJI63bnY",0]],[80,"Life_Holder",33554432,[-446,-447,-448,-449,-450,-451,-452,-453,-454,-455,-456,-457,-458,-459,-460,-461,-462,-463,-464,-465],[[9,-442,[1,"79xl/wLMpN4JZ/fDGejyym"],[5,360,72]],[582,3,6.6,6,2,10,-443,[1,"90u8x4vddET5er+9N6RR1a"]],[441,4,26,-444,[1,"a9izopV3BH+oU4gC9o6jcs"]],[94,-445,[1,"f3BpkvCy5J46Ag2CvlteTz"]]],[3,"077TOWP9ZBcKlau9bmd+dc",1,0],[1,0,12,0]],[303,"Content Holder_Rewards",33554432,1,[-473,-474,-475,-476,-477,3,-478],[[[9,-466,[1,"40/IHCEfFBA5Hf2iMv1fSS"],[5,414,896]],[172,45,100,100,1,-467,[1,"a7JwuFollFyL3dNTdJlrv0"]],[219,false,-468,[1,"2cT+Os6rRDDoZ4oOe5bxLe"],[256,257,258,259,260],261],-469,[57,-470,[1,"baQe2Gjc1O459RmIcZh8ZD"]],[295,true,-472,[1,"c0aaThuG9DBLc+6PrqGh+g"],-471]],4,4,4,1,4,4],[3,"4cl5imHU5LX7DmMQPwqat4",1,0]],[303,"Content Holder_Game",33554432,1,[-488,-489,-490,-491],[[[9,-479,[1,"04UahlQ19MrrcYxMIvXv1N"],[5,414,896]],[172,45,100,100,1,-480,[1,"02vyDRRm1OFY2VKm2zlqtg"]],[219,false,-481,[1,"1dQMMVG7ZHhJgKqbSbK+wW"],[598,599,600,601,602,603],604],-482,[107,-484,[1,"e49pXbr9lPr4LxKwSBiyaH"],-483],[220,-487,[1,"56Au2zLO9LZJ9IQ5TCmCSC"],[[201,"AE_Victory",[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","victory",7]]],[201,"AE_ShowCubeHP",[[8,"2e422rMyxhPNoAP/9tU8bNO","showHPUI",-485]]],[201,"AE_Defeat",[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","defeat",7]]],[201,"AE_WaveAnnouncementFinished",[[8,"09fd5YmvChK1qMRLrEa1jkX","raise",-486]]]]]],4,4,4,1,4,4],[3,"ddKGi6x+1G/b3lO10Aw/fr",1,0]],[303,"Content Holder_IntroPause",33554432,1,[-500,-501,-502,-503,-504],[[[9,-492,[1,"6cj4+UyDZAm5y/Y4ZTISSK"],[5,414,896]],[172,45,100,100,1,-493,[1,"0aDUE+LS5DhJHGluhPLG4I"]],[190,false,-494,[1,"bbMEYqPB1CXo90VI5Rt0PA"],[564,565,566]],-495,[107,-497,[1,"basZfXQS1NZYeDfZI9bJ9F"],-496],[94,-498,[1,"11K5ONqSRLP6LZzIEUEfHi"]],[220,-499,[1,"fcGWFNnUROx7R5GIAX6Pb2"],[[201,"AE_PlayClicked",[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,true",8]]]]]],4,4,4,1,4,4,4],[3,"fcJel8rm9PjpE6wSmC6xSq",1,0]],[271,"Holder_Confirmation Common",false,33554432,3,[-521,-522,-523,-524,-525],[[[48,-505,[1,"f2Q7jQOANOUbaBBhPWRWK6"]],[219,false,-506,[1,"f7OgVqVOtDOo6QyT7lrzXd"],[446,447,448],449],-507,[451,"Increase Max HP {data.old} to {data.new}","Increase Max Energy {data.old} to {data.new}","Increase Energy Recharge Rate {data.old} to {data.new}","Unlock {data} gun upgrade","Unlock {data} cannon upgrade","Unlock {data} laser upgrade",-515,[1,"62Y2X8ocRPlZ+fLv4aLZZ5"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-513],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-514]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-512]],-511,-510,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-509]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-508]],[[182,"c4d68jIEQZKZ5AKzGQQzzsP","setText"]],[[142]],[[142]],[[142]],[[110],[110],[110],[110],[110],[110]],[[110],[110],[110],[110],[110],[110]],[[110],[110],[110],[110],[110],[110]],450],[57,-516,[1,"82ud+vnJFMLI1rgZ7u7STz"]],[107,-518,[1,"5dgn1iVn1DzLsDbi3eVV9j"],-517],[220,-520,[1,"363TffZaVKrqR5vCLJ7aEm"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-519]]]]]],4,4,1,4,4,4,4],[16,null,"03X1qSFq5D1q+bTyc0esLD",0]],[329,"Button_Tab01",33554432,[-533,-534,-535,-536,-537,-538,-539],[[[9,-526,[1,"f7hQA0e4dIyoaigSKi5jFU"],[5,68,68]],-527,[94,-528,[1,"c958F8UldI75MAbgqo+xFq"]],[190,false,-529,[1,"31sfSzd11O7oSFl7nKnxXr"],[487,488]],-530,[107,-532,[1,"fdLE0AQoFEgrHv06KDLCm3"],-531]],4,1,4,4,1,4],[16,null,"6bHTbufCFL67bvR526/tpO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[329,"Button_Tab02",33554432,[-547,-548,-549,-550,-551,-552,-553],[[[9,-540,[1,"3aUmHk+0pEsqm9owqADOfF"],[5,68,68]],-541,[94,-542,[1,"3fEmGZ0RVMeZ/OjKoFE0OO"]],[233,false,-543,[1,"11/U/FvBZJT5o/ZYOFwMkZ"]],-544,[107,-546,[1,"63Uoo+XPFKM54O6jQaIKiO"],-545]],4,1,4,4,1,4],[16,null,"78Bxrau7dA4b0Hk2jQOtPS",0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[170,"Holder_Tab 01",33554432,[-566,-567,-568,-569,-570],[[[9,-554,[1,"52mXA+EWpMb5sytFd+zlCS"],[5,80,80]],[190,false,-555,[1,"05b6880JpB7pP51qtHmW35"],[185,186]],-556,[184,3,0.9,-563,[1,"49P/tNC9lJO7YEPKgQ296q"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","0"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","0"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","0",-558],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-559],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-560],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-561],[8,"ac879rTendCEbpZWFz/jexs","playSFX",3],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",-562]],[4,4292269782],-557,205,206,207,208],[107,-565,[1,"becbjJrKtLKKKXpFFhmK14"],-564]],4,4,1,4,4],[16,null,"540fzbZCJEwr3K+aN/h0qL",0],[1,-104,7.153,0]],[170,"Holder_Tab 02",33554432,[-582,-583,-584,-585,-586],[[[9,-571,[1,"1bBUZxlrxCG6sgKtYOWbov"],[5,80,80]],[233,false,-572,[1,"44t622WjFEoK7zk2I6wTSB"]],-573,[184,3,0.9,-579,[1,"6bAGU0W5JFbqu8rA4uYrRJ"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","1"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","1"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","1",-575],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-576],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",13],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-577],[8,"ac879rTendCEbpZWFz/jexs","playSFX",3],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","cannon tower",-578]],[4,4292269782],-574,201,202,203,204],[107,-581,[1,"96Iemq47JIh5IWmxxfOM5B"],-580]],4,4,1,4,4],[16,null,"82VLcRayVN/b6VA9ji8mc2",0],[1,0,7.153,0]],[170,"Holder_Tab 03",33554432,[-597,-598,-599,-600,-601],[[[9,-587,[1,"cbH/kRo5lDGZ6kavzXDETE"],[5,80,80]],[233,false,-588,[1,"5dR2IXqrdKU70XROQoLJJy"]],-589,[184,3,0.9,-594,[1,"a71gAfqWZCVZYWhdjQDI8n"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","2"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","2"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","2",-591],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-592],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",13],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",14],[8,"ac879rTendCEbpZWFz/jexs","playSFX",3],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","laser tower",-593]],[4,4292269782],-590,197,198,199,200],[107,-596,[1,"769OM/ZgJALpHJNFKQ6sRV"],-595]],4,4,1,4,4],[16,null,"28F/XecwZKTYjDtSaKim2C",0],[1,104,7.153,0]],[170,"Button_TimeScale to x2",33554432,[-617,-618,-619,-620],[[[9,-602,[1,"76u8UZxIhJ96+yfZ0l9pWi"],[5,32,32]],[57,-603,[1,"118Z8E901N855i7XheF7Xg"]],[454,-610,[1,"cebSv9cAdNp5DL7LLOv5wK"],[[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-605],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-606],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-607],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-608],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-609]],-604],[94,-611,[1,"23n+8Wr4FLN6QstG2ggoXm"]],[262,3,"2",-612,[1,"caU2mqt5dI5IeKXg8CVf57"]],[219,false,-613,[1,"2bJWDwroxKDbqGA7EtcznX"],[594,595,596],597],-614,[107,-616,[1,"02PtS15TRIUrpFxdOoipld"],-615]],4,4,4,4,4,4,1,4],[3,"251QMu+W1J6oXVPZc9DKzc",1,0],[1,129.722,-52,0]],[507,"Button_TimeScale to x1",false,33554432,[-633,-634,-635,-636],[[[9,-621,[1,"3b3eybR/pL2JEzhPW9sxui"],[5,32,32]],[57,-622,[1,"6dieNIvWJJbKACFL6i5IVY"]],[586,-626,[1,"cdo7EGxHdD86OOHkg8m4Xg"],[[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-623],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-624],[8,"99672sUg5NFw4x7bEPAiyHE","activate",16],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-625],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",16]]],[94,-627,[1,"87DdceRR9Gf59VAcr6L3+V"]],[262,3,"1",-628,[1,"3bNN1aulpLy6vAxM1O84Iy"]],[219,false,-629,[1,"b8gqzvYadBz7DGoK+b3vTA"],[592],593],-630,[107,-632,[1,"1feaQE/jtDBLnbo7FT8nKC"],-631]],4,4,4,4,4,4,1,4],[3,"3e/8MR9u5Bv5xRBBxPeQp/",1,0],[1,129.722,-52,0]],[80,"Panel_BG",33554432,[-641,-642,-643,-644,-645,-646,-647,-648,-649,-650],[[47,-637,[1,"e6TdhLZ45Ndrm5PNq2H5PT"],[5,266,32],[0,0,0.5]],[23,0,-638,[1,"ed2sMbtzVLOoieQSRZrFBC"],[4,4282712119],12],[376,45,3,3,3,3,272,36,1,-639,[1,"4eTBnVFcdMEZxz0/aWRGRs"]],[385,false,1,4.5,5,4.1,-640,[1,"7aZCRv1PNPm6sGlZTDX7vP"]]],[3,"c2hyooaShJ2Y/WAKYp9+Lc",1,0],[1,-133,0,0]],[271,"Holder_Confirmation Reset Upgrades",false,33554432,3,[-659,-660,-661,-662],[[[48,-651,[1,"03g0jXYQBFaJ4xUGTjaH3L"]],[190,false,-652,[1,"13bAUhttBFBq4sioNnefrw"],[470,471,472]],-653,[57,-654,[1,"70okvl1JpKgIFVGAMfLIvc"]],[107,-656,[1,"36JlfUh6VJDLCdrBCsfiXN"],-655],[220,-658,[1,"7exEyqFBRAJZWzpvZRYTna"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-657]]]]]],4,4,1,4,4,4],[16,null,"de0DC7vdROk5AWlDIvdY9k",0]],[80,"Panel_Shadow",33554432,[-666,-667,-668,-669,-670,-671,-672,-673,-674,-675],[[47,-663,[1,"147gjrveVCIL3t7v48BJhT"],[5,266,32],[0,0,0.5]],[376,45,3,3,3,3,272,36,1,-664,[1,"4eTBnVFcdMEZxz0/aWRGRs"]],[385,false,1,4.5,5,4.1,-665,[1,"7aZCRv1PNPm6sGlZTDX7vP"]]],[3,"96F77oR3ZIQLz48o2C2S5t",1,0],[1,-133,0,0]],[80,"Panel_Locked",33554432,[-679,-680,-681,-682,-683,-684,-685,-686,-687,-688],[[47,-676,[1,"4ftWnPcUVHc460IeMLs9yo"],[5,266,32],[0,0,0.5]],[376,45,3,3,3,3,272,36,1,-677,[1,"41qtGYqClGbIyEUwR1oWUb"]],[385,false,1,4.5,5,4.1,-678,[1,"d4A1F6HgtOd7RcaLo/8zj6"]]],[3,"01sa8N1EdNNrGcO4CVQWaV",1,0],[1,-133,0,0]],[80,"Tree Lines",33554432,[-701,-702,-703,-704,-705,-706,-707],[[47,-689,[1,"acndY1/yBMIp6r+kqWrZFJ"],[5,360,260],[0,0.5,0]],[394,-700,[1,"9banQW/Q5Fi7y0lA0K057k"],[395,[[180,"0",[-690,-691]],[180,"1",[-692,-693]],[180,"2",[-694,-695]],[180,"3",[-696]],[180,"4",[-697]],[180,"5",[-698,-699]]]],[4,4292928274],[4,4281556991],[4,4289238409]]],[16,null,"beTlU7EIxA+KnaZ2h1084m",0],[1,0,-117.06,0]],[80,"Holder_Item List",33554432,[-713,-714,-715,-716,-717],[[9,-708,[1,"bc63VeMORAGqZ7Dae69esh"],[5,360,460]],[386,1,-709,[1,"bbLgAcJttD6KCv4iQksQd9"]],[377,false,1,30,-710,[1,"c2KXhwaxBBAany4iSfZgVr"]],[57,-711,[1,"b0M8U7yiVH6J5sLR1zmaM1"]],[94,-712,[1,"ba4hK8XtBCubA5Cx6cIayK"]]],[16,null,"7362Z2cI5M+onEkzK+mZj2",0],[1,0,452,0]],[303,"Holder_Confirmation Common",33554432,7,[-726,-727,-728],[[[9,-718,[1,"77Wo0wqB9H0IHWXUs+LTMg"],[5,414,896]],[190,false,-719,[1,"caXiFMF9pMfa2SyGNyqJJB"],[254,255]],-720,[57,-721,[1,"80PTky501Bs52SjVMS2CKJ"]],[295,true,-723,[1,"a955XGElpK/40fpKCTMJaA"],-722],[220,-725,[1,"fdN4CVK2dNPqOalaR+No5K"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-724]]]]]],4,4,1,4,4,4],[3,"fbQ4NHbi9NyaTOAJwSz6DB",1,0]],[80,"Panel_Color",33554432,[-732,-733,-734,-735,-736,-737],[[9,-729,[1,"2bV4pcEzdMbIphVl9O8v60"],[5,0,160]],[23,0,-730,[1,"cfn1KTFtdCY5RFV0+eHEtW"],[4,4293450459],369],[260,1,2,8,8,2,-731,[1,"82qqPyDepNA5nImHB55LzK"]]],[16,null,"62oFnyLwRGcqa9L6wkHKhg",0],[1,0,17,0]],[53,"TopPanel",33554432,8,[-741,-742,-743,-744,-745,16,17,-746],[[9,-738,[1,"d0Xv1zbLFOd6TxVvkjz0Oy"],[5,414,100]],[293,41,100,1,-739,[1,"f5uNDwnTpEXJ6RW7aKfj9i"]],[94,-740,[1,"97YNxt8d5LqYe9osfFeEpc"]]],[3,"939ao4QRtJRaDKWBd5sT4d",1,0],[1,0,398,0]],[321,"Button_Play",33554432,[-757,-758,-759],[[9,-747,[1,"6fX60JuQlJCbvduZZvhM0K"],[5,110,110]],[184,3,0.9,-752,[1,"13e2h8B75E05uv2KUJ8S5J"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,false",9],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,false",9],[8,"51cbayfFYRI0b4PXBU6JCiq","raise",-749],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-750],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-751]],[4,4292269782],-748,539,540,541,542],[256,4,150,1,-753,[1,"2b9g1qXCpCSbF/4WZ59f5E"]],[94,-754,[1,"10HAL4lX9AY4TbC3LAiorB"]],[461,5,-755,[1,"e0I+wZ+TBF37KtaZP3Ig3j"]],[262,3,"1",-756,[1,"7aaYEWzV1HPIexPtke0N8D"]]],[3,"1dypAxc/5AFYHm8WxESVDL",1,0],[1,0,-243,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[83,"Scripts",33554432,1,[-761,-762,-763,-764,-765,-766,-767,-768,-769,-770],[[48,-760,[1,"c4YwpP+tZLnqIX8rT5HHIX"]]],[3,"7ahvJtTTtN/YaLpPue2xFq",1,0]],[223,"Generic Click SFX",33554432,[[48,-771,[1,"008glGt/BAVqvQFC4CeTL7"]],[139,"sfx-ui-gametap",-772,[1,"88DxMoobVBHr0AGWIDI2Ai"]]],[3,"37pFtjXlFJEJHWrJ43HhlU",1,0]],[321,"Button_Play",33554432,[-781,-782,-783],[[9,-773,[1,"9aC28Xi5NG6qfn7vwjatTH"],[5,110,110]],[311,false,3,0.9,-777,[1,"64bPB4hX9LFpcoXHoeZaUB"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-775],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickPlay",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-776]],[4,4292269782],-774,145,146,147,148],[256,4,175,1,-778,[1,"084kiwaUFBX7NgUqmH4p/v"]],[57,-779,[1,"e3evqFw8BKTIGdW4hcCJr0"]],[296,"GameScene_PlayNextLevel",-780,[1,"59USWk1ARLWqJIgrylJ+4r"]]],[3,"10q1g0d6VImZnLWjHqcQqV",1,0],[1,-1.3959999999999866,180,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[137,"Button_Ad",33554432,[-789,-790,-791,-792,-793],[[9,-784,[1,"e8YUVmEVxG6Jbutwu0K+//"],[5,60,32]],[155,3,0.9,-786,[1,"bfd69CdahHMbZB5Xh6w2Dv"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",8],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-785]]],[88,true,-787,[1,"deOpblAAVJCrDvw/oFScsw"],[534,535],536],[262,3,"0",-788,[1,"04Po729+1AC7uKAupYVmKA"]]],[3,"3bmScq/+tM/p3slh6o4fpu",1,0]],[359,"Button_PlayPause",false,33554432,[-803,-804,-805],[[9,-794,[1,"4ew6qy7tJEy77/PZ1ekIFq"],[5,110,110]],[184,3,0.9,-798,[1,"e4JK0aJntK3pWVUhglA5iS"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,false",9],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,false",9],[8,"51cbayfFYRI0b4PXBU6JCiq","raise",-796],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-797],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29]],[4,4292269782],-795,546,547,548,549],[256,4,150,1,-799,[1,"4a2r5J6+9By7TCN5ve5lAa"]],[94,-800,[1,"76Su8BRHtOVq8A+AOA31Cf"]],[461,5,-801,[1,"96VR17d7ZJurqcyKKpL3rs"]],[262,5,"1",-802,[1,"dekUJrBEVHm6qJZeKixNo7"]]],[3,"eaE8J2qfFEnrJTc/6w63v9",1,0],[1,0,-243,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[481,"Holder_Victory",33554432,[-808,-809,-810,-811,-812,-813,-814,-815],[[9,-806,[1,"93554m5WRI2oi1Q2CTx5aL"],[5,200,100]],[57,-807,[1,"55qHDAme9Ha7EIVB/VRq5Y"]]],[3,"07KtQMg0VCc7/aZYZrETLe",1,0],[1,0,100,0],[1,1.2,1.2,1]],[170,"Text_Title",33554432,[-821],[[[9,-816,[1,"67vq62yn9G+KLRWLmeIjY6"],[5,75.46,27.72]],-817,[179,1,4.140000000000015,-818,[1,"10+So3FshMCbCMd6G3jBs0"]],[96,-820,[1,"91ifmkSeVGb40IKkwLtuO1"],-819]],4,1,4,4],[16,null,"1eh3U1nbZDCq9P3IZmEoJN",0],[1,0,262,0]],[150,"Button_Yes",33554432,[-828,-829,-830],[[[9,-823,[1,"be4cwdEQpAY4SGY0pffBAX"],[5,56,40]],[23,0,-824,[1,"e9IyuL4zBBkogqlkjdRdAv"],[4,4283033344],476],-825,[88,true,-826,[1,"35+7fCbnJC7Y4rCtVSW+sX"],[477],478],[139,"sfx-ui-menutap",-827,[1,"d912ipnKlLpqI1zC5xbkPX"]]],4,4,1,4,4],[3,"f6tMYACitHf5FgpcOBWRxy",-822,0]],[359,"Button_MenuPause",false,33554432,[-840,-841,-842],[[9,-831,[1,"33waElfHhMcIb9OE7GJvFS"],[5,68,68]],[311,false,3,0.9,-836,[1,"34Mm768+pAWbKPucIHb5sy"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-833],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickMenu",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29],[8,"3ee1589zapM9JITH6e5vok4","sendGameOver",-834],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-835]],[4,4292269782],-832,553,554,555,556],[256,4,70,1,-837,[1,"9bUPc3v5VEJIuFfWA43lBN"]],[296,"GameScene_GoToMenu",-838,[1,"4822qS88NO4aHjE+fnhPnd"]],[465,-839,[1,"85zNKM7VJHZ4fCUA7QMEeq"]]],[3,"8dUbfoBkdEYY4WZ/vp1qyz",1,0],[1,-65,-344,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[137,"Button_Ad",33554432,[-848,-849,-850,-851,-852],[[9,-843,[1,"00rpplDm5IK6zIsNs9/41H"],[5,60,32]],[155,3,0.9,-845,[1,"e7UHLKhP9HO4VLMyURGIyZ"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",8],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-844]]],[88,true,-846,[1,"e8LAayS1JMcajKBADqQ8kX"],[573],574],[262,3,"0",-847,[1,"49/wIZlM1Pi5+eoNNNbQ4d"]]],[3,"04WDb5mtRGGpfMyqoB0Xxf",1,0]],[482,"Holder_Victory",false,33554432,[-854,-855,-856,-857,-858,-859,-860,-861],[[9,-853,[1,"59WGsxtmNHe5h3fPye/9LG"],[5,200,100]]],[3,"7dgcCQ95xMTJi5Vos54HyN",1,0],[1,0,100,0],[1,1.2,1.2,1]],[159,"Input Blocker",false,33554432,1,[[9,-862,[1,"56SGKfCcRPP6raFnYsqd8Z"],[5,414,896]],[168,-863,[1,"d0rLN063NO/ae6mkHmN3rP"]],[128,45,100,100,-864,[1,"7dgIC4D7BKU7CQgPEr96c1"]],[57,-865,[1,"4bqvp8rk1M47ICr6I3LT6S"]]],[3,"8brabWNaREYoOwEBzQ1huz",1,0]],[520,"Holder_TowerUpgrade",false,33554432,[[34,-869,-870,-871,null],1,1,1,1,0],[[9,-866,[1,"faM7GPYs1DHJk9ULFhSSVF"],[5,360,560]],[57,-867,[1,"adfLPbvrRMeZcA1naWQIbR"]],[94,-868,[1,"fcPkjxj/tInbloirK8cEOW"]]],[16,null,"e42yyndwVO/aCmpTo4uG1N",0],[1,0,431.475,0]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-877,[208,"eer6v2QCxMwq9fj0n6sQoL",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"28n9EjSJNDyYhyDUOjV7J3"]],[199,[1,"37vwfTbSRNprHuHEtFKtTC"]]]]],[[11,"SM_TowerBase_01",["_name"],-872],[5,["_lpos"],-873,[1,0,0,0]],[5,["_lrot"],-874,[3,0,0,0,1]],[5,["_euler"],-875,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],319],[17,8388608,["_layer"],[2,["52Wr8elKJczKH4c2zJXMeu"]]],[11,false,["_active"],-876]]],318]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-886,[208,"ac1v+0CO5G/o5WSZo/9qCO",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"19H6Z/0bFKarkhVaQNdzgH"]],[199,[1,"db0GZ2PSBFP7mf2dN0ijWZ"]]]]],[[11,"SM_TowerBase_01",["_name"],-878],[5,["_lpos"],-879,[1,0,0,0]],[5,["_lrot"],-880,[3,0,0,0,1]],[5,["_euler"],-881,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],344],[11,false,["_active"],-882],[11,8388608,["_layer"],-883],[11,8388608,["_layer"],-884],[11,true,["_active"],-885]]],343]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-892,[60,"1ehkzVtQpKRoVlwKpBjF5I",null,[[11,"SM_TowerBase_01",["_name"],-887],[5,["_lpos"],-888,[1,0,0,0]],[5,["_lrot"],-889,[3,0,0,0,1]],[5,["_euler"],-890,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],362],[11,false,["_active"],-891]]],361]],[137,"Button_No",33554432,[-899,-900,-901],[[9,-893,[1,"67J8qbdSNLjY9i8Zw7yU6x"],[5,56,40]],[23,0,-894,[1,"d2EaVd6JxMbpsX6xnXP0T1"],[4,4283302143],466],[312,3,0.9,-896,[1,"5auEgH4ttP5KTdkczKkBoi"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",19],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",19],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-895]],467],[88,true,-897,[1,"dbqbM4FeVLzpdz7QdUlmW3"],[468],469],[139,"sfx-ui-menutap",-898,[1,"d912ipnKlLpqI1zC5xbkPX"]]],[16,null,"67+XrKScpALqp1eixytaQQ",0]],[137,"Button_No",33554432,[-908,-909,-910],[[9,-902,[1,"68LwQ+UExIqLCOELpSgACf"],[5,56,40]],[23,0,-903,[1,"061FWOyrlNv7xgCe/zQ6/v"],[4,4283302143],512],[312,3,0.9,-905,[1,"0cn4kR+sFDBbUL2fIU1P3G"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,false",8],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-904]],513],[88,true,-906,[1,"caQ746MzpFKK+cn4SC8vnm"],[514],515],[590,5,-907,[1,"7fSHka5SBDIIYoD5Ew+WnC"]]],[3,"25pEdep0JAoJ/H6iVS4Df0",1,0]],[83,"Events",33554432,1,[-912,-913,-914,-915,-916,-917,-918,-919],[[48,-911,[1,"7bOBkv3SZJIImJFw8HfVAR"]]],[3,"adTzem2fpHcKe2FR3OkwK9",1,0]],[137,"BG Image",33554432,[-925,-926],[[9,-920,[1,"96uIMPkEFGMoXHKWJq088Z"],[5,414,896]],[108,0,-921,[1,"eanDS7G0lBXrgxJqPFgGVr"],538],[128,45,414,896,-922,[1,"876YFhlqhNNpY+RJlcsZ84"]],[57,-923,[1,"f1ezQpek1ADoLw9QV81VIX"]],[154,0,-924,[1,"c4OwXbPsZNWoUudtiJD5Fz"]]],[3,"98bH1qNPBKRJHtgTkStvtX",1,0]],[359,"Button_PlayAgainPause",false,33554432,[-934,-935,-936,-937],[[9,-927,[1,"1cxnoQGHlAkKNKuCDOZ4tQ"],[5,68,68]],[311,false,3,0.9,-931,[1,"83oL3YYVRH9JZyu5BqriZW"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-929],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickReplay",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29],[8,"3ee1589zapM9JITH6e5vok4","sendGameOver",-930],[8,"99672sUg5NFw4x7bEPAiyHE","activate",39]],[4,4292269782],-928,560,561,562,563],[256,4,70,1,-932,[1,"7fmnVZCG1FtK3oc22P/zlw"]],[296,"GameScene_ReplayLevel",-933,[1,"8ckeNVdIFHhZIcKdjrKNiw"]]],[3,"03s8v+YQxNk4LtDMvQseS7",1,0],[1,65,-344,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[137,"Button_Ad",33554432,[-943,-944,-945,-946],[[9,-938,[1,"53sRdAbQNMkajjaDhfIp5k"],[5,60,32]],[155,3,0.9,-940,[1,"04GCnu83FIdolv2p+/0v6x"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",8],[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-939]]],[88,true,-941,[1,"5cTHyuTrdNl5VDJz6YuJLP"],[580],581],[262,3,"0",-942,[1,"430J17U0FF46DmQtnSOqMl"]]],[3,"7cJbaBvVZCRqFgXCsoKqkN",1,0]],[321,"Button_Menu",33554432,[-953,-954,-955],[[9,-947,[1,"d9lkXBtz5Doq2VTSxajAYS"],[5,68,68]],[311,false,3,0.9,-950,[1,"07T//hyuxBCZMooRuDb/Bl"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-949],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickMenu",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29],[8,"99672sUg5NFw4x7bEPAiyHE","activate",39]],[4,4292269782],-948,131,132,133,134],[256,4,107,1,-951,[1,"fdDVb5y7ZJ9Kkdl2vJabkn"]],[296,"GameScene_GoToMenu",-952,[1,"39iFuiislIvbE95UgGMVtC"]]],[3,"b52w7twLFOxZFOOoXwks4T",1,0],[1,-65,91,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[321,"Button_PlayAgain",33554432,[-962,-963,-964],[[9,-956,[1,"c7xMCTpG1K54vDRKllxiaN"],[5,68,68]],[311,false,3,0.9,-959,[1,"32Edni2PhPzoMet7Za1ysA"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-958],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickReplay",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29],[8,"99672sUg5NFw4x7bEPAiyHE","activate",39]],[4,4292269782],-957,138,139,140,141],[256,4,107,1,-960,[1,"1fKdG5wrhKv78xuyVLDrxZ"]],[296,"GameScene_ReplayLevel",-961,[1,"7a4fCSkVNHh65I/ZKcHnB1"]]],[3,"b9f7dlNs5Pgo2yiHnr787w",1,0],[1,65,91,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[80,"Holder_ShopList",33554432,[-968,-969,-970,-971,-972],[[9,-965,[1,"f1g3+kvQpGxp6SD4e+C4QV"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-966,[1,"52vv0Vc6JNVo94t48SfuSp"]],[247,2,2,6,-967,[1,"d0ZXgOgGdEzpYfWDS+qB7g"]]],[16,null,"13liXMX3JNvbKjgOn4hq30",0],[1,0,-42.87100000000001,0]],[80,"BackGround_Light Texture",33554432,[-976,-977,-978,-979,-980],[[9,-973,[1,"2e/meUhpRIurxBgFM4xw+I"],[5,414,732]],[172,45,100,100,1,-974,[1,"d58f1pQFpJ/7dmKNeRdoSU"]],[94,-975,[1,"6fcjsIjKdGIYaUd55kqOPI"]]],[16,null,"8d2fFPz1xOprzpl8p5Hf4l",0],[1,0,366,0]],[80,"Holder_ShopList",33554432,[-984,-985,-986,-987,-988],[[9,-981,[1,"0fuu0yma1IN4cpmIn6g+04"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-982,[1,"ef6dB7H2BMoq7JqxTbvV9r"]],[247,2,2,6,-983,[1,"85F80Aa0RDE54gE+6dgRj0"]]],[16,null,"adajZ3wIBCBY5vpCaI8gE6",0],[1,0,-42.87100000000001,0]],[80,"Holder_ShopList",33554432,[-992,-993,-994,-995,-996],[[9,-989,[1,"04hdTRvkpLPIJI+jg10+rb"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-990,[1,"ddX3I1rXlMSbKgPipSDvnU"]],[247,2,2,6,-991,[1,"c0X19pgmBDDK5LF74/cWuD"]]],[16,null,"44j1G6nOxDb4PNNH8yvIyU",0],[1,0,-42.87100000000001,0]],[150,"Star_Outline 01",33554432,[-1003,-1004],[[[9,-997,[1,"dbnWJrzeBGw68OJNYuw/67"],[5,96,96]],[23,0,-998,[1,"d73ATB6RpH3LE65GWFgTeS"],[4,4281532425],266],[190,false,-999,[1,"40Uy/NPO1HsIpNLyJ9Vl5B"],[267,268]],-1000,-1001,[154,0,-1002,[1,"f117j3fJ9HYK5t+bfN/aTw"]]],4,4,4,1,1,4],[3,"b47t9qx9FOTa3x3+4kHAgp",1,0]],[80,"Panel_Color",33554432,[-1008,-1009,-1010],[[9,-1005,[1,"5cnL5sK6tNeJIEezDvH9oW"],[5,330,124]],[23,0,-1006,[1,"abVPD534xPw5gPECKWeNbD"],[4,4293450459],508],[452,1,8,8,2,-1007,[1,"72Gvwlt59G9pHQs1LWzL5u"]]],[3,"5deYAH3y5GTaLYt5wxSpbH",1,0],[1,0,17,0]],[83,"Holder_Snow Front",33554432,31,[-1012,-1013,-1014,-1015,-1016,-1017,-1018],[[48,-1011,[1,"9a8iE/UqBIXp7VOOz+uVmL"]]],[3,"54O8ip80dE2a0/hXdZ7GAo",1,0]],[303,"Content Holder_Freeze",33554432,1,[47],[[[9,-1019,[1,"b86c4TViNDUI3OhEAK8pfv"],[5,414,896]],[128,45,100,100,-1020,[1,"d09JpTu6RCtYNjwZm4VCR5"]],[450,-1021,[1,"c2Qo21cIZNYJsbc012lGWr"],[537]],-1022,[107,-1024,[1,"2d3t06wzZEyLLEtfIJaD/S"],-1023]],4,4,4,1,4],[3,"d2z2sk+ilKSZaI9H0szJaw",1,0]],[53,"Button_Pause",33554432,26,[-1032],[[9,-1025,[1,"63hFmQ5PNI8afEk5fVsfHT"],[5,50,50]],[564,17,4,26.5,178.47,1,-1026,[1,"725YWij05Ic6QO9t8KyOdM"]],[454,-1029,[1,"b95b+fcF9Fz4Pza6y6bFcO"],[[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-1028],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,true",9],[8,"ac879rTendCEbpZWFz/jexs","playSFX",29]],-1027],[94,-1030,[1,"3fTAs8umtOHJdxeInAUNX+"]],[262,3,"0",-1031,[1,"11fVBLO11ICLQHUE8FncI8"]]],[3,"b5wW2uS75Gcrcv1B4GlOOZ",1,0],[1,178.47,-1.5,0]],[83,"MidPanel",33554432,9,[27,32,36,48],[[9,-1033,[1,"fb1v5cKHlK1ouNRSKjY4T5"],[5,414,896]],[172,45,100,100,1,-1034,[1,"5bVCEqzXVFN66iCggAhJHw"]],[94,-1035,[1,"9cNjNIiVxGV5s8782hOoqP"]]],[3,"be/BJ2jGtBoYjUGoMnFRCo",1,0]],[137,"Panel_Color",33554432,[-1039,-1040],[[9,-1036,[1,"5atHkERQdLi4z3Adn4r8GR"],[5,330,64]],[23,0,-1037,[1,"d58XVBg/BLvbuMNIsvwumr"],[4,4281556991],127],[452,1,8,8,2,-1038,[1,"26fI6NLUFD87B8ZmtiELYf"]]],[3,"ebD33eM6dL7o29vda2BZWm",1,0]],[53,"Panel_Color",33554432,3,[53,23,40,-1045],[[47,-1041,[1,"a8EiAae8hAr4bAVgrqDT7M"],[5,414,732],[0,0.5,0]],[108,0,-1042,[1,"e0GtYBqSxFOpuGUS6Ywerd"],210],[378,44,-20,500,1,-1043,[1,"3133zd/DZE8bNS2S8lHdcg"]],[168,-1044,[1,"6bOcN6toRN3ZlBR9SlhpMG"]]],[16,null,"2dPvmSdyNCu6RNHSXPEq/P",0],[1,0,-468.005,0]],[80,"Panel_Color",33554432,[-1049,-1050],[[9,-1046,[1,"22uO/xfe9LN7ZVXAfFcvCP"],[5,330,89.72]],[23,0,-1047,[1,"6cU11hEIpL+rCbFu04S5bo"],[4,4293450459],246],[260,1,2,8,8,2,-1048,[1,"a4bampgNJKWKDRznVblio0"]]],[3,"49/FNTvs5CNrQN/MQz0ry6",1,0],[1,0,17,0]],[137,"Button_No",33554432,[-1055,-1056,-1057],[[9,-1051,[1,"7dU1ZIEU5EvIGpLww9yGWD"],[5,56,40]],[23,0,-1052,[1,"15VlAg4FtPgI/fwPbWOlZW"],[4,4283033344],250],[312,3,0.9,-1053,[1,"a46tQxo59Ll5ZiWWo7v87o"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",24]],251],[88,true,-1054,[1,"c3HsMmOEVGsIOQHSNh/KT6"],[252],253]],[3,"f3iALmR49BybtAf8VChiWb",1,0]],[80,"Stars_Holder",33554432,[-1062,-1063,-1064],[[9,-1058,[1,"d8k7djqcdEB5ce9C9VLGvh"],[5,312,100]],[257,1,128,1,-1059,[1,"50QaNhxptPo46bRiAX3ETw"]],[583,false,1,1,12,-1060,[1,"35LaDwYWNA0J4kKisMYEwV"]],[94,-1061,[1,"33ieTbifxFSYZfJuh4/5q4"]]],[3,"52IW0PS3lBWpXnD5DV8bS5",1,0],[1,0,-128,0]],[150,"Star_Outline 02",33554432,[-1070,-1071],[[[9,-1065,[1,"5bWwOtFSxLurI4JB2z5rwr"],[5,96,96]],[23,0,-1066,[1,"eeBo2Kco5CWbDg+ys+jOkS"],[4,4281532425],271],-1067,-1068,[154,0,-1069,[1,"2fceo593dJQZ/95SE2hJOY"]]],4,4,1,1,4],[3,"458u487txFQJRe0CyGVT7k",1,0]],[150,"Star_Outline 03",33554432,[-1077,-1078],[[[9,-1072,[1,"70SijXTbRGIKOFlQXMYPm3"],[5,96,96]],[23,0,-1073,[1,"e61irwKlVKGreA6RXRp68M"],[4,4281532425],274],-1074,-1075,[154,0,-1076,[1,"e9FIy6bYROg78niGiwrwkh"]]],4,4,1,1,4],[3,"76yxNwg39PNZFbHEenzt17",1,0]],[177,"New Node"],[322,"Head Pivot",[-1079,-1080,-1081,-1082,-1083,-1084,-1085],[16,null,"49dKoHWVZIcrRRKwHEnkqp",0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[252,"Tower Gun Head Pivot",[-1086,-1087,-1088,-1089,-1090,-1091,-1092],[16,null,"a7hneHCgpOJ5Q/8o0KLfhe",0],[1,0,0.30000001192092896,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[252,"Head Pivot",[-1093,-1094,-1095,-1096,-1097,-1098,-1099],[16,null,"ddyf7wlHpKuqt/eIJnVmMK",0],[1,0,0.3,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[331,"Currency_Panel",33554432,5,[[null,-1103,-1104,-1105,-1106],0,1,1,1,1],[[9,-1100,[1,"34FczWLOdFZqdJCV5kU1If"],[5,187.43,34]],[23,0,-1101,[1,"7bLmzAwn9LcbXb5yH9G0oC"],[4,3366911],378],[261,1,1,14,14,4,-1102,[1,"41g4p+6slAu7Q1jdePE8I/"]]],[16,null,"4dqtUMBJBKLr2wcycjkhLM",0],[1,0,-95.054,0]],[150,"Button_Yes",33554432,[-1111,-1112,-1113],[[[9,-1107,[1,"d8tz15hUZAGLICubJzFyBR"],[5,56,40]],[23,0,-1108,[1,"99N3Jmf5VA2Zdr23zZ2I7f"],[4,4283033344],384],-1109,[88,true,-1110,[1,"94h3hJwYNMCoBdyOsGSVCM"],[385],386]],4,4,1,4],[16,null,"2bjbBobSxA0bKteyU0/xAz",0]],[150,"Button_No",33554432,[-1118,-1119,-1120],[[[9,-1114,[1,"95EY4JFSJJU4oZatLWCPHs"],[5,56,40]],[23,0,-1115,[1,"8f+ZXLlgRGN58FfQHGTkMx"],[4,4283302143],390],-1116,[88,true,-1117,[1,"2ervYz+j5FM4JQqunSb7dc"],[391],392]],4,4,1,4],[16,null,"6d2y12U2hHG4zH3bL+Jfl5",0]],[150,"Button_Back",33554432,[-1125,-1126,-1127],[[[9,-1121,[1,"06cP1chqBG2be0/5B0iGHF"],[5,62,40]],[23,0,-1122,[1,"fbVvm4iVBGgKSrhPEnIOCQ"],[4,4292724926],396],-1123,[88,true,-1124,[1,"6fkS47UzNGzoqEjrf2Ek6A"],[397],398]],4,4,1,4],[16,null,"ea0JIZy+xBNYytRZdPy89C",0]],[170,"Button_Back",33554432,[-1132,-1133,-1134],[[[9,-1128,[1,"53ai0tn6REmJPKY5xASrsW"],[5,62,40]],[23,0,-1129,[1,"99mDOJL0pAQ6135ws3pjFw"],[4,4292724926],405],-1130,[88,true,-1131,[1,"41t9g7x5JCoJ4NqMe/j+3I"],[406],407]],4,4,1,4],[16,null,"4euq0G2oNCqYycL78F+XsU",0],[1,0,-90,0]],[80,"Panel_Color",33554432,[-1138,-1139],[[9,-1135,[1,"cdoSZt0dFLBILTecEfMPiG"],[5,330,45.72]],[23,0,-1136,[1,"1883XWiglPQ5OrO4+Y8s3O"],[4,4293450459],424],[260,1,2,8,8,2,-1137,[1,"28QRpDHtBKfqfXRsJLI60/"]]],[16,null,"65gCvGHflAZ62ojJoEYZk4",0],[1,0,17,0]],[53,"Currency_Panel",33554432,10,[-1143,-1144,-1145,-1146],[[9,-1140,[1,"25xg0XXWFB46/QhhyFgRLL"],[5,183.43,34]],[23,0,-1141,[1,"766NC1HppJJ5+jtG8MYK2n"],[4,3366911],433],[261,1,1,14,14,4,-1142,[1,"b8NOXbfatLD5rWD3q3+TiL"]]],[16,null,"beq3VAqgRNN75PbqovO0HC",0],[1,0,-66.825,0]],[150,"Button_Yes",33554432,[-1151,-1152,-1153],[[[9,-1147,[1,"fcCjBcEu5FkadedQIiRGQx"],[5,56,40]],[23,0,-1148,[1,"2cFNfeBktHxICdfuxb390x"],[4,4283033344],437],-1149,[88,true,-1150,[1,"2ervYz+j5FM4JQqunSb7dc"],[438],439]],4,4,1,4],[16,null,"f3o9FnxnlKOo8pKk744+b6",0]],[150,"Button_No",33554432,[-1158,-1159,-1160],[[[9,-1154,[1,"c9n3cxX91OV4aENQsKR1zZ"],[5,56,40]],[23,0,-1155,[1,"28Je6GcIZBj6BORxc6Ht1J"],[4,4283302143],443],-1156,[88,true,-1157,[1,"2ervYz+j5FM4JQqunSb7dc"],[444],445]],4,4,1,4],[16,null,"52KrkRgtNPDo28xZW7jJ2o",0]],[80,"Panel_Color",33554432,[-1164,-1165],[[9,-1161,[1,"14RY9LbLxOlL45xQECDXdw"],[5,330,89.72]],[23,0,-1162,[1,"f7XovzC0ZJkr9FYgq7Ju2J"],[4,4281556991],458],[260,1,2,8,8,2,-1163,[1,"80RLeolCdJJ43qbn+QCKBB"]]],[16,null,"44bJHWkiZMcaCaHweKBVdf",0],[1,0,17,0]],[150,"Button_Yes",33554432,[-1170,-1171,-1172],[[[9,-1166,[1,"78ZsGovKpEJouOaqbw5EkA"],[5,112,40]],[23,0,-1167,[1,"faUwDHnLdE7YCuLIrdntKv"],[4,4283033344],519],-1168,[88,true,-1169,[1,"8f0asi9ZxOn6tmEPYoxnID"],[520],521]],4,4,1,4],[3,"b5Xnz6EKhJWZEOqYO3qYZz",1,0]],[80,"Panel_Outline",33554432,[18,20,21,-1175],[[9,-1173,[1,"866Td8rd5GYo09RQt+Ku13"],[5,272,38]],[23,0,-1174,[1,"29J0XzsWhIrLqvhAKDkmVg"],[4,4294174947],43]],[3,"fbfBNrGr5Jrbc6fpGvP1mP",1,0],[1,13.819,0,0]],[53,"TopPanel",33554432,9,[-1179,-1180,-1181],[[9,-1176,[1,"c2l2HwlRdKjZp8JzykoODX"],[5,414,100]],[293,41,100,1,-1177,[1,"4a4+XlaU5Ji6kcE4IBec88"]],[94,-1178,[1,"66zD7MUApCH7ZfK4u1EFb5"]]],[3,"2bHbcyDxJHJpF4cz0aKl5i",1,0],[1,0,398,0]],[508,"Text_Stage Number",33554432,85,[-1188],[[[9,-1182,[1,"19MlS1yQ9E5o/RulyVYdCl"],[5,95.16,50.4]],-1183,[397,"Stage ",-1186,[1,"b9WeavmTlMJ5WJ477Wtf31"],-1185,-1184],-1187],4,1,4,1],[3,"2er0kucK1GpZjtvFTe8ztD",1,0],[1,0,-15.254999999999882,0]],[33,"Cube Tower HP UI",33554432,28,[[48,-1189,[1,"39Lb091rxDGoZ9mX+xlb9l"]],[597,-1210,[1,"dcxufK/0VC3JY7X1of5j2J"],[-1190,-1191,-1192,-1193,-1194,-1195,-1196,-1197,-1198,-1199,-1200,-1201,-1202,-1203,-1204,-1205,-1206,-1207,-1208,-1209],[[142]],[[142]],[[142]]]],[3,"49d4+RqQ9GF7qxUAyGXDMI",1,0]],[53,"BotPanel",33554432,8,[-1214,-1215,6],[[9,-1211,[1,"6blJ6ukAVKKYyVpH0nj4sA"],[5,414,100]],[293,44,100,1,-1212,[1,"e3giGaYNpMS44czGAuKlfS"]],[154,0,-1213,[1,"edxDZnBV9CiafE2frUPKiY"]]],[3,"f7zvnB7f5I1J6JDxy+modA",1,0],[1,0,-398,0]],[53,"Separator",33554432,88,[-1218,-1219,-1220,-1221],[[9,-1216,[1,"8bF33IUOZBNJxBtSHPUpSD"],[5,0,3]],[23,0,-1217,[1,"fcOawCy8xNOpxzNfv8iHYQ"],[4,4294174947],71]],[3,"e6r3/oPj9K/bxl2xF+QYx2",1,0],[1,0,55.729,0]],[80,"Texts_Holder",33554432,[-1225,-1226,-1227],[[9,-1222,[1,"a5A1AXQflM6Ir4pcQgrqXo"],[5,155.71,66]],[248,1,1,2,-1223,[1,"1cNxXbJLdM357XB/ew3qxz"]],[94,-1224,[1,"admQHNyG5MBaAdrxB3Tbd2"]]],[3,"3aypqNswRGOasYgr/79cup",1,0],[1,-1.168,3.504,0]],[83,"MidPanel",33554432,8,[-1231,38,-1232],[[9,-1228,[1,"06zRYavfhAkbZlZ3RJfaEP"],[5,414,896]],[172,45,100,100,1,-1229,[1,"69a6ik6PtIHK0Oaq3D7p9N"]],[94,-1230,[1,"95n/QgvsFFg7dmTgw5Gt2D"]]],[3,"0dajiuehJKAY6NGi/qi06k",1,0]],[197,"TopPanel",false,33554432,7,[-1235,66,-1236,-1237],[[9,-1233,[1,"e8lZrkqBxCIqfSbPGUJIa9"],[5,414,100]],[293,41,100,1,-1234,[1,"10yRoX5kROha5Ok/ZnrjrT"]]],[3,"08CJV7oFBDzbLTlCsttEOk",1,0],[1,0,398,0]],[197,"BotPanel",false,33554432,7,[50,51,30,-1240],[[9,-1238,[1,"04x5fWg65GTbFmVrMNx3tR"],[5,414,100]],[293,44,100,1,-1239,[1,"83bHC6ZZ5K7KvZKZkiSjrF"]]],[3,"574t6jf8VBNbF/ECbBtvyx",1,0],[1,0,-398,0]],[224,"Button_Shop",33554432,93,[-1245,-1246,-1247],[[9,-1241,[1,"8ahJsP5b5Jr5WKRQSLPWOH"],[5,60,60]],[184,3,0.9,-1243,[1,"515DCz5i1LIbf/mQFg2qJ/"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","toShop",7]],[4,4292269782],-1242,152,153,154,155],[256,4,40,1,-1244,[1,"341wqB9vxE/rzdfInf7yds"]]],[3,"62GcHAJw1DZ51WW8pAM36H",1,0],[1,0,20,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[53,"Holder_Tower Stats",33554432,25,[-1251,-1252,-1253],[[47,-1248,[1,"1eRyDcMY5PvqU7BWrEmWbl"],[5,154,50],[0,1,0.5]],[248,1,1,32,-1249,[1,"c44TBCdsBEZZfyuNwkGmBT"]],[154,0,-1250,[1,"b070zEHPhK4IXcyjgY/Fv1"]]],[16,null,"51q2mQtBBONbWsqmwGu5cn",0],[1,149.412,-43,0]],[360,"Towers Holder",8388608,[-1257,-1258,-1259],[[9,-1254,[1,"d5/n74qV9HAJU29fZtrXoX"],[5,0.8333333333333334,1.0833333333333333]],[200,45,5,-5,100,100,-1255,[1,"c85llaHbZBsZ/ncu90wkGl"]],[306,true,true,-1256,[1,"61cy0NQ5VBDpVP78+De16t"]]],[16,null,"b64X39hPtCZ7D7lfeTYliT",0],[1,0,27.5,200],[3,-3.0616169978683824e-17,0.8660254037844387,0.49999999999999994,5.3028761936245346e-17],[1,60,60,60],[1,-60,180,0]],[53,"Energy_Holder",33554432,26,[84,-1263],[[9,-1260,[1,"7eANxaE0pCOIiYswrDzvtb"],[5,296,38]],[257,1,32,1,-1261,[1,"3dCnvdZ01Nu4XSrbS4kfkd"]],[94,-1262,[1,"f1mo0AHyNElrg6sR7GyCjx"]]],[3,"d7iVc1atpLIadbU2ouzi81",1,0],[1,0,-1,0]],[53,"Holder_Lock 01",33554432,21,[-1266,-1267],[[9,-1264,[1,"76JEEV8StOEK5lvHrKoBe0"],[5,22,22]],[94,-1265,[1,"07qFBrITpPBKbIvzuLOD6d"]]],[3,"bb80MsTbNMEqr55ap8h3Hm",1,0],[1,15.5,0,0]],[53,"Holder_Lock 02",33554432,21,[-1270,-1271],[[9,-1268,[1,"38JgbmXj9KOJY2kKCPFnEP"],[5,22,22]],[94,-1269,[1,"5504J3AeFFe5z5XfU/dAtj"]]],[3,"ec9n9ITfNK2JYJNhbKYEy9",1,0],[1,41.6,0,0]],[53,"Holder_Lock 03",33554432,21,[-1274,-1275],[[9,-1272,[1,"ber4KoUHFL4JjHIspmh0d/"],[5,22,22]],[94,-1273,[1,"5egY7RaWZM0JpYl5Mfot7e"]]],[3,"c23wtes3RFUowrK/zzWVwH",1,0],[1,67.7,0,0]],[53,"Holder_Lock 04",33554432,21,[-1278,-1279],[[9,-1276,[1,"d0wZry9qhIXIO1q6mmzLoU"],[5,22,22]],[94,-1277,[1,"e9Uq7ZCn1GV4lKB2ZwPgTy"]]],[3,"1e7YKWXolPDqsDfaxtB2zx",1,0],[1,93.8,0,0]],[53,"Holder_Lock 05",33554432,21,[-1282,-1283],[[9,-1280,[1,"38EEOGURxA6aKf4n6uKJhr"],[5,22,22]],[94,-1281,[1,"8f1JYWWDJBta57CrvbR6z6"]]],[3,"d5L3xcBFlC06ObWGEhfzu6",1,0],[1,119.89999999999999,0,0]],[53,"Holder_Lock 06",33554432,21,[-1286,-1287],[[9,-1284,[1,"e6BNluzhVCLY07qwByLEdK"],[5,22,22]],[94,-1285,[1,"02fBqMfV9BOLOjGBqYH4rR"]]],[3,"ddfacMMP1CYLMMZxNr+o53",1,0],[1,145.99999999999997,0,0]],[53,"Holder_Lock 07",33554432,21,[-1290,-1291],[[9,-1288,[1,"06uycXeL5Jy5arcGJQ4Pvt"],[5,22,22]],[94,-1289,[1,"96KGxi2RlMq4mpLlIIDIra"]]],[3,"47qh4mv7hG3aFQmnyvU6M8",1,0],[1,172.09999999999997,0,0]],[53,"Holder_Lock 08",33554432,21,[-1294,-1295],[[9,-1292,[1,"f12dN4kPNJvrHpp5u908BN"],[5,22,22]],[94,-1293,[1,"dax+6x6RRNAKIPV88EWuux"]]],[3,"10qNw07JtDn4N11pOKvx6+",1,0],[1,198.19999999999996,0,0]],[53,"Holder_Lock 09",33554432,21,[-1298,-1299],[[9,-1296,[1,"aeKeHG9RFClJrGybwGYTf4"],[5,22,22]],[94,-1297,[1,"a4yDLg06RI6JmAy9wqy5Np"]]],[3,"d5iuWH8ulEx7/fFhQ6usn9",1,0],[1,224.29999999999995,0,0]],[53,"Holder_Lock 10",33554432,21,[-1302,-1303],[[9,-1300,[1,"42yLLZsalBdICI9ZD8JxzR"],[5,22,22]],[94,-1301,[1,"1dO+8sf/BEw4mHLvchDPyb"]]],[3,"cfLsKUx3tCopm/TJHV/rZk",1,0],[1,250.39999999999995,0,0]],[53,"StageInfo_Holder",33554432,85,[-1307,-1308],[[9,-1304,[1,"6emLd80R1K97tUVY09BiPB"],[5,260,280]],[389,false,0,-1305,[1,"bd5icFkCZDFbPPW9CZsm//"],62],[94,-1306,[1,"54HTKoGHFGo5PiP+rCbDCP"]]],[3,"6dGahrvXBI57nBLACe9LMN",1,0],[1,0,-248.81799999999998,0]],[53,"Notification_Holder",33554432,91,[-1311,90,-1312],[[48,-1309,[1,"d8fTlyUNZJtbeIZtI94Hkk"]],[154,0,-1310,[1,"b1QxUZKXxJTaPASTaxJAh4"]]],[3,"0aaUZ1wahEJpNc887VLlEN",1,0],[1,0,226,0]],[53,"Outline",33554432,109,[-1315,-1316,-1317],[[47,-1313,[1,"cfa6a6JwFOaoyzzZg3J+r1"],[5,240,83],[0,1,0]],[46,1,0,-1314,[1,"14iHd2WxZG0YN5J68OiLub"],[4,4292928274],107]],[3,"bbcDanNAxDmI5+2+L/2tBO",1,0],[1,126,-37,0]],[112,"Text_Stage Level",33554432,92,[[[9,-1318,[1,"ddpbdg7uxF1KTwVDOEF1w6"],[5,90.4,47.88]],-1319,[397,"Stage ",-1322,[1,"2fBXmkpO5NXp0J0tvc4Gyv"],-1321,-1320],-1323],4,1,4,1],[3,"b2ajJhW9lIyqgPtkEPSyzq",1,0],[1,0,-15.888,0]],[238,"MidPanel",false,33554432,7,[33,-1326,-1327],[[9,-1324,[1,"06Y9dVHBlOOp8+6l090Fcy"],[5,414,896]],[172,45,100,100,1,-1325,[1,"c07NEJWuNJDLHQr5cETXOh"]]],[3,"dd8OClWH9M9Z4g8UH8KFh/",1,0]],[80,"Bar_Left",33554432,[-1331,-1332],[[9,-1328,[1,"529gFYiohJv42bUOAKiQPF"],[5,2,78]],[23,0,-1329,[1,"9cGKRH5XpBnL0/OJdNsCes"],[4,4284216710],123],[341,5,-7,-7,172,-1330,[1,"096+c1t7ZPB5f+edr5mfxM"],62]],[3,"d0nBmh72FCf7hgfaeKweie",1,0],[1,-170,53.120000000000005,0]],[80,"Bar_Right",33554432,[-1336,-1337],[[9,-1333,[1,"7blS28ccFHNZaY5X+mNeO1"],[5,2,78]],[23,0,-1334,[1,"26UtrGJ8tDyYdQGE5sw38h"],[4,4284216710],126],[341,5,-7,-7,172,-1335,[1,"5fH6pRfgBAu57wiXAS8f0P"],62]],[3,"feIxOwV8FFr4ZWdPPOsqSu",1,0],[1,170,53.120000000000005,0]],[30,0,null,52,[22,"75a1vm5JJA+ohuNwq5URob",-1338,[60,"70wDt2VWFD16VzFvDwRYUS",null,[[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,true,["_debug"],[2,["9fkwbwsEJNtp1a9YblePmY"]]]]],238]],[53,"Collum_01",33554432,23,[-1342,52],[[9,-1339,[1,"32Y5V3byFKuqK+N7JXeznY"],[5,120,460]],[246,5,13.694,-13.694,99.99,-1340,[1,"0cSqBZZl9D+oYP89TSl8md"]],[249,false,1,0,-1341,[1,"f5cAvkOhtMGKKG1BDhv+6e"],233]],[16,null,"54WS7barRHmJ1LrGpDoA+c",0],[1,-120,-13.693999999999988,0]],[331,"Holder_ShopList (New)",33554432,40,[[22,-1345,-1346,null],1,1,1,0],[[48,-1343,[1,"e4Q6D8tJJFgbcHyjwh0rF2"]],[117,17,60,-40,173,126.92099999999996,100,100,-1344,[1,"f2iPXnlV1OHr0i7dB8mdh9"]]],[16,null,"b5e+hxCrpHW68OnBNt7IUQ",0],[1,0,57,0]],[83,"Left Side",33554432,22,[-1349,-1350,-1351],[[47,-1347,[1,"e7r2GeMo9Jw67LlIMZfbXr"],[5,180,260],[0,1,0]],[294,5,100,-1348,[1,"0cevL0De5FppNWFghYjplh"]]],[16,null,"d5r9TGGClG04uw8ACFCoUm",0]],[361,"Right Side",33554432,22,[-1354,-1355,-1356],[[47,-1352,[1,"1egS9F8V5APY9dUN3aVGdy"],[5,180,260],[0,1,0]],[294,5,100,-1353,[1,"57w1VphxtGP5rgdAdAantd"]]],[16,null,"40RWkfA+JDsJwEPQTShAVk",0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[53,"Collum_02",33554432,23,[-1360,54],[[9,-1357,[1,"79NCyZnfxKB7LopVQ/7aJx"],[5,120,460]],[246,5,13.694,-13.694,99.99,-1358,[1,"53DoZ3/UZI+rctXnxAnjoU"]],[249,false,1,0,-1359,[1,"32Gy2rnztJA5Tml/RkxXvn"],220]],[16,null,"65YO3Ls5xAMqyClmBfkgxr",0],[1,2,-13.693999999999988,0]],[53,"Collum_03",33554432,23,[-1364,55],[[9,-1361,[1,"35V/ziLWRJBYUcVAXtFT8D"],[5,120,460]],[246,5,13.694,-13.694,99.99,-1362,[1,"4ehzcld3VO3rCzoWJ/xbn2"]],[249,false,1,0,-1363,[1,"adNiNly1tBn5+dhH5pTWIl"],230]],[16,null,"a5GjDUe49KpIVkVL391Xy9",0],[1,124,-13.693999999999988,0]],[80,"Bar_Left",33554432,[-1368,-1369],[[9,-1365,[1,"14GXkdQSpKOaRxxCt33clQ"],[5,2,103.72]],[23,0,-1366,[1,"deiCVNwPlHm7uo+Kgzuyk6"],[4,4284216710],242],[307,13,-6,-7,-7,172,1,-1367,[1,"f2D77SnxdIvaNJT3ZnA1m7"],64]],[3,"e1Ww5cxDdOL6BxGXivYGsj",1,0],[1,-170,36.86,0]],[80,"Bar_Right",33554432,[-1373,-1374],[[9,-1370,[1,"eb+/6ybWFH9KOlANXWBkBP"],[5,2,103.72]],[23,0,-1371,[1,"d0s2Z38IBONKFdRJvtK1BI"],[4,4284216710],245],[308,37,-6,-7,-7,172,1,-1372,[1,"b0wxrNDUFBB7q0dFsgkbnc"],64]],[3,"71QiKvXKlPc6E8yhPpUHtJ",1,0],[1,170,36.86,0]],[80,"Bar_Left",33554432,[-1378,-1379],[[9,-1375,[1,"6faw+7QrRNeLz7AQGxDZSh"],[5,2,174]],[23,0,-1376,[1,"ccxMB4qSpKirNmcPYwSIhB"],[4,4284216710],294],[258,5,-7,-7,172,1,-1377,[1,"07ypDjeJRIaYDj0V3N8KE+"],25]],[16,null,"54IvC3S+JBNJ7wXlJl8IfE",0],[1,-170,70,0]],[80,"Bar_Right",33554432,[-1383,-1384],[[9,-1380,[1,"4bv4hhEJpKn6pzG6YU67XS"],[5,2,174]],[23,0,-1381,[1,"c84ayXa81KKbKRa0RghYdR"],[4,4284216710],297],[258,5,-7,-7,172,1,-1382,[1,"c8WiK76IxNjob0biLnFHMK"],25]],[16,null,"ea4IrXmUBDo7GnM9reepxT",0],[1,170,70,0]],[369,"Head",[[70,[102,"Bullet Spawn Pivot",-1385,[16,null,"c0pXUGaNZKwbAOwCAovM39",0],[1,0,0.135,-0.406]],-1386,-1387,-1388],1,4,1,1,1],[16,null,"bfM6+LgF5HAI2BQvt7chGS",0],[1,0,0.4,0]],[2,["424JMWZcNT+7LUIxhmggm+"]],[2,["4d/LLVKgJfRaWh6CVtkvdN"]],[2,["06VFwTsJJRM4OSJg2XW4Q9"]],[2,["efp8IlO8deIZfWSlH1z7o0"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[80,"Holder_Energy Cost",33554432,[-1391,-1392,-1393],[[9,-1389,[1,"44Imax/rpLxK9dC+HfHFYo"],[5,50,50]],[23,0,-1390,[1,"93DemOaGZHEJZmhwSY8GSE"],[4,4282712119],368]],[16,null,"eaHLSMrv5BUIat6sqiGKsD",0],[1,11.263,27.002,0]],[253,"Holder_Yes Feedback",false,33554432,[-1395,-1396,-1397,-1398],[[9,-1394,[1,"efBR4Fl7tD9ZNjrExc7NwH"],[5,40,36]]],[16,null,"487Ibq+3FH/q+dmdPXnNmE",0]],[80,"Panel Color",33554432,[-1402,-1403],[[9,-1399,[1,"37AFTw6p1Cl4uICmfblduW"],[5,290,80]],[23,0,-1400,[1,"40HJ5FrYVMYrl4hXIliHUP"],[4,4283302143],401],[168,-1401,[1,"87aLHe+XhOV5diEczisIkO"]]],[16,null,"decb9bcU9IUIXQApjWKk5T",0],[1,0,-14.5,0]],[80,"Bar_Left",33554432,[-1407,-1408],[[9,-1404,[1,"c0b8o35a9AlZckTIl9xWA5"],[5,2,59.72]],[23,0,-1405,[1,"a0zXip8D9JqYceHiNvIEUl"],[4,4284216710],420],[307,13,-6,-7,-7,172,1,-1406,[1,"e9kI7NomZGkL8f3YwdujH0"],78]],[16,null,"56Hk2UKeZI66WcShdJ+gEq",0],[1,-170,0,0]],[80,"Bar_Right",33554432,[-1412,-1413],[[9,-1409,[1,"da7lnAXkNMs4PKAWYWOfeH"],[5,2,59.72]],[23,0,-1410,[1,"9bkYEIo/VLB5VbyHhPXFV+"],[4,4284216710],423],[308,37,-6,-7,-7,172,1,-1411,[1,"90n9ZO6ZhH5ouBiVHb0sLi"],78]],[16,null,"6eP/1hbqpOi5XeRFke3a3C",0],[1,170,0,0]],[253,"Holder_Yes Feedback",false,33554432,[-1415,-1416,-1417,-1418],[[9,-1414,[1,"e4yHsMrkdGWKzEdF1on50d"],[5,40,36]]],[16,null,"8d5K8baVxM/IOyYBuIC/Nx",0]],[80,"Bar_Left",33554432,[-1422,-1423],[[9,-1419,[1,"23bLN3TYRPp4VHxS1bzaPs"],[5,2,103.72]],[23,0,-1420,[1,"4brLfiAttJy5tZT/OhuHTJ"],[4,4284216710],454],[307,13,-6,-7,-7,172,1,-1421,[1,"38TE5ZuJJN4qWKE+GJrzBx"],82]],[16,null,"2dTGLg5wtOwqOwb/VcmfMh",0],[1,-170,36.86,0]],[80,"Bar_Right",33554432,[-1427,-1428],[[9,-1424,[1,"53ZbFus8tATr+AAkaY/qGS"],[5,2,103.72]],[23,0,-1425,[1,"55BO83MAtFM7+F4uIaipPI"],[4,4284216710],457],[308,37,-6,-7,-7,172,1,-1426,[1,"dccNjJ6rxBmrvCEt33eUOv"],82]],[16,null,"70u1fZkMZF4Jv4cHZS8hsL",0],[1,170,36.86,0]],[253,"Holder_Yes Feedback",false,33554432,[-1430,-1431,-1432,-1433],[[9,-1429,[1,"d8raadzRRFPIO9YBJ6nEaE"],[5,40,36]]],[16,null,"61DejrkLZETLVvXr7Ej88g",0]],[509,"Button_Back",33554432,3,[-1438],[[[9,-1434,[1,"40ZcLQAd9DJoiS3dftpr/m"],[5,40,40]],[46,1,0,-1435,[1,"6c1OOnOCRChpwVafCJlxGq"],[4,4294765656],498],-1436,[442,17,812.607,139,1,-1437,[1,"cb73+n4ZNNLoAuOg7/VcUw"]]],4,4,1,4],[16,null,"44L4tEVZpIq7aa6UqNBevT",0],[1,139,-384.602,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[137,"Holder_Ad Confirmation",33554432,[-1441,-1442,-1443],[[48,-1439,[1,"d1vzDd9v1HRIrpV1tNkLTy"]],[57,-1440,[1,"73DzpC4yZB5LwPtEcJI6gd"]]],[3,"99eYW9441IQImTrdpVcKfG",1,0]],[80,"Bar_Left",33554432,[-1447,-1448],[[9,-1444,[1,"a0+cZ3XFlMnLIhPo4TNBfo"],[5,2,138]],[23,0,-1445,[1,"a5izxG4wlJZIzq02LqoHkK"],[4,4284216710],504],[341,5,-7,-7,172,-1446,[1,"ddYjVaEntBKpmB4WbJRYdP"],57]],[3,"3faZcQCcZJcaJYKLfiD+cF",1,0],[1,-170,53.120000000000005,0]],[80,"Bar_Right",33554432,[-1452,-1453],[[9,-1449,[1,"728nLTRi9GzJtSkbAnwSQc"],[5,2,138]],[23,0,-1450,[1,"74Bq2XFuJMZJHXP8+7UZSN"],[4,4284216710],507],[341,5,-7,-7,172,-1451,[1,"ca4XGH2hJKo7GnOtnFHzjt"],57]],[3,"c0mgFYTdJBea/4a2bkOlIk",1,0],[1,170,53.120000000000005,0]],[53,"Square_Holder",33554432,26,[-1456,-1457],[[48,-1454,[1,"7bnX4buzROo5b3r2EdvdLC"]],[257,1,-29.999999999999996,1,-1455,[1,"c833AUePVH67WsP399FXiG"]]],[3,"42mHyfmpNPqaKQn+Fp0oII",1,0],[1,0,30,0]],[53,"Energy Numbers_Holder",33554432,84,[-1460,-1461],[[9,-1458,[1,"aaoakzP5xCnbVStC/8dPJ3"],[5,80,80]],[94,-1459,[1,"dcARwsJOJP4aLWt1KB8X24"]]],[3,"ddVzP6vGpFfL/gj9q6J4Kb",1,0],[1,-142.292,-17.15599999999995,0]],[112,"Text_Current Energy",33554432,146,[[[47,-1462,[1,"f0D7eudXpGapNTsS7n/boV"],[5,40.56,110.88],[0,1,0.5]],-1463,[96,-1465,[1,"47G6skn6JE4YQIxzfS0nhx"],-1464]],4,1,4],[3,"5fk8MuD5ZGT4jnVDBTiQe8",1,0],[1,-0.419,2.363,0]],[112,"Text_Total Energy",33554432,146,[[[47,-1466,[1,"e4sPgEnl1Nd40SGQUgf0+q"],[5,34.37,37.8],[0,1,0.5]],-1467,[463,"/",-1469,[1,"65Sncik95PM7hCy8eO8vEB"],-1468]],4,1,4],[3,"7dpjIsNz9MnbipLja4uc5e",1,0],[1,40.698,-18.887,0]],[83,"Overlay",33554432,9,[-1473],[[9,-1470,[1,"b2cTEyFexNZ5fssjNc6ysC"],[5,414,896]],[23,0,-1471,[1,"9bbfgEqBFFAqa4Hl4n+LiM"],[4,3358785545],47],[128,45,40,36,-1472,[1,"5fSax9rO1IjIhadUgz0QVt"]]],[3,"81ElX3LmlEG60SbfRx51Hh",1,0]],[53,"Square_Holder",33554432,85,[-1476,-1477],[[48,-1474,[1,"beuttpYwJEeZ1KBB8NvCS7"]],[257,1,-29.999999999999996,1,-1475,[1,"4andvVKepFmq2Mz+ZidEYc"]]],[3,"fcqc8za/FPXKblpXqBUdSU",1,0],[1,0,30,0]],[53,"Icon_TowerMob Space",33554432,108,[-1480,2],[[9,-1478,[1,"a7/yV42NBF8K7lGbF/s+YM"],[5,44,44]],[389,false,0,-1479,[1,"9eNmjWLgVPiJysvVJvBB5H"],61]],[3,"bdHVRwUz1M35gM11LVk9KE",1,0],[1,0,90,0]],[2,["feXYlDJrhOiIHGtymY3yxW"]],[112,"Text_Stage Info",33554432,108,[[[9,-1481,[1,"5a3/59oLlNr7+vC9kEwLiW"],[5,200,170]],-1482,[96,-1484,[1,"6apQwLZbJL3akk8f9FMFXM"],-1483]],4,1,4],[3,"d1XJBv4oBCtpyUzGYzEmo3",1,0],[1,0,-45.444,0]],[112,"Text_Current Wave",33554432,90,[[[9,-1485,[1,"d3MKsXmCdJX5/K5LM6RlBu"],[5,11.27,60.48]],-1486,[96,-1488,[1,"8d0eOJd7FMx5CwPmfdXQQ9"],-1487]],4,1,4],[3,"85/2sIiHdI+5CeJ7Gddt1C",1,0],[1,26.79,0,0]],[301,"Holder_Defeat",false,33554432,91,[-1490,-1491,-1492],[[9,-1489,[1,"04YVKQAUtFK7gjIzq4zgdi"],[5,200,100]]],[3,"11wkCLlPJOSrMgszxDX0+w",1,0],[1,0,100,0],[1,1.2,1.2,1]],[112,"Text_Total Waves",33554432,90,[[[9,-1493,[1,"9fuBtiH5hCxpdxUWNMzYa3"],[5,43.43,60.48]],-1494,[463,"/",-1496,[1,"f4RKnyWWJKMLAqCSxs98ZP"],-1495]],4,1,4],[3,"7952zDG4tIi62NWqHN2ywz",1,0],[1,56.14,0,0]],[159,"Overlay",false,33554432,7,[[9,-1497,[1,"c55ActcnlKvLYlFKH7BYlH"],[5,414,896]],[23,0,-1498,[1,"54RihCqeBN26P74nliSDV/"],[4,3342345],111],[172,45,40,36,1,-1499,[1,"6bc5ZpVVFBhp7SeBt/qsA3"]],[168,-1500,[1,"59PEy9xBRJw6rmQCnxU8HA"]]],[3,"bdD8FaL3pFLI+KDp/zpQNk",1,0]],[137,"Holder_Info Panel",33554432,[-1503,-1504],[[48,-1501,[1,"75J7W3mfdI86SXKgEaAJSA"]],[57,-1502,[1,"305QLuLupLlYFwnKG8Hxp/"]]],[3,"edzatnPqFKdIitKQzStgVX",1,0]],[33,"Button_Color",33554432,50,[[9,-1505,[1,"8fJyVSipZIp6/cu+KgJLTZ"],[5,66,66]],[46,1,0,-1506,[1,"6dcNtn78pLh7lgR0UA6xbI"],[4,4294174947],128],[117,45,1,1,1,1,108,108,-1507,[1,"43pyyQdFxL74JH3H6Z3+py"]]],[3,"cfeFKoYbtGOIsIxqe5bdT0",1,0]],[33,"Button_Color",33554432,51,[[9,-1508,[1,"82kZSfuOdClJ5PCR2828uJ"],[5,66,66]],[46,1,0,-1509,[1,"179vlNZm1KUqn+R8wLon2H"],[4,4281556991],135],[117,45,1,1,1,1,108,108,-1510,[1,"bcqKyeGU5GLpd+Cp19Uvvs"]]],[3,"5b38LzKK1OhZnFrLEEoPMq",1,0]],[33,"Button_Color",33554432,94,[[9,-1511,[1,"1fn3RSjCpJ6oj81i00zfy5"],[5,58,58]],[46,1,0,-1512,[1,"93FAUZaktNzJ5il+xqccSq"],[4,4280479485],149],[117,45,1,1,1,1,108,108,-1513,[1,"9es3/4JfFMbZiZy3nLGHQ3"]]],[3,"a7WL99dbZAPr2YtBu3ZQco",1,0]],[2,["68bll21PNLdos7u2gIR3Y0"]],[83,"Line 01",33554432,118,[-1516,-1517],[[47,-1514,[1,"01nKohP81MSqzuoch25Wr8"],[5,180,260],[0,1,0]],[128,45,100,100,-1515,[1,"eew606MuJBNLpowW4901A7"]]],[16,null,"1a1W5s8t1HsZ2uTFYEXY2i",0]],[83,"Line 02",33554432,118,[-1520,-1521],[[47,-1518,[1,"faVfzWDWdCZZDKnrZ7c5I3"],[5,180,260],[0,1,0]],[128,45,100,100,-1519,[1,"45jRYe6yJIJqSIAQ6HeEHa"]]],[16,null,"fa2BeNCxdOkqyk+GqYGut3",0]],[83,"Line 01",33554432,119,[-1524,-1525],[[47,-1522,[1,"7c5DUvpAhI/IpABkeBbQLc"],[5,180,260],[0,1,0]],[128,45,100,100,-1523,[1,"45LlZzcIJO2byTPdpZ2yRQ"]]],[16,null,"96TRkWxkVMRoJqu2LxcZbk",0]],[83,"Line 02",33554432,119,[-1528,-1529],[[47,-1526,[1,"78IKsUXgtPUKYHWHiwMyzt"],[5,180,260],[0,1,0]],[128,45,100,100,-1527,[1,"a8gT0jIPFG5JbeVinWiwvJ"]]],[16,null,"30JqS38cNPlqXO1tRvrJk+",0]],[53,"Holder_TowerTabs",33554432,40,[13,14,15],[[48,-1530,[1,"26upwnFQhKj5plbK8f8FRM"]]],[16,null,"21u58HYahI9529WWCwsjXr",0],[1,0,-230.39,0]],[53,"Text_Title",33554432,120,[-1534],[[9,-1531,[1,"794h5Xb+lA1Y5o9NX4anoL"],[5,71.41,37.8]],[70,"energy",30,30,30,false,-1532,[1,"66gZu9LO5Lc7gHE/uweiJ4"],[4,4294765656],214],[179,1,13.099999999999994,-1533,[1,"21bx/mQgdPn5wfmBrv1v/X"]]],[16,null,"54O84YE+ZD77CsJR4YWs9Q",0],[1,0,198,0]],[53,"Text_Title",33554432,121,[-1538],[[9,-1535,[1,"8dXYTxJ1xBD5LjCUeZhtKU"],[5,94.86,37.8]],[70,"recharge",30,30,30,false,-1536,[1,"224nSdXpBGNK6zpXObiT5U"],[4,4294765656],224],[179,1,13.099999999999994,-1537,[1,"68wDuoYsROs7QdHYUNLkI9"]]],[16,null,"73k6Di2YRER49CXSzEBrco",0],[1,0,198,0]],[53,"Text_Title",33554432,116,[-1542],[[9,-1539,[1,"987GnmLHBNyr1Cn91icFLE"],[5,31.48,37.8]],[70,"life",30,30,30,false,-1540,[1,"a737Ae2JdB7ZyZ6ZHwVw1O"],[4,4294765656],232],[179,1,13.099999999999994,-1541,[1,"2d7R8odc5ILJJGhtOWdKxO"]]],[16,null,"b2P6ihABdJ65BKsymgkopd",0],[1,0,198,0]],[159,"Overlay",false,33554432,24,[[9,-1543,[1,"e4D/zIV0JLLLlAhxBMdduF"],[5,414,896]],[23,0,-1544,[1,"7f/3zY8tVPEp+4JiH3p3fE"],[4,3342345],239],[172,45,40,36,1,-1545,[1,"90gT3wscdEQ7NmR9Hg7xKq"]],[168,-1546,[1,"17beDsO85CkaRQEReMdwHk"]]],[3,"39wYMMJ+9AD6rM+JHW8Eh4",1,0]],[53,"Square_Holder",33554432,92,[-1549,-1550],[[48,-1547,[1,"cc8SSQyb1L/Ltwk6GJUWqP"]],[257,1,-29.999999999999996,1,-1548,[1,"1fraD0+shFu71iJ8xfn0Ft"]]],[3,"e15tjXtQ5Cz4ZdU+PbUAMl",1,0],[1,0,30,0]],[510,"Text_Shop",false,33554432,92,[[[9,-1551,[1,"15bDjjOeVKJbSnVW90XAe0"],[5,63.85,47.88]],-1552,[397,"Stage ",-1555,[1,"46xhFRNKBHppBHamzOcIA3"],-1554,-1553],-1556],4,1,4,1],[3,"f4tMa4JE9FkpYa9zhQNHjP",1,0],[1,0,-15.888,0]],[330,"Shop UI",33554432,[[[48,-1557,[1,"4cKWO6i/JEvJhoH9CRsD6x"]],4],4,1],[3,"952BopauJAKIhbLtzxcSbV",1,0]],[330,"Get Currency",33554432,[[[48,-1558,[1,"d5WgyotbxPO6ZpcTVg6pdA"]],-1559],4,1],[3,"5fgPhe2VBE+4HRBcB6qxJs",1,0]],[511,"Text_Currency Total",33554432,[[[47,-1560,[1,"41Zkf8H6hCT6JlmW4OfT7g"],[5,41.31,32.76],[0,1,0.5]],-1561,[464," ",-1563,[1,"7aSb0SGQpKBJKmeD4oAEKK"],-1562]],4,1,4],[16,null,"29v7IVSbBP6ruZqbVhKPb6",0],[1,-30,0,0]],[178,"Currency_Holder",33554432,3,[176,-1567],[[47,-1564,[1,"9fgBVfUghCwb9nKUDADkXL"],[5,71.31,40],[0,1,0.5]],[248,1,1,4,-1565,[1,"71/sO1GNdOuoIetEp4q5P7"]],[94,-1566,[1,"eawvBvuRhKXYhy1UxHkrt6"]]],[16,null,"ca0jEmhiVLRrnJObBYr4Aw",0],[1,187.017,235.559,0],[1,1.2,1.2,1]],[224,"Icon_Stars Outline",33554432,177,[-1570,-1571],[[9,-1568,[1,"81hcuAD/VLGqxEY/uDKuSA"],[5,26,26]],[108,0,-1569,[1,"55UW672npHWZ0MnTfMJISe"],277]],[16,null,"98MIa5WJZNL4puF/c/n93C",0],[1,-13,0,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[159,"Overlay",false,33554432,5,[[9,-1572,[1,"924Fe0JWVICZ+qZy0Zyds1"],[5,414,896.01]],[23,0,-1573,[1,"adThZoApVFeIJPVIQB5/c+"],[4,3358785545],285],[379,45,-20,-20,-20,-20,40,36,1,-1574,[1,"81JH53HMBMx7F02KpUU6GU"],3],[168,-1575,[1,"dc4+nGma5HI4viVsvyMKik"]]],[16,null,"59uu6dCMFE4aiFjzrJDOLt",0]],[53,"Holder_Panel",33554432,5,[25,133],[[9,-1576,[1,"c00bDeemVFkoP3d/HkRGGd"],[5,360,180]],[154,0,-1577,[1,"f5tnF9dwJL2qQDP0AsiyZu"]]],[16,null,"4dNPc2kF1A3rZdMayAKlW5",0],[1,0,6.447,0]],[112,"Text_Purchased Item",33554432,25,[[[47,-1578,[1,"b9Gxug6+VGn7WpSV1DAp5I"],[5,190,30],[0,1,0.5]],-1579,[96,-1581,[1,"3bUqCPZMBH3bs52r7Hbt3e"],-1580]],4,1,4],[16,null,"68/kp11xFJXLFnkZNdPK2u",0],[1,147.784,57,0]],[112,"Text_Item Info",33554432,25,[[[47,-1582,[1,"f1WHbnultIoKWo++yG7uyn"],[5,226,56],[0,1,0.5]],-1583,[96,-1585,[1,"f6B9bHgTBMbKY21uiZre8d"],-1584]],4,1,4],[16,null,"f6i5DXWT9Cx7gAZHIhv3jR",0],[1,150.492,12,0]],[53,"Stats 01",33554432,95,[-1587,-1588,-1589],[[9,-1586,[1,"b9egFrgXdF5Zqn/cw1e6Mp"],[5,30,30]]],[16,null,"b662KMOoBPU4skzO7gPyLN",0],[1,-139,-5.182,0]],[134,"Text_Stats Number",33554432,185,[[[9,-1590,[1,"7dbvqIRNNEhqNtYuh2+/Mp"],[5,16.34,22.68]],-1591,[96,-1593,[1,"2874AxyihA9qHekX89QY6Y"],-1592]],4,1,4],[16,null,"6ct52JpWZLAKO8EDQD+9W7",0]],[53,"Stats 02",33554432,95,[-1595,-1596,-1597],[[9,-1594,[1,"03gSA0d2JHFZwDkr0w0m9r"],[5,30,30]]],[16,null,"0bY56c/3dJNokQxGn5uzR8",0],[1,-77,-5.182,0]],[134,"Text_Stats Number",33554432,187,[[[9,-1598,[1,"feFlhINkRKrIIIAkg5789Q"],[5,12.63,22.68]],-1599,[96,-1601,[1,"0fLksR0Z9Dx7ayXTrZYn3m"],-1600]],4,1,4],[16,null,"a3ntAPPFVAG4YJ6m3Yz7uv",0]],[53,"Stats 03",33554432,95,[-1603,-1604,-1605],[[9,-1602,[1,"8dNose/UlIx4DhNXhExRIQ"],[5,30,30]]],[16,null,"41v+3KbvxKOLDXPqvL4Lf6",0],[1,-15,-5.182,0]],[134,"Text_Stats Number",33554432,189,[[[9,-1606,[1,"caU76sCXRFdbxZ2pmUIaRl"],[5,8.19,22.68]],-1607,[96,-1609,[1,"3f0kUo9gBF7a6dY0yHuKLX"],-1608]],4,1,4],[16,null,"e8M/iDVY5EcpRd/lhtU2U5",0]],[80,"Tower Placement (PH)",33554432,[96],[[47,-1610,[1,"80Md0XN9tKNqz5w6P0fZNK"],[5,50,65],[0,0.5,0]],[390,false,0,-1611,[1,"49B5Sxo09HPZ3f6s4F90tM"],[4,4291112778],365],[380,1,-10,-1612,[1,"14Z84JUQ5B36aVLlmLjGWD"],25]],[16,null,"54bU7/TFVLKZkth5EoLFxL",0],[1,12.308,97,0]],[2,["71Cqetuz1TIrfKXzSRo+z5"]],[2,["93NMATgvJXN5P2Z0Pbx6xd"]],[2,["76kmy9MSZU7qIHreg7REJV"]],[2,["b8JcZpYRhbA7dBnVFp97b+"]],[2,["6ba5eX4SReyqm+Vbwgfquh"]],[2,["33sM9enERVxYZcocgwSPwR"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[2,["1bEwzooBRYiLITAV26DhPq"]],[2,["6bEJXm3ENa5ZOriZO+0Lz9"]],[2,["d2WuMenSdQdr89Jfpld4zw"]],[2,["754aHt1OpZU5MrqxM/Ip4m"]],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[2,["bbqAjalhlRdoiOW0dhSoUC"]],[2,["27Yce2+45c87fcrQ+S23Kt"]],[2,["9aoAAYJKJR56nsyDVR3xr1"]],[2,["12sIxAd4xbv59W3ANKj2X7"]],[2,["a8rRRSGbdZ75rtdYdCxXvt"]],[2,["19dqAvhYZW66LFXyVsSUYV"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[134,"Text_Stats Number",33554432,132,[[[9,-1613,[1,"20tRbesPZNhJmYTPjCgPPF"],[5,19.11,52.92]],-1614,[96,-1616,[1,"19oyL48rNE1LHXc+RhRHHz"],-1615]],4,1,4],[16,null,"0chn2/IIpNHo6ifUibx9HW",0]],[112,"Text_Value",33554432,73,[[[47,-1617,[1,"f7xzqMzM1JtInZux0qiQ/R"],[5,29.05,40.32],[0,0,0.5]],-1618,[96,-1620,[1,"45kWQ1eo1BEYzar+fAt3KB"],-1619]],4,1,4],[16,null,"c72tJF5YxE96F1c4SnsIqc",0],[1,3.9549999999999983,0.628,0]],[53,"AlreadyBought_Panel",33554432,5,[-1624],[[9,-1621,[1,"71MAMJbNtJBomKmarYD//C"],[5,145.76,34]],[23,0,-1622,[1,"50MRT++D5FHaxiRVWPhvTZ"],[4,3366911],380],[261,1,1,14,14,4,-1623,[1,"120GBg2Y9Fta2xwZ/yRHXn"]]],[16,null,"82qEZ6Z05GtbtPFe5HXOFw",0],[1,0,-95.054,0]],[197,"Holder_LackingMaxEnergy",false,33554432,5,[134,77],[[48,-1625,[1,"bdigI5k7RNA49+HOQ3oQk+"]],[154,0,-1626,[1,"5b1cbg9K9JpImYDDuRUZ5Y"]]],[16,null,"a4mrJrQN9HcaupKbt+T0Hs",0],[1,0,-149.583,0]],[159,"Overlay",false,33554432,10,[[9,-1627,[1,"917WitCYREDL8OqETvIQHt"],[5,414,896.01]],[23,0,-1628,[1,"22bcCQathJdqjh1m/Rs0+U"],[4,3358785545],417],[309,45,40,36,1,-1629,[1,"65DRnKIORB6K9vb9Eupx06"],3],[168,-1630,[1,"075i6bmYNP4JNDHotyxqX/"]]],[16,null,"2crDsytKFOsrd8iv1XKiOI",0]],[53,"Holder_Panel",33554432,10,[78,137],[[9,-1631,[1,"e6+QMXblhJo6yoUAKqU2kw"],[5,360,80]],[154,0,-1632,[1,"46LLHKNrxLA5G/TcDj9PfO"]]],[16,null,"69pFPFmDtKy4rLOsLQGtTg",0],[1,0,0.174,0]],[112,"Text_Purchased Item",33554432,78,[[[9,-1633,[1,"48lhEMcSNO4KsP0VHCiwux"],[5,230.96,27.72]],-1634,[96,-1636,[1,"73WWIARLxL9pDXmyYC4Vw8"],-1635]],4,1,4],[16,null,"cc1Gl3QppGk4xtAYyyqUjJ",0],[1,0,1,0]],[112,"Text_Value",33554432,79,[[[47,-1637,[1,"f9bBXE3+RNkpKFTauM8A5u"],[5,29.05,40.32],[0,0,0.5]],-1638,[96,-1640,[1,"4diUgXmhNC0JEtSdza1J9D"],-1639]],4,1,4],[16,null,"95MRIyDDJLAYxE6QXtusr8",0],[1,1.9549999999999983,0.628,0]],[159,"Overlay",false,33554432,19,[[9,-1641,[1,"e3kmK0VDVF37oDPp2uvuyg"],[5,414,896.01]],[23,0,-1642,[1,"9chMOzv+RAu5oVzjI+2XvN"],[4,3358785545],451],[309,45,40,36,1,-1643,[1,"c76iAiYHJF+Y6Vh9RyDvIg"],3],[168,-1644,[1,"49oAl8aI1LIZscqppxfFMq"]]],[16,null,"caH4KbkzVNJoYksUntIvKI",0]],[53,"Holder_Panel",33554432,19,[82,140],[[9,-1645,[1,"250wsJsWlK+LipyQZOQGSG"],[5,360,80]],[154,0,-1646,[1,"f7d4o5StREMbXON7OSsrtR"]]],[16,null,"ccjXMF5Y1GX7NCEmisq04+",0],[1,0,0.174,0]],[223,"Level Completed UI",33554432,[[48,-1647,[1,"b6xvlNNMxBXIXFLuAuoT1Q"]],[602,-1651,[1,"184CIpXJJMf5iKyyNpNEc2"],[-1648,-1649,-1650],499,500]],[3,"50Eja1z5hNZpnUs5MRvwhw",1,0]],[238,"AdPanel",false,33554432,8,[-1654,142],[[9,-1652,[1,"a5zWyUec1P3K9J/anSRc+D"],[5,414,896]],[172,45,100,100,1,-1653,[1,"d3kFeMjRRJm6zDi+Vid6GY"]]],[3,"56vZfvQ1xHk5CEspGacUfx",1,0]],[159,"Overlay",false,33554432,222,[[9,-1655,[1,"54VlU+tTdIVZRdRYKAKWud"],[5,414,896]],[23,0,-1656,[1,"46/y4TTv5LRLMKwGAfogeo"],[4,3342345],501],[128,45,40,36,-1657,[1,"86aur+4vBEj60mQY62OawU"]],[168,-1658,[1,"d7NKBAPIBMpbpA3K8x4YOl"]]],[3,"31Kmah7FpGma7pWCcf+209",1,0]],[483,"Last Level Victory Listener",false,33554432,[[48,-1659,[1,"36oBL3z4dFEKhYxJiJgc2j"]],[375,2,3,-1660,[1,"48jMyrh55ByqDeksuP6NtR"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",24]]],[57,-1661,[1,"17fl+wbyhMcbLhmuHu4gku"]]],[3,"70CP+aeENPXYs7fHlNDQt1",1,0]],[33,"Button_Color",33554432,36,[[9,-1662,[1,"39sJPPCaJPA5zSoyRrZk/f"],[5,66,66]],[46,1,0,-1663,[1,"a8tGesnrdLnILrRpmSh093"],[4,4294174947],550],[117,45,1,1,1,1,108,108,-1664,[1,"03hcyLs79NfIkKJ7qGV3pH"]]],[3,"9fL4uQPqpMKYMkPch6sWb8",1,0]],[33,"Button_Color",33554432,48,[[9,-1665,[1,"04HRB9kkdGC53eh20zYrGp"],[5,66,66]],[46,1,0,-1666,[1,"64TWXeno1Bl4ZktxybBh0l"],[4,4281556991],557],[117,45,1,1,1,1,108,108,-1667,[1,"8ePc8xDXNJJJtgemmw+awu"]]],[3,"dens+xYw1BnoCNL00NPclL",1,0]],[41,"Energy Cube 01",33554432,18,[[47,-1668,[1,"47r75ln1FCUbkyZMk2xY4I"],[5,22,22],[0,0,0.5]],[23,0,-1669,[1,"ealQFfGaFGLrnI0FEDrCjT"],[4,4291874560],2]],[3,"8eVMMyTAhHTrxdUCI00RNH",1,0],[1,4.5,0,0]],[169,"Energy Cube 02",33554432,18,[[47,-1670,[1,"1fzfIfIthPJ5lsvfEETxzP"],[5,22,22],[0,0,0.5]],[23,0,-1671,[1,"41yEi5YV5N6rl22Vs19aqY"],[4,4291874560],3]],[3,"d7ZEjS/RNNcpxy6bensm5T",1,0],[1,30.6,0,0],[1,0,1,1]],[169,"Energy Cube 03",33554432,18,[[47,-1672,[1,"a3wUjzxAxBlpZXtGBF+l6s"],[5,22,22],[0,0,0.5]],[23,0,-1673,[1,"cbNMyotjdMBJsHidydOUUw"],[4,4291874560],4]],[3,"7fzNbEGA5C7LBeU+6/kk0+",1,0],[1,56.7,0,0],[1,0,1,1]],[169,"Energy Cube 04",33554432,18,[[47,-1674,[1,"71VhLgkvVLoa3iWqD0mcX/"],[5,22,22],[0,0,0.5]],[23,0,-1675,[1,"64L6PUmptEHaMWVbn77MKY"],[4,4291874560],5]],[3,"a4dr5gBqVD8KmMo9U690pe",1,0],[1,82.8,0,0],[1,0,1,1]],[169,"Energy Cube 05",33554432,18,[[47,-1676,[1,"fafyeZQtZJmLW/fpFHzjJ3"],[5,22,22],[0,0,0.5]],[23,0,-1677,[1,"e6Ll82vcRN1Lhbx193nyiZ"],[4,4291874560],6]],[3,"2cz2kVPWpBaYfDUmpze4C2",1,0],[1,108.89999999999999,0,0],[1,0,1,1]],[169,"Energy Cube 06",33554432,18,[[47,-1678,[1,"fdp8O0CEVNc4znVVbFzuVp"],[5,22,22],[0,0,0.5]],[23,0,-1679,[1,"c3NBP66PpD04XdMYscArOm"],[4,4291874560],7]],[3,"32GQvJZZ1CfL8jE0XAQI7p",1,0],[1,134.99999999999997,0,0],[1,0,1,1]],[169,"Energy Cube 07",33554432,18,[[47,-1680,[1,"15C8PrDjNE15INoBRjQNEd"],[5,22,22],[0,0,0.5]],[23,0,-1681,[1,"2e/BYGfUpHEbP6MzNngPTO"],[4,4291874560],8]],[3,"8bn6okF5BG6Jaim8hBAiyD",1,0],[1,161.09999999999997,0,0],[1,0,1,1]],[169,"Energy Cube 08",33554432,18,[[47,-1682,[1,"845GGcqwBNoryas9x4gpVR"],[5,22,22],[0,0,0.5]],[23,0,-1683,[1,"931LD/CQ9K7axm26MZaiXw"],[4,4291874560],9]],[3,"cf12Kt7l1LELKFSPjDHbWy",1,0],[1,187.19999999999996,0,0],[1,0,1,1]],[169,"Energy Cube 09",33554432,18,[[47,-1684,[1,"260FbFY0hL04Kny8SSU9u3"],[5,22,22],[0,0,0.5]],[23,0,-1685,[1,"685Vk8LIxBfrhcygMgQS9Q"],[4,4291874560],10]],[3,"f1J1aAxmpPvoc5FGVdqMEx",1,0],[1,213.29999999999995,0,0],[1,0,1,1]],[169,"Energy Cube 10",33554432,18,[[47,-1686,[1,"99pc0X8XlFjLiJ623BO/ZO"],[5,22,22],[0,0,0.5]],[23,0,-1687,[1,"272pp15w5PwJu9uk6hc55H"],[4,4291874560],11]],[3,"d1aI9zoc9M0ZqlDjUrVkW1",1,0],[1,239.39999999999995,0,0],[1,0,1,1]],[33,"Icon_Pause",33554432,60,[[9,-1688,[1,"853FcTywZNn7js4B8Q/ajC"],[5,40,40]],[391,-1689,[1,"0eQZZjF9lBQKAbMv5CvbEH"],45]],[3,"5eLZf7et1BaoBeC4tAbRXN",1,0]],[159,"Block Inputs",false,33554432,149,[[48,-1690,[1,"a6pDMXWINEz4c3jEU/90+t"]],[168,-1691,[1,"38nA9WuSpLY6r/aSHZbYaR"]],[172,45,100,100,1,-1692,[1,"09QXhY7+NAt5haDCrcKLVZ"]]],[3,"e86uFWJqFEn61f5p+Qwnyh",1,0]],[30,0,{},151,[22,"1ewdi1di5LRLRsG+guCXmn",-1693,[81,"d9tGO7SQVHyKtk8xv4bAe7",1,[[75,[2,["85jNnU/YRG9K6jK+eX2Jg2"]],[[382,true,[1,"598F9AzsZPQaOOG6jwFk71"],[52],53]]],[75,[2,["a9mWnA5y9CzYM22Pg4Fdy/"]],[[382,true,[1,"598F9AzsZPQaOOG6jwFk71"],[54,55],56]]],[75,[2,["b15KtkCcVGNZ/SKlExOmSz"]],[[382,true,[1,"598F9AzsZPQaOOG6jwFk71"],[57,58],59]]],[75,[2,["a36salOGtLo6f8GG9HKczL","40sd+ebzdfxaPzPgpSi8i0"]],[[202,[1,"f6uaQGK/RN9a37oRJnpj80"]],[199,[1,"c0bC1IuXtHwIZwBqkGIV5B"]]]]],[[17,"Towers Holder",["_name"],[2,["1ewdi1di5LRLRsG+guCXmn"]]],[14,["_lpos"],[2,["1ewdi1di5LRLRsG+guCXmn"]],[1,0,-35,227.162]],[14,["_lrot"],[2,["1ewdi1di5LRLRsG+guCXmn"]],[3,0.15304591873303092,0.6903455270798547,0.15304591873303094,0.6903455270798549]],[14,["_euler"],[2,["1ewdi1di5LRLRsG+guCXmn"]],[1,0,90,25]],[14,["_contentSize"],[2,["b3s3iwIk5GWLlMpTf30EX5"]],[5,1.3,1.3]],[14,["_lscale"],[2,["1ewdi1di5LRLRsG+guCXmn"]],[1,110,110,110]],[17,false,["_active"],[2,["a36salOGtLo6f8GG9HKczL","1bEwzooBRYiLITAV26DhPq"]]],[17,true,["_active"],[2,["e4HIGTcO5FNoojPDW7FkT0","52Wr8elKJczKH4c2zJXMeu"]]],[17,false,["_active"],[2,["e4HIGTcO5FNoojPDW7FkT0","a6UoiMmTtU6YsbaNPx5rqf"]]],[14,["_lscale"],[2,["e4HIGTcO5FNoojPDW7FkT0","a6UoiMmTtU6YsbaNPx5rqf"]],[1,0.6,0.6,0.6]]]],51]],[33,"Button_Color",33554432,27,[[9,-1694,[1,"a4/fQFrkFHDrf47jztRtPF"],[5,108,108]],[46,1,0,-1695,[1,"2f9HGTRLZAlY9CLAfjEVqD"],[4,4292928274],63]],[3,"8eLggjorhEIr3xF4IjNE8D",1,0]],[223,"Play Clcked SFX",33554432,[[48,-1696,[1,"9cNwge9U1MBosft455Eph4"]],[139,"sfx-ui-playstartlevel",-1697,[1,"035y6mUZNALKzfpDv9znSH"]]],[3,"a99B4CNHxIM4Lm1a5rcHRY",1,0]],[83,"Audio",33554432,28,[29,241],[[48,-1698,[1,"27nysJmChLJLSjVGM3pVrh"]]],[3,"9dvKC8PQhIvL+T0QMVgydk",1,0]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1699,[49,"095/3h0rhKTrx79A3GWOco",1,[[17,"LifeCube_Holder",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],91]],[41,"Text_Life",33554432,88,[[47,-1700,[1,"22ylIKCHRLz5jqiOxHBQhm"],[5,33.58,40.32],[0,0.5,0]],[70,"life",32,32,32,false,-1701,[1,"44nkIIC+VPLbcAsSYWkmPz"],[4,15984867],66],[441,4,97.5,-1702,[1,"54HW/ZyddPK61phSHL6Ks3"]]],[3,"c44S47FFxO/qd9YQoHqN2n",1,0],[1,0,47.5,0]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1703,[49,"7cNem45h9DQZzm6etDeVan",1,[[17,"LifeCube_Holder-001",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],72]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1704,[49,"02WKp1aaZM5JahQG4GQFOT",1,[[17,"LifeCube_Holder-002",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],73]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1705,[49,"66QmLgfF9LxJdx0wLt8UTM",1,[[17,"LifeCube_Holder-003",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],74]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1706,[49,"b4G0BDxa1KEYbReDXot7x5",1,[[17,"LifeCube_Holder-004",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],75]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1707,[49,"06B8cO2XxB9p2K43Z/q+wo",1,[[17,"LifeCube_Holder-005",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],76]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1708,[49,"13eIwjQGNOtI2Ma49UBtLG",1,[[17,"LifeCube_Holder-006",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],77]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1709,[49,"cf05UvdYhAJZYNkQcMyV5L",1,[[17,"LifeCube_Holder-007",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],78]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1710,[49,"a2CnGIgYNF1549oF7vSBXk",1,[[17,"LifeCube_Holder-008",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],79]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1711,[49,"bbmhP8kNNFHYhDHE6osOGC",1,[[17,"LifeCube_Holder-009",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,21,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],80]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1712,[49,"5blYx2mgNGB4CSEcuOc88D",1,[[17,"LifeCube_Holder-010",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],81]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1713,[49,"4fQFdgr01LDbnqUBek4oiG",1,[[17,"LifeCube_Holder-011",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],82]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1714,[49,"adaCthYBFOLYNMtCicsIHG",1,[[17,"LifeCube_Holder-012",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],83]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1715,[49,"e0fyMWYtJBbZHqGdMEB7n6",1,[[17,"LifeCube_Holder-013",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],84]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1716,[49,"f8T8TRrL5IL6mxmSyfR6X3",1,[[17,"LifeCube_Holder-014",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],85]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1717,[49,"0aHbmObZBPJbGalTEfX6Dg",1,[[17,"LifeCube_Holder-015",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],86]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1718,[49,"39ydII2U1C04Ew6G7nhJ7h",1,[[17,"LifeCube_Holder-016",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],87]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1719,[49,"fcTfiIOR9Pf4i37khI4GUN",1,[[17,"LifeCube_Holder-017",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],88]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1720,[49,"6a9la9eQ1M44Civqhp+e5M",1,[[17,"LifeCube_Holder-018",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],89]],[30,0,{},6,[22,"2fFGF3dqxMNKSC0hr3+Zvd",-1721,[49,"a1My+52mNMd6m/8VuXt47Y",1,[[17,"LifeCube_Holder-019",["_name"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,-15,0]],[14,["_lrot"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[14,["_euler"],[2,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],90]],[33,"Waves UI",33554432,28,[[48,-1722,[1,"daYJDLQF1J+4hoJewrsDWB"]],[603,-1723,[1,"11nA6bV1dHrq1ZgHBcnFpW"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",154]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",156]]]],[3,"bcBe8EgHVEhrgb9T+2a4Wc",1,0]],[41,"Square_Detail 01",33554432,110,[[9,-1724,[1,"2au3z3oyRCGp8Tbojv2UrY"],[5,8,8]],[46,1,0,-1725,[1,"03u/nsfFJE1IWkz0eLB9nD"],[4,4292928274],104],[381,9,-11.175000000000011,3.5279999999999987,1,-1726,[1,"54PGsKZDdHH4vRpOD6lkpg"]]],[3,"ecQBpVZJNJ4bDMzJNvIaZC",1,0],[1,-247.175,75.47200000000001,0]],[41,"Square_Detail 02",33554432,110,[[9,-1727,[1,"82dovEHetLUJb3zpe5AFbv"],[5,8,8]],[46,1,0,-1728,[1,"80g+8BRzJM76jJMhmbwKq4"],[4,4292928274],105],[381,9,-0.41200000000000614,-11.325000000000003,1,-1729,[1,"3bgDohEGlE06jvSojjcxse"]]],[3,"d9g06R0y1KgJlD9A7Ely+0",1,0],[1,-236.412,90.325,0]],[41,"Square_Detail 03",33554432,110,[[9,-1730,[1,"dbw8gbU6lCVZvzNl4/iRGX"],[5,4,4]],[46,1,0,-1731,[1,"e0mRmO14lC/YsXhJHlsHTs"],[4,4292928274],106],[381,9,-7.2379999999999995,-2.2209999999999965,1,-1732,[1,"cfVUmspF1FqZIoj/DXG9EU"]]],[3,"86kMi+WgtEb4R+S+lkcfC6",1,0],[1,-245.238,83.221,0]],[33,"Energy UI",33554432,28,[[48,-1733,[1,"fez/VmKWRGJpPg8tIUX+8R"]],[604,-1734,[1,"0bTAqGdDhHLrdmB0N8yYpS"],[227,228,229,230,231,232,233,234,235,236],[98,99,100,101,102,103,104,105,106,107],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",147]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",148]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","energyFull,true",8]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","energyFull,false",8]]]],[3,"c2HUXnxKNEmIwgLEb2D+GZ",1,0]],[33,"Level Hints UI",33554432,28,[[48,-1735,[1,"97/wX2cN5Dk67ZVua5NjZw"]],[605,-1736,[1,"1bbyZfUKNDE6R+F7Clk2Fd"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",153]],[[8,"34d5dMnUohLwIpOOtI38H+y","showTower",239],[8,"26530mDlypKVbgkyPCFjn/T","showEnemy",2]],109]],[3,"a6zjjTIYNAIba23CRNlZ90",1,0]],[83,"On Start",33554432,28,[-1740],[[48,-1737,[1,"6fdbRA8itLEJfTP3t+rUU5"]],[606,-1739,[1,"80ck1Oq9dLDYM39c+e4dZV"],[[8,"0ca47t6TKlPq7GfoQTtu5fu","getCurrentLevelData",-1738],[8,"40d56SAqbRLmZZawWUx77UJ","initializeUI",174],[8,"f6b09ehRv5GY5ZX2VxS2Sj1","getCurrency",175]]]],[3,"92v+TIF4lHY6NEI8xhMXFP",1,0]],[33,"Get Level ID",33554432,270,[[48,-1741,[1,"52Oer4vchC7I4bnIJCGpIK"]],[609,1,-1742,[1,"fbluvLtG5JtIFnR7mBEKHu"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",86],[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",111],[8,"38246A7yIhB9pH55CZX1oMb","setHints",269]]]],[3,"86f0FJJsVIqJWs/vEiFczt",1,0]],[112,"Text_Title",33554432,158,[[[9,-1743,[1,"18S6uqNJNOdYJf7dsxpyIx"],[5,230.96,25.2]],-1744,[96,-1746,[1,"6etoqzTthMRqhmUTr1RjNC"],-1745]],4,1,4],[3,"bdnovZyKBC7LpQ5Kl+Nd7O",1,0],[1,0,32.088,0]],[53,"Holder_Panel",33554432,158,[62],[[9,-1747,[1,"73LsTPf+FH2IQS7islcmZe"],[5,360,80]],[94,-1748,[1,"93wB0TUOxAnIj3A6w0ae/0"]]],[3,"2cKVViiphCX47j3qAnh+r5",1,0],[1,0,-15.074,0]],[134,"Text_Fluff",33554432,62,[[[9,-1749,[1,"087wCLpHhKspU73DhIWr7D"],[5,266,72]],-1750,[96,-1752,[1,"4aeAfyiVtE3IrI0f63kNYz"],-1751]],4,1,4],[3,"7fd4u/ZXFCCITM5Vr7B5PG",1,0]],[53,"Holder_Lines",33554432,62,[113,114],[[9,-1753,[1,"1ehOxFdixLo7UN4d6G1aRo"],[5,0,0]]],[3,"eaayoytCdFc4/YfqRYdzDM",1,0],[1,0,-53.120000000000005,0]],[41,"Top_Bar",33554432,113,[[47,-1754,[1,"6dQiTgqSFLeLpXHwxbIWAs"],[5,8,2],[0,0,0.5]],[23,0,-1755,[1,"bfzkJ7jBlDVauR8Ewx/pbS"],[4,4284216710],121],[167,1,-1756,[1,"74pkl8t15OBZOIom24Hhoo"]]],[3,"46sJ7KxAxHr5cYhWfJmM0i",1,0],[1,0,38,0]],[41,"Bot_Bar",33554432,113,[[47,-1757,[1,"b0y9AeQSRFs4EBAWaTDicT"],[5,8,2],[0,0,0.5]],[23,0,-1758,[1,"7d3Ni8PWNKop2FfpH7h+1R"],[4,4284216710],122],[167,4,-1759,[1,"bdqsx8LllI7JzOpc0hOtSa"]]],[3,"4fGfqli0xMFqSpPJ92gdml",1,0],[1,0,-38,0]],[41,"Top_Bar",33554432,114,[[47,-1760,[1,"1c5kzEkH9PjZlA/pksrCGd"],[5,8,2],[0,1,0.5]],[23,0,-1761,[1,"15vxSUS6tHnLEErRfs7rXf"],[4,4284216710],124],[167,1,-1762,[1,"18ZwN4IlxGu6hnxmkOjI9a"]]],[3,"46MnRt0l5BxoSgKLMJYHps",1,0],[1,0,38,0]],[41,"Bot_Bar",33554432,114,[[47,-1763,[1,"aa6IiF07RBRIs8TWoRG9+C"],[5,8,2],[0,1,0.5]],[23,0,-1764,[1,"78BM5PvJVAD5ibfD/0DJ9H"],[4,4284216710],125],[167,4,-1765,[1,"ccu5dGm0NGiorAye2viX2Z"]]],[3,"e1MoV/tn5F0KbEWtmyeRfm",1,0],[1,0,-38,0]],[41,"Outline",33554432,50,[[9,-1766,[1,"2aRmaAJERLo6189x8vTITV"],[5,68,68]],[46,1,0,-1767,[1,"58FKCnTSlH96sqa2JCcjxH"],[4,4294174947],129],[117,45,-6,6,6,-6,108,108,-1768,[1,"e8tiBi/fdDcKI+mZCkmgmf"]]],[3,"3cUKyzgXtEaqaOsIJ23+IK",1,0],[1,-6,-6,0]],[41,"Outline",33554432,51,[[9,-1769,[1,"33jTgxFzdPvZq6S5l38re7"],[5,68,68]],[46,1,0,-1770,[1,"adpVEcYTREJKseA65JZ6hC"],[4,4281556991],136],[117,45,-6,6,6,-6,108,108,-1771,[1,"a8mTLqfyJM9okaLkx+41Y7"]]],[3,"56kIOy35JE3KsFQ0aIhctU",1,0],[1,-6,-6,0]],[33,"Button_Color",33554432,30,[[9,-1772,[1,"3fd0E5yCRGrYB3jHFOekHV"],[5,108,108]],[46,1,0,-1773,[1,"f2IpVWpmlBuJFTgtLl3dGL"],[4,4292928274],142]],[3,"95523b/ChPVacj+erIHaYO",1,0]],[41,"Outline",33554432,94,[[9,-1774,[1,"63KmfQoNlP+bhF4tdQgdxQ"],[5,60,60]],[46,1,0,-1775,[1,"64w61JmvpPqbm0TclikGJB"],[4,4280479485],150],[117,45,-6,6,6,-6,108,108,-1776,[1,"e0dgtEYUpA95DCszv609vQ"]]],[3,"2d0bbT4CVIFKk416KmyZvn",1,0],[1,-6,-6,0]],[41,"Horizontal",33554432,163,[[47,-1777,[1,"dbTXBQ6ZdF1oJ7cr5laqSw"],[5,64,2],[0,1,0.5]],[23,0,-1778,[1,"b0CFEAtG1KGLcT8a99cMI1"],[4,4292928274],163]],[16,null,"73eTe0T3FP2ZXSxJy3TwFy",0],[1,0,226,0]],[85,"Vertical",33554432,163,[[47,-1779,[1,"d7KZDIxDlAcoun64rrz+52"],[5,80,2],[0,1,0.5]],[23,0,-1780,[1,"30Oi6HzFhFeJRaEuIKz/zy"],[4,4292928274],164]],[16,null,"c4CaBKQ0NJsLeGq+FGVN7Y",0],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,164,[[47,-1781,[1,"4dbR5MKEJLzIHfjbcl/51C"],[5,48,2],[0,1,0.5]],[23,0,-1782,[1,"a9bxUy7rlNiojwo2y4tO1N"],[4,4292928274],165]],[16,null,"b5zICNYD5IzJ+QrmEpOcR7",0],[1,-90,120,0]],[85,"Vertical",33554432,164,[[47,-1783,[1,"61q/BoXa9DYoACXOjZ6JYO"],[5,98,2],[0,1,0.5]],[23,0,-1784,[1,"97ICXQC29AkrmJ75D+piQJ"],[4,4292928274],166]],[16,null,"5atNgIbtBNxL9SuGH2f/rX",0],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,118,[-1787],[[47,-1785,[1,"f2lmoaF3NAcp6ROm0hStS2"],[5,180,260],[0,1,0]],[128,45,100,100,-1786,[1,"cbFabPmVBAnKwb0nxdXV6H"]]],[16,null,"10mEgFgkBNW6Tb3i1KrDlI",0]],[85,"Vertical",33554432,288,[[47,-1788,[1,"3ekgIruYJN45LE3+6Z9yfY"],[5,71,2],[0,1,0.5]],[23,0,-1789,[1,"00yYzFVIFGNJZSDK5RqkC7"],[4,4292928274],167]],[16,null,"9589XdOKxFx6zgT5VoYbuD",0],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,165,[[47,-1790,[1,"ecH+IRScxEm5h0ZDzdQdyE"],[5,64,2],[0,1,0.5]],[23,0,-1791,[1,"4eV0A/hSVKZrSJsXgdMgI9"],[4,4292928274],168]],[16,null,"aft/GfD/pHgoVO8VL1ezWB",0],[1,0,226,0]],[85,"Vertical",33554432,165,[[47,-1792,[1,"594zBj8dlMubIm9DrTm1LG"],[5,80,2],[0,1,0.5]],[23,0,-1793,[1,"e5y1oIqHBKTJDEd+GUmiVD"],[4,4292928274],169]],[16,null,"04zXata2ZMKIz4Z3qUoGRi",0],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,166,[[47,-1794,[1,"22Vmg3619IrpSGI0hmdZL6"],[5,48,2],[0,1,0.5]],[23,0,-1795,[1,"7bVXjryiVJEJbNg+WC0AcQ"],[4,4292928274],170]],[16,null,"f45DZbNgBJeIqKBWB2pT9j",0],[1,-90,120,0]],[85,"Vertical",33554432,166,[[47,-1796,[1,"b92J///nVJ7b6rMQzvNin9"],[5,98,2],[0,1,0.5]],[23,0,-1797,[1,"433hithXNA8JwaTLt2O/kf"],[4,4292928274],171]],[16,null,"a7/FFYvCpOwLAMtQ2dKpZo",0],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,119,[-1800],[[47,-1798,[1,"f54JukNKJJ0Lr9KmkSVLYY"],[5,180,260],[0,1,0]],[128,45,100,100,-1799,[1,"00NMD+7t1Fsac9NGagOCJo"]]],[16,null,"d2YFTNTk9J6Is5msZ9YSIC",0]],[85,"Vertical",33554432,294,[[47,-1801,[1,"bbgTdt/cpAQLzXLwQWUCtM"],[5,71,2],[0,1,0.5]],[23,0,-1802,[1,"b2GhoLHvhAEoT/o+Ud5haM"],[4,4292928274],172]],[16,null,"0dcrEpS31NrpOyDkWE4y8Q",0],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[78,"Panel_Color",33554432,13,[[9,-1803,[1,"d8WZhKUxFBmpOfrLz+J1zz"],[5,50,50]],[23,0,-1804,[1,"b2XVlfquJPO6fvbckOMdPU"],[4,4292928274],180]],[16,null,"a68qp4fWJAbI//7O3LYDPg",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,14,[[9,-1805,[1,"70qa+4AFhN2YXHNF83SJOA"],[5,50,50]],[23,0,-1806,[1,"d9vxvAagxMqJ0sq/4Q6q8u"],[4,4292928274],187]],[16,null,"acuabYWKlNm5l3FYnSFZay",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,14,[[9,-1807,[1,"edphJ7W9dCL7t6/dgz7SZK"],[5,54,54]],[46,1,0,-1808,[1,"8frlo8Xx9IU4aWuKzORQVX"],[4,2028004114],189],[117,45,13,13,13,13,64,64,-1809,[1,"1ckxpUxM5OXYgK0KLEQLQp"]]],[16,null,"6cZeF+qn5BlaCt6CC7SRvA",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,14,[[9,-1810,[1,"b6DeDdMzdChZkmlQW/IJJf"],[5,58,58]],[46,1,0,-1811,[1,"6elm++XwxBvYXWPBJYZxNd"],[4,1021371154],190],[117,45,11,11,11,11,68,68,-1812,[1,"f4QrPU081Jf6/n+7MGmHok"]]],[16,null,"92aRsQiYBBGYSK0rA48sAS",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Panel_Color",33554432,15,[[9,-1813,[1,"8bgUFgCt1BcIsw3mQAVECk"],[5,50,50]],[23,0,-1814,[1,"c0E5atT+dBCZKy7i5f49qA"],[4,4292928274],192]],[16,null,"f2cF3zPXNJaLDqv2QWBmOU",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[53,"Separator 1",33554432,23,[-1817],[[47,-1815,[1,"63qLMfhsxNm5RviHJA2fhx"],[5,2,450],[0,0.5,1]],[23,0,-1816,[1,"32uhArh8BCH4QWdXRyUqeM"],[4,4289235857],212]],[16,null,"3bm5EBHC5FaZrWAMgguu5R",0],[1,-59,194.501,0]],[41,"Square Top",33554432,301,[[9,-1818,[1,"f0ZBLSdNhJELV/F/bJNvkb"],[5,2,2]],[23,0,-1819,[1,"b6bY2oPKNOGLbteYvNJCZZ"],[4,4289235857],211],[179,1,-6,-1820,[1,"ceeusgRxVMc61U+Ww9bHSd"]]],[16,null,"fadEvppatIrI0QhEIXXK6y",0],[1,0,5,0]],[30,0,{},54,[22,"75a1vm5JJA+ohuNwq5URob",-1821,[60,"30/wQAvnZPtIlQh+02+xvR",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],215]],[30,0,{},54,[22,"75a1vm5JJA+ohuNwq5URob",-1822,[60,"19bXoDYZZMwIWZXL+JWh4K",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],216]],[30,0,{},54,[22,"75a1vm5JJA+ohuNwq5URob",-1823,[60,"8dbz7ZnHtA9Knqi4FyY/lY",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],217]],[30,0,{},54,[22,"75a1vm5JJA+ohuNwq5URob",-1824,[60,"99ZQUlZ7tEmKW7YuEmcHGg",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],218]],[30,0,{},54,[22,"75a1vm5JJA+ohuNwq5URob",-1825,[60,"28dsWsrZRJsa1s8v2wwP01",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],219]],[53,"Separator 2",33554432,23,[-1828],[[47,-1826,[1,"49ynJ1AwtBCILqW4zkhLTj"],[5,2,450],[0,0.5,1]],[23,0,-1827,[1,"fdfUKDUINI2IOnpuAvDuBN"],[4,4289235857],222]],[16,null,"6cOefGYZRPrbYFpYJFU8cL",0],[1,63,194.501,0]],[41,"Square Top",33554432,308,[[9,-1829,[1,"19XmPpuihHRYxY4beXnVcz"],[5,2,2]],[23,0,-1830,[1,"f5nDAn11BKbIMP4X7f2W8L"],[4,4289235857],221],[179,1,-6,-1831,[1,"14YsizpZZFUaN4+V+3vHDP"]]],[16,null,"0eRPKgcidPgIjObDFxmKMT",0],[1,0,5,0]],[30,0,{},55,[22,"75a1vm5JJA+ohuNwq5URob",-1832,[60,"1dL964mdlLSpQJfrQ+8Kf3",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],225]],[30,0,{},55,[22,"75a1vm5JJA+ohuNwq5URob",-1833,[60,"9a5mG4j9FHdrFfb/KI8evN",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],226]],[30,0,{},55,[22,"75a1vm5JJA+ohuNwq5URob",-1834,[60,"c9a9b8rHlKD6gzFgvH6LuM",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],227]],[30,0,{},55,[22,"75a1vm5JJA+ohuNwq5URob",-1835,[60,"81wIZ5/fZCKq2nc2h8aG/A",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],228]],[30,0,{},55,[22,"75a1vm5JJA+ohuNwq5URob",-1836,[60,"edIDYcAodIpZMhXSxHy4a7",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],229]],[30,0,null,52,[22,"75a1vm5JJA+ohuNwq5URob",-1837,[60,"12TKHhc5VBtp/TmmEQHdUG",null,[[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],234]],[30,0,null,52,[22,"75a1vm5JJA+ohuNwq5URob",-1838,[60,"10JdPBYMhGnZ7POjjFfsYp",null,[[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],235]],[30,0,null,52,[22,"75a1vm5JJA+ohuNwq5URob",-1839,[60,"d3JBcK9n5CMKAvyx4MB1lS",null,[[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],236]],[30,0,null,52,[22,"75a1vm5JJA+ohuNwq5URob",-1840,[60,"2bVHPZZ1RNJ6fidDqIWUxV",null,[[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],237]],[53,"Holder_Panel",33554432,24,[64],[[9,-1841,[1,"a2rBFpkwhJXboy3tL44cbH"],[5,360,80]],[154,0,-1842,[1,"a36yEbNZhEkYDKnU4sZAAk"]]],[3,"02/xCrUN1JrqqH3EIP5URh",1,0],[1,0,-48.826,0]],[112,"Text_Purchased Item",33554432,64,[[[9,-1843,[1,"d71XViixZN6LlEuBvZ7C1V"],[5,230.96,71.72]],-1844,[96,-1846,[1,"e5vkQ4ofRFboXJnl2cfvrs"],-1845]],4,1,4],[3,"94HKvpp8tGXay3fNGq8XPM",1,0],[1,0,1,0]],[53,"Holder_Lines",33554432,64,[122,123],[[9,-1847,[1,"637bODBHpOAaIZbcuNUf5d"],[5,0,0]]],[3,"49AqclMgJJsa3HNnpIL7GO",1,0],[1,0,-36.86,0]],[103,"Top_Bar",false,33554432,122,[[47,-1848,[1,"73QlWWejdN+oJ/Whp8HeTZ"],[5,8,2],[0,0,0.5]],[23,0,-1849,[1,"23Gbbeh51M7ZEZOtcbdEkw"],[4,4284216710],240],[148,1,0,-1850,[1,"f9dmOQQyRMGI5LF5DC6/2r"]]],[3,"54qe8tuwtN6JZQ8m2bWKxs",1,0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,122,[[47,-1851,[1,"25xE3rvNJCQal3m5BfyWf+"],[5,8,2],[0,0,0.5]],[23,0,-1852,[1,"f2jBt5e4tCEYB1vtajG3PI"],[4,4284216710],241],[148,4,0,-1853,[1,"81c6pqoYhJ+4XNGUFrMewm"]]],[3,"4fbT+L9+FO1Ldoff5MrfWk",1,0],[1,0,-28.86,0]],[103,"Top_Bar",false,33554432,123,[[47,-1854,[1,"f8VZzODIZGg68tvVRLpVKs"],[5,8,2],[0,1,0.5]],[23,0,-1855,[1,"479eIKozRBR7SUqyJOQSPy"],[4,4284216710],243],[148,1,0,-1856,[1,"b6ofElzM9P+pdmnt+2P3X0"]]],[3,"7c2sXAcwdF5J2cXnO/6ObK",1,0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,123,[[47,-1857,[1,"a9Vm+u6ApItZ0VySHNUy+c"],[5,8,2],[0,1,0.5]],[23,0,-1858,[1,"5bKV5gCrJHdats0mHZ2lND"],[4,4284216710],244],[148,4,0,-1859,[1,"13uqa+PgdDIbePDVbO1Xl0"]]],[3,"a9cMxU4BBPy5kC1k6H0bbC",1,0],[1,0,-28.86,0]],[83,"Shop",33554432,28,[174,175],[[48,-1860,[1,"9fbBpUTndGzqdwUKw75vYe"]]],[3,"27GIqzNuRE0bmRN9k8bcZ4",1,0]],[33,"Icon_BG Color",33554432,178,[[9,-1861,[1,"bcZYvoZ+1M/a0guohj7rdu"],[5,24,24]],[23,0,-1862,[1,"ebhGozGx1G05NbN5lFWO4I"],[4,4294765656],275],[117,45,1,1,1,1,32,32,-1863,[1,"16f3GvA55FS5lI2bigqwOo"]]],[16,null,"afVJRQKz1FDIMYTKprqX8M",0]],[33,"Icon_Currency",33554432,178,[[9,-1864,[1,"64OhwfhWRNd4nB+N7ujPgi"],[5,22,22]],[108,0,-1865,[1,"edyBP75RZIr5Qb9GoWpYW4"],276],[117,45,2,2,2,2,26,26,-1866,[1,"c8u5ypNWxINbyfx/vjgwIW"]]],[16,null,"81Q3H5w2NIp4PWFq9h3WxO",0]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[41,"Text_Stats Name",33554432,185,[[9,-1867,[1,"fabEz7cxpHQak3qtPX4V7K"],[5,35.67,16.58]],[181," damage ",14,14,13.95,false,false,-1868,[1,"85VXw/33VOq4xqxFnrr9E+"],[4,4282187811],286],[191,0.1,-1869,[1,"50jJ8fN2JGFo1qa+Rmm6LY"],[4,4282187811]]],[16,null,"83g4veuLZMuLbbU/2ymw+O",0],[1,0,22,0]],[41,"Text_Stats Name",33554432,187,[[9,-1870,[1,"21UJwCbBlPKYamjxTaFv/Y"],[5,28.259999999999998,16.58]],[181,"speed",14,14,13.95,false,false,-1871,[1,"4a/3aKBElB/qyR3SBvN9Qd"],[4,4282187811],288],[191,0.1,-1872,[1,"83BnxNRZlHu75JwcW3A/Gm"],[4,4282187811]]],[16,null,"ceqss1009DV6D3u24crGcj",0],[1,0,22,0]],[41,"Text_Stats Name",33554432,189,[[9,-1873,[1,"25X81WD+pI0av2UyulZLu3"],[5,28.05,16.58]],[181,"range",14,14,13.95,false,false,-1874,[1,"721zqqgA5Kg5xqMwKtB/ZM"],[4,4282187811],290],[191,0.1,-1875,[1,"9dT34EwFJFW6gfATitlMFK"],[4,4282187811]]],[16,null,"a7tHQgvvtN1a+1hiHxpp4Y",0],[1,0,22,0]],[53,"Holder_Lines",33554432,25,[124,125],[[9,-1876,[1,"bbXJzOE4VPfK6FjUzmQehj"],[5,0,0]]],[16,null,"49wTbCCSREN4zWQLyl+4jk",0],[1,0,-70,0]],[103,"Top_Bar",false,33554432,124,[[47,-1877,[1,"4bB/tmartFwZ7PNCBb5YHx"],[5,8,2],[0,0,0.5]],[23,0,-1878,[1,"29cPXc6KlB9opedy8rP3zM"],[4,4284216710],292],[167,1,-1879,[1,"99WYGzrjlFDZxZRoCu+RRN"]]],[16,null,"35jFeVsdRBvqeNrX+pxrm1",0],[1,0,86,0]],[103,"Bot_Bar",false,33554432,124,[[47,-1880,[1,"2b++2u4slBK5PzY37fgYmc"],[5,8,2],[0,0,0.5]],[23,0,-1881,[1,"baC+oSoX5C4qfkJJhtj98I"],[4,4284216710],293],[167,4,-1882,[1,"11BGCEeldInpPcTBbgfHe8"]]],[16,null,"cfuGUfzhhJaZ9moIIKq2IQ",0],[1,0,-86,0]],[103,"Top_Bar",false,33554432,125,[[47,-1883,[1,"57AuE0xUhGQ61sPc6sq3fy"],[5,8,2],[0,1,0.5]],[23,0,-1884,[1,"9d9NvkoFxJIJXsXdjMRyaA"],[4,4284216710],295],[167,1,-1885,[1,"d1PPGODwlCqpGYBWKcuzln"]]],[16,null,"14GaKuOShIMqa/ATn9dnvE",0],[1,0,86,0]],[103,"Bot_Bar",false,33554432,125,[[47,-1886,[1,"2cNkMLl/dH8Jg2o0t+/flU"],[5,8,2],[0,1,0.5]],[23,0,-1887,[1,"aad0CDV5xEEaBOKRFbpm4R"],[4,4284216710],296],[167,4,-1888,[1,"3b+O+CtpZFCIkz9A5Ts4WV"]]],[16,null,"c015eixxFEvaiHo0IF6V8C",0],[1,0,-86,0]],[197,"Holder_Tower",false,33554432,25,[191,132],[[9,-1889,[1,"04tUid4jdEBJrV6K2OJTr0"],[5,0,0]]],[16,null,"a9DPxrPehNga8Wb4LPvvLV",0],[1,-132,-71,0]],[30,0,null,70,[22,"71Cqetuz1TIrfKXzSRo+z5",-1890,[208,"1ftIdeGzlMVJQjbR6+giI+",null,[[75,[2,["a0vA4SVVBXN5xQ94MS7y5I"]],[[202,[1,"3fHBaiS2BMxqVyKQWK+8OB"]],[199,[1,"8dt5eRvnpAGIomK1JE/H3N"]]]]],[[11,"SM_TowerCanonBody_01",["_name"],192],[5,["_lpos"],192,[1,0,0,0]],[5,["_lrot"],192,[3,0,0,0,1]],[5,["_euler"],192,[1,0,0,0]],[35,["_materials","0"],[2,["d9wgbH4UlZC7nUms8aIXK/"]],299],[17,8388608,["_layer"],[2,["a0vA4SVVBXN5xQ94MS7y5I"]]],[11,false,["_active"],192]]],298]],[30,0,null,70,[22,"424JMWZcNT+7LUIxhmggm+",-1891,[60,"d6F84ycKtBGqhc+jIeXEhq",null,[[11,"SM_TowerSmash3RBody_01",["_name"],127],[5,["_lpos"],127,[1,0,0,0]],[5,["_lrot"],127,[3,0,0,0,1]],[5,["_euler"],127,[1,0,0,0]],[35,["_materials","0"],[2,["6dld1XsrhbprQRWAgl+86p"]],301],[11,false,["_active"],127],[5,["_lscale"],127,[1,1,1,1]]]],300]],[30,0,null,70,[22,"93NMATgvJXN5P2Z0Pbx6xd",-1892,[60,"0e9y8RnrlJEpwcIOqmzkAB",null,[[11,"SM_TowerCometTBody_01",["_name"],193],[5,["_lpos"],193,[1,0,0,0]],[5,["_lrot"],193,[3,0,0,0,1]],[5,["_euler"],193,[1,0,0,0]],[35,["_materials","0"],[2,["36LCcIeKVRp7Mac4l4WlzY"]],303],[11,false,["_active"],193]]],302]],[30,0,null,70,[22,"76kmy9MSZU7qIHreg7REJV",-1893,[60,"ba3PKsvgNKZo+4qM2y+dFN",null,[[11,"SM_TowerH311Body_01",["_name"],194],[5,["_lpos"],194,[1,0,0,0]],[5,["_lrot"],194,[3,0,0,0,1]],[5,["_euler"],194,[1,0,0,0]],[35,["_materials","0"],[2,["d5Ph66/6xbPK4Q72/PB8zz"]],305],[11,false,["_active"],194]]],304]],[30,0,null,70,[22,"b8JcZpYRhbA7dBnVFp97b+",-1894,[60,"28QkawEipOYI0zm/bTlmbT",null,[[11,"SM_TowerS4RBody_01",["_name"],195],[5,["_lpos"],195,[1,0,0,0]],[5,["_lrot"],195,[3,0,0,0,1]],[5,["_euler"],195,[1,0,0,0]],[35,["_materials","0"],[2,["aa2p+GekNcwr3d84smoPpV"]],307],[11,false,["_active"],195]]],306]],[30,0,null,70,[22,"6ba5eX4SReyqm+Vbwgfquh",-1895,[60,"14C73SQqpO9KiS7KLdiNu2",null,[[11,"SM_TowerMeteorUBody_01",["_name"],196],[5,["_lpos"],196,[1,0,0,0]],[5,["_lrot"],196,[3,0,0,0,1]],[5,["_euler"],196,[1,0,0,0]],[35,["_materials","0"],[2,["2aeozPTBpe75ML5ovX4gHo"]],309],[11,false,["_active"],196]]],308]],[30,0,null,70,[22,"33sM9enERVxYZcocgwSPwR",-1896,[60,"00QNlygFBFULV5JiqJ5/Vw",null,[[11,"SM_TowerStarfallBody_01",["_name"],197],[5,["_lpos"],197,[1,0,0,0]],[5,["_lrot"],197,[3,0,0,0,1]],[5,["_euler"],197,[1,0,0,0]],[35,["_materials","0"],[2,["c2i6M6mIdSAJVEUjqztCnG"]],311],[11,false,["_active"],197]]],310]],[254,"Head Tower Gun",[[71,[362,"Bullet Spawn Position",32,-1897,[16,null,"40mOz5O+9L25Orebor+dbE",0],[1,0,0.565,-0.45]],-1898],1,4,1],[16,null,"8eDDkT1bJI8b9AFGi6q+bT",0]],[30,0,null,71,[22,"1bEwzooBRYiLITAV26DhPq",-1899,[60,"d1ZxISFxtJuqu74De9Ow5w",null,[[11,"SM_TowerGunBody_01",["_name"],199],[5,["_lpos"],199,[1,0,0,0]],[5,["_lrot"],199,[3,0,0,0,1]],[5,["_euler"],199,[1,0,0,0]],[35,["_materials","0"],[2,["eee7bsTeFUS4J0Fkyz/23b"]],324],[11,false,["_active"],199]]],323]],[30,0,null,71,[22,"4d/LLVKgJfRaWh6CVtkvdN",-1900,[60,"d1381ttidPj4LofnQtD2v8",null,[[11,"SM_Tower0MG2Body_01",["_name"],128],[5,["_lpos"],128,[1,0,0,0]],[5,["_lrot"],128,[3,0,0,0,1]],[5,["_euler"],128,[1,0,0,0]],[35,["_materials","0"],[2,["91rnZr2NlU+5mkmycELrbU"]],326],[11,false,["_active"],128],[11,8388608,["_layer"],128],[17,8388608,["_layer"],[2,["1bNv8OFqZfVYpfEynFuksV"]]]]],325]],[30,0,null,71,[22,"6bEJXm3ENa5ZOriZO+0Lz9",-1901,[60,"94/1eMiGdKn4TWyFhEIduk",null,[[11,"SM_TowerBullziBody_01",["_name"],200],[5,["_lpos"],200,[1,0,0,0]],[5,["_lrot"],200,[3,0,0,0,1]],[5,["_euler"],200,[1,0,0,0]],[35,["_materials","0"],[2,["853BuGPRRQ2oL14CCvM0kL"]],328],[11,false,["_active"],200]]],327]],[30,0,null,71,[22,"06VFwTsJJRM4OSJg2XW4Q9",-1902,[60,"81l3gj5E5Ks5brGsH6SdSe",null,[[11,"SM_Tower0MG4Body_01",["_name"],129],[5,["_lpos"],129,[1,0,0,0]],[5,["_lrot"],129,[3,0,0,0,1]],[5,["_euler"],129,[1,0,0,0]],[35,["_materials","0"],[2,["9bOQ2QYGtZs4WzqtGYB9n9"]],330],[11,false,["_active"],129],[11,8388608,["_layer"],129],[17,8388608,["_layer"],[2,["26PODSVIdRU55mar2WcIzo"]]]]],329]],[30,0,null,71,[22,"efp8IlO8deIZfWSlH1z7o0",-1903,[208,"43eEVT+8tEQYD/OxzqORse",null,[[75,[2,["3aIYRFdwZW1ITWY1VGXMEK"]],[[202,[1,"87m8SGce9FF6ypHZus4AxJ"]],[199,[1,"68El6n6mRDaI/OUa3GOgz4"]]]]],[[11,"SM_Tower3MGvBody_01",["_name"],130],[5,["_lpos"],130,[1,0,0,0]],[5,["_lrot"],130,[3,0,0,0,1]],[5,["_euler"],130,[1,0,0,0]],[35,["_materials","0"],[2,["49Ry8eFLhb25C1Q8wGk6C1"]],332],[11,false,["_active"],130],[11,8388608,["_layer"],130],[17,8388608,["_layer"],[2,["3aIYRFdwZW1ITWY1VGXMEK"]]]]],331]],[30,0,null,71,[22,"d2WuMenSdQdr89Jfpld4zw",-1904,[60,"93cC2joZ5BLbEPQnhOPl0M",null,[[11,"SM_TowerTunnelerBody_01",["_name"],201],[5,["_lpos"],201,[1,0,0,0]],[5,["_lrot"],201,[3,0,0,0,1]],[5,["_euler"],201,[1,0,0,0]],[35,["_materials","0"],[2,["9dDxbuCdVYVYsfEinJuqgr"]],334],[11,false,["_active"],201]]],333]],[30,0,null,71,[22,"754aHt1OpZU5MrqxM/Ip4m",-1905,[60,"89xmM7X9NPwrg7Js+eu/2Q",null,[[11,"SM_Tower01HKOBody_01",["_name"],202],[5,["_lpos"],202,[1,0,0,0]],[5,["_lrot"],202,[3,0,0,0,1]],[5,["_euler"],202,[1,0,0,0]],[35,["_materials","0"],[2,["46S3F1J79Rz4XvfNv5iTfa"]],336],[11,false,["_active"],202]]],335]],[254,"Head",[[72,[102,"Laser Beam Spawn Pivot",-1906,[16,null,"d96S1V1VZApJ10FJrlFriB",0],[1,0,0.598,-0.667]],[102,"Pulsar Spawn Pivot",-1907,[16,null,"cdMItmcTNF1ocMh+ONkWsp",0],[1,0,0.2,0]]],1,4,4],[16,null,"ab9cn+9/NIGavz5Ap43o7D",0]],[30,0,null,72,[22,"c3aOBtjPNU96Ex7+KDGHdh",-1908,[60,"27wRKeh1BOvomEOVBUv/Kt",null,[[11,"SM_TowerLaserBody_01",["_name"],203],[5,["_lpos"],203,[1,0,0,0]],[5,["_lrot"],203,[3,0,0,0,1]],[5,["_euler"],203,[1,0,0,0]],[35,["_materials","0"],[2,["c79Byda9tSsLPjCdZFbGni"]],348],[11,false,["_active"],203]]],347]],[30,0,null,72,[22,"bbqAjalhlRdoiOW0dhSoUC",-1909,[60,"73CzTQLxtBjY868RL1xsPp",null,[[11,"SM_TowerPuls3rBody_01",["_name"],204],[5,["_lpos"],204,[1,0,0,0]],[5,["_lrot"],204,[3,0,0,0,1]],[5,["_euler"],204,[1,0,0,0]],[35,["_materials","0"],[2,["1fCLEjPmBTW6Y7Y/vYCPCL"]],350],[11,false,["_active"],204]]],349]],[30,0,null,72,[22,"27Yce2+45c87fcrQ+S23Kt",-1910,[60,"ecFxiBbjBCjJJZT94mdmgU",null,[[11,"SM_TowerPulsarBody_01",["_name"],205],[5,["_lpos"],205,[1,0,0,0]],[5,["_lrot"],205,[3,0,0,0,1]],[5,["_euler"],205,[1,0,0,0]],[35,["_materials","0"],[2,["c1qYGglmVbiJ63kvX3SnJg"]],352],[11,false,["_active"],205]]],351]],[30,0,null,72,[22,"9aoAAYJKJR56nsyDVR3xr1",-1911,[60,"ee7o/3/QpI0Jep9WlcZGTu",null,[[11,"SM_TowerThunderBBody_01",["_name"],206],[5,["_lpos"],206,[1,0,0,0]],[5,["_lrot"],206,[3,0,0,0,1]],[5,["_euler"],206,[1,0,0,0]],[35,["_materials","0"],[2,["a174aNwnFUq6B+C8hupOtt"]],354],[11,false,["_active"],206]]],353]],[30,0,null,72,[22,"12sIxAd4xbv59W3ANKj2X7",-1912,[60,"44e/zYoHRN2ZN7aolbasSw",null,[[11,"SM_TowerElectroneerBody_01",["_name"],207],[5,["_lpos"],207,[1,0,0,0]],[5,["_lrot"],207,[3,0,0,0,1]],[5,["_euler"],207,[1,0,0,0]],[35,["_materials","0"],[2,["366PFgp3dcA6jQhh5OaNY0"]],356],[11,false,["_active"],207]]],355]],[30,0,null,72,[22,"a8rRRSGbdZ75rtdYdCxXvt",-1913,[60,"3bCj4+449P7rbIlSBncmL1",null,[[11,"SM_TowerOmegaBeamBody_01",["_name"],208],[5,["_lpos"],208,[1,0,0,0]],[5,["_lrot"],208,[3,0,0,0,1]],[5,["_euler"],208,[1,0,0,0]],[35,["_materials","0"],[2,["ebLTCL4wZWyoex5cTjGOhH"]],358],[11,false,["_active"],208]]],357]],[30,0,null,72,[22,"19dqAvhYZW66LFXyVsSUYV",-1914,[60,"17M/NDxDpG2odEA803pjdi",null,[[11,"SM_TowerPlasmaQBody_01",["_name"],209],[5,["_lpos"],209,[1,0,0,0]],[5,["_lrot"],209,[3,0,0,0,1]],[5,["_euler"],209,[1,0,0,0]],[35,["_materials","0"],[2,["d1WspVTtle/Jp16o0xqn79"]],360],[11,false,["_active"],209]]],359]],[41,"Text_Stats Name",33554432,132,[[9,-1915,[1,"22v1C6JmhIx7jig4/eXnT5"],[5,62.730000000000004,16.58]],[181," energy cost ",14,14,13.95,false,false,-1916,[1,"dekFkAvWxKb4nEvspyDiGE"],[4,4282187811],366],[191,0.1,-1917,[1,"61yvZ7aE5G7JmLYxb69K0T"],[4,4282187811]]],[16,null,"8b8/UWiKNN9Jwy0k90rbQW",0],[1,0,36.079,0]],[53,"Icon_Currency",33554432,73,[-1920],[[9,-1918,[1,"78CCWb191BJIzZfrySIVfc"],[5,26,26]],[23,0,-1919,[1,"22O0usQ8FOHLEdUXrIw+MF"],[4,4294765656],376]],[16,null,"47Qe7aVr5PiLFwfgRa11bw",0],[1,50.004999999999995,0.785,0]],[33,"Icon",33554432,365,[[9,-1921,[1,"65FyjFxoNM/L7hVyxnQXBb"],[5,24,24]],[108,0,-1922,[1,"c1puzLQ3ZE0oeQT+WQFFnQ"],375],[117,45,1,1,1,1,40,36,-1923,[1,"f7M46D6g1MEqYoJrzLQart"]]],[16,null,"6aVvYl7FBG8aUifflqt1B9",0]],[83,"Holder_Lines",33554432,78,[135,136],[[9,-1924,[1,"5aEPve8JFIMImVC6SKw3WB"],[5,0,0]]],[16,null,"50C9uA0MtIe7L9nGUpgqeW",0]],[103,"Top_Bar",false,33554432,135,[[47,-1925,[1,"80HX0jXaBNB4itMH1D+tnp"],[5,8,2],[0,0,0.5]],[23,0,-1926,[1,"9dRLQUZ3pAPYxAhdJCsfjF"],[4,4284216710],418],[148,1,0,-1927,[1,"83iNCMyX9M550TObsFltbE"]]],[16,null,"08CqHkmzZFcaarUg3f/678",0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,135,[[47,-1928,[1,"76fubz5nhAFbXbDH4ZXUmV"],[5,8,2],[0,0,0.5]],[23,0,-1929,[1,"a4Af9xvzRDW61mW1XbK5Ul"],[4,4284216710],419],[148,4,0,-1930,[1,"d404f0sEdIGoOATSD5Fp8G"]]],[16,null,"12bNTRkKRC5Kd8YaPkZGTN",0],[1,0,-28.86,0]],[103,"Top_Bar",false,33554432,136,[[47,-1931,[1,"0eSzvLftFFh6OUuQxeRqiZ"],[5,8,2],[0,1,0.5]],[23,0,-1932,[1,"0fQhT1yJlLUpKFCrjH0tCG"],[4,4284216710],421],[148,1,0,-1933,[1,"8daEqpN9VGr72QTz8ue0Ic"]]],[16,null,"54QVJy7Z9Lpqau9znmr67E",0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,136,[[47,-1934,[1,"6d1ru7CPdC6IhdyJqGq9xL"],[5,8,2],[0,1,0.5]],[23,0,-1935,[1,"72xvfQ12lBr7gZ9GHl3gIw"],[4,4284216710],422],[148,4,0,-1936,[1,"f2DlkRXfpCkJ+4fxBIiJWf"]]],[16,null,"12VqkMpnhDUq4rJ6ISu3yj",0],[1,0,-28.86,0]],[53,"Icon_Currency",33554432,79,[-1939],[[9,-1937,[1,"71j2bdxvpD2prILcbx40TC"],[5,26,26]],[23,0,-1938,[1,"80RcnPdWtED4iRBEhkTiad"],[4,4294765656],431]],[16,null,"dekrSOL7VJy54gST+lIb6/",0],[1,48.004999999999995,0.785,0]],[33,"Icon",33554432,372,[[9,-1940,[1,"79NWctGNRCZ4v92VdgciJh"],[5,24,24]],[108,0,-1941,[1,"73lNzZcwVBkbiGz+ahTncn"],430],[117,45,1,1,1,1,40,36,-1942,[1,"d40X9TR9pC/Kb3lkwSADSA"]]],[16,null,"edY1stVC1BsKzPQA1lo72L",0]],[112,"Text_Reset Info",33554432,82,[[[9,-1943,[1,"f5ROveJmJL77kPPQv0t2de"],[5,230.96,71.72]],-1944,[96,-1946,[1,"fbDQHpG4ZC5Zg9yfme1XF5"],-1945]],4,1,4],[16,null,"bb7+Dl8jRLapR/K0vQj9ir",0],[1,0,1,0]],[53,"Holder_Lines",33554432,82,[138,139],[[9,-1947,[1,"86/3R68T1Itr22BHocq4n7"],[5,0,0]]],[16,null,"09dcPhk5tGQbWFtJc7aHf8",0],[1,0,-36.86,0]],[103,"Top_Bar",false,33554432,138,[[47,-1948,[1,"ebumiRTEJJuZT/Z0uPb2BE"],[5,8,2],[0,0,0.5]],[23,0,-1949,[1,"5dLJmvK8lABYOq0yHhNZuA"],[4,4284216710],452],[148,1,1,-1950,[1,"4f/QIHR7lOybaTog3Bxpfd"]]],[16,null,"52414k4GVIp6G+4AHnSb0/",0],[1,0,39.86,0]],[103,"Bot_Bar",false,33554432,138,[[47,-1951,[1,"d7O01AKeBCorokTAlkG16H"],[5,8,2],[0,0,0.5]],[23,0,-1952,[1,"77NAXrghlFBKr0fpAChFbZ"],[4,4284216710],453],[148,4,1,-1953,[1,"51VrybpdZDbo1H6BPIag8e"]]],[16,null,"b8pK2EzTlL/6B073002oeg",0],[1,0,-39.86,0]],[103,"Top_Bar",false,33554432,139,[[47,-1954,[1,"76GVTf85NE57thxwIqu8iv"],[5,8,2],[0,1,0.5]],[23,0,-1955,[1,"1d8DfgtqNCm48/J8H2v89R"],[4,4284216710],455],[148,1,0,-1956,[1,"a261/Z9ZtC87FyfEnYC1PX"]]],[16,null,"8d2/IdKXdDS7e8HXgvaz3D",0],[1,0,39.86,0]],[103,"Bot_Bar",false,33554432,139,[[47,-1957,[1,"57QJnJ0GtOkre0+ecyZIyb"],[5,8,2],[0,1,0.5]],[23,0,-1958,[1,"3f0VdH4hhNbY2hdsg2a87Q"],[4,4284216710],456],[148,4,1,-1959,[1,"72VeLK2Z5K4oFcatMXVS+5"]]],[16,null,"2498vn859AxbMwfZrRJLT9",0],[1,0,-39.86,0]],[224,"Text_Tab",33554432,11,[-1962],[[9,-1960,[1,"34At4MM+dLCJfGfJrFed1t"],[5,50.39,35.28]],[70,"CUBE",28,28,28,false,-1961,[1,"cbKAhT8m9Os6K6BxRwAmmz"],[4,4292659132],484]],[16,null,"abdM2QEG1CGrSV7u13MQVR",0],[1,0,0.6,0],[3,0,0,-0.3826834323650899,0.9238795325112867],[1,0,0,-45.000000000000014]],[323,"Text_Tab (Backup)",false,33554432,11,[-1965],[[9,-1963,[1,"65h3dZDnZJB6QwwRLL6GSB"],[5,63.15,27.72]],[70,"Upgrade",22,22,22,false,-1964,[1,"c5Fo3VbHhGgZ2aWct1jwh7"],[4,4292659132],486]],[16,null,"adTqH81MVBS5fYW3iY9yOw",0],[1,3.145,0.593,0],[3,0,0,-0.3826834323650899,0.9238795325112867],[1,0,0,-45.000000000000014]],[224,"Text_Tab",33554432,12,[-1968],[[9,-1966,[1,"19a37/i2REnIgg6A/8Z9Qw"],[5,65.83,35.28]],[70,"TOWER",28,28,28,false,-1967,[1,"663cGnR/FKhY3mLNDG5c+x"],[4,4292659132],494]],[16,null,"79pqbc7QdMiYHrm1MjKaKC",0],[1,0,0.7,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[323,"Text_Tab (Backup)",false,33554432,12,[-1971],[[9,-1969,[1,"0bWMvzkpNOG4720hU9a7vS"],[5,63.15,27.72]],[70,"Upgrade",22,22,22,false,-1970,[1,"08J0hxz85JybetkHY7++iS"],[4,4292659132],496]],[16,null,"8fXj0l7OZIwpTjX837QXYj",0],[1,1.624,0.7,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[53,"Holder_Panel",33554432,142,[57],[[9,-1972,[1,"52sP79LahIn6XPS7/edIgk"],[5,360,80]],[94,-1973,[1,"120QMoBoRF859UZgjnnETD"]]],[3,"25FwW/HthB07G3rtM/Jwmp",1,0],[1,0,0.174,0]],[112,"Text_Title",33554432,57,[[[9,-1974,[1,"18XJYVdihKo6t5c/04a6L1"],[5,230.96,32.76]],-1975,[96,-1977,[1,"fcxUeXyPpFTrCHqjuNJHcR"],-1976]],4,1,4],[3,"69ZJ+wN1hMtqIonch6wTlc",1,0],[1,0,40.71,0]],[112,"Text_Fluff",33554432,57,[[[9,-1978,[1,"c4eW3pvFRAo47Yf865qeTq"],[5,266,72]],-1979,[96,-1981,[1,"1543uSsxlCOqBuBHmf7idp"],-1980]],4,1,4],[3,"9672yJuK5NGbVWZF+lVrmF",1,0],[1,0,-15.120000000000001,0]],[53,"Holder_Lines",33554432,57,[143,144],[[9,-1982,[1,"e5yDdAuOpLtoc4KIvReg1F"],[5,0,0]]],[3,"891JHMBdxLjaiB02wsQkM0",1,0],[1,0,-53.120000000000005,0]],[41,"Top_Bar",33554432,143,[[47,-1983,[1,"b5aQSDhPlKWqJtzmM9cBnq"],[5,8,2],[0,0,0.5]],[23,0,-1984,[1,"d5tBqhD/BDk4d6baTwDmh7"],[4,4284216710],502],[167,1,-1985,[1,"65xOgnR1tHq5QfmUNuf21s"]]],[3,"2dZ00aCqlI8L3lKA/Eiqrw",1,0],[1,0,68,0]],[41,"Bot_Bar",33554432,143,[[47,-1986,[1,"09doZlbxBKPZFgdnJ0i2hH"],[5,8,2],[0,0,0.5]],[23,0,-1987,[1,"01j5mdXeFHoYZKMR8SIyST"],[4,4284216710],503],[167,4,-1988,[1,"16segjbG1J6JtAWxzcol2g"]]],[3,"0aL7JT/jJETJVShI3JNwdw",1,0],[1,0,-68,0]],[41,"Top_Bar",33554432,144,[[47,-1989,[1,"85w0I7RoBOzI3wLAD476Mm"],[5,8,2],[0,1,0.5]],[23,0,-1990,[1,"ebvAnlLnZAAqp88fCXlzuO"],[4,4284216710],505],[167,1,-1991,[1,"8a5XlglP1GQKf1I0nnBQ/W"]]],[3,"efM3CrdCdGObRi6nNUi58z",1,0],[1,0,68,0]],[41,"Bot_Bar",33554432,144,[[47,-1992,[1,"05/VkhtLJPb65DS/4f76wB"],[5,8,2],[0,1,0.5]],[23,0,-1993,[1,"ccV25wFOlI/Y8BGuboI44U"],[4,4284216710],506],[167,4,-1994,[1,"09iIEr2hJKsrFfVVc35zc8"]]],[3,"38J++ydV5OGL/whBXtDjcz",1,0],[1,0,-68,0]],[53,"Holder_Ad Button v3",33554432,26,[31],[[9,-1995,[1,"b67ycjfDRNHLBg2VrSazw0"],[5,60,32]],[94,-1996,[1,"15juFGDUJMKK9jnVwzYWQm"]]],[3,"faFimRjVRCRa+lj6G7Su7Z",1,0],[1,69.717,-52,0]],[83,"Group_Glow",33554432,31,[-1998,-1999],[[48,-1997,[1,"b8YwEF4g9HWZ7ySsb6kZJz"]]],[3,"bb6ea71hdEg61DfZR8U1Rv",1,0]],[137,"On Victory Listener",33554432,[224],[[48,-2000,[1,"21rF06+4BO26NqZNxHBqgy"]],[375,0.5,3,-2001,[1,"48jMyrh55ByqDeksuP6NtR"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","victory",8],[8,"2e422rMyxhPNoAP/9tU8bNO","hideHPUI",87]]]],[3,"47/e8YnJRAFrN1Rp5NDYvU",1,0]],[83,"Game Flow",33554432,46,[394,-2003],[[48,-2002,[1,"f7LxDQU11N04qYk4qK8REH"]]],[3,"d3Ov/jJS5KFLnkoCsGfV1Q",1,0]],[83,"Cube Tower HP",33554432,46,[-2005,-2006],[[48,-2004,[1,"2fSPXDtOhLAKWuuw3BxyDU"]]],[3,"29oN+GuGVFoKtF9yCPmqUz",1,0]],[83,"Wave",33554432,46,[-2008,-2009],[[48,-2007,[1,"39j9TK4PJFNZrSZrxj6SyR"]]],[3,"1d+2Wt5x1NHpMCXnJ10iXO",1,0]],[33,"Annoucement Finished",33554432,397,[[48,-2010,[1,"96W490h6BJFqOb1mafaNS6"]],[611,5,-2011,[1,"34APirnblPqaGfbe9G6Rk/"]]],[3,"f7H+rSHuhBcrjr9r8NxqPj",1,0]],[83,"Rewarded Ads Freeze",33554432,46,[-2013,-2014],[[48,-2012,[1,"fab+rjiu1Gvo1i7K6650oN"]]],[3,"ecV/nbRkRLYZ9nNrn+ynHs",1,0]],[33,"Button_Color",33554432,32,[[9,-2015,[1,"974M8kJLlOno4xg61kQvYd"],[5,108,108]],[46,1,0,-2016,[1,"0cX6kQOg1DC7DSLkMzq4PR"],[4,4280250623],543]],[3,"79b88GncRDpbJuCmou2OVk",1,0]],[41,"Outline",33554432,36,[[9,-2017,[1,"799mbLIcdFgbvLBOzTSOG1"],[5,68,68]],[46,1,0,-2018,[1,"d8/VT0QZZFq5OtxXVJBx4k"],[4,4294174947],551],[117,45,-6,6,6,-6,108,108,-2019,[1,"74ZhmVbidH45lPVP9vywFm"]]],[3,"e9ICe3MsdN+a3N6PRWI9S7",1,0],[1,-6,-6,0]],[41,"Outline",33554432,48,[[9,-2020,[1,"10j2Zd2IRGeae80rDZfsn6"],[5,68,68]],[46,1,0,-2021,[1,"70s83CMaJGoamPKy49NxWD"],[4,4281556991],558],[117,45,-6,6,6,-6,108,108,-2022,[1,"76Xy1ee+BImJwZqpIUm5jv"]]],[3,"91JEBzFkJNBbsAL3Xjf0UM",1,0],[1,-6,-6,0]],[33,"Raise Game Over GS Event",33554432,48,[[48,-2023,[1,"1dfB/qcIpGBIM5ltEr+7xD"]],[465,-2024,[1,"a7Wu9C6R1L/Y3g9QkK65Lo"]]],[3,"3a0x2PVylMOrUxd8zVwjnv",1,0]],[197,"Holder_Ad Button",false,33554432,26,[37],[[9,-2025,[1,"1bP89+oYVIvLzFjZeAsuCs"],[5,60,32]],[94,-2026,[1,"4bnUr4eiJF7bXmZB3DT0wZ"]]],[3,"a76jv30b1CcZoxethOLO9i",1,0],[1,69.717,-52,0]],[83,"Group_Glow",33554432,37,[-2028,-2029],[[48,-2027,[1,"69iA2TNCZFiZzpfI2PdeCR"]]],[3,"2a9BJjKXVJoJ68Uszpp+U7",1,0]],[197,"Holder_Ad Button-001",false,33554432,26,[49],[[9,-2030,[1,"cdgNBU6XRIAYbB75kBRrXx"],[5,70,70]],[94,-2031,[1,"c8fxUK5BdEwYP2tCaRBgZi"]]],[3,"01lJpCDOxOariilDPVbvqe",1,0],[1,-87.624,-115.114,0]],[83,"Group_Glow",33554432,49,[-2033,-2034],[[48,-2032,[1,"331UuJn1FMjI4BBMr2L4FE"]]],[3,"becbdYuRhJzIU5+XkUZ9Ze",1,0]],[83,"Group_Glow",33554432,16,[-2036,-2037],[[48,-2035,[1,"5ana7HIJREwKlV1ibckcu9"]]],[3,"c4urjvrjFLqqurzX1rYZAB",1,0]],[33,"Color",33554432,16,[[9,-2038,[1,"eeTGlXJGVJKp2R2CLmfVyK"],[5,32,32]],[23,0,-2039,[1,"a3tPsLhmJL/ZoO7wD/00B5"],[4,4784195],584]],[3,"1baTLrN1ZHkpTm+MMbfWqj",1,0]],[83,"Group_Glow",33554432,17,[-2041,-2042],[[48,-2040,[1,"7djmuFbBtBx5z1DVzij1UR"]]],[3,"d2+lMHVwJKdIKLLZjSOSk6",1,0]],[85,"Square_Outline",33554432,145,[[9,-2043,[1,"751Jxs7hhFmY7zJSB6nP0r"],[5,220,220]],[46,1,0,-2044,[1,"fbEzh/hiJKpLq7B6Tmp1BF"],[4,4294174947],0]],[3,"56F80fvnhKBKbxGoB5bxYr",1,0],[1,0,61,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[85,"Square_Color",33554432,145,[[9,-2045,[1,"1aS3EsBlVCXqMlj+QYJzbf"],[5,200,200]],[108,0,-2046,[1,"50Mxwd8xhMr4zSnRnu8N17"],1]],[3,"65lhlOpA1IOqeMRWnRAxk0",1,0],[1,0,61,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[41,"Energy Cube 01",33554432,20,[[47,-2047,[1,"f76EOjX3NKx5HJ2pxHPHGG"],[5,22,22],[0,0,0.5]],[23,0,-2048,[1,"bcjfZ92T9HzpWRktoYFstM"],[4,1355861760],13]],[3,"0axfYOGJ9KIpwnZnDqgaBm",1,0],[1,4.5,0,0]],[41,"Energy Cube 02",33554432,20,[[9,-2049,[1,"7fyVD95sxLcpdL5pcIzuH7"],[5,22,22]],[23,0,-2050,[1,"f4JXWR63NFvoDQaZ5n+tzm"],[4,1355861760],14]],[3,"53HN9ngBFPwIoXt0tubF9k",1,0],[1,41.6,0,0]],[41,"Energy Cube 03",33554432,20,[[9,-2051,[1,"d0Vr2EFfBG8ZmVXOnq0zyN"],[5,22,22]],[23,0,-2052,[1,"69pNpI1edJ4K5KQV2QBHj7"],[4,1355861760],15]],[3,"c2M0agW91M9LnjfWAKWt7r",1,0],[1,67.7,0,0]],[41,"Energy Cube 04",33554432,20,[[9,-2053,[1,"b8qrYyE6xHX4QDFv0oivuA"],[5,22,22]],[23,0,-2054,[1,"212fChd2RG6I9BwR/11Yg9"],[4,1355861760],16]],[3,"01ffODeyhP/4KgJPoDRwfM",1,0],[1,93.8,0,0]],[41,"Energy Cube 05",33554432,20,[[9,-2055,[1,"02iAvz7qZCzqWRAmy1d5Of"],[5,22,22]],[23,0,-2056,[1,"defqe6RuVGday5/ncO/yz7"],[4,1355861760],17]],[3,"b7Jgl14dxLzKKEB3XSS3ej",1,0],[1,119.89999999999999,0,0]],[41,"Energy Cube 06",33554432,20,[[9,-2057,[1,"226lIeBiNACqq2uc2H7Wr6"],[5,22,22]],[23,0,-2058,[1,"01HB30IOZFmpr5ph4p2Jck"],[4,1355861760],18]],[3,"51U0ikYrVBMpFfaWahlqGV",1,0],[1,145.99999999999997,0,0]],[41,"Energy Cube 07",33554432,20,[[9,-2059,[1,"10+DbdToJOBr6Ke0l38a/4"],[5,22,22]],[23,0,-2060,[1,"ee2m/GSF5L77vgs/xAG+yV"],[4,1355861760],19]],[3,"c3mnqxREVDdqeDtBJOq0J+",1,0],[1,172.09999999999997,0,0]],[41,"Energy Cube 08",33554432,20,[[9,-2061,[1,"5e4Vdh445MjaAjKTG7MgSe"],[5,22,22]],[23,0,-2062,[1,"c80/94Zg9PW602TEXracUb"],[4,1355861760],20]],[3,"9a+qH8Q7ZAoowWqHZ6iGr6",1,0],[1,198.19999999999996,0,0]],[41,"Energy Cube 09",33554432,20,[[9,-2063,[1,"f1KSIgzslKxKbbWg9NGAlV"],[5,22,22]],[23,0,-2064,[1,"01TsDgDdlMbqEcugaHbKM9"],[4,1355861760],21]],[3,"5fdgPWM4RJ5oImY3BOlnT2",1,0],[1,224.29999999999995,0,0]],[41,"Energy Cube 10",33554432,20,[[9,-2065,[1,"d1fkRx67hKpIl7X++ehk1s"],[5,22,22]],[23,0,-2066,[1,"b0GOLiLelG9ZBHsQk7I+bz"],[4,1355861760],22]],[3,"1d7JAlIBpFbYQ00E+ylGdn",1,0],[1,250.39999999999995,0,0]],[33,"Energy Cube 01",33554432,98,[[9,-2067,[1,"6ct1Vh0PpG3acjCkxmA0aO"],[5,22,22]],[23,0,-2068,[1,"88YHcVdSFKlLdFuyzdGg4W"],[4,2027800766],23]],[3,"37NAPNjdJMSaUzzOwwlrtO",1,0]],[225,"Icon_Locked",33554432,98,[[9,-2069,[1,"86X8FLAqlC2Ljmjfd2uHAv"],[5,16,20]],[211,0,false,-2070,[1,"6eYCH7CvVIxo1JHwqEO8SJ"],[4,2027800766],24]],[3,"1aiKBkk+tFJpdGA+GWo+g6",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,99,[[9,-2071,[1,"e4qSNHt6BCcqTIfikgNWCH"],[5,22,22]],[23,0,-2072,[1,"72bDN43wJItoK3FuLhER9f"],[4,2027800766],25]],[3,"9fzrn3d9hIV5PEwuNmsFbT",1,0]],[225,"Icon_Locked",33554432,99,[[9,-2073,[1,"88pphmbCNH/b9y5EsiWXV8"],[5,16,20]],[211,0,false,-2074,[1,"67J+N+ypBBLKvG4VQY3Qfb"],[4,2027800766],26]],[3,"0bRZVbG3VK5aUERKjalhg5",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,100,[[9,-2075,[1,"1cMxU3ka5HFrQHv/AlyBsm"],[5,22,22]],[23,0,-2076,[1,"92Utv7o1dGDoJ75NCjXJfH"],[4,2027800766],27]],[3,"20qjyWMzRHpbkfHCMgTXaA",1,0]],[225,"Icon_Locked",33554432,100,[[9,-2077,[1,"c5zwYew/ZL46AQFVkg7Fg1"],[5,16,20]],[211,0,false,-2078,[1,"523BF5/J5PGqBkLSC9s85m"],[4,2027800766],28]],[3,"e28BcgHqdHFah8GNdhsMey",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,101,[[9,-2079,[1,"de9DLRnytJsqfv5euMxlZu"],[5,22,22]],[23,0,-2080,[1,"f5c6ikpSpAKq7uGhrecEmx"],[4,2027800766],29]],[3,"d1NQnxteVOVpt0g4vmzj1e",1,0]],[225,"Icon_Locked",33554432,101,[[9,-2081,[1,"73QQ7yK9pLCb9LtGzxk+Gt"],[5,16,20]],[211,0,false,-2082,[1,"97NXfDYxZCfou6WQ2+0XdS"],[4,2027800766],30]],[3,"0fLV4PvtFHlZKP++uSTG1V",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,102,[[9,-2083,[1,"2fgbFGTpBFNJuwiutaH/18"],[5,22,22]],[23,0,-2084,[1,"5fb/R585BPvJt17T22Y/at"],[4,2027800766],31]],[3,"87r0j2xS1EFq4sxo43rqDo",1,0]],[225,"Icon_Locked",33554432,102,[[9,-2085,[1,"0eaO3RooVLzbwTfE9ER0Ik"],[5,16,20]],[211,0,false,-2086,[1,"09frqn83VBo6Hv+5StW1Wk"],[4,2027800766],32]],[3,"a2Cagj/rRMLYfWpY570abg",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,103,[[9,-2087,[1,"baklbTKRhPDYqUTOBxeXSp"],[5,22,22]],[23,0,-2088,[1,"54aFRtKrxCa5gaMNOkIzRi"],[4,2027800766],33]],[3,"36g1h3o+VBsYtuzVfbhM8X",1,0]],[225,"Icon_Locked",33554432,103,[[9,-2089,[1,"1cmhhko1FEQpstzmlj30Ib"],[5,16,20]],[211,0,false,-2090,[1,"52ok8I+9JAi5Hb0dGe2ShT"],[4,2027800766],34]],[3,"f82pUV9SlIbJzH+MoyQQIc",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,104,[[9,-2091,[1,"10B/YfNfhBLbZimNYxkQXB"],[5,22,22]],[23,0,-2092,[1,"14grZ5rVxADY/UxChqRKQ8"],[4,2027800766],35]],[3,"9776Kco0hIwKncHloA6XyJ",1,0]],[225,"Icon_Locked",33554432,104,[[9,-2093,[1,"3a3Q5Mlj5JaZE3MMMd9kly"],[5,16,20]],[211,0,false,-2094,[1,"a6yM3tO0NP357SqHuJ5tla"],[4,2027800766],36]],[3,"9aCdMYufxHUYRAcMUQ4zkt",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,105,[[9,-2095,[1,"4eUEuixR1K9qe9WO0ZhZyN"],[5,22,22]],[23,0,-2096,[1,"8cGjl3ctxHfrloGVVk064P"],[4,2027800766],37]],[3,"675DLsx+hLXrVy+nj+AT6K",1,0]],[225,"Icon_Locked",33554432,105,[[9,-2097,[1,"3erwz2cOZGTanNCgCPnCbs"],[5,16,20]],[211,0,false,-2098,[1,"4dIxCbblNBK5tOVnEq4uw9"],[4,2027800766],38]],[3,"c25CeNbS1JHb6QL9d+S7z7",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,106,[[9,-2099,[1,"658UhTNY9G+axM3JmtAmiW"],[5,22,22]],[23,0,-2100,[1,"4eziJ/qbtM9r/8FlNMDYvc"],[4,2027800766],39]],[3,"a3KAHiludC5bI2AZbmUW66",1,0]],[225,"Icon_Locked",33554432,106,[[9,-2101,[1,"98cMWt7wtDHbkIb6y47AKy"],[5,16,20]],[211,0,false,-2102,[1,"d9L1H605FJK7N4zSXumtRL"],[4,2027800766],40]],[3,"acmrTcXkdMp62EdG7ytL8z",1,0],[1,0.8,0.8,1]],[33,"Energy Cube 01",33554432,107,[[9,-2103,[1,"23Gtn5rtBAbJIXrzU24y57"],[5,22,22]],[23,0,-2104,[1,"0aoa5B02tARIlQCfDId4SD"],[4,2027800766],41]],[3,"a0Kpn4fApEcozqA5B/if7U",1,0]],[225,"Icon_Locked",33554432,107,[[9,-2105,[1,"20Vl5jltdNb6Qd0dcikaQC"],[5,16,20]],[211,0,false,-2106,[1,"62XZgUa3xKpoIt8SIqmWfX"],[4,2027800766],42]],[3,"b75R7qaw9HRYjV23JE+5Al",1,0],[1,0.8,0.8,1]],[41,"Text_Energy",33554432,97,[[9,-2107,[1,"2ai87Oku1AKaJWPEwYXgrq"],[5,57.13,50.4]],[466,"energy",24,24,false,-2108,[1,"e0XuVXCYtGy4V7WYBhRMmm"],[4,4281532425],44]],[3,"0dm2eouiJMApnIG6hrYxax",1,0],[1,0,34.68,0]],[302,"Reference Image-PauseIntro",false,33554432,9,[[9,-2109,[1,"3aFrpkrWhEQJZ8XtgnPVxP"],[5,840,960]],[391,-2110,[1,"dctgYSfFFBEJSqGvuNWRtT"],46]],[3,"777Hf4O4BCgbGhRrakZdui",1,0],[1,0.934,0.934,1]],[85,"Square_Outline",33554432,150,[[9,-2111,[1,"a2zSBbf1lGYqXqpFG7plHw"],[5,850,850]],[46,1,0,-2112,[1,"5a+W4zAXhDZo9f43oe63+3"],[4,4294174947],48]],[3,"1dDWc+qM9Pw4nnfIVduvKV",1,0],[1,0,61,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[85,"Square_Color",33554432,150,[[9,-2113,[1,"4br8XdFkFCOo6ePjcfBDg/"],[5,840,840]],[108,0,-2114,[1,"0fyD/+uXZMz43Ss+ONqvWM"],49]],[3,"42yD/DDSVHdLOvmbrazXlD",1,0],[1,0,61,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[103,"Text_Pause",false,33554432,86,[[9,-2115,[1,"bbmDMRahVNFqhik1klmS6V"],[5,72.76,30.24]],[70,"- pause -",24,24,24,false,-2116,[1,"083pT4zpxLAbSmkdHnXMY7"],[4,4278867936],50]],[3,"c2UM6kBRRHiI6o0xzCeNdF",1,0],[1,0,-32,0]],[41,"Outline",33554432,27,[[9,-2117,[1,"9eLsTD32RFZYPLDORWdeOo"],[5,108,108]],[46,1,0,-2118,[1,"87g031pqZM8oawqBacIBTQ"],[4,4292928274],64]],[3,"bfr0QevGdPlow2J71Qahfm",1,0],[1,-6,-6,0]],[85,"Icon_Play",33554432,27,[[9,-2119,[1,"c408Pshj5GKpChNMcvlQ/O"],[5,48,64]],[212,-2120,[1,"21SXgacExGapPzuXpMmUw+"],[4,4281532425],65]],[3,"28JX5rJrtH0J9wsV4jfZOa",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[41,"Square_Detail 01",33554432,89,[[9,-2121,[1,"80y6oacWpBzqb3r466wosJ"],[5,5,5]],[23,0,-2122,[1,"5d1bZFA/RFlIR2AebMkxbq"],[4,15984867],67]],[3,"72ITTXs85CDqK0FFU0Jrrc",1,0],[1,-27.141,6.28,0]],[41,"Square_Detail 02",33554432,89,[[9,-2123,[1,"5ap7xeIShGiJkNrCOrzaTu"],[5,3,3]],[23,0,-2124,[1,"ceNTbbVktAT6b0TL7R/Jx1"],[4,15984867],68]],[3,"086oYh7jJBs60J33QNB7t8",1,0],[1,-26.11,12.277,0]],[41,"Square_Detail 03",33554432,89,[[47,-2125,[1,"9agxqoNwdIeKV3iPPgFEO0"],[5,5,5],[0,0.5,0]],[23,0,-2126,[1,"6bOLheF8JNuraXkq42bngB"],[4,15984867],69]],[3,"c8oiatvxtGs4YR8+pGLbNo",1,0],[1,26.57,3.384,0]],[41,"Square_Detail 04",33554432,89,[[47,-2127,[1,"bcmvpYwtVJT4WlHR6nfiLg"],[5,3,3],[0,0.5,0]],[23,0,-2128,[1,"b1eAwd6T5LbIFLOEhnigfr"],[4,15984867],70]],[3,"016TJkE1hOx4J2+e9fYggm",1,0],[1,32.229,3.384,0]],[41,"Text_Clear",33554432,38,[[47,-2129,[1,"c0T1MV+QNPvoNKLeQusDBa"],[5,184.26,113.4],[0,0,0.5]],[70,"Clear!",90,90,90,false,-2130,[1,"955G9vK3xGi7xKICxoIqeK"],[4,4294174947],92]],[3,"27/+u8X/VF/ZWsvtPdldCa",1,0],[1,-92,0,0]],[41,"Square_Detail 01",33554432,38,[[9,-2131,[1,"eaECD3gvRHDru26ZvjeAGl"],[5,10,10]],[46,1,0,-2132,[1,"5cXybZ961LQLV7ImgAUO3j"],[4,4294174947],93]],[3,"e0y8k+Et1IHI5rNRBhX77I",1,0],[1,-100,-28,0]],[41,"Square_Detail 02",33554432,38,[[9,-2133,[1,"4fFdjptZNCj7cQccRRFcv/"],[5,5,5]],[46,1,0,-2134,[1,"08nwrdCnlCT4pa43TZKuz8"],[4,4294174947],94]],[3,"dbXoVlZZdE5JLFAok+zHTl",1,0],[1,-97.48,-18,0]],[41,"Square_Detail 03",33554432,38,[[9,-2135,[1,"4b8nLKeNFPAJiH/jPwO/Kz"],[5,5,5]],[46,1,0,-2136,[1,"43mu4kNfBEp5i99ruutkyz"],[4,4294174947],95]],[3,"3fcsHtO9NEgLdjRBcMPBc+",1,0],[1,-26.26599999999999,16.458999999999946,0]],[41,"Square_Detail 04",33554432,38,[[9,-2137,[1,"1e5H4xlZ1Egoo7R4L3upzM"],[5,8,8]],[46,1,0,-2138,[1,"6bHRmGBNtIVIy9MtX13MXz"],[4,4294174947],96]],[3,"d8tfuxPEFHp4hrPz0yLRjQ",1,0],[1,32.32,-40.564,0]],[41,"Square_Detail 05",33554432,38,[[9,-2139,[1,"22e5SlzKVAWq5xgxu3Cn/7"],[5,8,8]],[46,1,0,-2140,[1,"1d8hfmkz9H9YViI0GAsRay"],[4,4294174947],97]],[3,"45CbS3SFZKxYCYymn27WBH",1,0],[1,47.141,17.264,0]],[41,"Square_Detail 06",33554432,38,[[9,-2141,[1,"2aJnaBMaJHpKSFKHmu7+0d"],[5,4,4]],[46,1,0,-2142,[1,"1eIrq7O+RK9b5pM+YhaxqI"],[4,4294174947],98]],[3,"9b6Z0rwKhDG4IMzNuWcApw",1,0],[1,55.693,15.228,0]],[41,"Square_Detail 07",33554432,38,[[9,-2143,[1,"91OfI/VVFMpoaE+j2eX6eQ"],[5,5,5]],[46,1,0,-2144,[1,"f6ZiT+6jZB1If14+6jDNKG"],[4,4294174947],99]],[3,"5eCdLrcLpAaJd/WdEZ5AZN",1,0],[1,93.577,-30.883,0]],[33,"Text_Defeat",33554432,155,[[9,-2145,[1,"569hvmW1xI9Zs768M0kk8t"],[5,231.11,113.4]],[70,".Defeat.",90,90,90,false,-2146,[1,"e6w8v72aRAFYbG0gVkJ3aF"],[4,4281556991],100]],[3,"a5SVco3tlAa4sv9UmVXgnj",1,0]],[33,"Square_Explode",33554432,155,[[9,-2147,[1,"dcYXVYteZLBr3bwcufwK8e"],[5,30,30]],[46,1,0,-2148,[1,"46xqyb4BVGPZiyGrrcZSBj"],[4,4294174947],101]],[3,"43wKVsld1PO4nFYmhu8Dfa",1,0]],[33,"Square_Outline",33554432,155,[[9,-2149,[1,"4axRTIsNdDU62GxM1PsPXq"],[5,38,38]],[46,1,0,-2150,[1,"253aXI+HtIuIiW5TLGaw3m"],[4,4294174947],102]],[3,"0fwO18uOdHnqNLughyJXFU",1,0]],[41,"Panel_Color",33554432,109,[[47,-2151,[1,"27V3kMgipBgYtdlCh/VQdS"],[5,240,80],[0,0,1]],[108,0,-2152,[1,"e6QqHJC2VA9ZE9bYCvwKrA"],103]],[3,"4eAXTL+2RHPaifX7Qzd7hp",1,0],[1,-120,40,0]],[41,"Text_Wave",33554432,90,[[9,-2153,[1,"9e2/FChzlILZgkCJiRWb/+"],[5,97.01,60.48]],[70,"Wave ",48,48,48,false,-2154,[1,"82fB4FNSZIL54I4WINdEg1"],[4,4281532425],108]],[3,"22AI187bdJUJ6J+Dfz8YEB",1,0],[1,-29.35,0,0]],[302,"Reference Image",false,33554432,7,[[9,-2155,[1,"b1hCi8Sq5LK6hKkyO3CR1b"],[5,841,960]],[391,-2156,[1,"ab42Hys9pKqK02umUgT4kL"],110]],[3,"b9EfvjyIpK/6vAVlHgvBCZ",1,0],[1,0.934,0.934,1]],[33,"Text_Clear",33554432,33,[[9,-2157,[1,"d6y01MZh1DwK2sfQRxhFZ3"],[5,184.26,113.4]],[70,"Clear!",90,90,90,false,-2158,[1,"23hwXaSoNL87erpIdbV5QA"],[4,4294174947],112]],[3,"7b7e8SxJFCl6Q1qDhRySxO",1,0]],[41,"Square_Detail 01",33554432,33,[[9,-2159,[1,"53Gn03F/tHp6+9YvpTpi7v"],[5,10,10]],[46,1,0,-2160,[1,"bbRew4+qRPxKKbrsS5llAN"],[4,4294174947],113]],[3,"d61rSCMTRAq5kjpMu6hA2u",1,0],[1,-100,-28,0]],[41,"Square_Detail 02",33554432,33,[[9,-2161,[1,"d3Ahy4oGpLCZ1YXoO8LnoN"],[5,5,5]],[46,1,0,-2162,[1,"5108DC1odDAafVmQ6sRfWX"],[4,4294174947],114]],[3,"22pxLzOFhLWqEP7B3d4kum",1,0],[1,-97.48,-18,0]],[41,"Square_Detail 03",33554432,33,[[9,-2163,[1,"72GWROmOVEg5AT8dchsWTZ"],[5,5,5]],[46,1,0,-2164,[1,"d2aTNQY2RCBZfoTpUSgRdb"],[4,4294174947],115]],[3,"48lkPX6ZtDR4eYueV3yoC9",1,0],[1,-26.26599999999999,16.458999999999946,0]],[41,"Square_Detail 04",33554432,33,[[9,-2165,[1,"17UwhAfwxBVq4Ud7odqRKJ"],[5,8,8]],[46,1,0,-2166,[1,"02cra57HZPmYJJpm7dW7fy"],[4,4294174947],116]],[3,"c0Uc/DQ6BE0by12JhQ38FZ",1,0],[1,32.32,-40.564,0]],[41,"Square_Detail 05",33554432,33,[[9,-2167,[1,"642oOrU/RBj5dLbMKdJnIX"],[5,8,8]],[46,1,0,-2168,[1,"54uKiH+ppOBbwxe47oBnPX"],[4,4294174947],117]],[3,"31xJctj4xK0IY/HXY3tYv5",1,0],[1,47.141,17.264,0]],[41,"Square_Detail 06",33554432,33,[[9,-2169,[1,"38eZoH+7ZLgZo8ry+N6hOt"],[5,4,4]],[46,1,0,-2170,[1,"bfw0byHFZNSZ0Ul1EqBqnA"],[4,4294174947],118]],[3,"15Y0A3E6NN66tonTfdnxNo",1,0],[1,55.693,15.228,0]],[41,"Square_Detail 07",33554432,33,[[9,-2171,[1,"eaUFWQUWVIap1s8cdHOo2P"],[5,5,5]],[46,1,0,-2172,[1,"a1sSezh+dLJbbLxW72dyZ2"],[4,4294174947],119]],[3,"7aY8yAuYFNUYwNdISN+GKU",1,0],[1,93.577,-30.883,0]],[301,"Holder_Defeat",false,33554432,112,[-2174],[[9,-2173,[1,"d8aM7jMbpPLLUw5xf9F19x"],[5,200,100]]],[3,"29GjEWaLdNDKHr8iShBkqt",1,0],[1,0,100,0],[1,1.2,1.2,1]],[33,"Text_Defeat",33554432,476,[[9,-2175,[1,"27SpoT+PFPp4tVNdZ+QNs8"],[5,231.11,113.4]],[70,".Defeat.",90,90,90,false,-2176,[1,"bbcoSeySJFHaTa5E/ljPNZ"],[4,4281556991],120]],[3,"eey2LrWq5PYYXnckexCsGo",1,0]],[53,"Holder_Defeat Panel",33554432,112,[158],[[48,-2177,[1,"26uCa/UvhAeJUQKWvEcdOJ"]]],[3,"3fTW624+JGLqBnzseXi9zo",1,0],[1,0,-44.814,0]],[78,"Icon_Menu",33554432,50,[[9,-2178,[1,"5c0+/xMQdDMI/oXMGSgwf8"],[5,40,40]],[344,false,-2179,[1,"6aYpmQCf1DEbLWOldjtM/3"],[4,4281532425],130]],[3,"53yFgldllLnK03yOMyadgK",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[78,"Icon_PlayAgain",33554432,51,[[9,-2180,[1,"b6rbLNO1xNC63wZeaHngnO"],[5,46,48]],[344,false,-2181,[1,"e5LlMs91JKlaZ8sjnbW5aV"],[4,4281532425],137]],[3,"38lAxgHWBHfqzCDb8yT/Rf",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[41,"Outline",33554432,30,[[9,-2182,[1,"c7MzUUx2VN4YBxHI/lhuMP"],[5,108,108]],[46,1,0,-2183,[1,"65W7vIp6RNkrppGgPAYrgD"],[4,4292928274],143]],[3,"0ckD2HFMtMp6fbdQ5jt9R7",1,0],[1,-6,-6,0]],[85,"Icon_Play",33554432,30,[[9,-2184,[1,"e932D1PyJINpV4pSkknZfb"],[5,48,64]],[212,-2185,[1,"ba3prrwZlG9q+Vg/glxzeV"],[4,4281532425],144]],[3,"4a+1HQ3ldP1IJRQ07XMr+M",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[85,"Text_Shop",33554432,94,[[9,-2186,[1,"dbuk7Z7gBHoKhx7274a7M1"],[5,47.04,50.4]],[466,"Shop",28,28,false,-2187,[1,"7aJyyv3TBItqJectLp1QZy"],[4,4281532425],151]],[3,"c7Y0Q2J0NOQqrVeif9idEl",1,0],[1,2.476,0.275,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[85,"LSquare 01",33554432,53,[[9,-2188,[1,"d0YW7YvLFKJKXUvt0hiQhW"],[5,36,36]],[23,0,-2189,[1,"d2vItGxCZPnLuiApcV51CG"],[4,266127292],157]],[16,null,"aarKgt/3FFX7FY10qAetdq",0],[1,-140.631,-155.68,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 02",33554432,53,[[9,-2190,[1,"75kACSdctKkqn+YTChYLkk"],[5,330,330]],[23,0,-2191,[1,"03z9LfJelBKKPQENOanybr"],[4,266127292],158]],[16,null,"c0Y+hrM+RELouFnPWdnMBM",0],[1,-317.989,-58.783,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 03",33554432,53,[[9,-2192,[1,"47zef+LAlIK5LhBz1MXsZ2"],[5,330,330]],[23,0,-2193,[1,"96ZD6j+6BJspMnZra389nE"],[4,266127292],159]],[16,null,"c9HABdLkVEI6pN57qVCiN0",0],[1,-288.713,-282.661,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 01",33554432,53,[[9,-2194,[1,"06JXdz4SpPHIE2YlZv92CR"],[5,330,330]],[23,0,-2195,[1,"0dzjX0jcFLdYEJ/k8uqjo9"],[4,266127292],160]],[16,null,"aapXT4h4pIGZ/NQYCj1meV",0],[1,344.954,-149.847,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 02",33554432,53,[[9,-2196,[1,"5aH6T6imxFyoNiB70m1QfV"],[5,330,330]],[23,0,-2197,[1,"977z9D0vpIab0ed/YeIEww"],[4,266127292],161]],[16,null,"69s8Af+oVLFo1wzZDpaqjI",0],[1,134.971,-450.239,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Bar",33554432,34,[[9,-2198,[1,"913wbKpuBEzITd1fzDQ9YA"],[5,36,2]],[23,0,-2199,[1,"3dbffEzddE5Yf4feuuNeui"],[4,4292928274],162]],[16,null,"7fqMEykb5ABp+7+IMrSKlF",0],[1,0,-17.107,0]],[85,"Tier Cube 01",33554432,22,[[9,-2200,[1,"d23ij/kLJIJIWAu8+rL57r"],[5,6,6]],[23,0,-2201,[1,"6dx88nUW9PbbqVmSfhtTIz"],[4,1692459794],173]],[16,null,"ccKCOemI1MpKSvXVPO7sQu",0],[1,-6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 02",33554432,22,[[9,-2202,[1,"0f6PsTpqJBirVR01eAB0YZ"],[5,6,6]],[23,0,-2203,[1,"9arYp42INLl7Wf40SusvaV"],[4,1692459794],174]],[16,null,"40D2hZJaJLmIh44e7S/GTB",0],[1,6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 03",33554432,22,[[9,-2204,[1,"604vd5P3dEkq688R7E8QqI"],[5,6,6]],[23,0,-2205,[1,"c1n8U1IRhJGaR31ZHNjc/O"],[4,1692459794],175]],[16,null,"d5L7xjDeFJupCgO9tJdtZa",0],[1,-12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 04",33554432,22,[[9,-2206,[1,"2fD0+3kDRKaaV/xnAsUg4Y"],[5,6,6]],[23,0,-2207,[1,"b7HW/CaaRONpgTupJO7+pn"],[4,1692459794],176]],[16,null,"e1JPPpclJE4owL+6IWOcWA",0],[1,0,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 05",33554432,22,[[9,-2208,[1,"79Xr7GpclE8KVGUNN0Vpru"],[5,6,6]],[23,0,-2209,[1,"0fkMcO/SBM1Ypt4geKhkuQ"],[4,1692459794],177]],[16,null,"adqQgsC41Fu7GOM3d/l9SM",0],[1,12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Divider 01",33554432,117,[[9,-2210,[1,"d3NNG3lqFNi6//7Tqo4Qgu"],[5,280,2]],[23,0,-2211,[1,"1f6vH430xJSZ508pqv7LCT"],[4,1021167806],178]],[16,null,"19I73LlkhFr6KTj6586VA8",0],[1,0,52.94,0]],[41,"Divider 02",33554432,117,[[9,-2212,[1,"dbyFBK6gJNiqbMFetLlrTm"],[5,280,2]],[23,0,-2213,[1,"59mhL+RQ1ELoaxno5E9q5S"],[4,1021167806],179]],[16,null,"30/e+IsyRAtr9pZIlNiV+9",0],[1,0,-58.56,0]],[78,"Select_Fill",33554432,13,[[9,-2214,[1,"abDLPLb9xKu4YC89o0UdHU"],[5,50,50]],[23,0,-2215,[1,"e08/Zh+d1N05VgO56qDlj/"],[4,8912686],181]],[16,null,"acxUe8OblOb4pA3EcX7v8y",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,13,[[9,-2216,[1,"e80QCv+4FIeZn6xouz5NpO"],[5,54,54]],[46,1,0,-2217,[1,"5de3aUUfpFiocy2CPdNKka"],[4,2028004114],182]],[16,null,"5bTXhMKdpOgIK2TZhRvIJh",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,13,[[9,-2218,[1,"dbNPfQ/mtINIMWWu14OUBb"],[5,58,58]],[46,1,0,-2219,[1,"f70Hg9YFtNeKHPoig8txBs"],[4,1021371154],183]],[16,null,"51JXUIC1NIUYX4chA6aK08",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,13,[[9,-2220,[1,"740w6et5FBtLq7NXG6J47h"],[5,24.46,28.98]],[70,"Gun",19,19,23,false,-2221,[1,"c7QCzMHu5LK5l04QMqdckV"],[4,3369912252],184]],[16,null,"c9uP8F3T1A1b5WCR+FvinQ",0],[1,0,3,0]],[78,"Select_Fill",33554432,14,[[9,-2222,[1,"a0zVwtfA1GtZ5SinTcPkFC"],[5,50,50]],[23,0,-2223,[1,"e8AT33NwhPRK1XeWTSw60F"],[4,8912686],188]],[16,null,"0edyml4d9FlIC/CYxyw6LO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Text_Tower",33554432,14,[[9,-2224,[1,"8cn+slrQZF6r0ZkhxoqcQ1"],[5,47.44,28.98]],[70,"Cannon",19,19,23,false,-2225,[1,"43Ab66+AdPiLBYT8WASCQ7"],[4,3369912252],191]],[16,null,"30HbmstvROa74KfgW0kssA",0],[1,0,3,0]],[78,"Select_Fill",33554432,15,[[9,-2226,[1,"ec6mhZBPdLFKnZYaoakHgX"],[5,50,50]],[23,0,-2227,[1,"6aeQST5ddDwacnrd5jybde"],[4,8912686],193]],[16,null,"9ed7kVuHtDI7ISLKdQixuI",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,15,[[9,-2228,[1,"ddiCfpJUhDJ4MFHa1tXBQJ"],[5,54,54]],[46,1,0,-2229,[1,"8dd30VPw1Jf7eyTiviSkjK"],[4,2028004114],194]],[16,null,"0174+tKAhNw7gKkTSb6FXA",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,15,[[9,-2230,[1,"a191RJC0BAXaSZHV7W47qK"],[5,58,58]],[46,1,0,-2231,[1,"abSEBnHTZHfIcLtWgCfjHW"],[4,1021371154],195]],[16,null,"d678vTh/JMl7o+q7FNoDj5",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,15,[[9,-2232,[1,"b68DKHxhBFz6pt2Ouizxhs"],[5,36.64,28.98]],[70,"Laser",19,19,23,false,-2233,[1,"50Cfo19rlAKaVOQfKhbCyG"],[4,3369912252],196]],[16,null,"00WKI/qMFLoKqOp2xdXGs0",0],[1,0,3,0]],[103,"Divider",false,33554432,40,[[9,-2234,[1,"b3+hDRDXlHD4ARQpduBePf"],[5,260,2]],[23,0,-2235,[1,"f4P+BfPN1N65VNuDEibWHl"],[4,1692256446],209]],[16,null,"b0effX2LZPGJTc5O3Kx2ux",0],[1,0,-169.835,0]],[41,"On Enable",33554432,63,[[48,-2236,[1,"6e6UxFD61LmZ9+SM3JNxyi"]],[203,-2237,[1,"edv7pDpRVAIoY521TMpdj9"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",13],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",14],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",15]]]],[16,null,"c6F3PxAZ9HWLBhhsqAPckX",0],[1,0,201.08500000000004,0]],[41,"Text_SubTitle",33554432,168,[[9,-2238,[1,"94s0/xbVxDBr8iLxDYLXId"],[5,40.28,27.72]],[70,"total",26,26,22,false,-2239,[1,"0enviJPytOmJ32TJq0USyk"],[4,4294765656],213]],[16,null,"13dOqkCc1C6rtNPgMn+Tjg",0],[1,-8.421,-21,0]],[41,"Text_SubTitle",33554432,169,[[9,-2240,[1,"fdTxCEKClN8rwV3H8T3sTc"],[5,37.62,27.72]],[70,"rate",26,26,22,false,-2241,[1,"bcfJ8RXcZAqrVP1dglf6mN"],[4,4294765656],223]],[16,null,"85b9ZWHJBGfYKSmncM2FZc",0],[1,2.743,-21,0]],[41,"Text_SubTitle",33554432,170,[[9,-2242,[1,"d1ztpgNqlLaqTwLg+YT0h2"],[5,40.28,27.72]],[70,"total",26,26,22,false,-2243,[1,"e7E2ZtFyhD77RPXSou7nkz"],[4,4294765656],231]],[16,null,"c0VH81coxF8qV44WnZn8ax",0],[1,1.41,-21,0]],[178,"Holder_No",33554432,24,[65],[[9,-2244,[1,"f0/6E/NIpChqvbFONr9JMY"],[5,60,40]]],[3,"23NC+B9PhEkLF96YTcv6Cf",1,0],[1,0,-149,0],[1,0,0,1]],[33,"Outline 01",33554432,65,[[9,-2245,[1,"3aLRiQPLpBZa4Rrywfuf59"],[5,62,46]],[46,1,0,-2246,[1,"f8L/D/9j9Ku71JBhl3hzX7"],[4,2521425664],247]],[3,"86lQK8H0RIPrXbv/psDhhx",1,0]],[33,"Outline 02",33554432,65,[[9,-2247,[1,"301KeprRJO0pjWUu44K9Xx"],[5,68,51]],[46,1,0,-2248,[1,"b9qFRXe5NG7pjU6r8sx829"],[4,1347020544],248]],[3,"5aKs+cHoJIV4ClrRn7D/44",1,0]],[41,"Text_No",33554432,65,[[9,-2249,[1,"1aQWSEZNFHDbSO3AZbMPT1"],[5,51.95,35.28]],[70,"Close",28,28,28,false,-2250,[1,"f7XUh66tRLMqlli3ADRBt8"],[4,4279976969],249]],[3,"02GMZtTSlHCJR0TW8GD5yf",1,0],[1,-0.448,1.157,0]],[85,"Square_Outline",33554432,172,[[9,-2251,[1,"26Mt5FQ09AZ7TJLHQOolSK"],[5,720,720]],[46,1,0,-2252,[1,"76nHWjArpI4rjXKnt+nBNI"],[4,4294174947],262]],[3,"c4pRndqgJNh5P95a+LivmT",1,0],[1,0,230,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[85,"Square_Color",33554432,172,[[9,-2253,[1,"d4y5oRGhhKqLLpW02fKYhw"],[5,720,720]],[108,0,-2254,[1,"3csRl7YNdNjprSoDMDq0Hz"],263]],[3,"8e0S2XptdOG7C1FbVp9ysJ",1,0],[1,0,244,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[224,"Holder_Star01",33554432,66,[56],[[9,-2255,[1,"dedRt420RLa7XZSOu+OML6"],[5,96,96]]],[3,"7amibyu3hAxYAWEdLkinoB",1,0],[1,-108,-15.533,0],[3,0,0,0.5591929034707469,0.8290375725550416],[1,0,0,68]],[33,"Star_Icon",33554432,56,[[9,-2256,[1,"f1V6jzU7xGTI797sN19VtD"],[5,84,84]],[108,0,-2257,[1,"a0kUq7DFZO6qxCSktx4wDc"],264]],[3,"a9euNRbDlJT5Cw1zx+/hUy",1,0]],[363,"Text_%",false,33554432,56,[[9,-2258,[1,"535NW2NTVN7rwy2wS4O+aN"],[5,11.97,25.2]],[70,">1",20,20,20,false,-2259,[1,"eb3dMAurtIQJcCLj3e90E/"],[4,4286215282],265]],[3,"42qb0z1bVFHYCiXjGijT8S",1,0],[1,-54.298,-15.379,0],[3,0,0,-0.6115270401858311,0.79122353296749],[1,0,0,-75.4]],[224,"Holder_Star 02",33554432,66,[67],[[9,-2260,[1,"568bw550BIt6jC4Nahwf7P"],[5,96,96]]],[3,"d7G6RwY/1DD4KCaZLXn6/d",1,0],[1,0,1.392,0],[3,0,0,0.3090169943749474,0.9510565162951535],[1,0,0,36]],[33,"Star_Icon",33554432,67,[[9,-2261,[1,"e1oHXP5pRG3IEky5G5XT5+"],[5,84,84]],[108,0,-2262,[1,"c7tKpMEbhMuLiHBnyPF7++"],269]],[3,"d63ckYv05Oxbhyw/kZxKEc",1,0]],[363,"Text_%",false,33554432,67,[[9,-2263,[1,"169pVQnUpCX68qxVPSo+cC"],[5,16.36,25.2]],[70,">5",20,20,20,false,-2264,[1,"d1nt2zEvJIgb5bLMyDGhHm"],[4,4286215282],270]],[3,"29/UfiUMZMnZI9/1VssNxe",1,0],[1,-43.845,-56.026,0],[3,0,0,-0.3090169943749474,0.9510565162951535],[1,0,0,-36]],[53,"Holder_Star 03",33554432,66,[68],[[9,-2265,[1,"baUtcfGQlFSpcbQALzdi1Z"],[5,96,96]]],[3,"feQHhOz/ZAvLGPQk4IFDwz",1,0],[1,108,-14.376,0]],[33,"Star_Icon",33554432,68,[[9,-2266,[1,"11yrqbJH9IO5t6nVaz7vPk"],[5,84,84]],[108,0,-2267,[1,"f8YqMHET5EtYzpQclEzhMJ"],272]],[3,"8fCseJeUNDVbYT1LnzgmaY",1,0]],[363,"Text_%",false,33554432,68,[[9,-2268,[1,"34aFtaEO1FGreMzzGbj4q4"],[5,21.31,25.2]],[70,">10",20,20,20,false,-2269,[1,"5bWW0UGGBBEa5lw/6Mccpo"],[4,4286215282],273]],[3,"88xNgmY7BNhYZ+MnAzPzk7",1,0],[1,-1.229,-57.292,0],[3,0,0,0.0558215049931638,0.998440764181981],[1,0,0,6.4]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2274,[49,"d7Qi7A1tdH/LTTi6o0sKpj",3,[[11,"Fill Color",["_name"],-2270],[5,["_lpos"],-2271,[1,0,0,0]],[11,"Holder_ShopItemTower",["_name"],329],[5,["_lpos"],329,[1,0,108.968,0]],[5,["_lrot"],329,[3,0,0,0,1]],[5,["_euler"],329,[1,0,0,0]],[11,"No Currency Button",["_name"],-2272],[5,["_lpos"],-2273,[1,-0.5500000000000043,-5,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]],[17,true,["_active"],[2,["80YiVz6qFKN7arm9xbYeRI","1bEwzooBRYiLITAV26DhPq"]]],[17,true,["_active"],[2,["cfzF/Wk51P1JXBk/zJoOFP","a6UoiMmTtU6YsbaNPx5rqf"]]],[17,false,["_active"],[2,["833LM+JjxM6KI5LMQd3zSF"]]]]],278]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2285,[49,"15DJ7jmq1Ae66WkKJeB5w1",3,[[11,"Fill Color",["_name"],-2275],[5,["_lpos"],-2276,[1,0,0,0]],[11,"Holder_ShopItemTower T2 01",["_name"],330],[5,["_lpos"],330,[1,-63,3.9399999999999977,0]],[5,["_lrot"],330,[3,0,0,0,1]],[5,["_euler"],330,[1,0,0,0]],[11,"No Currency Button",["_name"],-2277],[5,["_lpos"],-2278,[1,-0.5500000000000043,-5,0]],[17,false,["_active"],[2,["07KURNz6dMK4PdBiolw5Np"]]],[11,"Icon_Currency Outline",["_name"],-2279],[5,["_lpos"],-2280,[1,-5.85,0,0]],[11,"Text_Cost",["_name"],-2281],[5,["_lpos"],-2282,[1,9,0,0]],[11,"Icon_Currency",["_name"],-2283],[5,["_lpos"],-2284,[1,0,0,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,-26,-21,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]]]],279]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2290,[49,"74FoDqeghE5JvREcQdepbY",3,[[11,"Fill Color",["_name"],-2286],[5,["_lpos"],-2287,[1,0,0,0]],[11,"Holder_ShopItemTower T2 02",["_name"],331],[5,["_lpos"],331,[1,63,3.9399999999999977,0]],[5,["_lrot"],331,[3,0,0,0,1]],[5,["_euler"],331,[1,0,0,0]],[11,"No Currency Button",["_name"],-2288],[5,["_lpos"],-2289,[1,-0.5500000000000043,-5,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,26,-21,0]]]],280]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2293,[49,"08YItQGcBFQpduqVLVCrtO",3,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 01",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,-139,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-2291,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-2292]]],281]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2298,[49,"8aYv3hX5FKB5nbxfplnPh8",3,[[11,"Fill Color",["_name"],-2294],[5,["_lpos"],-2295,[1,0,0,0]],[11,"Holder_ShopItemTower T3 02",["_name"],179],[5,["_lpos"],179,[1,-63,-121.06,0]],[5,["_lrot"],179,[3,0,0,0,1]],[5,["_euler"],179,[1,0,0,0]],[11,"No Currency Button",["_name"],-2296],[5,["_lpos"],-2297,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],179]]],282]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2301,[49,"c4vzRLahNK5pcaIc4/EzI3",3,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 03",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,63,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-2299,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-2300]]],283]],[30,0,{},69,[22,"54x3LC6jNKF6d4tobLj//p",-2306,[49,"78ZYB+NMNHz7TSPoxDnk9O",3,[[11,"Fill Color",["_name"],-2302],[5,["_lpos"],-2303,[1,0,0,0]],[11,"Holder_ShopItemTower T3 04",["_name"],180],[5,["_lpos"],180,[1,139,-121.06,0]],[5,["_lrot"],180,[3,0,0,0,1]],[5,["_euler"],180,[1,0,0,0]],[11,"No Currency Button",["_name"],-2304],[5,["_lpos"],-2305,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],180]]],284]],[78,"Panel_Color",33554432,185,[[9,-2307,[1,"38nkrMUZxNW7lpePLYlfPY"],[5,20,20]],[23,0,-2308,[1,"42sl75qbxDd6V41cUzTWsP"],[4,4282187811],287]],[16,null,"78zLNxkbNHUK7xobqh0a9d",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,187,[[9,-2309,[1,"faj1RDVXlLCKjAYLOVgUlW"],[5,20,20]],[23,0,-2310,[1,"33aeG3zptON6xNT23tglCp"],[4,4282187811],289]],[16,null,"85TvCUA2lEaKUU0uR6WqA/",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,189,[[9,-2311,[1,"98ZatXECFDkqCdOzHgGWui"],[5,20,20]],[23,0,-2312,[1,"55CsWVy79EgKLm0iz2qHy1"],[4,4282187811],291]],[16,null,"bbN9ax7AhPPY6suHkOrMua",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[226,"Art",[-2314],[[210,-2313,[1,"1emyBrfQBAUq0NqzxvMf9B"],[320,321],322]],[16,null,"7cjfgLGpRBPp4beJLjYp7Q",0],[1,0,0.25,0]],[42,"Cannon Tower Model",537,[126,-2315],[16,null,"5bL2xCgF5MwJld1wvGmhz9",0]],[226,"Art",[-2317],[[210,-2316,[1,"6fbc70eANNWp28wZL+5OTh"],[345],346]],[16,null,"0fgA/YYBdC66p+kPHNbzl7",0],[1,0,0.25,0]],[42,"Gun Tower Model",539,[348,-2318],[16,null,"2eB6XlQLRAQoferPO7XwZa",0]],[55,"Muzzles",[-2319,-2320],[16,null,"deNT69sBlJ6piMckjDCRJ2",0]],[273,"Bullet_Muzzle_Flash",512,541,[-2321,-2322],[16,null,"e1H64SQOdPK5ca9COiD9xL",0],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[226,"Art",[-2324],[[210,-2323,[1,"5f3Vp/c05BWKb+rd3WtdNP"],[363],364]],[16,null,"0aYnimvoFHdL3YBaFUXPHZ",0],[1,0,0.25,0]],[324,"Laser Tower",543,[356,-2325],[16,null,"2abxVc3MhB5oEydlBrlWiM",0],[1,0,-0.05,0]],[33,"Panel_Color",33554432,132,[[9,-2326,[1,"1aS/dKVEBDip1wXiO5Nezj"],[5,44,44]],[23,0,-2327,[1,"9ayssUVXlFY6LgyMaImk5y"],[4,4292928274],367]],[16,null,"c8kkB8AltMyp5doXreuKTF",0]],[78,"Outline 02",33554432,133,[[9,-2328,[1,"8exm+CjsRBfZOsu+Kn6HHT"],[5,72,72]],[46,1,0,-2329,[1,"716OaubDhL2I/7WkL5+Ygy"],[4,4281255201],370]],[16,null,"1aYaoXLpJOjaoq9W1Hd2oP",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,133,[[9,-2330,[1,"02siiyh99P7pkHNEuxhva6"],[5,66,66]],[46,1,0,-2331,[1,"e4tS8gx5pLoYWxYhGXQqmG"],[4,4281255201],371]],[16,null,"25not+uKlBTJlN8seu8tpy",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,133,[[9,-2332,[1,"8bKmbyECRAVYugDGwNR/LJ"],[5,60,60]],[212,-2333,[1,"07u4Ko/m9HM7a4PGwdfxaL"],[4,4281255201],372]],[16,null,"b2syh/+0pELbp4sxKtZxgY",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,133,[[9,-2334,[1,"f65OvKTYtOBIRvYyXpc/dG"],[5,24,18]],[108,0,-2335,[1,"56mzPjlGdHiIHxooPFOFAJ"],373]],[16,null,"f0Ku3ruvtPxIFUO/R1/Rrb",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[41,"Text_unlock for",33554432,73,[[9,-2336,[1,"2eJthZwyBGlJU0GUWik0++"],[5,75.67,27.72]],[70,"unlock for",22,22,22,false,-2337,[1,"3fdSH//VZNy6vG6F/K1s+5"],[4,4281532425],374]],[16,null,"e4MAi8uvNMjKsNZa+kw9XZ",0],[1,-37.88,0,0]],[41,"Text_?",33554432,73,[[47,-2338,[1,"06Of+rJ/BDyIkkuFWE8kOD"],[5,12.71,40.32],[0,0,0.5]],[314,"?",2,30,30,32,false,-2339,[1,"912Vx1HGZENa41YuGX/u9H"],[4,4281532425],377]],[16,null,"0fkK7xDxBK6YZkCeXlTi39",0],[1,67.005,0,0]],[33,"Text_unlock for",33554432,213,[[9,-2340,[1,"79b6H/RFhEzZM9my1NAWU6"],[5,117.76,27.72]],[70,"Already bought!",22,22,22,false,-2341,[1,"38slrfDhhFIpAl0qEeT8k3"],[4,4281532425],379]],[16,null,"2dgH+NA9pP6JUiLtAYA68j",0]],[178,"Holder_Yes",33554432,5,[74],[[9,-2342,[1,"01a5NzOHJL6p3d4IMxqkoq"],[5,60,40]]],[16,null,"89ZY/FsSVA+7amd3ytgNIM",0],[1,50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,74,[[9,-2343,[1,"70H07dO/BDGqbaIhMEF/du"],[5,62,46]],[46,1,0,-2344,[1,"d1lXGHIP1PwIqTwEDqPXwB"],[4,2521425664],381]],[16,null,"e9XDGuw0JPUqABngU8dqEx",0]],[33,"Outline 02",33554432,74,[[9,-2345,[1,"54Obts0A5LL6wmQQcbYUEe"],[5,68,51]],[46,1,0,-2346,[1,"e6KMYE1IpEBJDDoqyZFCrH"],[4,1347020544],382]],[16,null,"886bXdN05GaKTi7kGvXbwU",0]],[41,"Text_Yes",33554432,74,[[9,-2347,[1,"98ExqNqkxB45eme06MnzDG"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-2348,[1,"44tBjKsFJNAah+Lpgc8RlE"],[4,4279976969],383]],[16,null,"bfTIeSVgZA3YKahvjMGWcX",0],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,5,[75],[[9,-2349,[1,"e1/Pk25u9DPLxFM8D/jlxZ"],[5,60,40]]],[16,null,"63HMoaxTVEOr7ZC37a/6/C",0],[1,-50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,75,[[9,-2350,[1,"5cVopZRXhDxqN3aMRE2Jja"],[5,62,46]],[46,1,0,-2351,[1,"100gSwCjJLYZAeR7ADC0Qu"],[4,2521694463],387]],[16,null,"cfc1ASTDlFCpX4hjxt0VqK",0]],[33,"Outline 02",33554432,75,[[9,-2352,[1,"4bf5JBsh5AnpX7IVwUDupE"],[5,68,51]],[46,1,0,-2353,[1,"e1L2nAh45Hrot/A1+Jv8hs"],[4,1347289343],388]],[16,null,"60u55ry49C9r23Sqh6KxfV",0]],[41,"Text_No",33554432,75,[[9,-2354,[1,"3fT+r3R5xIrqtjccAdOIug"],[5,24.77,35.28]],[70,"No",28,28,28,false,-2355,[1,"abIMmvbfxP9ooKi1zP6KFk"],[4,4279764543],389]],[16,null,"f0mjCbC39HIax1qR5Dov/H",0],[1,-0.448,1.157,0]],[301,"Holder_Back",false,33554432,5,[76],[[48,-2356,[1,"21o3jiRBpMyYx7ScmKzBwe"]]],[16,null,"00KdnigKJLRJAc9juW9w6z",0],[1,0,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,76,[[9,-2357,[1,"f0d9MJHnhKOJV0WJDZ1+uT"],[5,68,46]],[46,1,0,-2358,[1,"faHmLE93xDbqiLOy1RiT+K"],[4,2531117246],393]],[16,null,"a6nFDtQUtMJIWwtRWOcMbW",0]],[33,"Outline 02",33554432,76,[[9,-2359,[1,"09HC6EvoVGmLUtR5aEYHAF"],[5,74,51]],[46,1,0,-2360,[1,"4eCYVBfXRHmI3PMjjDe2Qp"],[4,1356712126],394]],[16,null,"9ayUEO9/dApJve9ICBpOkW",0]],[41,"Text_Back",33554432,76,[[9,-2361,[1,"9a7DL0laBELKU5b1XQYsW9"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-2362,[1,"15/dnMUsZM44BwzogxB+tO"],[4,4281532425],395]],[16,null,"447OHxuN5Ce4dyzGhVvZVm",0],[1,-0.448,1.157,0]],[41,"Text_01",33554432,134,[[9,-2363,[1,"6fMI9H+uBM3qwVYiC+v57C"],[5,260.41,37.8]],[181,"Not enough Max Energy to build!",24,24,30,false,false,-2364,[1,"9aox0tZ8dNVZoDR1JCVJGf"],[4,4281539080],399]],[16,null,"ecgQTC8jZPeb9pnLU92cnO",0],[1,0,17.459,0]],[41,"Text_02",33554432,134,[[9,-2365,[1,"89qFFbq5ROZazswmcmBidX"],[5,234.5,37.8]],[398,"Upgrade your Max energy first.",22,22,30,false,false,-2366,[1,"35DHBAgJtKdoVQLICWdeu2"],400]],[16,null,"b7/gxtVC9AlZKqvP+tgA/D",0],[1,0,-16.628,0]],[33,"Outline 01",33554432,77,[[9,-2367,[1,"f1MI/dYZdN7rfomcdYwYvk"],[5,68,46]],[46,1,0,-2368,[1,"31z+a5g9FDo4ZPs3sW86ut"],[4,2531117246],402]],[16,null,"fd1LJizwlHPo8Z3yIJHJjs",0]],[33,"Outline 02",33554432,77,[[9,-2369,[1,"c5V/rtmrFObbhgAuqLx+o+"],[5,74,51]],[46,1,0,-2370,[1,"26NMu1QhlNrqCy/oiKd22Q"],[4,1356712126],403]],[16,null,"d3b6ByvPRESYv152Fk3oab",0]],[41,"Text_Back",33554432,77,[[9,-2371,[1,"ddmcVlU3dPVYou0KmAziPL"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-2372,[1,"b0ZL8ucFpJbILZAfH1wM0Z"],[4,4281532425],404]],[16,null,"01Ss8umn9IhaRTKbyl6Cee",0],[1,-0.448,1.157,0]],[78,"Outline 02",33554432,137,[[9,-2373,[1,"961AcUtTdJpbLuOYn0+ep+"],[5,72,72]],[46,1,0,-2374,[1,"f0mQc7eZpC652ro/gz5oo1"],[4,4281255201],425]],[16,null,"ebRLvSPZxMsZFheg7UOP9m",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,137,[[9,-2375,[1,"2ez2lkVudLT4YcPaof5X4l"],[5,66,66]],[46,1,0,-2376,[1,"a4vp2q9/NIL44uwuXrf67C"],[4,4281255201],426]],[16,null,"4byw2RfqFE0KQLsuUPznqO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,137,[[9,-2377,[1,"c33kXo7WRERJYUifSaSmnT"],[5,60,60]],[212,-2378,[1,"49hKL+vKpAOZ85aGWTQMEB"],[4,4281255201],427]],[16,null,"318FaHo6FPiIBxO7WNjoYU",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,137,[[9,-2379,[1,"acn7sEqsxAEpw+c8pZFlng"],[5,24,18]],[108,0,-2380,[1,"25h2VFqxlCfZDpUhnejj6k"],428]],[16,null,"51qBNy77xOY6J8hH4d+9v2",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[41,"Text_unlock for",33554432,79,[[9,-2381,[1,"efa8eUF+RGyJJpud+Bmrlk"],[5,75.67,27.72]],[70,"unlock for",22,22,22,false,-2382,[1,"e0XAkquPxHT7Utg1vW52Dn"],[4,4281532425],429]],[16,null,"83OAw0A0VBdodkbsUpcPQM",0],[1,-39.88,0,0]],[41,"Text_?",33554432,79,[[47,-2383,[1,"a2Yu08lbdI9Zu8AZXePOcF"],[5,12.71,40.32],[0,0,0.5]],[314,"?",2,30,30,32,false,-2384,[1,"010hvp0HNLN7G6I7p/yJfs"],[4,4281532425],432]],[16,null,"15iagm1ylLWZvvTTIqluTN",0],[1,65.005,0,0]],[178,"Holder_Yes",33554432,10,[80],[[9,-2385,[1,"86M2+q35JGxresWB20xAGb"],[5,60,40]]],[16,null,"acxYtBhZxMq5Lr40CFAPw5",0],[1,50,-125.599,0],[1,0,0,1]],[33,"Outline 01",33554432,80,[[9,-2386,[1,"8199syCnFDWb2eAERt4XaX"],[5,62,46]],[46,1,0,-2387,[1,"89gY5fT5BF66GSNt0BiCHj"],[4,2521425664],434]],[16,null,"89HVjEP3dEr7yMg88DowKF",0]],[33,"Outline 02",33554432,80,[[9,-2388,[1,"cbU1Ltoe5OI7sjeVOa6cuI"],[5,68,51]],[46,1,0,-2389,[1,"9besbSceJPe5slXWtKMNoe"],[4,1347020544],435]],[16,null,"593a2NW7lAM53sUOA3Dd02",0]],[41,"Text_Yes",33554432,80,[[9,-2390,[1,"d9HYPVttdNgIjwfj101HQE"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-2391,[1,"8805Xtb2JMcLxHc/cBoaBV"],[4,4279976969],436]],[16,null,"9cVwd1RA5OcJ1eLjFAECkV",0],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,10,[81],[[9,-2392,[1,"e0yI4hnX9MT40L2q6cGaaD"],[5,60,40]]],[16,null,"27zuu12PBOoIBJbJU4hu9u",0],[1,-50,-125.599,0],[1,0,0,1]],[33,"Outline 01",33554432,81,[[9,-2393,[1,"15i/vKLsZDO6sgZcHo+zso"],[5,62,46]],[46,1,0,-2394,[1,"b9KGGUajZEY7SWqp5gdmj6"],[4,2521694463],440]],[16,null,"26JyY4ZHVMa6BgOJK25bdA",0]],[33,"Outline 02",33554432,81,[[9,-2395,[1,"1e/+uYeNdCtL2uQaYUK16y"],[5,68,51]],[46,1,0,-2396,[1,"14Osz76hVF3J7Z4IIkWo9z"],[4,1347289343],441]],[16,null,"52azU+3qBBFKDx6OyeF0Eg",0]],[41,"Text_No",33554432,81,[[9,-2397,[1,"35rkSsE79DF5hOUzii1nko"],[5,24.77,35.28]],[70,"No",28,28,28,false,-2398,[1,"02vN2UokNAZq3GU2wLQO4M"],[4,4279764543],442]],[16,null,"07CZoqRTZHZqXxX5Fz10pY",0],[1,-0.448,1.157,0]],[178,"Holder_Yes",33554432,19,[35],[[9,-2399,[1,"42kSgf4rZFa6cxHC8a++4o"],[5,60,40]]],[16,null,"9ezBAUgXhH0pZwSPoSNEk/",0],[1,50,-67.838,0],[1,0,0,1]],[78,"Outline 02",33554432,140,[[9,-2400,[1,"c0TFciSOFDlodu0jSO6NGt"],[5,72,72]],[46,1,0,-2401,[1,"43MCAoIqpHrpQTifwsS2Iz"],[4,4281255201],459]],[16,null,"77ErH5pR5NnLHl5oNOv2xH",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,140,[[9,-2402,[1,"bcuCGcvvtFc4AtVYIz6qqt"],[5,66,66]],[46,1,0,-2403,[1,"1aaj2L1OFPRrfP5hr4QiNT"],[4,4281255201],460]],[16,null,"46jgsR0PtE6KWmW5M1zHEk",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,140,[[9,-2404,[1,"0aFi2rtolGrLTHkvI3DhrL"],[5,60,60]],[212,-2405,[1,"febs11Fg9EYofaDX1W5KqO"],[4,4281255201],461]],[16,null,"97B0bjWjZMTJLpPlMSu1+6",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,140,[[9,-2406,[1,"e7dD3dWsFPhJkSfEKnHlJp"],[5,24,18]],[108,0,-2407,[1,"47xGBJFc9F24Na0txk0ocb"],462]],[16,null,"d541NifstFDJI7mcvFl3aU",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[178,"Holder_No",33554432,19,[44],[[9,-2408,[1,"29BZIK81RHZY/sCLSYgyad"],[5,60,40]]],[16,null,"51CDatF0lCr5LYmYwCinHg",0],[1,-50,-67.838,0],[1,0,0,1]],[33,"Outline 01",33554432,44,[[9,-2409,[1,"d6x+1e5lhJ24QB2pOVt9hN"],[5,62,46]],[46,1,0,-2410,[1,"80Y96BwhZIYJPW5AZB5Yky"],[4,2521694463],463]],[16,null,"78cq0RB7xGfpmbGpyig4TG",0]],[33,"Outline 02",33554432,44,[[9,-2411,[1,"c2yocJRydCe4hi2O213how"],[5,68,51]],[46,1,0,-2412,[1,"0dCQCkMNBPa4gg2ur2b/IJ"],[4,1347289343],464]],[16,null,"1e5qcFfH9HrqAMC/zxRdAe",0]],[41,"Text_No",33554432,44,[[9,-2413,[1,"894alU7vlJNrC3XGlZBJeq"],[5,24.77,35.28]],[70,"No",28,28,28,false,-2414,[1,"31ws1h0U9N+b6g3oP9I9KI"],[4,4279764543],465]],[16,null,"0aRdPIJnhMuJvsyhMLCC4U",0],[1,-0.448,1.157,0]],[33,"Outline 01",33554432,35,[[9,-2415,[1,"f9sa9WvDBGe4uSOyecY6Ya"],[5,62,46]],[46,1,0,-2416,[1,"e97u/iyT1DGZHTwrtRWxEQ"],[4,2521425664],473]],[16,null,"6e6Sg1NwNL4br2wx7NILgq",0]],[33,"Outline 02",33554432,35,[[9,-2417,[1,"5b+3r/KA1Fka+lwkB2m4L9"],[5,68,51]],[46,1,0,-2418,[1,"58olRWD7dIeKW69RRuLMp1"],[4,1347020544],474]],[16,null,"caAijO8p1BL6Q7A9ZmaqwM",0]],[41,"Text_Yes",33554432,35,[[9,-2419,[1,"0cBNZGsuRGzZZfEUeWvHez"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-2420,[1,"87dWjO+LJLxr0G21S1gbEA"],[4,4279976969],475]],[16,null,"80AYtZ98NPnY+QkMAvaMZU",0],[1,-0.448,1.157,0]],[33,"Panel_Color",33554432,11,[[9,-2421,[1,"c4uT4fExxMR7NHUeUd9aSC"],[5,60,60]],[23,0,-2422,[1,"efRRf8nQRErKgKhWAJEIep"],[4,4292928274],479]],[16,null,"b6ewoDHdpMhL4Obw+bqunF",0]],[33,"Select_Fill",33554432,11,[[9,-2423,[1,"13F5IVq4xNFZx1amiaQBCK"],[5,60,60]],[23,0,-2424,[1,"b827vLpXtBMJ9KSMlqKD9p"],[4,8912686],480]],[16,null,"65X3RAmRVFtqC0Vw/Dfsfb",0]],[33,"Outline 01",33554432,11,[[9,-2425,[1,"9bRBEc8dBC26F7K0RGlPYU"],[5,66,66]],[46,1,0,-2426,[1,"b8G9MsGa1OdojG291gasG1"],[4,2028004114],481]],[16,null,"feHga0yWVKf6asO70sEFoh",0]],[33,"Outline 02",33554432,11,[[9,-2427,[1,"4ax78aQKZPtbS8gBeMW+tI"],[5,72,72]],[46,1,0,-2428,[1,"66stK1r/BGmI0I//+P+iy3"],[4,1021371154],482]],[16,null,"70KJ95lZxCAqyoUuZX03Mx",0]],[103,"Text_Tab-001",false,33554432,380,[[9,-2429,[1,"9b/BxnXIZH967K+pr7QveV"],[5,23.58,17.64]],[70,"Cube",14,14,14,false,-2430,[1,"2emXHGLn5O3pZJLSU/1VId"],[4,4292659132],483]],[16,null,"a7uFPMFN9LUqmHfJrPyyNf",0],[1,0,12.188,0]],[33,"On Enable",33554432,11,[[48,-2431,[1,"ea494IxSJAf5m7ISf8pNXV"]],[203,-2432,[1,"69K4AS+EFMuIAihcHvv00c"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",11]]]],[16,null,"ddiStGBCRK6brSSgFSiJ1/",0]],[41,"Text_Tab-001",33554432,381,[[9,-2433,[1,"79iaLMLlZJHI2mIh312pT8"],[5,23.58,17.64]],[70,"Cube",14,14,14,false,-2434,[1,"d5AWqx31dPq5bojSYLuPtt"],[4,4292659132],485]],[16,null,"38+ZWtFk5MepZBEp1KNirX",0],[1,0,12.188,0]],[33,"Panel_Color",33554432,12,[[9,-2435,[1,"86sW1W+MlElbJloF8fZ275"],[5,60,60]],[23,0,-2436,[1,"49BrSYGitAtZryVPiq7Gcz"],[4,4292928274],489]],[16,null,"a1R9WPAclIVLv8YPyoietP",0]],[33,"Select_Fill",33554432,12,[[9,-2437,[1,"a8dkAgGMRKCZEuZGFhqVSW"],[5,60,60]],[23,0,-2438,[1,"00HoVx4UVMPof7wit/2Sj5"],[4,8912686],490]],[16,null,"59+3UYuw9NP7FLH0QGNWQQ",0]],[33,"Outline 01",33554432,12,[[9,-2439,[1,"95pXuWUEhJ/byf3/iA5w6s"],[5,66,66]],[46,1,0,-2440,[1,"e7tcjeYlhPOrh63KNzGbU1"],[4,2028004114],491]],[16,null,"77AHlzL0NBV6+17/MUs6sU",0]],[33,"Outline 02",33554432,12,[[9,-2441,[1,"dcS7aFKJ9EIKPw1/XJuUQb"],[5,72,72]],[46,1,0,-2442,[1,"37t2/91wVGBLmQI8u9R5pL"],[4,1021371154],492]],[16,null,"9fUZerXERLu4RykjQlBXqF",0]],[103,"Text_Tab-001",false,33554432,382,[[9,-2443,[1,"feHBmazFBC3rcQ/CpfCDXH"],[5,29.58,17.64]],[70,"Tower",14,14,14,false,-2444,[1,"2fpG/HfuhFCppHPnFEvZFJ"],[4,4292659132],493]],[16,null,"eaNJw4a/JLPqCvXVAY1m89",0],[1,0,12.188,0]],[33,"On Enable",33554432,12,[[48,-2445,[1,"5fa1/0kXVEL4h04Cbz6B27"]],[203,-2446,[1,"9b8Ei9YPZFgISFJJURHjFq"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",12]]]],[16,null,"e2RT42HmBMmYKfMYgRtB4A",0]],[41,"Text_Tab-001",33554432,383,[[9,-2447,[1,"90Kpeen0FKk75xxYbE0VIP"],[5,29.58,17.64]],[70,"Tower",14,14,14,false,-2448,[1,"7dRB0MjjdJTY/oXrcva+u1"],[4,4292659132],495]],[16,null,"efJ4ucu15Fjq/3xz763zNf",0],[1,0,12.188,0]],[78,"Icon_Back",33554432,141,[[9,-2449,[1,"ff5h51nqBNbYJgYmlBK3aV"],[5,20,20]],[23,0,-2450,[1,"fbngMu0nNMFYJgw19TWjct"],[4,4281532425],497]],[16,null,"15JA6vwHJDKqrmm4l4M5J9",0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[83,"Rewards",33554432,28,[221],[[48,-2451,[1,"42QbcOZ0lCdar+VP97a8Ft"]]],[3,"6eVL61KN1M6YK1tpccm+1F",1,0]],[83,"Ads",33554432,28,[-2453],[[48,-2452,[1,"6fndjF5CVJ1LWnL8ezWRXA"]]],[3,"dcQOj0hCRIZLuwL8skKmJO",1,0]],[33,"Ads UI",33554432,612,[[48,-2454,[1,"5dTu+ZGhZDr4zklIxsWvgn"]],[612,-2456,[1,"8bWSeF6uJOiL0K6y7+XIT9"],-2455,31]],[3,"ccW7XrcjRMjJ8cHAjlrlBc",1,0]],[53,"Holder_Yes",33554432,142,[83],[[9,-2457,[1,"d5oD1LHa5PoLpqea1BcFnK"],[5,60,40]]],[3,"7awyEUzaxIVp/TGndMg7qG",1,0],[1,50,-87.204,0]],[53,"Holder_No",33554432,142,[45],[[9,-2458,[1,"75O5ve25hBYbpEKrncsFnH"],[5,60,40]]],[3,"8ao+LGOoNGqKJ5zPLeAQK6",1,0],[1,-70,-87.204,0]],[33,"Outline 01",33554432,45,[[9,-2459,[1,"59JUqDyMdG9ZAHswkBCi07"],[5,62,46]],[46,1,0,-2460,[1,"3df0350bVHGa0XdD+PkP6I"],[4,2521694463],509]],[3,"730cmC6b1LyZJS7LhWLuyO",1,0]],[33,"Outline 02",33554432,45,[[9,-2461,[1,"110EKRIB5ATra6jOKuN+Cv"],[5,68,51]],[46,1,0,-2462,[1,"e3rcCJ0wBAC6Pi9eZ+tolv"],[4,1347289343],510]],[3,"4f1L68mVhMS5Qy7yEle1M1",1,0]],[41,"Text_No",33554432,45,[[9,-2463,[1,"46t9Idhg5BqoOSxBgojn6X"],[5,24.77,35.28]],[70,"No",28,28,28,false,-2464,[1,"eev9x29sVJHLR6eq91uZiG"],[4,4279764543],511]],[3,"99lEo0x6dLlrP25KF54WCM",1,0],[1,-0.448,1.157,0]],[33,"Outline 01",33554432,83,[[9,-2465,[1,"baMwizmfJDWJ7jHumGeTN5"],[5,118,46]],[46,1,0,-2466,[1,"8eje7++zhEZpE3FyQsgCNd"],[4,2521425664],516]],[3,"20GEbGv7JBf4m8GNksgM3T",1,0]],[33,"Outline 02",33554432,83,[[9,-2467,[1,"5dFrVas0JB5az0vOHBOgf4"],[5,123,51]],[46,1,0,-2468,[1,"79/A9nDQ9JvJ6VxKtCh/2Z"],[4,1347020544],517]],[3,"09OAYL4odAg6Tv2cbnwfxr",1,0]],[41,"Text_Yes",33554432,83,[[9,-2469,[1,"cbBnAEBMVKwql9KUuM614K"],[5,93.38,35.28]],[70,"Watch ad!",28,28,28,false,-2470,[1,"26Rt5m8ZlB5b1Neos2jTAC"],[4,4279976969],518]],[3,"f5SgpE4XtH2rmSb2lBxtic",1,0],[1,-0.448,1.157,0]],[33,"Outline 01",33554432,393,[[9,-2471,[1,"adujPXcfdGaKfPpDBd17UV"],[5,50,36]],[46,1,0,-2472,[1,"a0lO6WqZ1F96bbCX9lMQPV"],[4,1693706467],522]],[3,"de+7ehB+lEPL14d+NlgL8d",1,0]],[33,"Outline 02",33554432,393,[[9,-2473,[1,"b47VCM+iVCkpzsIQpKXPYh"],[5,54,40]],[392,1,0,false,-2474,[1,"bcGOQ31u5CVLDfPL6STRS8"],[4,1022617827],523]],[3,"89quMykB9AFIyP7jnqXPSk",1,0]],[33,"Color",33554432,31,[[9,-2475,[1,"46+mdLXShHR6eDt69YZASv"],[5,46,32]],[23,0,-2476,[1,"3bZs5r5PxNca67ZJVEpF6o"],[4,4292928274],524]],[3,"cbL8N2xNJJqoBUAyMoiNqW",1,0]],[33,"Edge White",33554432,31,[[9,-2477,[1,"73h1qEPyNCdqKh15xtVEC5"],[5,46,32]],[46,1,0,-2478,[1,"86dONd59ZKYoEpaxw4kPF4"],[4,4294174947],525]],[3,"f0yTfRTzFPR6r/vvnCfxfU",1,0]],[169,"Icon_Ad",33554432,31,[[9,-2479,[1,"5cu12Ln/1Lzp4B6H4GROmY"],[5,44,68]],[23,0,-2480,[1,"81+42BGVFOurWdhrxtB9NS"],[4,4281532425],526]],[3,"16NaybWPhA8Lg7fxsca6q+",1,0],[1,0.815,-0.136,0],[1,0.3,0.3,1]],[85,"Snow 01",33554432,58,[[9,-2481,[1,"b570WhWJBHrKLQu9QCq6u7"],[5,16,16]],[108,0,-2482,[1,"77UcP8oXdGq7o0jM+HQnOV"],527]],[3,"4bPoQqFVpC9K/jgia23Lgl",1,0],[1,19.651,12.376,0],[3,0,0,-0.08715574274765817,0.9961946980917455],[1,0,0,-10]],[41,"Snow 02",33554432,58,[[9,-2483,[1,"48Og0B4gVB95TvsN7RAlsN"],[5,15,15]],[108,0,-2484,[1,"f4XofCcIBCPa+REYWR3rHP"],528]],[3,"2bbq0ZJOZFXJi1q1G+36kv",1,0],[1,-10,13.803,0]],[41,"Snow 03",33554432,58,[[9,-2485,[1,"75KVkaEpNEiqro4h2u36rw"],[5,12,12]],[108,0,-2486,[1,"b3VKXxosVBMoiLPx6wOnxe"],529]],[3,"c92dvmPKVHErzVZL7iLDd2",1,0],[1,-22.808,6.966,0]],[41,"Snow 04",33554432,58,[[9,-2487,[1,"46jszHTrNO/qwqqPQYZmjB"],[5,6,6]],[108,0,-2488,[1,"4a1HGcBq5PCYc72VR2t45r"],530]],[3,"d6uStvyO9J26nl52xIQrl8",1,0],[1,-22.477,-8.99,0]],[41,"Snow 05",33554432,58,[[9,-2489,[1,"cbnTPX2r9FJa868ugEKThW"],[5,8,8]],[108,0,-2490,[1,"07y4Iw/alF84AVcCjFtuTM"],531]],[3,"e1mTdN9h1PSJ6u1zK1CCKq",1,0],[1,-16.477,-12.415,0]],[41,"Snow 06",33554432,58,[[9,-2491,[1,"12qqA4LHFDh7vf9RwDfMAt"],[5,6,6]],[108,0,-2492,[1,"97UaizxAVMF6AyQ4Kze4NI"],532]],[3,"8fwgz4Q6hBD4nHmc3joft1",1,0],[1,22.242,-14.774,0]],[41,"Snow 07",33554432,58,[[9,-2493,[1,"58yP6zlBlKtKXO4F8xSIqs"],[5,8,8]],[108,0,-2494,[1,"f0OuAOpT5L55sdb4DJeFXa"],533]],[3,"47VrRB4fZPkZnCdjjHZ0Uk",1,0],[1,17.202,-8.473,0]],[33,"Last Level Checker",33554432,28,[[48,-2495,[1,"b9izg1FZ5AB5fFevqgU4kV"]],[613,-2496,[1,"674zXk8LlK15z0nv6hmHGl"],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",30],[8,"99672sUg5NFw4x7bEPAiyHE","activate",224]]]],[3,"260X/2hRRMkoRgmIeuF1t+",1,0]],[33,"Update Cube Tower HP Listener",33554432,396,[[48,-2497,[1,"cfL+UyopNI+olJ3IWT49qb"]],[316,1,-2498,[1,"76mmwkogRCapI2Nkx6uNQa"],[[8,"2e422rMyxhPNoAP/9tU8bNO","animateCubeTowerHP",87]]]],[3,"08f7qOFsRHoYbNWT40AA4S",1,0]],[33,"Set Cube Tower HP Listener",33554432,396,[[48,-2499,[1,"aeXKxRNlxMwYxzy338Ilsc"]],[316,2,-2500,[1,"48Ur7vYM5KtJmcHl745Rap"],[[8,"2e422rMyxhPNoAP/9tU8bNO","setCubeTowerHP",87]]]],[3,"e38J0ZWhtEZ4DJmNBUa+6P",1,0]],[33,"On Wave Start",33554432,397,[[48,-2501,[1,"b0Wsv4/npOi6eR/F88SDfY"]],[468,1,-2502,[1,"6e6GTMI7BFeLZacDSQRWyp"],[[8,"bf1ee1D121LrYfqbYo8LfSs","setCurrentWaveValue",264],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","showWave",8]]]],[3,"9fSubkS7xLnIsWPeRVNrrV",1,0]],[83,"Energy",33554432,46,[-2504],[[48,-2503,[1,"3d/G8lTu9DEaKFFDjIWyuD"]]],[3,"934SfSvz5DFpd5IJIO8lwZ",1,0]],[33,"Energy Values Changed Listener",33554432,638,[[48,-2505,[1,"f1MqtyiuhOI4v21KugElgR"]],[617,1,-2506,[1,"4b5uJFKtNBVrc/LNeKr6Id"],[[8,"826172kECFGjq4DVDVtJUzR","setEnergyData",268]]]],[3,"eeC+cOUPtMOa3oULfBE2vk",1,0]],[83,"Loading",33554432,46,[-2508],[[48,-2507,[1,"c0B3tgzKtE1pXgSr+wq7oe"]]],[3,"10TIs6m4dHhJOAvVVxecWP",1,0]],[33,"Hide Finished",33554432,640,[[48,-2509,[1,"6206nMvstLKbqAUCTu/tTD"]],[618,3,-2510,[1,"c2zthsLzNPeaDuIkfXH+o5"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,true",9]]]],[3,"b0hBlaqY9DPqa9wWKdV7v2",1,0]],[33,"Level Completed Stars",33554432,46,[[48,-2511,[1,"b0+libQ35GQqDOrhUcTXHT"]],[619,1,-2512,[1,"6exXGZVkpJLa0FqUE0c/uK"],[[8,"48f99m4mrhOfJj9PX5MTE9r","setLevelStars",221]]]],[3,"51EOzJJ59CZaj7t/Sc0EHm",1,0]],[33,"On Freeze Start",33554432,399,[[48,-2513,[1,"f3lSgm+p1IBb4Eo+uH2rWp"]],[352,"FreezeEnemiesStart",-2515,[1,"7dbA3hethJEZpxGG+8m6AB"],[[8,"1eddcq+dFJL6Kd35j8xBAOw","play",-2514]]]],[3,"51xvMoaTZDUIUOVSCMDPuO",1,0]],[33,"FadeIn",33554432,47,[[620,13,true,-2516,[1,"f8+6EQwkdIMZMKI1atsOax"],47,[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isPlaying,true",59]]]],[3,"8eUetZpEtFgac/yTZv3YTL",1,0]],[33,"FadeOut",33554432,47,[[621,13,true,-2517,[1,"398TTLPmpGsZgPjxbJnjAE"],47]],[3,"3eDwQw0PBHTY1J2dOdN4eI",1,0]],[33,"On Freeze End",33554432,399,[[48,-2518,[1,"d811zE0PRIT5absQUMXIfT"]],[352,"FreezeEnemiesEnd",-2519,[1,"411uKzs/FKrJ9RMzB7Flic"],[[8,"1eddcq+dFJL6Kd35j8xBAOw","playReverse",645],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isPlaying,false",59]]]],[3,"88fD9+Iv1E6aKjw24VNJor",1,0]],[83,"Currency",33554432,46,[-2521],[[48,-2520,[1,"d0ITkUoKhMfrxm7tCqP8OU"]]],[3,"6btzHltSpLEJxBXUoKteGc",1,0]],[33,"On Currency Changed",33554432,647,[[48,-2522,[1,"35lrjSYsxCX73uPOn64G5X"]],[626,1,-2523,[1,"67k1ppLABOPoJk2dBLWP+n"],[[8,"f6b09ehRv5GY5ZX2VxS2Sj1","getCurrency",175]]]],[3,"02gefkMwJNZ5LHb9+X/aqD",1,0]],[33,"On Defeat Listener",33554432,395,[[48,-2524,[1,"8dNU7UJrJK4r8uHqi+CUqY"]],[375,0.5,4,-2525,[1,"1b954v2h1F0qForIAKqVyu"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","defeat",8],[34,"48f99m4mrhOfJj9PX5MTE9r","setLevelStars","0",221],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",30]]]],[3,"2eC20sZHtDpZ/wqZ+jxNlL",1,0]],[41,"Outline",33554432,32,[[9,-2526,[1,"0a6TK26lFN370moKWWKVT3"],[5,108,108]],[46,1,0,-2527,[1,"12dNSJwU9GPZZsvDgxnBhd"],[4,4292928274],544]],[3,"e70QIFnfVLwL0q99sASGSN",1,0],[1,-6,-6,0]],[85,"Icon_Play",33554432,32,[[9,-2528,[1,"73GABEU09LL64hBfRh6JJS"],[5,48,64]],[212,-2529,[1,"64Z4sf0ApEWasYU0MbP4M5"],[4,4281532425],545]],[3,"40ixQ6LspKG7FzW/tZU5mX",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[78,"Icon_Menu",33554432,36,[[9,-2530,[1,"24K1r3K39DLJD2OBMjIFrc"],[5,40,40]],[344,false,-2531,[1,"06kUVyxstKlaPegDQCF8OA"],[4,4281532425],552]],[3,"daLFda4J1NsLPVRLVxMb3F",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[78,"Icon_PlayAgain",33554432,48,[[9,-2532,[1,"e61c/bSj9DCKftlYxLOtAY"],[5,46,48]],[344,false,-2533,[1,"2ahyekERZOPr5DcfFda38w"],[4,4281532425],559]],[3,"20S/Yg+XVE4ol5Wx6iH271",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[41,"BotPanel",33554432,9,[[9,-2534,[1,"83I7RExM9ICZyucmNc5kTZ"],[5,414,100]],[293,44,100,1,-2535,[1,"a62j+XOcpA8YxOCJ2gdpxc"]]],[3,"738isYwCdIQIlnsZPLtJRG",1,0],[1,0,-398,0]],[33,"Outline 01",33554432,405,[[9,-2536,[1,"bdptdTAuNIhbTDDqqzBtyu"],[5,50,36]],[46,1,0,-2537,[1,"abZGz6t9VOfqSzq7r0qb3f"],[4,1693706467],567]],[3,"61ahCfqERDyK2p+gbDwyX9",1,0]],[33,"Outline 02",33554432,405,[[9,-2538,[1,"4aHmMVxOxD2aVKnF001kE4"],[5,54,40]],[392,1,0,false,-2539,[1,"71M8M+4PpF7ZwGBpFSNg5W"],[4,1022617827],568]],[3,"75q9Oj469NJrrnGfYarsfJ",1,0]],[159,"Edge Color",false,33554432,37,[[9,-2540,[1,"6bbZpBwfFF+LFRYCEy7moE"],[5,68,34]],[23,0,-2541,[1,"9eReLciotNxr7NY8K6RdEP"],[4,4281532425],569]],[3,"87sgS8ZNBNM7bWWdvmg1rS",1,0]],[33,"Color",33554432,37,[[9,-2542,[1,"9f/hxKbR9HF4oV7lZYaPnp"],[5,46,32]],[23,0,-2543,[1,"63UKSvJC9DXL3OZTisSw2P"],[4,4292928274],570]],[3,"35IMB/BgxDuqW5PmIQmiY3",1,0]],[33,"Edge White",33554432,37,[[9,-2544,[1,"bfZ1du1zZGa61m1uL7o9+7"],[5,46,32]],[46,1,0,-2545,[1,"44GkWo8eJI24enfKXSVq2t"],[4,4294174947],571]],[3,"3aSPxHoapPyY4ZYe1CDYaT",1,0]],[33,"Icon_Ad",33554432,37,[[9,-2546,[1,"b7+HTKIxVIpY3ubMMk8fjK"],[5,44,30]],[23,0,-2547,[1,"ffHz4cQUNAZZi+JjHvlVSb"],[4,4281532425],572]],[3,"6dezga5MhCNLcGRLmUg0si",1,0]],[33,"Outline 01",33554432,407,[[9,-2548,[1,"a4/jfbLcNAaYTVsM+ujLzJ"],[5,50,36]],[46,1,0,-2549,[1,"6fv2u+UgJDBKgS2HhJdxxy"],[4,1693706467],575]],[3,"b8AZ4W6lpPZqI+yh8tb16x",1,0]],[33,"Outline 02",33554432,407,[[9,-2550,[1,"69Hdhc4R5L86Ljg2WdbJRk"],[5,54,40]],[392,1,0,false,-2551,[1,"5eWyqHENhBG491BrAEKLtM"],[4,1022617827],576]],[3,"e41DS0jwdAJYob+ZP8ZkS4",1,0]],[33,"Color",33554432,49,[[9,-2552,[1,"b6SwI2lD9Hp6wABc/kqK/E"],[5,46,32]],[23,0,-2553,[1,"dex4Hv+SxGwo+vrEqK/94l"],[4,4292928274],577]],[3,"91xqjxKv1CvYTL+zCYCr0G",1,0]],[33,"Edge White",33554432,49,[[9,-2554,[1,"faIGjjv9hLM707TDspd0MH"],[5,46,32]],[46,1,0,-2555,[1,"abE+RBnedBxYFn6oURZGBd"],[4,4294174947],578]],[3,"14FMlfdWpMWZKeNXMz/yos",1,0]],[33,"Icon_Ad",33554432,49,[[9,-2556,[1,"a9hSqXK7JG5bja3cMcwXRk"],[5,44,30]],[23,0,-2557,[1,"4eYvKIQoJCB6Ci7RuauUtd"],[4,4281532425],579]],[3,"d8lhYOwahIa7gwlCQlJypX",1,0]],[33,"Outline 01",33554432,408,[[9,-2558,[1,"f7bKNNP3RBSaWmkNJMKQwG"],[5,37,37]],[46,1,0,-2559,[1,"0fPW04729BsY7DPtcwMsSz"],[4,1694498815],582]],[3,"6bhsPSGi5CSrXvAxtT4BNJ",1,0]],[33,"Outline 02",33554432,408,[[9,-2560,[1,"4f2g2ZyMNInoIag/JWnCaF"],[5,41,41]],[46,1,0,-2561,[1,"156l+nRrVPN7RSnsbft6ba"],[4,1023410175],583]],[3,"63tWjjs/1PapD24+5YsJ21",1,0]],[33,"Edge White",33554432,16,[[9,-2562,[1,"521WfJwydP9pbCLz5reVkC"],[5,32,32]],[263,1,0,-2563,[1,"81Ab1AwsBNELRUHLEb9l+s"],585]],[3,"b52qyl/AFBcZCmegcPjtC7",1,0]],[41,"Icon_SpeedUp",33554432,16,[[9,-2564,[1,"8cDDaWn0hLma1EANXelMvF"],[5,16,20]],[23,0,-2565,[1,"fdzYZi52NB34GMpOo7y9Ns"],[4,4292724926],586]],[3,"5d6j4n4mBCQpzSerYvNOAh",1,0],[1,0.955,-0.019,0]],[33,"Outline 01",33554432,410,[[9,-2566,[1,"a3cupFBmpDc4WLX3X/ejuf"],[5,37,37]],[46,1,0,-2567,[1,"80PUW7eEBPsbzUDhW4gthP"],[4,1692459794],587]],[3,"b8EHN5AQNCw7ORw+T79XGT",1,0]],[33,"Outline 02",33554432,410,[[9,-2568,[1,"cbtSmwWd9IVKuCpIy2oDLR"],[5,41,41]],[46,1,0,-2569,[1,"68c1AxAj1E8oNcL/enBU+5"],[4,1021371154],588]],[3,"011dRuXAVL16tU5TstJeQ0",1,0]],[33,"Color",33554432,17,[[9,-2570,[1,"4cdlpICC1Cdp6WabrP5LFZ"],[5,32,32]],[23,0,-2571,[1,"8cBKopyS9N0aKTSiJdmnCD"],[4,4281532425],589]],[3,"36cvKdBo9HvJAIvsDuc8OE",1,0]],[33,"Edge White",33554432,17,[[9,-2572,[1,"5fcEHndLFD8KV6tcCU7nnA"],[5,32,32]],[46,1,0,-2573,[1,"cansD5/ONI94o4C8J/Ab2T"],[4,4292928274],590]],[3,"be3kQqwmdHM6Wi0bs/AF0A",1,0]],[33,"Icon_SpeedUp",33554432,17,[[9,-2574,[1,"d4MyQJ/A5Kbb8/S0/YGc91"],[5,26,26]],[211,0,false,-2575,[1,"73jRKURYRIH7If/uVk4GwC"],[4,4292928274],591]],[3,"f6AY+h9t9F1aJFb5VqR6dX",1,0]],[347,"6",2,88,88,88,false,147,[1,"882KTUBtFFjbah+S7vH9wr"],[4,4292928274]],[347,"/10",2,30,30,30,false,148,[1,"4eQLYxU05JeryH8k9Riq1m"],[4,4294174947]],[598,"Stage 1",40,false,86,[1,"7f0+61Dd1Ke6H6F/NYD6vQ"],[4,4281532425]],[401,2,86,[1,"b8CviDKBlKA7h+wJteNxQJ"]],[599,"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet ",0,22,21,21,2,false,153,[1,"91pH6InwJEraZF7jrxC98l"],[4,4281532425]],[284,"/6",48,48,48,false,156,[1,"5dzT2r00xO+4dwRYaMLjtV"],[4,4281532425]],[284,"1",48,48,48,false,154,[1,"2dnlR/dG9DkavFrgosU5MU"],[4,4281532425]],[221,"- Reminder -",20,20,20,3,false,272,[1,"d7r+tsE5FAkq8vHcBpLyvU"],[4,4294174947]],[221,"You can buy upgrades at the Shop!\nCheck it out at the main menu!",22,22,22,1,false,274,[1,"a9A5+gZV5EG40ky+m5ger5"],[4,4278456641]],[2,["12TKHhc5VBtp/TmmEQHdUG","75a1vm5JJA+ohuNwq5URob"]],[2,["10JdPBYMhGnZ7POjjFfsYp","75a1vm5JJA+ohuNwq5URob"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","75a1vm5JJA+ohuNwq5URob"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","75a1vm5JJA+ohuNwq5URob"]],[2,["19bXoDYZZMwIWZXL+JWh4K","75a1vm5JJA+ohuNwq5URob"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","75a1vm5JJA+ohuNwq5URob"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","75a1vm5JJA+ohuNwq5URob"]],[2,["28dsWsrZRJsa1s8v2wwP01","75a1vm5JJA+ohuNwq5URob"]],[2,["9a5mG4j9FHdrFfb/KI8evN","75a1vm5JJA+ohuNwq5URob"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","75a1vm5JJA+ohuNwq5URob"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","75a1vm5JJA+ohuNwq5URob"]],[2,["edIDYcAodIpZMhXSxHy4a7","75a1vm5JJA+ohuNwq5URob"]],[2,["70wDt2VWFD16VzFvDwRYUS","c5V6UYtXxON7v4PZCR+2j0"]],[2,["70wDt2VWFD16VzFvDwRYUS","1eKklzzutK7rqzu2nHAYzW"]],[2,["12TKHhc5VBtp/TmmEQHdUG","c5V6UYtXxON7v4PZCR+2j0"]],[2,["12TKHhc5VBtp/TmmEQHdUG","1eKklzzutK7rqzu2nHAYzW"]],[2,["10JdPBYMhGnZ7POjjFfsYp","c5V6UYtXxON7v4PZCR+2j0"]],[2,["10JdPBYMhGnZ7POjjFfsYp","1eKklzzutK7rqzu2nHAYzW"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","c5V6UYtXxON7v4PZCR+2j0"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","1eKklzzutK7rqzu2nHAYzW"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","c5V6UYtXxON7v4PZCR+2j0"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","1eKklzzutK7rqzu2nHAYzW"]],[2,["30/wQAvnZPtIlQh+02+xvR","c5V6UYtXxON7v4PZCR+2j0"]],[2,["30/wQAvnZPtIlQh+02+xvR","1eKklzzutK7rqzu2nHAYzW"]],[2,["19bXoDYZZMwIWZXL+JWh4K","c5V6UYtXxON7v4PZCR+2j0"]],[2,["19bXoDYZZMwIWZXL+JWh4K","1eKklzzutK7rqzu2nHAYzW"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","c5V6UYtXxON7v4PZCR+2j0"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","1eKklzzutK7rqzu2nHAYzW"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","c5V6UYtXxON7v4PZCR+2j0"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","1eKklzzutK7rqzu2nHAYzW"]],[2,["28dsWsrZRJsa1s8v2wwP01","c5V6UYtXxON7v4PZCR+2j0"]],[2,["28dsWsrZRJsa1s8v2wwP01","1eKklzzutK7rqzu2nHAYzW"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","c5V6UYtXxON7v4PZCR+2j0"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","1eKklzzutK7rqzu2nHAYzW"]],[2,["9a5mG4j9FHdrFfb/KI8evN","c5V6UYtXxON7v4PZCR+2j0"]],[2,["9a5mG4j9FHdrFfb/KI8evN","1eKklzzutK7rqzu2nHAYzW"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","c5V6UYtXxON7v4PZCR+2j0"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","1eKklzzutK7rqzu2nHAYzW"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","c5V6UYtXxON7v4PZCR+2j0"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","1eKklzzutK7rqzu2nHAYzW"]],[2,["edIDYcAodIpZMhXSxHy4a7","c5V6UYtXxON7v4PZCR+2j0"]],[2,["edIDYcAodIpZMhXSxHy4a7","1eKklzzutK7rqzu2nHAYzW"]],[2,["70wDt2VWFD16VzFvDwRYUS","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["12TKHhc5VBtp/TmmEQHdUG","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["10JdPBYMhGnZ7POjjFfsYp","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["30/wQAvnZPtIlQh+02+xvR","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["19bXoDYZZMwIWZXL+JWh4K","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["28dsWsrZRJsa1s8v2wwP01","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["9a5mG4j9FHdrFfb/KI8evN","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["edIDYcAodIpZMhXSxHy4a7","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["171MnYxFRNfKXgRmWyWA2/"]],[284,"gun tower",22,22,22,false,34,[1,"44mzkM2l9NKaW4GR2kmqM3"],[4,4294765656]],[100,13,[1,"484sM2549FI6KtX6rwKr9E"]],[100,14,[1,"97++uOsVlD6ZygbwxpRGAf"]],[100,15,[1,"3ejmlhXpROMJB9Pk51jYqB"]],[221,"Congratulations, you’ve saved the galaxy from the forces of darkness... for now.",22,22,22,3,false,320,[1,"526U8i8hFCOrflXRMsePiH"],[4,4281532425]],[100,24,[1,"27tSyc+VtL+qdQ5tTLkrrU"]],[100,7,[1,"bc8RoToydJnIHl5TS1gHUH"]],[100,56,[1,"c5ytloSU5FpL04PWXkxgGj"]],[295,true,56,[1,"02DvXj81ZNUKzG4yFwDZPG"],749],[100,67,[1,"69sJkvu1JHDZI6zGslDzRh"]],[295,true,67,[1,"c4Q8dSWgNH46vSGgZTvrqv"],751],[100,68,[1,"313MqOYzpB8rC/J8IUTfcs"]],[295,true,68,[1,"9dLrCZwZlA5rWoCmsVBgUh"],753],[284,"Shop",38,38,38,false,173,[1,"464OSRRyJGOp1ttVFsekfY"],[4,4281532425]],[401,2,173,[1,"8dVlktQflHeLFqh2mdy2lm"]],[284,"Stage 1",38,38,38,false,111,[1,"6eCut74/1LEKCWWZ0IuLm5"],[4,4281532425]],[401,2,111,[1,"63XyAgBWZMh517ySzB9+ZR"]],[628,175,[1,"ab4qWvJG5L/7Sk7O2mtBCx"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",176]]],[347,"999 ",2,26,26,26,false,176,[1,"5dz4spSmVFi7WN+5osJxdc"],[4,4294174947]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["77TNXOqB1K7aFVadEOVrbg"]],[2,["02eF1XhQpMbKYv2Jp8pbJ+"]],[2,["46XEwx/YdPSoYGq9WRUULu"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[348,"Smash.3R",2,22,22,20,2,false,false,183,[1,"23kF+MLUlF45AawKNhFREq"],[4,4281532425]],[349,"Mussum Ipsum, cacilds vidis litro abertis. Em pé sem cair, deitado sem dormir, testad pra ai linhas. Dä ok até.",2,0,16,15,15,2,false,184,[1,"6eP5OULu9Ms7Qy4Nl80EfQ"],[4,4286808963]],[185,"20",18,18,18,false,186,[1,"a3K5owSBZMioWqqslQ6pGs"]],[185,"10",18,18,18,false,188,[1,"5e1urkH41Bj7fPcEFFHfOj"]],[185,"4",18,18,18,false,190,[1,"b7dnA6wJROdrQqs1ez6E1f"]],[144,"P-Cannon-Tower",64,96,[537],[16,null,"72CUi05AdGOoqnsNldLiHQ",0]],[273,"Bullet_Muzzle_Ring",512,126,[-2576],[16,null,"4a4ndbc2lHWIg2llm3ey6+",0],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[129,0.2,false,false,1,782,[1,"4aYVow3PVDZYYLtSkk11Ot"],[[312,null],6,0],[66,[4,2986344447]],[4,0.6],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.09598214285714286,[4,4294753015]],[18,0.3147321428571428,[4,4293678506]],[18,0.8191964285714286,[4,4283436566]]],[[44,255],[12,255,0.19642857142857154],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.4846153846153846,1],[[7,2,0.14814814814814814,2.7575757575757565,2.7575757575757565],[7,2,0.9333333333333332,0.37555555555555636,0.37555555555555636],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-2577],[31,313]],[189,"Bullet_Muzzle_Fragments",126,[-2578],[16,null,"365PYHk7tK+p80wKBWnjfP",0],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[86,0.5,false,false,784,[1,"a17oPhklFP86C3fjqVcfHm"],[[314,null],6,0],[6],[27,3,0.1,0.3],[0],[0],[27,3,0.2,0.8],[0],[0],[0],[0],[27,3,0.3,0.5],[54,3,0.3],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[136],[18,0.05133928571428574,[4,4293175768]],[18,0.2767857142857143,[4,4291450006]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[279,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-2579],[31,315]],[189,"Bullet_Muzzle_Flash_A",126,[-2580],[16,null,"20gIAUlvhItI3IAUCGpmoa",0],[1,0,0.13,-0.5],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.3,false,false,1,786,[1,"a4ohdeEBBNrr/KavHHR/iz"],[[316,null],6,0],[6],[4,1.5],[4,1],[0],[0],[0],[0],[0],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.11830357142857142],[18,0.4151785714285714,[4,4293678518]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.6512820512820513,1],[[40,2,1,0.027777777777778234,1,0.027777777777778234,1],[7,2,0.6814814814814815,-1.0432098765432094,-1.0432098765432094],[52,2,-3.020202020202019,1,-3.020202020202019,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-2581],[31,317]],[42,"Base",538,[-2582],[16,null,"e3DkrNnrNNhrnM9kdtO4Va",0]],[42,"Base Pivot",788,[41],[16,null,"56h9GhupJIUaT67Np8bk0e",0]],[144,"P-Gun-Tower",32,96,[539],[16,null,"62ERELdDJKKKr0x07ojqqD",0]],[42,"VFXs",348,[541],[16,null,"b3au/X/7NGUqQQuFeyQgG7",0]],[333,true,0.2,false,false,1,542,[1,"47fCv1d2lEIrcsWeoxrjv/"],[[337,null],6,0],[6],[4,1],[4,0.5],[0],[0],[0],[0],[0],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-2583],[31,338]],[334,false,0.2,false,false,1,542,[1,"c5t2dKIzRISJmwTVLCQflI"],[[339,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-2584],[31,340]],[189,"Bullet_Muzzle-Square",541,[-2585],[16,null,"52ReaRfQZNUY2o+Hgcmq6F",0],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.2,false,false,1,794,[1,"d7XStftG1Dxq0OVqTDDpk/"],[[341,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-2586],[31,342]],[42,"Base Gun Tower",540,[42],[16,null,"bcjdi/s1ZNComSBdTd2+Cu",0]],[2,["52Wr8elKJczKH4c2zJXMeu"]],[144,"P-Laser-Tower",128,96,[543],[16,null,"afYDiyc5ZI2qesRshN0Qf0",0]],[42,"Base",544,[-2587],[16,null,"34Uq9szxpMGKxpzpyBoR9I",0]],[42,"Base Pivot",799,[43],[16,null,"10QJBHxktP1JGkNfx5yKrw",0]],[185,"4",42,42,42,false,211,[1,"dccG/aZzBA7bi14ydDQ0AH"]],[41,"Holder_Lines",33554432,25,[[9,-2588,[1,"18KrmNmVpBqrKcyVRLFXGa"],[5,0,0]]],[16,null,"2dg7sljKJKJKaDMpR/VfdM",0],[1,0,-72,0]],[315,"20",2,32,32,32,false,212,[1,"e2egLlwS1AT49MKpUC+E63"]],[155,3,0.9,74,[1,"63YVQxsgtCKLHfGAjYnP6h"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",5]]],[155,3,0.9,75,[1,"f9YDmbk45GepNnaAO9CHu1"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",5]]],[155,3,0.9,76,[1,"00ifH+cmpItb22pVCucpcB"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",5]]],[155,3,0.9,77,[1,"dcsjb8czVJjI25KrZwJww7"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",5]]],[100,5,[1,"4bXFgjCi1Oep5MuL3z4qnv"]],[221,"Energy +2",22,22,22,3,false,217,[1,"78V+MwrA9LLKBfQbMIHykZ"],[4,4281532425]],[315,"20",2,32,32,32,false,218,[1,"fc+N42tvZGcYXz+DEeVocY"]],[155,3,0.9,80,[1,"bbMgQc3rtGkbzaQgv3KKaR"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",10]]],[155,3,0.9,81,[1,"e0L5bQoo5NDqCEPGVLc4kW"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",10]]],[100,10,[1,"aaEctOAmBHqr0xm5mVao1J"]],[155,3,0.9,35,[1,"6dZWzsyptFIpCouE4rT1kz"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",19],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",19],[8,"ac879rTendCEbpZWFz/jexs","playSFX",35]]],[221,"Reset all your upgrades?",22,22,22,3,false,374,[1,"6ahz6BOJpC+K+J3SaizJ2Z"],[4,4281532425]],[100,19,[1,"b1JX8ilAhGLYcYeSt18o/j"]],[455,3,0.9,11,[1,"0bZdeupMZH+aGv7jzSxkpI"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",11],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",12],[8,"ac879rTendCEbpZWFz/jexs","playSFX",3],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",13],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",14],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",15]],[4,4292269782],11],[53,"Holder_Button Tab01",33554432,3,[11],[[48,-2589,[1,"d5ejNvArVBFa7N3ubLue/m"]]],[16,null,"98mDa1I/9Oc4+R8Wzq4vlV",0],[1,-131.089,-382.005,0]],[100,11,[1,"58ZanPd5BPNa9HjZMcJ4kM"]],[53,"Holder_Button Tab02",33554432,3,[12],[[48,-2590,[1,"18Kq3QUQFC44T/adUXse+9"]]],[16,null,"34XSZ29xJI3IV9uq7qPmH5",0],[1,-15,-382.005,0]],[455,3,0.9,12,[1,"63ZKqYhbdDH62zpdPLShJi"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",12],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",11],[153,"ca25cTenhxIzImdddRm852A","setTowers","0"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","0",22],[34,"29dcbqkeLJDCo7uiXlubGL/","setTab","0",69],[8,"ac879rTendCEbpZWFz/jexs","playSFX",3],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",34]],[4,4292269782],12],[100,12,[1,"cdYC9hil1OHIZyibQ8Fn9I"]],[587,141,[1,"d7jlzszTJE6LT11SWlXp7u"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true,.4",11],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",12],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true,.4",13],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",14],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",15],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",34]],[4,4292269782],141],[155,3,0.9,83,[1,"acI9fPFjZIT4u5kPguoAHU"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,false",8]]],[221,"- Got overwhelmed?! -",26,26,26,3,false,385,[1,"bbp7vA+0BAGKPNP+Fd0F7J"],[4,4228991970]],[221,"Watch an ad to release the Cube's freezing power?",22,22,22,1,false,386,[1,"dcYuX9vXxOV5eK43Cf2ZZx"],[4,4281545523]],[100,59,[1,"7dkRomnIRGC68OLv+YySSx"]],[100,9,[1,"abnB3RetdAwoDT1D84ucis"]],[100,17,[1,"31nkO6pFhIlYOw4KoI+zzM"]],[100,16,[1,"08XjF56rpOrqmCS/pKJ2w7"]],[100,8,[1,"deMqwBB9hM9q7ROt0zyrx9"]]],0,[0,-1,243,0,-2,245,0,-3,246,0,-4,247,0,-5,248,0,-6,249,0,-7,250,0,-8,251,0,-9,252,0,-10,253,0,-11,254,0,-12,255,0,-13,256,0,-14,257,0,-15,258,0,-16,259,0,-17,260,0,-18,261,0,-19,262,0,-20,263,0,-21,239,0,-22,2,0,-23,3,0,-24,115,0,-25,315,0,-26,316,0,-27,317,0,-28,318,0,-29,303,0,-30,304,0,-31,305,0,-32,306,0,-33,307,0,-34,310,0,-35,311,0,-36,312,0,-37,313,0,-38,314,0,-39,527,0,-40,528,0,-41,529,0,-42,530,0,-43,531,0,-44,532,0,-45,533,0,-46,341,0,-47,342,0,-48,343,0,-49,344,0,-50,345,0,-51,346,0,-52,347,0,-53,41,0,-54,349,0,-55,350,0,-56,351,0,-57,352,0,-58,353,0,-59,354,0,-60,355,0,-61,42,0,-62,357,0,-63,358,0,-64,359,0,-65,360,0,-66,361,0,-67,362,0,-68,363,0,-69,43,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,2,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,4,0,5,3,0,13,759,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,8,0,-2,9,0,-3,7,0,-4,59,0,-5,28,0,-6,46,0,-7,39,0,1,152,0,1,152,0,1,152,0,1,152,0,1,152,0,3,2,0,5,115,0,13,115,0,1,684,0,1,684,0,1,685,0,1,685,0,1,686,0,1,686,0,1,687,0,1,687,0,1,688,0,1,688,0,1,689,0,1,689,0,1,690,0,1,690,0,1,691,0,1,691,0,1,692,0,1,692,0,1,693,0,1,693,0,1,694,0,1,694,0,1,695,0,1,695,0,1,162,0,1,162,0,1,162,0,1,162,0,1,696,0,1,696,0,1,697,0,1,697,0,1,698,0,1,698,0,1,699,0,1,699,0,1,700,0,1,700,0,1,701,0,1,701,0,1,702,0,1,702,0,1,703,0,1,703,0,1,704,0,1,704,0,1,705,0,1,705,0,1,706,0,1,706,0,1,707,0,1,707,0,1,708,0,1,708,0,1,709,0,1,709,0,1,710,0,1,710,0,1,711,0,1,711,0,1,712,0,1,712,0,1,713,0,1,713,0,1,714,0,1,714,0,1,715,0,1,715,0,1,716,0,1,716,0,1,717,0,1,717,0,1,718,0,1,718,0,1,719,0,1,719,0,1,720,0,1,720,0,1,721,0,1,721,0,1,722,0,1,722,0,1,723,0,1,723,0,1,724,0,1,724,0,1,725,0,1,725,0,1,726,0,1,726,0,1,727,0,1,727,0,1,728,0,1,728,0,1,729,0,1,729,0,1,730,0,1,730,0,1,731,0,1,731,0,1,732,0,1,732,0,1,733,0,1,733,0,1,734,0,1,734,0,1,735,0,1,735,0,1,736,0,1,736,0,1,737,0,1,737,0,1,738,0,1,738,0,1,739,0,1,739,0,1,740,0,1,740,0,1,162,0,1,741,0,1,741,0,3,3,0,5,174,0,5,7,0,5,23,0,5,40,0,5,23,0,5,40,0,-1,527,0,-2,528,0,-3,529,0,-4,530,0,-5,531,0,-6,532,0,-7,533,0,-1,115,0,-2,315,0,-3,316,0,-4,317,0,-5,318,0,-1,303,0,-2,304,0,-3,305,0,-4,306,0,-5,307,0,-1,310,0,-2,311,0,-3,312,0,-4,313,0,-5,314,0,0,5,0,0,5,0,-3,808,0,5,5,0,5,5,0,5,5,0,5,5,0,5,5,0,21,43,0,22,357,0,21,43,0,22,359,0,21,43,0,22,363,0,21,43,0,22,358,0,21,43,0,22,360,0,21,43,0,22,362,0,21,43,0,22,361,0,21,41,0,22,341,0,21,41,0,22,342,0,21,41,0,22,343,0,21,41,0,22,345,0,21,41,0,22,344,0,21,41,0,22,346,0,21,41,0,22,347,0,21,42,0,22,349,0,21,42,0,22,350,0,21,42,0,22,351,0,21,42,0,22,352,0,21,42,0,22,353,0,21,42,0,22,355,0,21,42,0,22,354,0,5,190,0,5,211,0,5,188,0,5,186,0,5,184,0,5,183,0,5,212,0,49,807,0,47,806,0,44,805,0,45,804,0,5,5,0,5,5,0,5,5,0,0,5,0,0,5,0,25,808,0,0,5,0,5,5,0,0,5,0,-1,181,0,-2,182,0,-3,73,0,-4,213,0,-5,553,0,-6,557,0,-7,561,0,-8,214,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,243,0,-2,245,0,-3,246,0,-4,247,0,-5,248,0,-6,249,0,-7,250,0,-8,251,0,-9,252,0,-10,253,0,-11,254,0,-12,255,0,-13,256,0,-14,257,0,-15,258,0,-16,259,0,-17,260,0,-18,261,0,-19,262,0,-20,263,0,0,7,0,0,7,0,0,7,0,-4,748,0,0,7,0,25,748,0,0,7,0,-1,467,0,-2,157,0,-3,92,0,-4,112,0,-5,93,0,-7,24,0,0,8,0,0,8,0,0,8,0,-4,831,0,25,831,0,0,8,0,5,87,0,5,398,0,0,8,0,-1,26,0,-2,91,0,-3,88,0,-4,222,0,0,9,0,0,9,0,0,9,0,-4,828,0,25,828,0,0,9,0,0,9,0,0,9,0,-1,444,0,-2,149,0,-3,85,0,-4,61,0,-5,654,0,0,10,0,0,10,0,-3,813,0,5,217,0,5,218,0,44,812,0,45,811,0,5,10,0,5,10,0,5,10,0,0,10,0,0,10,0,25,813,0,0,10,0,5,10,0,0,10,0,-1,215,0,-2,216,0,-3,79,0,-4,576,0,-5,580,0,0,11,0,-2,817,0,0,11,0,0,11,0,-5,819,0,25,819,0,0,11,0,-1,596,0,-2,597,0,-3,598,0,-4,599,0,-5,380,0,-6,601,0,-7,381,0,0,12,0,-2,821,0,0,12,0,0,12,0,-5,822,0,25,822,0,0,12,0,-1,603,0,-2,604,0,-3,605,0,-4,606,0,-5,382,0,-6,608,0,-7,383,0,0,13,0,0,13,0,-3,743,0,19,296,0,5,22,0,5,13,0,5,14,0,5,15,0,5,34,0,0,13,0,25,743,0,0,13,0,-1,296,0,-2,497,0,-3,498,0,-4,499,0,-5,500,0,0,14,0,0,14,0,-3,744,0,19,297,0,5,22,0,5,14,0,5,15,0,5,34,0,0,14,0,25,744,0,0,14,0,-1,297,0,-2,501,0,-3,298,0,-4,299,0,-5,502,0,0,15,0,0,15,0,-3,745,0,19,300,0,5,22,0,5,15,0,5,34,0,0,15,0,25,745,0,0,15,0,-1,300,0,-2,503,0,-3,504,0,-4,505,0,-5,506,0,0,16,0,0,16,0,19,409,0,5,16,0,5,16,0,5,17,0,5,29,0,5,17,0,0,16,0,0,16,0,0,16,0,0,16,0,-7,830,0,25,830,0,0,16,0,-1,408,0,-2,409,0,-3,668,0,-4,669,0,0,17,0,0,17,0,5,17,0,5,17,0,5,29,0,0,17,0,0,17,0,0,17,0,0,17,0,-7,829,0,25,829,0,0,17,0,-1,410,0,-2,672,0,-3,673,0,-4,674,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,227,0,-2,228,0,-3,229,0,-4,230,0,-5,231,0,-6,232,0,-7,233,0,-8,234,0,-9,235,0,-10,236,0,0,19,0,0,19,0,-3,816,0,0,19,0,25,816,0,0,19,0,5,19,0,0,19,0,-1,219,0,-2,220,0,-3,584,0,-4,589,0,0,20,0,0,20,0,0,20,0,-1,413,0,-2,414,0,-3,415,0,-4,416,0,-5,417,0,-6,418,0,-7,419,0,-8,420,0,-9,421,0,-10,422,0,0,21,0,0,21,0,0,21,0,-1,98,0,-2,99,0,-3,100,0,-4,101,0,-5,102,0,-6,103,0,-7,104,0,-8,105,0,-9,106,0,-10,107,0,0,22,0,-1,284,0,-2,285,0,-1,290,0,-2,291,0,-1,286,0,-2,287,0,-1,289,0,-1,295,0,-1,292,0,-2,293,0,0,22,0,-1,118,0,-2,119,0,-3,490,0,-4,491,0,-5,492,0,-6,493,0,-7,494,0,0,23,0,0,23,0,0,23,0,0,23,0,0,23,0,-1,116,0,-2,301,0,-3,120,0,-4,308,0,-5,121,0,0,24,0,0,24,0,-3,747,0,0,24,0,25,747,0,0,24,0,5,24,0,0,24,0,-1,171,0,-2,319,0,-3,512,0,0,25,0,0,25,0,0,25,0,-1,183,0,-2,184,0,-3,95,0,-4,335,0,-5,340,0,-6,802,0,0,26,0,0,26,0,0,26,0,-1,145,0,-2,97,0,-3,60,0,-4,404,0,-5,406,0,-8,392,0,0,27,0,19,240,0,5,27,0,5,27,0,5,241,0,0,27,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,240,0,-2,448,0,-3,449,0,0,28,0,-1,87,0,-2,264,0,-3,268,0,-4,269,0,-5,270,0,-6,611,0,-7,242,0,-8,612,0,-9,634,0,-10,326,0,0,29,0,0,29,0,0,30,0,19,282,0,5,30,0,5,39,0,0,30,0,0,30,0,0,30,0,0,30,0,-1,282,0,-2,481,0,-3,482,0,0,31,0,5,31,0,0,31,0,0,31,0,0,31,0,-1,393,0,-2,624,0,-3,625,0,-4,626,0,-5,58,0,0,32,0,19,400,0,5,32,0,5,32,0,0,32,0,0,32,0,0,32,0,0,32,0,0,32,0,-1,400,0,-2,650,0,-3,651,0,0,33,0,0,33,0,-1,468,0,-2,469,0,-3,470,0,-4,471,0,-5,472,0,-6,473,0,-7,474,0,-8,475,0,0,34,0,-2,742,0,0,34,0,23,742,0,0,34,0,-1,489,0,3,35,0,0,35,0,0,35,0,-3,814,0,0,35,0,0,35,0,-1,593,0,-2,594,0,-3,595,0,0,36,0,19,225,0,5,36,0,5,36,0,5,39,0,0,36,0,0,36,0,0,36,0,0,36,0,-1,225,0,-2,401,0,-3,652,0,0,37,0,5,37,0,0,37,0,0,37,0,0,37,0,-1,405,0,-2,657,0,-3,658,0,-4,659,0,-5,660,0,0,38,0,-1,454,0,-2,455,0,-3,456,0,-4,457,0,-5,458,0,-6,459,0,-7,460,0,-8,461,0,0,39,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,-2,117,0,-3,167,0,-4,507,0,1,198,0,1,198,0,1,198,0,1,198,0,1,198,0,3,41,0,1,131,0,1,131,0,1,131,0,1,131,0,1,131,0,1,131,0,1,797,0,1,797,0,3,42,0,1,210,0,1,210,0,1,210,0,1,210,0,1,210,0,3,43,0,0,44,0,0,44,0,5,44,0,0,44,0,0,44,0,0,44,0,-1,590,0,-2,591,0,-3,592,0,0,45,0,0,45,0,5,45,0,0,45,0,0,45,0,0,45,0,-1,616,0,-2,617,0,-3,618,0,0,46,0,-1,396,0,-2,397,0,-3,638,0,-4,395,0,-5,640,0,-6,642,0,-7,399,0,-8,647,0,0,47,0,0,47,0,0,47,0,0,47,0,0,47,0,-1,644,0,-2,645,0,0,48,0,19,226,0,5,48,0,5,403,0,0,48,0,0,48,0,0,48,0,-1,226,0,-2,402,0,-3,653,0,-4,403,0,0,49,0,5,49,0,0,49,0,0,49,0,0,49,0,-1,407,0,-2,663,0,-3,664,0,-4,665,0,0,50,0,19,159,0,5,50,0,0,50,0,0,50,0,0,50,0,-1,159,0,-2,280,0,-3,479,0,0,51,0,19,160,0,5,51,0,0,51,0,0,51,0,0,51,0,-1,160,0,-2,281,0,-3,480,0,0,52,0,0,52,0,0,52,0,-1,115,0,-2,315,0,-3,316,0,-4,317,0,-5,318,0,0,53,0,0,53,0,0,53,0,-1,484,0,-2,485,0,-3,486,0,-4,487,0,-5,488,0,0,54,0,0,54,0,0,54,0,-1,303,0,-2,304,0,-3,305,0,-4,306,0,-5,307,0,0,55,0,0,55,0,0,55,0,-1,310,0,-2,311,0,-3,312,0,-4,313,0,-5,314,0,0,56,0,0,56,0,0,56,0,-4,749,0,-5,750,0,0,56,0,-1,519,0,-2,520,0,0,57,0,0,57,0,0,57,0,-1,385,0,-2,386,0,-3,387,0,0,58,0,-1,627,0,-2,628,0,-3,629,0,-4,630,0,-5,631,0,-6,632,0,-7,633,0,0,59,0,0,59,0,0,59,0,-4,827,0,25,827,0,0,59,0,0,60,0,0,60,0,19,237,0,5,60,0,0,60,0,0,60,0,0,60,0,-1,237,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,-1,274,0,-2,275,0,0,63,0,0,63,0,0,63,0,0,63,0,-4,508,0,0,64,0,0,64,0,0,64,0,-1,320,0,-2,321,0,0,65,0,0,65,0,0,65,0,0,65,0,-1,513,0,-2,514,0,-3,515,0,0,66,0,0,66,0,0,66,0,0,66,0,-1,518,0,-2,521,0,-3,524,0,0,67,0,0,67,0,-3,751,0,-4,752,0,0,67,0,-1,522,0,-2,523,0,0,68,0,0,68,0,-3,753,0,-4,754,0,0,68,0,-1,525,0,-2,526,0,-1,341,0,-2,342,0,-3,343,0,-4,344,0,-5,345,0,-6,346,0,-7,347,0,-1,349,0,-2,350,0,-3,351,0,-4,352,0,-5,353,0,-6,354,0,-7,355,0,-1,357,0,-2,358,0,-3,359,0,-4,360,0,-5,361,0,-6,362,0,-7,363,0,0,73,0,0,73,0,0,73,0,-2,550,0,-3,212,0,-4,365,0,-5,551,0,0,74,0,0,74,0,-3,804,0,0,74,0,-1,554,0,-2,555,0,-3,556,0,0,75,0,0,75,0,-3,805,0,0,75,0,-1,558,0,-2,559,0,-3,560,0,0,76,0,0,76,0,-3,806,0,0,76,0,-1,562,0,-2,563,0,-3,564,0,0,77,0,0,77,0,-3,807,0,0,77,0,-1,567,0,-2,568,0,-3,569,0,0,78,0,0,78,0,0,78,0,-1,217,0,-2,367,0,0,79,0,0,79,0,0,79,0,-1,574,0,-2,218,0,-3,372,0,-4,575,0,0,80,0,0,80,0,-3,811,0,0,80,0,-1,577,0,-2,578,0,-3,579,0,0,81,0,0,81,0,-3,812,0,0,81,0,-1,581,0,-2,582,0,-3,583,0,0,82,0,0,82,0,0,82,0,-1,374,0,-2,375,0,0,83,0,0,83,0,-3,824,0,0,83,0,-1,619,0,-2,620,0,-3,621,0,0,84,0,0,84,0,-4,146,0,0,85,0,0,85,0,0,85,0,-1,150,0,-2,86,0,-3,108,0,0,86,0,-2,677,0,50,678,0,23,677,0,0,86,0,-4,678,0,-1,447,0,0,87,0,-1,243,0,-2,245,0,-3,246,0,-4,247,0,-5,248,0,-6,249,0,-7,250,0,-8,251,0,-9,252,0,-10,253,0,-11,254,0,-12,255,0,-13,256,0,-14,257,0,-15,258,0,-16,259,0,-17,260,0,-18,261,0,-19,262,0,-20,263,0,0,87,0,0,88,0,0,88,0,0,88,0,-1,244,0,-2,89,0,0,89,0,0,89,0,-1,450,0,-2,451,0,-3,452,0,-4,453,0,0,90,0,0,90,0,0,90,0,-1,466,0,-2,154,0,-3,156,0,0,91,0,0,91,0,0,91,0,-1,109,0,-3,155,0,0,92,0,0,92,0,-1,172,0,-3,111,0,-4,173,0,0,93,0,0,93,0,-4,94,0,0,94,0,19,161,0,0,94,0,0,94,0,-1,161,0,-2,283,0,-3,483,0,0,95,0,0,95,0,0,95,0,-1,185,0,-2,187,0,-3,189,0,0,96,0,0,96,0,0,96,0,-1,781,0,-2,790,0,-3,798,0,0,97,0,0,97,0,0,97,0,-2,443,0,0,98,0,0,98,0,-1,423,0,-2,424,0,0,99,0,0,99,0,-1,425,0,-2,426,0,0,100,0,0,100,0,-1,427,0,-2,428,0,0,101,0,0,101,0,-1,429,0,-2,430,0,0,102,0,0,102,0,-1,431,0,-2,432,0,0,103,0,0,103,0,-1,433,0,-2,434,0,0,104,0,0,104,0,-1,435,0,-2,436,0,0,105,0,0,105,0,-1,437,0,-2,438,0,0,106,0,0,106,0,-1,439,0,-2,440,0,0,107,0,0,107,0,-1,441,0,-2,442,0,0,108,0,0,108,0,0,108,0,-1,151,0,-2,153,0,0,109,0,0,109,0,-1,465,0,-3,110,0,0,110,0,0,110,0,-1,265,0,-2,266,0,-3,267,0,0,111,0,-2,757,0,50,758,0,23,757,0,0,111,0,-4,758,0,0,112,0,0,112,0,-2,476,0,-3,478,0,0,113,0,0,113,0,0,113,0,-1,276,0,-2,277,0,0,114,0,0,114,0,0,114,0,-1,278,0,-2,279,0,3,115,0,0,116,0,0,116,0,0,116,0,-1,170,0,0,117,0,0,117,0,-2,495,0,-3,496,0,0,118,0,0,118,0,-1,163,0,-2,164,0,-3,288,0,0,119,0,0,119,0,-1,165,0,-2,166,0,-3,294,0,0,120,0,0,120,0,0,120,0,-1,168,0,0,121,0,0,121,0,0,121,0,-1,169,0,0,122,0,0,122,0,0,122,0,-1,322,0,-2,323,0,0,123,0,0,123,0,0,123,0,-1,324,0,-2,325,0,0,124,0,0,124,0,0,124,0,-1,336,0,-2,337,0,0,125,0,0,125,0,0,125,0,-1,338,0,-2,339,0,6,126,0,-3,782,0,-4,784,0,-5,786,0,0,132,0,0,132,0,-1,364,0,-2,545,0,-3,211,0,0,133,0,-1,546,0,-2,547,0,-3,548,0,-4,549,0,0,134,0,0,134,0,0,134,0,-1,565,0,-2,566,0,0,135,0,0,135,0,0,135,0,-1,368,0,-2,369,0,0,136,0,0,136,0,0,136,0,-1,370,0,-2,371,0,0,137,0,-1,570,0,-2,571,0,-3,572,0,-4,573,0,0,138,0,0,138,0,0,138,0,-1,376,0,-2,377,0,0,139,0,0,139,0,0,139,0,-1,378,0,-2,379,0,0,140,0,-1,585,0,-2,586,0,-3,587,0,-4,588,0,0,141,0,0,141,0,-3,823,0,0,141,0,-1,610,0,0,142,0,0,142,0,-1,384,0,-2,614,0,-3,615,0,0,143,0,0,143,0,0,143,0,-1,388,0,-2,389,0,0,144,0,0,144,0,0,144,0,-1,390,0,-2,391,0,0,145,0,0,145,0,-1,411,0,-2,412,0,0,146,0,0,146,0,-1,147,0,-2,148,0,0,147,0,-2,675,0,23,675,0,0,147,0,0,148,0,-2,676,0,23,676,0,0,148,0,0,149,0,0,149,0,0,149,0,-1,238,0,0,150,0,0,150,0,-1,445,0,-2,446,0,0,151,0,0,151,0,-1,239,0,0,153,0,-2,679,0,23,679,0,0,153,0,0,154,0,-2,681,0,23,681,0,0,154,0,0,155,0,-1,462,0,-2,463,0,-3,464,0,0,156,0,-2,680,0,23,680,0,0,156,0,0,157,0,0,157,0,0,157,0,0,157,0,0,158,0,0,158,0,-1,272,0,-2,273,0,0,159,0,0,159,0,0,159,0,0,160,0,0,160,0,0,160,0,0,161,0,0,161,0,0,161,0,0,163,0,0,163,0,-1,284,0,-2,285,0,0,164,0,0,164,0,-1,286,0,-2,287,0,0,165,0,0,165,0,-1,290,0,-2,291,0,0,166,0,0,166,0,-1,292,0,-2,293,0,0,167,0,0,168,0,0,168,0,0,168,0,-1,509,0,0,169,0,0,169,0,0,169,0,-1,510,0,0,170,0,0,170,0,0,170,0,-1,511,0,0,171,0,0,171,0,0,171,0,0,171,0,0,172,0,0,172,0,-1,516,0,-2,517,0,0,173,0,-2,755,0,50,756,0,23,755,0,0,173,0,-4,756,0,0,174,0,0,175,0,-2,759,0,0,176,0,-2,760,0,23,760,0,0,176,0,0,177,0,0,177,0,0,177,0,-2,178,0,0,178,0,0,178,0,-1,327,0,-2,328,0,0,181,0,0,181,0,0,181,0,0,181,0,0,182,0,0,182,0,0,183,0,-2,776,0,23,776,0,0,183,0,0,184,0,-2,777,0,23,777,0,0,184,0,0,185,0,-1,332,0,-2,534,0,-3,186,0,0,186,0,-2,778,0,23,778,0,0,186,0,0,187,0,-1,333,0,-2,535,0,-3,188,0,0,188,0,-2,779,0,23,779,0,0,188,0,0,189,0,-1,334,0,-2,536,0,-3,190,0,0,190,0,-2,780,0,23,780,0,0,190,0,0,191,0,0,191,0,0,191,0,0,211,0,-2,801,0,23,801,0,0,211,0,0,212,0,-2,803,0,23,803,0,0,212,0,0,213,0,0,213,0,0,213,0,-1,552,0,0,214,0,0,214,0,0,215,0,0,215,0,0,215,0,0,215,0,0,216,0,0,216,0,0,217,0,-2,809,0,23,809,0,0,217,0,0,218,0,-2,810,0,23,810,0,0,218,0,0,219,0,0,219,0,0,219,0,0,219,0,0,220,0,0,220,0,0,221,0,-1,750,0,-2,752,0,-3,754,0,0,221,0,0,222,0,0,222,0,-1,223,0,0,223,0,0,223,0,0,223,0,0,223,0,0,224,0,0,224,0,0,224,0,0,225,0,0,225,0,0,225,0,0,226,0,0,226,0,0,226,0,0,227,0,0,227,0,0,228,0,0,228,0,0,229,0,0,229,0,0,230,0,0,230,0,0,231,0,0,231,0,0,232,0,0,232,0,0,233,0,0,233,0,0,234,0,0,234,0,0,235,0,0,235,0,0,236,0,0,236,0,0,237,0,0,237,0,0,238,0,0,238,0,0,238,0,3,239,0,0,240,0,0,240,0,0,241,0,0,241,0,0,242,0,3,243,0,0,244,0,0,244,0,0,244,0,3,245,0,3,246,0,3,247,0,3,248,0,3,249,0,3,250,0,3,251,0,3,252,0,3,253,0,3,254,0,3,255,0,3,256,0,3,257,0,3,258,0,3,259,0,3,260,0,3,261,0,3,262,0,3,263,0,0,264,0,0,264,0,0,265,0,0,265,0,0,265,0,0,266,0,0,266,0,0,266,0,0,267,0,0,267,0,0,267,0,0,268,0,0,268,0,0,269,0,0,269,0,0,270,0,5,271,0,0,270,0,-1,271,0,0,271,0,0,271,0,0,272,0,-2,682,0,23,682,0,0,272,0,0,273,0,0,273,0,0,274,0,-2,683,0,23,683,0,0,274,0,0,275,0,0,276,0,0,276,0,0,276,0,0,277,0,0,277,0,0,277,0,0,278,0,0,278,0,0,278,0,0,279,0,0,279,0,0,279,0,0,280,0,0,280,0,0,280,0,0,281,0,0,281,0,0,281,0,0,282,0,0,282,0,0,283,0,0,283,0,0,283,0,0,284,0,0,284,0,0,285,0,0,285,0,0,286,0,0,286,0,0,287,0,0,287,0,0,288,0,0,288,0,-1,289,0,0,289,0,0,289,0,0,290,0,0,290,0,0,291,0,0,291,0,0,292,0,0,292,0,0,293,0,0,293,0,0,294,0,0,294,0,-1,295,0,0,295,0,0,295,0,0,296,0,0,296,0,0,297,0,0,297,0,0,298,0,0,298,0,0,298,0,0,299,0,0,299,0,0,299,0,0,300,0,0,300,0,0,301,0,0,301,0,-1,302,0,0,302,0,0,302,0,0,302,0,3,303,0,3,304,0,3,305,0,3,306,0,3,307,0,0,308,0,0,308,0,-1,309,0,0,309,0,0,309,0,0,309,0,3,310,0,3,311,0,3,312,0,3,313,0,3,314,0,3,315,0,3,316,0,3,317,0,3,318,0,0,319,0,0,319,0,0,320,0,-2,746,0,23,746,0,0,320,0,0,321,0,0,322,0,0,322,0,0,322,0,0,323,0,0,323,0,0,323,0,0,324,0,0,324,0,0,324,0,0,325,0,0,325,0,0,325,0,0,326,0,0,327,0,0,327,0,0,327,0,0,328,0,0,328,0,0,328,0,0,332,0,0,332,0,0,332,0,0,333,0,0,333,0,0,333,0,0,334,0,0,334,0,0,334,0,0,335,0,0,336,0,0,336,0,0,336,0,0,337,0,0,337,0,0,337,0,0,338,0,0,338,0,0,338,0,0,339,0,0,339,0,0,339,0,0,340,0,3,341,0,3,342,0,3,343,0,3,344,0,3,345,0,3,346,0,3,347,0,6,348,0,-3,791,0,3,349,0,3,350,0,3,351,0,3,352,0,3,353,0,3,354,0,3,355,0,6,356,0,6,356,0,3,357,0,3,358,0,3,359,0,3,360,0,3,361,0,3,362,0,3,363,0,0,364,0,0,364,0,0,364,0,0,365,0,0,365,0,-1,366,0,0,366,0,0,366,0,0,366,0,0,367,0,0,368,0,0,368,0,0,368,0,0,369,0,0,369,0,0,369,0,0,370,0,0,370,0,0,370,0,0,371,0,0,371,0,0,371,0,0,372,0,0,372,0,-1,373,0,0,373,0,0,373,0,0,373,0,0,374,0,-2,815,0,23,815,0,0,374,0,0,375,0,0,376,0,0,376,0,0,376,0,0,377,0,0,377,0,0,377,0,0,378,0,0,378,0,0,378,0,0,379,0,0,379,0,0,379,0,0,380,0,0,380,0,-1,600,0,0,381,0,0,381,0,-1,602,0,0,382,0,0,382,0,-1,607,0,0,383,0,0,383,0,-1,609,0,0,384,0,0,384,0,0,385,0,-2,825,0,23,825,0,0,385,0,0,386,0,-2,826,0,23,826,0,0,386,0,0,387,0,0,388,0,0,388,0,0,388,0,0,389,0,0,389,0,0,389,0,0,390,0,0,390,0,0,390,0,0,391,0,0,391,0,0,391,0,0,392,0,0,392,0,0,393,0,-1,622,0,-2,623,0,0,394,0,0,394,0,0,395,0,-2,649,0,0,396,0,-1,635,0,-2,636,0,0,397,0,-1,637,0,-2,398,0,0,398,0,0,398,0,0,399,0,-1,643,0,-2,646,0,0,400,0,0,400,0,0,401,0,0,401,0,0,401,0,0,402,0,0,402,0,0,402,0,0,403,0,0,403,0,0,404,0,0,404,0,0,405,0,-1,655,0,-2,656,0,0,406,0,0,406,0,0,407,0,-1,661,0,-2,662,0,0,408,0,-1,666,0,-2,667,0,0,409,0,0,409,0,0,410,0,-1,670,0,-2,671,0,0,411,0,0,411,0,0,412,0,0,412,0,0,413,0,0,413,0,0,414,0,0,414,0,0,415,0,0,415,0,0,416,0,0,416,0,0,417,0,0,417,0,0,418,0,0,418,0,0,419,0,0,419,0,0,420,0,0,420,0,0,421,0,0,421,0,0,422,0,0,422,0,0,423,0,0,423,0,0,424,0,0,424,0,0,425,0,0,425,0,0,426,0,0,426,0,0,427,0,0,427,0,0,428,0,0,428,0,0,429,0,0,429,0,0,430,0,0,430,0,0,431,0,0,431,0,0,432,0,0,432,0,0,433,0,0,433,0,0,434,0,0,434,0,0,435,0,0,435,0,0,436,0,0,436,0,0,437,0,0,437,0,0,438,0,0,438,0,0,439,0,0,439,0,0,440,0,0,440,0,0,441,0,0,441,0,0,442,0,0,442,0,0,443,0,0,443,0,0,444,0,0,444,0,0,445,0,0,445,0,0,446,0,0,446,0,0,447,0,0,447,0,0,448,0,0,448,0,0,449,0,0,449,0,0,450,0,0,450,0,0,451,0,0,451,0,0,452,0,0,452,0,0,453,0,0,453,0,0,454,0,0,454,0,0,455,0,0,455,0,0,456,0,0,456,0,0,457,0,0,457,0,0,458,0,0,458,0,0,459,0,0,459,0,0,460,0,0,460,0,0,461,0,0,461,0,0,462,0,0,462,0,0,463,0,0,463,0,0,464,0,0,464,0,0,465,0,0,465,0,0,466,0,0,466,0,0,467,0,0,467,0,0,468,0,0,468,0,0,469,0,0,469,0,0,470,0,0,470,0,0,471,0,0,471,0,0,472,0,0,472,0,0,473,0,0,473,0,0,474,0,0,474,0,0,475,0,0,475,0,0,476,0,-1,477,0,0,477,0,0,477,0,0,478,0,0,479,0,0,479,0,0,480,0,0,480,0,0,481,0,0,481,0,0,482,0,0,482,0,0,483,0,0,483,0,0,484,0,0,484,0,0,485,0,0,485,0,0,486,0,0,486,0,0,487,0,0,487,0,0,488,0,0,488,0,0,489,0,0,489,0,0,490,0,0,490,0,0,491,0,0,491,0,0,492,0,0,492,0,0,493,0,0,493,0,0,494,0,0,494,0,0,495,0,0,495,0,0,496,0,0,496,0,0,497,0,0,497,0,0,498,0,0,498,0,0,499,0,0,499,0,0,500,0,0,500,0,0,501,0,0,501,0,0,502,0,0,502,0,0,503,0,0,503,0,0,504,0,0,504,0,0,505,0,0,505,0,0,506,0,0,506,0,0,507,0,0,507,0,0,508,0,0,508,0,0,509,0,0,509,0,0,510,0,0,510,0,0,511,0,0,511,0,0,512,0,0,513,0,0,513,0,0,514,0,0,514,0,0,515,0,0,515,0,0,516,0,0,516,0,0,517,0,0,517,0,0,518,0,0,519,0,0,519,0,0,520,0,0,520,0,0,521,0,0,522,0,0,522,0,0,523,0,0,523,0,0,524,0,0,525,0,0,525,0,0,526,0,0,526,0,1,761,0,1,761,0,1,762,0,1,762,0,3,527,0,1,763,0,1,763,0,1,764,0,1,764,0,1,765,0,1,765,0,1,766,0,1,766,0,1,767,0,1,767,0,3,528,0,1,768,0,1,768,0,1,769,0,1,769,0,3,529,0,1,770,0,1,770,0,3,530,0,1,771,0,1,771,0,1,772,0,1,772,0,3,531,0,1,773,0,1,773,0,3,532,0,1,774,0,1,774,0,1,775,0,1,775,0,3,533,0,0,534,0,0,534,0,0,535,0,0,535,0,0,536,0,0,536,0,0,537,0,-1,538,0,-2,788,0,0,539,0,-1,540,0,-2,796,0,-1,542,0,-2,794,0,-1,792,0,-2,793,0,0,543,0,-1,544,0,-2,799,0,0,545,0,0,545,0,0,546,0,0,546,0,0,547,0,0,547,0,0,548,0,0,548,0,0,549,0,0,549,0,0,550,0,0,550,0,0,551,0,0,551,0,0,552,0,0,552,0,0,553,0,0,554,0,0,554,0,0,555,0,0,555,0,0,556,0,0,556,0,0,557,0,0,558,0,0,558,0,0,559,0,0,559,0,0,560,0,0,560,0,0,561,0,0,562,0,0,562,0,0,563,0,0,563,0,0,564,0,0,564,0,0,565,0,0,565,0,0,566,0,0,566,0,0,567,0,0,567,0,0,568,0,0,568,0,0,569,0,0,569,0,0,570,0,0,570,0,0,571,0,0,571,0,0,572,0,0,572,0,0,573,0,0,573,0,0,574,0,0,574,0,0,575,0,0,575,0,0,576,0,0,577,0,0,577,0,0,578,0,0,578,0,0,579,0,0,579,0,0,580,0,0,581,0,0,581,0,0,582,0,0,582,0,0,583,0,0,583,0,0,584,0,0,585,0,0,585,0,0,586,0,0,586,0,0,587,0,0,587,0,0,588,0,0,588,0,0,589,0,0,590,0,0,590,0,0,591,0,0,591,0,0,592,0,0,592,0,0,593,0,0,593,0,0,594,0,0,594,0,0,595,0,0,595,0,0,596,0,0,596,0,0,597,0,0,597,0,0,598,0,0,598,0,0,599,0,0,599,0,0,600,0,0,600,0,0,601,0,0,601,0,0,602,0,0,602,0,0,603,0,0,603,0,0,604,0,0,604,0,0,605,0,0,605,0,0,606,0,0,606,0,0,607,0,0,607,0,0,608,0,0,608,0,0,609,0,0,609,0,0,610,0,0,610,0,0,611,0,0,612,0,-1,613,0,0,613,0,59,824,0,0,613,0,0,614,0,0,615,0,0,616,0,0,616,0,0,617,0,0,617,0,0,618,0,0,618,0,0,619,0,0,619,0,0,620,0,0,620,0,0,621,0,0,621,0,0,622,0,0,622,0,0,623,0,0,623,0,0,624,0,0,624,0,0,625,0,0,625,0,0,626,0,0,626,0,0,627,0,0,627,0,0,628,0,0,628,0,0,629,0,0,629,0,0,630,0,0,630,0,0,631,0,0,631,0,0,632,0,0,632,0,0,633,0,0,633,0,0,634,0,0,634,0,0,635,0,0,635,0,0,636,0,0,636,0,0,637,0,0,637,0,0,638,0,-1,639,0,0,639,0,0,639,0,0,640,0,-1,641,0,0,641,0,0,641,0,0,642,0,0,642,0,0,643,0,5,644,0,0,643,0,0,644,0,0,645,0,0,646,0,0,646,0,0,647,0,-1,648,0,0,648,0,0,648,0,0,649,0,0,649,0,0,650,0,0,650,0,0,651,0,0,651,0,0,652,0,0,652,0,0,653,0,0,653,0,0,654,0,0,654,0,0,655,0,0,655,0,0,656,0,0,656,0,0,657,0,0,657,0,0,658,0,0,658,0,0,659,0,0,659,0,0,660,0,0,660,0,0,661,0,0,661,0,0,662,0,0,662,0,0,663,0,0,663,0,0,664,0,0,664,0,0,665,0,0,665,0,0,666,0,0,666,0,0,667,0,0,667,0,0,668,0,0,668,0,0,669,0,0,669,0,0,670,0,0,670,0,0,671,0,0,671,0,0,672,0,0,672,0,0,673,0,0,673,0,0,674,0,0,674,0,-1,783,0,7,783,0,-1,785,0,7,785,0,-1,787,0,7,787,0,-1,789,0,7,792,0,7,793,0,-1,795,0,7,795,0,-1,800,0,0,802,0,0,818,0,0,820,0,10,1,2,6,151,3,6,7,4,47,823,4,60,821,4,61,817,4,62,814,4,63,10,4,64,5,4,0,174,6,6,88,11,6,818,12,6,820,13,6,167,14,6,167,15,6,167,16,6,26,17,6,26,18,6,84,20,6,84,21,6,84,22,6,117,23,6,63,25,6,182,27,6,61,29,6,242,30,6,93,31,6,392,32,6,61,33,6,112,34,6,40,35,6,584,36,6,61,37,6,404,38,6,91,40,6,63,41,6,789,42,6,796,43,6,800,44,6,589,45,6,615,47,6,59,48,6,61,49,6,406,50,6,93,51,6,93,52,6,116,53,6,63,54,6,120,55,6,121,56,6,518,57,6,384,62,6,273,64,6,319,65,6,512,66,6,92,67,6,521,68,6,524,70,6,126,71,6,348,72,6,356,74,6,553,75,6,557,76,6,561,77,6,214,78,6,216,80,6,576,81,6,580,82,6,220,83,6,614,84,6,97,90,6,109,96,6,191,113,6,275,114,6,275,122,6,321,123,6,321,124,6,335,125,6,335,126,6,538,132,6,340,133,6,182,134,6,214,135,6,367,136,6,367,137,6,216,138,6,375,139,6,375,140,6,220,142,6,222,143,6,387,144,6,387,158,6,478,174,6,326,175,6,326,176,6,177,191,6,340,221,6,611,224,6,394,241,6,242,348,6,540,356,6,544,394,6,395,537,6,781,539,6,790,541,6,791,543,6,798,2590],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,675,676,677,679,680,681,682,683,742,743,744,745,746,747,748,749,751,753,755,757,760,776,777,778,779,780,801,803,804,805,806,807,808,809,810,811,812,813,815,816,814,819,821,821,821,821,822,817,817,817,817,823,823,823,823,825,826,824,827,828,829,830,831],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,2,2,2,2,2,11,4,-1,17,-1,-2,17,-1,-2,17,4,2,2,2,2,2,11,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,11,2,2,2,2,2,2,2,11,2,2,2,2,2,2,2,11,65,2,2,11,2,2,2,2,2,2,2,11,2,2,2,2,2,2,2,2,2,2,20,26,27,28,2,2,2,20,26,27,28,2,2,2,20,26,27,28,2,2,11,20,26,27,28,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,-1,-2,2,2,2,2,11,2,2,2,2,11,20,26,27,28,20,26,27,28,20,26,27,28,2,2,2,2,11,11,4,4,4,4,4,2,2,2,11,11,4,4,4,4,4,2,11,11,2,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,11,2,20,-1,17,-1,-2,-1,-2,-3,-4,-5,17,2,2,2,11,2,-1,-2,2,11,2,2,11,2,2,2,2,4,4,4,4,4,4,4,2,11,2,11,2,11,2,2,2,2,2,2,2,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,4,9,-1,-2,17,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,4,9,-1,17,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,17,2,11,2,2,2,2,2,2,2,11,2,2,11,2,11,2,2,2,11,2,-1,17,2,2,11,2,-1,17,2,2,11,2,-1,17,11,11,2,2,2,11,2,-1,17,-1,-2,-3,-4,-5,-6,-7,17,40,2,2,2,2,2,2,2,2,2,2,2,2,11,2,2,11,2,2,2,11,2,-1,17,2,2,11,2,-1,17,-1,-2,-3,17,40,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,2,20,-1,17,-1,-2,-3,2,2,11,2,-1,17,2,2,2,2,11,11,11,11,-1,-2,2,2,2,2,11,11,11,11,2,2,66,67,2,2,2,2,2,2,2,2,2,2,11,2,20,-1,17,2,2,11,2,-1,17,2,2,2,2,2,2,2,2,2,2,2,2,-1,-2,17,-1,2,20,26,27,28,2,2,2,20,26,27,28,2,2,2,20,26,27,28,2,2,2,20,26,27,28,-1,-2,-3,2,2,2,2,2,2,-1,17,2,2,2,2,2,-1,17,2,2,2,2,2,2,2,2,2,2,-1,17,-1,-2,-3,17,-1,-2,-3,-4,-5,-6,17,11,11,11,11,11,11,11,11,11,24,24,24,11,24,24,24,24,24,11,11,11,11,11,11,11,11,11,11,20,20,20,20,24,11,11,20,20,24,11,24,20,24,20,26,27,28,24,20,26,27,28,20,26,27,28,11,11,20,24,24,24,24,24],[28,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,0,2,275,276,0,4,78,2,277,79,79,79,176,176,79,177,177,178,80,0,0,4,70,2,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,2,0,0,0,0,0,0,0,2,0,28,278,0,0,0,28,2,279,280,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,4,122,0,11,20,21,0,4,123,0,11,20,21,0,4,70,0,11,20,21,0,4,2,0,11,20,21,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,4,0,18,18,2,81,74,4,0,18,18,2,4,0,18,18,2,0,11,20,21,0,11,20,21,0,11,20,21,51,80,0,0,2,2,15,15,15,15,15,4,0,0,2,2,15,15,15,15,15,4,2,2,4,15,15,15,15,15,0,0,0,0,0,0,0,0,4,4,2,0,0,12,12,179,180,181,182,183,184,124,124,4,78,57,2,71,185,186,57,2,71,57,2,71,49,53,49,29,29,29,29,29,29,29,0,2,0,2,0,2,0,0,0,0,0,0,0,82,1,83,1,84,1,85,1,86,1,87,1,88,1,14,13,7,5,35,33,43,1,58,44,58,89,1,90,1,91,1,92,1,93,1,94,1,95,1,72,63,36,34,36,34,43,1,44,44,96,1,97,1,98,1,99,1,100,1,101,1,102,1,43,1,59,59,0,2,0,0,0,4,4,0,54,2,53,49,2,0,2,0,4,4,2,0,12,12,4,4,2,0,12,12,4,4,2,0,12,12,2,2,0,4,4,2,0,12,12,103,104,105,106,107,64,108,64,37,0,0,0,0,0,0,0,0,4,4,0,54,2,53,49,2,0,4,4,2,0,12,12,4,4,2,0,12,12,75,76,76,75,37,0,0,0,0,0,0,0,0,4,4,0,54,4,4,2,0,0,12,12,125,126,127,4,4,2,0,12,12,4,0,4,4,2,2,2,2,128,129,4,0,4,4,2,2,2,2,187,0,57,281,0,0,0,0,0,0,0,0,4,4,2,0,0,12,12,4,4,2,0,12,12,18,18,0,18,70,65,65,65,65,65,65,65,60,188,188,189,282,0,11,20,21,0,4,70,0,11,20,21,0,4,122,0,11,20,21,0,4,123,0,11,20,21,190,191,192,18,18,0,0,18,193,60,60,18,18,0,18,193,60,60,18,18,0,18,70,18,18,0,18,283,109,109,284,109,60,60,194,195,196,197,198,130,130,2,2,2,2,2,2,2,2,2,55,55,55,2,285,286,131,131,131,2,2,2,2,2,2,2,2,2,2,0,0,0,0,132,2,2,0,0,199,2,200,0,110,0,11,20,21,110,0,11,20,21,0,11,20,21,2,2,0,287,288,201,201,289]],[[[76],[55,"SM_BlockSlot_02",[-2],[3,"b2NVzD9jpfBKZ43/7JApbk",-1,0]],[64,"SM_BlockSlot_02",1,[[62,-3,[1,"34IQ6xxWhUH7mqUbH//+fB"],[0],[45],1]],[3,"37mZW2bwxaSagLv3W02SBX",1,0],[3,-2.6692540190908936e-8,0.707106781186547,0.707106781186547,2.6692538414552064e-8],[1,-90,179.99999567428884,-1.4393547659025915e-13]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[290,291]],[[[68,".bin",3132816399,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.480355829000473,-0.4800005257129669,-0.5042211413383484],"maxPosition",8,[1,0.480355829000473,0.4799993336200714,0.7500349879264832]]],-1],0,0,[],[],[]],[[[77,"SM_BlockSlot_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-Tank-0"],[152,"P-Tank-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Tank-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"e2Vx3eAWdfubrymQP2YNGI",-32,[81,"e3W5lzh8hCH7eruj3pDf6w",1,[[75,[2,["e2Vx3eAWdfubrymQP2YNGI"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.156,0.096]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["bboftuCNdUUatqfu6RAfMf"]],3],[17,"SM_Model",["_name"],[2,["b9niJVKBFTDZ9RF32cDoT7"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["e2Vx3eAWdfubrymQP2YNGI"]],[42,"VFX",2,[-36,-37,-38],[3,"d9ZkpoC2pJn7w3gewNith6",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"16FZkL9M9HpLq2tUizS4F2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"707ZSkI/hJHJfqatLGBCvg"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"8dXqS4IgNPyIvfggW4YmMe",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"b6osVoOgZBY5gXrp1M8qF3"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"eaQFxBWKJLVIAuQg4qVQ1E",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"86i+Vo7X9GnKjybtt3kN7h"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"0feJLVPKNM6oTxb+tw2csn",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"bfR5CqSi9Ij5TM6aedXZ5y"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"28soN4/3dCSrvESRPhLG3V"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"f3ZDQ6ZzNAmKD4x1E2LdXE",1,0]],[145,23,[1,"bdJ8lagfFD1IRl0AvbP5/K"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,292,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[68,".bin",3202047423,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22080,"length":2832,"count":708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22080,"count":460,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3262602686882019,-0.49553847312927246,-0.014412163756787777],"maxPosition",8,[1,0.3262602686882019,0.30453139543533325,0.47115495800971985]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyShielder_02",[-2],[3,"6aGvFRzrhcy6Pvc0BNb/OY",-1,0]],[64,"SM_EnemyShielder_02",1,[[62,-3,[1,"b1gGjB+ixTeo5mURKnQwqu"],[0],[45],1]],[3,"cdMyiT4ZBYyoo8D8TLDR7U",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[293,294]],[[[77,"SM_EnemyShielder_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[13,32]],[[[58,"P-Tutorial-UI"],[226,"P-Tutorial-UI",[-7,-8,-9],[[9,-3,[1,"20iBUCHDJJaYQCiL1tSooD"],[5,414,896]],[340,-4,[1,"6aiasFkepOaYk1YQ/gCYUV"]],[310,-5,[1,"45m/6LdalCvo22uLCjt9fA"]],[128,45,414,896,-6,[1,"22Xw9nRWFGYaCj97/+beLa"]]],[240,"c6vKOiB3JG7pMlMy/WnSzq",-2,0,[-1]],[1,207,448,0]],[416,"Content Holder",false,1,[-13],[[9,-10,[1,"63YMPCN7lM/qS+yhx3+4Cy"],[5,414,896]],[172,45,100,100,1,-11,[1,"f0M65yzA5H6L2WYXJlVgK7"]],[57,-12,[1,"ceV3TSRWpDjalilR3uwTZW"]]],[3,"f31x3WssNLGZIb8Xrl5akp",1,0]],[141,"Tutorial UI",[[48,-14,[1,"b1Iu1iRYBNhInUyEDuuK3D"]],[631,-16,[1,"e7G1zfGztLdIt2yoXd1fvh"],2,-15,[1,0,20,0],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",2]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",2]],[1,-120,11,0],[1,-120,8,0],[1,2,2,2],[1,1.5,1.5,1.5]]],[3,"cbIpdvwERK8algjbr0/o02",1,0]],[188,"Pointer Pivot",2,[-18],[[48,-17,[1,"b9PfOAZgFN6p0BKEDc5YB7"]]],[3,"e6ZP+HlqdMZquKrpM++xVu",1,0],[1,2,2,2]],[198,"Events",1,[-20,-21],[[48,-19,[1,"3bWbuz9u1G/YJ2TR9LhQOs"]]],[3,"54Wma65O1M9ZaIzAoWYNV7",1,0]],[30,0,{},4,[22,"a6yEVxZJJG26dGeFT9ITlD",-22,[49,"8240yl+fRK3aHsoQVsnuWy",1,[[17,"Holder_TutorialPointer",["_name"],[2,["a6yEVxZJJG26dGeFT9ITlD"]]],[14,["_lpos"],[2,["a6yEVxZJJG26dGeFT9ITlD"]],[1,0,0,0]],[14,["_lrot"],[2,["a6yEVxZJJG26dGeFT9ITlD"]],[3,0,0,0,1]],[14,["_euler"],[2,["a6yEVxZJJG26dGeFT9ITlD"]],[1,0,0,0]],[14,["_lscale"],[2,["a6yEVxZJJG26dGeFT9ITlD"]],[1,1.5,1.5,1.5]]]],0]],[198,"Scripts",1,[3],[[48,-23,[1,"bcFwnByXBIna9Kd8GCksym"]]],[3,"e1H7ux78JAu7clj4rkATlA",1,0]],[65,"On Show Tutorial UI",5,[[48,-24,[1,"56B548PaVCYZOxB6hvr4Mc"]],[298,1,-25,[1,"6fBIEnxvdFfpxLEG7ablfr"],[[8,"4dee2eFUPZHNKQRW/WBo2uh","showTutorial",3]]]],[3,"d5d2lANblAzrPWadEMemjp",1,0]],[65,"On Hide Tutorial UI",5,[[48,-26,[1,"7faaFayKBGtqYjWbnl58RV"]],[298,2,-27,[1,"e8HDWETpNKeoHVW4ud4H+1"],[[8,"4dee2eFUPZHNKQRW/WBo2uh","hideTutorial",3]]]],[3,"2dkYEJp55Ieo9V5OTl3vpR",1,0]]],0,[0,-1,6,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,7,0,-3,5,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,68,4,0,0,3,0,0,4,0,-1,6,0,0,5,0,-1,8,0,-2,9,0,3,6,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,10,1,3,6,7,27],[0],[4],[295]],[[[76],[55,"SM_BlockHigh_01",[-2],[3,"4fecgAd2JbDKVfOw0g/xbW",-1,0]],[64,"SM_BlockHigh_01",1,[[62,-3,[1,"14k8y0SLpdaroj+3hWQPNc"],[0],[45],1]],[3,"70Ylc7qvBfZ5AmY0ZQiblV",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[296,297]],[[[77,"SM_BlockHigh_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",96772131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[58,"P-Charger-0"],[152,"P-Charger-0",[[-17,-18,[98,"Events",-20,[3,"d95EadoVJHU5W5txftTQiE",-19,0]],-21],1,1,4,1],[[192,"Charger-0",-12,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-10],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-11]],-9,-8,-7],[57,-13,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-14,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-15,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-16,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[89,["_uiFillbar"],-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]],[67,["_uiFillbar"],-5,-4,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-23,-24,-25,-26],[[88,true,-22,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.8,0.8,0.9]],[151,"Movement",[-27],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"47/vCPei5Z0pNlzjcP769r",-33,[81,"2dWvjB8YBKI6kYyQUD7vy6",1,[[75,[2,["47/vCPei5Z0pNlzjcP769r"]],[[57,-32,[1,"2ajwjctx5IW6AMGuVyRmVa"]]]]],[[11,"SM_Model",["_name"],-28],[5,["_lpos"],-29,[1,0,-0.2,0]],[5,["_lrot"],-30,[3,0,0,0,1]],[5,["_euler"],-31,[1,0,0,0]],[35,["_materials","0"],[2,["f9Xsbslq5Th7Btq+30Q0l1"]],3],[17,"SM_Model",["_name"],[2,["477ZEAbpBWqKxecVErE+OB"]]]]],2]],[42,"Scripts",1,[3,-34,-35,-36],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-44,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-43]]]],[[11,"P-HP-Bar",["_name"],-37],[5,["_lpos"],-38,[1,207,448.00000000000006,0]],[5,["_lrot"],-39,[3,0,0,0,1]],[5,["_euler"],-40,[1,0,0,0]],[11,"Art",["_name"],-41],[5,["_lpos"],-42,[1,0,0,0]]]],15]],[2,["47/vCPei5Z0pNlzjcP769r"]],[42,"VFX",2,[-45,-46,-47],[3,"a1ot4e1udAXrTsrBjAKrTt",1,0]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",8,[-48],[3,"daLZ/hXbJJfoy4KXFSWLws",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"d8lsEeiDVGfruo9NRiUWPg"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-49],[31,5]],[73,"VFX_Death_Shards",8,[-50],[3,"93bHCeswpBF66BwRmxKjg9",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"3d1PiZ1VZCyImTxi34Pepd"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-51],[31,7]],[73,"VFX_Spawn",8,[-52,-53],[3,"c5td+BlsVEq7jToHuvGjRi",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-54],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-56,[1,"c9l4cVkoZLpIyzBWz0xc39"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"b5CNz8jTJAIYV5ToU8oUC7",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"5cG8W8SMpPF7FiZNr7D3mx"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[119,0.3,false,14,[1,"e6vX5qL8tOJ7te2Ox7sEXm"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-60],[3,"99I1Zo/vdAm7/Bx4k/FYm1",1,0]],[145,23,[1,"85A7cGTX9EdKy+E/GhQIgm"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[6],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,6,0,5,6,0,5,6,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,8,0,-1,22,0,1,7,0,1,7,0,1,7,0,1,7,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,6,0,-1,10,0,-2,12,0,-3,14,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,6,6,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,298,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"01-Spawn-Block"],[305,"01-Spawn-Block",1,[[-18,-19,[98,"Events",-21,[3,"17hZ64eStLi5TsnqtqoZ+k",-20,0]]],1,1,4],[[632,-17,[1,"d7yKZ8K6pLkpamQxPVZaFc"],[[8,"cc.ParticleSystem","stop",-11],[8,"cc.ParticleSystem","stop",-12],[8,"cc.ParticleSystem","play",-13],[8,"cc.ParticleSystem","play",-14],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","spawn",-15],[8,"b6b88lnaNhOIYa+C0LFNa5B","play",-16]]]],[105,"48QkzTb+tG8q5w9MSR0TZW",-10,0,[[71,["_trailModule","_particleSystem"],-7,[2,["f0+hCeEKVE6J/NoOq2mqJ/"]],-6,[2,["f0+hCeEKVE6J/NoOq2mqJ/"]]],[71,["_trailModule","_particleSystem"],-9,[2,["99xgn7dCNMd7AAcAtPwKYN"]],-8,[2,["99xgn7dCNMd7AAcAtPwKYN"]]]],[-1,-2,-3,-4,-5]]],[90,0,null,[22,"8eEEusTA5fJb9F/OdJ08Sj",-29,[447,"30AJDJEdRB/bM2FB/7+HFH",1,[[266,[2,["8eEEusTA5fJb9F/OdJ08Sj"]],[-26,-27,-28]]],[[17,"SM_Portal_01",["_name"],[2,["8eEEusTA5fJb9F/OdJ08Sj"]]],[14,["_lpos"],[2,["8eEEusTA5fJb9F/OdJ08Sj"]],[1,0,0.2,0]],[14,["_lrot"],[2,["8eEEusTA5fJb9F/OdJ08Sj"]],[3,0,1,0,6.123233995736766e-17]],[14,["_euler"],[2,["8eEEusTA5fJb9F/OdJ08Sj"]],[1,0,180,0]],[35,["_materials","0"],[2,["63JiEgzJZUH4IaEhPAqvsa"]],15],[11,true,["_active"],-22],[5,["_lrot"],-23,[3,-4.329780281177467e-17,0.7071067811865475,0.7071067811865476,4.329780281177466e-17]],[5,["_euler"],-24,[1,-90.00000000000001,180,0]],[5,["_lscale"],-25,[1,0.9,0.9,0.9]]]],8]],[426,"Art",1,[-34,-35,-36,-37,2],[[[383,false,true,-30,[1,"9cuWZkrJ1BxIisMD4JDLco"],[16,17],18],-31,[107,-33,[1,"01MV2X6LRGLZ2koUqTZyzO"],-32]],4,1,4],[3,"291Y8lpGJN47v3TqcDCU5K",1,0]],[267,"Spawn Audio Controller",[-42,-43,-44],[[633,-41,[1,"5fAzjd81xCZYRANE9WeBiB"],[-38,-39,-40]]],[3,"95iJyKE3BM9rFDxFVa+pt0",1,0]],[2,["38TprYPCRWppYLEJoooZq3"]],[2,["fefPIkSBJemp8PPyjHLGkW"]],[2,["e9QGVwjwRRNYH2wTOhd0ZX"]],[189,"VFX_Portal_Pulse",2,[-45],[3,"04MDWxsSpCML6vdXcYligV",1,0],[1,0,0.6665253933427757,-0.09312840613506823],[3,4.246831410616657e-18,0.9975919719272859,-0.06935602025944895,-6.108489076379235e-17],[1,7.953999999999998,-180,9.709583258330843e-16]],[189,"VFX_Portal_Burst",2,[-46],[3,"0d1ckjLnlCmqS65tdqkXTY",1,0],[1,0,0.6665253933427757,-0.09312840613506823],[3,4.246831410616657e-18,0.9975919719272859,-0.06935602025944895,-6.108489076379235e-17],[1,7.953999999999998,-180,9.709583258330843e-16]],[512,0,2,[22,"60ciIzpkBUBJz6DMJ4URqe",-48,[447,"ebyePzCbNPnpeGKPAc8jnb",2,[[266,[2,["60ciIzpkBUBJz6DMJ4URqe"]],[-47]]],[[14,["_lpos"],[2,["60ciIzpkBUBJz6DMJ4URqe"]],[1,0,0.624,0.121]],[17,"SM_PortalVFX",["_name"],[2,["60ciIzpkBUBJz6DMJ4URqe"]]],[14,["_lrot"],[2,["60ciIzpkBUBJz6DMJ4URqe"]],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17]],[14,["_euler"],[2,["60ciIzpkBUBJz6DMJ4URqe"]],[1,-90,180,0]],[35,["_materials","0"],[2,["62L0kXUTlVnL/DCq3Kmz1z"]],14],[14,["_lrot"],[2,["6ftKokXEVS274EdU6PgUr7"]],[3,0,0,0,1]],[14,["_euler"],[2,["6ftKokXEVS274EdU6PgUr7"]],[1,0,0,0]],[17,true,["_active"],[2,["6ftKokXEVS274EdU6PgUr7"]]]]],11],[{},"mountedRoot",1,2]],[2,["25hFHXaUhVr4TfyO0rKYFI"]],[42,"1",3,[-49],[3,"a9wIVIeLdHC72VuFsucL4d",1,0]],[30,0,null,12,[22,"38TprYPCRWppYLEJoooZq3",-50,[49,"e6Ja9u9X1PWrl/bQJ+zFkk",1,[[11,"SM_BlockPath_01",["_name"],5],[5,["_lpos"],5,[1,0,0,0]],[5,["_lrot"],5,[3,0,0,0,1]],[5,["_euler"],5,[1,0,0,0]],[35,["_materials","0"],[2,["c6ETENbq5XL5UBZI2bIgRH"]],3]]],2]],[99,"2",false,3,[-51],[3,"02iRx/50BKW48FNNNNZ9sY",1,0]],[30,0,null,14,[22,"fefPIkSBJemp8PPyjHLGkW",-52,[49,"a60e7dRVpKCr6z5+YRyT10",1,[[11,"SM_BlockPath_02",["_name"],6],[5,["_lpos"],6,[1,0,0,0]],[5,["_lrot"],6,[3,0,0,0,1]],[5,["_euler"],6,[1,0,0,0]],[35,["_materials","0"],[2,["c2E9Ka2cRe7YGAxkqvC+yR"]],5]]],4]],[99,"3",false,3,[-53],[3,"55a9BlQBxGq4FzBA8+oxFP",1,0]],[30,0,null,16,[22,"e9QGVwjwRRNYH2wTOhd0ZX",-54,[49,"e8Mbi12ZpCy7PtlgJh3/Nc",1,[[11,"SM_BlockPath_03",["_name"],7],[5,["_lpos"],7,[1,0,0,0]],[5,["_lrot"],7,[3,0,0,0,1]],[5,["_euler"],7,[1,0,0,0]],[35,["_materials","0"],[2,["0fKTIDFQVVW7qzAtQnZb77"]],7]]],6]],[42,"Scripts",1,[-55,-56],[3,"d6exBUN41Ctqdb8i/hFGhH",1,0]],[237,"TEMP-Model",false,3,[[95,"Cube<ModelComponent>",-57,[1,"dao43H3BBPYq0RywEDIi8I"],[0],[45],1]],[3,"24gMl5J9RC56CYwns4cJxH",1,0]],[547,true,true,0.05,false,false,0,8,[1,"f0+hCeEKVE6J/NoOq2mqJ/"],[9],[66,[4,4060086271]],[4,1.2],[4,1.2],[4,1.2],[0],[4,-1.7453292519943295],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]],[338,0.03,[4,1]],[338,0.04,[4,1]]],[25,true,[20,1,[39,[[51,0.09598214285714286],[18,0.16964285714285715,[4,4294135103]],[18,0.5178571428571428,[4,4293005769]],[18,1,[4,4294377541]]],[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,0.27692307692307694,0.9974358974358974],[[40,2,0.3037037037037037,1.7814814814814819,1,1.7814814814814819,1],[7,2,0.7037037037037037,0.6230936819172115,0.6230936819172115],[87,2,0.8777777777777778,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[556,4,0,10]],[538,0.05,false,false,13.252995296045448,12.965953036697236,15.941608469635835,0,9,[1,"99xgn7dCNMd7AAcAtPwKYN"],[336,2,[4,4294901882],[4,4293836223]],[27,3,0.03,0.1],[0],[0],[4,3],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[4,0.2],[0],[0],[[29,[4,10]]],[25,true,[20,1,[50,[[12,255,0.46205357142857145],[12,0,1]]]]],[132,true,0,0.5,1,0.6108652381980153,[0],[1,160,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-10.471975511965978,10.471975511965978]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[131]],[417,"SM_PortalVFX-001",false,10,[[62,-60,[1,"85d6KfV4NO8b72iG5Dh5z3"],[12],[45],13]],[3,"93q8JwKwNNu6eJz1j4Nvnk",1,0],[1,0,-0.033,0],[1,2.392,2.392,2.392]],[100,3,[1,"91L+1LnzVFRZHUVhgkDwBf"]],[42,"Audio",18,[4],[3,"37lWiHH/dCrZ8zrzjQlci9",1,0]],[56,"Tier 1 Spawn VFX",4,[-61],[3,"56cbUMq3tI97wmuvHb/xUZ",1,0]],[139,"sfx-enemy-t1spawned",25,[1,"77nUvyv8hJU6ctVvrMU9Pi"]],[56,"Tier 2 Spawn VFX",4,[-62],[3,"5aM+qfOsZI27RTQvzC1JST",1,0]],[139,"sfx-enemy-t2spawned",27,[1,"ceFqnnWJdB/6o0yn+w/U3t"]],[56,"Tier 3 Spawn VFX",4,[-63],[3,"97rpc/palP8IDVSgy+RICU",1,0]],[139,"sfx-enemy-t3spawned",29,[1,"a6ctwwbCtFuorL55SFoavM"]],[65,"Theme Model Chooser",18,[[174,-64,[1,"e2NYiRZ3JOW45cXUVm/O4w"],[12,14,16],19]],[3,"7dvjDmznBEuotGxoEH8QM/",1,0]]],0,[0,-1,13,0,-2,15,0,-3,17,0,-4,2,0,-5,10,0,5,2,0,13,2,0,5,2,0,13,2,0,3,1,0,5,8,0,5,9,0,5,8,0,5,9,0,5,3,0,5,4,0,0,1,0,-1,3,0,-2,18,0,3,1,0,6,1,0,1,11,0,1,11,0,1,11,0,1,11,0,-1,8,0,-2,9,0,-3,10,0,3,2,0,0,3,0,-2,23,0,25,23,0,0,3,0,-1,19,0,-2,12,0,-3,14,0,-4,16,0,-1,26,0,-2,28,0,-3,30,0,0,4,0,-1,25,0,-2,27,0,-3,29,0,-1,20,0,-1,21,0,-1,22,0,3,10,0,-1,13,0,3,13,0,-1,15,0,3,15,0,-1,17,0,3,17,0,-1,24,0,-2,31,0,0,19,0,7,20,0,7,21,0,0,22,0,-1,26,0,-1,28,0,-1,30,0,0,31,0,10,1,2,6,3,4,6,24,64],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23],[-1,12,4,9,4,9,4,9,4,-1,12,4,-1,12,9,9,-1,-2,17,39,24],[299,40,111,1,133,17,134,17,300,301,135,302,303,135,304,1,136,137,136,31,305]],[[[58,"SM_TowerPulsarBody_01"],[55,"SM_TowerPulsarBody_01",[-2],[3,"27Yce2+45c87fcrQ+S23Kt",-1,0]],[64,"SM_TowerPulsarBody_01",1,[[62,-3,[1,"c1qYGglmVbiJ63kvX3SnJg"],[0],[45],1]],[3,"72+J2CTu9RoYwXYPv5sSUS",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,202]],[[[76],[55,"SM_EnemyOvercharger_02",[-2],[3,"7862h+dgVbk5QFM+q8blZa",-1,0]],[64,"SM_EnemyOvercharger_02",1,[[62,-3,[1,"33p2XKWl9b4LU6vlryeMiU"],[0],[45],1]],[3,"29mesNITFSQo4+2eDCD29U",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[306,307]],[[[77,"SM_EnemyOvercharger_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",1537439293,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[58,"P-Breeder"],[228,"P-Breeder",[[-12,-13,[98,"Events",-15,[3,"d95EadoVJHU5W5txftTQiE",-14,0]],-16],1,1,4,1],[[-7,[57,-8,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-9,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-10,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-11,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[89,["_uiFillbar"],-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]],[67,["_uiFillbar"],-5,-4,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[3,"c5rhX95KFBXIpHLlo3ruG3",1,0]],[523,"Art",1,[[-34,-35,-36,2,[102,"Enemies Spawn Position",-37,[3,"e0bNsYvSRDwaKMS8olrA8Z",1,0],[1,0,0,0.419]]],1,1,1,1,4],[[[88,true,-30,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-31,[107,-33,[1,"d7QMGjhZxNUp3OSUF+ad5b"],-32]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-38,-39,-40,-41,-42,-43],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-44],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-52,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-51]]]],[[11,"P-HP-Bar",["_name"],-45],[5,["_lpos"],-46,[1,207,448.00000000000006,0]],[5,["_lrot"],-47,[3,0,0,0,1]],[5,["_euler"],-48,[1,0,0,0]],[11,"Art",["_name"],-49],[5,["_lpos"],-50,[1,0,0,0]]]],36]],[30,0,null,3,[22,"b6WuSZggVbVqyZ36EcrJAQ",-58,[81,"38F42bNgBIqLLMRqoYEjVo",1,[[75,[2,["b6WuSZggVbVqyZ36EcrJAQ"]],[[57,-57,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-53],[5,["_lpos"],-54,[1,0,0,0]],[5,["_lrot"],-55,[3,0,0,0,1]],[5,["_euler"],-56,[1,0,0,0]],[35,["_materials","0"],[2,["14dCZuzQ5ZrYZb8GT6TPbg"]],3],[17,"SM_Model",["_name"],[2,["eaqOmHLtpfApf7fFMjgxn8"]]]]],2]],[2,["b6WuSZggVbVqyZ36EcrJAQ"]],[141,"Spawn Enemies",[[235,-60,[1,"87jCA6gT5DX6gWR4NOT2E4"],-59]],[3,"ffxZLVqW5MV7VDXxqA7RNt",1,0]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-61,-62],[3,"7b89QRo8RNgaZeJfQZUoep",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[113,"VFX-BossExplosion",512,2,[-63],[3,"71YNHxOytCdIEz/LHuCbi3",1,0]],[86,0.2,false,false,12,[1,"16JAXOnPFDC6opJukLvOdu"],[[8,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-64],[31,9]],[79,"VFX-Flash",512,2,[-65],[3,"d8pZWR01RM67gZJRq1ErT6",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,14,[1,"914AUJ9atDnq2dmKuv82i3"],[[10,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-66],[31,11]],[79,"VFX_SprayOut",512,2,[-67],[3,"0e+3DrbrBOS4qLMrGvcUxv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,16,[1,"e53gSY1WxNUaRUYP7ZwS2f"],[12],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-68],[121,1,0.1,13]],[113,"VFX_Explosion2",512,2,[-69],[3,"d9IcX2zsdJZa1o8hcb8dq7",1,0]],[86,1.5,false,false,18,[1,"45NKNvw2BEIrB9DmBsQ8ZO"],[[14,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-70],[31,15]],[79,"VFX_SprayOut2",512,2,[-71],[3,"f8yaGBbX5JxozcDFq7/A5r",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,20,[1,"c0RxASv7hHM468k7mlZvEh"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-72],[121,1,0.1,17]],[79,"VFX-ScreenTone",512,2,[-73],[3,"f5IF//ylBCgYBzZlM/MNQm",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,22,[1,"c6djGwZhFMGoMdP5TFP5yl"],[[18,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-74],[31,19]],[113,"VFX-CircleIn",512,2,[-75],[3,"fdTyQ03h9EgbCn6pM6YNXR",1,0]],[86,0.4,false,false,24,[1,"fahkQLtKtO8re8woeBCI7I"],[[20,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-76],[31,21]],[113,"VFX-RingIn",512,2,[-77],[3,"9a+bAL/V1EXJYP0Hb0youI",1,0]],[86,0.4,false,false,26,[1,"a3/zpCDI9JvYsHpTrFodvM"],[[22,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-78],[31,23]],[79,"VFX_SprayIn",512,2,[-79],[3,"0aAXxcWj1DtoISSbe8pmGb",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,28,[1,"ebC240/PdJz6/cRw49cINI"],[24],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-80],[121,1,0.5,25]],[79,"VFX-ChargeFlash",512,2,[-81],[3,"44zx5OYIhC74qftA8/mDPp",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,30,[1,"1ce66jhulC9rH1jDVFuF5w"],[26],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-82],[31,27]],[79,"VFX-Sparkle",512,2,[-83],[3,"e97fkrhtNOlKyP86WbN+7T",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,32,[1,"71viSxu+9EK6N8gQYYAezO"],[[28,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-84],[31,29]],[79,"VFX_LightRay",512,2,[-85],[3,"91Gr8WwsJEy5OnRKUu9OoQ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,34,[1,"deB2xqb3ZIy4ssqAOPdP/s"],[30],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-86],[31,31]],[56,"HP Controller",4,[-87],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,36,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-88],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"cc.ParticleSystem","play",14],[8,"cc.ParticleSystem","play",16],[8,"cc.ParticleSystem","play",18],[8,"cc.ParticleSystem","play",20],[8,"cc.ParticleSystem","play",22],[8,"cc.ParticleSystem","play",24],[8,"cc.ParticleSystem","play",26],[8,"cc.ParticleSystem","play",28],[8,"cc.ParticleSystem","play",30],[8,"cc.ParticleSystem","play",32],[8,"cc.ParticleSystem","play",34],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[65,"On Death VFX Finished",4,[[118,-89,[1,"1c94P/9eNOnKMdwedezrwP"],[13,15,17,19,21,23,25,27,31,33,35,29],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"abDul2IhJLE7TbKPJWRI9/",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-90,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,11,[1,"9eCkO4cvtOB4cvAvF666O9"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-91],[31,5]],[119,0.3,false,11,[1,"c0IiSJ1zZFTpYrxDRtxE+K"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-92],[31,7]],[100,3,[1,"00dGFwSCpHFoeOaaN9KBHL"]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",4,[-93],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,45,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[42,"Specials",4,[9],[3,"2ebRPuFe1B9YasOeQWQ5E4",1,0]],[234,"Breeder",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",36],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",9]],37,44,46],[65,"Timer",4,[[469,true,3,-94,[1,"25JVNzj3tNd6zm9dbqCyu7"],[[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",9]]]],[3,"4c2cpRnkxGibiOVX7ehJoZ",1,0]],[42,"UI",1,[6],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,7,0,-2,6,0,5,6,0,5,6,0,13,37,0,3,1,0,-1,48,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,50,0,-1,11,0,-2,12,0,-3,14,0,-4,16,0,-5,18,0,-6,20,0,-7,22,0,-8,24,0,-9,26,0,-10,28,0,-11,30,0,-12,32,0,-13,34,0,0,3,0,-2,43,0,25,43,0,0,3,0,-1,39,0,-2,40,0,-3,7,0,6,3,0,-1,5,0,-2,36,0,-3,45,0,-4,38,0,-5,47,0,-6,49,0,-1,44,0,1,10,0,1,10,0,1,10,0,1,10,0,1,51,0,1,51,0,19,40,0,3,6,0,1,8,0,1,8,0,1,8,0,1,8,0,0,7,0,3,7,0,41,48,0,0,9,0,-1,41,0,-2,42,0,-1,13,0,7,13,0,-1,15,0,7,15,0,-1,17,0,7,17,0,-1,19,0,7,19,0,-1,21,0,7,21,0,-1,23,0,7,23,0,-1,25,0,7,25,0,-1,27,0,7,27,0,-1,29,0,7,29,0,-1,31,0,7,31,0,-1,33,0,7,33,0,-1,35,0,7,35,0,-1,37,0,5,38,0,0,38,0,0,39,0,7,41,0,7,42,0,-1,46,0,0,49,0,10,1,2,6,3,6,6,50,9,6,47,94],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,308,1,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,66,8,24,73]],[[[58,"P-BossTank2"],[152,"P-BossTank2",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"BossTank2",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[3,"699XV1OrFNZLhs0FweW8lS",1,0]],[304,"Art",1,[-38,-39,-40,2],[[[88,true,-34,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-35,[107,-37,[1,"a6M9UNipdEC4E8dSeBHiBA"],-36]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-41],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[42,"Scripts",1,[4,-42,-43,-44],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[30,0,null,3,[22,"35q+F/UKRcsrrmbxiyg3c7",-50,[81,"2588HRIAVG9ZxDU4J9u1qL",1,[[75,[2,["35q+F/UKRcsrrmbxiyg3c7"]],[[57,-49,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-45],[5,["_lpos"],-46,[1,0,0,0]],[5,["_lrot"],-47,[3,0,0,0,1]],[5,["_euler"],-48,[1,0,0,0]],[35,["_materials","0"],[2,["e04xugrldTnbXkchKrSM5C"]],3],[17,"SM_Model",["_name"],[2,["34TgPiyp5WOaPkHMnfYRpy"]]]]],2]],[2,["35q+F/UKRcsrrmbxiyg3c7"]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-58,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-57]]]],[[11,"P-HP-Bar",["_name"],-51],[5,["_lpos"],-52,[1,207,448,0]],[5,["_lrot"],-53,[3,0,0,0,1]],[5,["_euler"],-54,[1,0,0,0]],[11,"Art",["_name"],-55],[5,["_lpos"],-56,[1,0,0,0]]]],36]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-59,-60],[3,"23y5FPp6VKcLsZqzoLeVvG",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[113,"VFX-BossExplosion",512,2,[-61],[3,"01pJEDG/xDzLRr3Ai9gG1y",1,0]],[86,0.2,false,false,11,[1,"ffYdtNZDtM16sbxGuhKDZL"],[[8,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-62],[31,9]],[79,"VFX-Flash",512,2,[-63],[3,"21pA0RXCFDT6WsEsTcPM5W",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,13,[1,"afBu2SQ+9BSbMEYTmM99XJ"],[[10,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-64],[31,11]],[79,"VFX_SprayOut",512,2,[-65],[3,"a5cr3TWQVA0aAvslUhCl6p",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,15,[1,"59k834I0hKXbjWk5tw2gM6"],[12],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-66],[121,1,0.1,13]],[113,"VFX_Explosion2",512,2,[-67],[3,"3dWb3WoAVOAJoyqCrlJkpw",1,0]],[86,1.5,false,false,17,[1,"28Ug5IJKxMF68Hxk7Zg8O+"],[[14,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-68],[31,15]],[79,"VFX_SprayOut2",512,2,[-69],[3,"debU/jCEtFR46DqrrpXM1N",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,19,[1,"c51jOelidHuI39HJd2fRlX"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-70],[121,1,0.1,17]],[79,"VFX-ScreenTone",512,2,[-71],[3,"44N+I9A9BNg5uw/Yz/EiZ4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,21,[1,"afHJgRKV9JXYipVuRb4OSF"],[[18,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-72],[31,19]],[113,"VFX-CircleIn",512,2,[-73],[3,"92v2LEe/dNaY6lEUqGs2/Z",1,0]],[86,0.4,false,false,23,[1,"17fGuSOFxIjo4rnLb98qf9"],[[20,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-74],[31,21]],[113,"VFX-RingIn",512,2,[-75],[3,"a0BlRHDJVFD7Zy8pe8Skri",1,0]],[86,0.4,false,false,25,[1,"81JlmZFbxNOItcuiC+KhwX"],[[22,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-76],[31,23]],[79,"VFX_SprayIn",512,2,[-77],[3,"fbaSzTlZlL9Yn0S/aSr2kf",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,27,[1,"2fzs9K8+hEybHk6iJ8rgdx"],[24],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[121,1,0.5,25]],[79,"VFX-ChargeFlash",512,2,[-79],[3,"f2Cen87MFBOL/r/97g+5qo",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,29,[1,"80TvbPBWpFeJQVbabs1aUk"],[26],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-80],[31,27]],[79,"VFX-Sparkle",512,2,[-81],[3,"5146BkGclCHLT92ykkH6XI",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,31,[1,"48usYlBqVOO45owholDhue"],[[28,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-82],[31,29]],[79,"VFX_LightRay",512,2,[-83],[3,"9c1ViIpeFJXY3WtG2uz/80",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,33,[1,"7fEUaj2SxAi7jgXUyN+tXm"],[30],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-84],[31,31]],[56,"HP Controller",5,[-85],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-86],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"cc.ParticleSystem","play",15],[8,"cc.ParticleSystem","play",17],[8,"cc.ParticleSystem","play",19],[8,"cc.ParticleSystem","play",21],[8,"cc.ParticleSystem","play",23],[8,"cc.ParticleSystem","play",25],[8,"cc.ParticleSystem","play",27],[8,"cc.ParticleSystem","play",29],[8,"cc.ParticleSystem","play",31],[8,"cc.ParticleSystem","play",33],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[65,"On Death VFX Finished",5,[[118,-87,[1,"9beIaB7L5Bwaf2xJd0ETgz"],[12,14,16,18,20,22,24,26,28,30,32,34],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"0dt6HJEJdEqrN4OypjakbW",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-88,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,10,[1,"1djSG9rQ1PRKaSRPX7pCzT"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-89],[31,5]],[119,0.3,false,10,[1,"8fyg3bwUdIbKCfUKpuxnO5"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-90],[31,7]],[100,3,[1,"edsi93K0hIHKnwFLPDFS3E"]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-91],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,44,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,8,0,5,8,0,13,36,0,3,1,0,32,45,0,34,43,0,35,36,0,5,4,0,5,35,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,5,0,3,1,0,6,1,0,-4,46,0,-1,10,0,-2,11,0,-3,13,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,42,0,25,42,0,0,3,0,-1,38,0,-2,39,0,-3,6,0,-1,43,0,-2,35,0,-3,44,0,-4,37,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,3,6,0,1,9,0,1,9,0,1,9,0,1,9,0,1,47,0,1,47,0,19,39,0,3,8,0,-1,40,0,-2,41,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,16,0,7,16,0,-1,18,0,7,18,0,-1,20,0,7,20,0,-1,22,0,7,22,0,-1,24,0,7,24,0,-1,26,0,7,26,0,-1,28,0,7,28,0,-1,30,0,7,30,0,-1,32,0,7,32,0,-1,34,0,7,34,0,-1,36,0,5,37,0,0,37,0,0,38,0,7,40,0,7,41,0,-1,45,0,10,1,2,6,3,4,6,5,8,6,46,91],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,309,1,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,66,8,24,73]],[[[58,"P-CannonTower-Bullet-H3ll"],[137,"P-CannonTower-Bullet-H3ll",32,[-15,-16,-17],[[241,-14,[1,"2eB6S5fH9Gpa6sXL5ogwek"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-13]],[[8,"cc.ParticleSystem","play",-7],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-8],[8,"cc.ParticleSystem","play",-9],[8,"cc.ParticleSystem","play",-10],[8,"cc.ParticleSystem","play",-11],[8,"cc.ParticleSystem","play",-12]],[-2,-3,-4,-5,-6]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[524,"VFX_Impact_Dome",32,1,[-19,-20,-21,-22],[-18],[3,"dbNSZnMP9Hz5h3LhBCiqQe",1,0]],[113,"Projectile",32,1,[-23,-24],[3,"4c76lXNq1MwbnUAT2P0rBZ",1,0]],[144,"Temporary",32,1,[-25,-26],[3,"7fW+IqqY1ABJgKtUjCjEXf",1,0]],[33,"Projectile Collision Fade Out",32,4,[[244,0.1,-27,[1,"53h3MEGrZHta1cWZlDZLcs"],3,[1,0.6,0.6,1],[1,0,0,0]]],[3,"91TFzB1KFDqo3PcLpjArLT",1,0]],[33,"Projectile Fade In",32,4,[[245,0,-28,[1,"eeNRsynBJH3YmBnheBo7iv"],3,[1,0.6,0.6,1]]],[3,"983Y4rFE1Er5oETxRL2kPn",1,0]],[113,"Bullet_Burst_Erupt",32,2,[-29],[3,"69u0dSlAVMIakyexU9DQSA",1,0]],[129,0.3,false,false,5,7,[1,"9a2SFfb2pD36rtEHfSlLe1"],[[4,null],6,0],[6],[4,2.5],[0],[0],[0],[0],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.14285714285714285,[4,4282313980]],[18,0.4330357142857143,[4,4282652310]]],[[44,255],[12,0,1]]]]],[37,[0]],[92,true,true,[0],[36,1,[10,[0,0.14358974358974358,0.9948717948717949],[[7,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[7,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[7,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[15,1,1.5,[10,[0,0.3,1],[[7,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[7,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-30],[31,5]],[79,"Bullet_Burst_Fragments",32,2,[-31],[3,"a4cMVywfFDpKx1g/RzcNTz",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.5,false,false,9,[1,"67jTHfBghAQ4VWX4TpejZT"],[[6,null],6,0],[6],[27,3,0.05,0.2],[0],[0],[4,5],[0],[0],[0],[0],[27,3,0.3,1],[4,1.5],[0],[0],[[29,[27,3,8,16]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4292667901]],[18,0.14732142857142858,[4,4284257511]],[18,0.49776785714285715,[4,4283972592]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[435,true,0,true,0.4,0.5,0.6981317007977318,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[133,true,[0],[0],[97,3],[36,1,[10,[0,0.4897435897435897,1],[[13,2,1],[7,2,0.34814814814814815,-1.1446540880503149,-1.1446540880503149],[13,2,0.14814814814814814]]]]],[19,[0],[0],[0]],[374,0,[15,1,5,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]],[15,1,5,[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,5,[10,[0,0.14102564102564102],[[116,-0.007407407407407407,-1,1,-1,1],[116,1,7.143434343434343,1,7.143434343434343,1]]]],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,3]],[24,[0],[0],[6],[6],-32],[31,7]],[113,"Bullet_Burst_Crossflash",32,2,[-33],[3,"de1W2FzAVHnqAB3dLU5VZo",1,0]],[129,0.3,false,false,5,11,[1,"213oYTNXdPtbAntojni1LN"],[[8,null],6,0],[6],[4,2.5],[0],[0],[0],[0],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.07589285714285715],[18,0.14285714285714285,[4,4281308376]],[18,0.4330357142857143,[4,4279965508]]],[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0.10512820512820513,0.4205128205128205,1],[[40,2,1,-2.6093189964157695,1,-2.6093189964157695,1],[7,2,0.3296296296296296,-1.148148148148149,-1.148148148148149],[437,2,1,1]]]],[36,1,[10,[0,0.14358974358974358,0.9948717948717949],[[7,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[7,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[7,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[15,1,1.5,[10,[0,0.3,1],[[7,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[7,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-34],[31,9]],[79,"VFX_SparkBurst",32,2,[-35],[3,"desQDpe4lBLqWK3BNIZBp4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[335,false,false,13,[1,"50drXVBB9KapaBE7bV53yq"],[10],[6],[27,3,0.02,0.05],[0],[0],[27,3,8,15],[0],[0],[0],[0],[27,3,0.3,0.5],[4,4],[0],[0],[[29,[4,15]]],[25,true,[20,1,[39,[[136],[51,0.03794642857142857],[18,0.1361607142857143,[4,4282507775]],[18,0.5602678571428571,[4,4281278615]],[18,0.9017857142857142,[4,4280098096]]],[[44,255],[12,255,0.9352678571428571],[12,0,1]]]]],[549,true,0,0.3,1,[4,1]],[38,true,[36,1,[10,[0,0.6820512820512821,1],[[13,2,1],[7,2,0.6,-1.4130434782608698,-1.4130434782608698],[231,2,-2.143369175627239,-2.143369175627239]]]],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.6282051282051282,1],[[13,2,1],[7,2,0.11851851851851852,-0.5502645502645503,-0.5502645502645503],[13,2,0.02962962962962963]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[147,true,2,2,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-36],[121,1,0.1,11]],[434,true,true,0.5,false,false,5,[null,null],2,[1,"5a1EuyI+lGkLpq702tZQ64"],[6],[4,6],[4,6],[4,6],[0],[4,-1.5707963267948966],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.1383928571428572,[4,4278245119]],[18,0.5066964285714286,[4,4280953577]],[18,0.859375,[4,4281542722]]],[[12,255,0.1294642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,10,[10,[0,0.27692307692307694,1],[[40,2,0.45555555555555555,1.805555555555556,1,1.805555555555556,1],[7,2,0.8148148148148149,0.741741741741742,0.741741741741742],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[438,true,true,[97,20],[97,180],[196,10.471975511965978,180]],[28,[0],[0]],[24,[0],[0],[6],[6],-37],[439,4,0,12,13]],[430,1,4,2,3,[1,"ffWXc2J3FFyrXI/OfIDjKi"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.5245535714285714,[4,4294946672]],[51,1]],[[44,255]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.5076923076923077,1],[[40,2,1,-0.07222222222222197,1,-0.07222222222222197,1],[13,2,0.8518518518518519],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[4,-6.283185307179586]],[28,[0],[0]],[187,true,false,[4,5],[4,0.7],[66,[4,4294901974]],[20,1,[39,[[106,[4,4293656746]],[18,0.6383928571428572,[4,4284226069]]],[[12,255,0.8883928571428572],[12,0,1]]]],-38],[31,1]],[242,false,0,3,[1,"70B49ajw5HRbjd0cdxJEoh"],[[2,null],6,0],[66,[4,4294963651]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,5],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4291435445]],[18,0.2767857142857143,[4,4285071381]],[18,1,[4,4282851095]]],[[12,255,0.4888392857142857],[12,0,1]]]]],[229,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-39],[31,3]]],0,[0,3,1,0,-1,15,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,5,2,0,5,5,0,5,7,0,5,9,0,5,11,0,5,13,0,5,6,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,-1,15,0,-1,7,0,-2,9,0,-3,11,0,-4,13,0,-1,16,0,-2,17,0,-1,5,0,-2,6,0,0,5,0,0,6,0,-1,8,0,7,8,0,-1,10,0,7,10,0,-1,12,0,7,12,0,-1,14,0,7,14,0,7,15,0,7,16,0,7,17,0,10,1,39],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,12,8],[203,138,7,5,27,26,16,25,35,33,16,25,204,205]],[[[149,[[156,[114,[-8,-9,-10,-11,-12],[[115,-5,-4],[82,0,false,-7,-6,[[91,"intro"]]]],-3,-2,-1]],[213,"Glow",[114,[-18,-19,-20,-21],[[115,-17,-16]],-15,-14,-13]]],[{},"intro",4,[101,2]]],[61,"Entry"],[61,"Any"],[61,"Entry"],[61,"Exit"],[63,"SpeedUp_Intro",[72,0]],[63,"Empty",[186]],[61,"Exit"],[61,"Any"],[63,"Button_Glow",[72,1]]],0,[0,29,2,0,30,4,0,31,1,0,14,6,0,15,1,0,14,5,0,15,2,0,-1,1,0,-2,4,0,-3,2,0,-4,5,0,-5,6,0,29,8,0,30,7,0,31,3,0,14,9,0,15,3,0,-1,3,0,-2,7,0,-3,8,0,-4,9,21],[0,0],[18,18],[109,60]],[[[58,"P-GunTower-Bullet-BullzI"],[137,"P-GunTower-Bullet-BullzI",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4285082325]],[18,1,[4,4286930909]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4285082325]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[58,"SM_TowerLaserBody_01"],[55,"SM_TowerLaserBody_01",[-2],[3,"c3aOBtjPNU96Ex7+KDGHdh",-1,0]],[64,"SM_TowerLaserBody_01",1,[[62,-3,[1,"c79Byda9tSsLPjCdZFbGni"],[0],[45],1]],[3,"99ijk+7RNW9aCPpwsQ5cLp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,206]],[[[68,".bin",3429205708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":28560,"count":7140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[68,".bin",850226558,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14560,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14560,"count":260,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]],-1],0,0,[],[],[]],[[[68,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[68,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[68,".bin",1556490249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18720,"length":2328,"count":582,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18720,"count":390,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3769160509109497,-0.5744736194610596,2.0313144943884254e-8],"maxPosition",8,[1,0.3769153356552124,0.5935848951339722,0.6603884100914001]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyMamooth_01",[-2],[3,"cd95syhwpUepqE3C3l751A",-1,0]],[64,"SM_EnemyMamooth_01",1,[[62,-3,[1,"e25UQYor5ZNbIp+/V5aQLy"],[0],[45],1]],[3,"8fxyDu/BpQqqQZ5UcV64Vs",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[310,311]],[[[77,"SM_EnemyMamooth_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTiling_Offset",8,[2,1,2,0,0],"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[26,32]],[[[58,"SM_TowerCometTBody_01"],[55,"SM_TowerCometTBody_01",[-2],[3,"93NMATgvJXN5P2Z0Pbx6xd",-1,0]],[64,"SM_TowerCometTBody_01",1,[[62,-3,[1,"36LCcIeKVRp7Mac4l4WlzY"],[0],[45],1]],[3,"b1ynI0NRlTcr9Bc5g2lJQg",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,207]],[[{"name":"Icon_Currency Yellow 100","rect":{"x":0,"y":0,"width":92,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[312]],[[[58,"Holder_TowerUpgradeMenu"],[513,"Holder_TowerUpgradeMenu",33554432,[-13,-14,-15,-16,-17,-18,-19],[[[9,-5,[1,"feTD25fIdBUJ5FKqoR7YZF"],[5,220,220]],[94,-6,[1,"18PnzBvKpPm5jHmDihqUZ9"]],[190,false,-7,[1,"3d8TODryFLQKtlwniudDAF"],[59,60,61]],-8,[107,-10,[1,"ffZ2Ct4zBH+Zt94rHKmSpg"],-9],[220,-11,[1,"99UzDZa6pHQ4VtG5vEXqut"],[[581,"AE_FinishedExit"]]],[57,-12,[1,"d9fh88t6RN+rL3kvYn5R3E"]]],4,4,4,1,4,4,4],[240,"46k0m6lkdE7LjR/vInpkl2",-4,0,[-1,-2,-3]],[1,1.2,1.2,1]],[150,"Holder_LevelUp Button",33554432,[-37,-38,-39,-40,-41],[[[9,-20,[1,"44xZ20LKBKuq/Fx0W3Wsmh"],[5,70,70]],[190,false,-21,[1,"59zRGpNq9MBJQHbD03Bifu"],[40,41,42,43,44]],-22,[635,1,-34,[1,"97UEfLZFtJwb/OHVDl/s3H"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-32],[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-33]],-31,[[34,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true",-28],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-29],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,true",-30]],[[34,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false",-25],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-26],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,false",-27]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-24]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exitClicked",-23]]],[295,true,-36,[1,"82+Qldi0dJcJTsSoTpzmOs"],-35]],4,4,1,4,4],[3,"175KhMRQRDzrwjR+Y/XD8F",1,0]],[150,"Holder_Destroy Button",33554432,[-52,-53,-54,-55],[[[9,-42,[1,"a8t4CAjStKZ7bw9sbDN8W9"],[5,70,70]],[219,false,-43,[1,"5egN2yUedMtbS2pcEBCAbj"],[55,56,57],58],-44,[636,1,-49,[1,"13JiA8f5JNnJCW4z2ax6z3"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-48]],-47,[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-46]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exitClicked",-45]]],[107,-51,[1,"99AQyBFexBdqAz+WiT48yy"],-50]],4,4,1,4,4],[3,"basO3xNKRMubx47MkKLOyR",1,0]],[484,"Panel_Color",false,33554432,[-59,-60,-61,-62,-63],[[47,-56,[1,"7bXwnyxAhB4aX3qjxTGhLy"],[5,200,95.88],[0,0.5,0]],[23,0,-57,[1,"84pelSshJM/oKL/JsKOT35"],[4,4293450459],23],[584,1,2,6,3,-58,[1,"a5qWAEpTdJbI47FYckepiQ"]]],[3,"37Eb9ZL+JM5azHm5AEqitc",1,0],[1,0,-50,0]],[53,"Holder_Stats",33554432,4,[-69,-70,-71],[[47,-64,[1,"13XyMRHdVLQIvI+P8s5AK2"],[5,154,30],[0,0.5,1]],[248,1,1,32,-65,[1,"fcMuesJMtISpiD46EkllZo"]],[94,-66,[1,"6eV5ccgJ9N+KR7mkl6SOk4"]],[57,-67,[1,"3cr5ZP96tKW5Va7MruvXjo"]],[389,false,0,-68,[1,"918uPUE1lI4JKcElTdrzx3"],16]],[3,"00F6e/jqNJ/4guBTYLh37Z",1,0],[1,0,39,0]],[197,"Holder_Energy Cost (NotEnough)",false,33554432,2,[-75,-76,-77],[[9,-72,[1,"07dTvsP8BLhqn+uWb/Lifq"],[5,44,44]],[23,0,-73,[1,"9fcaP+hWJBIZJg/WV8vny1"],[4,4282974275],39],[57,-74,[1,"6aYoqxCg9P65/f88PWOcwe"]]],[3,"f70HYrixNJO4nwASG1ZutW",1,0],[1,0.729,-20.353,0]],[159,"Exit_Overlay",false,33554432,1,[[9,-78,[1,"40G84+UctAU629wttly9ve"],[5,30000,30000]],[23,0,-79,[1,"a0g/WKr/9Is4sQhLqQrCIi"],[4,16777215],0],[588,-81,[1,"1ayGJX7NFLw4ZV5ksbBfGW"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-80],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]],1],[168,-82,[1,"cbZcJ/uFpCl77aeMGsOhD5"]],[236,3,-83,[1,"2dmSthkmBFhqDzGkvuZcgk"]]],[3,"559OljkmVJbb40T1JglvS/",1,0]],[83,"Holder_Build_TierUp",33554432,1,[-87,-88,-89],[[48,-84,[1,"07Hix++0FChJt1CK1BGJzq"]],[154,0,-85,[1,"25OwO8VUVOGJ6dBp2oN5Or"]],[57,-86,[1,"4bTNnTJ7hAs4zW4ZMRJNla"]]],[3,"165POIGiVCTbJeF4ypPaek",1,0]],[134,"Button_Color",33554432,2,[[[9,-90,[1,"d4LfLKWjlEJY6W2JpIeBGY"],[5,70,70]],[23,0,-91,[1,"8esM/JTn9B7YbGHX7fq3AA"],[4,4287102766],32],-92,[356,-94,[1,"87gw6T4BxNh5dYJse8gt5P"],-93]],4,4,1,4],[3,"72SQCf7T1AzY8DVNIrLRbf",1,0]],[53,"Holder_Energy Cost",33554432,3,[-97,-98,-99,-100],[[9,-95,[1,"7aSgJMZq1BYqsli3WlOVyC"],[5,44,44]],[23,0,-96,[1,"e0uqqVXL9Fh7G+Ri+Q2Dkk"],[4,4282974275],54]],[3,"63Mb7uazZCLJFZSURy1+Xa",1,0],[1,0.729,-20.353,0]],[83,"Holder_Panel",33554432,1,[-102,-103,-104,-105],[[48,-101,[1,"60YTC0scBNvY8ijv7+lrvd"]]],[3,"b0BnCnappBA6FDTZpeO6Zd",1,0]],[53,"Stats 01",33554432,5,[-108,-109,-110],[[9,-106,[1,"fczN2XfJREX4Hhukn01kDz"],[5,30,30]],[257,1,18,1,-107,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[3,"cdN/iXwS9EWaea7ROuvyKb",1,0],[1,-62,-33,0]],[53,"Stats 02",33554432,5,[-113,-114,-115],[[9,-111,[1,"1cGEoxqEdBuoIi8pQKidnI"],[5,30,30]],[257,1,18,1,-112,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[3,"0325m7PSVKEJgP6FqjArxY",1,0],[1,0,-33,0]],[53,"Stats 03",33554432,5,[-118,-119,-120],[[9,-116,[1,"32ucnWLLRB54Rvoqj7OGDZ"],[5,30,30]],[257,1,18,1,-117,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[3,"35oTOUcq5LW6sLAKY0sSNr",1,0],[1,62,-33,0]],[80,"LeftLimit_Bar",33554432,[-124,-125],[[9,-121,[1,"221k4fo6FOlacpqtXy02KU"],[5,2,109.88]],[23,0,-122,[1,"f3YxgrjCdOprm/6AiycAMU"],[4,4281242111],19],[258,5,-7,-7,112,1,-123,[1,"1dA5uK9RVP1JAsEfI8Ih4g"],4]],[3,"c8jDI6C/pHrJ11x+wmVo/Q",1,0],[1,-105,41.94,0]],[80,"RightLimit_Bar",33554432,[-129,-130],[[9,-126,[1,"cbl1hOOtxGh6bfnYXUV61p"],[5,2,109.88]],[23,0,-127,[1,"e9AOdaBVVEaYXynU8UjbWH"],[4,4281242111],22],[258,5,-7,-7,112,1,-128,[1,"1dA5uK9RVP1JAsEfI8Ih4g"],4]],[3,"6aFr9scUxMZoHr8tWuSoZn",1,0],[1,105,41.94,0]],[238,"Holder_Upgrade",false,33554432,1,[-134,-135],[[48,-131,[1,"b3U/rEAQVLfLVSP4rhcy/Q"]],[94,-132,[1,"37+sWMnJ1Mi52Rn5c0dlQ5"]],[57,-133,[1,"dbREbEW9dLIbVcLN+6LToz"]]],[3,"34GO02mHFBr7SAk+hQxhbP",1,0]],[53,"Holder_Energy Cost",33554432,2,[-138,-139,-140],[[9,-136,[1,"afG8+EcnZD8KEJW6KGBu5G"],[5,44,44]],[23,0,-137,[1,"183OjHOgJJOa+pFiowVcXs"],[4,4282974275],36]],[3,"19ZqgPfa5OjLHSCLYS5Npq",1,0],[1,0.729,-20.353,0]],[134,"Text_Cost",33554432,18,[[[9,-141,[1,"12yJMaHNxFaLwswebaIqIy"],[5,30,30]],-142,[351,false,1,-143,[1,"57RJpKQDFP2JLo0LvnmXGV"],[4,4281532425]],[96,-145,[1,"ccFAQ4FMNNOqk2FPsUDchC"],-144]],4,1,4,4],[3,"6eRHsf4mFMMoj6fnBa25Mb",1,0]],[134,"Text_Cost",33554432,6,[[[9,-146,[1,"67yiIdZZNAR5VrI0bBa34y"],[5,30,30]],-147,[351,false,1,-148,[1,"c32gWcJ0NMGYXn8AX1x6Oc"],[4,4281532425]],[96,-150,[1,"f29Ko0SKZLqL7LWkQWWKOh"],-149]],4,1,4,4],[3,"eevTAbWt1MGLzXN5JU4lba",1,0]],[134,"Text_Cost",33554432,10,[[[9,-151,[1,"1c8w954HZOQbU1RFArhikS"],[5,30,30]],-152,[351,false,1,-153,[1,"fad93H3HJPcpYp4xRPkpEe"],[4,4281532425]],[96,-155,[1,"f9OptP9+pIPraBxOXfM1ry"],-154]],4,1,4,4],[3,"981uAWVvdMTLnwHqlxnhpO",1,0]],[53,"Holder_TowerInfo",33554432,1,[-163,4],[[9,-156,[1,"1bYEPoE0pG65LCqAUKntwF"],[5,220,100]],[638,"Destroy {data.name}","Destroy {data.name} to receive {data.value} of energy","Level up {data.name}",-162,[1,"1d2jF0vcxMGYvI/oGhONKZ"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",5]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-161]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-160]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-159]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-158]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-157]]]],[3,"bb7Kak23hMTYfuoFKHjabu",1,0],[1,0,130,0]],[112,"Text_TowerName",33554432,4,[[[47,-164,[1,"fc0HSpD75J25NzupQ23Ge1"],[5,120,25.2],[0,1,0.5]],-165,[96,-167,[1,"6eejTbgQRC7LrxKVI9MCdz"],-166]],4,1,4],[3,"23iu6lYIBHN6I4xCIJ8ybI",1,0],[1,90.364,83.28,0]],[112,"Text_Tower Info",33554432,4,[[[9,-168,[1,"cdQZe3PIlCRra+rHQEtWhd"],[5,170,22.68]],-169,[96,-171,[1,"43JTK5afpGCJuhF78cpDcm"],-170]],4,1,4],[3,"87A8IQyNFBc6ZZaI8HCJ/D",1,0],[1,0,53.34,0]],[134,"Text_Stats Number",33554432,12,[[[9,-172,[1,"d3XlAIH9hDTqGjzuV0WnKi"],[5,16.34,22.68]],-173,[96,-175,[1,"e7OPaJcT9EXqjVYHE/ayUw"],-174]],4,1,4],[3,"e4ePpX+8RNC4LpAVRdqVrK",1,0]],[134,"Text_Stats Number",33554432,13,[[[9,-176,[1,"8949iDq/JGbIy6ofY/9q+d"],[5,12.63,22.68]],-177,[96,-179,[1,"b8NnaKePhMf7V867NGsEO1"],-178]],4,1,4],[3,"e4HZJHQd9AC786QQGG8+fP",1,0]],[134,"Text_Stats Number",33554432,14,[[[9,-180,[1,"a1Yz/0pMJNxIDJ6ZzR3RCW"],[5,8.19,22.68]],-181,[96,-183,[1,"52JtB3ZvxDn59CLjLT66gr"],-182]],4,1,4],[3,"66KRUQl3REq4okC86oP4i9",1,0]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[83,"Select_VFX",33554432,2,[-186,-187],[[48,-184,[1,"b1qxcV+r1HqpS4C+OgXvwu"]],[94,-185,[1,"77+8YxrFNFOqyiPZmpCOES"]]],[3,"c5pBFHrvdJIpBwOcBI8/eD",1,0]],[83,"Select_VFX",33554432,3,[-190,-191],[[48,-188,[1,"ffIyiamz1KdLuAKXK+cvlX"]],[94,-189,[1,"9ayuDEovFB+4YgC+4Iaeze"]]],[3,"96uGZKxMZCWrelsR7NZWbB",1,0]],[159,"Input Blocker",false,33554432,1,[[9,-192,[1,"42Mnm1CQVE6a66Pf2UXLhd"],[5,220,220]],[128,45,100,100,-193,[1,"ceBbEgr19DVZTa7ciahN9I"]],[168,-194,[1,"145szD8V1JTZsbv3qb5dUN"]],[57,-195,[1,"a35tGHlbxLa6+mYj9G4Uj2"]]],[3,"c36qsQcKNFOp008oYX4pQh",1,0]],[485,"Dot_Color",33554432,[-198],[[9,-196,[1,"f2NarMN2lGZ5wm+/KlHQDS"],[5,16,16]],[23,0,-197,[1,"f1DI3Lk0JKW429WYv4DSf2"],[4,4281532425],3]],[3,"bdGaDp+OpMArSo8l+2WjJR",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,1],[1,0,0,45]],[33,"Dot_Outline",33554432,34,[[9,-199,[1,"4dDBbQBixH4ZrVY1qQCDXr"],[5,16,16]],[46,1,0,-200,[1,"24akuhbnZCdrkW9gD1egDi"],[4,4293450459],2],[128,45,32,32,-201,[1,"69w2t2jCFGFLaR7rW1KcA+"]]],[3,"fad6l15HhESar9QeacgpaJ",1,0]],[486,"Holder_Tower Model Position (PH)",false,33554432,[[47,-202,[1,"b3vBe4YtZLMqFUeV2RjGjk"],[5,40,40],[0,0.5,0]],[591,0,false,-203,[1,"48cwpYQSVIn6sJxj1YVTT1"],9],[565,9,17.5,-19.230000000000018,1,-204,[1,"c9BunKH0VCwbKj7JqvuMdx"],4]],[3,"13x/pFi2BJdIQIHpxB9t8j",1,0],[1,-62.5,7.430000000000007,0]],[41,"Text_Stats Name",33554432,12,[[9,-205,[1,"c5QOStT3tKrZazryWBdUyJ"],[5,37.11,16.58]],[181,"damage",14,14,13.95,false,false,-206,[1,"65Jio7tZdHj7CH2HbN6vmT"],[4,4282187811],10],[191,0.1,-207,[1,"23fidhJKBNGJepuMmH103h"],[4,4282187811]]],[3,"89DUJChihE1btBNNYNVN3U",1,0],[1,0,24.743,0]],[41,"Text_Stats Name",33554432,13,[[9,-208,[1,"2cceJPYfFPrJjtg9AO17zt"],[5,28.259999999999998,16.58]],[181,"speed",14,14,13.95,false,false,-209,[1,"a7vfOQBjdDUIrzJ6gxhsj1"],[4,4282187811],12],[191,0.1,-210,[1,"d0F8SyfbZK+bTpP5VqeSUz"],[4,4282187811]]],[3,"e2DWI4Mr5AkZSdVGzoQk4r",1,0],[1,0,24.743,0]],[41,"Text_Stats Name",33554432,14,[[9,-211,[1,"3cVue3OsxO9rbvQJD0zbX9"],[5,28.05,16.58]],[181,"range",14,14,13.95,false,false,-212,[1,"a6PJmwr2FDGILRwp79bfKw"],[4,4282187811],14],[191,0.1,-213,[1,"1fmfzVImVPII5FUJNWOvik"],[4,4282187811]]],[3,"09n7hSD2hPA7R1at268Dwa",1,0],[1,0,24.743,0]],[53,"Holder_Bars",33554432,4,[15,16],[[9,-214,[1,"33YAjLCdFJJ4zIiUKbQYb/"],[5,0,0]]],[3,"e3i6N3eR1D54zbrShPNd37",1,0],[1,0,6,0]],[41,"Top_Bar",33554432,15,[[9,-215,[1,"20LsKMYbBHeIpyWlLAdbvM"],[5,8,2]],[23,0,-216,[1,"62HxJA2aZBRrlxTcbDYBds"],[4,4281242111],17],[148,1,1,-217,[1,"35eW0mEzpB+Zfx5bNmz2Gg"]]],[3,"bdhGER8stMeJpmMRgWWZkf",1,0],[1,3.5,53.94,0]],[41,"Bot_Bar",33554432,15,[[9,-218,[1,"56xRi782xG0ZEhP11QDNKe"],[5,8,2]],[23,0,-219,[1,"980EC8q5JDyogCBo2KP5ti"],[4,4281242111],18],[148,4,1,-220,[1,"bfBhSskMhNMa/Q/935VRIo"]]],[3,"9cdBtqDClJtKZv1R3U6sEK",1,0],[1,3.5,-53.94,0]],[41,"Top_Bar",33554432,16,[[9,-221,[1,"bdYrUnbLNMN7sRLHCfn59X"],[5,8,2]],[23,0,-222,[1,"fcr39KHIxFDLaWLuhDruGq"],[4,4281242111],20],[148,1,1,-223,[1,"434NMcwoBHabhi1b3dheux"]]],[3,"67GXMOtwJM5JIU8jmlkB1v",1,0],[1,-3.5,53.94,0]],[41,"Bot_Bar",33554432,16,[[9,-224,[1,"a2kd/fTXdBPJHLpB/keZ/A"],[5,8,2]],[23,0,-225,[1,"d4dx+lyadM64YdyD3z/qxj"],[4,4281242111],21],[148,4,1,-226,[1,"54fBKrYItAgpXU9nhpQCyt"]]],[3,"cbCytPtmRP+60nn9I1nxxg",1,0],[1,-3.5,-53.94,0]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["8bBj36fMNOUZFpmts6EkfF"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[33,"Panel_Outline",33554432,18,[[9,-227,[1,"f268L6i8FIP4do3yeL2osi"],[5,44,44]],[23,0,-228,[1,"73K3Sb2CJGGZZQwJ5LMTss"],[4,4287102766],34],[128,45,20,20,-229,[1,"29loxa4cBEubWku8uJQOcm"]]],[3,"f4aAPf/BBL4Kb2cvFUfXTO",1,0]],[33,"Panel_Energy Color",33554432,18,[[9,-230,[1,"caXe/bdUVKQ7+QzUcPLQbW"],[5,34,34]],[23,0,-231,[1,"dcDZqBiO5AMagPetldnSC4"],[4,4291874560],35],[117,45,5,5,5,5,32,32,-232,[1,"c8DUe7PpxGVaWbwcSMtHwp"]]],[3,"c421MuK0hCQYeD7QCBYCnj",1,0]],[33,"Panel_Outline",33554432,6,[[9,-233,[1,"6cXPG3QT5CXrXvuXCO28bH"],[5,44,44]],[23,0,-234,[1,"47119cVGNJnKnvEWW2Qvfg"],[4,4287102766],37],[128,45,20,20,-235,[1,"55T27bMXpHKp3K5HIyU6zb"]]],[3,"d9pm5DyRlFyJdQP2IkbhvE",1,0]],[33,"Panel_Energy Color",33554432,6,[[9,-236,[1,"f5NOw8Ew5C8pNR9AklrdSG"],[5,34,34]],[23,0,-237,[1,"ed59hTxfxHrKQOHkOmxQuz"],[4,4289238409],38],[117,45,5,5,5,5,32,32,-238,[1,"b1fKh9zPBBYYZx4AiI7t3y"]]],[3,"4eVr6ou9VL7r9Sj/o4MQNb",1,0]],[33,"Button_Outline 2",33554432,32,[[9,-239,[1,"88vI5M78ZLg6uuUKBkySY/"],[5,84,84]],[46,1,0,-240,[1,"3eUI8GUgtDSbQwF3WRmGuY"],[4,1179260927],45],[456,3,0.9,-241,[1,"57di4HVghNeJGBLkz8Fsvn"],46]],[3,"56OGkAnUhGFKLIo+aImvvK",1,0]],[33,"Button_Outline 1",33554432,32,[[9,-242,[1,"29/S49pBFCHrC2dVMIYu0l"],[5,77,77]],[46,1,0,-243,[1,"31tfGPm8FEdoW4SckuHOuc"],[4,2018121727],47],[456,3,0.9,-244,[1,"7e2BcbXK9E74TrJ8GKlRrv"],48]],[3,"feDxvrELBIHLIZaoGg2x5s",1,0]],[134,"Button_Color",33554432,3,[[[9,-245,[1,"69YYGyojpAE4M78/n8RAIP"],[5,70,70]],[23,0,-246,[1,"fbsUlR5ntIG6xCKEMKMd8m"],[4,4283045887],49],-247],4,4,1],[3,"c4JryQ715OxZEXyEuY811m",1,0]],[33,"Panel_Outline",33554432,10,[[9,-248,[1,"adoEaVup9FYoYbCcTOiKkm"],[5,44,44]],[23,0,-249,[1,"d7qmYXokFJs4hEjurkYh8U"],[4,4293450459],51],[128,45,20,20,-250,[1,"6cUZHkc+ZC+pOx6EjS0pan"]]],[3,"2dAuOpQ9VGWKrMyIUUAOJd",1,0]],[33,"Panel_Energy Color",33554432,10,[[9,-251,[1,"46wQBvpZpKQK9V4ykz//Qg"],[5,34,34]],[23,0,-252,[1,"227KcsgcJPSKdY0MVUvh1k"],[4,4291874560],52],[117,45,5,5,5,5,32,32,-253,[1,"93VeTjUKtK/66b3gG8esO+"]]],[3,"71Yfx7jQFFq4FUYnzPgJQb",1,0]],[41,"Text_+",33554432,10,[[9,-254,[1,"24/P+0W7BO66meFcKBbHmk"],[5,15.38,34.239999999999995]],[70,"+",24,24,24,false,-255,[1,"329pLtgIFAIJLRbRoy9nia"],[4,4287102766],53],[400,-256,[1,"b7rOT+QuRAMoUaFcKbgGC9"],[4,4282974275]]],[3,"16Wd8SpVNDqpiKxVe287ei",1,0],[1,-18.862,-0.695,0]],[83,"Holder_DotConnect",33554432,1,[34],[[48,-257,[1,"f9MnC5GtJD84NPXtJygd2I"]]],[3,"d9MIFdngdIub5yL1KjIya7",1,0]],[85,"Panel_Outline 2",33554432,11,[[9,-258,[1,"651b0X23JG1pA0dt4ZQALZ"],[5,198,198]],[46,1,0,-259,[1,"7d3Hl6LclChJMWznaIeOSJ"],[4,3211267],4]],[3,"44kKMyzOtA7oEtYdnmQXjj",1,0],[1,0,-4,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[85,"Panel_Outline 1",33554432,11,[[9,-260,[1,"3eZ7Is5P9DWLnH88+K3POw"],[5,189,189]],[46,1,0,-261,[1,"4fpcf8EOFEGovyTwz10250"],[4,3211267],5]],[3,"73+gMDTyxEdZn+WD+E4yTK",1,0],[1,0,-4,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[239,"Panel_Color",33554432,11,[[9,-262,[1,"0cq2Kk4ctFjbWEIRFb0NOp"],[5,180,180]],[23,0,-263,[1,"b4cI+TGThGNLzQZJuBq6UV"],[4,2352021507],6]],[3,"d8wIZcPCxCe6YqAym6uwe7",1,0],[1,0,-4,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,1],[1,0,0,45.000000000000014]],[159,"Spacing",false,33554432,11,[[9,-264,[1,"62fo7lP+5ISbt1G/KF3n76"],[5,130,36]],[108,0,-265,[1,"9f+Pvl6blDi6l7Zqctf0cv"],7]],[3,"1a6xsD3k5N5aA9oKws8FTS",1,0]],[239,"Dot_Color",33554432,22,[[9,-266,[1,"65eqYF/8REMqPARqc83H9v"],[5,12,12]],[46,1,0,-267,[1,"58nPL8DDBEcqj/ddpQAgeX"],[4,4292724926],8]],[3,"6dNDNQ245IMIFYBXJ4+uuo",1,0],[1,0,-25,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,1],[1,0,0,45]],[53,"Holder_Tower Model",33554432,4,[36],[[9,-268,[1,"eb9DVEbOZBK6WruDrw8ry7"],[5,0,0]]],[3,"c8Chk5svFCtKIn7oyzefDv",1,0],[1,0,67.68,0]],[78,"Panel_Color",33554432,12,[[9,-269,[1,"91Pr0P8VlGx6jGHIGiK4KX"],[5,24,24]],[23,0,-270,[1,"b9LsN9g1hOLb+ACMoynF1G"],[4,4282187811],11]],[3,"22ZEfFUktNao6gesxX3hDL",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,13,[[9,-271,[1,"45rubzGYFIXZD+/IldMsj9"],[5,24,24]],[23,0,-272,[1,"adHUhdF/pI9r/0stkOsOIA"],[4,4282187811],13]],[3,"b6BgT3IzZK1aZ/qNaRNfs/",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,14,[[9,-273,[1,"3d23u5jT1E9b8aDKr8HWbe"],[5,24,24]],[23,0,-274,[1,"a73oyiXoFBA6w8K2I9IKEl"],[4,4282187811],15]],[3,"01GHlE7QdNJpaQ/i3l5xXn",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[53,"Holder_Button 01",33554432,8,[-276],[[48,-275,[1,"d1w3NYLFtD1YJ5nqyLYp81"]]],[3,"9brp44ZTtHTJA2qtLnxJLk",1,0],[1,-100,10,0]],[30,0,null,69,[22,"0fJEdVoOpA/qcZPGFboeiN",-287,[49,"74XRvRkuBPX6zuG43ddIDV",1,[[11,"Holder_Tower Button 01",["_name"],28],[5,["_lpos"],28,[1,0,0,0]],[5,["_lrot"],28,[3,0,0,0,1]],[5,["_euler"],28,[1,0,0,0]],[11,"Button_Color",["_name"],-277],[5,["_lpos"],-278,[1,0,0,0]],[11,"Button_Outline",["_name"],45],[5,["_lpos"],45,[1,0,0,0]],[5,["_lrot"],45,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],45,[1,0,0,45]],[11,true,["_active"],28],[11,"Button_Outline 2",["_name"],-279],[5,["_lpos"],-280,[1,0,0,0]],[11,"Button_Outline 1",["_name"],-281],[5,["_lpos"],-282,[1,0,0,0]],[17,false,["_active"],[2,["e9EkiL/+1I4KWEMpMRNY1g"]]],[11,2,["_clips","length"],46],[183,["_clips","0"],46,25],[183,["_defaultClip"],46,26],[11,"Panel_Outline",["_name"],-283],[5,["_lpos"],-284,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-285],[5,["_lpos"],-286,[1,0,0,0]],[17,false,["_active"],[2,["07J8NL3JNE+J1JbZaH9Gkn"]]],[183,["_clips","1"],46,27]]],24]],[53,"Holder_Button 02",33554432,8,[-289],[[48,-288,[1,"f8O8Ltm49JZasciDJrY3Un"]]],[3,"72+RAMqD5D+ZAkzE6XGRXe",1,0],[1,100,10,0]],[30,0,null,71,[22,"0fJEdVoOpA/qcZPGFboeiN",-296,[49,"c1RSk6NUhFVYmVRsNR9Aqa",1,[[11,"Holder_Tower Button 02",["_name"],29],[5,["_lpos"],29,[1,0,0,0]],[5,["_lrot"],29,[3,0,0,0,1]],[5,["_euler"],29,[1,0,0,0]],[11,"Button_Color",["_name"],-290],[5,["_lpos"],-291,[1,0,0,0]],[11,"Button_Outline",["_name"],47],[5,["_lpos"],47,[1,0,0,0]],[5,["_lrot"],47,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],47,[1,0,0,45]],[11,"Panel_Outline",["_name"],-292],[5,["_lpos"],-293,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-294],[5,["_lpos"],-295,[1,0,0,0]],[11,true,["_active"],29]]],28]],[53,"Holder_Button 03",33554432,8,[-298],[[48,-297,[1,"2dx5PXEzpBI5KC9wRC9mXE"]]],[3,"09zmwkls5LEIVLC0RgpBmF",1,0],[1,0,-96,0]],[30,0,null,73,[22,"0fJEdVoOpA/qcZPGFboeiN",-305,[49,"0aSc2CSmNOv7gy3zhm972w",1,[[11,"Holder_Tower Button 03",["_name"],30],[5,["_lpos"],30,[1,0,0,0]],[5,["_lrot"],30,[3,0,0,0,1]],[5,["_euler"],30,[1,0,0,0]],[11,"Button_Color",["_name"],-299],[5,["_lpos"],-300,[1,0,0,0]],[11,"Button_Outline",["_name"],48],[5,["_lpos"],48,[1,0,0,0]],[5,["_lrot"],48,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],48,[1,0,0,45]],[11,"Panel_Outline",["_name"],-301],[5,["_lpos"],-302,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-303],[5,["_lpos"],-304,[1,0,0,0]],[11,true,["_active"],30]]],29]],[53,"Holder_Button 01",33554432,17,[2],[[48,-306,[1,"2dDONqE8pMOKELzJCPnoAC"]]],[3,"faoYrGrexMzqdzK6ckpRqZ",1,0],[1,-100,10,0]],[33,"Button_Outline 2",33554432,31,[[9,-307,[1,"5etth2jgxHjrHslvpb0JHZ"],[5,84,84]],[46,1,0,-308,[1,"6axzbCYi9GpIB4OPVxZYv0"],[4,1183317806],30]],[3,"464N+FPdxPeatXzlqh2uah",1,0]],[33,"Button_Outline 1",33554432,31,[[9,-309,[1,"b6fbb5JshFj6dheZNKNhl+"],[5,77,77]],[46,1,0,-310,[1,"edJFde/LtGq48sK6hM+X4B"],[4,2022178606],31]],[3,"9eLJ9iyQZBTYmwolqv/kvL",1,0]],[155,3,0.9,9,[1,"e0iQibPDNGYIKJsHwZFwIm"],[[8,"80495HhBfdC64qEifbVQrbr","onClicked",2]]],[41,"Text_Level Up",33554432,2,[[9,-311,[1,"0a4pMd11BFCavVU3OI4JBE"],[5,64,30]],[467,"Level Up",22,23,23,2,false,false,-312,[1,"90RXiPHQRMBqaEH4KzSfd9"],[4,4281532425],33]],[3,"e22qAiOShGu6dQkE5fyZRr",1,0],[1,0,17.208,0]],[53,"Holder_Button 02",33554432,17,[3],[[48,-313,[1,"d3lEazYatBHIQDgY9K4etq"]]],[3,"9eatkuECJPRJ35+eb2SpC3",1,0],[1,100,10,0]],[41,"Text_Level Up",33554432,3,[[9,-314,[1,"8basD3uGFCB7FDb9qtQE1A"],[5,64,30]],[467,"Destroy",21,21,23,2,false,false,-315,[1,"1ad0Za1JhBO63hooKktS7+"],[4,4281532425],50]],[3,"696IqbC2RE4Kiuu09+L7cE",1,0],[1,0,17.208,0]],[348,"Cube Tower",2,17,17,17,2,false,false,23,[1,"a8Mmtadr1Gta5v/USRbkki"],[4,4281532425]],[349,"Bla bla bla torre",0,0,18,18,18,3,false,24,[1,"97CNXOrzZFXo/biGRtb8yM"],[4,4286410600]],[185,"20",18,18,18,false,25,[1,"63MVNBAUtKOL2OGQSgZw0s"]],[185,"10",18,18,18,false,26,[1,"a9dgTO0WNOJokwuSG/Cyww"]],[185,"4",18,18,18,false,27,[1,"65dU0/QJJEhoz/5CwKPweZ"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["42ZSZDURBPuYxZbUVkytNk"]],[2,["64o7LRB4FEdaQLAV4SPsYe"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[399,"2",33,32,28,2,false,19,[1,"483GC9xLRIq4d00HA1ej8J"]],[221,"2",33,32,28,2,false,20,[1,"ebZ4P+N9FOMLxNZcbgaRnm"],[4,4280616237]],[100,2,[1,"47yBIwvkZE2aGBAdlhkSNv"]],[155,3,0.9,55,[1,"50hrJYbf9IHLRR1ePLEmnJ"],[[8,"80495HhBfdC64qEifbVQrbr","onClicked",3]]],[399,"2",33,32,28,2,false,21,[1,"18eVL3suFL6KwyO4W6QX1Y"]],[100,3,[1,"56JKwaJhFDV5L2wgkKwUbU"]],[100,1,[1,"f13UGmbg5KLrhluQFmxr/w"]]],0,[0,-1,70,0,-2,72,0,-3,74,0,3,1,0,0,1,0,0,1,0,0,1,0,-4,104,0,25,104,0,0,1,0,0,1,0,0,1,0,-1,7,0,-2,59,0,-3,11,0,-4,22,0,-5,8,0,-6,17,0,-7,33,0,0,2,0,0,2,0,-3,100,0,5,2,0,5,2,0,5,9,0,5,6,0,5,2,0,5,9,0,5,6,0,5,2,0,42,78,0,5,19,0,5,20,0,0,2,0,25,100,0,0,2,0,-1,31,0,-2,9,0,-3,79,0,-4,18,0,-5,6,0,0,3,0,0,3,0,-3,103,0,5,3,0,5,3,0,42,101,0,5,21,0,0,3,0,25,103,0,0,3,0,-1,32,0,-2,55,0,-3,81,0,-4,10,0,0,4,0,0,4,0,0,4,0,-1,23,0,-2,65,0,-3,24,0,-4,5,0,-5,40,0,0,5,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,12,0,-2,13,0,-3,14,0,0,6,0,0,6,0,0,6,0,-1,51,0,-2,52,0,-3,20,0,0,7,0,0,7,0,5,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,-1,69,0,-2,71,0,-3,73,0,0,9,0,0,9,0,-3,78,0,42,78,0,0,9,0,0,10,0,0,10,0,-1,56,0,-2,57,0,-3,21,0,-4,58,0,0,11,0,-1,60,0,-2,61,0,-3,62,0,-4,63,0,0,12,0,0,12,0,-1,37,0,-2,66,0,-3,25,0,0,13,0,0,13,0,-1,38,0,-2,67,0,-3,26,0,0,14,0,0,14,0,-1,39,0,-2,68,0,-3,27,0,0,15,0,0,15,0,0,15,0,-1,41,0,-2,42,0,0,16,0,0,16,0,0,16,0,-1,43,0,-2,44,0,0,17,0,0,17,0,0,17,0,-1,75,0,-2,80,0,0,18,0,0,18,0,-1,49,0,-2,50,0,-3,19,0,0,19,0,-2,98,0,0,19,0,23,98,0,0,19,0,0,20,0,-2,99,0,0,20,0,23,99,0,0,20,0,0,21,0,-2,102,0,0,21,0,23,102,0,0,21,0,0,22,0,5,27,0,5,26,0,5,25,0,5,24,0,5,23,0,0,22,0,-1,64,0,0,23,0,-2,82,0,23,82,0,0,23,0,0,24,0,-2,83,0,23,83,0,0,24,0,0,25,0,-2,84,0,23,84,0,0,25,0,0,26,0,-2,85,0,23,85,0,0,26,0,0,27,0,-2,86,0,23,86,0,0,27,0,0,31,0,0,31,0,-1,76,0,-2,77,0,0,32,0,0,32,0,-1,53,0,-2,54,0,0,33,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,-1,35,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,-3,101,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,-1,70,0,1,87,0,1,87,0,1,88,0,1,88,0,1,89,0,1,89,0,1,90,0,1,90,0,1,91,0,1,91,0,3,70,0,0,71,0,-1,72,0,1,92,0,1,92,0,1,93,0,1,93,0,1,94,0,1,94,0,3,72,0,0,73,0,-1,74,0,1,95,0,1,95,0,1,96,0,1,96,0,1,97,0,1,97,0,3,74,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,79,0,0,79,0,0,80,0,0,81,0,0,81,0,10,1,2,6,75,3,6,80,4,6,22,15,6,40,16,6,40,34,6,59,36,6,65,315],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,84,85,86,78,98,99,100,101,102,103,104],[2,20,2,2,2,2,2,2,2,2,11,2,11,2,11,2,2,2,2,2,2,2,2,2,4,9,9,9,4,4,2,2,2,11,2,2,2,2,2,2,-1,-2,-3,-4,-5,2,20,2,20,2,11,2,2,11,2,-1,-2,-3,17,-1,-2,-3,11,11,11,11,11,20,11,11,24,20,11,24,24],[0,0,28,0,28,28,0,313,28,57,2,0,2,0,2,0,0,0,0,0,0,0,0,0,38,45,45,67,38,38,4,4,0,2,28,0,0,28,0,0,208,209,210,211,212,4,4,4,4,0,2,28,0,2,0,139,213,214,139,215,216,217,2,2,2,2,2,0,2,2,314,0,2,315,316]],[[[319,"builtin-particle-trail",[{"hash":2502358098,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2543411830,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture2D(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1579485357,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2581776267,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"T_VFX_FreezeBorder","rect":{"x":0,"y":0,"width":414,"height":896},"offset":{"x":0,"y":0},"originalSize":{"width":414,"height":896},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[317]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[112,32]],[[[68,".bin",1014398668,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14688,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14688,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.27878057956695557,-0.2357182651758194,1.5832483768463135e-8],"maxPosition",8,[1,0.2783522307872772,0.6113547086715698,0.8522592782974243]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyBiker_01",[-2],[3,"94xHiK0AJcG7HhDtrTSJEu",-1,0]],[64,"SM_EnemyBiker_01",1,[[62,-3,[1,"b13/XLHw9X17XAy1C9bbJp"],[0],[45],1]],[3,"40xe0mc49a/5+K5jzHdd0S",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[318,319]],[[[77,"SM_EnemyBiker_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2524364770]]],11]]],0,0,[0],[16],[41]],[[[319,"builtin-standard",[{"hash":4079105024,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":3928335406,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[77,"SM_EnemyMothership_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyMothership_01",[-2],[3,"4e37O/SwtXH7ij3M5Kc8S1",-1,0]],[64,"SM_EnemyMothership_01",1,[[62,-3,[1,"3d+F2YkWVUE5dfeE39LNmH"],[0],[45],1]],[3,"53OMhPX+VYzZ+r1aj16Fsd",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[320,321]],[[[68,".bin",495361627,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17712,"length":2256,"count":564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17712,"count":369,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26215237379074097,-0.3705788254737854,-0.0040237754583358765],"maxPosition",8,[1,0.26215237379074097,0.36600902676582336,0.20196278393268585]]],-1],0,0,[],[],[]],[[[77,"SM_TowerCubeBase_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerCubeBase_01",[-2],[3,"2ftx87dFpbdKiqdLuVoOoe",-1,0]],[64,"SM_TowerCubeBase_01",1,[[62,-3,[1,"dbdV3sdgFULJOrqOS2M8DG"],[0],[45],1]],[3,"bbU+MnLS9Ry4NU6AjJZqVq",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[322,323]],[[[68,".bin",476204002,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":2928,"count":732,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":216,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3708244562149048,-0.3708243668079376,7.450580596923828e-9],"maxPosition",8,[1,0.37082427740097046,0.37082439661026,0.14156852662563324]]],-1],0,0,[],[],[]],[[[76],[55,"SM_BlockSlot_01",[-2],[3,"9ea1IJXwxR8LDyOJtyJFa5",-1,0]],[64,"SM_BlockSlot_01",1,[[62,-3,[1,"8avigzXY5XhKbCpmY6Hsd0"],[0],[45],1]],[3,"5aY9yPu/BZp7UcX9kK9WyN",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[324,325]],[[[77,"SM_BlockSlot_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",377554118,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.7500349879264832]]],-1],0,0,[],[],[]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[5,32]],[[[58,"P-MotherShip"],[228,"P-MotherShip",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[3,"84MNp5rytHk7MKew+MZE5D",1,0]],[304,"Art",1,[-33,-34,-35,2],[[[88,true,-29,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-30,[107,-32,[1,"94pyLGjUVBT4hYHycVaNdM"],-31]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-36,-37,-38,-39,-40,-41],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-42],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"4e37O/SwtXH7ij3M5Kc8S1",-44,[81,"dfEv3U1g9IeYieQZz8WRth",1,[[75,[2,["4e37O/SwtXH7ij3M5Kc8S1"]],[[57,-43,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[17,"SM_Model",["_name"],[2,["4e37O/SwtXH7ij3M5Kc8S1"]]],[14,["_lpos"],[2,["4e37O/SwtXH7ij3M5Kc8S1"]],[1,0,0,0]],[14,["_lrot"],[2,["4e37O/SwtXH7ij3M5Kc8S1"]],[3,0,0,0,1]],[14,["_euler"],[2,["4e37O/SwtXH7ij3M5Kc8S1"]],[1,0,0,0]],[35,["_materials","0"],[2,["3d+F2YkWVUE5dfeE39LNmH"]],3],[14,["_lscale"],[2,["53OMhPX+VYzZ+r1aj16Fsd"]],[1,3,3,4]],[17,"SM_Model",["_name"],[2,["53OMhPX+VYzZ+r1aj16Fsd"]]],[14,["_lscale"],[2,["4e37O/SwtXH7ij3M5Kc8S1"]],[1,1,1,1]]]],2]],[141,"Spawn Enemies",[[235,-46,[1,"c8XHdfxHpDTqy1MRySTiTb"],-45]],[3,"cega/hyd1PgbnfB8wiWCT3",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-54,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-53]]]],[[11,"P-HP-Bar",["_name"],-47],[5,["_lpos"],-48,[1,207,448.00000000000006,0]],[5,["_lrot"],-49,[3,0,0,0,1]],[5,["_euler"],-50,[1,0,0,0]],[11,"Art",["_name"],-51],[5,["_lpos"],-52,[1,0,0,0]]]],36]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-55,-56],[3,"10/INEOPhEu6IJP8OyaaZC",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[113,"VFX-BossExplosion",512,2,[-57],[3,"54Oy7pBqRJJ4lO97SaTv7q",1,0]],[86,0.2,false,false,11,[1,"7627i4zhRIU5rd7TxiSB4w"],[[8,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[79,"VFX-Flash",512,2,[-59],[3,"af9aRLNapJiqfIfEQa7U2N",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,13,[1,"82NL/UJ31ENbksuFtaMJiS"],[[10,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-60],[31,11]],[79,"VFX_SprayOut",512,2,[-61],[3,"8dS8CNpcxFtZoais3uHp9w",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,15,[1,"68Op3EauJIk66Ez8YhINvj"],[12],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-62],[121,1,0.1,13]],[113,"VFX_Explosion2",512,2,[-63],[3,"13DLnsJ2VC6IFh9vkGqsMX",1,0]],[86,1.5,false,false,17,[1,"45PpFocJlJpJQup74wBa28"],[[14,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-64],[31,15]],[79,"VFX_SprayOut2",512,2,[-65],[3,"905M+mhW9DA6yML2PVFzUY",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,19,[1,"7dHZ9a8gpCaqUa89NyFyLf"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-66],[121,1,0.1,17]],[79,"VFX-ScreenTone",512,2,[-67],[3,"93BNyGbDBHE43adq5Je89f",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,21,[1,"3cYkW0ChBFa65j+VU0kq4Q"],[[18,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-68],[31,19]],[113,"VFX-CircleIn",512,2,[-69],[3,"60IFXtU0FJqo8hF+jkz3w4",1,0]],[86,0.4,false,false,23,[1,"ceF4cP9hRFzrL9B6wnSrkx"],[[20,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-70],[31,21]],[113,"VFX-RingIn",512,2,[-71],[3,"6bEKpC9GhCyYZ0i0P9Irsv",1,0]],[86,0.4,false,false,25,[1,"f2ywj3ErJDkqOF6qsiSzO6"],[[22,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-72],[31,23]],[79,"VFX_SprayIn",512,2,[-73],[3,"cfODmQVsZLpJgV4QPS0rlM",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,27,[1,"bf8XzHLJ9DPYrslqqomWSQ"],[24],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-74],[121,1,0.5,25]],[79,"VFX-ChargeFlash",512,2,[-75],[3,"48Qgk4M8lIApXgomtAuYZR",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,29,[1,"a9WoHLJDBA/5Dn03IxYWkx"],[26],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-76],[31,27]],[79,"VFX-Sparkle",512,2,[-77],[3,"b54XYX1YxClJ9bSjFeV4CI",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,31,[1,"08Pqpfy2NGh7VTVHP6F0Fl"],[[28,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[31,29]],[79,"VFX_LightRay",512,2,[-79],[3,"bbo46bJDBId6qX3q3t3UJO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,33,[1,"9d2cGf2+tADLLAbxb6MY93"],[30],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-80],[31,31]],[56,"HP Controller",4,[-81],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-82],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"cc.ParticleSystem","play",15],[8,"cc.ParticleSystem","play",17],[8,"cc.ParticleSystem","play",19],[8,"cc.ParticleSystem","play",21],[8,"cc.ParticleSystem","play",23],[8,"cc.ParticleSystem","play",25],[8,"cc.ParticleSystem","play",27],[8,"cc.ParticleSystem","play",29],[8,"cc.ParticleSystem","play",31],[8,"cc.ParticleSystem","play",33],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[65,"On Death VFX Finished",4,[[118,-83,[1,"08YVxqU/ZOvoZe6kTPNhhe"],[12,14,16,18,20,22,26,28,30,32,34,24],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"c5O/P6+pRGmK9nMqqnghoW",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-84,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,10,[1,"41xMUx+tBH4aqh2W9Xq0aM"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-85],[31,5]],[119,0.3,false,10,[1,"d1qethHmFM7KhlZkPwy4IB"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-86],[31,7]],[100,3,[1,"cee2ID8IRMEbn7lUxcJnlp"]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",4,[-87],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,44,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[42,"Specials",4,[7],[3,"5cwJ6W6ItJ9Jh9kHBdNXK1",1,0]],[234,"MotherShip",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",35],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",7]],36,43,45],[65,"Timer",4,[[469,true,3,-88,[1,"fcShTvEgVPGZyxfaWD8rMY"],[[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",7]]]],[3,"b1d80oKfFBHq84RIVNJlOx",1,0]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,8,0,5,8,0,13,36,0,3,1,0,-1,47,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,49,0,-1,10,0,-2,11,0,-3,13,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,42,0,25,42,0,0,3,0,-1,38,0,-2,39,0,-3,6,0,-1,5,0,-2,35,0,-3,44,0,-4,37,0,-5,46,0,-6,48,0,-1,43,0,0,6,0,3,6,0,41,47,0,0,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,50,0,1,50,0,19,39,0,3,8,0,-1,40,0,-2,41,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,16,0,7,16,0,-1,18,0,7,18,0,-1,20,0,7,20,0,-1,22,0,7,22,0,-1,24,0,7,24,0,-1,26,0,7,26,0,-1,28,0,7,28,0,-1,30,0,7,30,0,-1,32,0,7,32,0,-1,34,0,7,34,0,-1,36,0,5,37,0,0,37,0,0,38,0,7,40,0,7,41,0,-1,45,0,0,48,0,10,1,2,6,3,7,6,46,8,6,49,88],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,326,1,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,66,8,24,73]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[33],[327]],[[[149,[[156,[114,[-10,-11,-12,-13,-14],[[82,0,false,-5,-4,[[157,[104,"selected"]]]],[82,0,false,-7,-6,[[175,1,[104,"selected"]]]],[115,-9,-8]],-3,-2,-1]]],[{},"selected",4,[176,1,false]]],[63,"TowerTab_NotSelected",[72,0]],[61,"Entry"],[63,"TowerTab_Selected",[72,1]],[61,"Exit"],[61,"Any"]],0,[0,29,5,0,30,4,0,31,2,0,14,3,0,15,1,0,14,1,0,15,3,0,14,1,0,15,2,0,-1,2,0,-2,4,0,-3,5,0,-4,1,0,-5,3,14],[0,0],[18,18],[81,74]],[[[149,[[213,"Base",[114,[-12,-13,-14,-15,-16,-17,-18],[[82,0,false,-5,-4,[[157,[104,"clickYes"]],[91,"exit"]]],[82,0,false,-7,-6,[[175,1,[104,"clickYes"]],[91,"exit"]]],[115,-9,-8],[354,0,true,false,-11,-10,[[91,"intro"]]]],-3,-2,-1]],[213,"Lacking Max Energy",[114,[-28,-29,-30,-31,-32],[[115,-23,-22],[82,0,false,-25,-24,[[157,[104,"lackingMaxEnergy"]]]],[82,0,false,-27,-26,[[175,1,[104,"lackingMaxEnergy"]]]]],-21,-20,-19]],[213,"Tower Info",[114,[-42,-43,-44,-45,-46],[[115,-37,-36],[82,0,false,-39,-38,[[157,[104,"towerBought"]]]],[82,0,false,-41,-40,[[175,1,[104,"towerBought"]]]]],-35,-34,-33]]],[{},"clickYes",4,[176,1,false],"exit",4,[101,2],"intro",4,[101,2],"lackingMaxEnergy",4,[176,1,false],"towerBought",4,[176,1,false]]],[63,"ConfirmationTower_Intro",[72,0]],[63,"Confirmation Tower_Not Lacking Max Energy",[72,4]],[63,"Confirmation Tower_TowerInfo NotBought",[72,6]],[61,"Entry"],[61,"Any"],[61,"Entry"],[63,"Confirmation Tower_Lacking Max Energy",[72,3]],[61,"Entry"],[63,"Confirmation Tower_TowerInfo Bought",[72,5]],[61,"Exit"],[63,"ConfirmationTower_ExitNo",[72,1]],[63,"ConfirmationTower_ExitYes",[72,2]],[63,"Empty",[186]],[61,"Exit"],[61,"Any"],[61,"Exit"],[61,"Any"]],0,[0,29,5,0,30,10,0,31,4,0,14,12,0,15,1,0,14,11,0,15,1,0,14,13,0,15,4,0,14,1,0,15,5,0,-1,4,0,-2,10,0,-3,5,0,-4,1,0,-5,11,0,-6,12,0,-7,13,0,29,15,0,30,14,0,31,6,0,14,2,0,15,6,0,14,7,0,15,2,0,14,2,0,15,7,0,-1,6,0,-2,14,0,-3,15,0,-4,7,0,-5,2,0,29,17,0,30,16,0,31,8,0,14,3,0,15,8,0,14,9,0,15,3,0,14,3,0,15,9,0,-1,8,0,-2,16,0,-3,17,0,-4,9,0,-5,3,46],[0,0,0,0,0,0,0],[18,18,18,18,18,18,18],[103,105,104,106,107,64,108]],[[{"name":"UI_Panel_Outline 3","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[3,3,3,3],"packable":true}],[2],0,[0],[33],[328]],[[[58,"P-LaserTower-Beam-OmegaBeam"],[55,"P-LaserTower-Beam-OmegaBeam",[-2],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[65,"Temp",1,[[357,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[4,0.5],[6],0]],[3,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0],[48],[113]],[[[77,"SM_EnemyBreeder_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2116400395,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13824,"length":2232,"count":558,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44926419854164124,-0.6113954782485962,-0.010970347560942173],"maxPosition",8,[1,0.44926419854164124,0.6379702091217041,0.4927515685558319]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyBreeder_01",[-2],[3,"b6WuSZggVbVqyZ36EcrJAQ",-1,0]],[64,"SM_EnemyBreeder_01",1,[[62,-3,[1,"14dCZuzQ5ZrYZb8GT6TPbg"],[0],[45],1]],[3,"eaqOmHLtpfApf7fFMjgxn8",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[329,330]],[[[58,"P-Crowder-0"],[152,"P-Crowder-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Crowder-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.6,0.6,0.8]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"7fciu/Gg9S/bnu8xJWbMom",-34,[81,"1crzRsAYpIWbqwVN3BJi/f",1,[[75,[2,["7fciu/Gg9S/bnu8xJWbMom"]],[[57,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["9efmySxl5TsIXK39+yLHpg"]],3],[5,["_lpos"],-31,[1,0,-0.039,0.154]],[11,"SM_Model",["_name"],-32]]],2]],[42,"Scripts",1,[3,-35,-36,-37],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["7fciu/Gg9S/bnu8xJWbMom"]],[364,"VFX",2,[-38,-39,-40],[3,"c45tEhPp1ITqXIWf5CJEoD",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-48,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-47]]]],[[11,"P-HP-Bar",["_name"],-41],[5,["_lpos"],-42,[1,207,448.00000000000006,0]],[5,["_lrot"],-43,[3,0,0,0,1]],[5,["_euler"],-44,[1,0,0,0]],[11,"Art",["_name"],-45],[5,["_lpos"],-46,[1,0,0,0]],[14,["_contentSize"],[2,["c64LiUsQNM4LjiTXqu/AKi"]],[5,414,896]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[56,"VFX_Death_Erupt",7,[-49],[3,"a3VoOrtd1O5aX6tu3uI4aA",1,0]],[74,1,false,false,10,[1,"86T87a9K9E5pStURaaTJNo"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-50],[31,5]],[56,"VFX_Death_Shards",7,[-51],[3,"7bjBpGqPVKf7P9VHT0Q37v",1,0]],[74,1,false,false,12,[1,"d4SIGx/vFHh4rzxqzQTdki"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-52],[31,7]],[56,"VFX_Spawn",7,[-53,-54],[3,"67Lt3FY85FMZmNgeKfFJLa",1,0]],[56,"HP Controller",5,[-55],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-56],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-57,[1,"7a/Dbp2GtHQYJ2AH1lfcg8"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"949GjlVN5KlLBUMBhbcK1w",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-58,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["ee6J7zZuhZ7ZlMxt5O9sjf"]],[120,0.3,false,14,[1,"84H40Z+cJL8rtOOFl4ygbD"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,9]],[119,0.3,false,14,[1,"84H40Z+cJL8rtOOFl4ygbD"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-60],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-61],[3,"72Uf8+ozZB8ayDAn7lWb4W",1,0]],[145,24,[1,"f2+yHdpmFP57Dep08Uz6Rn"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,25,0,34,23,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,26,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,20,0,1,20,0,0,4,0,3,4,0,-2,15,0,-3,24,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,27,0,1,27,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,21,0,-2,22,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,21,0,7,22,0,-1,25,0,10,1,3,6,5,8,6,26,61],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,331,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17,-18],[[115,-5,-4],[354,0,true,false,-7,-6,[[91,"zoomIn"],[406,[407,"zoomIntensity"],[471,2]]]],[82,0,false,-9,-8,[[91,"zoomIn"],[406,[407,"zoomIntensity"],[471,1]]]],[82,0,false,-11,-10,[[91,"zoomIn"],[406,[407,"zoomIntensity"],[640]]]]],-3,-2,-1]]],[{},"zoomIntensity",4,[639,3],"zoomIn",4,[101,2]]],[63,"Empty",[186]],[61,"Entry"],[61,"Exit"],[61,"Any"],[63,"Camera-ZoomIn-Medium",[72,0]],[63,"Camera-ZoomIn-Large",[72,1]],[63,"Camera-ZoomIn-Small",[72,2]]],0,[0,29,4,0,30,3,0,31,2,0,14,1,0,15,2,0,14,6,0,15,1,0,14,5,0,15,1,0,14,7,0,15,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,1,18],[0,0,0],[18,18,18],[218,219,220]],[[[149,[[156,[114,[-14,-15,-16,-17,-18,-19,-20],[[82,0,false,-5,-4,[[175,1,[104,"inScene"]]]],[115,-7,-6],[354,0,true,false,-9,-8,[[157,[104,"inScene"]]]],[82,0,false,-11,-10,[[157,[104,"paused"]]]],[82,0,false,-13,-12,[[175,1,[104,"paused"]]]]],-3,-2,-1]]],[{},"inScene",4,[176,1,false],"paused",4,[176,1,false]]],[63,"IntroPause_PlayClick",[72,1]],[61,"Entry"],[63,"IntroPause_Intro",[72,0]],[63,"Empty",[186]],[63,"IntroPause_PauseClick",[72,2]],[61,"Exit"],[61,"Any"]],0,[0,29,7,0,30,6,0,31,2,0,14,1,0,15,3,0,14,4,0,15,2,0,14,3,0,15,4,0,14,5,0,15,1,0,14,1,0,15,5,0,-1,2,0,-2,6,0,-3,7,0,-4,3,0,-5,1,0,-6,4,0,-7,5,20],[0,0,0],[18,18,18],[190,191,192]],[[[149,[[156,[114,[-6,-7,-8,-9],[[115,-5,-4]],-3,-2,-1]],[156,[114,[-19,-20,-21,-22,-23],[[115,-14,-13],[214,0,-16,-15,[[91,"IsHit"]]],[318,0,-18,-17]],-12,-11,-10]]],[{},"IsHit",4,[101,2]]],[250,"Empty"],[61,"Entry"],[61,"Entry"],[63,"Hit",[72,1]],[61,"Exit"],[61,"Any"],[63,"Idle",[72,0]],[61,"Exit"],[61,"Any"]],0,[0,29,6,0,30,5,0,31,2,0,14,7,0,15,2,0,-1,2,0,-2,5,0,-3,6,0,-4,7,0,29,9,0,30,8,0,31,3,0,14,1,0,15,3,0,14,4,0,15,1,0,14,1,0,15,4,0,-1,3,0,-2,8,0,-3,9,0,-4,1,0,-5,4,23],[0,0],[18,18],[221,222]],[[{"name":"UI_Indicator","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[332]],[[[58,"05-Ground-Block"],[305,"05-Ground-Block",16,[[-17,-18,[98,"Events",-20,[3,"26v2eHDtlCM7ivoqBF7TjE",-19,0]]],1,1,4],[[472,-16,[1,"a89E+Jrq1Hr6jEGUCmTbE5"]]],[240,"a0J5bKqYFEmaKO4oONshDj",-15,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14]]],[227,"Toppings 1",[-21,-22,-23,-24,-25,-26],[3,"91/rTcXZFEpLJ3d9w+Jfn2",1,0],[1,0,0.7,0]],[42,"Art",1,[-27,-28,-29,-30,2,-31,-32],[3,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[42,"Scripts",1,[-33,-34,-35,-36,-37,-38,-39],[3,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[42,"Toppings 3",3,[-40,-41,-42,-43],[3,"17T2Wy69VI1a72BMjCLZCG",1,0]],[2,["3eCYgi3G9Xl4TH+IlMfqkO"]],[2,["adq/Yq1hVR5Kyey84ZN4kv"]],[2,["9baIPWPuBegYREJ2bd45GU"]],[2,["d29whoas9ct6gAWpHxYcDc"]],[2,["6bMnZwcz1cbYMdXClIbfGW"]],[2,["2c3ig9FjFS+bF3iVcd7QWx"]],[2,["4bKhv/jV5Y7ZI2kqZex6z2"]],[2,["bb0RXNBHxTGI42/b2Cnubv"]],[2,["37AJz6L3dTxa3usvYy5S1i"]],[2,["69vp2YjNJakaIDVHGspGD6"]],[2,["deBsgn88dR46R0UuPdg7fm"]],[90,0,null,[22,"4fecgAd2JbDKVfOw0g/xbW",-48,[49,"e4DqtOv+hMhpZvlqnQtq4q",1,[[11,"SM_BlockHigh_01",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]],[5,["_lrot"],-46,[3,0,0,0,1]],[5,["_euler"],-47,[1,0,0,0]],[35,["_materials","0"],[2,["14k8y0SLpdaroj+3hWQPNc"]],3]]],2]],[2,["4fecgAd2JbDKVfOw0g/xbW"]],[90,0,null,[22,"73iHBgzzVTcYYBmRlHhAuY",-53,[49,"ccHsts2eBODZ9YZeUIEkpz",1,[[11,"SM_BlockHigh_02",["_name"],-49],[5,["_lpos"],-50,[1,0,0,0]],[5,["_lrot"],-51,[3,0,0,0,1]],[5,["_euler"],-52,[1,0,0,0]],[35,["_materials","0"],[2,["a6Qiv9LN5Y0ok4uMtmSOe6"]],5]]],4]],[2,["73iHBgzzVTcYYBmRlHhAuY"]],[90,0,null,[22,"4fecgAd2JbDKVfOw0g/xbW",-60,[49,"56nrscSXdJvptKKT2fdbP9",1,[[11,"SM_BlockHigh_02",["_name"],-54],[5,["_lpos"],-55,[1,0,0,0]],[5,["_lrot"],-56,[3,0,0,0,1]],[5,["_euler"],-57,[1,0,0,0]],[183,["_materials","0"],-58,7],[183,["_mesh"],-59,8]]],6]],[2,["4fecgAd2JbDKVfOw0g/xbW"]],[30,0,null,2,[22,"3eCYgi3G9Xl4TH+IlMfqkO",-61,[49,"9aAM9frjNKEL29b3DC4P5B",1,[[11,"SM_BlockDetail_01",["_name"],6],[5,["_lpos"],6,[1,0,0,0.051]],[5,["_lrot"],6,[3,0,0,0,1]],[5,["_euler"],6,[1,0,0,0]],[35,["_materials","0"],[2,["fb6o+I7s1ap6QaBFvF7AAY"]],10],[11,false,["_active"],6]]],9]],[30,0,null,2,[22,"adq/Yq1hVR5Kyey84ZN4kv",-62,[49,"54iNqhd6VMSbrQJO75zM+v",1,[[11,"SM_BlockDetail_02",["_name"],7],[5,["_lpos"],7,[1,-0.007,0,-0.018]],[5,["_lrot"],7,[3,0,0,0,1]],[5,["_euler"],7,[1,0,0,0]],[35,["_materials","0"],[2,["49hPoZFQtfgKWF4Jpx8AbD"]],12],[11,false,["_active"],7]]],11]],[30,0,null,2,[22,"9baIPWPuBegYREJ2bd45GU",-63,[49,"b4+NwYno1DDrlBIcZi4VhG",1,[[11,"SM_BlockDetail_03",["_name"],8],[5,["_lpos"],8,[1,0,0,0]],[5,["_lrot"],8,[3,0,0,0,1]],[5,["_euler"],8,[1,0,0,0]],[11,false,["_active"],8],[35,["_materials","0"],[2,["3cp8QxXtBa7JpQCn73Ia+U"]],14]]],13]],[30,0,null,2,[22,"d29whoas9ct6gAWpHxYcDc",-64,[49,"a6b0hDecBLo6nrTZZMUKjK",1,[[11,"SM_BlockDetail_04",["_name"],9],[5,["_lpos"],9,[1,0,0,0]],[5,["_lrot"],9,[3,0,0,0,1]],[5,["_euler"],9,[1,0,0,0]],[11,false,["_active"],9],[35,["_materials","0"],[2,["b4Cl6HSUJYAI6DNuXBqPYC"]],16]]],15]],[30,0,null,2,[22,"6bMnZwcz1cbYMdXClIbfGW",-65,[49,"75cO3Me/RDiLup7gapxRYM",1,[[11,"SM_BlockDetail_05",["_name"],10],[5,["_lpos"],10,[1,0,0,0]],[5,["_lrot"],10,[3,0,0,0,1]],[5,["_euler"],10,[1,0,0,0]],[11,false,["_active"],10],[35,["_materials","0"],[2,["11J0+1wghVOZLzTMW9skJd"]],18]]],17]],[30,0,null,2,[22,"2c3ig9FjFS+bF3iVcd7QWx",-66,[49,"06hYD6dTRLsKYsM3ri/b1o",1,[[11,"SM_BlockDetail_06",["_name"],11],[5,["_lpos"],11,[1,0,0,0]],[5,["_lrot"],11,[3,0,0,0,1]],[5,["_euler"],11,[1,0,0,0]],[11,false,["_active"],11],[35,["_materials","0"],[2,["feSFXUciRfzZUBkwwC679a"]],20]]],19]],[42,"Toppings 2",3,[-67],[3,"8a2m/PAn5LZKBq7UkO+tiG",1,0]],[30,0,null,29,[22,"4bKhv/jV5Y7ZI2kqZex6z2",-68,[49,"645+Uxk2VD+JmtT/Pp2xN0",1,[[11,"SM_Cracks_01",["_name"],12],[5,["_lpos"],12,[1,0,0,0]],[5,["_lrot"],12,[3,0,0,0,1]],[5,["_euler"],12,[1,0,0,0]],[35,["_materials","0"],[2,["fdBUKNZOdcRpJjryQ5pdeh"]],22],[11,false,["_active"],12]]],21]],[30,0,null,5,[22,"bb0RXNBHxTGI42/b2Cnubv",-69,[49,"7dRjdMDBlMDKP/yqdCiY4k",1,[[11,"SM_Crystal_01",["_name"],13],[5,["_lpos"],13,[1,0,0,0]],[5,["_lrot"],13,[3,0,0,0,1]],[5,["_euler"],13,[1,0,0,0]],[35,["_materials","0"],[2,["ccVb+VfBxQMYPT+MwU2grc"]],24],[11,false,["_active"],13]]],23]],[30,0,null,5,[22,"37AJz6L3dTxa3usvYy5S1i",-70,[49,"9f4AKM5R1HMKJdc0Q3EoQc",1,[[11,"SM_CubeDetail_01",["_name"],14],[5,["_lpos"],14,[1,0,0,0]],[5,["_lrot"],14,[3,0,0,0,1]],[5,["_euler"],14,[1,0,0,0]],[35,["_materials","0"],[2,["9bRA9bc99UN4/jH8hpKpSw"]],26],[11,false,["_active"],14]]],25]],[30,0,null,5,[22,"69vp2YjNJakaIDVHGspGD6",-71,[49,"e4bXVjb6RIv7dB5eWu2eFu",1,[[11,"SM_CubeDetail_02",["_name"],15],[5,["_lpos"],15,[1,0,0,0]],[5,["_lrot"],15,[3,0,0,0,1]],[5,["_euler"],15,[1,0,0,0]],[35,["_materials","0"],[2,["01NEcE4CpQBazU43NjyQzP"]],28],[11,false,["_active"],15]]],27]],[30,0,null,5,[22,"deBsgn88dR46R0UuPdg7fm",-72,[49,"6dApavnX9Niq5ezWaAJu9F",1,[[11,"SM_CubeDetail_03",["_name"],16],[5,["_lpos"],16,[1,0,0,0]],[5,["_lrot"],16,[3,0,0,0,1]],[5,["_euler"],16,[1,0,0,0]],[35,["_materials","0"],[2,["95XT6Y7ppZgLhssma9tJt7"]],30],[11,false,["_active"],16]]],29]],[99,"1",false,3,[17],[3,"0aIVupCTlN/brqliX5EqVU",1,0]],[99,"2",false,3,[19],[3,"07u+12NmpGOrtLbYRFQ2Yq",1,0]],[99,"3",false,3,[21],[3,"faj76PNwhJvLkTtYnK0Mxy",1,0]],[65,"Randomize Art Toppings 1",4,[[473,5,-73,[1,"ceM8te3hFOKaUWo7pLTekm"],[[222,1,23],[222,1,24],[222,1,25],[222,1,26],[222,1,27],[222,1,28]]]],[3,"dbCSJsYZRGHoeUVhNn64HS",1,0]],[65,"Randomize Art Toppings 2",4,[[473,1,-74,[1,"aaZmvLcAZLvJEXYqveCgAh"],[[222,1,30]]]],[3,"5eRvQFzZxIS4bXCM5/3fks",1,0]],[65,"Randomize Art Toppings 3",4,[[641,3,true,-75,[1,"f5dDwrqBNHTplHDpSEqUHw"],[[222,1,31],[222,1,32],[222,1,33],[222,1,34]]]],[3,"c0ZHPTTYxM+K7PZDVCVjcc",1,0]],[237,"TEMP-Model",false,3,[[95,"Cube<ModelComponent>",-76,[1,"3eq+2PhbRKu6WNSyYqYlmc"],[0],[45],1]],[3,"e4KNNUxLBOiaIrybrwqbAS",1,0]],[2,["14k8y0SLpdaroj+3hWQPNc"]],[65,"Randomize Art Block Position",4,[[642,true,-77,[1,"d9VM+yVL5BC70UqIklVWU1"],[1,0,-0.25,0],[1,0,0.25,0],[17,2,19,29,21,5]]],[3,"88vmMYOIhCg4IzK81M+Yur",1,0]],[65,"On Enable",4,[[203,-78,[1,"37m8bCpQlEzoI7R1hN7ZxV"],[[8,"d9dbaePcK9EmpC+u+4XoTKT","randomize",38],[8,"d9dbaePcK9EmpC+u+4XoTKT","randomize",39],[8,"d9dbaePcK9EmpC+u+4XoTKT","randomize",40]]]],[3,"dadxub055JopnKqoY9oFHr",1,0]],[65,"Theme Models Chooser",4,[[174,-79,[1,"a740Ko3zNEcKsqlmtY1695"],[35,36,37],31]],[3,"1b5SxUUhxBl4hPscbCvJ56",1,0]],[65,"Theme Models Chooser-001",4,[[174,-80,[1,"2dnIp8BYBL/KobKgxMeeSO"],[2,29,5],32]],[3,"2cRpNhjHRHdaOYWafXzZ6b",1,0]]],0,[0,-1,17,0,-2,19,0,-3,21,0,-4,23,0,-5,24,0,-6,25,0,-7,26,0,-8,27,0,-9,28,0,-10,30,0,-11,31,0,-12,32,0,-13,33,0,-14,34,0,3,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-1,23,0,-2,24,0,-3,25,0,-4,26,0,-5,27,0,-6,28,0,-1,41,0,-2,35,0,-3,36,0,-4,37,0,-6,29,0,-7,5,0,-1,43,0,-2,38,0,-3,39,0,-4,40,0,-5,44,0,-6,45,0,-7,46,0,-1,31,0,-2,32,0,-3,33,0,-4,34,0,1,18,0,1,18,0,1,18,0,1,18,0,3,17,0,1,20,0,1,20,0,1,20,0,1,20,0,3,19,0,1,22,0,1,22,0,1,22,0,1,22,0,1,42,0,1,42,0,3,21,0,3,23,0,3,24,0,3,25,0,3,26,0,3,27,0,3,28,0,-1,30,0,3,30,0,3,31,0,3,32,0,3,33,0,3,34,0,0,38,0,0,39,0,0,40,0,0,41,0,0,43,0,0,44,0,0,45,0,0,46,0,10,1,2,6,3,17,6,35,19,6,36,21,6,37,80],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,4,9,4,9,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,39,39],[223,40,224,1,333,17,224,17,334,335,1,336,1,337,1,338,1,339,1,340,1,341,17,342,17,343,17,344,17,345,17,31,31]],[[[77,"SM_Tower3MGvBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",4212621417,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38304,"length":11580,"count":2895,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38304,"count":798,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2232978790998459,-0.39257004857063293,-0.00849794689565897],"maxPosition",8,[1,0.22329778969287872,0.25317785143852234,0.679470419883728]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Tower3MGvBody_01",[-2],[3,"efp8IlO8deIZfWSlH1z7o0",-1,0]],[64,"SM_Tower3MGvBody_01",1,[[62,-3,[1,"49Ry8eFLhb25C1Q8wGk6C1"],[0],[45],1]],[3,"3aIYRFdwZW1ITWY1VGXMEK",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[346,225]],[[[58,"P-Runner-2"],[152,"P-Runner-2",[[-17,-18,[98,"Events",-20,[3,"d95EadoVJHU5W5txftTQiE",-19,0]],-21],1,1,4,1],[[192,"Runner-2",-12,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-10],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-11]],-9,-8,-7],[57,-13,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-14,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-15,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-16,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[89,["_uiFillbar"],-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]],[67,["_uiFillbar"],-5,-4,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-23,-24,-25,-26],[[88,true,-22,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-27],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"e9aXVNzZtaRJscaZ3oH2lT",-33,[81,"4e+AlmKvhPkZOO6sSbp68M",1,[[75,[2,["e9aXVNzZtaRJscaZ3oH2lT"]],[[57,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-28],[5,["_lpos"],-29,[1,0,0,0]],[5,["_lrot"],-30,[3,0,0,0,1]],[5,["_euler"],-31,[1,0,0,0]],[35,["_materials","0"],[2,["82KrnAfSpZG69ZHuCZgscH"]],3],[17,"SM_Model",["_name"],[2,["c4b+YlD25S86pnrjGBd2Oa"]]]]],2]],[42,"Scripts",1,[3,-34,-35,-36],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-44,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-43]]]],[[11,"P-HP-Bar",["_name"],-37],[5,["_lpos"],-38,[1,207,448.00000000000006,0]],[5,["_lrot"],-39,[3,0,0,0,1]],[5,["_euler"],-40,[1,0,0,0]],[11,"Art",["_name"],-41],[5,["_lpos"],-42,[1,0,0,0]]]],15]],[2,["e9aXVNzZtaRJscaZ3oH2lT"]],[42,"VFX",2,[-45,-46,-47],[3,"8er6avrZlEGL30TjP1I4ZP",1,0]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",8,[-48],[3,"4bxCPOAeBB27j0NR13Nm+v",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"a0Xk99R/dM2ZaY5gHtcTuo"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-49],[31,5]],[73,"VFX_Death_Shards",8,[-50],[3,"70+SDzrzNDyaOcl5eAXkCV",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"533uR5L4VJo6ftNlpEgnbj"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-51],[31,7]],[73,"VFX_Spawn",8,[-52,-53],[3,"7fLVBBgG1FfZ/TXdr/7uQK",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-54],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[65,"On Death VFX Finished",5,[[118,-56,[1,"caR6q06KNHsb890r2Ow1m7"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"97iFnebZ9Ljoe5ps8bSXVk",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"5f3P23vKxFprncVQcsIHsd"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[119,0.3,false,14,[1,"a72FM3p79PepftVEqguqjx"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-60],[3,"31uSj+WThKTIt9/sdxHN+T",1,0]],[145,23,[1,"6aPiZhGDhPm4BUfcZnGALn"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[6],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,6,0,5,6,0,5,6,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,8,0,-1,22,0,1,7,0,1,7,0,1,7,0,1,7,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,6,0,-1,10,0,-2,12,0,-3,14,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,6,6,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,347,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[76],[55,"SM_EnemyOvercharger_03",[-2],[3,"79BYQtfNNbj4YT0sLCxBU2",-1,0]],[64,"SM_EnemyOvercharger_03",1,[[62,-3,[1,"5b4dml5JZZSpEFLZ2t+IcI"],[0],[45],1]],[3,"b2leN5NINUyYLt7KA/my5j",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[348,349]],[[[77,"SM_EnemyOvercharger_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",89547796,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4294967174]]],11]]],0,0,[0],[16],[41]],[[[58,"P-Tank-2"],[152,"P-Tank-2",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Tank-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"6fmtIknt9barIS5y55aJtq",-32,[81,"f2a0mp8bNC7bD54hw6Y13q",1,[[75,[2,["6fmtIknt9barIS5y55aJtq"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.175,0.091]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["66o7UDfllVyr9MoWFmTbga"]],3],[17,"SM_Model",["_name"],[2,["7a5v6ewJBcY6bQHuXc2hJF"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["6fmtIknt9barIS5y55aJtq"]],[42,"VFX",2,[-36,-37,-38],[3,"aeUCIwkRdNnZ85aGoSwsxY",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"6439JCnJdESJrRIzw1X6Xe",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"0eRY0j2sRN2LMSmlTgdDC7"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"eewGKCtCVCOrQ0SOWIA6wT",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"9a33wGUzlEE5+mfNR0v0fi"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"33yjbetb9FM7Z5dQ7NiEBL",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"4ad/DwlQdNG49/4a9n8z+I"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"22NvrE4V5LHKAw78WKZzPN",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"3a3Sd8kLBGNaWPmhJ/IhNc"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"60NTAXw5tKgaDRtNlKKVcT"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[145,23,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,350,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[205,[{"rasterizerState":{"shadeModel":1,"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[351,41]],[[[77,"SM_EnemyCharger_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyCharger_01",[-2],[3,"47/vCPei5Z0pNlzjcP769r",-1,0]],[64,"SM_EnemyCharger_01",1,[[62,-3,[1,"f9Xsbslq5Th7Btq+30Q0l1"],[0],[45],1]],[3,"477ZEAbpBWqKxecVErE+OB",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[352,353]],[[[68,".bin",3218173862,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[77,"SM_BlockDetail_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",214045722,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19152,"length":6072,"count":1518,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19152,"count":399,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4379175305366516,-0.31485438346862793,-0.012438390403985977],"maxPosition",8,[1,0.3254941701889038,0.47018003463745117,0.34161439538002014]]],-1],0,0,[],[],[]],[[[76],[55,"SM_BlockDetail_01",[-2],[3,"3eCYgi3G9Xl4TH+IlMfqkO",-1,0]],[64,"SM_BlockDetail_01",1,[[62,-3,[1,"fb6o+I7s1ap6QaBFvF7AAY"],[0],[45],1]],[3,"27MkPpTrhV/YzOKm7UdrDt",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[354,355]],[[[58,"Towers Holder"],[514,"Towers Holder",8388608,[-9,-10],[[[9,-2,[1,"b3s3iwIk5GWLlMpTf30EX5"],[5,1.3,1.2333333333333334]],-3,[643,-7,[1,"cfGNKRbINDO7IZQhUKGHsa"],-6,-5,-4,0,1],[88,true,-8,[1,"bbvxE+a7RLlb4K23+CkgQh"],[2],3]],4,1,4,4],[3,"1ewdi1di5LRLRsG+guCXmn",-1,0],[3,0.3314135740355918,0.8001031451912656,0.4619397662556433,0.19134171618254486],[1,60,60,60.00000000000001],[1,-59.99999999999999,180,45.00000000000001]],[83,"Head Pivot",8388608,1,[-12],[[48,-11,[1,"32uDYhTTxPELrkKx3qUEcG"]]],[3,"4cmdeCgahD+7pmqhGqkBOi",1,0]],[85,"Inner Pivot",8388608,2,[[48,-13,[1,"4dO9eXe5BLmaBUOWHh2l6B"]]],[3,"567J4hAvhBHpZ0NfvzCgNL",1,0],[1,0,0.55,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[169,"Base Pivot",8388608,1,[[48,-14,[1,"cevMoJmpNErrD1piEoV5a+"]]],[3,"02Z6od6+lLPYyWz/3Uv+Qi",1,0],[1,0,0.25,0],[1,0.6,0.6,0.6]],[306,true,true,1,[1,"38JEqV6MtBrIIB0I78QUIw"]]],0,[0,3,1,0,0,1,0,-2,5,0,54,5,0,69,4,0,70,3,0,0,1,0,0,1,0,-1,2,0,-2,4,0,0,2,0,-1,3,0,0,3,0,0,4,0,10,1,14],[0,0,0,0],[71,40,-1,17],[356,37,226,226]],[[{"name":"Icon_Currency Yellow 32","rect":{"x":1,"y":1,"width":30,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[357]],[[[58,"P-Spawner"],[55,"P-Spawner",[-2,-3],[3,"e7x73SDh9MfZgQfJSXZT9u",-1,0]],[65,"Scripts",1,[[644,-4,[1,"18nYvcfMtJO6Oo5PlZFwRZ"],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]]],[3,"1cNL1n+WFNfIq0J1FHVpx3",1,0]],[42,"Events",1,[-5,-6,-7],[3,"d3Y05YuGFBTqGWcwcFabCr",1,0]],[65,"Spawn Enemy Listener",3,[[474,1,-8,[1,"0bmHxJWWZKHbEPI3AvzRio"],[[8,"6224ediLkZG84aZ/Y7G48dr","spawnEnemy",2]]]],[3,"d4DYBltkRBy7G1lL1D+UGh",1,0]],[65,"Spawn Horde Listener",3,[[474,2,-9,[1,"c8oKJaO91HgqcUU9Q3sGVK"],[[8,"6224ediLkZG84aZ/Y7G48dr","spawnHorde",2]]]],[3,"73P2RgJhJIPrQOfEbOUvy8",1,0]],[65,"Game Over",3,[[206,4,-10,[1,"4bL9tUfqNGRI3qODRXrUqE"],[[8,"6224ediLkZG84aZ/Y7G48dr","deactivate",2]]]],[3,"aeC7MhkEdOdr2ybzitYqn4",1,0]]],0,[0,3,1,0,-1,2,0,-2,3,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,0,4,0,0,5,0,0,6,0,10,1,10],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[148,121,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,358,359,360,361]],[[[58,"SM_TowerH311Body_01"],[55,"SM_TowerH311Body_01",[-2],[3,"76kmy9MSZU7qIHreg7REJV",-1,0]],[64,"SM_TowerH311Body_01",1,[[62,-3,[1,"d5Ph66/6xbPK4Q72/PB8zz"],[0],[45],1]],[3,"baQ2X4AqJelaVJs15lbapQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,227]],[[[68,".bin",2569504627,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyCharger_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyCharger_03",[-2],[3,"eerPSLgTJdH7hLSNuCTtVc",-1,0]],[64,"SM_EnemyCharger_03",1,[[62,-3,[1,"c8h0R7kAVVrrw0yFT3+4z0"],[0],[45],1]],[3,"69IPnlhZJZXItc4Tb0npin",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[362,363]],[[[77,"SM_EnemyShielder_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyShielder_01",[-2],[3,"d8e+2t58lRg7KkNuP6KtFQ",-1,0]],[64,"SM_EnemyShielder_01",1,[[62,-3,[1,"39boRnqgtbo5vuS2ne40Wb"],[0],[45],1]],[3,"45PDynTphbp7AfDJkFxT6/",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[364,365]],[[[68,".bin",1600139202,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22080,"length":2832,"count":708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22080,"count":460,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26100820302963257,-0.396431028842926,-0.007929272949695587],"maxPosition",8,[1,0.26100820302963257,0.24362486600875854,0.2592196762561798]]],-1],0,0,[],[],[]],[[[58,"P-Laser-Tower"],[370,"P-Laser-Tower",128,[[-12,-13,[98,"Events",-15,[3,"ef4CiMUqFFBLxbigVGcbkS",-14,0]],-16,-17],1,1,4,1,1],[-11],[105,"c7FBgV+GNP8JXw9YieWPKB",-10,0,[[259,["_commonLaserBeam"],-9,[2,["6bE16mDyVM2rbu8cMQ5OnY"]]]],[-1,-2,-3,-4,-5,-6,-7,-8]]],[141,"Tower Attack",[[645,0.01,3,0.005,0.3,1,-21,[1,"44lWW4CCdMbrkFp7yHEwXi"],1,-20,-19,[646],-18,26]],[3,"f40ywYz1xDCq70ENky8ahk",1,0]],[252,"Head Pivot",[-22,-23,-24,-25,-26,-27,-28,-29,-30],[3,"cbvB8Ld9JIX6xuIF03lxnb",1,0],[1,0,0.3,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[42,"Scripts",1,[2,-31,-32,-33,-34,-35],[3,"395/jqomdNs4i+MZIAv9Bl",1,0]],[267,"Shoot SFX Controller",[-40,-41,-42],[[647,-39,[1,"89epilNXRBAbuhGrmqNYKj"],[-36,-37,-38]]],[3,"bf4Cu38H1LkpQx8wn1KDKs",1,0]],[325,"Art",1,[-44,-45],[[210,-43,[1,"42A6VK8ypFjJLHG2aiUvkg"],[24],25]],[3,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[30,0,null,3,[22,"c3aOBtjPNU96Ex7+KDGHdh",-46,[49,"f0AncNe1VN4Jw9g61+WTW/",1,[[17,"SM_TowerLaserBody_01",["_name"],[2,["c3aOBtjPNU96Ex7+KDGHdh"]]],[14,["_lpos"],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[1,0,0,0]],[14,["_lrot"],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[3,0,0,0,1]],[14,["_euler"],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[1,0,0,0]],[35,["_materials","0"],[2,["c79Byda9tSsLPjCdZFbGni"]],5],[17,true,["_active"],[2,["c3aOBtjPNU96Ex7+KDGHdh"]]]]],4]],[30,0,null,3,[22,"bbqAjalhlRdoiOW0dhSoUC",-52,[49,"9bGTEv4JRIiJGuFFa9ma1Y",1,[[11,"SM_TowerPuls3rBody_01",["_name"],-47],[5,["_lpos"],-48,[1,0,0,0]],[5,["_lrot"],-49,[3,0,0,0,1]],[5,["_euler"],-50,[1,0,0,0]],[35,["_materials","0"],[2,["1fCLEjPmBTW6Y7Y/vYCPCL"]],7],[11,false,["_active"],-51]]],6]],[2,["bbqAjalhlRdoiOW0dhSoUC"]],[30,0,null,3,[22,"27Yce2+45c87fcrQ+S23Kt",-58,[49,"ccDeVeKh1LjrP0SrpJctVM",1,[[11,"SM_TowerPulsarBody_01",["_name"],-53],[5,["_lpos"],-54,[1,0,0,0]],[5,["_lrot"],-55,[3,0,0,0,1]],[5,["_euler"],-56,[1,0,0,0]],[35,["_materials","0"],[2,["c1qYGglmVbiJ63kvX3SnJg"]],9],[11,false,["_active"],-57]]],8]],[2,["27Yce2+45c87fcrQ+S23Kt"]],[30,0,null,3,[22,"9aoAAYJKJR56nsyDVR3xr1",-64,[49,"0eRRL+G4ZKPIWwpxmI+JAF",1,[[11,"SM_TowerThunderBBody_01",["_name"],-59],[5,["_lpos"],-60,[1,0,0,0]],[5,["_lrot"],-61,[3,0,0,0,1]],[5,["_euler"],-62,[1,0,0,0]],[35,["_materials","0"],[2,["a174aNwnFUq6B+C8hupOtt"]],11],[11,false,["_active"],-63]]],10]],[2,["9aoAAYJKJR56nsyDVR3xr1"]],[30,0,null,3,[22,"12sIxAd4xbv59W3ANKj2X7",-70,[49,"a0wx+g8VdJF72O05oPqoH9",1,[[11,"SM_TowerElectroneerBody_01",["_name"],-65],[5,["_lpos"],-66,[1,0,0,0]],[5,["_lrot"],-67,[3,0,0,0,1]],[5,["_euler"],-68,[1,0,0,0]],[35,["_materials","0"],[2,["366PFgp3dcA6jQhh5OaNY0"]],13],[11,false,["_active"],-69]]],12]],[2,["12sIxAd4xbv59W3ANKj2X7"]],[30,0,null,3,[22,"a8rRRSGbdZ75rtdYdCxXvt",-76,[49,"d6WBGMhktOZ7Cgduuqa4z7",1,[[11,"SM_TowerOmegaBeamBody_01",["_name"],-71],[5,["_lpos"],-72,[1,0,0,0]],[5,["_lrot"],-73,[3,0,0,0,1]],[5,["_euler"],-74,[1,0,0,0]],[35,["_materials","0"],[2,["ebLTCL4wZWyoex5cTjGOhH"]],15],[11,false,["_active"],-75]]],14]],[2,["a8rRRSGbdZ75rtdYdCxXvt"]],[30,0,null,3,[22,"19dqAvhYZW66LFXyVsSUYV",-82,[49,"2dItOgZ0FIBZzYZboaU2Dr",1,[[11,"SM_TowerPlasmaQBody_01",["_name"],-77],[5,["_lpos"],-78,[1,0,0,0]],[5,["_lrot"],-79,[3,0,0,0,1]],[5,["_euler"],-80,[1,0,0,0]],[35,["_materials","0"],[2,["d1WspVTtle/Jp16o0xqn79"]],17],[11,false,["_active"],-81]]],16]],[2,["19dqAvhYZW66LFXyVsSUYV"]],[324,"Laser Tower",6,[-83,-84,-85],[3,"24gWhf6edPooZqAHMrGA4L",1,0],[1,0,-0.05,0]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[151,"Laser Tower Common VFX",[-86],[3,"710SnCgmtBMqX5qvsJxAJj",1,0]],[408,"lasertower",4,"lasertower",2,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[140,"lasertower","lasertower-plus",5,-1,"Level Up (5)",7],[193,"lasertower-plus","pulsar",6,"Pulsar (6)",10],[140,"lasertower-plus","plasma-q",6,1,"Plasma-Q (6)",18],[140,"pulsar","pulsar-plus",7,-1,"Level Up (7)",10],[140,"pulsar-plus","puls.3r",8,2,"Puls.3R (8)",8],[140,"pulsar-plus","thunder-b",8,3,"Thunder-B (8)",12],[140,"puls.3r","puls.3r-plus",9,-1,"Level Up (9)",8],[140,"thunder-b","thunder-b-plus",9,-1,"Level Up (9)",12],[140,"plasma-q","plasma-q-plus",7,-1,"Level Up (7)",18],[140,"plasma-q-plus","omega bean",8,4,"Omega Bean (8)",16],[140,"plasma-q-plus","electron discharger",8,5,"Electron Discharger (8)",14],[140,"omega bean","omega bean-plus",9,-1,"Level Up (9)",16],[140,"electron discharger","electron discharger-plus",9,-1,"Level Up (9)",14],[140,"-","lasertower",-1,-1,"-",7]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","towerDestroyed",2],[8,"73d3de5uWhKsLUv3xQl1Qmu","towerDestroyed",22]]],[418,"TEMP-Model-Base",false,6,[-88],[[95,"Cube<ModelComponent>",-87,[1,"7bG1DGF3VI0JZiYz5rIjhD"],[2],[45],3]],[3,"085+2asOdGZYXXlS21L1NF",1,0],[1,0.5,0.5,0.5]],[42,"Head",20,[3],[3,"06ys2XK4NDNaVGaZX95a4/",1,0]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-89,[49,"8b61amJ0tGrLsoc9ZkcpIu",1,[[11,"SM_TowerBase_01",["_name"],21],[5,["_lpos"],21,[1,0,0,0]],[5,["_lrot"],21,[3,0,0,0,1]],[5,["_euler"],21,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],19]]],18]],[419,"VFX_TowerUpgrade",128,20,[-90,-91],[3,"07ayltgthJy47RKgCHu0ne",1,0],[1,0,0.3,0]],[243,false,[1,"e1sUSELtZP1aRciv+ajBKU"],[[20,null],6,0],[66,[4,3668826087]],[27,3,0.03,0.08],[0],[0],[27,3,0.2,1.5],[0],[0],[54,3,1.5707963267948966],[0],[27,3,0.9,1.6],[0],[4,3],[0],[25,true,[337,3,[50,[[44,0],[12,255,0.04910714285714286],[12,0,1]]],[50,[[44,0],[12,255,0.06696428571428571],[12,0,1]]]]],[373,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-1.7453292519943295,1.7453292519943295]],[28,[0],[0]],[24,[0],[0],[6],[6],-92],[31,21]],[243,false,[1,"c4Yq5IOx9LSYnQn+VZ4Glg"],[[22,null],6,0],[336,2,[4,2291001070],[4,2318556644]],[27,3,1.8,2.6],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,2],[0],[25,true,[20,1,[50,[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.41794871794871796,1],[[7,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[7,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-93],[31,23]],[112,"Physics",32,1,[[-94,[402,4,-95,[1,"97e/OxmxpCU4rWbyCxoizi"]]],1,4],[3,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[648,22,[1,"06NU+0UwxCH5IJsNFdY308"],23,[[162,"lasertower",27],[162,"pulsar",28],[162,"puls.3r",29],[162,"thunder-b",30],[162,"plasma-q",31],[162,"omega bean",32],[162,"electron discharger",33]],[[8,"cc.Animation","play",6],[8,"0e0544yblFGAInBmDlibiCW","play",5]],[[8,"cc.Animation","stop",6],[8,"0e0544yblFGAInBmDlibiCW","stop",5]]],[42,"VFX",4,[22,-96],[3,"a7KWU5jQVPCrqo3088lwKi",1,0]],[56,"Tower Range Scaler",4,[-97],[3,"93s95LzERJQ5rfNKhL52x/",1,0]],[420,"Cube",24,[[95,"Cube<ModelComponent>",-98,[1,"97Ufor9GlN64W+hZraFqg3"],[0],[45],1]],[3,"c7K8ONC+dATbpE1sB25eRu",1,0],[1,0,0.75,0],[1,0.5,0.5,0.8]],[365,"Laser Beam Spawn Pivot",3,[3,"f4ObGuXsBHRLAr8bTfEtcA",1,0],[1,5.3517065122739334e-17,0.14400000000000002,0.437],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[365,"Pulsar Spawn Pivot",3,[3,"cchumovahDh63OiKDELICF",1,0],[1,0,-0.09999999999999998,0],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[42,"Base",20,[-99],[3,"36eDbakQhC6L6Jg+6hDfT4",1,0]],[42,"Base Pivot",37,[26],[3,"35tdeOAEBEHLxj5SdRF4RG",1,0]],[56,"VFX_TowerGlow",27,[28],[3,"73jIkQORVGtaYgvr4iqtWi",1,0]],[290,"VFX_TowerDots",27,[29],[3,"44DydTbTJAIJ27hK0AKlv7",1,0],[1,0,0.229,0]],[111,true,6,30,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[33,"Aura VFX Controller",128,32,[[409,-100,[1,"9avLH7tUJMh5afphX8dGUN"],23,[28,29]]],[3,"23a7x3fOtCsb4v0Nd/5auu",1,0]],[42,"Audio",4,[5],[3,"44IB4OpAVJe6/toKLUx26M",1,0]],[56,"Shoot SFX 1",5,[-101],[3,"1ahLIN1+dPubK833TsHcMY",1,0]],[139,"sfx-towers-laser-shoot-0",44,[1,"6arGghfZFKaZO9K1qWWpTn"]],[56,"Shoot SFX 2",5,[-102],[3,"13MIjnWABA3YZn0YEKV5ge",1,0]],[139,"sfx-towers-laser-shoot-1",46,[1,"2c6wl3Qx5N/7+mIuqD6s07"]],[56,"Shoot SFX 3",5,[-103],[3,"6chkRSU61MgI4aUwvVgjTo",1,0]],[139,"sfx-towers-laser-shoot-2",48,[1,"0fCQKsqUlImq1uD1rVOtVA"]],[649,true,true,0.8,33,[1,"5aw86FdihOVbXs/zMNu3/J"]],[320,[1,"ebK52pdvVFVpnbMYAaqnYY"],25],[56,"Look At Target",4,[51],[3,"10ZKBZtktPwr+edfWOlO5S",1,0]],[65,"Tower Upgrader Handler",4,[[650,2,-104,[1,"24Vyh6NqtMzKIhTklkIJvn"],23,[[8,"eabd4jLlnpI9pLiRtNsUPbD","setDamage",2]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setShootFrequency",2]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setRange",2],[8,"b902aOEwNdPBYlSlwTCn6gl","setRange",33]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setDamageModifier",2]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setSlowPercentage",2]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setStun",2]],[[8,"eabd4jLlnpI9pLiRtNsUPbD","setChainAttackData",2]],[[8,"73d3de5uWhKsLUv3xQl1Qmu","setSingleTarget",22],[8,"eabd4jLlnpI9pLiRtNsUPbD","setSingleTarget",2]]]],[3,"c8JjjFtZZC+qlEznUZ9ueS",1,0]],[144,"Debug",32,1,[-105],[3,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[302,"Radius Sphere",false,32,54,[[95,"Sphere<ModelComponent>",-106,[1,"0cZhNLD85HH5MFbxfIpZNi"],[34],[45],35]],[3,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,6,6,6]]],0,[0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,26,0,13,31,0,3,1,0,-1,23,0,-1,6,0,-2,4,0,3,1,0,6,1,0,-4,30,0,-5,54,0,72,51,0,51,31,0,52,41,0,0,2,0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,35,0,-9,36,0,-2,53,0,-3,52,0,-4,43,0,-5,32,0,-6,33,0,-1,45,0,-2,47,0,-3,49,0,0,5,0,-1,44,0,-2,46,0,-3,48,0,0,6,0,-1,24,0,-2,20,0,3,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,9,0,3,8,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,3,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,3,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,3,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,3,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,3,18,0,-1,25,0,-2,37,0,-3,27,0,-1,31,0,0,24,0,-1,34,0,3,26,0,-1,39,0,-2,40,0,7,28,0,7,29,0,-1,41,0,0,30,0,-2,42,0,-1,50,0,0,34,0,-1,38,0,0,42,0,-1,45,0,-1,47,0,-1,49,0,0,53,0,-1,55,0,0,55,0,10,1,2,6,4,3,6,25,5,6,43,22,6,32,26,6,38,28,0,39,29,0,40,31,73,50,31,74,36,31,75,35,51,0,52,106],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23],[-1,12,-1,12,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,17,53,37,37,37,37,37,37,37,-1,12,40],[366,40,228,40,96,1,97,1,98,1,99,1,100,1,101,1,102,1,43,1,7,5,7,5,59,59,367,368,140,140,140,369,370,371,141,19,37]],[[[58,"P-TutorialController"],[141,"P-TutorialController",[[651,1.5,[2],[2,3,4],-2,[1,"25oQYJXQpNu63GPa2HBUsA"]]],[3,"99QFVlgAJEv6eNRQXbLkNr",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[76],[55,"SM_EnemyTheGang_01",[-2],[3,"77rOjdJ21R1KKIOlYM4BQr",-1,0]],[64,"SM_EnemyTheGang_01",1,[[62,-3,[1,"407oAt4+lSGbdC+vtR9xCJ"],[0],[45],1]],[3,"41Jrlqi2tdbKkcy+f7Uc1y",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[372,373]],[[[68,".bin",1027380282,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17856,"length":2208,"count":552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17856,"count":372,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.381155401468277,-0.37926408648490906,-0.015314404852688313],"maxPosition",8,[1,0.38115382194519043,0.33310219645500183,0.5613952875137329]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyTheGang_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-HP-Bar"],[80,"P-HP-Bar",33554432,[-8,-9],[[9,-2,[1,"c64LiUsQNM4LjiTXqu/AKi"],[5,414,896]],[562,false,-3,[1,"ecxGkFKD9JnJ5OmD/ZdnDI"]],[172,45,414,896,1,-4,[1,"f0o0HJrDtP0qcPgrs4Qzen"]],[310,-5,[1,"d3Ni8szaZB5ZNahOVRn6Gj"]],[652,-7,[1,"52yIw7XwBCjZVxvHAmudT5"],-6]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0],[1,207,448,0]],[83,"Art",33554432,1,[-13,-14],[[9,-10,[1,"16/H49/TdPRoitnCWHHtND"],[5,50,5]],[566,-11,[1,"c6txqjKZtMdI+UiFvJkHfp"]],[154,0,-12,[1,"4bcpQFUV9A2pERol15hGNy"]]],[3,"84Ywt62DNL1o63TuorfGV8",1,0]],[83,"Scripts",33554432,1,[-16,-17],[[48,-15,[1,"02YVPD0/dDDqhUV9ZDjqzR"]]],[3,"17ELThIt9GWY3dixggSO0z",1,0]],[223,"Show Bar",33554432,[[48,-18,[1,"c5Y80jcjRBbbJfTzAgdkGk"]],[622,0.3,-19,[1,"11MBvFWXxLN6h7ehk/UvTE"],2]],[3,"7ck5c/kFdG87VS8Tzkrgjv",1,0]],[83,"Tweens",33554432,3,[4,-21],[[48,-20,[1,"78gBOdyh1JbqeMXgSLvS+y"]]],[3,"af6Z5L/S5Ad5Rjj2jzK/bl",1,0]],[33,"Hide Bar",33554432,5,[[48,-22,[1,"066ZKb089Aib85bkdD822o"]],[623,0.3,255,0,-23,[1,"78CeyKHJ1HfpmdMNNnaBqy"],2]],[3,"c36zJtVAFIxpE2csiU0Nto",1,0]],[33,"Background",33554432,2,[[9,-24,[1,"13na9dWHtHzodBaC5MfT6G"],[5,50,5]],[592,3,0,1,-25,[1,"3eVNGZQrNOPalinG6nG6RJ"],[4,4279045502],0]],[3,"a1wkjIS0tI8rbwvbjqPlMV",1,0]],[134,"Sprite",33554432,2,[[[9,-26,[1,"dcdylTzqJKpoeF/ww5RH3o"],[5,50,5]],-27],4,1],[3,"98lpyac4JCm6tdoNvxxo2D",1,0]],[33,"Fillbar Controller",33554432,3,[[48,-28,[1,"a8JM1xmpdJabjNGyhYN4Bo"]],[653,-30,[1,"75rpDrYFxOrpjPTC4qrQGD"],-29,[[8,"1eddcq+dFJL6Kd35j8xBAOw","play",4]],[[8,"1eddcq+dFJL6Kd35j8xBAOw","play",6]]]],[3,"16Lj+Xb4JM/IM59RDrEaOf",1,0]],[593,3,0,1,8,[1,"daubHDVbBKZY1f8SegFwij"],[4,4278190293]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,76,2,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,-1,7,0,-2,8,0,0,3,0,-1,9,0,-2,5,0,0,4,0,0,4,0,0,5,0,-2,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,-2,10,0,0,9,0,77,10,0,0,9,0,10,1,4,6,5,30],[0,10],[2,2],[229,229]],[[[68,".bin",997286365,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":6180,"count":1545,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":396,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21314796805381775,-0.5221704244613647,-0.005207274574786425],"maxPosition",8,[1,0.2131478637456894,0.2341163456439972,0.31767797470092773]]],-1],0,0,[],[],[]],[[[77,"SM_TowerBullziBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerBullziBody_01",[-2],[3,"6bEJXm3ENa5ZOriZO+0Lz9",-1,0]],[64,"SM_TowerBullziBody_01",1,[[62,-3,[1,"853BuGPRRQ2oL14CCvM0kL"],[0],[45],1]],[3,"e2BArGLdFbrorm0OZN+vwY",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[374,230]],[[[58,"P-HighestHP-TowerTarget"],[141,"P-HighestHP-TowerTarget",[[654,-2,[1,"89MoOjHPhPOpDRKNmcEg70"]]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[58,"P-TheGang"],[228,"P-TheGang",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[3,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[304,"Art",1,[-33,-34,-35,2],[[[88,true,-29,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-30,[107,-32,[1,"7djovCtL1Loph8nFGcCXSm"],-31]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-36,-37,-38,-39,-40],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-41],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"77rOjdJ21R1KKIOlYM4BQr",-48,[81,"b0zVPKtXNDBqBPhFVjhVsT",1,[[75,[2,["77rOjdJ21R1KKIOlYM4BQr"]],[[57,-47,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-42],[5,["_lpos"],-43,[1,0,0,0]],[5,["_lrot"],-44,[3,0,0,0,1]],[5,["_euler"],-45,[1,0,0,0]],[5,["_lscale"],-46,[1,1.2,1.2,1.2]],[35,["_materials","0"],[2,["407oAt4+lSGbdC+vtR9xCJ"]],3],[17,"SM_Model",["_name"],[2,["41Jrlqi2tdbKkcy+f7Uc1y"]]]]],2]],[2,["77rOjdJ21R1KKIOlYM4BQr"]],[141,"Spawn Enemies",[[235,-50,[1,"12HKbyQS5FqYWAIY6bkc9T"],-49]],[3,"1aL01L/UVD3Ifa2TsWBnzm",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-58,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-57]]]],[[11,"P-HP-Bar",["_name"],-51],[5,["_lpos"],-52,[1,207,448,0]],[5,["_lrot"],-53,[3,0,0,0,1]],[5,["_euler"],-54,[1,0,0,0]],[11,"Art",["_name"],-55],[5,["_lpos"],-56,[1,0,0,0]]]],36]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-59,-60],[3,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[113,"VFX-BossExplosion",512,2,[-61],[3,"d9yEp+sqpLpZq1MTGLRswJ",1,0]],[86,0.2,false,false,12,[1,"d10nvhTw9GXqVPxiekKlR8"],[[8,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-62],[31,9]],[539,0.2,false,false,[1,"8dMZufmHtHZJXD5YFSNkRf"],[[10,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-63],[31,11]],[79,"VFX_SprayOut",512,2,[-64],[3,"00iEWi69ZHKYYIsiZ5jutH",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,15,[1,"b264p0fLRGrJvO19niGNvw"],[12],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-65],[121,1,0.1,13]],[113,"VFX_Explosion2",512,2,[-66],[3,"890Mx9ix5BwIhoG8cjr7++",1,0]],[86,1.5,false,false,17,[1,"4eQyYz3hxBm7uLA5fHyqF+"],[[14,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-67],[31,15]],[79,"VFX_SprayOut2",512,2,[-68],[3,"891XO9y2NK7JM5PR3y+ltZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,19,[1,"36ujuDyQJLdJlsW/UlrF+z"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-69],[121,1,0.1,17]],[79,"VFX-ScreenTone",512,2,[-70],[3,"b3kU7fcAFPOZG0m2PfYKQB",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,21,[1,"95+nGwDCRLhYXTyvMW+a4H"],[[18,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-71],[31,19]],[113,"VFX-CircleIn",512,2,[-72],[3,"e0s/IN76hON7GqK/L5tWA6",1,0]],[86,0.4,false,false,23,[1,"a5lhrVljpKp4YP3IClwwYY"],[[20,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-73],[31,21]],[113,"VFX-RingIn",512,2,[-74],[3,"fc2/xcGRBHY7qFA7JkyzI7",1,0]],[86,0.4,false,false,25,[1,"20iEhkrr1LgpiPkrDSvS9X"],[[22,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-75],[31,23]],[79,"VFX_SprayIn",512,2,[-76],[3,"abYU/q3aBP9Jq4iRCrBt5d",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,27,[1,"47PuywNUhIdbXxRB9/UWP5"],[24],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-77],[121,1,0.5,25]],[79,"VFX-ChargeFlash",512,2,[-78],[3,"2aE3MNT/FDnY1BH9oRgFrG",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,29,[1,"0fX0yXn0RCo7ZwqD66Awgh"],[26],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-79],[31,27]],[79,"VFX-Sparkle",512,2,[-80],[3,"e3osfxkOBOpYPw1K2aZUIn",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,31,[1,"b9uXeWhNVPY69awVrcM3/T"],[[28,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-81],[31,29]],[79,"VFX_LightRay",512,2,[-82],[3,"06FezKEv5PHrvBfDQ8gIrg",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,33,[1,"e7dy+kArBNupOW18u+2ARw"],[30],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-83],[31,31]],[56,"HP Controller",4,[-84],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-85],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8],[8,"cc.ParticleSystem","play",15],[8,"cc.ParticleSystem","play",17],[8,"cc.ParticleSystem","play",19],[8,"cc.ParticleSystem","play",21],[8,"cc.ParticleSystem","play",23],[8,"cc.ParticleSystem","play",25],[8,"cc.ParticleSystem","play",27],[8,"cc.ParticleSystem","play",29],[8,"cc.ParticleSystem","play",31],[8,"cc.ParticleSystem","play",33],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]],1],[65,"On Death VFX Finished",4,[[118,-86,[1,"67W+7l9PZAA4LQkNbOeiI6"],[13,14,16,18,20,22,24,26,28,30,34,32],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"54py1+24lEvosm8pG/dm8g",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-87,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,11,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-88],[31,5]],[119,0.3,false,11,[1,"36ejVK11FPAJNrDXjhhqb6"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-89],[31,7]],[79,"VFX-Flash",512,2,[14],[3,"d9bFGiF8VPXbtQyJfltpnf",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[100,3,[1,"32JYwENjVLwZkjyNU9RCCs"]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",4,[8],[3,"68ld6dHcJL6JIZOliZkLDz",1,0]],[264,"TheGang",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",35],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],36,44],[265,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[56,"Stun",4,[47],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,5,9,0,13,36,0,3,1,0,-1,46,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,49,0,-1,11,0,-2,12,0,-3,42,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,43,0,25,43,0,0,3,0,-1,38,0,-2,39,0,-3,6,0,-1,5,0,-2,35,0,-3,48,0,-4,37,0,-5,45,0,-1,44,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,3,6,0,41,46,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,50,0,1,50,0,19,39,0,3,9,0,-1,40,0,-2,41,0,-1,13,0,7,13,0,7,14,0,-1,16,0,7,16,0,-1,18,0,7,18,0,-1,20,0,7,20,0,-1,22,0,7,22,0,-1,24,0,7,24,0,-1,26,0,7,26,0,-1,28,0,7,28,0,-1,30,0,7,30,0,-1,32,0,7,32,0,-1,34,0,7,34,0,-1,36,0,5,37,0,0,37,0,0,38,0,7,40,0,7,41,0,10,1,2,6,3,8,6,45,9,6,49,14,0,42,46,32,47,47,0,48,89],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,142,1,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,66,8,24,73]],[[[58,"LifeCube_Holder"],[150,"LifeCube_Holder",33554432,[-12,-13,-14,-15,-16],[[[9,-2,[1,"7aHCdRTxRF6o9wE92jXTKG"],[5,30,30]],[190,false,-3,[1,"945ZMyt9JJdIooGkHGFDA1"],[6,7,8]],-4,[107,-6,[1,"8d6uGinqFCfLEo8v+UDRsr"],-5],[154,0,-7,[1,"aeLkaP9DBF+qnesnXn0B/x"]],[655,-11,[1,"90VlqbCeNJLrF0SELcxWPK"],[[656,4],[286,1,3],[286,2,2],[286,3,1],[475,4],[475,5],[286,6,1],[286,7,2],[286,8,3],[286,9,4]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","show",-10]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-9]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","damaged",-8]]]],4,4,1,4,4,4],[3,"2fFGF3dqxMNKSC0hr3+Zvd",-1,0]],[238,"Empty",false,33554432,1,[-18,-19,-20],[[48,-17,[1,"92m5ZrlotEoayRr+kbGrBv"]]],[3,"cdff7dbRpGLZU2GsbeORqJ",1,0]],[33,"Details01",33554432,2,[[9,-21,[1,"5fW7UmhWFM67DM0NGlrHcf"],[5,14,14]],[23,0,-22,[1,"d7pGK9Hr5FsYXfWC4RgV+Q"],[4,2522218710],0]],[3,"82jei97mxJGKQrGqqbhBfl",1,0]],[78,"Cube 01",33554432,2,[[9,-23,[1,"4fMbvXEbFJTqsA8CsojU3t"],[5,6,6]],[23,0,-24,[1,"52qj9jAxRInYrcHwFZOIrm"],[4,844507621],1]],[3,"dayuP3E2tPrJhdzs12FZyF",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,2,[[9,-25,[1,"01IhAz+OtEDbhdsAM20SvY"],[5,12,12]],[459,1,0,false,-26,[1,"b7N6zCGMNEvrv9AFIHoPpR"],2]],[3,"6aP8V1l2NEwJKz9VSUvgWd",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[33,"Cube",33554432,1,[[9,-27,[1,"e6RjOhAQ9AWZxCrxaiS5u9"],[5,20,20]],[23,0,-28,[1,"07C1LYt3BKm5GoJNwKklfA"],[4,4283836901],3]],[3,"b6/w9ywWhKNIxWrf/5bx2A",1,0]],[33,"Outline",33554432,1,[[9,-29,[1,"91EE4MXJ5EHLR5G0/W2mLS"],[5,28,28]],[459,1,0,false,-30,[1,"d4xLcJlf9LsbYnJpxG8iyC"],4]],[3,"8ao7aRe/pLuZ3YAoyHupby",1,0]],[33,"Details",33554432,1,[[9,-31,[1,"eekVIAuxRATL+ERjCHCCN8"],[5,14,14]],[23,0,-32,[1,"92hDgevBZHMKIPfODUgyNu"],[4,4283826390],5]],[3,"2fYVkAZnFImJP5M2vSab0h",1,0]],[33,"Scripts",33554432,1,[[48,-33,[1,"e1UFk+qmVGhrbxnAyPi8Y9"]]],[3,"68xusf6oBGpbtPAnhLgreE",1,0]],[100,1,[1,"72Hg4upylKrbpfK1/Vwzqi"]]],0,[0,3,1,0,0,1,0,0,1,0,-3,10,0,25,10,0,0,1,0,0,1,0,5,1,0,5,1,0,5,1,0,0,1,0,-1,2,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,10,1,33],[0,0,0,0,0,0,0,0,0,10],[2,2,2,2,2,2,-1,-2,-3,24],[231,0,232,0,232,231,233,234,235,375]],[[{"name":"Icon_Currency Faded 100","rect":{"x":0,"y":0,"width":92,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[376]],[[[149,[[156,[114,[-18,-19,-20,-21,-22,-23,-24],[[82,0,false,-5,-4,[[91,"confirmationClick"]]],[82,0,false,-7,-6,[[91,"towerClick"]]],[82,0,false,-9,-8,[[91,"confirmationClick"]]],[82,0,false,-11,-10,[[91,"exit"]]],[82,0,false,-13,-12,[[91,"exit"]]],[82,0,false,-15,-14,[[91,"intro"]]],[115,-17,-16]],-3,-2,-1]]],[{},"towerClick",4,[101,2],"confirmationClick",4,[101,2],"exit",4,[101,2],"intro",4,[101,2]]],[63,"TowerUpgrade_Intro",[72,0]],[63,"TowerUpgrade_Exit",[72,2]],[63,"TowerUpgrade_Info Panel Intro",[72,1]],[61,"Entry"],[61,"Any"],[61,"Exit"],[63,"Empty",[186]]],0,[0,29,5,0,30,6,0,31,4,0,14,2,0,15,1,0,14,3,0,15,1,0,14,2,0,15,3,0,14,2,0,15,1,0,14,2,0,15,3,0,14,1,0,15,5,0,14,7,0,15,4,0,-1,4,0,-2,6,0,-3,5,0,-4,1,0,-5,3,0,-6,2,0,-7,7,24],[0,0,0],[18,18,18],[217,215,216]],[[[58,"Holder_ShopItemUpgrade"],[170,"Holder_ShopItemUpgrade",33554432,[-19,-20,-21,-22,-23,-24,-25],[[[9,-2,[1,"f8sgxLQ7NKK58N4RsaU45b"],[5,78,74]],-3,[219,false,-4,[1,"96r+liHadIXKsjOGnS4LXV"],[13,14,15,16,17],18],-5,[657,-13,[1,"f8MnaHEhpDiKu69gLqzUAp"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-12]],-11,[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","locked",-10]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","bought",-9]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","unlocked",-8]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","noCurrency",-7]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-6]]],[356,-15,[1,"81WpfWwwZHm57n1bCR2Hvp"],-14],[139,"sfx-ui-menutap",-16,[1,"e57eAeeJdPu5EWyVJczgsI"]],[107,-18,[1,"9fkwbwsEJNtp1a9YblePmY"],-17]],4,1,4,1,4,4,4,4],[3,"75a1vm5JJA+ohuNwq5URob",-1,0],[1,0,162,0]],[53,"Panel_Currency",33554432,1,[-30,-31,-32],[[9,-26,[1,"18yNw/XBZG+KnOpvddtb7e"],[5,52,22]],[23,0,-27,[1,"57qDOQS2ZBQKtouSC/8elC"],[4,4281556991],8],[233,false,-28,[1,"16QTR2YHlDf6gRfv6/evVS"]],[100,-29,[1,"7aFzvi461NjoJBeD3qkLnr"]]],[3,"b3366bEh1PH5fT30mLuIjF",1,0],[1,0,-24.619,0]],[83,"Holder_Cost",33554432,2,[-36,-37],[[9,-33,[1,"fe91q+YChFHZPrbJiyd6Hi"],[5,29.7,22]],[248,1,1,2,-34,[1,"99PuRRo5RIF4yfrLQ7u+UX"]],[57,-35,[1,"ceLpQWbjdIQruCgZfIzBd4"]]],[3,"feh+SctdhOMpCjxU3mck3l",1,0]],[112,"Text_Cost",33554432,3,[[[9,-38,[1,"d1F1vL9f5G4KAF27gaCCm3"],[5,9.7,27.72]],-39,[96,-41,[1,"ba4rBsnmNBk5Wt/+sTYglM"],-40],[658,-43,[1,"71QZ+RbWhNZppNkBFFRZtD"],-42]],4,1,4,4],[3,"1eKklzzutK7rqzu2nHAYzW",1,0],[1,9.999999999999998,0,0]],[112,"Text_Upgradenumber",33554432,1,[[[9,-44,[1,"d3rPPElFdApI01MgzWmjPo"],[5,54,36]],-45,[96,-47,[1,"b2pEh3sRtA5JrSIQTgiR+Q"],-46]],4,1,4],[3,"c9clvk1NBLo5tRwoMi6K20",1,0],[1,0,5.61,0]],[159,"No Currency Button",false,33554432,1,[[9,-48,[1,"ca54qT9f5NPqhy8kf5WaFH"],[5,100,40]],[184,3,0.95,-50,[1,"5axk8eN7pArKwdFZo852uF"],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",-49]],[4,4292269782],1,9,10,11,12],[139,"sfx-ui-cantbuyitem",-51,[1,"3a/nFoEDtGRrPSYlgg0fzB"]]],[3,"41uq5XPy9AP4wcpq/QL53u",1,0]],[53,"Icon_Currency Outline",33554432,3,[-54],[[9,-52,[1,"fbsUrwGs1Ek7iKFAwPkoaR"],[5,18,18]],[23,0,-53,[1,"3eJ0/HGZRPmIRKhLHSXuOO"],[4,4294765656],5]],[3,"c5V6UYtXxON7v4PZCR+2j0",1,0],[1,-5.850000000000001,0,0]],[33,"Icon_Currency",33554432,7,[[9,-55,[1,"f6Oa4GrlpEZZT9t9tAZWlu"],[5,16,16]],[108,0,-56,[1,"8a70rzmkZHS6oh1G1XQ9rZ"],4],[117,45,1,1,1,1,30,30,-57,[1,"6fHWXIjc1EnIPO8+4+cnHW"]]],[3,"06ZHFJfVhAmZlV4L3jlM3i",1,0]],[159,"Icon_Lock",false,33554432,2,[[9,-58,[1,"4avLwjbsBC8YL9JLJZCbFR"],[5,15,18]],[23,0,-59,[1,"7erzaAg2RE+5MONbQUJ0yY"],[4,4281532425],6],[57,-60,[1,"3b0tmU7tdJXZgvfiHqMhni"]]],[3,"ab+SSEBjlPi7fGKnK24dHJ",1,0]],[159,"Icon_Unlocked",false,33554432,2,[[9,-61,[1,"0csNGuTApLQ6f5qUsg4C3c"],[5,24,18]],[23,0,-62,[1,"7bR455wuJAKLlqMSVSZDaq"],[4,4283190536],7],[57,-63,[1,"02JZ6vStVJ247yZmlfWAwI"]]],[3,"b8eQUUBq9BebPDwqLMFW7I",1,0]],[41,"Outline 01",33554432,1,[[9,-64,[1,"cc98Xl2uRL04GOMjFHRiek"],[5,62,45]],[46,1,0,-65,[1,"da+bIdqqxAC5pVl3ZCT/H6"],[4,3023265791],0]],[3,"215kGHmF9JEYpNBbzBlk/3",1,0],[1,0,4.204,0]],[41,"Outline 02",33554432,1,[[9,-66,[1,"fbEna76sBCWr4+MXLO6EQu"],[5,68,50]],[46,1,0,-67,[1,"d9ptJd/95AA4FNf3T/3M+9"],[4,3023265791],1]],[3,"a0xWJJihNDkL/KaejijLIC",1,0],[1,0,4.203999999999951,0]],[41,"Outline 03",33554432,1,[[9,-68,[1,"47wvKllzNFAZ7NwoDaRJtY"],[5,74,56]],[46,1,0,-69,[1,"0331o7DcZHQbXHsoDUi1Hi"],[4,3023265791],2]],[3,"2bh92hD51AKJoBNdL9LxjK",1,0],[1,0,4.203999999999951,0]],[103,"Fill Color",false,33554432,1,[[9,-70,[1,"7epqmDcsVLNoDGUA6lRX8u"],[5,62,45]],[46,1,0,-71,[1,"5fn1qzBD5KTL35VBz8uq1M"],[4,4288449280],3]],[3,"8bu/KoiyhKgav0EQ+ePUmZ",1,0],[1,0,4.204,0]],[185,"2",22,22,22,false,4,[1,"77AjgSwRBDUYac20JxWQ9/"]],[387,3,0.9,1,[1,"846aeZa+5IZJlmPmgs8Wfs"],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",1]],1],[221,"+2",29,28,28,2,false,5,[1,"5engInjU1KEZ0/NnM+CIsd"],[4,4293450459]],[100,1,[1,"836Ayw0qlL5aalHfUNDfhK"]]],0,[0,3,1,0,0,1,0,-2,16,0,0,1,0,-4,18,0,5,5,0,5,1,0,5,1,0,5,1,0,5,1,0,42,16,0,5,4,0,0,1,0,42,16,0,0,1,0,0,1,0,25,18,0,0,1,0,-1,11,0,-2,12,0,-3,13,0,-4,14,0,-5,5,0,-6,2,0,-7,6,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,3,0,-2,9,0,-3,10,0,0,3,0,0,3,0,0,3,0,-1,7,0,-2,4,0,0,4,0,-2,15,0,23,15,0,0,4,0,78,15,0,0,4,0,0,5,0,-2,17,0,23,17,0,0,5,0,0,6,0,5,6,0,0,6,0,0,6,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,10,1,71],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,15,18],[2,2,2,2,2,2,2,2,2,20,26,27,28,-1,-2,-3,-4,-5,17,11,11,24],[4,4,4,0,53,49,42,54,0,11,11,20,21,74,236,143,237,238,143,377,2,378]],[[{"name":"Icon_Bought","rect":{"x":0,"y":0,"width":24,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":24,"height":18},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[379]],[[[68,".bin",4222070262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2592058479785919,-0.2142728716135025,-0.3999999761581421],"maxPosition",8,[1,0.24021464586257935,0.28514787554740906,0.9448086023330688]]],-1],0,0,[],[],[]],[[[58,"P-Stunner-0"],[152,"P-Stunner-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"Stunner-0",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"1edAXY0UBcjIIUC2qW4Qqc",-32,[81,"272+sXo4hAPr6ZTzt9cqY4",1,[[75,[2,["1edAXY0UBcjIIUC2qW4Qqc"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["0bpaVy6q1YuIQflgT+j8KX"]],3],[17,"SM_Model",["_name"],[2,["e3hH5Ei39RPpmb2lhMVpUH"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["1edAXY0UBcjIIUC2qW4Qqc"]],[42,"VFX",2,[-36,-37,-38],[3,"d9qKrqLFNAqYop9UBzIrym",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"60BjhmTrxB37jmd1NHyuGJ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"09mfQTQPxLqLacJO+gEh9G"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"ef5fOJVoFBupF5YfOLe7SO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"4bgUjgS79IYJjTbznC0Dh8"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"7bmcykzIZKta4/2rRDCMsE",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"b3y7A0B2NDkqBDEyusZNy5"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"f8NK8x1y5BSqsDqn0+iwLo",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"dbs7XXLdhL46970DPXySzd"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"2bFjzW6MBLvbd/7hplXBAi"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,23,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,380,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"Burn Special"],[521,"Burn Special",64,[[-11,[326,"Scripts",64,-13,[3,"4c9iHXTeFH+ptCJmnvJ7g9",-12,0]],[326,"Events",64,-15,[3,"8bKYZ0gv9NwJwaAf5KkgDI",-14,0]],[326,"Physics",64,-17,[3,"abzpn+5vtNA49bY89k626m",-16,0]],[326,"Debug",64,-19,[3,"7euWMQi29IUatiSfXcspRs",-18,0]],-20],1,4,4,4,4,1],[[659,10,3,-10,[1,"46rxBzxnhNZ5SMtpC/PbmS"],-9,[-3,-4,-5,-6,-7,-8],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-2]]]],[3,"41nCdqIzNJPL0N4Cg61TVD",-1,0],[1,1,0,0]],[525,"VFX_AoE_Fire",64,[-22,-23,-24,-25],[-21],[3,"7agpHOC2lLRqOD+BaGa8Yl",1,0],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[243,false,[1,"d2tNm9kMFFuqu9U9dHbLbg"],[[2,null],6,0],[66,[4,1239277021]],[27,3,0.15,0.2],[0],[0],[27,3,0.2,2],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.4,0.6],[0],[4,10],[0],[25,true,[20,1,[39,[[136],[18,0.12946428571428573,[4,4281523443]],[18,0.23883928571428575,[4,4279222479]],[18,0.59375,[4,4280164058]],[18,0.8816964285714286,[4,4279703383]]],[[44,0],[12,255,0.09375000000000001],[12,0,1]]]]],[436,true,0,0.4,1,0,[4,1]],[38,true,[15,1,2,[10,[0,0.5666666666666667,1],[[87,2,0.9925925925925926,1,1],[40,2,0.5925925925925926,-0.36111111111111055,1,-0.36111111111111055,1],[13,2,0.5074074074074074]]]],[15,1,2,[10,[0,1],[[7,2,0.5074074074074074,0.5995807127882601,0.5995807127882601],[13,2,0.6814814814814815]]]],[15,1,5,[10,[0,0.6384615384615384,1],[[7,2,0.18888888888888888,0.38888888888888895,0.38888888888888895],[7,2,0.3259259259259259,0.08666666666666636,0.08666666666666636],[13,2,0.33333333333333337]]]],[0]],[133,true,[0],[0],[0],[36,1,[10,[0.12051282051282051,1],[[13,2,0.8296296296296296],[7,2,-0.014814814814814815,-0.045138888888888895,-0.045138888888888895]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.6981317007977318,-2.6179938779914944]],[279,2,2,1,[0],[54,3,3]],[24,[4,1],[0],[6],[6],-26],[31,3]],[243,false,[1,"3aGwUH+LxDsLOvm2TeI22A"],[[4,null],6,0],[66,[4,4287033855]],[27,3,0.02,0.1],[0],[0],[27,3,0.5,2],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[0],[4,10],[0],[25,true,[20,1,[39,[[136],[18,0.3482142857142857,[4,4279875327]],[18,0.6227678571428572,[4,4282716595]],[18,0.8348214285714285,[4,4280361257]]],[[44,255],[12,255,1]]]]],[550,true,0,0.4,1,0.2617993877991494,[4,1],[1,0,-0.2,0],[1,-90,0,0]],[38,true,[36,1,[10,[0,0.48717948717948717,1],[[13,2,1],[7,2,1,0.020933977455716932,0.020933977455716932],[231,2,-3.333333333333334,-3.333333333333334]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[15,1,25,[10,[0,0.2564102564102564,0.5076923076923077,0.7538461538461538,0.9948717948717949],[[7,2,-1,0.09318996415770607,0.09318996415770607],[13,2,1],[13,2,-1],[13,2,1],[13,2,-1]]]],[97,5],[15,1,25,[10,[0,0.1358974358974359,0.37435897435897436,0.5641025641025641,0.8384615384615385,1],[[7,2,-0.014814814814814814,7.616161616161616,7.616161616161616],[13,2,1],[13,2,-1],[13,2,1],[13,2,-1],[7,2,0.16296296296296295,7.98692810457517,7.98692810457517]]]]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-6.283185307179586,6.283185307179586]],[171,true,2,2,1,[0],[4,2]],[24,[4,1],[0],[6],[6],-27],[31,5]],[243,false,[1,"02e0rGWj5NH7WPI7EvQL3f"],[[6,null],6,0],[66,[4,1593835519]],[4,0.5],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,1],[0],[25,true,[20,1,[39,[[106,[4,4278237439]],[18,1,[4,4278190327]]],[[12,255,0.03125000000000001],[12,255,0.7366071428571429],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0,1],[[7,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-28],[292,2,7]],[431,false,true,[1,"03SKd4nW1F/pU7XSbWM/S6"],[[8,null],6,0],[66,[4,1593835519]],[4,0.5],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,0.5],[0],[25,true,[20,1,[39,[[106,[4,4278237439]],[18,1,[4,4278190327]]],[[12,255,0.03125000000000001],[12,255,0.7366071428571429],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0,1],[[7,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-29],[292,2,9]],[431,false,true,[1,"0d+u7VHHlJHoR0Q3bXtBQJ"],[[10,null],6,0],[66,[4,1593835519]],[4,0.5],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,0.5],[0],[25,true,[20,1,[39,[[106,[4,4278237439]],[18,1,[4,4278190327]]],[[12,255,0.03125000000000001],[12,255,0.7366071428571429],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0,1],[[7,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-30],[292,2,11]],[540,false,2,[1,"d2tNm9kMFFuqu9U9dHbLbg"],[[12,null],6,0],[66,[4,721420287]],[27,3,0.05,0.15],[0],[0],[27,3,0.8,1.5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.6,1],[0],[4,15],[0],[25,true,[20,1,[39,[[136],[18,0.0825892857142857,[4,4281523443]],[18,0.30357142857142855,[4,4281375211]],[18,0.5312500000000001,[4,4280164058]],[18,0.8816964285714286,[4,4279703383]]],[[44,0],[12,255,0.06919642857142858],[12,0,1]]]]],[436,true,0,0.5,1,0,[4,1]],[38,true,[15,1,2,[10,[0,0.5666666666666667,1],[[87,2,0.9925925925925926,1,1],[40,2,0.5925925925925926,-0.36111111111111055,1,-0.36111111111111055,1],[13,2,0.5074074074074074]]]],[15,1,2,[10,[0,1],[[7,2,0.5074074074074074,0.5995807127882601,0.5995807127882601],[13,2,0.6814814814814815]]]],[15,1,5,[10,[0,0.6384615384615384,1],[[7,2,0.18888888888888888,0.38888888888888895,0.38888888888888895],[7,2,0.3259259259259259,0.08666666666666636,0.08666666666666636],[13,2,0.33333333333333337]]]],[0]],[133,true,[0],[0],[0],[36,1,[10,[0.12051282051282051,1],[[13,2,0.8296296296296296],[7,2,-0.014814814814814815,-0.045138888888888895,-0.045138888888888895]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.6981317007977318,-2.6179938779914944]],[279,2,2,1,[0],[54,3,3]],[24,[4,1],[0],[6],[6],-31],[31,13]],[144,"Art",64,1,[-32,2],[3,"9ePqoYYQVADafa8PKSBSmj",1,0]],[515,"Sphere",false,64,9,[[[95,"Sphere<ModelComponent>",-33,[1,"f1MVaDb/hC8I+rENUiYa2A"],[0],[45],1],-34],4,1],[3,"0cuqbRNLNMGqVpzVOB95FG",1,0],[1,0.3,0.3,0.3]],[526,"VFX_First Ring",64,2,[-35],[7],[3,"6bGUoOG7dMzqhV1vESSe3U",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[223,"Wait Particles",64,[[118,-36,[1,"f7V9kUlP5LIal4cQqjtI6U"],[8,3,4,5,7,6],[[8,"49a11a/LjxMzoQg6t3SZkfy","finishBurn",1]]]],[3,"866yWJupVJ6Jl2pFfgb6Ig",1,0]],[660,3,10,[1,"29JTpX50ZF5axkT5onj8mf"]],[113,"VFX_AoE_Fire_Bottom",64,2,[3],[3,"8dqqjcCtxL9KeN1TGPNN/a",1,0]],[79,"VFX_Motes",32,2,[4],[3,"28ydrJtptD4ZELiWYohnND",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"VFX_Ring",64,2,[5],[3,"e1KEOnQmpEEqzTKrRtWCts",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[113,"VFX_First Ring-001",64,11,[6],[3,"85UYhfTLpLx6Ib6jaTEwXv",1,0]],[144,"Scripts",64,1,[12],[3,"06VkerzudPNIX5Nhc7BfKJ",1,0]]],0,[0,3,1,0,5,12,0,-1,8,0,-2,3,0,-3,4,0,-4,5,0,-5,7,0,-6,6,0,55,13,0,0,1,0,-1,9,0,3,1,0,6,1,0,3,1,0,6,1,0,3,1,0,6,1,0,3,1,0,6,1,0,-6,18,0,-1,8,0,-1,14,0,-2,15,0,-3,16,0,-4,11,0,7,3,0,7,4,0,7,5,0,7,6,0,7,7,0,7,8,0,-1,10,0,0,10,0,-2,13,0,-1,17,0,0,12,0,10,1,2,6,9,3,0,14,4,0,15,5,0,16,6,0,17,7,0,11,12,6,18,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8],[381,19,382,112,16,25,114,68,114,68,114,68,383,112]],[[{"name":"UI_Panel_Outline 1","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[2,2,2,2],"packable":true}],[2],0,[0],[33],[384]],[[[58,"03-Path-Block"],[305,"03-Path-Block",4,[[-6,-7,[98,"Events",-9,[3,"34iBSezn5G07tUlJs/nvZp",-8,0]]],1,1,4],[[661,-5,[1,"36V5BNduRHD7uF+W+5NhQS"]]],[240,"5b6u8OqjhBRr6OuX0OXiUI",-4,0,[-1,-2,-3]]],[42,"Art",1,[-10,-11,-12,-13],[3,"a09QozlsRHabo8F1aOjmWX",1,0]],[2,["38TprYPCRWppYLEJoooZq3"]],[2,["fefPIkSBJemp8PPyjHLGkW"]],[2,["e9QGVwjwRRNYH2wTOhd0ZX"]],[144,"1",4,2,[-14],[3,"8dhXxs9cNJwbSDFPfUttge",1,0]],[30,0,null,6,[22,"38TprYPCRWppYLEJoooZq3",-15,[49,"6aRQSBvwFJAqCGG2McOH6f",1,[[11,"SM_BlockPath_01",["_name"],3],[5,["_lpos"],3,[1,0,0,0]],[5,["_lrot"],3,[3,0,0,0,1]],[5,["_euler"],3,[1,0,0,0]],[35,["_materials","0"],[2,["c6ETENbq5XL5UBZI2bIgRH"]],3]]],2]],[421,"2",false,4,2,[-16],[3,"eeZ+vMyy9N0aAzCg7L5U5k",1,0]],[30,0,null,8,[22,"fefPIkSBJemp8PPyjHLGkW",-17,[49,"d52FgNAmZG6oApZb8TbQ55",1,[[11,"SM_BlockPath_02",["_name"],4],[5,["_lpos"],4,[1,0,0,0]],[5,["_lrot"],4,[3,0,0,0,1]],[5,["_euler"],4,[1,0,0,0]],[35,["_materials","0"],[2,["c2E9Ka2cRe7YGAxkqvC+yR"]],5]]],4]],[421,"3",false,4,2,[-18],[3,"c0U2s17YZJzIQFceQvPzFA",1,0]],[30,0,null,10,[22,"e9QGVwjwRRNYH2wTOhd0ZX",-19,[49,"6f4IryRr5Lr5elhTZ/fSeZ",1,[[11,"SM_BlockPath_03",["_name"],5],[5,["_lpos"],5,[1,0,0,0]],[5,["_lrot"],5,[3,0,0,0,1]],[5,["_euler"],5,[1,0,0,0]],[35,["_materials","0"],[2,["0fKTIDFQVVW7qzAtQnZb77"]],7]]],6]],[237,"TEMP-Model",false,2,[[95,"Cube<ModelComponent>",-20,[1,"978JxPEERAj518S/nHzKka"],[0],[45],1]],[3,"dd1WBigLdLTITwg6vZGyat",1,0]],[42,"Scripts",1,[-21],[3,"ffQ/76qrJBiJLp8k47B7Vj",1,0]],[65,"Theme Models Chooser",13,[[174,-22,[1,"33RFhRi6NFzK+5Vx1KIun1"],[6,8,10],8]],[3,"14XC/Mq+9B+6Jgn0NpMGtn",1,0]]],0,[0,-1,7,0,-2,9,0,-3,11,0,3,1,0,0,1,0,-1,2,0,-2,13,0,3,1,0,6,1,0,-1,12,0,-2,6,0,-3,8,0,-4,10,0,-1,7,0,3,7,0,-1,9,0,3,9,0,-1,11,0,3,11,0,0,12,0,-1,14,0,0,14,0,10,1,22],[0,0,0,0,0,0,0,0,0],[-1,12,4,9,4,9,4,9,39],[385,40,111,1,133,17,134,17,31]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17,-18],[[115,-5,-4],[214,0,-7,-6,[[157,[104,"inScene"]]]],[82,0,false,-9,-8,[[91,"victory"]]],[82,0,false,-11,-10,[[91,"defeat"]]]],-3,-2,-1]],[213,"Wave Announcer",[114,[-28,-29,-30,-31,-32],[[115,-23,-22],[214,0,-25,-24,[[91,"showWave"]]],[318,0,-27,-26]],-21,-20,-19]],[213,"Ad Layer",[114,[-44,-45,-46,-47,-48,-49],[[115,-37,-36],[214,0,-39,-38,[[157,[104,"adInScene"]]]],[82,0,false,-41,-40,[[175,1,[104,"adInScene"]]]],[82,0,false,-43,-42,[[157,[104,"adInScene"]]]]],-35,-34,-33]],[213,"Energy Full",[114,[-59,-60,-61,-62,-63],[[115,-54,-53],[82,0,false,-56,-55,[[157,[104,"energyFull"]]]],[403,0,-58,-57,[[175,1,[104,"energyFull"]]]]],-52,-51,-50]]],[{},"inScene",4,[176,1,false],"victory",4,[101,2],"showWave",4,[101,2],"defeat",4,[101,2],"adInScene",4,[176,1,false],"energyFull",4,[176,1,false]]],[63,"Game_Intro",[72,0]],[250,"Hidden"],[63,"Game_AdPanel Intro",[72,5]],[63,"Empty",[186]],[61,"Entry"],[250,"Empty"],[61,"Entry"],[63,"Announcer_Wave",[72,3]],[61,"Entry"],[250,"Empty"],[63,"Game_AdPanel Exit",[72,4]],[61,"Entry"],[63,"Game_Energy Full",[72,6]],[61,"Exit"],[61,"Any"],[63,"Game_Victory",[72,1]],[63,"Game_Defeat",[72,2]],[61,"Exit"],[61,"Any"],[61,"Exit"],[61,"Any"],[61,"Exit"],[61,"Any"]],0,[0,29,15,0,30,14,0,31,5,0,14,6,0,15,5,0,14,1,0,15,6,0,14,16,0,15,1,0,14,17,0,15,1,0,-1,5,0,-2,14,0,-3,15,0,-4,6,0,-5,1,0,-6,16,0,-7,17,0,29,19,0,30,18,0,31,7,0,14,2,0,15,7,0,14,8,0,15,2,0,14,2,0,15,8,0,-1,7,0,-2,18,0,-3,19,0,-4,2,0,-5,8,0,29,21,0,30,20,0,31,9,0,14,10,0,15,9,0,14,3,0,15,10,0,14,11,0,15,3,0,14,3,0,15,11,0,-1,9,0,-2,20,0,-3,21,0,-4,10,0,-5,11,0,-6,3,0,29,23,0,30,22,0,31,12,0,14,4,0,15,12,0,14,13,0,15,4,0,14,4,0,15,13,0,-1,12,0,-2,22,0,-3,23,0,-4,4,0,-5,13,63],[0,0,0,0,0,0,0],[18,18,18,18,18,18,18],[194,195,196,386,198,197,130]],[[[77,"SM_EnemyMegalodon_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyMegalodon_01",[-2],[3,"35q+F/UKRcsrrmbxiyg3c7",-1,0]],[64,"SM_EnemyMegalodon_01",1,[[62,-3,[1,"e04xugrldTnbXkchKrSM5C"],[0],[45],1]],[3,"34TgPiyp5WOaPkHMnfYRpy",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[387,388]],[[[68,".bin",2342328673,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26160,"length":3432,"count":858,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26160,"count":545,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5395184755325317,-0.6244027018547058,-0.036059506237506866],"maxPosition",8,[1,0.5395184755325317,0.5536021590232849,0.7061196565628052]]],-1],0,0,[],[],[]],[[{"name":"Icon_Ad","rect":{"x":0,"y":1,"width":36,"height":22},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":24},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[389]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,2852126975]],{},{}],11,0,0]]],0,0,[0],[16],[77]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[50,32]],[[[58,"Pathfinder"],[141,"Pathfinder",[[662,-2,[1,"fbXTNsgMxL0pV4RfV0//+o"]]],[3,"e8925zNxNCiI5CO2GAh1dK",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[68,".bin",3661720650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.33939939737319946,-0.3027116656303406,-0.4000000059604645],"maxPosition",8,[1,0.26602408289909363,0.3027118742465973,0.8425395488739014]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyStunner_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyStunner_02",[-2],[3,"22NP+cD/5Tgoh+buCGMtgq",-1,0]],[64,"SM_EnemyStunner_02",1,[[62,-3,[1,"11T+cnA+pVrprAp+evER/v"],[0],[45],1]],[3,"aecmakxK5ezJYcZJrdxRqp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[390,391]],[[[68,".bin",1358063307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2883804142475128,-0.38122305274009705,0],"maxPosition",8,[1,0.2883804142475128,0.27011871337890625,0.46827760338783264]]],-1],0,0,[],[],[]],[[[77,"SM_EndBlock_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3297684821,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24971038103103638,-0.2497103363275528,-0.40000003576278687],"maxPosition",8,[1,0.2497103363275528,0.24971021711826324,1.1082842350006104]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EndBlock_01",[-2],[3,"baKMdN60VQQ4U2ioBdasIK",-1,0]],[64,"SM_EndBlock_01",1,[[62,-3,[1,"66VTaMsHtVnpyJ3svdwpBh"],[0],[45],1]],[3,"a8iO39YqpY2JrtDnB05aqa",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[392,393]],[[[68,".bin",809581060,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":6132,"count":1533,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":440,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22483040392398834,-0.40791887044906616,-0.009908358566462994],"maxPosition",8,[1,0.22483040392398834,0.26236942410469055,0.4152980148792267]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerMeteorUBody_01",[-2],[3,"6ba5eX4SReyqm+Vbwgfquh",-1,0]],[64,"SM_TowerMeteorUBody_01",1,[[62,-3,[1,"2aeozPTBpe75ML5ovX4gHo"],[0],[45],1]],[3,"951PfNhQddLokvIk63kqxu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[394,239]],[[[77,"SM_TowerMeteorUBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2853500703,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.7500349879264832]]],-1],0,0,[],[],[]],[[[76],[55,"SM_BlockSlot_03",[-2],[3,"86TnLpMyZez4d2k1E06z3O",-1,0]],[64,"SM_BlockSlot_03",1,[[62,-3,[1,"dcQNjsiCBT3KDpO+eJMUSG"],[0],[45],1]],[3,"24IpCURn9ZHJTPM/735xNN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[395,396]],[[[77,"SM_BlockSlot_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[470,"../Internal/Effects/custom-unlit-scroll",[{}],[{"hash":2445729569,"name":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Noise1TexCoords","stageFlags":1,"binding":1,"members":[{"name":"noise1TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_1"]},{"name":"Noise2TexCoords","stageFlags":1,"binding":2,"members":[{"name":"noise2TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_2"]},{"name":"Constant","stageFlags":16,"binding":3,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_TEXTURE"]},{"name":"noise1Texture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_NOISE_1"]},{"name":"noise2Texture","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_NOISE_2"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]},{"name":"v_noise1_uv","type":14,"count":1,"stageFlags":17,"location":3,"defines":["USE_NOISE_1"]},{"name":"v_noise2_uv","type":14,"count":1,"stageFlags":17,"location":4,"defines":["USE_NOISE_2"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  layout(location = 3) out vec2 v_noise1_uv;\n  layout(set = 1, binding = 1) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  layout(location = 4) out vec2 v_noise2_uv;\n  layout(set = 1, binding = 2) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 4) uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  layout(location = 3) in vec2 v_noise1_uv;\n  layout(set = 1, binding = 5) uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  layout(location = 4) in vec2 v_noise2_uv;\n  layout(set = 1, binding = 6) uniform sampler2D noise2Texture;\n#endif\nlayout(set = 1, binding = 3) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  out vec2 v_noise1_uv;\n  layout(std140) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  out vec2 v_noise2_uv;\n  layout(std140) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  in vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  in vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n      uniform vec4 noise1TilingOffset;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n      uniform vec4 noise2TilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture2D(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture2D(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":200,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NOISE_1","type":"boolean","defines":[]},{"name":"USE_NOISE_2","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"NOISE_1_BLEND_ADD","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MIX","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_2_BLEND_ADD","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MIX","type":"boolean","defines":["USE_NOISE_2"]}]}],[{"name":"opaque","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[58,"P-LaserTower-Beam-PlasmaQ"],[55,"P-LaserTower-Beam-PlasmaQ",[-2],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[65,"Temp",1,[[357,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[4,0.5],[6],0]],[3,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0],[48],[113]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[33],[397]],[[[58,"05-Boundary-Block"],[305,"05-Boundary-Block",16,[[-63,-64,[98,"Events",-66,[3,"26v2eHDtlCM7ivoqBF7TjE",-65,0]]],1,1,4],[[663,-62,[1,"30Ag+k+UFLgZjVv8B0lcFZ"],[358,1,[-56,-57,-58,-59,-60,-61]],[358,2,[-50,-51,-52,-53,-54,-55]],[358,3,[-44,-45,-46,-47,-48,-49]],[358,4,[-38,-39,-40,-41,-42,-43]]]],[240,"a0J5bKqYFEmaKO4oONshDj",-37,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36]]],[42,"Art",1,[-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78],[3,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[42,"Scripts",1,[-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90],[3,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[99,"Left Bottom 1",false,2,[-91,-92,-93],[3,"feypz3UMlASasQtRUhSBbs",1,0]],[99,"Left Bottom 2",false,2,[-94,-95,-96],[3,"c6JwTPLLJBfqNJMlZnOYOT",1,0]],[99,"Left Bottom 3",false,2,[-97,-98,-99],[3,"4ef5Z1GnpIG6P4q95H8nSR",1,0]],[99,"Right Bottom 1",false,2,[-100,-101,-102],[3,"7bjNHjtvZP7buaC34rVoCZ",1,0]],[99,"Right Bottom 2",false,2,[-103,-104,-105],[3,"a7y/eplxNClKPZUJFj7NGo",1,0]],[99,"Right Bottom 3",false,2,[-106,-107,-108],[3,"cdO5vQFIxAMIY4vuOEIfYu",1,0]],[99,"Right Top 1",false,2,[-109,-110,-111],[3,"8cYm1F+c5MTa515qkt2e09",1,0]],[99,"Right Top 2",false,2,[-112,-113,-114],[3,"70zzFZbJ9CZ7BWTAINP0Fi",1,0]],[99,"Right Top 3",false,2,[-115,-116,-117],[3,"bfiWNOZtdDlZfRpGMqlDTt",1,0]],[99,"Left Top 1",false,2,[-118,-119,-120],[3,"1bTRv9SDpJeIp0p5GnFrMH",1,0]],[99,"Left Top 2",false,2,[-121,-122,-123],[3,"64Z6EiJiNM+ZqRgbewmJeb",1,0]],[99,"Left Top 3",false,2,[-124,-125,-126],[3,"8fC5A+C1xOVrsgFoXjSmsD",1,0]],[42,"1",4,[-127],[3,"20SeMyqBBHVoVuFJiqmZTu",1,0]],[30,0,null,16,[22,"baKMdN60VQQ4U2ioBdasIK",-128,[49,"6apb/3NrtITKki7CgduFPk",1,[[17,"SM_EndBlock_01 Left-Bottom",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],1],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],0]],[99,"2",false,4,[-129],[3,"14DCzKsy5I/r8+ifR0wLHZ",1,0]],[30,0,null,18,[22,"baKMdN60VQQ4U2ioBdasIK",-130,[49,"50BQkk3upBNa4xstp6fC0m",1,[[17,"SM_EndBlock_01 Left-Bottom-002",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],3],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[35,["_mesh"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],4]]],2]],[99,"3",false,4,[-131],[3,"49nsLVq01EnoYiM/bAqXz/",1,0]],[30,0,null,20,[22,"baKMdN60VQQ4U2ioBdasIK",-132,[49,"22shx0SKlAq5Bkt4iYi6hl",1,[[17,"SM_EndBlock_01 Left-Bottom-001",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],6],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],5]],[42,"1",5,[-133],[3,"87j98mvK9Ha6DnjA6mRGvY",1,0]],[30,0,null,22,[22,"02IhkEmuRXK63cdwkK5zZa",-134,[49,"3enyY0RqVHo7qQdvzWBFXf",1,[[17,"SM_EndBlock_02 Left-Bottom",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],8],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],7]],[99,"2",false,5,[-135],[3,"297q/MaoNPJJJquIe1uz7k",1,0]],[30,0,null,24,[22,"02IhkEmuRXK63cdwkK5zZa",-136,[49,"efSYnWwMxHZYr1J1cscEjq",1,[[17,"SM_EndBlock_02 Left-Bottom-002",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],10],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[35,["_mesh"],[2,["32LRqVqIxUXrhRaZjufCFa"]],11]]],9]],[99,"3",false,5,[-137],[3,"17SLpDeVBOaaYZ1cmpG66J",1,0]],[30,0,null,26,[22,"02IhkEmuRXK63cdwkK5zZa",-138,[49,"7bIPdKScpPR5p3CzmUJTD+",1,[[17,"SM_EndBlock_02 Left-Bottom-001",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],13],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],12]],[42,"1",6,[-139],[3,"6cBe8Jp/VJ861Pu7Grqccl",1,0]],[30,0,null,28,[22,"baVlE0TcVebKnvsHiGIVYd",-140,[49,"23PtGo6pdJna9Ntv9tn18m",1,[[17,"SM_EndBlock_03 Left-Bottom",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],15],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],14]],[99,"2",false,6,[-141],[3,"f7ZS/yJI1JX690fV/uAFvR",1,0]],[30,0,null,30,[22,"baVlE0TcVebKnvsHiGIVYd",-142,[49,"04qpbqAhhP76Wm3rmcJCl/",1,[[17,"SM_EndBlock_03 Left-Bottom-002",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],17],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[35,["_mesh"],[2,["70ayJ71XlU96/U8xl8cilw"]],18]]],16]],[99,"3",false,6,[-143],[3,"e97jPFIPRFnKU2JutQSzaz",1,0]],[30,0,null,32,[22,"baVlE0TcVebKnvsHiGIVYd",-144,[49,"edKBO1tMZKi4mRKXkZxUvx",1,[[17,"SM_EndBlock_03 Left-Bottom-001",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],20],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],19]],[42,"1",7,[-145],[3,"09FXYcrzRBFIhAzOACnrK2",1,0]],[30,0,null,34,[22,"baKMdN60VQQ4U2ioBdasIK",-146,[49,"65/vZTEhtLJYuikzGixfOP",1,[[17,"SM_EndBlock_04 Right-Bottom",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],22],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],21]],[99,"2",false,7,[-147],[3,"0coLdzaw1KDrxenYvcuirg",1,0]],[30,0,null,36,[22,"baKMdN60VQQ4U2ioBdasIK",-148,[49,"cdEQ5KpNNAb4KW6yud8XPZ",1,[[17,"SM_EndBlock_04 Right-Bottom-002",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],24],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[35,["_mesh"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],25]]],23]],[99,"3",false,7,[-149],[3,"dbj6RnB6BM16xIcMwT2kcK",1,0]],[30,0,null,38,[22,"baKMdN60VQQ4U2ioBdasIK",-150,[49,"7fI6deV6FAtbdqFNs8ISsd",1,[[17,"SM_EndBlock_04 Right-Bottom-001",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],27],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],26]],[42,"1",8,[-151],[3,"cbikTD2kFITKegdGc6pEAO",1,0]],[30,0,null,40,[22,"02IhkEmuRXK63cdwkK5zZa",-152,[49,"235B3/Br5MXKNIIPwlUZ4q",1,[[17,"SM_EndBlock_05 Right-Bottom",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],29],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],28]],[99,"2",false,8,[-153],[3,"53QYGKpfhE0KVpTskXvxgT",1,0]],[30,0,null,42,[22,"02IhkEmuRXK63cdwkK5zZa",-154,[49,"2845/3MXdO2qbToYh6fm+v",1,[[17,"SM_EndBlock_05 Right-Bottom-002",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],31],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[35,["_mesh"],[2,["32LRqVqIxUXrhRaZjufCFa"]],32]]],30]],[99,"3",false,8,[-155],[3,"b9dpwXOKZDD4glfSi4nraI",1,0]],[30,0,null,44,[22,"02IhkEmuRXK63cdwkK5zZa",-156,[49,"a7DmD/gctJvr96hOAJIWtQ",1,[[17,"SM_EndBlock_05 Right-Bottom-001",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],34],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],33]],[42,"1",9,[-157],[3,"93Rkd9HVJDqJl5eZdGFu4V",1,0]],[30,0,null,46,[22,"baVlE0TcVebKnvsHiGIVYd",-158,[49,"56zgzGwT5G7JwLSE7BmSy5",1,[[17,"SM_EndBlock_06 Right-Bottom",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],36],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],35]],[99,"2",false,9,[-159],[3,"a1QOvVRaJOEbJyfTKwH3sF",1,0]],[30,0,null,48,[22,"baVlE0TcVebKnvsHiGIVYd",-160,[49,"8docTjKdNPvaey+Y4rJ9HF",1,[[17,"SM_EndBlock_06 Right-Bottom-002",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],38],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[35,["_mesh"],[2,["70ayJ71XlU96/U8xl8cilw"]],39]]],37]],[99,"3",false,9,[-161],[3,"bd+wAzb/tHQqXu+04pZvmJ",1,0]],[30,0,null,50,[22,"baVlE0TcVebKnvsHiGIVYd",-162,[49,"56zuTOgKBG8YlquhBDTNC2",1,[[17,"SM_EndBlock_06 Right-Bottom-001",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],41],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],40]],[42,"1",10,[-163],[3,"89yaC0d+JHoKBaf4qaAOhh",1,0]],[30,0,null,52,[22,"baKMdN60VQQ4U2ioBdasIK",-164,[49,"0dIw6xYv9KBp+MvlqxGdF6",1,[[17,"SM_EndBlock_07 Right-Top",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],43],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],42]],[99,"2",false,10,[-165],[3,"4cyr6gi1BAybYrC2y7UB3+",1,0]],[30,0,null,54,[22,"baKMdN60VQQ4U2ioBdasIK",-166,[49,"51/PlTHf9DuoBwfSwA8rHo",1,[[17,"SM_EndBlock_07 Right-Top-002",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],45],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[35,["_mesh"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],46]]],44]],[99,"3",false,10,[-167],[3,"8etgT/Jc9CpoPjod5zTPSV",1,0]],[30,0,null,56,[22,"baKMdN60VQQ4U2ioBdasIK",-168,[49,"68zWcDyvZCFq6HT/Kumis2",1,[[17,"SM_EndBlock_07 Right-Top-001",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],48],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],47]],[42,"1",11,[-169],[3,"9eH1TWrWtJR4zz3U1pdWMB",1,0]],[30,0,null,58,[22,"02IhkEmuRXK63cdwkK5zZa",-170,[49,"14KIBG2b1EM5ewyzHOXmWX",1,[[17,"SM_EndBlock_08 Right-Top",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],50],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],49]],[99,"2",false,11,[-171],[3,"b3rxVAYhxE+JvSuUfsQrKL",1,0]],[30,0,null,60,[22,"02IhkEmuRXK63cdwkK5zZa",-172,[49,"86BbGCRxJGbInK9dBD0diE",1,[[17,"SM_EndBlock_08 Right-Top-002",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],52],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[35,["_mesh"],[2,["32LRqVqIxUXrhRaZjufCFa"]],53]]],51]],[99,"3",false,11,[-173],[3,"faybAKhO1Mu5PthwT6moQW",1,0]],[30,0,null,62,[22,"02IhkEmuRXK63cdwkK5zZa",-174,[49,"20iwmckX9D3qWKIY0tzuz3",1,[[17,"SM_EndBlock_08 Right-Top-001",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],55],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],54]],[42,"1",12,[-175],[3,"cfPF7miaxJH45HDW6ifFjW",1,0]],[30,0,null,64,[22,"baVlE0TcVebKnvsHiGIVYd",-176,[49,"c9g5Qilk1OC43jW9AkNsAT",1,[[17,"SM_EndBlock_09 Right-Top",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],57],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],56]],[99,"2",false,12,[-177],[3,"57jagoUrNLS5fFXOSFy3KG",1,0]],[30,0,null,66,[22,"baVlE0TcVebKnvsHiGIVYd",-178,[49,"07aC8Edu5FvqIcDAtNAN1z",1,[[17,"SM_EndBlock_09 Right-Top-002",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],59],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[35,["_mesh"],[2,["70ayJ71XlU96/U8xl8cilw"]],60]]],58]],[99,"3",false,12,[-179],[3,"3cfi4XZ29NQIywMeyX7YCt",1,0]],[30,0,null,68,[22,"baVlE0TcVebKnvsHiGIVYd",-180,[49,"7dIAaqG+lCNoE032E1+LiM",1,[[17,"SM_EndBlock_09 Right-Top-001",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],62],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],61]],[42,"1",13,[-181],[3,"f6yf5GLplOMbn6UctAu6qA",1,0]],[30,0,null,70,[22,"baKMdN60VQQ4U2ioBdasIK",-182,[49,"94Jpp1NPZPyrR0u64niL6t",1,[[17,"SM_EndBlock_10 Left-Top",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],64],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],63]],[99,"2",false,13,[-183],[3,"34fjPhRTRPP7wd12sjy6L7",1,0]],[30,0,null,72,[22,"baKMdN60VQQ4U2ioBdasIK",-184,[49,"34qJZv/TBIZqfqb/XLeOwD",1,[[17,"SM_EndBlock_10 Left-Top-002",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],66],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[35,["_mesh"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],67]]],65]],[99,"3",false,13,[-185],[3,"d1atVx5XBKk7K7hY7wuTAw",1,0]],[30,0,null,74,[22,"baKMdN60VQQ4U2ioBdasIK",-186,[49,"7a2viLAxxFSqeg+z9ilyEB",1,[[17,"SM_EndBlock_10 Left-Top-001",["_name"],[2,["baKMdN60VQQ4U2ioBdasIK"]]],[14,["_lpos"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[14,["_euler"],[2,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[35,["_materials","0"],[2,["66VTaMsHtVnpyJ3svdwpBh"]],69],[17,true,["_active"],[2,["baKMdN60VQQ4U2ioBdasIK"]]]]],68]],[42,"1",14,[-187],[3,"b724QjPX1Hh7j6Bf+03Svr",1,0]],[30,0,null,76,[22,"02IhkEmuRXK63cdwkK5zZa",-188,[49,"feFCgcWuVNYLndeyJ7aX5w",1,[[17,"SM_EndBlock_11 Left-Top",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],71],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],70]],[99,"2",false,14,[-189],[3,"e4hI1pbq5NS6KjqeJ37bP6",1,0]],[30,0,null,78,[22,"02IhkEmuRXK63cdwkK5zZa",-190,[49,"1dUsfHpH5PpLP4z+KiFc+o",1,[[17,"SM_EndBlock_11 Left-Top-002",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],73],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[35,["_mesh"],[2,["32LRqVqIxUXrhRaZjufCFa"]],74]]],72]],[99,"3",false,14,[-191],[3,"60meav/ilI8bpbaS7ng+3I",1,0]],[30,0,null,80,[22,"02IhkEmuRXK63cdwkK5zZa",-192,[49,"571i5qRDFJpqPgLjBy/byV",1,[[17,"SM_EndBlock_11 Left-Top-001",["_name"],[2,["02IhkEmuRXK63cdwkK5zZa"]]],[14,["_lpos"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[14,["_euler"],[2,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[35,["_materials","0"],[2,["32LRqVqIxUXrhRaZjufCFa"]],76],[17,true,["_active"],[2,["02IhkEmuRXK63cdwkK5zZa"]]]]],75]],[42,"1",15,[-193],[3,"6aw0H9+/dE5JMevXjE0BJO",1,0]],[30,0,null,82,[22,"baVlE0TcVebKnvsHiGIVYd",-194,[49,"c6L55NMsFLaIhZVMkNt9OO",1,[[17,"SM_EndBlock_12 Left-Top",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],78],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],77]],[99,"2",false,15,[-195],[3,"e97MiIQdFO76oTRPdabtd+",1,0]],[30,0,null,84,[22,"baVlE0TcVebKnvsHiGIVYd",-196,[49,"62dDgRg25Fd7NLM+8xt2Gf",1,[[17,"SM_EndBlock_12 Left-Top-002",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],80],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[35,["_mesh"],[2,["70ayJ71XlU96/U8xl8cilw"]],81]]],79]],[99,"3",false,15,[-197],[3,"b9bZu+EHdIYat0070s/vef",1,0]],[30,0,null,86,[22,"baVlE0TcVebKnvsHiGIVYd",-198,[49,"e4wJolQAJNS74DRIwQc/qI",1,[[17,"SM_EndBlock_12 Left-Top-001",["_name"],[2,["baVlE0TcVebKnvsHiGIVYd"]]],[14,["_lpos"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[14,["_lrot"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[14,["_euler"],[2,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[35,["_materials","0"],[2,["70ayJ71XlU96/U8xl8cilw"]],83],[17,true,["_active"],[2,["baVlE0TcVebKnvsHiGIVYd"]]]]],82]],[65,"Theme Models Chooser",3,[[174,-199,[1,"6fDZXFXGdCfohVaFtXSr7f"],[16,18,20],84]],[3,"83bHpRTZtDG6krYjDlxIcN",1,0]],[65,"Theme Models Chooser-001",3,[[174,-200,[1,"6eBGq6/Y9FrIqwag0gOY/4"],[22,24,26],85]],[3,"915CkqYcFFeYqMitVrRBw+",1,0]],[65,"Theme Models Chooser-002",3,[[174,-201,[1,"10Q3YuoVpHtp1XO4Q9In45"],[28,30,32],86]],[3,"7cNMcx0BtNU7I+mxttFheJ",1,0]],[65,"Theme Models Chooser-003",3,[[174,-202,[1,"bbwvYoIv1HeqSZbWZg4t7n"],[34,36,38],87]],[3,"29ilsUw9tLgKCxQ+heo4DJ",1,0]],[65,"Theme Models Chooser-004",3,[[174,-203,[1,"05Ofh8sOlDfK7V6z922U9D"],[40,42,44],88]],[3,"8cg1tq+69L06DbjxGvbUp+",1,0]],[65,"Theme Models Chooser-005",3,[[174,-204,[1,"e0KQlpQjZFxJtfhFWz1Fd5"],[52,54,56],89]],[3,"cdH6/BSlRA+Ler2ohtispR",1,0]],[65,"Theme Models Chooser-006",3,[[174,-205,[1,"e3OZVO/+FMH45Ctaij5w7a"],[58,60,62],90]],[3,"35J9gE5apNOquYZro685RC",1,0]],[65,"Theme Models Chooser-007",3,[[174,-206,[1,"fbyvqtYvpJqJhfzzpEgUr3"],[64,66,68],91]],[3,"f31EF9cwdDw4ObxHSNNEDo",1,0]],[65,"Theme Models Chooser-008",3,[[174,-207,[1,"6fSn/rbHhBVJiU5lY/ruDg"],[76,78,80],92]],[3,"c2zkBFMSFGvKelQYOoPe1s",1,0]],[65,"Theme Models Chooser-009",3,[[174,-208,[1,"d8cGtAQcNPBaaMO6mHv3jr"],[82,84,86],93]],[3,"456iB9UpFOJYLjVIxkO6Ih",1,0]],[65,"Theme Models Chooser-010",3,[[174,-209,[1,"818m8z3NhBWpv+lplbY3Ol"],[46,48,50],94]],[3,"d57U/lqCFNFocyvYO2itCK",1,0]],[65,"Theme Models Chooser-011",3,[[174,-210,[1,"8fOSsbgVtLe4IL0MKLlZzI"],[70,72,74],95]],[3,"17K7sACn5E/6tAOIWw2/hq",1,0]]],0,[0,-1,17,0,-2,19,0,-3,21,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,-16,47,0,-17,49,0,-18,51,0,-19,53,0,-20,55,0,-21,57,0,-22,59,0,-23,61,0,-24,63,0,-25,65,0,-26,67,0,-27,69,0,-28,71,0,-29,73,0,-30,75,0,-31,77,0,-32,79,0,-33,81,0,-34,83,0,-35,85,0,-36,87,0,3,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,12,0,-1,4,0,-2,5,0,-3,6,0,-4,13,0,-5,14,0,-6,15,0,0,1,0,-1,2,0,-2,3,0,3,1,0,6,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,-11,14,0,-12,15,0,-1,88,0,-2,89,0,-3,90,0,-4,91,0,-5,92,0,-6,93,0,-7,94,0,-8,95,0,-9,96,0,-10,97,0,-11,98,0,-12,99,0,-1,16,0,-2,18,0,-3,20,0,-1,22,0,-2,24,0,-3,26,0,-1,28,0,-2,30,0,-3,32,0,-1,34,0,-2,36,0,-3,38,0,-1,40,0,-2,42,0,-3,44,0,-1,46,0,-2,48,0,-3,50,0,-1,52,0,-2,54,0,-3,56,0,-1,58,0,-2,60,0,-3,62,0,-1,64,0,-2,66,0,-3,68,0,-1,70,0,-2,72,0,-3,74,0,-1,76,0,-2,78,0,-3,80,0,-1,82,0,-2,84,0,-3,86,0,-1,17,0,3,17,0,-1,19,0,3,19,0,-1,21,0,3,21,0,-1,23,0,3,23,0,-1,25,0,3,25,0,-1,27,0,3,27,0,-1,29,0,3,29,0,-1,31,0,3,31,0,-1,33,0,3,33,0,-1,35,0,3,35,0,-1,37,0,3,37,0,-1,39,0,3,39,0,-1,41,0,3,41,0,-1,43,0,3,43,0,-1,45,0,3,45,0,-1,47,0,3,47,0,-1,49,0,3,49,0,-1,51,0,3,51,0,-1,53,0,3,53,0,-1,55,0,3,55,0,-1,57,0,3,57,0,-1,59,0,3,59,0,-1,61,0,3,61,0,-1,63,0,3,63,0,-1,65,0,3,65,0,-1,67,0,3,67,0,-1,69,0,3,69,0,-1,71,0,3,71,0,-1,73,0,3,73,0,-1,75,0,3,75,0,-1,77,0,3,77,0,-1,79,0,3,79,0,-1,81,0,3,81,0,-1,83,0,3,83,0,-1,85,0,3,85,0,-1,87,0,3,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,0,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,10,1,210],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,4,9,4,9,9,4,9,39,39,39,39,39,39,39,39,39,39,39,39],[46,1,46,17,115,46,17,47,1,47,17,116,47,17,48,1,48,17,117,48,17,46,1,46,17,115,46,17,47,1,47,17,116,47,17,48,1,48,17,117,48,17,46,1,46,17,115,46,17,47,1,47,17,116,47,17,48,1,48,17,117,48,17,46,1,46,17,115,46,17,47,1,47,17,116,47,17,48,1,48,17,117,48,17,31,31,31,31,31,31,31,31,31,31,31,31]],[[[58,"04-Slot-Block"],[150,"04-Slot-Block",8,[-31,-32,-33],[[[664,-24,[1,"adDwCD0kZGYbj7slb75EIO"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-20],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-21],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-22],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-23]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-17],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-18],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-19]],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-16]],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-11],[8,"642bcspAnpEK4LUpupK8i0T","showTowerUpgradesUI",-12],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-13],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-14],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-15]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-6],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-7],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-8],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-9],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-10]],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-5]]],-25,[665,-28,[1,"8dwHXegJxM25YUdE4DUKEv"],[[8,"cb730GgZGlA0o2b0bqxYlIm","selectBlock",-26],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-27]]],[666,2,-30,[1,"17IzOsNdhBR75gUsomuMOG"],-29]],4,1,4,4],[240,"73wwOw5Z5Jy71Ba4KiCnyV",-4,0,[-1,-2,-3]]],[42,"Art",1,[-34,-35,-36,-37,-38],[3,"76iPw3M8NCmYDzQoN4azLT",1,0]],[42,"Scripts",1,[-39,-40,-41,-42,-43],[3,"6bab7tdnVM0KYPoS+cOMos",1,0]],[487,"Destroy Tower Listener",false,[[57,-44,[1,"d3w5IonClDa6tyDGPYPR1W"]],[232,10,-46,[1,"dax+ZfLVBCpql9ZPIj8JEd"],[[8,"730c2m+dVlIkomlZBav90dv","destructTower",-45]]]],[3,"baUBErQY1AkrhdLA4HFWE9",1,0]],[488,"TEMP Construct Preview",false,[[95,"Cube<ModelComponent>",-47,[1,"ceLfXOBBNCI7SpoTY1VBcM"],[0],[45],1],[57,-48,[1,"1epQzWNDZFqI/tDUQkaSwk"]]],[3,"3dyFvhB35ACJaCQ36xCQLH",1,0],[1,0,0.247,0],[3,0,0.3826834323650898,0,0.9238795325112867],[1,0.6,0.5,0.6],[1,0,45,0]],[489,"TEMP Upgrade Preview",false,[[95,"Cube<ModelComponent>",-49,[1,"abf5sIaGBOw6x4s6hbNn8A"],[2],[45],3],[57,-50,[1,"fbwWjuoMJB1KKhjv2z5zHW"]]],[3,"97aks0Y/lIDaNA5yl4yyqU",1,0],[1,0,0.001,0],[1,0.98,1,0.98]],[2,["9ea1IJXwxR8LDyOJtyJFa5"]],[65,"Tower Upgrader",3,[[667,-51,[1,"0cRG/YZcVDnojS2xJFmyHF"],[[8,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]],15]],[3,"5bRwKGvMtMaJ4ggqaPPlTP",1,0]],[371,"Events",1,[[-52,-53,-54,[98,"Destroy Tower",-55,[3,"09iEmF0l1BkZQNJrjHu3CW",1,0]]],1,1,1,4],[3,"9dc6Kbfq9OqoO2cT0u3vnX",1,0]],[42,"Construction Tower UI",9,[-56,-57,-58,-59],[3,"bcFTKQKcVNh4OVKMQLDZX3",1,0]],[237,"Construct Tower Listener",false,10,[[232,2,-61,[1,"caN/7z40NP/5OzEkbKPOfz"],[[8,"9c66529d09P4Zt3iRYdMpnm","constructTower",-60],[8,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[57,-62,[1,"20V5RrxrREta3goccw35Va"]]],[3,"18EX/NR3ZKJ6indRwwkVX8",1,0]],[237,"Cancelled Tower Construction Listener",false,10,[[232,3,-63,[1,"d7zj9iaI5ECYC6QghW4QLz"],[[8,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[57,-64,[1,"80bSxkWWhBZI41Uw+h/+lg"]]],[3,"88sA/6uj9EGodUaOT91ut1",1,0]],[42,"Upgrade Tower UI",9,[-65,4,-66,-67],[3,"dba0a0bMJH04vTFqgjDtWV",1,0]],[237,"Upgrade Tower Listener",false,13,[[57,-68,[1,"7fKf+xfaVNZqbqDlWPTHSX"]],[232,7,-69,[1,"d1N5TwrCpNrL0tALIoJJNP"],[[8,"642bcspAnpEK4LUpupK8i0T","upgrade",8]]]],[3,"8crVtGRBlI36VTNH5kNrvo",1,0]],[237,"Cancelled Tower Upgrade Listener",false,13,[[232,8,-70,[1,"20eR6YBU5MZ52EU8wQzJvJ"],[[8,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[57,-71,[1,"cc88B1wJdEM43dbPKNNFvi"]]],[3,"7aZWqf11RC3ZawxtRzeSbW",1,0]],[325,"TEMP-Selection Interface Holder",2,[5,6],[[533,"Cube<ModelComponent>",false,-72,[1,"30WlUBDaJCX4B6ougKhd4q"],[4],[45],5]],[3,"4fn4ibmVVFpaRuQMtoU9MG",1,0],[1,0,0.204,0]],[2,["b2NVzD9jpfBKZ43/7JApbk"]],[2,["86TnLpMyZez4d2k1E06z3O"]],[65,"Tower Constructor",3,[[668,-74,[1,"fd8gErEUFNT41S9GXbiKdZ"],[12,13,14],-73,[[8,"cb730GgZGlA0o2b0bqxYlIm","constructed",1],[8,"642bcspAnpEK4LUpupK8i0T","setTower",8]]]],[3,"11jZQlUPhA/7itixFa+SRt",1,0]],[42,"Game",9,[-75,-76,-77],[3,"bdOx6yqYJPjou6zaXi0ml3",1,0]],[102,"Tower Construction Holder",2,[3,"c6ObkwxQ9BBZZxp/KzoeHC",1,0],[1,0,0.5,0]],[42,"1",2,[-78],[3,"2fcql0mmFG4pdSwI0r3h8I",1,0]],[30,0,null,22,[22,"9ea1IJXwxR8LDyOJtyJFa5",-79,[49,"3eo/BpkptEWowLuutI53Ib",1,[[11,"SM_BlockSlot_01",["_name"],7],[5,["_lpos"],7,[1,0,0,0]],[5,["_lrot"],7,[3,0,0,0,1]],[5,["_euler"],7,[1,0,0,0]],[35,["_materials","0"],[2,["8avigzXY5XhKbCpmY6Hsd0"]],7],[11,true,["_active"],7]]],6]],[99,"2",false,2,[-80],[3,"398yKv+lRG8ZL4gxsMkiqm",1,0]],[30,0,null,24,[22,"b2NVzD9jpfBKZ43/7JApbk",-81,[49,"88yyq4KHRLubFuTyOpwmB6",1,[[11,"SM_BlockSlot_02",["_name"],17],[5,["_lpos"],17,[1,0,0,0]],[5,["_lrot"],17,[3,0,0,0,1]],[5,["_euler"],17,[1,0,0,0]],[35,["_materials","0"],[2,["34IQ6xxWhUH7mqUbH//+fB"]],9]]],8]],[99,"3",false,2,[-82],[3,"a1qmzg+ZdK46reBPR4jr/+",1,0]],[30,0,null,26,[22,"86TnLpMyZez4d2k1E06z3O",-83,[49,"4bd8S+/N9PDpgI5XSWg8iv",1,[[11,"SM_BlockSlot_03",["_name"],18],[5,["_lpos"],18,[1,0,0,0]],[5,["_lrot"],18,[3,0,0,0,1]],[5,["_euler"],18,[1,0,0,0]],[35,["_materials","0"],[2,["dcQNjsiCBT3KDpO+eJMUSG"]],11]]],10]],[65,"Tower Destructor",3,[[669,-84,[1,"e0fD1BV7JPSZQ67M3OXKM9"],21,[[8,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1],[8,"cb730GgZGlA0o2b0bqxYlIm","destroyTower",1],[8,"9c66529d09P4Zt3iRYdMpnm","towerDestroyed",19]]]],[3,"52yFjhH2hLnIO+ybGhXYC5",1,0]],[141,"Click SFX",[[139,"sfx-ui-gametap",-85,[1,"32X2mvA3ZExZ1cYq79lbHz"]]],[3,"eaqt74DPlEpbOBVUUA5ngG",1,0]],[65,"Show Tower Construction UI Raiser",10,[[236,1,-86,[1,"aflqH3CxJH4Z8Ihv0nNAme"]]],[3,"cfUaSORzxMWq96dYL0DCtj",1,0]],[65,"Hide Tower Construction UI Raiser",10,[[236,4,-87,[1,"d3STKhVGRLnbgJNXHdUakl"]]],[3,"57IvbxkSpOT5gdaRmgrZIw",1,0]],[65,"Hide Tower Upgrade UI Raiser",13,[[236,6,-88,[1,"cbNrjOJ5VF3J7YpzWy7t2k"]]],[3,"42R45W52BJsJ4o/Q6xp/Zd",1,0]],[42,"Audio",3,[29],[3,"42+2bziB1Bg6DScBRmNQzf",1,0]],[65,"Theme Model Chooser",3,[[174,-89,[1,"a7g6yA3qNOtKyL0Ps9MSgt"],[22,24,26],16]],[3,"f2mSkhygFJbopmX1A47GPm",1,0]],[65,"On Game Start",20,[[206,1,-90,[1,"77OiI0KHdEe7I7+z+wfscb"],[[8,"cb730GgZGlA0o2b0bqxYlIm","activate",1]]]],[3,"48CIl14thLwqIQsXmut+QT",1,0]],[65,"On Victory",20,[[206,3,-91,[1,"70ldOpdp9INofNub/nWCLb"],[[8,"cb730GgZGlA0o2b0bqxYlIm","deactivate",1]]]],[3,"b2soa2pohOF4wI4NRdw7ql",1,0]],[65,"On Defeat",20,[[206,4,-92,[1,"32rSGuJ45BFIqcH2gmSqpN"],[[8,"cb730GgZGlA0o2b0bqxYlIm","deactivate",1]]]],[3,"64NDKp7V9GjKDh59AqqcXs",1,0]],[629,true,1,[1,"0c5pCZwi5OOphmm0m2TRWt"],[1,0,0.4,0]]],0,[0,-1,23,0,-2,25,0,-3,27,0,3,1,0,5,32,0,5,6,0,5,14,0,5,4,0,5,4,0,5,15,0,5,6,0,5,8,0,5,14,0,5,4,0,5,15,0,5,31,0,5,11,0,5,5,0,5,12,0,5,30,0,5,11,0,5,5,0,5,12,0,0,1,0,-2,38,0,5,1,0,5,29,0,0,1,0,19,38,0,0,1,0,-1,2,0,-2,3,0,-3,9,0,-1,16,0,-2,21,0,-3,22,0,-4,24,0,-5,26,0,-1,19,0,-2,8,0,-3,28,0,-4,33,0,-5,34,0,0,4,0,5,28,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,8,0,-1,10,0,-2,13,0,-3,20,0,6,9,0,-1,30,0,-2,31,0,-3,11,0,-4,12,0,5,19,0,0,11,0,0,11,0,0,12,0,0,12,0,-1,14,0,-3,15,0,-4,32,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,79,21,0,0,19,0,-1,35,0,-2,36,0,-3,37,0,-1,23,0,3,23,0,-1,25,0,3,25,0,-1,27,0,3,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,34,0,0,35,0,0,36,0,0,37,0,10,1,4,6,13,5,6,16,6,6,16,29,6,33,92],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,-1,12,-1,12,4,9,4,9,4,9,-1,-2,-3,40,39],[398,40,399,40,400,40,401,1,402,17,403,17,404,405,406,37,31]],[[[76],[55,"SM_TowerElectroneerBody_01",[-2],[3,"12sIxAd4xbv59W3ANKj2X7",-1,0]],[64,"SM_TowerElectroneerBody_01",1,[[62,-3,[1,"366PFgp3dcA6jQhh5OaNY0"],[0],[45],1]],[3,"bbsFprwHlZVKqGRbFGqwTW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[407,240]],[[[77,"SM_TowerElectroneerBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2524180393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":80448,"length":22500,"count":5625,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":80448,"count":1676,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2846771776676178,-0.6407873630523682,-0.1203923374414444],"maxPosition",8,[1,0.2846771776676178,0.19153396785259247,0.40582022070884705]]],-1],0,0,[],[],[]],[[[58,"Game Victory Controller"],[267,"Game Victory Controller",[-4],[[670,0.5,0.9,1,-2,[1,"54NiE4ONhFtrWwkVELx2To"]],[57,-3,[1,"cd+Y4glNBGgqr1KvfWI8V9"]]],[3,"485iyaahFDNIyx781avzqz",-1,0]],[42,"Events",1,[-5,-6,-7],[3,"56+VNBOnhIoLw0etlqSncL",1,0]],[42,"Cube Tower HP",2,[-8,-9],[3,"36wUMhv8BDiYUP0xj+zNtc",1,0]],[65,"Final Wave Completed",2,[[468,3,-10,[1,"8egc8QzbZFaL9wuxDmuaGK"],[[8,"4b49aIoOPNJGbyOKIzv2YTd","victory",1]]]],[3,"90c2lI/7FHy6z8MrOQ3MGC",1,0]],[65,"Changed",3,[[316,1,-11,[1,"a0TtExOSZG5Js6ms6NwDG+"],[[8,"4b49aIoOPNJGbyOKIzv2YTd","updateTowerHP",1]]]],[3,"81fAT0PGFKzoBIhN31pJn9",1,0]],[65,"Set",3,[[316,2,-12,[1,"30Qf+RSIpKJa5Jy3FTFsLr"],[[8,"4b49aIoOPNJGbyOKIzv2YTd","updateTowerHP",1]]]],[3,"b7vVb9rhJDF7KSfrI90QQC",1,0]],[65,"On Game Defeat",2,[[206,4,-13,[1,"92DGeTx6xO6IjI8WXjTvQF"],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",1]]]],[3,"93PDIHrRlB9q7AuuAteaRf",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-1,4,0,-2,3,0,-3,7,0,-1,5,0,-2,6,0,0,4,0,0,5,0,0,6,0,0,7,0,10,1,13],[],[],[]],[[{"name":"default_sprite","rect":{"x":0,"y":2,"width":40,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[408]],[[[68,".bin",457442077,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyTank_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyTank_03",[-2],[3,"6fmtIknt9barIS5y55aJtq",-1,0]],[64,"SM_EnemyTank_03",1,[[62,-3,[1,"66o7UDfllVyr9MoWFmTbga"],[0],[45],1]],[3,"7a5v6ewJBcY6bQHuXc2hJF",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[409,410]],[[[58,"Game Over Controller"],[267,"Game Over Controller",[-3],[[671,-2,[1,"f9uLnig5tIPK6K7EOTBBJ2"]]],[3,"640VKea5NIK4USuLAyLBs1",-1,0]],[42,"Events",1,[-4],[3,"21R2qCEwBESoIVLQn+UlM3",1,0]],[65,"Cube Towe HP Listener",2,[[316,1,-5,[1,"5eNgccoCJLOp9WXV2Exktu"],[[8,"42f642WIEJAjprBy1WVF7oY","setCubeTowerHP",1]]]],[3,"1eKiZOwCZH94k7XhwBrXpi",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,10,1,5],[],[],[]],[[{"name":"Icon_Currency Outline 100","rect":{"x":0,"y":0,"width":104,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":104,"height":104},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[411]],[[[68,".bin",1170482504,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43584,"length":12744,"count":3186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43584,"count":908,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20033572614192963,-0.46827825903892517,-0.05078723281621933],"maxPosition",8,[1,0.20010216534137726,0.15148843824863434,0.37866008281707764]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerLaserBody_01",[-2],[3,"c3aOBtjPNU96Ex7+KDGHdh",-1,0]],[64,"SM_TowerLaserBody_01",1,[[62,-3,[1,"c79Byda9tSsLPjCdZFbGni"],[0],[45],1]],[3,"99ijk+7RNW9aCPpwsQ5cLp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[412,206]],[[[77,"SM_TowerLaserBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-TowerConstruction-UI"],[80,"P-TowerConstruction-UI",33554432,[-29,-30,-31],[[9,-25,[1,"95uJmQ46FAtJ+af/b8eogh"],[5,414,896]],[340,-26,[1,"82fdObAedBfKXPa5YRt+Pl"]],[443,45,5.684341886080802e-14,5.684341886080802e-14,-27,[1,"89/nTdM8RJPpPYUUL/sQy8"]],[310,-28,[1,"6bb7HJ0dtEeqFwICkXptOq"]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-24,0,[[89,["_animator"],-5,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[67,["_entries","0","entryNode"],-7,-6,[2,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_entries","1","entryNode"],-9,-8,[2,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_entries","2","entryNode"],-11,-10,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_showTowerInfo","1","target"],-13,-12,[2,["bb7Kak23hMTYfuoFKHjabu"]]],[71,["_animator"],-15,[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]],-14,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[71,["clickEvents","0","target"],-17,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]],-16,[2,["559OljkmVJbb40T1JglvS/"]]],[67,["_button"],-19,-18,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[67,["_onEventRaised","0","target"],-21,-20,[2,["559OljkmVJbb40T1JglvS/"]]],[67,["_onEventRaised","0","target"],-23,-22,[2,["559OljkmVJbb40T1JglvS/"]]]],[-1,-2,-3,-4]],[1,207,448.00000000000006,0]],[90,0,{},[22,"46k0m6lkdE7LjR/vInpkl2",-65,[81,"615Zd7XYRLqKkUnNrgpIIW",1,[[297,[2,["559OljkmVJbb40T1JglvS/"]],[-64]]],[[17,"Holder_TowerUpgradeMenu",["_name"],[2,["46k0m6lkdE7LjR/vInpkl2"]]],[14,["_lpos"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[14,["_lrot"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[3,0,0,0,1]],[14,["_euler"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[11,"Button_Color",["_name"],-32],[5,["_lpos"],-33,[1,0,0,0]],[11,"Button_Color",["_name"],-34],[5,["_lpos"],-35,[1,0,0,0]],[11,"Button_Color",["_name"],-36],[5,["_lpos"],-37,[1,0,0,0]],[11,"Stats 01",["_name"],-38],[5,["_lpos"],-39,[1,-62,-5.182,0]],[11,"Stats 02",["_name"],-40],[5,["_lpos"],-41,[1,0,-5.182,0]],[11,"Stats 03",["_name"],-42],[5,["_lpos"],-43,[1,62,-5.182,0]],[17,"Dot_Outline",["_name"],[2,["fad6l15HhESar9QeacgpaJ"]]],[11,"Panel_Outline",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-46],[5,["_lpos"],-47,[1,0,0,0]],[11,"Panel_Outline",["_name"],-48],[5,["_lpos"],-49,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-50],[5,["_lpos"],-51,[1,0,0,0]],[11,"Panel_Outline",["_name"],-52],[5,["_lpos"],-53,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-54],[5,["_lpos"],-55,[1,0,0,0]],[17,0,["_opacity"],[2,["18PnzBvKpPm5jHmDihqUZ9"]]],[17,false,["_active"],[2,["37Eb9ZL+JM5azHm5AEqitc"]]],[17,false,["_debug"],[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[11,3,["clickEvents","length"],-56],[449,["clickEvents","1","target"],-58,-57],[209,["clickEvents","2"],-60,[8,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",-59]],[11,1,["_animationEvents","0","_actions","length"],-61],[209,["_animationEvents","0","_actions","0"],-63,[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-62]]]],20]],[253,"Content Holder",false,33554432,[-69,2],[[9,-66,[1,"eeC23LjqpL8Zp2iqWz9mMc"],[5,414,896]],[172,45,100,100,0,-67,[1,"315MNXKoBHGqbLafl7aZSr"]],[57,-68,[1,"eeX4253xVOAahKoNu/WDMw"]]],[3,"ccWqG40j1HuaRb//VxdCCV",1,0]],[197,"Buttons",false,33554432,3,[-73,-74,-75,-76],[[9,-70,[1,"06JvfeFK9PZJqzK66yahZv"],[5,150,205]],[453,1,2,15,0,true,-71,[1,"d4Jpd6HqJKO7sifEr+4Ms0"]],[567,36,15,15,1,-72,[1,"510EMGrlxHgoFEzd88J2WH"]]],[3,"3dQyPIlhJKSLv+XQaGGMqP",1,0],[1,117,-330.5,0]],[53,"Close Button",33554432,4,[-83],[[9,-77,[1,"1arCJaIFNJPbFOm57VNnVO"],[5,150,40]],[263,1,0,-78,[1,"41voYhcVNFIJlfzmqWT5r2"],0],[313,2,-81,[1,"2dyVdZLX9Ev5i4dzn3e2Oh"],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3],[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-80]],[4,4292269782],-79,1,2,3,4],[236,3,-82,[1,"31DPtQ5dBGX4TnyppOp6RY"]]],[3,"82Hvf5O9BNTpiRGFwcxfri",1,0],[1,0,-82.5,0]],[53,"Laser Tower Button",33554432,4,[-90],[[9,-84,[1,"4cdjOlkltFOrMFluMI1+Ao"],[5,150,40]],[263,1,0,-85,[1,"fftRO1OuZOC7ZlhzKesX+2"],5],[313,2,-88,[1,"d60ZwDJ9pIaoSfk1UIW/Pu"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-87],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-86,6,7,8,9],[405,2,"lasertower",-89,[1,"59dJuOjxZI3ZJb3CrJ4F7W"]]],[3,"df6iHgGMVH94zvGqdhOyEM",1,0],[1,0,-27.5,0]],[53,"Cannon Tower Button",33554432,4,[-97],[[9,-91,[1,"9buIgTnm1OvJQxBJ0/n3YB"],[5,150,40]],[263,1,0,-92,[1,"fcKDWEonlCJYI1SgVcAzyK"],10],[313,2,-95,[1,"48vZcqZY5JK5l0ja+SrheU"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-94],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-93,11,12,13,14],[405,2,"cannontower",-96,[1,"57i75WshJJv56KfgCIqGtS"]]],[3,"b5iMy99YhBqI5MhgBWibXD",1,0],[1,0,27.5,0]],[53,"Gun Tower Button",33554432,4,[-104],[[9,-98,[1,"6dYrahi65PZLokcZSYtgJs"],[5,150,40]],[263,1,0,-99,[1,"12u23TnPdPUZYMjhxdTDgK"],15],[313,2,-102,[1,"f8Mi4fc8lPdIPc9DOeqJa7"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-101],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-100,16,17,18,19],[405,2,"guntower",-103,[1,"90c9O8jpxO+YSCPMsN/r4y"]]],[3,"0dC9809LdIy7lDqF7j418J",1,0],[1,0,82.5,0]],[330,"Tower Construction UI",33554432,[[[48,-105,[1,"8awb8E5ctFNZOksbBSw4Cd"]],-106],4,1],[3,"85RFf5TYJDUoOpac3hdnNr",1,0]],[83,"Events",33554432,1,[-108,-109,-110,-111,-112],[[48,-107,[1,"adtl2NYaJGULyWwtwcmTl2"]]],[3,"6fpt+lGQpIVJ4V+8y2ZYGK",1,0]],[83,"Scripts",33554432,1,[-114,9,-115],[[48,-113,[1,"06O+tp2G5HmrtZw1nKlSq/"]]],[3,"81fF2Gj/xIObmd7lsdiMQK",1,0]],[672,9,[1,"11+S8z3EZGC5ktwSiCAMH5"],[[410,0,-118],[410,2,-119],[410,1,-120]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-117]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","towerClick",2],[182,"9724cyw/qJC54XASWo2Oks7","setTowerInfo"],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-116]]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[33,"Game Over",33554432,10,[[48,-121,[1,"98dyk79pJOLITTq611+Uk9"]],[206,4,-123,[1,"27CHaTIl1MabqNE42WLp25"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-122],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[8,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",9]]],[236,3,-124,[1,"c5UG691QhLSr5pAvddu0S5"]]],[3,"a2Tp600XZIopO9SlB3L1+R",1,0]],[33,"Game Victory",33554432,10,[[48,-125,[1,"abSEn4IMlK1pDXkE/bFbjh"]],[206,3,-127,[1,"89k8nbP7ZNAoQ4doS59mYR"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-126],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[8,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",9]]],[236,3,-128,[1,"06QstgLpVP14VtYI+eADMy"]]],[3,"7f7mKlPNlDq6tK0iVZHJb9",1,0]],[83,"Art",33554432,1,[3],[[9,-129,[1,"1e/+EiHY9MLJyBATiW7SFo"],[5,414,896]],[172,45,100,100,0,-130,[1,"315MNXKoBHGqbLafl7aZSr"]]],[3,"08Ww6G8aRNBJeV17NK55//",1,0]],[83,"Audio",33554432,11,[-132,-133],[[48,-131,[1,"77N7e3aNhGO5U9Vw80WcMV"]]],[3,"4agay1KaFG5KxrBBAK5SdF",1,0]],[33,"Click SFX",33554432,19,[[48,-134,[1,"d5LMAtfHBN0qD7LmZ1Aoq/"]],[139,"sfx-ui-gametap",-135,[1,"27Yjqnsb1H6p/YVw32FWza"]]],[3,"d3glgw3NRMbI31EaDLYZC2",1,0]],[33,"Construct  SFX",33554432,19,[[48,-136,[1,"5cBDcw8AFLqrYK4EBDv9eb"]],[139,"sfx-player-towerbuilded",-137,[1,"9clWneP+1GYJwzRPN4jcPs"]]],[3,"071TFz4+tHCZ6f25g/lnx0",1,0]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["8bBj36fMNOUZFpmts6EkfF"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[83,"Tutorial",33554432,10,[-139,-140],[[48,-138,[1,"3eTQdqoKdNo7MncFp0vbSf"]]],[3,"c42AtI0UZAeKBZ2+8BpGfX",1,0]],[327,"Label",512,33554432,5,[[9,-141,[1,"81lGj/xpZPcaOq9Xl7JAzg"],[5,150,40]],[285,"Close",20,20,1,false,-142,[1,"e2i1G7aS1FjrwjnaBviPt0"],[4,4278190080]]],[3,"cbyjbSbhRLzLQurDaotHvB",1,0]],[327,"Label",512,33554432,6,[[9,-143,[1,"fb/r3C0dpJEoORsa9fMh4r"],[5,150,40]],[285,"Laser Tower (4)",16,16,1,false,-144,[1,"bdMV6BdHtJxZ8V3qVc3eXt"],[4,4278190080]]],[3,"170U31SS1JCYdVogNNx8Ke",1,0]],[327,"Label",512,33554432,7,[[9,-145,[1,"e7WWONzodL96LS1mGkqf7f"],[5,150,40]],[285,"Cannon Tower (3)",16,16,1,false,-146,[1,"f6BqU9OYFJJrpqZklyxEGD"],[4,4278190080]]],[3,"9dmQHVL4tI6qeGyo5Ws476",1,0]],[327,"Label",512,33554432,8,[[9,-147,[1,"bfqBEChbZGlIPZy+HEA216"],[5,150,40]],[285,"Gun Tower (2)",16,16,1,false,-148,[1,"9cMvGRTDdB55/Hll7X9+w/"],[4,4278190080]]],[3,"dff+iOL05K3rHHJLyXaqQu",1,0]],[2,["1ayGJX7NFLw4ZV5ksbBfGW"]],[33,"Line Positioner",33554432,11,[[48,-149,[1,"d8TjdnJpBOjIEA0bbJ4D1W"]],[673,-150,[1,"6fQyGE1n9AQ6BunD+bjSz4"]]],[3,"35aWqEhTtJE63+7rx6hNcZ",1,0]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-161,[49,"74XRvRkuBPX6zuG43ddIDV",2,[[11,"Holder_Tower Button 01",["_name"],13],[5,["_lpos"],13,[1,0,0,0]],[5,["_lrot"],13,[3,0,0,0,1]],[5,["_euler"],13,[1,0,0,0]],[11,"Button_Color",["_name"],-151],[5,["_lpos"],-152,[1,0,0,0]],[11,"Button_Outline",["_name"],22],[5,["_lpos"],22,[1,0,0,0]],[5,["_lrot"],22,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],22,[1,0,0,45]],[11,true,["_active"],13],[11,"Button_Outline 2",["_name"],-153],[5,["_lpos"],-154,[1,0,0,0]],[11,"Button_Outline 1",["_name"],-155],[5,["_lpos"],-156,[1,0,0,0]],[17,false,["_active"],[2,["e9EkiL/+1I4KWEMpMRNY1g"]]],[11,2,["_clips","length"],23],[183,["_clips","0"],23,22],[183,["_defaultClip"],23,23],[11,"Panel_Outline",["_name"],-157],[5,["_lpos"],-158,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-159],[5,["_lpos"],-160,[1,0,0,0]],[17,false,["_active"],[2,["07J8NL3JNE+J1JbZaH9Gkn"]]],[183,["_clips","1"],23,24]]],21]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-168,[49,"c1RSk6NUhFVYmVRsNR9Aqa",2,[[11,"Holder_Tower Button 02",["_name"],14],[5,["_lpos"],14,[1,0,0,0]],[5,["_lrot"],14,[3,0,0,0,1]],[5,["_euler"],14,[1,0,0,0]],[11,"Button_Color",["_name"],-162],[5,["_lpos"],-163,[1,0,0,0]],[11,"Button_Outline",["_name"],24],[5,["_lpos"],24,[1,0,0,0]],[5,["_lrot"],24,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],24,[1,0,0,45]],[11,"Panel_Outline",["_name"],-164],[5,["_lpos"],-165,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-166],[5,["_lpos"],-167,[1,0,0,0]],[11,true,["_active"],14]]],25]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-175,[49,"0aSc2CSmNOv7gy3zhm972w",2,[[11,"Holder_Tower Button 03",["_name"],15],[5,["_lpos"],15,[1,0,0,0]],[5,["_lrot"],15,[3,0,0,0,1]],[5,["_euler"],15,[1,0,0,0]],[11,"Button_Color",["_name"],-169],[5,["_lpos"],-170,[1,0,0,0]],[11,"Button_Outline",["_name"],25],[5,["_lpos"],25,[1,0,0,0]],[5,["_lrot"],25,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],25,[1,0,0,45]],[11,"Panel_Outline",["_name"],-171],[5,["_lpos"],-172,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-173],[5,["_lpos"],-174,[1,0,0,0]],[11,true,["_active"],15]]],26]],[33,"Show UI Listener",33554432,10,[[48,-176,[1,"900bExSKZDC6d9wBE0dYCr"]],[232,1,-177,[1,"e0d2zlw9tDVIoOqwjZIDuQ"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",3],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",2],[8,"1bb54x5k2ZLwpsDBRHVFrFw","showUI",9]]]],[3,"0bxHAa3FBBw41esiCXI79M",1,0]],[33,"Hide UI Listener",33554432,10,[[48,-178,[1,"55bEAJEFlHiZprxA35s3Gc"]],[232,4,-179,[1,"14kGvYRoFKiLb8w1VhC/9e"],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]]]],[3,"22oTyZ1mxOQbCrvsN86YRd",1,0]],[134,"Started",33554432,26,[[[48,-180,[1,"4bFLTllvhFG59A4wyD8//w"]],-181],4,1],[3,"daTRqhxoFEMoPd4xXh72bh",1,0]],[134,"Finished",33554432,26,[[[48,-182,[1,"4eds4XYeROpKCTLOhs9SON"]],-183],4,1],[3,"a95xHFixFLN6SI4DY/Ayew",1,0]],[299,[1,"f73Gqm8NxNwIPuL/MNLazi"]],[2,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[2,["cdN/iXwS9EWaea7ROuvyKb"]],[2,["0325m7PSVKEJgP6FqjArxY"]],[2,["35oTOUcq5LW6sLAKY0sSNr"]],[2,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[2,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[2,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[2,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["42ZSZDURBPuYxZbUVkytNk"]],[2,["64o7LRB4FEdaQLAV4SPsYe"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["99UzDZa6pHQ4VtG5vEXqut"]],[298,3,38,[1,"2eh0VwqqVIzpf/h5Ck3nOJ"],[[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"]]],[298,4,39,[1,"3e76EkRTVKx5R56c+uB3Xi"],[[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"]]]],0,[0,-1,2,0,-2,33,0,-3,34,0,-4,35,0,5,2,0,5,2,0,13,12,0,5,2,0,13,12,0,5,2,0,13,12,0,5,2,0,13,12,0,5,2,0,13,2,0,5,2,0,13,2,0,5,2,0,13,40,0,5,2,0,13,65,0,5,2,0,13,66,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,18,0,-2,11,0,-3,10,0,1,41,0,1,41,0,1,42,0,1,42,0,1,43,0,1,43,0,1,44,0,1,44,0,1,45,0,1,45,0,1,46,0,1,46,0,1,47,0,1,47,0,1,48,0,1,48,0,1,49,0,1,49,0,1,50,0,1,50,0,1,51,0,1,51,0,1,52,0,1,52,0,1,31,0,9,2,0,1,31,0,5,9,0,1,31,0,1,64,0,5,3,0,1,64,0,-1,40,0,3,2,0,0,3,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,0,4,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,0,5,0,0,5,0,19,5,0,5,5,0,0,5,0,0,5,0,-1,27,0,0,6,0,0,6,0,19,6,0,5,6,0,0,6,0,0,6,0,-1,28,0,0,7,0,0,7,0,19,7,0,5,7,0,0,7,0,0,7,0,-1,29,0,0,8,0,0,8,0,19,8,0,5,8,0,0,8,0,0,8,0,-1,30,0,0,9,0,-2,12,0,0,10,0,-1,36,0,-2,37,0,-3,16,0,-4,17,0,-5,26,0,0,11,0,-1,32,0,-3,19,0,5,20,0,5,21,0,43,33,0,43,34,0,43,35,0,0,16,0,5,16,0,0,16,0,0,16,0,0,17,0,5,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,-1,20,0,-2,21,0,0,20,0,0,20,0,0,21,0,0,21,0,0,26,0,-1,38,0,-2,39,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,32,0,0,32,0,1,53,0,1,53,0,1,54,0,1,54,0,1,55,0,1,55,0,1,56,0,1,56,0,1,57,0,1,57,0,3,33,0,1,58,0,1,58,0,1,59,0,1,59,0,1,60,0,1,60,0,3,34,0,1,61,0,1,61,0,1,62,0,1,62,0,1,63,0,1,63,0,3,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,-2,65,0,0,39,0,-2,66,0,10,1,2,6,3,3,6,18,9,6,11,183],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],[2,20,26,27,28,2,20,26,27,28,2,20,26,27,28,2,20,26,27,28,4,4,9,9,9,4,4,40],[11,11,11,20,21,11,11,11,20,21,11,11,11,20,21,11,11,11,20,21,118,38,45,45,67,38,38,37]],[[[77,"SM_EnemyCharger_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3336827991,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyCharger_02",[-2],[3,"fbcmmbHnpbkKfFI1OpgAzY",-1,0]],[64,"SM_EnemyCharger_02",1,[[62,-3,[1,"b2FzVpdT5WjYWZcvkiHil1"],[0],[45],1]],[3,"68I7jgr3Ffeb9oCqZlx96t",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[413,414]],[[{"name":"UI_Divider","rect":{"x":0,"y":0,"width":372,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":372,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[415]],[[[58,"P-OverCharger-2"],[152,"P-OverCharger-2",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Overcharger-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"79BYQtfNNbj4YT0sLCxBU2",-32,[81,"551bENhodEAZe4W6/YWoAM",1,[[75,[2,["79BYQtfNNbj4YT0sLCxBU2"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.137,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["5b4dml5JZZSpEFLZ2t+IcI"]],3],[17,"SM_Model",["_name"],[2,["b2leN5NINUyYLt7KA/my5j"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["79BYQtfNNbj4YT0sLCxBU2"]],[42,"VFX",2,[-36,-37,-38],[3,"2fvAhII+9Fm6VftcYNaBV0",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"158qjT4X9O+YZSRtT4/XZc",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"72+9o6wOVIYb1G7zBW2cg8"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"48VTdxlqtKa7J1GYgO9NYw",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"2buEt2Sm1AqrVURnQZ9cKx"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"92v65OgehO2Lz2T0Hd+qJV",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"f7UjCPLLBPsI25Z2YsmJTM"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"afYRQ4qXxHTKANwTL+NRan",1,0]],[490,"Temp-Model",2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"10xEfDXShJrJSWy3P1omNo"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"2dTmc137xOzYtOFST+Gdq+"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"bcv1jnY9FKt6CX3J6PwFCB",1,0]],[145,23,[1,"2ak1/y/YZNQ7zEf/bollr3"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,416,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[77,"SM_BlockDetail_06__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockDetail_06",[-2],[3,"2c3ig9FjFS+bF3iVcd7QWx",-1,0]],[64,"SM_BlockDetail_06",1,[[62,-3,[1,"feSFXUciRfzZUBkwwC679a"],[0],[45],1]],[3,"d63gG51PxXZ5fXAFCfbFqM",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[417,418]],[[[68,".bin",3917431414,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19152,"length":5952,"count":1488,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19152,"count":399,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4350086748600006,-0.3728209137916565,-0.06465183943510056],"maxPosition",8,[1,0.4037121832370758,0.5027304291725159,0.6001492142677307]]],-1],0,0,[],[],[]],[[[149,[[156,[114,[-14,-15,-16,-17,-18,-19,-20,-21],[[115,-5,-4],[82,0,false,-7,-6,[[91,"bought"]]],[82,0,false,-9,-8,[[91,"locked"]]],[82,0,false,-11,-10,[[91,"unlocked"]]],[82,0,false,-13,-12,[[91,"noCurrency"]]]],-3,-2,-1]]],[{},"unlocked",4,[101,2],"noCurrency",4,[101,2],"locked",4,[101,2],"bought",4,[101,2]]],[61,"Any"],[61,"Entry"],[61,"Exit"],[63,"ShopItem_Bought",[72,0]],[63,"ShopItem_Locked",[72,1]],[63,"ShopItem_UnLocked",[72,2]],[63,"ShopItem_UnLocked-CantBuy",[72,3]],[63,"Empty",[186]]],0,[0,29,1,0,30,3,0,31,2,0,14,8,0,15,2,0,14,4,0,15,1,0,14,5,0,15,1,0,14,6,0,15,1,0,14,7,0,15,1,0,-1,2,0,-2,3,0,-3,1,0,-4,4,0,-5,5,0,-6,6,0,-7,7,0,-8,8,21],[0,0,0,0],[18,18,18,18],[237,143,236,238]],[[[149,[[156,[114,[-14,-15,-16,-17,-18,-19,-20,-21],[[115,-5,-4],[82,0,false,-7,-6,[[91,"bought"]]],[82,0,false,-9,-8,[[91,"unlocked"]]],[82,0,false,-11,-10,[[91,"noCurrency"]]],[82,0,false,-13,-12,[[91,"locked"]]]],-3,-2,-1]]],[{},"bought",4,[101,2],"unlocked",4,[101,2],"noCurrency",4,[101,2],"locked",4,[101,2]]],[61,"Any"],[61,"Entry"],[61,"Exit"],[63,"ShopItemTower_Bought",[72,0]],[63,"ShopItemTower_Locked",[72,1]],[63,"ShopItemTower_UnLocked",[72,2]],[63,"ShopItemTower_UnLocked-CantBuy",[72,3]],[63,"Empty",[186]]],0,[0,29,1,0,30,3,0,31,2,0,14,8,0,15,2,0,14,4,0,15,1,0,14,6,0,15,1,0,14,7,0,15,1,0,14,5,0,15,1,0,-1,2,0,-2,3,0,-3,1,0,-4,4,0,-5,5,0,-6,6,0,-7,7,0,-8,8,21],[0,0,0,0],[18,18,18,18],[241,242,243,244]],[[{"name":"Reference_Rewards","rect":{"x":0,"y":0,"width":841,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":841,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[419]],[[[68,".bin",1816390270,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.29834288358688354,-0.25131955742836,-0.4000000059604645],"maxPosition",8,[1,0.22939303517341614,0.27641621232032776,1.1082842350006104]]],-1],0,0,[],[],[]],[[[58,"P-Cargo-1"],[228,"P-Cargo-1",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[427,"Art",1,[[-17,-18,-19,-20,[102,"Spawn Enemies Position",-21,[3,"e6El/YWgVD5oRcHAtTGkLY",1,0],[1,0,0,0.342]]],1,1,1,1,4],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[42,"Scripts",1,[-22,-23,-24,-25,-26],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",3,[-27],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"30XKbfMTNf97kxPRwjyic5",-34,[81,"219Vme8JpGDKpJHgjU3X0j",1,[[75,[2,["30XKbfMTNf97kxPRwjyic5"]],[[57,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[17,"SM_Model",["_name"],[2,["30XKbfMTNf97kxPRwjyic5"]]],[14,["_lpos"],[2,["30XKbfMTNf97kxPRwjyic5"]],[1,0,0,0]],[14,["_lrot"],[2,["30XKbfMTNf97kxPRwjyic5"]],[3,0,0,0,1]],[14,["_euler"],[2,["30XKbfMTNf97kxPRwjyic5"]],[1,0,0,0]],[35,["_materials","0"],[2,["03kt8efSpXE6Pxg+UKrU++"]],3],[5,["_lrot"],-28,[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474]],[5,["_euler"],-29,[1,-90.00000000000001,-0.0000025044781562438674,0]],[5,["_lscale"],-30,[1,1.25,1.25,1.8]],[5,["_lpos"],-31,[1,0,0,0]],[11,"SM_Model",["_name"],-32]]],2]],[2,["62Thw20TRVIrkE0s7tlGnj"]],[42,"VFX",2,[-35,-36,-37],[3,"c0UE+8/W1Is56DZ9SiFRLq",1,0]],[141,"Spawn Enemies",[[235,-39,[1,"caD/QiCsdOOKI6Au82xibj"],-38]],[3,"01lZ0Bx5BPOpxhjt0vIDhW",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-47,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[11,"P-HP-Bar",["_name"],-40],[5,["_lpos"],-41,[1,207,448.00000000000006,0]],[5,["_lrot"],-42,[3,0,0,0,1]],[5,["_euler"],-43,[1,0,0,0]],[11,"Art",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-48],[3,"5fFE0PBC9G/4PQiGRisZyE",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"4eS95Jyt9O8JMtx/PCA/Zm"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-49],[31,5]],[73,"VFX_Death_Shards",7,[-50],[3,"23v8aoKBZPwI5RwLp4kQTx",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,13,[1,"a2pZYfEYxDbbpL3w5UWlyu"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-51],[31,7]],[73,"VFX_Spawn",7,[-52,-53],[3,"19Zql1TXZNKr32f29+c4Ol",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",3,[-54],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[65,"On Death VFX Finished",3,[[118,-56,[1,"bc7qD5wXZLnaSSufvnjaKT"],[12,14],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"1dsl3h/khGmqhtx6oA7yz6",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,15,[1,"24jhv+LWFEiJFPJVMqWuly"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[119,0.3,false,15,[1,"65YTGGNVBHeYD+ovDbXnP9"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,11]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",3,[8],[3,"adb886i0dNM6iXEWqT6nFX",1,0]],[264,"Cargo-1",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,23],[265,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[56,"Stun",3,[26],[3,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,5,9,0,13,17,0,3,1,0,-1,25,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,3,1,0,6,1,0,-4,28,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,6,2,0,-1,4,0,-2,16,0,-3,27,0,-4,18,0,-5,24,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,0,5,0,3,5,0,-1,11,0,-2,13,0,-3,15,0,41,25,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,29,0,1,29,0,19,20,0,3,9,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,21,0,-2,22,0,-1,17,0,5,18,0,0,18,0,0,19,0,7,21,0,7,22,0,10,1,8,6,24,9,6,28,25,32,26,26,0,27,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,420,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[76],[55,"SM_EnemyTank_02",[-2],[3,"e9sWoOVvNVwo0GrlOAB0il",-1,0]],[64,"SM_EnemyTank_02",1,[[62,-3,[1,"74zazU+fFZw4SmAIcDIvSl"],[0],[45],1]],[3,"cb7PsgIpBZC70RwMIQADHk",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[421,422]],[[[68,".bin",4261149351,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyTank_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"Waves"],[267,"Waves",[-3],[[674,true,-2,[1,"21VbBxpYJNpbJR7jg+4CQQ"]]],[3,"d9LIHxHFhFXIOgqeR/0ow3",-1,0]],[42,"Events",1,[-4],[3,"aeDMDpEKRLxapHGV63pFCG",1,0]],[65,"On Activate Spawn",2,[[614,0.5,5,-5,[1,"65DHiRGJ1IIrn14d2vmIXt"],[[8,"85ba8zO9clG9KMZhnWVluYT","activateSpawn",1]]]],[3,"a1K4nmK+hD/qbEZmL7gaHF",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,10,1,5],[],[],[]],[[[58,"SM_TowerElectroneerBody_01"],[55,"SM_TowerElectroneerBody_01",[-2],[3,"12sIxAd4xbv59W3ANKj2X7",-1,0]],[64,"SM_TowerElectroneerBody_01",1,[[62,-3,[1,"366PFgp3dcA6jQhh5OaNY0"],[0],[45],1]],[3,"bbsFprwHlZVKqGRbFGqwTW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,240]],[[[68,".bin",1590516929,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyRunner_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyRunner_03",[-2],[3,"e9aXVNzZtaRJscaZ3oH2lT",-1,0]],[64,"SM_EnemyRunner_03",1,[[62,-3,[1,"82KrnAfSpZG69ZHuCZgscH"],[0],[45],1]],[3,"c4b+YlD25S86pnrjGBd2Oa",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[423,424]],[[[58,"P-GunTower-Bullet-Tunneller"],[137,"P-GunTower-Bullet-Tunneller",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[76],[55,"SM_EnemyOvercharger_01",[-2],[3,"ebMyHo+DpajbSAeu+BC28S",-1,0]],[64,"SM_EnemyOvercharger_01",1,[[62,-3,[1,"59XJRz2Z9QB54rkS1H61b+"],[0],[45],1]],[3,"94ebrzFXlSs63g90ZtG/Tt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[425,426]],[[[68,".bin",1966016415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyOvercharger_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-OverCharger-0"],[152,"P-OverCharger-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"OverCharger-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"ebMyHo+DpajbSAeu+BC28S",-33,[81,"16tmuTjUhNO6sVQg4OtiUY",1,[[75,[2,["ebMyHo+DpajbSAeu+BC28S"]],[[57,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.141,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["59XJRz2Z9QB54rkS1H61b+"]],3],[5,["_lscale"],-31,[1,0.8,0.8,1]],[17,"SM_Model",["_name"],[2,["94ebrzFXlSs63g90ZtG/Tt"]]]]],2]],[2,["ebMyHo+DpajbSAeu+BC28S"]],[42,"Scripts",1,[3,-34,-35,-36],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[42,"VFX",2,[-37,-38,-39],[3,"6aJL29Os1LLJPFf8HuLRg0",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-47,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[11,"P-HP-Bar",["_name"],-40],[5,["_lpos"],-41,[1,207,448.00000000000006,0]],[5,["_lrot"],-42,[3,0,0,0,1]],[5,["_euler"],-43,[1,0,0,0]],[11,"Art",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-48],[3,"0a/97oueVKCpNI9/207GJz",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"8dAsSCRBRKPqj40HM+g9WM"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-49],[31,5]],[73,"VFX_Death_Shards",7,[-50],[3,"e0kJcVMNlO077/Hd8bjP6e",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"9cqGH7jy9KGrV1eKLRRTln"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-51],[31,7]],[73,"VFX_Spawn",7,[-52,-53],[3,"87XhpQ2Z9JYJxkgfe/X5sU",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",6,[-54],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",6,[[118,-56,[1,"79d4ilCalHwqSpDM/a6679"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"16k32pm/tIqJzFatObtvry",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"e9RMzE7PJD1ZBVfSlELjM3"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[119,0.3,false,14,[1,"63EjFHRGFNHLbzfXpFcDbu"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",6,[-60],[3,"eb1PUSJWBPb4REDU2QD/O4",1,0]],[145,23,[1,"5an7UNtuRD0798ta65rDEw"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,6,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,5,0,1,5,0,1,5,0,1,5,0,1,5,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,6,8,6,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,427,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[77,"SM_BlockDetail_04__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockDetail_04",[-2],[3,"d29whoas9ct6gAWpHxYcDc",-1,0]],[64,"SM_BlockDetail_04",1,[[62,-3,[1,"b4Cl6HSUJYAI6DNuXBqPYC"],[0],[45],1]],[3,"3bQhxUckdRfIVg4eKiX6e6",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[428,429]],[[[68,".bin",968456012,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14448,"length":5580,"count":1395,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14448,"count":301,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.34500908851623535,-0.37846487760543823,-1.6810679070999868e-8],"maxPosition",8,[1,0.4063314199447632,0.33203941583633423,0.3392953872680664]]],-1],0,0,[],[],[]],[[[58,"P-Tank-1"],[152,"P-Tank-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Tank-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"e9sWoOVvNVwo0GrlOAB0il",-32,[81,"f3RlqJaeZJlZl0cPiV4In5",1,[[75,[2,["e9sWoOVvNVwo0GrlOAB0il"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.161,0.091]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["74zazU+fFZw4SmAIcDIvSl"]],3],[17,"SM_Model",["_name"],[2,["cb7PsgIpBZC70RwMIQADHk"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["e9sWoOVvNVwo0GrlOAB0il"]],[42,"VFX",2,[-36,-37,-38],[3,"03YfoWPTZF26EKruJGqlOF",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"84MQLZccJPaZi1YLxii/1z",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"68bRp3MJNAtoC2TkdHq/qL"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"9dC8VBH2NJVqhz0qOJcZvR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"fawCxf0bxPBJsRGZB2YFyo"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[28,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"25X51qJNxDVZCWBQq0aAsO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"9b64QebVRL3Yncn1bST/1z"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"e5yN5jszRE67ezEh/Mhp5i",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"c9DFSxLqFPa6Avx3CbmU5h"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"f8L8FYRM5IQIJhZBGOaew4"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"f49xfTeY9IjY/nYOUawfpm",1,0]],[145,23,[1,"080faU4LdLeL+EWwp81mU+"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,430,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"P-LaserTower-Beam-Pulsar"],[55,"P-LaserTower-Beam-Pulsar",[-2,-3,-4],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[527,"VFX_Pulse",1,[-6,-7],[-5],[3,"5dwkJQqGtO9LuHvx1hUNRw",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[65,"Temp",1,[[675,-8,[1,"6bE16mDyVM2rbu8cMQ5OnY"],[4,0.08],[6]]],[3,"b5twpQgB9KKoMf5U6SpAil",1,0]],[417,"Cylinder",false,1,[[95,"Cylinder<ModelComponent>",-9,[1,"54MsEcZCFMYZnJEGaPxSCn"],[0],[45],1]],[3,"34rpI92rdHE7Ew7Z4q5ZvA",1,0],[1,0,-0.23,0],[1,2,0.2,2]],[290,"VFX_PulseSmall",2,[-10],[3,"2cpk1AGBlL7IiDIQbPQc6b",1,0],[1,0,0,-0.762]],[432,2,true,5,[1,"34INvH7RpMa5z3S07jaEa5"],[[2,null],6,0],[6],[4,1.2],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[196,1.5,10],[0],[25,true,[20,1,[39,[[106,[4,4294952941]],[18,0.2299107142857143,[4,4294923007]],[18,0.8727678571428571,[4,4283635741]]],[[44,255],[12,158,0.3169642857142857],[12,110,0.6941964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0,1],[[52,2,1.091358024691358,1,1.091358024691358,1],[40,2,1,1.0942760942760934,1,1.0942760942760934,1]]]],[0],[0],[0]],[133,true,[0],[0],[36,1,[10,[0.005128205128205128,1],[[231,2,1.9259259259259258,1.9259259259259258],[13,2,1]]]],[4,0.15]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-11],[292,2,3]],[56,"VFX_Edge",2,[-12],[3,"bbyvAIxDJJfIkEJTLXLhOa",1,0]],[541,true,5,7,[1,"74SiaoVhRNAYoVY90NW+vk"],[[4,null],6,0],[66,[4,2013265919]],[4,2.5],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,0.6],[0],[25,true,[20,1,[39,[[136],[51,0.10714285714285715],[18,0.22544642857142858,[4,4292557026]],[18,1,[4,4283636514]]],[[44,0],[12,255,0.1830357142857143],[12,255,0.7321428571428571],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0,1],[[40,2,0.44074074074074077,0.14739229024943287,1,0.14739229024943287,1],[40,2,0.5333333333333333,0.13978494623655865,1,0.13978494623655865,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-13],[292,2,5]],[432,3,true,2,[1,"a6a9w6/j9GZ6fVirAQhXU8"],[[6,null],6,0],[6],[4,1.2],[0],[0],[0],[0],[0],[0],[0],[4,2],[0],[196,2.2,10],[0],[25,true,[20,1,[39,[[51,0.024553571428571428],[18,0.13839285714285712,[4,4294957173]],[18,0.5825892857142857,[4,4287568667]],[18,1,[4,4280225287]]],[[12,0,0.09151785714285714],[12,255,0.25],[12,255,0.6004464285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,2,[10,[0.07692307692307693,0.2205128205128205,0.46153846153846156,1],[[40,2,0.25925925925925924,7.864197530864196,1,7.864197530864196,1],[7,2,0.7518518518518519,1.1851851851851842,1.1851851851851842],[7,2,0.9333333333333333,0.30232558139534876,0.30232558139534876],[40,2,1,0.05252525252525258,1,0.05252525252525258,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-14],[292,2,7]]],0,[0,3,1,0,-1,3,0,-2,4,0,-3,2,0,-1,9,0,-1,5,0,-2,7,0,0,3,0,0,4,0,-1,6,0,7,6,0,-1,8,0,7,8,0,7,9,0,10,1,14],[0,0,0,0,0,0,0,0],[-1,12,-1,8,-1,8,-1,8],[431,432,114,68,433,245,434,68]],[[[58,"P-TheGang4"],[152,"P-TheGang4",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"TheGang4",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35],[3,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[188,"Art",1,[-37,-38,-39,2],[[88,true,-36,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-40],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"77rOjdJ21R1KKIOlYM4BQr",-49,[81,"b0zVPKtXNDBqBPhFVjhVsT",1,[[75,[2,["77rOjdJ21R1KKIOlYM4BQr"]],[[57,-48,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-41],[5,["_lpos"],-42,[1,0,0,0]],[5,["_lrot"],-43,[3,0,0,0,1]],[5,["_euler"],-44,[1,0,0,0]],[5,["_lscale"],-45,[1,0.6,0.6,0.6]],[35,["_materials","0"],[2,["407oAt4+lSGbdC+vtR9xCJ"]],3],[11,"SM_Model",["_name"],-46],[5,["_lscale"],-47,[1,0.4,0.4,0.4]]]],2]],[2,["77rOjdJ21R1KKIOlYM4BQr"]],[42,"Scripts",1,[4,-50,-51,-52],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-60,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-59]]]],[[11,"P-HP-Bar",["_name"],-53],[5,["_lpos"],-54,[1,207,448.00000000000006,0]],[5,["_lrot"],-55,[3,0,0,0,1]],[5,["_euler"],-56,[1,0,0,0]],[11,"Art",["_name"],-57],[5,["_lpos"],-58,[1,0,0,0]]]],39]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",2,[-61],[3,"08xCVrxlxEhq50E/NF55eY",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"85Rhrv4bxC9Idj1S+Tsdep"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-62],[31,5]],[73,"VFX_Death_Shards",2,[-63],[3,"01JvLqmMhDBa4s8CIc/iMl",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"6c2cTofuBCBZlCca6zWUXz"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[28,[0],[0]],[24,[0],[0],[6],[6],-64],[31,7]],[73,"VFX_Spawn",2,[-65,-66],[3,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",7,[-67],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-68],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],1],[65,"On Death VFX Finished",7,[[118,-69,[1,"67W+7l9PZAA4LQkNbOeiI6"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"54py1+24lEvosm8pG/dm8g",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-70,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["41Jrlqi2tdbKkcy+f7Uc1y"]],[120,0.3,false,14,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-71],[31,9]],[119,0.3,false,14,[1,"36ejVK11FPAJNrDXjhhqb6"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-72],[31,11]],[56,"VFX-BossExplosion",2,[-73],[3,"ddcECp4JFHe53/8TLBRxK3",1,0]],[86,0.2,false,false,23,[1,"d9z3gatXtOcZyimR+Jo54r"],[[12,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-74],[31,13]],[109,"VFX-Flash",2,[-75],[3,"e0e9uVuRVNhaC3ktlFbCWK",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,25,[1,"cfwaJcyxtIUJj+ZODhd7cm"],[[14,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-76],[31,15]],[109,"VFX_SprayOut",2,[-77],[3,"65A5CxwExJ8YQuFC00CIwv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,27,[1,"4cr3Uit81K7Y/kHA0MvtEm"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[121,1,0.1,17]],[56,"VFX_Explosion2",2,[-79],[3,"adofCUzVlEeq+DoNoiGlsG",1,0]],[86,1.5,false,false,29,[1,"d6LkeZTddKz4u3S/seI2h7"],[[18,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-80],[31,19]],[109,"VFX_SprayOut2",2,[-81],[3,"c6S+qSUChHEqyScK9FEnWx",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,31,[1,"82P/8snJlB75DBw8nThDwu"],[20],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-82],[121,1,0.1,21]],[109,"VFX-ScreenTone",2,[-83],[3,"8bSyKry0BJqI7vNEiNLu7J",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,33,[1,"96FB+4LntMCJV7ImPsehqK"],[[22,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-84],[31,23]],[56,"VFX-CircleIn",2,[-85],[3,"a6tmq5kplKd6n6pH69gYGL",1,0]],[86,0.4,false,false,35,[1,"37b91i5qFOeKLOQtk7s08k"],[[24,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-86],[31,25]],[56,"VFX-RingIn",2,[-87],[3,"02FAnYEQ5HMZ3wureji8Jm",1,0]],[86,0.4,false,false,37,[1,"d6z9B4IPhLApWgew36VT+y"],[[26,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-88],[31,27]],[109,"VFX_SprayIn",2,[-89],[3,"d94eS1vyBARomoFxzXUoPz",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,39,[1,"591PCZXZlNvLflLQoRvsOp"],[28],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-90],[121,1,0.5,29]],[109,"VFX-ChargeFlash",2,[-91],[3,"abOtSEGkVN976oricgz69X",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,41,[1,"0flPmNQfhLFLEoZAnZehF0"],[30],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-92],[31,31]],[109,"VFX-Sparkle",2,[-93],[3,"c8LTQ12WBGyKADstq6MD5L",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,43,[1,"e0CxGr9KFF/7wuB4QcQlSy"],[[32,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-94],[31,33]],[109,"VFX_LightRay",2,[-95],[3,"14SGr/8wFDfZNGC1Gfoi6J",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,45,[1,"31iUV3JxdCr4lKPY8+kRCF"],[34],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-96],[31,35]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",7,[-97],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,48,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,49,0,34,47,0,35,16,0,5,4,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,7,0,3,1,0,6,1,0,-4,50,0,-1,10,0,-2,12,0,-3,14,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,0,3,0,-1,18,0,-2,19,0,-3,5,0,-1,47,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,1,20,0,1,20,0,0,5,0,3,5,0,-2,15,0,-3,48,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,51,0,1,51,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,21,0,-2,22,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,21,0,7,22,0,-1,24,0,7,24,0,-1,26,0,7,26,0,-1,28,0,7,28,0,-1,30,0,7,30,0,-1,32,0,7,32,0,-1,34,0,7,34,0,-1,36,0,7,36,0,-1,38,0,7,38,0,-1,40,0,7,40,0,-1,42,0,7,42,0,-1,44,0,7,44,0,-1,46,0,7,46,0,-1,49,0,10,1,2,6,3,4,6,7,8,6,50,97],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,142,1,27,26,16,25,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,8,24]],[[[68,".bin",1106816748,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5760,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28526073694229126,-0.3019552230834961,0.8038041591644287],"maxPosition",8,[1,0.3544756770133972,0.31409966945648193,1.1679835319519043]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Crystal_01",[-2],[3,"bb0RXNBHxTGI42/b2Cnubv",-1,0]],[64,"SM_Crystal_01",1,[[62,-3,[1,"ccVb+VfBxQMYPT+MwU2grc"],[0],[45],1]],[3,"aaRlFzdUNVLYxzzD2+ZOMc",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[435,436]],[[[77,"SM_Crystal_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-GunTower-Bullet-01HKO"],[137,"P-GunTower-Bullet-01HKO",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[77,"SM_BlockDetail_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockDetail_03",[-2],[3,"9baIPWPuBegYREJ2bd45GU",-1,0]],[64,"SM_BlockDetail_03",1,[[62,-3,[1,"3cp8QxXtBa7JpQCn73Ia+U"],[0],[45],1]],[3,"bb0uLNgSNZ+oZzArvhE75t",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[437,438]],[[[68,".bin",3285477527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11520,"length":3960,"count":990,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11520,"count":240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.41306981444358826,-0.38547763228416443,-0.09105845540761948],"maxPosition",8,[1,0.45361754298210144,0.24799129366874695,0.6792443990707397]]],-1],0,0,[],[],[]],[[[68,".bin",3089916683,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15504,"length":5244,"count":1311,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15504,"count":323,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49648356437683105,-0.48895084857940674,-0.08720430731773376],"maxPosition",8,[1,0.535842776298523,0.4381939470767975,0.5775967240333557]]],-1],0,0,[],[],[]],[[[76],[55,"SM_BlockDetail_02",[-2],[3,"adq/Yq1hVR5Kyey84ZN4kv",-1,0]],[64,"SM_BlockDetail_02",1,[[62,-3,[1,"49hPoZFQtfgKWF4Jpx8AbD"],[0],[45],1]],[3,"1cXE2MCStaZYiYVuLRQ0jX",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[439,440]],[[[77,"SM_BlockDetail_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerCometTBody_01",[-2],[3,"93NMATgvJXN5P2Z0Pbx6xd",-1,0]],[64,"SM_TowerCometTBody_01",1,[[62,-3,[1,"36LCcIeKVRp7Mac4l4WlzY"],[0],[45],1]],[3,"b1ynI0NRlTcr9Bc5g2lJQg",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[441,207]],[[[77,"SM_TowerCometTBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2256427891,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26496,"length":8040,"count":2010,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26496,"count":552,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23616410791873932,-0.32110682129859924,-3.000557580179475e-10],"maxPosition",8,[1,0.23616410791873932,0.23888812959194183,0.3526967465877533]]],-1],0,0,[],[],[]],[[[149,[[156,[114,[-14,-15,-16,-17,-18,-19],[[82,0,false,-5,-4,[[157,[104,"selected"]]]],[82,0,false,-7,-6,[[175,1,[104,"selected"]]]],[115,-9,-8],[214,0,-11,-10,[[157,[104,"selected"]]]],[214,0,-13,-12,[[175,1,[104,"selected"]]]]],-3,-2,-1]]],[{},"selected",4,[176,1,false]]],[63,"Tab_NotSelected",[72,0]],[63,"Tab_Selected",[72,1]],[250,"Empty"],[61,"Entry"],[61,"Exit"],[61,"Any"]],0,[0,29,6,0,30,5,0,31,4,0,14,2,0,15,1,0,14,1,0,15,2,0,14,3,0,15,4,0,14,2,0,15,3,0,14,1,0,15,3,0,-1,4,0,-2,5,0,-3,6,0,-4,1,0,-5,2,0,-6,3,19],[0,0],[18,18],[129,128]],[[[58,"SM_Tower01HKOBody_01"],[227,"SM_Tower01HKOBody_01",[-2],[3,"754aHt1OpZU5MrqxM/Ip4m",-1,0],[1,2000,0,0]],[64,"SM_Tower01HKOBody_01",1,[[62,-3,[1,"46S3F1J79Rz4XvfNv5iTfa"],[0],[45],1]],[3,"394Llq4YJQGJQtg3lCaMlI",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,246]],[[[58,"SM_TowerStarfallBody_01"],[55,"SM_TowerStarfallBody_01",[-2],[3,"33sM9enERVxYZcocgwSPwR",-1,0]],[64,"SM_TowerStarfallBody_01",1,[[62,-3,[1,"c2i6M6mIdSAJVEUjqztCnG"],[0],[45],1]],[3,"6cUxh5uoJYzKl3tC1g7j0i",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,247]],[[[58,"02-CubeTower-Block"],[137,"02-CubeTower-Block",2,[-17,-18,-19,-20],[[676,-16,[1,"58d5nhIZBAcZJt6y7N+uUY"]]],[105,"31e3JrBwhGvJvEf/zRkO9C",-15,0,[[575,["target"],[677,[1,"64iHIuv9hMgIyoXGxdrVC1"],[1,0,0.2,0]],[2,["f9aoEaXvFc3pfuS37vcrqA"]]],[259,["target"],-8,[2,["f9aoEaXvFc3pfuS37vcrqA"]]],[259,["_onDamage","0","target"],-9,[2,["f9aoEaXvFc3pfuS37vcrqA"]]],[259,["onComplete","0","target"],-10,[2,["f9aoEaXvFc3pfuS37vcrqA"]]],[259,["_onStart","0","target"],-11,[2,["f9aoEaXvFc3pfuS37vcrqA"]]],[259,["target"],-12,[2,["91AFEBuQdbjYsrr3G6hB8y"]]],[259,["onComplete","0","target"],-13,[2,["91AFEBuQdbjYsrr3G6hB8y"]]],[259,["_onStart","1","target"],-14,[2,["91AFEBuQdbjYsrr3G6hB8y"]]]],[-1,-2,-3,-4,-5,-6,-7]]],[426,"Art",1,[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34],[[-21,[107,-23,[1,"6ejM593ONDLLsDs12HNY9q"],-22],[450,-24,[1,"59T5wofZdHf7NwQJxE9w15"],[24,25]]],1,4,4],[3,"90hZDH/U9H4KINJuNv7pI+",1,0]],[528,"VFX-Freeze-In",[-37,-38,-39,-40,-41,-42],[-35,-36],[3,"62+JMK07hK8ZWF2C2KskDE",1,0],[1,0,1.721,0]],[491,"Cube",[[95,"Cube<ModelComponent>",-43,[1,"37Q+z7wANKMYNVcLTM4VIJ"],[0],[45],1],[680,5,true,-46,[1,"aczLH8SQxPHL8HRGAM3Qqt"],-45,[[8,"925cc7HsYRKfKoUI6HIv/Em","play",-44]],[1,0,360,0]],[678,-48,[1,"64iHIuv9hMgIyoXGxdrVC1"],-47,[1,0,0.2,0]],[557,null,0.3,-49,[1,"d7TL/rrIJOJrskJ6zwj+BX"],[1,1,1,1],[1,0,0,0]]],[3,"c112Aezs5PVrXvslw8FjxL",1,0],[1,0,1,0],[1,0.6,0.6,0.6]],[371,"Scripts",1,[[-50,-51,[98,"Tweens",-52,[3,"4ecxDjgCJKEorG8jwYClAR",1,0]],-53,-54,-55],1,1,4,1,1,1],[3,"feGU5CoehHWqbEHG9TEcu5",1,0]],[2,["38TprYPCRWppYLEJoooZq3"]],[290,"VFX_CubeTowerHitSlashA",2,[-56],[3,"f7cu/3NYFAh5bRDz0PWj4V",1,0],[1,0,1.632,0]],[290,"VFX_CubeTowerHitSlashB",2,[-57],[3,"4bCTfDbfBHWaLTrahQ4uwM",1,0],[1,0,1.632,0]],[290,"VFX_CubeTowerHitMotes",2,[-58],[3,"bfG9YROi9M/5JGZaJuPUlB",1,0],[1,0,1.632,0]],[290,"VFX_CubeTowerHitFlash",2,[-59],[3,"6aV1F5LTFPmofXVW7fM9ZQ",1,0],[1,0,1.632,0]],[529,"VFX-Freeze-Out",2,[-61,-62],[-60],[3,"bfBuXTXsRHAI4OROHIW0gR",1,0],[1,0,1.721,0]],[416,"TEMP-Model",false,2,[4],[[95,"Cube<ModelComponent>",-63,[1,"8cycEUsRtG27/Lisehtj8j"],[2],[45],3],[57,-64,[1,"321xTfs/JOdYNfymQAhi3j"]]],[3,"bf5uh9CNtNJ49UX09o+cf8",1,0]],[2,["2ftx87dFpbdKiqdLuVoOoe"]],[2,["08DnfqaRBUD5xquxkMkyx7"]],[2,["bf/rqmxy1RI6d5s9dt63bw"]],[42,"Path",2,[-65,-66,-67],[3,"6adClE7bNKmr2tA1kIUgaY",1,0]],[2,["38TprYPCRWppYLEJoooZq3"]],[2,["fefPIkSBJemp8PPyjHLGkW"]],[2,["e9QGVwjwRRNYH2wTOhd0ZX"]],[42,"Events",1,[-68,-69,-70],[3,"375TkXESBFx43QESBtG7+v",1,0]],[109,"VFX-MotesLinger",3,[-71],[3,"83JxMy5aZPbKfnzYaDI7Ju",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[30,0,null,2,[22,"38TprYPCRWppYLEJoooZq3",-72,[49,"7b1X42VmxK17p1BL8g3gzd",1,[[11,"SM_BlockPath_01",["_name"],6],[5,["_lpos"],6,[1,0,0,0]],[5,["_lrot"],6,[3,0,0,0,1]],[5,["_euler"],6,[1,0,0,0]],[35,["_materials","0"],[2,["c6ETENbq5XL5UBZI2bIgRH"]],5],[11,false,["_active"],6]]],4]],[30,0,null,2,[22,"2ftx87dFpbdKiqdLuVoOoe",-73,[49,"30n37VJ+dJ3JQ+t6hfsRGl",1,[[11,"SM_TowerCubeBase_01",["_name"],13],[5,["_lpos"],13,[1,0,0.237,0]],[5,["_lrot"],13,[3,0,0,0,1]],[5,["_euler"],13,[1,0,0,0]],[35,["_materials","0"],[2,["dbdV3sdgFULJOrqOS2M8DG"]],7]]],6]],[30,0,null,2,[22,"08DnfqaRBUD5xquxkMkyx7",-74,[49,"6bE2WPtlFLgrC2mLU3h0BN",1,[[11,"SM_TowerCubeBody_01",["_name"],14],[5,["_lpos"],14,[1,0,0.734,0]],[5,["_lrot"],14,[3,0,0,0,1]],[5,["_euler"],14,[1,0,0,0]],[35,["_materials","0"],[2,["27TVOX0m1aSIANyTsuWfnj"]],9]]],8]],[30,0,null,2,[22,"bf/rqmxy1RI6d5s9dt63bw",-75,[49,"f29IGT7LRDpLu2pWTLPXQt",1,[[11,"SM_TowerCubeSlime_01",["_name"],15],[5,["_lpos"],15,[1,0,1.5,0]],[5,["_lrot"],15,[3,0,0,0,1]],[5,["_euler"],15,[1,0,0,0]],[35,["_materials","0"],[2,["c1FqYGy+FXzrIyDY9Dcjtd"]],11]]],10]],[42,"1",16,[-76],[3,"f44Ku50VpAIr/bLYTwYgU/",1,0]],[30,0,null,26,[22,"38TprYPCRWppYLEJoooZq3",-77,[49,"20jblIKvNDC5IH9Pw+0HB2",1,[[11,"SM_BlockPath_01",["_name"],17],[5,["_lpos"],17,[1,0,0,0]],[5,["_lrot"],17,[3,0,0,0,1]],[5,["_euler"],17,[1,0,0,0]],[35,["_materials","0"],[2,["c6ETENbq5XL5UBZI2bIgRH"]],19]]],18]],[99,"2",false,16,[-78],[3,"2a930KtRdBFKRGVvePRmZB",1,0]],[30,0,null,28,[22,"fefPIkSBJemp8PPyjHLGkW",-79,[49,"75evY1vxJE0LBjhPb9Ye6j",1,[[11,"SM_BlockPath_02",["_name"],18],[5,["_lpos"],18,[1,0,0,0]],[5,["_lrot"],18,[3,0,0,0,1]],[5,["_euler"],18,[1,0,0,0]],[35,["_materials","0"],[2,["c2E9Ka2cRe7YGAxkqvC+yR"]],21]]],20]],[99,"3",false,16,[-80],[3,"3fhUa9faVAw6beDr2QOprv",1,0]],[30,0,null,30,[22,"e9QGVwjwRRNYH2wTOhd0ZX",-81,[49,"3dVf6nOm9E4ZcGOsSSg75p",1,[[11,"SM_BlockPath_03",["_name"],19],[5,["_lpos"],19,[1,0,0,0]],[5,["_lrot"],19,[3,0,0,0,1]],[5,["_euler"],19,[1,0,0,0]],[35,["_materials","0"],[2,["0fKTIDFQVVW7qzAtQnZb77"]],23]]],22]],[607,[1,"708tDXckFJgo3qZuwT/1Nm"],[[182,"925cc7HsYRKfKoUI6HIv/Em","play"],[182,"925cc7HsYRKfKoUI6HIv/Em","play"]]],[56,"CubeTowerHP",5,[-82],[3,"80AR++gxhAQYT0HkzYcbWR",1,0]],[65,"Camera Shake Event Raiser",5,[[296,"CameraShake_ShakeCamera",-83,[1,"2cq2FiHbBANJNvCSubuWnn"]]],[3,"d0JbRPSoFHh78SGfwL/eEZ",1,0]],[141,"Damage SFX",[[139,"sfx-cubetower-damaged",-84,[1,"582r7cwztIea3Ic0gWLOE9"]]],[3,"d59t4zicRAWJ+VDK1FoDiB",1,0]],[141,"HP Changed Raiser",[[477,1,-85,[1,"86HpTDg4tLGp+LLaksA97T"]]],[3,"5aKisjCMJMa5qtxOysbcwC",1,0]],[42,"Cube Tower HP Events",20,[-86,36],[3,"fdc1PD/c5FrrMlCJi4pupR",1,0]],[42,"Rewarded Ads Freeze",20,[-87,-88],[3,"eamFJ64iFF1pBxbGImX9Mp",1,0]],[144,"VFX",2,1,[3,11],[3,"e08szlCE5LWYDHxsKEd2SN",1,0]],[79,"VFX-MotesLinger",2,11,[-89],[3,"39CZtFe7VOipCL5wQqD7ik",1,0],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[113,"VFX-BlastBack",2,11,[-90],[3,"f7yej9+9xHnI/mTMZvIwDx",1,0]],[109,"VFX-MotesBurst",3,[-91],[3,"73nMU6JyhDMrB5p9+IWkLG",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[189,"VFX-Sparkle",3,[-92],[3,"f0k60rXo1LAJ75a0aSRLCi",1,0],[1,0,2.206,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[109,"VFX-Flash",3,[-93],[3,"e04Jx9TXxPZLIfNslSPyyO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[109,"VFX-GravityShards",3,[-94],[3,"91nNxNghBM15fCGQ20lMFw",1,0],[3,1,0,0,2.220446049250313e-16],[1,179.99999999999997,0,0]],[113,"VFX-BlastLarge",2,3,[-95],[3,"c4kven+UtDm4ii+IvBJRj8",1,0]],[65,"Set Initial HP Raiser",37,[[477,2,-96,[1,"3eB4GSo+lEC6yK1AeQjnst"]]],[3,"47bC+1oRBP7L2Zbqw2AWBi",1,0]],[433,true,0.2,false,false,4,0.4259259259259258,1,7,[1,"13qeHeZOlEzISoPQooC+Rd"],[[12,null],6,0],[6],[4,2],[4,1],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.16741071428571427,[4,4288059135]],[18,0.29017857142857134,[4,4279635199]],[18,0.8191964285714286,[4,4278912065]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-97],[31,13]],[433,true,0.2,false,false,4,0.4259259259259258,1,8,[1,"64rPK7S4VJtqi14NoO163Q"],[[14,null],6,0],[6],[4,1.5],[4,0.75],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.02],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.16741071428571427,[4,26646271]],[18,0.29017857142857134,[4,18222335]],[18,0.8191964285714286,[4,17499201]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-98],[31,15]],[542,false,false,9,[1,"9fETWFCgdDVbPVi/TEZjGj"],[6],[27,3,0.05,0.1],[0],[0],[4,7],[0],[0],[54,3,6.283185307179586],[0],[4,0.4],[0],[0],[0],[[29,[27,3,8,12]]],[25,true,[20,1,[160,[[136],[18,0.4620535714285714,[4,4279045595]],[18,1,[4,4281993294]]]]]],[551,true,3,0.4,[0]],[38,true,[36,1,[10,[0.5025641025641026,1],[[116,1,-1,1,-1,1],[143,-2.0103092783505154,1,-2.0103092783505154,1]]]],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.4025641025641026,0.8076923076923077],[[13,2,1],[7,2,0.15555555555555556,-0.5349794238683129,-0.5349794238683129],[7,2,0.014814814814814815,-0.0931899641577061,-0.0931899641577061]]]]],[19,[0],[0],[0]],[374,0.5,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-99],[131]],[543,0.15,false,false,4,0.4259259259259258,1,10,[1,"1b+UhHvGVApYvpzFzwByaB"],[[16,null],6,0],[6],[4,2],[4,1],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.02],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.16741071428571427],[18,0.29017857142857134,[4,4279635199]],[18,0.8191964285714286,[4,4278912065]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-100],[31,17]],[100,2,[1,"59T5wofZdHf7NwQJxE9w15"]],[56,"On Start",5,[32],[3,"a00ImiRlVA+JLbQ+5m/f/M",1,0]],[681,[6,8,10,12,16,20],33,[1,"67hTKa+rZNzLEm7wGCJOp8"],[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",34],[8,"ac879rTendCEbpZWFz/jexs","playSFX",35],[8,"cc.ParticleSystem","play",7],[8,"cc.ParticleSystem","play",8],[8,"cc.ParticleSystem","play",9],[8,"cc.ParticleSystem","play",10]],[[182,"12ea43w32ZDAL2+IVCNZlsZ","play"]],[[8,"31cdcvhPtdJNZjVbuOE4DwI","raise",36]],[[8,"31cdcvhPtdJNZjVbuOE4DwI","raise",47]]],[42,"Audio",5,[35],[3,"6abMWIfGNOIqS0YnAF7i4R",1,0]],[65,"On Enemy Reach Cube Tower Listener",20,[[682,2,-101,[1,"2eU05bl+RHV6TJJWH3hyhd"],[[8,"b091d/zYThK/q6JkfRYKBAK","enemyReachedCubeTower",33],[8,"cc.ParticleSystem","stop",7],[8,"cc.ParticleSystem","stop",8],[8,"cc.ParticleSystem","stop",9],[8,"cc.ParticleSystem","stop",10],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","IsHit",2],[8,"cc.ParticleSystem","play",7],[8,"cc.ParticleSystem","play",8],[8,"cc.ParticleSystem","play",9],[8,"cc.ParticleSystem","play",10]]]],[3,"e9V4uEbXNITLunxFLjwfJc",1,0]],[65,"On Freeze Special Start",38,[[352,"FreezeEnemiesStart",-102,[1,"efngow2GVP2b6td8OH1snI"],[[8,"cc.ParticleSystem","play",3],[8,"cc.ParticleSystem","play",42],[8,"cc.ParticleSystem","play",21],[8,"cc.ParticleSystem","play",43],[8,"cc.ParticleSystem","play",44],[8,"cc.ParticleSystem","play",45],[8,"cc.ParticleSystem","play",46]]]],[3,"2f2eIhkKVMhrFstdWl/fzg",1,0]],[544,false,false,8.591356427278768,7.50554052941051,7.351178458984254,40,[1,"0anilpmQNLeZJLvEamq5Co"],[[26,null],6,0],[6],[27,3,0.1,0.2],[0],[0],[4,-30],[0],[0],[0],[0],[4,0.5],[0],[0],[0],[[29,[4,50]]],[25,true,[337,3,[50,[[44,0],[12,255,0.36607142857142855],[12,255,0.8772321428571429],[12,0,1]]],[50,[[44,0],[12,255,0.3928571428571429],[12,0,1]]]]],[552,true,3,true,0.6,0.4,[4,1],[1,10,10,10]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.6615384615384615,0.7974358974358975,0.9282051282051282,1],[[7,2,0.022222222222222223,0.04377104377104377,0.04377104377104377],[7,2,0.06666666666666667,0.3611111111111108,0.3611111111111108],[7,2,0.9703703703703703,0.825396825396824,0.825396825396824],[7,2,0.9111111111111111,-3.1984126984127,-3.1984126984127],[13,2,-0.014814814814814815]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-103],[121,1,0.03,27]],[195,false,false,41,[1,"69ySQNvPZJaqpd/SclbCaZ"],[[28,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.6],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.08928571428571429,[4,33554431]],[18,0.7745535714285714,[4,30386519]],[18,0.9308035714285714,[4,21040652]]],[[12,255,0.1049107142857143],[12,255,0.20535714285714282],[12,0,1]]]]],[37,[0]],[38,true,[15,1,10,[10,[0,0.35128205128205126,0.7205128205128205],[[40,2,1,-0.4158249158249161,1,-0.4158249158249161,1],[7,2,0.6666666666666667,-1.193236714975846,-1.193236714975846],[52,2,-2.4675925925925926,1,-2.4675925925925926,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-104],[31,29]],[195,false,false,11,[1,"0950u4ZwFG0bSkiwwZp4Qm"],[[30,null],6,0],[66,[4,2097151999]],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,4294950422]]],[[44,0],[12,49,0.43303571428571425],[12,45,0.7232142857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,25,[10,[0,0.3717948717948718,0.5871794871794872,1],[[40,2,0.9962962962962962,0.028888888888889713,1,0.028888888888889713,1],[7,2,0.674074074074074,-2.8201058201058196,-2.8201058201058196],[7,2,0.13333333333333333,-0.9750000000000003,-0.9750000000000003],[52,2,-0.12293144208037823,1,-0.12293144208037823,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-105],[31,31]],[335,false,false,42,[1,"50NBvYlDNA3rgjD1qmkOwQ"],[32],[6],[27,3,0.05,0.1],[0],[0],[27,3,2,15],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,40]]],[25,true,[20,1,[50,[[44,255],[12,255,0.7745535714285714],[12,0,1]]]]],[553,true,2,1,1.3962634015954636,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.18],[[7,2,1,-10.505050505050505,-10.505050505050505],[13,2,0.01]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-106],[121,1,0.15,33]],[548,false,21,[1,"10cxGGmzdPJYQy7tTFcUjz"],[34],[6],[27,3,0.1,0.2],[0],[0],[4,0.05],[0],[0],[0],[4,0.4],[4,3],[0],[4,15],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.45089285714285715],[12,0,1]]]]],[554,true,0,true,1,1,[4,1],[1,10,10,10]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-107],[31,35]],[217,6,false,false,43,[1,"74Bo8WtGNNdKd5vBxAzYcU"],[[36,null],6,0],[66,[4,2063597567]],[27,3,0.1,0.5],[0],[0],[4,0.1],[0],[0],[0],[4,0.15],[27,3,0.15,0.25],[0],[15,1,20,[10,[0,0.6666666666666666,1],[[13,2,1],[7,2,0.7185185185185186,-1.1876543209876542,-1.1876543209876542],[7,2,0.08148148148148149,-2.143369175627239,-2.143369175627239]]]],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[555,true,0,2,[4,1],[1,10,10,3]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-108],[31,37]],[335,false,false,44,[1,"5d1YR7IohHMaJUQuiEZRTF"],[38],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-109],[31,39]],[335,false,false,45,[1,"acjIFDvWVA1KP4fDzK1fTD"],[40],[6],[27,3,0.2,0.5],[0],[0],[27,3,2,3],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,1],[4,0.8],[0],[0],[[29,[4,5]],[338,0.1,[4,4]]],[25,true,[20,1,[50,[[44,255],[12,255,0.5401785714285714],[12,0,1]]]]],[132,true,0,0.5,1,1.0471975511965976,[4,1],[1,-90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-3.490658503988659,3.490658503988659]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-110],[31,41]],[195,false,false,46,[1,"0d2PrRIU9Aa7Iy8Ju2Ucdp"],[[42,null],6,0],[66,[4,2097151999]],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,4294950422]]],[[12,49,0.1852678571428571],[12,45,0.5089285714285714],[12,0,1]]]]],[37,[0]],[38,true,[15,1,25,[10,[0,0.20512820512820512,1],[[52,2,9.569444444444445,1,9.569444444444445,1],[7,2,0.9037037037037037,0.19825708061002204,0.19825708061002204],[40,2,1,0.08333333333333359,1,0.08333333333333359,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-111],[31,43]],[195,false,false,3,[1,"69ySQNvPZJaqpd/SclbCaZ"],[[44,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.6],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08928571428571429],[18,0.7745535714285714,[4,4291799383]],[18,0.9308035714285714,[4,4282453516]]],[[12,255,0.1049107142857143],[12,255,0.20535714285714282],[12,0,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,0.5974358974358974,1],[[52,2,4.7185185185185174,1,4.7185185185185174,1],[7,2,0.9888888888888889,0.08176100628930794,0.08176100628930794],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-112],[31,45]],[545,false,3,[1,"93c85Bp6VPo4eEk9hma96z"],[[46,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.4],[0],[0],[0],[[338,0.07,[4,1]]],[25,true,[20,1,[39,[[51,0.08928571428571429],[18,0.7745535714285714,[4,4291799383]],[18,0.9308035714285714,[4,4282453516]]],[[44,0],[12,255,0.1049107142857143],[12,255,0.35491071428571425],[12,0,1]]]]],[37,[0]],[38,true,[15,1,5,[10,[0,0.36923076923076925,1],[[40,2,0.1962962962962963,6.303030303030303,1,6.303030303030303,1],[7,2,0.9777777777777779,0.08176100628930791,0.08176100628930791],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[4,3.490658503988659]],[28,[0],[0]],[24,[0],[0],[6],[6],-113],[31,47]],[65,"On Freeze Special End",38,[[352,"FreezeEnemiesEnd",-114,[1,"d2OaMO8UhH45xjR2lykswK"],[[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",40],[8,"cc.ParticleSystem","stop",21],[8,"cc.ParticleSystem","play",41]]]],[3,"34p19Wb5dMorzI8w3tvqd3",1,0]],[65,"Theme Model Chooser",5,[[174,-115,[1,"c1TUefTzxIPrMSgt10gphd"],[26,28,30],48]],[3,"cafIJQLFZIiKGYvDQPvYpP",1,0]],[476,8,true,[1,"aczLH8SQxPHL8HRGAM3Qqt"],[[182,"925cc7HsYRKfKoUI6HIv/Em","play"]],[1,0,0,360]],[476,16,true,[1,"aczLH8SQxPHL8HRGAM3Qqt"],[[182,"925cc7HsYRKfKoUI6HIv/Em","play"]],[1,0,0,-360]]],0,[0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,27,0,-6,29,0,-7,31,0,13,71,0,13,54,0,13,71,0,13,32,0,13,72,0,13,72,0,13,32,0,3,1,0,0,1,0,-1,2,0,-2,5,0,-3,20,0,-4,39,0,-1,52,0,25,52,0,0,2,0,0,2,0,-1,12,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,16,0,-1,67,0,-2,68,0,-1,42,0,-2,21,0,-3,43,0,-4,44,0,-5,45,0,-6,46,0,0,4,0,5,4,0,5,4,0,0,4,0,5,4,0,0,4,0,0,4,0,-1,53,0,-2,33,0,6,5,0,-4,34,0,-5,55,0,-6,70,0,-1,48,0,-1,49,0,-1,50,0,-1,51,0,-1,60,0,-1,40,0,-2,41,0,0,12,0,0,12,0,-1,26,0,-2,28,0,-3,30,0,-1,56,0,-2,37,0,-3,38,0,-1,62,0,3,22,0,3,23,0,3,24,0,3,25,0,-1,27,0,3,27,0,-1,29,0,3,29,0,-1,31,0,3,31,0,-1,54,0,0,34,0,0,35,0,0,36,0,-1,47,0,-1,57,0,-2,69,0,-1,58,0,-1,59,0,-1,61,0,-1,63,0,-1,64,0,-1,65,0,-1,66,0,0,47,0,7,48,0,7,49,0,7,50,0,7,51,0,0,56,0,0,57,0,7,58,0,7,59,0,7,60,0,7,61,0,7,62,0,7,63,0,7,64,0,7,65,0,7,66,0,7,67,0,7,68,0,0,69,0,0,70,0,10,1,3,6,39,4,6,12,11,6,39,32,0,53,35,6,55,36,6,37,115],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52],[-1,12,-1,12,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,4,9,4,9,4,9,-1,-2,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,39,24],[442,40,443,40,111,1,444,1,445,1,446,1,72,63,72,63,7,5,111,1,133,17,134,17,221,222,10,9,144,119,248,5,10,9,10,9,35,33,10,9,36,34,248,5,144,119,144,119,31,447]],[[{"name":"UI_LifeCube Details","rect":{"x":7,"y":7,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":34,"height":34},"rotated":false,"capInsets":[13,13,7,7],"packable":true}],[2],0,[0],[33],[448]],[[[58,"SM_TowerBullziBody_01"],[227,"SM_TowerBullziBody_01",[-2],[3,"6bEJXm3ENa5ZOriZO+0Lz9",-1,0],[1,2000,0,0]],[64,"SM_TowerBullziBody_01",1,[[62,-3,[1,"853BuGPRRQ2oL14CCvM0kL"],[0],[45],1]],[3,"e2BArGLdFbrorm0OZN+vwY",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,230]],[[[58,"SM_Tower0MG4Body_01"],[227,"SM_Tower0MG4Body_01",[-2],[3,"06VFwTsJJRM4OSJg2XW4Q9",-1,0],[1,2000,0,0]],[64,"SM_Tower0MG4Body_01",1,[[62,-3,[1,"9bOQ2QYGtZs4WzqtGYB9n9"],[0],[45],1]],[3,"26PODSVIdRU55mar2WcIzo",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,249]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[56,32]],[[[77,"SM_TowerH311Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3601853256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":48624,"length":13128,"count":3282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":48624,"count":1013,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28420889377593994,-0.3207150399684906,-0.0066055720672011375],"maxPosition",8,[1,0.28420889377593994,0.2569875419139862,0.40154215693473816]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerH311Body_01",[-2],[3,"76kmy9MSZU7qIHreg7REJV",-1,0]],[64,"SM_TowerH311Body_01",1,[[62,-3,[1,"d5Ph66/6xbPK4Q72/PB8zz"],[0],[45],1]],[3,"baQ2X4AqJelaVJs15lbapQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[449,227]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[25,32]],[[[58,"LevelConstructor"],[141,"LevelConstructor",[[683,true,2,-2,[1,"3f3eKIpuFB765uPO2vgSSE"],[0,1,2,3,4],5,6]],[3,"6e1KAM02FA0aLvlHvC21gw",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,80,81],[450,451,452,453,454,455,456]],[[[76],[55,"SM_EndBlock_03",[-2],[3,"baVlE0TcVebKnvsHiGIVYd",-1,0]],[64,"SM_EndBlock_03",1,[[62,-3,[1,"70ayJ71XlU96/U8xl8cilw"],[0],[45],1]],[3,"4aIKWpIYBXXrkkUmmbhU+j",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[457,458]],[[[68,".bin",3769852236,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.249710351228714,-0.24971024692058563,-0.40000003576278687],"maxPosition",8,[1,0.24971038103103638,0.24971021711826324,0.8425394892692566]]],-1],0,0,[],[],[]],[[[77,"SM_EndBlock_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[149,[[156,[114,[-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30],[[82,0,false,-5,-4,[[91,"clickMenu"]]],[82,0,false,-7,-6,[[91,"clickPlay"]]],[82,0,false,-9,-8,[[91,"clickReplay"]]],[214,0,-11,-10,[[91,"victory"]]],[214,0,-13,-12,[[91,"defeat"]]],[115,-15,-14],[82,0,false,-17,-16,[[91,"toShop"]]],[82,0,false,-19,-18,[[91,"exitShop"]]]],-3,-2,-1]]],[{},"clickPlay",4,[101,2],"clickReplay",4,[101,2],"clickMenu",4,[101,2],"victory",4,[101,2],"defeat",4,[101,2],"toShop",4,[101,2],"exitShop",4,[101,2]]],[61,"Any"],[250,"Empty"],[61,"Entry"],[63,"Rewards_ToShop v2",[72,5]],[61,"Exit"],[63,"Rewards_Intro",[72,0]],[63,"Rewards_IntroDefeat",[72,1]],[63,"Rewards_ExitMenu",[72,2]],[63,"Rewards_ExitReplay",[72,3]],[63,"Rewards_ExitPlay",[72,4]],[63,"Rewards_ExitShop",[72,6]]],0,[0,29,1,0,30,5,0,31,3,0,14,8,0,15,1,0,14,10,0,15,1,0,14,9,0,15,1,0,14,6,0,15,2,0,14,7,0,15,2,0,14,2,0,15,3,0,14,4,0,15,1,0,14,11,0,15,4,0,-1,3,0,-2,5,0,-3,1,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,2,0,-10,4,0,-11,11,30],[0,0,0,0,0,0,0],[18,18,18,18,18,18,18],[181,183,459,460,182,184,124]],[[[58,"P-Syndicate"],[228,"P-Syndicate",[[-12,-13,[98,"Events",-15,[3,"d95EadoVJHU5W5txftTQiE",-14,0]],-16],1,1,4,1],[[-7,[57,-8,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-9,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-10,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-11,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[89,["_uiFillbar"],-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]],[67,["_uiFillbar"],-5,-4,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[3,"90jBanitFHibPF3jtQV8ng",1,0]],[304,"Art",1,[-34,-35,-36,2],[[[88,true,-30,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-31,[107,-33,[1,"ea2pe+KTdM+qjpdTLo7rqT"],-32]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-37,-38,-39,-40,-41],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-42],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-50,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-49]]]],[[11,"P-HP-Bar",["_name"],-43],[5,["_lpos"],-44,[1,207,448.00000000000006,0]],[5,["_lrot"],-45,[3,0,0,0,1]],[5,["_euler"],-46,[1,0,0,0]],[11,"Art",["_name"],-47],[5,["_lpos"],-48,[1,0,0,0]]]],36]],[30,0,null,3,[22,"2axzyI7CVcfZRup1kGtapw",-56,[81,"04f7DNNP5MRY95F4/mujU5",1,[[75,[2,["2axzyI7CVcfZRup1kGtapw"]],[[57,-55,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-51],[5,["_lpos"],-52,[1,0,0,0]],[5,["_lrot"],-53,[3,0,0,0,1]],[5,["_euler"],-54,[1,0,0,0]],[35,["_materials","0"],[2,["b6fnLcG+tQcbB2kGlXABH/"]],3],[17,"SM_Model",["_name"],[2,["6fTB9CmINSd6bm5DKa9NOW"]]]]],2]],[2,["2axzyI7CVcfZRup1kGtapw"]],[79,"VFX_SprayOut",512,2,[-57],[3,"e6CVGfL3JA+JaqGdCkt+f+",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[141,"Spawn Enemies",[[235,-59,[1,"6f+qVoBZtASr10AxRy966f"],-58]],[3,"60e3j3xxFEN6sxgrUDw45N",1,0]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-60,-61],[3,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[113,"VFX-BossExplosion",512,2,[-62],[3,"b5AdMuMwFAhYuH4grqv2c6",1,0]],[86,0.2,false,false,13,[1,"daEJ0d3tdFe4nu4UlSxTav"],[[8,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-63],[31,9]],[79,"VFX-Flash",512,2,[-64],[3,"d9Bq/7YalPjo1+vQefV++P",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,15,[1,"f4jPug8SJLjJPqpTXb7EUR"],[[10,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-65],[31,11]],[74,1,false,false,9,[1,"305ctJTvRCdL5upBB5chbY"],[12],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-66],[121,1,0.1,13]],[113,"VFX_Explosion2",512,2,[-67],[3,"2ehkLq94ZEHrpcSb7GIlcY",1,0]],[86,1.5,false,false,18,[1,"970lFOmnFFnIcWcE0w5X1M"],[[14,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-68],[31,15]],[79,"VFX_SprayOut2",512,2,[-69],[3,"afZOLQYLNEbYPwmE9QrjwZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,20,[1,"313gHG2nlKr4KvKrWBlJUl"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-70],[121,1,0.1,17]],[79,"VFX-ScreenTone",512,2,[-71],[3,"ce/r1fwIFGGbWh5eOkxfPV",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,22,[1,"a7Afh6es9D87c240AyyIdD"],[[18,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-72],[31,19]],[113,"VFX-CircleIn",512,2,[-73],[3,"1bRG4wtjhGZY9g+XDhEBFP",1,0]],[86,0.4,false,false,24,[1,"18jtz8YBtEHKCBQ8fOY4Jc"],[[20,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-74],[31,21]],[113,"VFX-RingIn",512,2,[-75],[3,"f0vxCVNUJC8oKSfWKFTFjH",1,0]],[86,0.4,false,false,26,[1,"473fYXyUtHq6UM6WJWz6AX"],[[22,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-76],[31,23]],[79,"VFX_SprayIn",512,2,[-77],[3,"06XBMJqKFGgaEawDdl2lbk",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,28,[1,"d6MT8T7rVDspoXd4NK+h53"],[24],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[121,1,0.5,25]],[79,"VFX-ChargeFlash",512,2,[-79],[3,"4cGhI6TuhB/Lb8XfytKWOC",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,30,[1,"76CY/053xFe4hBt8F5UHja"],[26],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-80],[31,27]],[79,"VFX-Sparkle",512,2,[-81],[3,"6d0LqgX3ZDdLYlGaggETsW",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,32,[1,"33wmev+7VHHqvhalm7l0ab"],[[28,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-82],[31,29]],[79,"VFX_LightRay",512,2,[-83],[3,"d7ejQQCrZNzIkpPkZ/RWr2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,34,[1,"29HJQiEEdCxbxPl0ZlS6ck"],[30],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-84],[31,31]],[56,"HP Controller",4,[-85],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,36,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-86],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"cc.ParticleSystem","play",15],[8,"cc.ParticleSystem","play",9],[8,"cc.ParticleSystem","play",9],[8,"cc.ParticleSystem","play",18],[8,"cc.ParticleSystem","play",20],[8,"cc.ParticleSystem","play",22],[8,"cc.ParticleSystem","play",24],[8,"cc.ParticleSystem","play",26],[8,"cc.ParticleSystem","play",28],[8,"cc.ParticleSystem","play",30],[8,"cc.ParticleSystem","play",32],[8,"cc.ParticleSystem","play",34],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",10]],1],[65,"On Death VFX Finished",4,[[118,-87,[1,"fe+CZItjxMyb9f2BHbTpon"],[14,16,17,19,21,23,25,27,29,31,33,35],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"b67GIBJUdN6qixP7x+E94e",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-88,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,12,[1,"84KU+um7hPNYOClMRjIMmi"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-89],[31,5]],[119,0.3,false,12,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-90],[31,7]],[100,3,[1,"1bJDh8y11OC66YrOHdxFCO"]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",4,[10],[3,"62R6RgLjhMRberQEA4kCzJ",1,0]],[264,"Syndicate",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",36],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",10]],37,44],[265,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[56,"Stun",4,[47],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[42,"UI",1,[6],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,7,0,-2,6,0,5,6,0,5,6,0,13,37,0,3,1,0,-1,46,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,49,0,-1,12,0,-2,13,0,-3,15,0,-4,9,0,-5,18,0,-6,20,0,-7,22,0,-8,24,0,-9,26,0,-10,28,0,-11,30,0,-12,32,0,-13,34,0,0,3,0,-2,43,0,25,43,0,0,3,0,-1,39,0,-2,40,0,-3,7,0,-1,5,0,-2,36,0,-3,48,0,-4,38,0,-5,45,0,-1,44,0,1,11,0,1,11,0,1,11,0,1,11,0,1,50,0,1,50,0,19,40,0,3,6,0,1,8,0,1,8,0,1,8,0,1,8,0,0,7,0,3,7,0,-1,17,0,41,46,0,0,10,0,-1,41,0,-2,42,0,-1,14,0,7,14,0,-1,16,0,7,16,0,7,17,0,-1,19,0,7,19,0,-1,21,0,7,21,0,-1,23,0,7,23,0,-1,25,0,7,25,0,-1,27,0,7,27,0,-1,29,0,7,29,0,-1,31,0,7,31,0,-1,33,0,7,33,0,-1,35,0,7,35,0,-1,37,0,5,38,0,0,38,0,0,39,0,7,41,0,7,42,0,10,1,2,6,3,6,6,49,10,6,45,46,32,47,47,0,48,90],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,145,1,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,66,8,24,73]],[[[58,"SM_TowerMeteorUBody_01"],[55,"SM_TowerMeteorUBody_01",[-2],[3,"6ba5eX4SReyqm+Vbwgfquh",-1,0]],[64,"SM_TowerMeteorUBody_01",1,[[62,-3,[1,"2aeozPTBpe75ML5ovX4gHo"],[0],[45],1]],[3,"951PfNhQddLokvIk63kqxu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,239]],[[[68,".bin",3873407985,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[77,"SM_BlockHigh_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockHigh_02",[-2],[3,"73iHBgzzVTcYYBmRlHhAuY",-1,0]],[64,"SM_BlockHigh_02",1,[[62,-3,[1,"a6Qiv9LN5Y0ok4uMtmSOe6"],[0],[45],1]],[3,"c3I7ToK0NTa66xLQFxEnev",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[461,462]],[[[58,"P-Gun-Tower"],[370,"P-Gun-Tower",32,[[-11,-12,[98,"Events",-14,[3,"ef4CiMUqFFBLxbigVGcbkS",-13,0]],-15,-16],1,1,4,1,1],[-10],[532,"c7FBgV+GNP8JXw9YieWPKB",[],-9,0,[-1,-2,-3,-4,-5,-6,-7,-8]]],[252,"Tower Gun Head Pivot",[-17,-18,-19,-20,-21,-22,-23,-24],[3,"95CaMLvgdP0Y7kF1XtNNYe",1,0],[1,0,0.30000001192092896,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[42,"Scripts",1,[-25,-26,-27,-28,-29,-30,-31,-32],[3,"395/jqomdNs4i+MZIAv9Bl",1,0]],[65,"Tower Attack",3,[[684,1,1.5,1,4,-39,[1,"85IMpye2dCJbYZCei/2DoT"],1,-38,-37,[-34,-35,-36],-33,28]],[3,"f40ywYz1xDCq70ENky8ahk",1,0]],[55,"Head Tower Gun",[2,-40],[3,"23qMfBgI5KhaWK7bqmOuca",1,0]],[254,"Gun Tower Model",[[5,-41,[98,"Temp Head 2",-42,[3,"b2JisrljVNLprLAj5XAYrs",1,0]],[98,"Temp Head 3",-43,[3,"8eWXrvALRJQ6h22lIYR5cC",1,0]]],1,1,4,4],[3,"78vTfIwKVC3raO7/7FZFL5",1,0]],[30,0,null,2,[22,"1bEwzooBRYiLITAV26DhPq",-48,[49,"71xxc/DbhD0rRu5h/PIdOT",1,[[11,"SM_TowerGunBody_01",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]],[5,["_lrot"],-46,[3,0,0,0,1]],[5,["_euler"],-47,[1,0,0,0]],[35,["_materials","0"],[2,["eee7bsTeFUS4J0Fkyz/23b"]],1]]],0]],[30,0,null,2,[22,"4d/LLVKgJfRaWh6CVtkvdN",-54,[49,"04rw3Sv7hAxqXQpK9ufFuC",1,[[11,"SM_Tower0MG2Body_01",["_name"],-49],[5,["_lpos"],-50,[1,0,0,0]],[5,["_lrot"],-51,[3,0,0,0,1]],[5,["_euler"],-52,[1,0,0,0]],[35,["_materials","0"],[2,["91rnZr2NlU+5mkmycELrbU"]],3],[11,false,["_active"],-53]]],2]],[2,["4d/LLVKgJfRaWh6CVtkvdN"]],[30,0,null,2,[22,"6bEJXm3ENa5ZOriZO+0Lz9",-60,[49,"a1/GH8p1BCb582GfDd6CUW",1,[[11,"SM_TowerBullziBody_01",["_name"],-55],[5,["_lpos"],-56,[1,0,0,0]],[5,["_lrot"],-57,[3,0,0,0,1]],[5,["_euler"],-58,[1,0,0,0]],[35,["_materials","0"],[2,["853BuGPRRQ2oL14CCvM0kL"]],5],[11,false,["_active"],-59]]],4]],[2,["6bEJXm3ENa5ZOriZO+0Lz9"]],[30,0,null,2,[22,"06VFwTsJJRM4OSJg2XW4Q9",-66,[49,"a8inBhb/xEVa49txIEipo9",1,[[11,"SM_Tower0MG4Body_01",["_name"],-61],[5,["_lpos"],-62,[1,0,0,0]],[5,["_lrot"],-63,[3,0,0,0,1]],[5,["_euler"],-64,[1,0,0,0]],[35,["_materials","0"],[2,["9bOQ2QYGtZs4WzqtGYB9n9"]],7],[11,false,["_active"],-65]]],6]],[2,["06VFwTsJJRM4OSJg2XW4Q9"]],[30,0,null,2,[22,"efp8IlO8deIZfWSlH1z7o0",-72,[49,"37C3qQMoZCnp8IHjSfkQgi",1,[[11,"SM_Tower3MGvBody_01",["_name"],-67],[5,["_lpos"],-68,[1,0,0,0]],[5,["_lrot"],-69,[3,0,0,0,1]],[5,["_euler"],-70,[1,0,0,0]],[35,["_materials","0"],[2,["49Ry8eFLhb25C1Q8wGk6C1"]],9],[11,false,["_active"],-71]]],8]],[2,["efp8IlO8deIZfWSlH1z7o0"]],[30,0,null,2,[22,"d2WuMenSdQdr89Jfpld4zw",-78,[49,"21v6MpRr9PiKyZSFSi56V3",1,[[11,"SM_TowerTunnelerBody_01",["_name"],-73],[5,["_lpos"],-74,[1,0,0,0]],[5,["_lrot"],-75,[3,0,0,0,1]],[5,["_euler"],-76,[1,0,0,0]],[35,["_materials","0"],[2,["9dDxbuCdVYVYsfEinJuqgr"]],11],[11,false,["_active"],-77]]],10]],[2,["d2WuMenSdQdr89Jfpld4zw"]],[30,0,null,2,[22,"754aHt1OpZU5MrqxM/Ip4m",-84,[49,"e03iMJEBdKb5MNmTaMCbd1",1,[[11,"SM_Tower01HKOBody_01",["_name"],-79],[5,["_lpos"],-80,[1,0,0,0]],[5,["_lrot"],-81,[3,0,0,0,1]],[5,["_euler"],-82,[1,0,0,0]],[35,["_materials","0"],[2,["46S3F1J79Rz4XvfNv5iTfa"]],13],[11,false,["_active"],-83]]],12]],[2,["754aHt1OpZU5MrqxM/Ip4m"]],[112,"Physics",32,1,[[-85,[402,4,-86,[1,"97e/OxmxpCU4rWbyCxoizi"]],[685,1.5,-88,[1,"77wdxGna1B7bf0InuKhifc"],-87]],1,4,4],[3,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[325,"Art",1,[6],[[210,-89,[1,"1cExk6cY1DqJFxzG81z79Q"],[26],27]],[3,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[2,["1bEwzooBRYiLITAV26DhPq"]],[519,"Bullet_Muzzle_Flash",512,[-90,-91],[3,"b9GONXlARCiIUvDvMdPHvS",1,0],[1,0,0.472,-0.32],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[516,"Shoot VFX",3,[[-92,[579,[null],-93,[1,"a88Ndd09RINaAOp8kwAraC"]]],1,4],[3,"fflr5KflJDBpUFihWmy7fH",1,0]],[408,"guntower",2,"guntower",0,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[193,"guntower","guntower-plus",4,"Level Up (4)",7],[193,"guntower-plus","0.mg-2",5,"0.MG-2 (5)",8],[193,"guntower-plus","bullz-i",5,"Bullz-i (5)",10],[193,"0.mg-2","0.mg-2-plus",6,"Level Up (6)",8],[193,"0.mg-2-plus","0.mg-4",8,"0.MG-4 (8)",12],[193,"0.mg-2-plus","3.mg-v",8,"3.MG-V (8)",14],[193,"0.mg-4","0.mg-4-plus",9,"Level Up (9)",12],[193,"3.mg-v","3.mg-v-plus",9,"Level Up (9)",14],[193,"bullz-i","bullz-i-plus",7,"Level Up (7)",10],[193,"bullz-i-plus","01.hko",8,"01.HKO (8)",18],[193,"bullz-i-plus","tunneller",8,"Tunneller (8)",16],[193,"01.hko","01.hko-plus",9,"Level Up (9)",18],[193,"tunneller","tunneller-plus",9,"Level Up (9)",16],[140,"-","guntower",-1,-1,"-",7]],[[8,"d99f8q9JitMHpjrz0o8jKu2","towerDestroyed",4]]],[42,"VFXs",5,[-94,-95],[3,"3dcqfgoEpJkJpSG4Rsr+t+",1,0]],[42,"Muzzles",27,[23,-96],[3,"0avaJ8IONPGIFZV6qcF5Mu",1,0]],[189,"Bullet_Muzzle-Square",28,[-97],[3,"41t1ushhRA0I36nkzy0hCi",1,0],[1,0,0.472,-0.32],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[324,"VFX_TowerUpgrade",27,[-98,-99],[3,"bb7OGdKoNI7o98RO+UeI9k",1,0],[1,0,0.554,0]],[243,false,[1,"16eTtTPcRDmJOGIJcRV5eD"],[[20,null],6,0],[66,[4,3668826087]],[27,3,0.03,0.08],[0],[0],[27,3,0.2,1.5],[0],[0],[54,3,1.5707963267948966],[0],[27,3,0.9,1.6],[0],[4,3],[0],[25,true,[337,3,[50,[[44,0],[12,255,0.04910714285714286],[12,0,1]]],[50,[[44,0],[12,255,0.06696428571428571],[12,0,1]]]]],[373,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-1.7453292519943295,1.7453292519943295]],[28,[0],[0]],[24,[0],[0],[6],[6],-100],[31,21]],[243,false,[1,"46QAUjonNOLJaQmvk0pLqe"],[[22,null],6,0],[336,2,[4,2285688290],[4,2318556644]],[27,3,2,3],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,2],[0],[25,true,[20,1,[50,[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.41794871794871796,1],[[7,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[7,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-101],[31,23]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-102,[49,"24UEq9OedLSZNel7quMmk8",1,[[11,"SM_TowerBase_01",["_name"],24],[5,["_lpos"],24,[1,0,0,0]],[5,["_lrot"],24,[3,0,0,0,1]],[5,["_euler"],24,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],25]]],24]],[111,true,3,20,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[141,"Shoot SFX",[[139,"sfx-towers-gun-shoot",-103,[1,"9c7BOtz65ChqCAUMxuzOr6"]]],[3,"9aMoCVHpxPfLN1d1eK3uCJ",1,0]],[492,"Sniper Raycast Holder",false,32,[-104],[3,"8aqJov/UpL94/gpei7S0vJ",1,0],[1,0,1,0]],[144,"Debug",32,1,[-105,36],[3,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[493,"Bullet Spawn Position",32,2,[3,"d7JX2AyHlGkrzxY8poc3iP",1,0],[1,0,0.172,0.318],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[333,true,0.2,false,false,1,23,[1,"13qeHeZOlEzISoPQooC+Rd"],[[14,null],6,0],[6],[4,1],[4,0.5],[0],[0],[0],[0],[0],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-106],[31,15]],[334,false,0.2,false,false,1,23,[1,"abbnJPEiVBYoHm91Jzs4Ma"],[[16,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-107],[31,17]],[129,0.2,false,false,1,29,[1,"bbZPx2kjxCMJgS5/iCI9Gj"],[[18,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-108],[31,19]],[56,"VFX_TowerGlow",30,[31],[3,"6b1barr/xKZawpl1lNYEkz",1,0]],[56,"VFX_TowerDots",30,[32],[3,"8elJXrPWlKLouESC8nGm7C",1,0]],[42,"Base Gun Tower",6,[33],[3,"66wpTYMdJAeo7/giEMoibn",1,0]],[686,0.15,25,[1,"2dThepwftABpuLugIaRmoX"],26,[[162,"guntower",29],[162,"0.mg-2",30],[162,"0.mg-4",31],[162,"3.mg-v",32],[162,"bullz-i",33],[162,"01.hko",34],[162,"tunneller",35]],38,[[8,"cc.ParticleSystem","play",23],[8,"cc.ParticleSystem","play",29],[8,"cc.Animation","play",21],[8,"ac879rTendCEbpZWFz/jexs","playSFX",35]]],[42,"Audio",3,[35],[3,"6dvjS9zONAZ409hFK9MfyQ",1,0]],[320,[1,"3fJatBO/JI/Zd6RX24MIdg"],5],[56,"Look At Target",3,[47],[3,"da30qhiqZKUZjkhX+DhdMH",1,0]],[320,[1,"1eDzRe0mZItLjfyKoTzmdV"],5],[56,"TEMP Tower Head 2",3,[49],[3,"72wUVS6zFPuJTGA2AUpFIv",1,0]],[320,[1,"ceHVyvmlpOGZS5QpTwCZ2I"],5],[56,"TEMP Tower Head 3",3,[51],[3,"65e9jtD6pKv4r1cuCOXpcK",1,0]],[302,"Radius Sphere",false,32,37,[[95,"Sphere<ModelComponent>",-109,[1,"0cZhNLD85HH5MFbxfIpZNi"],[36],[45],37]],[3,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,6,6,6]],[169,"Cube",32,36,[[95,"Cube<ModelComponent>",-110,[1,"9dTYUSyh1PMZqp64FIlNzn"],[38],[45],39]],[3,"6aWik0/UdP+JlVbQck/GJW",1,0],[1,0,0,-1],[1,0.05,0.05,2]],[65,"Upgrade Handler",3,[[687,-111,[1,"f24lX7DxFEOpXeFzB2hlh9"],26,[[8,"d99f8q9JitMHpjrz0o8jKu2","setDamage",4]],[[8,"d99f8q9JitMHpjrz0o8jKu2","setShootFrequency",4]],[[8,"d99f8q9JitMHpjrz0o8jKu2","setRange",4],[8,"da0622vv4BBe4nNeJ2WOyKd","setRadius",20]],[[8,"d99f8q9JitMHpjrz0o8jKu2","setCCTargets",4]],[[8,"d99f8q9JitMHpjrz0o8jKu2","setBulletPenetration",4],[8,"d955ajLtu5AIoknVee9/pvJ","setBulletPenetration",25]]]],[3,"56+c2O1KZNSq0gltfznOx8",1,0]],[65,"Aura VFX Controller",3,[[409,-112,[1,"32nfcT9KxN3IhJnpkeOz2R"],26,[31,32]]],[3,"ef0zb3HtdLTJ3Tz/4EDrBi",1,0]]],0,[0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,33,0,3,1,0,-1,26,0,-1,21,0,-2,3,0,3,1,0,6,1,0,-4,20,0,-5,37,0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,38,0,-1,4,0,-2,55,0,-3,25,0,-4,48,0,-5,50,0,-6,52,0,-7,56,0,-8,46,0,82,36,0,-1,47,0,-2,49,0,-3,51,0,51,45,0,52,34,0,0,4,0,-2,27,0,-2,44,0,6,6,0,6,6,0,1,22,0,1,22,0,1,22,0,1,22,0,3,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,9,0,3,8,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,3,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,3,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,3,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,3,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,3,18,0,-1,34,0,0,20,0,55,34,0,0,20,0,0,21,0,-1,39,0,-2,40,0,-1,45,0,0,25,0,-1,28,0,-2,30,0,-2,29,0,-1,41,0,-1,42,0,-2,43,0,7,31,0,7,32,0,3,33,0,0,35,0,-1,54,0,-1,53,0,7,39,0,7,40,0,7,41,0,0,53,0,0,54,0,0,55,0,0,56,0,10,1,2,6,5,5,6,6,6,6,21,23,6,28,31,0,42,32,0,43,33,6,44,35,6,46,36,6,37,47,0,48,49,0,50,51,0,52,112],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26],[4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,4,9,-1,17,53,37,37,37,37,37,37,37,-1,12,-1,12,40],[89,1,90,1,91,1,92,1,93,1,94,1,95,1,72,63,36,34,36,34,7,5,7,5,43,1,44,44,250,463,464,465,466,467,468,469,141,19,470,40,37]],[[[58,"SM_TowerThunderBBody_01"],[55,"SM_TowerThunderBBody_01",[-2],[3,"9aoAAYJKJR56nsyDVR3xr1",-1,0]],[64,"SM_TowerThunderBBody_01",1,[[62,-3,[1,"a174aNwnFUq6B+C8hupOtt"],[0],[45],1]],[3,"71MWaMDMlRTpG7nD0b8naJ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,251]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4281094263]]],11]]],0,0,[0],[16],[41]],[[[58,"P-BossTank"],[152,"P-BossTank",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"BossTank",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[3,"f8ioSR2nhAnp4NBck49gbA",1,0]],[304,"Art",1,[-38,-39,-40,2],[[[383,false,true,-34,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-35,[107,-37,[1,"73KBPKSapEbocHClbC5F+r"],-36]],4,1,4],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-41],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[42,"Scripts",1,[4,-42,-43,-44],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[30,0,null,3,[22,"cd95syhwpUepqE3C3l751A",-46,[81,"bfLKkf2BRC4rp9scg9oa1f",1,[[75,[2,["cd95syhwpUepqE3C3l751A"]],[[57,-45,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[17,"SM_Model",["_name"],[2,["cd95syhwpUepqE3C3l751A"]]],[14,["_lpos"],[2,["cd95syhwpUepqE3C3l751A"]],[1,0,0,0]],[14,["_lrot"],[2,["cd95syhwpUepqE3C3l751A"]],[3,0,0,0,1]],[14,["_euler"],[2,["cd95syhwpUepqE3C3l751A"]],[1,0,0,0]],[35,["_materials","0"],[2,["e25UQYor5ZNbIp+/V5aQLy"]],3],[17,"SM_Model",["_name"],[2,["8fxyDu/BpQqqQZ5UcV64Vs"]]]]],2]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-54,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-53]]]],[[11,"P-HP-Bar",["_name"],-47],[5,["_lpos"],-48,[1,207,448,0]],[5,["_lrot"],-49,[3,0,0,0,1]],[5,["_euler"],-50,[1,0,0,0]],[11,"Art",["_name"],-51],[5,["_lpos"],-52,[1,0,0,0]],[14,["_contentSize"],[2,["c64LiUsQNM4LjiTXqu/AKi"]],[5,414,896]]]],36]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Spawn",2,[-55,-56],[3,"5eVIzZb/FKNYl0KAw3fTTn",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[79,"VFX-Flash",512,2,[-57],[3,"260YjfEbhLzIzeEJZ/Dniy",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,10,[1,"25AnD9QSFESLJKM6B/1Cz8"],[[8,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-58],[31,9]],[79,"VFX_SprayOut",512,2,[-59],[3,"41FlzhQIRPU7wWvK1fmoqH",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,12,[1,"3edKQuK0RMVIyXIMMUbVkM"],[10],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-60],[121,1,0.1,11]],[113,"VFX_Explosion2",512,2,[-61],[3,"2fX7eROs9E95ho7AcszIaL",1,0]],[86,1.5,false,false,14,[1,"9cOIIe7M1MrahFP1MRCIQk"],[[12,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-62],[31,13]],[79,"VFX_SprayOut2",512,2,[-63],[3,"0aauLvWjpFu6IzecZjBRGP",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,16,[1,"1dpEiD4RRFK4gHOtYw9PoL"],[14],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-64],[121,1,0.1,15]],[79,"VFX-ScreenTone",512,2,[-65],[3,"8eKgdpdN1IT6p2ZMhmpEaL",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,18,[1,"651Wl61kVHTJnqS/hTAlly"],[[16,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-66],[31,17]],[113,"VFX-CircleIn",512,2,[-67],[3,"1fyQSx7jVJLab0VstxB3cw",1,0]],[86,0.4,false,false,20,[1,"6cS3OWiChIkK/HZ5dle38S"],[[18,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-68],[31,19]],[113,"VFX-RingIn",512,2,[-69],[3,"26EI+4fAZL762EwaVKIp1r",1,0]],[86,0.4,false,false,22,[1,"05c3Ihr+pLlYPI29+fvaO3"],[[20,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-70],[31,21]],[79,"VFX_SprayIn",512,2,[-71],[3,"30y5Rc1Z9JM6O2hbA2NYNF",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,24,[1,"b1IRn1/aJEOpLAr9m1EStu"],[22],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-72],[121,1,0.5,23]],[79,"VFX-ChargeFlash",512,2,[-73],[3,"31+xIN6RlI6761AQMkfeto",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,26,[1,"e2L7tSj5ZGaaTvdjQBxwjg"],[24],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8705357142857143],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-74],[31,25]],[79,"VFX-Sparkle",512,2,[-75],[3,"f6zzalzrRALbXnIchil+0t",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,28,[1,"5d2n1TNG5DwqsfqDdPXfn+"],[[26,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-76],[31,27]],[79,"VFX_LightRay",512,2,[-77],[3,"ca0M+C4DVD7Y7N9h4HKj61",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,30,[1,"71f3eD7bRNBr0QfAiiq/jt"],[28],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[31,29]],[113,"VFX-BossExplosion",512,2,[-79],[3,"17xBa39jBE3oaViuxgYjTA",1,0]],[86,0.2,false,false,32,[1,"9aNKV4waVMCIVb+c4l/yw4"],[[30,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-80],[31,31]],[56,"HP Controller",5,[-81],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,34,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-82],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"cc.ParticleSystem","play",14],[8,"cc.ParticleSystem","play",16],[8,"cc.ParticleSystem","play",18],[8,"cc.ParticleSystem","play",20],[8,"cc.ParticleSystem","play",22],[8,"cc.ParticleSystem","play",24],[8,"cc.ParticleSystem","play",26],[8,"cc.ParticleSystem","play",28],[8,"cc.ParticleSystem","play",30],[8,"cc.ParticleSystem","play",32],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[65,"On Death VFX Finished",5,[[118,-83,[1,"3as3Ac2/9Py7g8V74jqngv"],[11,13,15,17,19,21,23,25,27,29,31,33],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"bc3fHZzrFEU4zkOZUcbuQ1",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-84,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,9,[1,"69Pan/I41DWqTUloOfsyBV"],[4],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-85],[31,5]],[119,0.3,false,9,[1,"a7wgfQZINKOKGeo4/k/VRz"],[[6,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-86],[31,7]],[100,3,[1,"c2SS5kcGlLebzHn6Wkq3uJ"]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-87],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,43,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[42,"UI",1,[7],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,7,0,5,7,0,13,35,0,3,1,0,32,44,0,34,42,0,35,35,0,5,4,0,5,34,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,5,0,3,1,0,6,1,0,-4,45,0,-1,9,0,-2,10,0,-3,12,0,-4,14,0,-5,16,0,-6,18,0,-7,20,0,-8,22,0,-9,24,0,-10,26,0,-11,28,0,-12,30,0,-13,32,0,0,3,0,-2,41,0,25,41,0,0,3,0,-1,37,0,-2,38,0,-3,6,0,-1,42,0,-2,34,0,-3,43,0,-4,36,0,0,6,0,3,6,0,1,8,0,1,8,0,1,8,0,1,8,0,1,46,0,1,46,0,19,38,0,3,7,0,-1,39,0,-2,40,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,15,0,7,15,0,-1,17,0,7,17,0,-1,19,0,7,19,0,-1,21,0,7,21,0,-1,23,0,7,23,0,-1,25,0,7,25,0,-1,27,0,7,27,0,-1,29,0,7,29,0,-1,31,0,7,31,0,-1,33,0,7,33,0,-1,35,0,5,36,0,0,36,0,0,37,0,7,39,0,7,40,0,-1,44,0,10,1,2,6,3,4,6,5,7,6,45,87],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,-3,17,4,24],[22,19,471,1,7,5,14,13,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,7,5,8,23,66,8,24,73]],[[[77,"SM_TowerCubeBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3722693,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30144,"length":9288,"count":2322,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30144,"count":628,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44971001148223877,-0.4497530162334442,-2.9802322387695312e-8],"maxPosition",8,[1,0.4496259093284607,0.4495793879032135,0.6503934264183044]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerCubeBody_01",[-2],[3,"08DnfqaRBUD5xquxkMkyx7",-1,0]],[64,"SM_TowerCubeBody_01",1,[[62,-3,[1,"27TVOX0m1aSIANyTsuWfnj"],[0],[45],1]],[3,"70nm3Bpz5XiKTdThuamjWz",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[472,473]],[[[76],[55,"SM_Tower0MG2Body_01",[-2],[3,"4d/LLVKgJfRaWh6CVtkvdN",-1,0]],[64,"SM_Tower0MG2Body_01",1,[[62,-3,[1,"91rnZr2NlU+5mkmycELrbU"],[0],[45],1]],[3,"1bNv8OFqZfVYpfEynFuksV",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[474,252]],[[[77,"SM_Tower0MG2Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",994567446,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43200,"length":8628,"count":2157,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43200,"count":900,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21314796805381775,-0.3677055537700653,-0.013292109593749046],"maxPosition",8,[1,0.2131478637456894,0.2435551881790161,0.3264767527580261]]],-1],0,0,[],[],[]],[[[58,"P-Biker-1"],[228,"P-Biker-1",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-17,-18,-19,-20],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[42,"Scripts",1,[-21,-22,-23,-24,-25],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",3,[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"b7Sl95+MZf9bANHYjJnknT",-34,[81,"785FrVaRVMKbVI3a7MEVkn",1,[[75,[2,["b7Sl95+MZf9bANHYjJnknT"]],[[57,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[5,["_lpos"],-31,[1,0,0,0.164]],[35,["_materials","0"],[2,["2dUztD+cNX8aVf/J8P3X7o"]],3],[11,"SM_Model",["_name"],-32]]],2]],[2,["b7Sl95+MZf9bANHYjJnknT"]],[42,"VFX",2,[-35,-36,-37],[3,"beUR6ZvGxHjYfAo13/LNUk",1,0]],[141,"Spawn Enemies",[[235,-39,[1,"d8B5Ku2I9N3oAZqD+w7xJA"],-38]],[3,"9atA4YpAZGQbNfMWDOYhy1",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-47,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[11,"P-HP-Bar",["_name"],-40],[5,["_lpos"],-41,[1,207,448.00000000000006,0]],[5,["_lrot"],-42,[3,0,0,0,1]],[5,["_euler"],-43,[1,0,0,0]],[11,"Art",["_name"],-44],[5,["_lpos"],-45,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-48],[3,"a7u6pUK1tBNLKPNo/rMTuR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"15L8ZofkJOYo1pfb2Hbqa6"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-49],[31,5]],[73,"VFX_Death_Shards",7,[-50],[3,"f1qDZ1WhRAlKKbZFgneJ4V",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,13,[1,"94QMdpWqJG6LkYGJEyKw4V"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-51],[31,7]],[73,"VFX_Spawn",7,[-52,-53],[3,"2eHEAYWLJF/KGD1bH1HNNp",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",3,[-54],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[65,"On Death VFX Finished",3,[[118,-56,[1,"38frJY46tNxb0ME1JGaZ3s"],[12,14],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"bc/rv5T4dMb6MKo9MW/61A",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["a0vkGbwHRdCYZf+gRDRxfR"]],[120,0.3,false,15,[1,"e35A+JtzJOfaHEGDJxjfeJ"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,9]],[119,0.3,false,15,[1,"c1qTJSzltE1aqTjzW2G+KK"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-59],[31,11]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",3,[8],[3,"68Ykm2swBNqbmLafWcTeB7",1,0]],[264,"Biker-1",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,24],[265,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[56,"Stun",3,[27],[3,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,5,9,0,13,17,0,3,1,0,-1,26,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,3,1,0,6,1,0,-4,29,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,-1,4,0,-2,16,0,-3,28,0,-4,18,0,-5,25,0,-1,24,0,1,6,0,1,6,0,1,6,0,1,6,0,1,21,0,1,21,0,0,5,0,3,5,0,-1,11,0,-2,13,0,-3,15,0,41,26,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,30,0,1,30,0,19,20,0,3,9,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,22,0,-2,23,0,-1,17,0,5,18,0,0,18,0,0,19,0,7,22,0,7,23,0,10,1,8,6,25,9,6,29,26,32,27,27,0,28,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,475,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[68,".bin",2192038472,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyCrowder_02",[-2],[3,"b72WmV0l9c1KqFhtvygc0y",-1,0]],[64,"SM_EnemyCrowder_02",1,[[62,-3,[1,"b3aDCHVaVYjbgLKMR2nL+J"],[0],[45],1]],[3,"01qnpmKihVjaWNSQR8aYkQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[476,477]],[[[77,"SM_EnemyCrowder_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[{"name":"UI_Freeze","rect":{"x":0,"y":0,"width":42,"height":42},"offset":{"x":0,"y":0},"originalSize":{"width":42,"height":42},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[478]],[[[58,"P-Base-Tower"],[254,"P-Base-Tower",[[-3,[98,"Scripts",-5,[3,"395/jqomdNs4i+MZIAv9Bl",-4,0]],[98,"Events",-7,[3,"ef4CiMUqFFBLxbigVGcbkS",-6,0]]],1,4,4],[240,"c7FBgV+GNP8JXw9YieWPKB",-2,0,[-1]]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-8,[49,"d55+XoqRFGso2sF2xHqo1e",1,[[11,"SM_TowerBase_01",["_name"],2],[5,["_lpos"],2,[1,0,0,0]],[5,["_lrot"],2,[3,0,0,0,1]],[5,["_euler"],2,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],1]]],0]],[42,"Art",1,[3],[3,"f6510qCkdPhZ5QPlFG7sjV",1,0]]],0,[0,-1,3,0,3,1,0,-1,4,0,3,1,0,6,1,0,3,1,0,6,1,0,3,3,0,10,1,3,6,4,8],[0,0],[4,9],[43,1]],[[{"name":"Icon_Play","rect":{"x":0,"y":0,"width":48,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[479]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[33],[480]],[[[138,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,1464539398],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[68,32]],[[[58,"06-Terrain"],[305,"06-Terrain",16,[[-6,-7,[98,"Events",-9,[3,"26v2eHDtlCM7ivoqBF7TjE",-8,0]]],1,1,4],[[472,-5,[1,"a89E+Jrq1Hr6jEGUCmTbE5"]]],[240,"a0J5bKqYFEmaKO4oONshDj",-4,0,[-1,-2,-3]]],[42,"Art",1,[-10,-11,-12,-13],[3,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[2,["41a5+qz5hYnIPWfy1FW12A"]],[2,["c2ITubO5BY0ZR5scOChS6x"]],[2,["41a5+qz5hYnIPWfy1FW12A"]],[99,"1",false,2,[-14],[3,"3aRuZ4J/FKN6zDQxv/N7TH",1,0]],[30,0,null,6,[22,"41a5+qz5hYnIPWfy1FW12A",-15,[49,"0164JrUQpMVq4RrmEgCj6M",1,[[11,"SM_Terrain_01",["_name"],3],[5,["_lpos"],3,[1,0,0,0]],[5,["_lrot"],3,[3,0,0,0,1]],[5,["_euler"],3,[1,0,0,0]],[35,["_materials","0"],[2,["acGj9fHzdeWYNWvKyhsFEP"]],3]]],2]],[99,"2",false,2,[-16],[3,"a1em3faopCzIYZpbLG+rD3",1,0]],[30,0,null,8,[22,"c2ITubO5BY0ZR5scOChS6x",-17,[49,"2dJCeuzNtNmKSGNcyquwjV",1,[[11,"SM_Terrain_02",["_name"],4],[5,["_lpos"],4,[1,0,0,0]],[5,["_lrot"],4,[3,0,0,0,1]],[5,["_euler"],4,[1,0,0,0]],[35,["_materials","0"],[2,["018VhKq6ZVZbAm171nxoLE"]],5]]],4]],[99,"3",false,2,[-18],[3,"d6KcaBUhRIFrO6ELI5Te7V",1,0]],[30,0,null,10,[22,"41a5+qz5hYnIPWfy1FW12A",-19,[49,"78cgbAqLRHtLEOQvhY7JoU",1,[[11,"SM_Terrain_02",["_name"],5],[5,["_lpos"],5,[1,0,0,0]],[5,["_lrot"],5,[3,0,0,0,1]],[5,["_euler"],5,[1,0,0,0]],[35,["_materials","0"],[2,["acGj9fHzdeWYNWvKyhsFEP"]],7]]],6]],[237,"TEMP-Model",false,2,[[95,"Cube<ModelComponent>",-20,[1,"3eq+2PhbRKu6WNSyYqYlmc"],[0],[45],1]],[3,"e4KNNUxLBOiaIrybrwqbAS",1,0]],[42,"Scripts",1,[-21],[3,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[65,"Theme Models Chooser",13,[[174,-22,[1,"437t0LZOhD4o82yHY4OSaz"],[6,8,10],8]],[3,"7bUXw8HipMCr3JlbAaqCfY",1,0]]],0,[0,-1,7,0,-2,9,0,-3,11,0,3,1,0,0,1,0,-1,2,0,-2,13,0,3,1,0,6,1,0,-1,12,0,-2,6,0,-3,8,0,-4,10,0,-1,7,0,3,7,0,-1,9,0,3,9,0,-1,11,0,3,11,0,0,12,0,-1,14,0,0,14,0,10,1,22],[0,0,0,0,0,0,0,0,0],[-1,12,4,9,4,9,4,9,39],[223,40,253,1,481,17,253,17,31]],[[[58,"P-WorldsSettings"],[141,"P-WorldsSettings",[[688,-2,[1,"f3nyQPtxVJB4WPg6PMzwQY"],[[689,11],[478,2,12,23],[478,1,24,36]]]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[77,"SM_EnemyStunner_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyStunner_01",[-2],[3,"1edAXY0UBcjIIUC2qW4Qqc",-1,0]],[64,"SM_EnemyStunner_01",1,[[62,-3,[1,"0bpaVy6q1YuIQflgT+j8KX"],[0],[45],1]],[3,"e3hH5Ei39RPpmb2lhMVpUH",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[482,483]],[[[68,".bin",2525663973,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2883804142475128,-0.38122305274009705,0],"maxPosition",8,[1,0.2883804142475128,0.27011871337890625,0.46827760338783264]]],-1],0,0,[],[],[]],[[[58,"SM_TowerS4RBody_01"],[55,"SM_TowerS4RBody_01",[-2],[3,"b8JcZpYRhbA7dBnVFp97b+",-1,0]],[64,"SM_TowerS4RBody_01",1,[[62,-3,[1,"aa2p+GekNcwr3d84smoPpV"],[0],[45],1]],[3,"42d3cbnwxfy6Z3GE8KKuaQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,254]],[[[68,".bin",1567242580,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":54672,"length":15552,"count":3888,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":54672,"count":1139,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2563151717185974,-0.25497379899024963,-0.08813595771789551],"maxPosition",8,[1,0.25377020239830017,0.25511202216148376,0.7254630923271179]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerPulsarBody_01",[-2],[3,"27Yce2+45c87fcrQ+S23Kt",-1,0]],[64,"SM_TowerPulsarBody_01",1,[[62,-3,[1,"c1qYGglmVbiJ63kvX3SnJg"],[0],[45],1]],[3,"72+J2CTu9RoYwXYPv5sSUS",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[484,202]],[[[77,"SM_TowerPulsarBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyTank_01",[-2],[3,"e2Vx3eAWdfubrymQP2YNGI",-1,0]],[64,"SM_EnemyTank_01",1,[[62,-3,[1,"bboftuCNdUUatqfu6RAfMf"],[0],[45],1]],[3,"b9niJVKBFTDZ9RF32cDoT7",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[485,486]],[[[68,".bin",4129080837,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyTank_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-Charger-2"],[152,"P-Charger-2",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Charger-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"eerPSLgTJdH7hLSNuCTtVc",-32,[81,"a2mjm70D9GSqAonN8g8xv6",1,[[75,[2,["eerPSLgTJdH7hLSNuCTtVc"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.2,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["c8h0R7kAVVrrw0yFT3+4z0"]],3],[17,"SM_Model",["_name"],[2,["69IPnlhZJZXItc4Tb0npin"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["eerPSLgTJdH7hLSNuCTtVc"]],[42,"VFX",2,[-36,-37,-38],[3,"abZwOxUF1JxLFWA9gxrDQW",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"703+D7wElCJIiMNu1rP9aA",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"e32WOzuchD/IwiQE82iywB"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"01ad4VsOdJOb7POlIynuu6",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"13oCwfT6tLA43xKPz+NEp6"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"cd+APrHvJCE7hr4Z4s4Fq0",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"61JXa/h31PG5PV9F7KPu2F"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"a4bc4GHeBB9pBTbgbZKvU/",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"584jUbJ89NS7f6bkdnGV5s"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"f75+l+zcVHJroBKOLL4kIN"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,23,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,487,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[68,".bin",3240220128,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46992,"length":13968,"count":3492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46992,"count":979,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2508014440536499,-0.6403793096542358,0],"maxPosition",8,[1,0.2508014440536499,0.3611346185207367,0.46040260791778564]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerTunnelerBody_01",[-2],[3,"d2WuMenSdQdr89Jfpld4zw",-1,0]],[64,"SM_TowerTunnelerBody_01",1,[[62,-3,[1,"9dDxbuCdVYVYsfEinJuqgr"],[0],[45],1]],[3,"bac3BKSlVQpqE9QB4VllW4",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[488,255]],[[[77,"SM_TowerTunnelerBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[470,"../Internal/Shaders/Laser/LaserShader",[{"ROUGHNESS":[1,2,3,4,5,6],"BEAMS_COUNT":[1,2,3,4,5,6]},{},{},{}],[{"hash":2240480017,"name":"../Internal/Shaders/Laser/LaserShader|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"outlineColor","type":16,"count":1},{"name":"noise_scale","type":14,"count":1}],"defines":[]},{"name":"BeamData","stageFlags":16,"binding":2,"members":[{"name":"frequency","type":5,"count":1},{"name":"energy","type":13,"count":1},{"name":"speed","type":13,"count":1},{"name":"thickness","type":13,"count":1},{"name":"outline_thickness","type":13,"count":1},{"name":"beam_difference","type":13,"count":1},{"name":"glow","type":13,"count":1},{"name":"outline_glow","type":13,"count":1},{"name":"progress","type":13,"count":1},{"name":"y_offset","type":13,"count":1},{"name":"fixed_edge_size","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) in vec3 vBarycentric;\n#endif\nlayout(set = 1, binding = 3) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 mainColor;\n  vec4 outlineColor;\n  vec2 noise_scale;\n};\nlayout(set = 1, binding = 2) uniform BeamData {\n  int frequency;\n  float energy;\n  float speed;\n  float thickness;\n  float outline_thickness;\n  float beam_difference;\n  float glow;\n  float outline_glow;\n  float progress;\n  float y_offset;\n  float fixed_edge_size;\n};\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  in vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 mainColor;\n  vec4 outlineColor;\n  vec2 noise_scale;\n};\nlayout(std140) uniform BeamData {\n  int frequency;\n  float energy;\n  float speed;\n  float thickness;\n  float outline_thickness;\n  float beam_difference;\n  float glow;\n  float outline_glow;\n  float progress;\n  float y_offset;\n  float fixed_edge_size;\n};\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nuniform highp vec4 cc_time;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\n  uniform vec4 mainColor;\n  uniform vec4 outlineColor;\n  uniform vec2 noise_scale;\n    uniform int frequency;\n    uniform float energy;\n    uniform float speed;\n    uniform float thickness;\n    uniform float outline_thickness;\n    uniform float beam_difference;\n    uniform float glow;\n    uniform float outline_glow;\n    uniform float progress;\n    uniform float y_offset;\n    uniform float fixed_edge_size;\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":53}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROUGHNESS","type":"number","defines":[],"range":[1,6]},{"name":"BEAMS_COUNT","type":"number","defines":[],"range":[1,6]}]}],[{"name":"add","passes":[{"program":"../Internal/Shaders/Laser/LaserShader|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}},"outlineColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}},"frequency":{"type":5,"value":[10]},"energy":{"type":13,"value":[3]},"speed":{"type":13,"value":[1]},"thickness":{"type":13,"value":[0.006]},"outline_thickness":{"type":13,"value":[0.03]},"beam_difference":{"type":13,"value":[0]},"glow":{"type":13,"value":[0]},"outline_glow":{"type":13,"value":[0]},"progress":{"type":13,"value":[1]},"y_offset":{"type":13,"value":[0]},"fixed_edge_size":{"type":13,"value":[0.05]},"noise_scale":{"type":14,"value":[1,0]}}}]}]]],0,0,[],[],[]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[33,32]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[112,32]],[[[58,"Holder_ShopItemTower"],[170,"Holder_ShopItemTower",33554432,[-18,-19,-20,-21,-22],[[[9,-2,[1,"82XEIxdnVNOYORIpFePqwO"],[5,78,72]],-3,[190,false,-4,[1,"60enjPfVBHkI6dEWN1rUyz"],[12,13,14,15]],-5,[690,-12,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-11]],-10,[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","locked",-9]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","bought",-8]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","unlocked",-7]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","noCurrency",-6]],16],[356,-14,[1,"ffZ6a1S0JORZ2/vhWCYiga"],-13],[107,-16,[1,"e1NG+1hV1G5K2CKkNvRXuk"],-15],[139,"sfx-ui-menutap",-17,[1,"e57eAeeJdPu5EWyVJczgsI"]]],4,1,4,1,4,4,4,4],[3,"54x3LC6jNKF6d4tobLj//p",-1,0],[1,0,108.968,0]],[53,"Panel_Currency",33554432,1,[-27,-28,-29],[[9,-23,[1,"c3uF799vxPZoT9VzpJHZbn"],[5,38,23]],[23,0,-24,[1,"a931au/OBAPLrRZGnEdWEi"],[4,4293191424],7],[233,false,-25,[1,"20SYIxtxZIaYK+FwdLDYRv"]],[100,-26,[1,"78B0L7GoZLrLeMb2JQVtdk"]]],[3,"bbMJKn/OdOCqRjfsfqizBg",1,0],[1,0,-28,0]],[238,"Holder_Cost",false,33554432,2,[-33,-34],[[9,-30,[1,"c2oU7fDH9KkpIMkybYhfk6"],[5,27.7,22]],[248,1,1,2,-31,[1,"bf4JtTsjVIcp8RVNo9sW6e"]],[57,-32,[1,"30sSUxUnFBiKcnf8mzrhzy"]]],[3,"07KURNz6dMK4PdBiolw5Np",1,0]],[41,"No Currency Button",33554432,1,[[9,-35,[1,"38BJXGFSxHMaDe39OBt4px"],[5,69.1,72]],[184,3,0.95,-38,[1,"c4RrUFAOJPxrrddr/6B64L"],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",-37]],[4,4292269782],-36,8,9,10,11],[139,"sfx-ui-cantbuyitem",-39,[1,"19K6D8tsVPlZMBgZuiqgKP"]],[568,45,0.05,5,5,-5,false,78,40,-40,[1,"69/z9jy69Pf7ljDKNl9T1A"]]],[3,"f6K2ivZp9A1bGDfHHRl1wf",1,0],[1,-0.5500000000000043,-5,0]],[33,"Fill Color",33554432,1,[[9,-41,[1,"9bAlk9kmlKBoXIacK32kDC"],[5,56,56]],[46,1,0,-42,[1,"6cZ/nq3tJGm4zlyMu3vtCK"],[4,4288449280],2]],[3,"6fSn7vontHlJIAhCZsp+Rg",1,0]],[112,"Text_Cost",33554432,3,[[[9,-43,[1,"15US3rpVpP84V8P4i222BN"],[5,9.7,27.72]],-44,[96,-46,[1,"c1rvMj21BBpaIktDMYceJ5"],-45]],4,1,4],[3,"02eF1XhQpMbKYv2Jp8pbJ+",1,0],[1,9,0,0]],[53,"Icon_Currency Outline",33554432,3,[-49],[[9,-47,[1,"3bVMBeShlMkIDDFLGKvPdv"],[5,16,16]],[23,0,-48,[1,"00uO3wOu9DKaD4OEnYtta4"],[4,4294765656],4]],[3,"77TNXOqB1K7aFVadEOVrbg",1,0],[1,-5.85,0,0]],[33,"Icon_Currency",33554432,7,[[9,-50,[1,"857tSsdQVOeqRvHvf2WG+z"],[5,14,14]],[108,0,-51,[1,"6b6I+C++lEZ5Dg5XRj0VEr"],3],[117,45,1,1,1,1,30,30,-52,[1,"5d1LeIUktCsZPFZx1fcrwl"]]],[3,"46XEwx/YdPSoYGq9WRUULu",1,0]],[159,"Icon_Lock",false,33554432,2,[[9,-53,[1,"d7JDCQLHZE1qyRUph3ZbwV"],[5,15,18]],[23,0,-54,[1,"f5S0Fs6JRMDLPG2V4IqRpJ"],[4,4281532425],5],[57,-55,[1,"05bkR54NZBYZaI+s3dOquq"]]],[3,"09I/evlr5BxqFOwd6kTLSp",1,0]],[33,"Icon_Unlocked",33554432,2,[[9,-56,[1,"69le7UzzlD16qiwvUuRUDi"],[5,24,18]],[23,0,-57,[1,"a2+bVwCepIpZ/QGo1h+3vT"],[4,4283190536],6],[57,-58,[1,"a4+H8/SXhFDbIHKbGMXrvO"]]],[3,"dcV4K6SuJD/oLJkYCi5m+V",1,0]],[159,"Outline 01",false,33554432,1,[[9,-59,[1,"0fkxirXIJOCK89rpan10Cz"],[5,64,64]],[46,1,0,-60,[1,"85gXoTlIpHRLtxhjVyF7lB"],[4,2519949311],0]],[3,"8avSwfPDlEB5uLU3m7wtwI",1,0]],[159,"Outline 02",false,33554432,1,[[9,-61,[1,"d6W6zs5JxAopZ3505vLm/z"],[5,72,72]],[46,1,0,-62,[1,"08Y5FkMfZHKZgd1Y3uCHqp"],[4,1513316351],1]],[3,"98aF7uczVOLqI7r+RlZjet",1,0]],[387,3,0.9,1,[1,"64mIUF6rZLWqILnL2FQOpz"],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",1]],5],[185,"2",22,22,22,false,6,[1,"faj1DfHAZDPZG7p19xV2HG"]],[100,1,[1,"8ayjpW7t5PrKLS1thPDaGN"]]],0,[0,3,1,0,0,1,0,-2,13,0,0,1,0,-4,15,0,5,1,0,5,1,0,5,1,0,5,1,0,42,13,0,5,6,0,0,1,0,42,13,0,0,1,0,25,15,0,0,1,0,0,1,0,-1,11,0,-2,12,0,-3,5,0,-4,2,0,-5,4,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,3,0,-2,9,0,-3,10,0,0,3,0,0,3,0,0,3,0,-1,7,0,-2,6,0,0,4,0,19,5,0,5,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,-2,14,0,23,14,0,0,6,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,10,1,62],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15],[2,2,2,2,2,2,2,2,20,26,27,28,-1,-2,-3,-4,40,11,24],[4,4,0,53,49,42,54,0,11,11,20,21,241,242,243,244,37,2,489]],[[[58,"SM_TowerSmash3RBody_01"],[55,"SM_TowerSmash3RBody_01",[-2],[3,"424JMWZcNT+7LUIxhmggm+",-1,0]],[64,"SM_TowerSmash3RBody_01",1,[[62,-3,[1,"6dld1XsrhbprQRWAgl+86p"],[0],[45],1]],[3,"01bmdrW4JXtZt850BsSA/w",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,256]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4288810092]]],11]]],0,0,[0],[16],[41]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4285098345]]],11]]],0,0,[0],[16],[41]],[[[77,"SM_TowerStarfallBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3344625144,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42000,"length":11004,"count":2751,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42000,"count":875,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26049327850341797,-0.3358308672904968,-0.009908358566462994],"maxPosition",8,[1,0.2604946792125702,0.26236942410469055,0.5138998627662659]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerStarfallBody_01",[-2],[3,"33sM9enERVxYZcocgwSPwR",-1,0]],[64,"SM_TowerStarfallBody_01",1,[[62,-3,[1,"c2i6M6mIdSAJVEUjqztCnG"],[0],[45],1]],[3,"6cUxh5uoJYzKl3tC1g7j0i",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[490,247]],[[[76],[55,"SM_EnemyCargo_01",[-2],[3,"891ZPn4nZbPKViqxf9B2Lw",-1,0]],[64,"SM_EnemyCargo_01",1,[[62,-3,[1,"2bPtrJwrJaRbWH2ryoR9YV"],[0],[45],1]],[3,"e0BhHAhhZUvI7kUr1l9BXG",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[491,492]],[[[77,"SM_EnemyCargo_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3756885045,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27264,"length":3528,"count":882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27264,"count":568,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3752727508544922,-0.405847430229187,-0.05720945820212364],"maxPosition",8,[1,0.37538644671440125,0.5373253226280212,0.39562320709228516]]],-1],0,0,[],[],[]],[[{"name":"Icon_Replay","rect":{"x":1,"y":0,"width":46,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[493]],[[[77,"SM_EnemyRunner_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyRunner_02",[-2],[3,"56wQT6ekRbMpczHSaWzAPR",-1,0]],[64,"SM_EnemyRunner_02",1,[[62,-3,[1,"313Q+KY7xZ5rxcBAcijvSt"],[0],[45],1]],[3,"4akHIYctheZYlBuf7N3NQy",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[494,495]],[[[68,".bin",581612013,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[58,"P-TowerUpgrades-UI"],[90,0,{},[22,"46k0m6lkdE7LjR/vInpkl2",-51,[448,"84oPhfCVNNepRzTDrc/qVl",-50,[[266,[2,["0aSc2CSmNOv7gy3zhm972w","b88SOLEf1G8Llh8jZIyZGc"]],[-47]],[266,[2,["175KhMRQRDzrwjR+Y/XD8F"]],[-48]],[266,[2,["basO3xNKRMubx47MkKLOyR"]],[-49]]],[[297,[2,["c4JryQ715OxZEXyEuY811m"]],[-45]],[297,[2,["559OljkmVJbb40T1JglvS/"]],[-46]]],[[11,"Holder_TowerUpgradeMenu",["_name"],-1],[5,["_lpos"],-2,[1,0,0,0]],[5,["_lrot"],-3,[3,0,0,0,1]],[5,["_euler"],-4,[1,0,0,0]],[11,1,["_animationEvents","0","_actions","length"],-5],[209,["_animationEvents","0","_actions","0"],-7,[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-6]],[17,false,["_debug"],[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[11,"Button_Color",["_name"],-8],[5,["_lpos"],-9,[1,0,0,0]],[11,"Button_Color",["_name"],-10],[5,["_lpos"],-11,[1,0,0,0]],[11,"Button_Color",["_name"],-12],[5,["_lpos"],-13,[1,0,0,0]],[17,"Dot_Outline",["_name"],[2,["fad6l15HhESar9QeacgpaJ"]]],[11,"Panel_Outline",["_name"],-14],[5,["_lpos"],-15,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-16],[5,["_lpos"],-17,[1,0,0,0]],[11,"Panel_Outline",["_name"],-18],[5,["_lpos"],-19,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-20],[5,["_lpos"],-21,[1,0,0,0]],[11,"Panel_Outline",["_name"],-22],[5,["_lpos"],-23,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-24],[5,["_lpos"],-25,[1,0,0,0]],[17,0,["_opacity"],[2,["18PnzBvKpPm5jHmDihqUZ9"]]],[17,false,["_active"],[2,["37Eb9ZL+JM5azHm5AEqitc"]]],[11,"Stats 01",["_name"],-26],[5,["_lpos"],-27,[1,-62,-5.182,0]],[11,"Stats 02",["_name"],-28],[5,["_lpos"],-29,[1,0,-5.182,0]],[11,"Stats 03",["_name"],-30],[5,["_lpos"],-31,[1,62,-5.182,0]],[11,true,["_active"],-32],[11,"Holder_Tower Button 03",["_name"],-33],[5,["_color"],-34,[4,4281401599]],[11,"Destroy",["_string"],-35],[11,1,["clickEvents","length"],-36],[209,["clickEvents","1"],-38,[8,"ac879rTendCEbpZWFz/jexs","playSFX",-37]],[11,1,["clickEvents","length"],-39],[209,["clickEvents","1"],-41,[8,"ac879rTendCEbpZWFz/jexs","playSFX",-40]],[11,1,["clickEvents","length"],-42],[209,["clickEvents","1"],-44,[8,"ac879rTendCEbpZWFz/jexs","playSFX",-43]],[17,false,["_debug"],[2,["82+Qldi0dJcJTsSoTpzmOs"]]],[17,true,["_debug"],[2,["99AQyBFexBdqAz+WiT48yy"]]],[17,8,["_eventID"],[2,["2dmSthkmBFhqDzGkvuZcgk"]]]]],15]],[80,"P-TowerUpgrades-UI",33554432,[-76,-77,-78],[[9,-72,[1,"2ewIMej8xFo5kz4JgY2bkv"],[5,414,896]],[340,-73,[1,"9d2KX1VUROYr/ruG1NwdBU"]],[443,45,5.684341886080802e-14,5.684341886080802e-14,-74,[1,"b3PXiLDqJO3b6ito6Imtxc"]],[310,-75,[1,"83QfGN5bdHRJOu+OogZfkV"]]],[105,"d2vYEIV9FA2ZrKggRnx1pJ",-71,0,[[71,["_animator"],1,[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]],1,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[67,["_tierUpUpgrades","0","entryNode"],-55,1,[2,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_tierUpUpgrades","1","entryNode"],-56,1,[2,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_tierUpUpgrades","2","entryNode"],-57,1,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[67,["_commonUpgrades","0","entryNode"],-58,1,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[67,["_commonUpgrades","1","entryNode"],-59,1,[2,["basO3xNKRMubx47MkKLOyR"]]],[67,["_showUpgradeInfo","0","target"],-60,1,[2,["bb7Kak23hMTYfuoFKHjabu"]]],[67,["_setTierUpUI","0","target"],-61,1,[2,["165POIGiVCTbJeF4ypPaek"]]],[67,["_setTierUpUI","1","target"],-62,1,[2,["34GO02mHFBr7SAk+hQxhbP"]]],[67,["_setLevelUpUI","0","target"],-63,1,[2,["165POIGiVCTbJeF4ypPaek"]]],[67,["_setLevelUpUI","1","target"],-64,1,[2,["34GO02mHFBr7SAk+hQxhbP"]]],[71,["clickEvents","0","target"],1,[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],1,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[71,["_target"],1,[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],1,[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]]],[71,["clickEvents","0","target"],1,[2,["50hrJYbf9IHLRR1ePLEmnJ"]],1,[2,["basO3xNKRMubx47MkKLOyR"]]],[71,["clickEvents","0","target"],1,[2,["e0iQibPDNGYIKJsHwZFwIm"]],1,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[71,["_animator"],1,[2,["82+Qldi0dJcJTsSoTpzmOs"]],1,[2,["47yBIwvkZE2aGBAdlhkSNv"]]],[71,["_onEnable","0","target"],1,[2,["44hjLkOIxHkqZ37y3El6fN"]],1,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[71,["_onEnable","0","target"],1,[2,["5aPj7mhcBJsoJqrNFRjFCq"]],1,[2,["basO3xNKRMubx47MkKLOyR"]]],[71,["_animator"],1,[2,["99AQyBFexBdqAz+WiT48yy"]],1,[2,["56JKwaJhFDV5L2wgkKwUbU"]]],[67,["_onEventRaised","0","target"],-65,1,[2,["c4JryQ715OxZEXyEuY811m"]]],[67,["_onEventRaised","0","target"],-66,1,[2,["c4JryQ715OxZEXyEuY811m"]]],[67,["_button"],-67,1,[2,["50hrJYbf9IHLRR1ePLEmnJ"]]],[67,["_button"],-68,1,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[67,["_onEventRaised","1","target"],-69,1,[2,["559OljkmVJbb40T1JglvS/"]]],[67,["_onEventRaised","1","target"],-70,1,[2,["559OljkmVJbb40T1JglvS/"]]]],[1,-52,-53,-54]],[1,207,448.00000000000006,0]],[238,"Content Holder",false,33554432,2,[-82,-83,-84,1],[[9,-79,[1,"bbYbk4IzlJ6481IbySBUTv"],[5,414,896]],[172,45,100,100,1,-80,[1,"b8Ki3TWiBD64iVR3i5Nv36"]],[57,-81,[1,"f8VlTJb/FN7Zvk7iPrTSxg"]]],[3,"e6+CrXE2lGoKjlvtgfAyZr",2,0]],[691,[1,"d5H7nmQmBHdaoxK+4Fz2ad"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",3],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",1]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]],[[411,1,-88],[411,1,-89],[411,2,-90]],[[479,1],[479,2]],[[182,"9724cyw/qJC54XASWo2Oks7","setTowerInfo"],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","towerClick",1],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-87]],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",-86]],[[8,"ac879rTendCEbpZWFz/jexs","playSFX",-85]],[[182,"99672sUg5NFw4x7bEPAiyHE","activate"],[182,"99672sUg5NFw4x7bEPAiyHE","deactivate"]],[[182,"99672sUg5NFw4x7bEPAiyHE","deactivate"],[182,"99672sUg5NFw4x7bEPAiyHE","activate"]]],[80,"Close Button",33554432,[-97],[[9,-91,[1,"cfcosrmlNEH5U8U1HB3UsA"],[5,150,35]],[263,1,0,-92,[1,"38kh+l6ipB/ZkzumoEOcTo"],0],[313,2,-95,[1,"945LpHThdHTbhHc54iypft"],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",3],[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-94]],[4,4292269782],-93,1,2,3,4],[236,8,-96,[1,"0eFwvNjyBI2banO23AlzEY"]]],[3,"6fyIjr3g9M0KP4Nze67uYA",2,0],[1,0,17.5,0]],[80,"Upgrades",33554432,[5,-101,-102],[[47,-98,[1,"f06VnbEK1MZJ6dXB3psGwM"],[5,150,125],[0,0.5,0]],[453,1,2,10,0,true,-99,[1,"262YJceVRH2qvEXphaGYTT"]],[569,36,15,15,15,-100,[1,"84QsAggHRGZo+3Ek4+1kb/"]]],[3,"0f9TPVP/BEZ5g8JLjynszA",2,0],[1,117,-433,0]],[83,"Events",33554432,2,[-104,-105,-106,-107,-108],[[9,-103,[1,"9bSOC/aNxIC6HltJU6gGdZ"],[5,0,0]]],[3,"faxweChyxEr5Rq/j6i+ssH",2,0]],[53,"Upgrade 1",33554432,6,[-113],[[9,-109,[1,"3bx0q8Tc9LNLUSz9tWgw/J"],[5,150,35]],[263,1,0,-110,[1,"ffRQfAysZMLoTjybyUpZSZ"],5],[457,2,-112,[1,"d3R/XUX6pJ+JzGZTYbOaV3"],[4,4292269782],-111,6,7,8,9]],[3,"ff9gCexFRGor/4ZapCYGC3",2,0],[1,0,62.5,0]],[53,"Upgrade 2",33554432,6,[-118],[[9,-114,[1,"c3iaFHNrhD5Y855YtYJj5q"],[5,150,35]],[263,1,0,-115,[1,"27yvlibyVIfaM+/yli0K5/"],10],[457,2,-117,[1,"7aqSQo9ddKEZWqRdyi3QPM"],[4,4292269782],-116,11,12,13,14]],[3,"90G+cBh2FEcKP75QclqzKI",2,0],[1,0,107.5,0]],[223,"Destroy SFX",33554432,[[48,-119,[1,"4d75DvBQFLhZCFjNey0XBq"]],[139,"sfx-player-towerdestroyed",-120,[1,"caR5PfbWlEI4nXfzR+GDGc"]]],[3,"f3p+W1vxhC1bRiNh4b1AtK",2,0]],[83,"Scripts",33554432,2,[-122,-123,-124,-125],[[9,-121,[1,"3eXrS4eWFKMKZrUQP7fPCE"],[5,0,0]]],[3,"b3lUtl74dPk49K0kbClTaX",2,0]],[83,"Audio",33554432,11,[-127,-128,10],[[48,-126,[1,"5efpW2PANCi7TRH7Ga4XL4"]]],[3,"f3RefTpvZPgYZWoqi6SFZq",2,0]],[134,"Tower Upgrades UI",33554432,11,[[[48,-129,[1,"0fMMjpEPxLw4mwdRw61gmn"]],4],4,1],[3,"34rHfGnN1AY4Jy+uZOINFt",2,0]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[33,"Upgrade SFX",33554432,12,[[48,-130,[1,"acMSN8duRHboPoluY43pJB"]],[139,"sfx-player-upgrade",-131,[1,"95qkOP2RVHW5WNS/v/7zJ0"]]],[3,"adJQMJRk1MHL3ydCAVWJ1w",2,0]],[33,"Game Victory",33554432,7,[[48,-132,[1,"f643UGEb9GN4euRkol95pX"]],[206,3,-134,[1,"d0avuTEIRP8Jhx3VESCszr"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-133],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]],[236,8,-135,[1,"44CkfMgqRJWYPVc9tQSKQ3"]]],[3,"d7onHVG+lNT4t+KRaPwCCM",2,0]],[33,"Game Over",33554432,7,[[48,-136,[1,"f45yUurZdA25EwoPawcIhE"]],[206,4,-138,[1,"07eCaTZ9xLia0KwZdX/6QN"],[[8,"cd32dlNM6hEkokUGHlLV8y+","raise",-137],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]],[236,8,-139,[1,"2dvCvEWJlC85EQtOO4ppn6"]]],[3,"561B01PUFP0LFEKCbi7+mH",2,0]],[238,"MidPanel",false,33554432,3,[6],[[9,-140,[1,"39XDHQ5stLBacRQRPl3138"],[5,414,896]],[128,45,100,100,-141,[1,"24UvozfwVB57p0MHCN90KR"]]],[3,"760hgsZr5BTYrdIuawNRVW",2,0]],[366,"Text_+",33554432,[[9,-142,[1,"d60lqCvyBOV51j5Yq5uq1K"],[5,15.38,34.239999999999995]],[70,"+",24,24,24,false,-143,[1,"4bqh9sDHhGzopYpFv+F8KY"],[4,4287102766],16],[400,-144,[1,"26pVjKDeBKJquFLBwrT5zf"],[4,4282974275]]],[3,"9eOM8cT8tD/KTEb2GtywTH",2,0],[1,-18.862,-0.695,0]],[2,["46k0m6lkdE7LjR/vInpkl2"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["8bBj36fMNOUZFpmts6EkfF"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[33,"Click SFX",33554432,12,[[48,-145,[1,"a0ubLdgoZES7dGmps+6E9m"]],[139,"sfx-ui-gametap",-146,[1,"daFGxdTp1EganwrX/2g+je"]]],[3,"1eKghDtylD0K49y5sO7iog",2,0]],[83,"Tutorial",33554432,7,[-148,-149],[[48,-147,[1,"b0DuE4l/5Djohnk2qpiXUj"]]],[3,"56dk3ro+xJd61UNtHp8ERZ",2,0]],[103,"TopPanel",false,33554432,3,[[9,-150,[1,"dcHgoCC+hEr7BIl7/GljSC"],[5,414,100]],[444,41,100,-151,[1,"13BvCAQ41JzqPkz2Gq6r5O"]]],[3,"a4IClDx9JHK7twxHHyg5DJ",2,0],[1,0,398,0]],[33,"Label",33554432,5,[[9,-152,[1,"9buCLlUOpAG48Qu6YNdaOw"],[5,100,40]],[285,"Close",17,17,1,false,-153,[1,"79gm+29PFEHIsnZmQ6Zppu"],[4,4278190080]]],[3,"52v9EhtApGmr4PLiscehs6",2,0]],[33,"Label",33554432,8,[[9,-154,[1,"a8TibKElpPgoAxC+/3mY5O"],[5,100,40]],[285,"Upgrade 1",17,17,1,false,-155,[1,"dd+9sZ68lNCbIlbe+Wklyk"],[4,4278190080]]],[3,"79J1oSyTRPoptHro9w40eu",2,0]],[33,"Label",33554432,9,[[9,-156,[1,"083TRRVmhCIZcuy2dJTWYB"],[5,100,40]],[285,"Upgrade 2",17,17,1,false,-157,[1,"c5zBeo4HRDRYdXDzxP1MwV"],[4,4278190080]]],[3,"948kmtdmpFPLlOHhkAwamg",2,0]],[103,"BotPanel",false,33554432,3,[[9,-158,[1,"eeRIPARs5EPK5eXRIsHJ7/"],[5,414,100]],[444,44,100,-159,[1,"02EphyL4xKRJ3Wj1YVqKPN"]]],[3,"16VOZ1xNFAAK8aJWNzPoH/",2,0],[1,0,-398,0]],[223,"On Enable",33554432,[[48,-160,[1,"230Nm3xu9HS5fTq148/bUF"]],[203,-161,[1,"44hjLkOIxHkqZ37y3El6fN"],[[153,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[3,"640RFaY5hOWogyWMP69QTl",2,0]],[223,"On Enable",33554432,[[48,-162,[1,"d3IhF/959G6pZY5aWTWu3x"]],[203,-163,[1,"5aPj7mhcBJsoJqrNFRjFCq"],[[153,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[3,"74yGjUCfZLOZH/wxmjTQgg",2,0]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-174,[49,"74XRvRkuBPX6zuG43ddIDV",1,[[11,"Holder_Tower Button 01",["_name"],14],[5,["_lpos"],14,[1,0,0,0]],[5,["_lrot"],14,[3,0,0,0,1]],[5,["_euler"],14,[1,0,0,0]],[11,"Button_Color",["_name"],-164],[5,["_lpos"],-165,[1,0,0,0]],[11,"Button_Outline",["_name"],23],[5,["_lpos"],23,[1,0,0,0]],[5,["_lrot"],23,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],23,[1,0,0,45]],[11,true,["_active"],14],[11,"Button_Outline 2",["_name"],-166],[5,["_lpos"],-167,[1,0,0,0]],[11,"Button_Outline 1",["_name"],-168],[5,["_lpos"],-169,[1,0,0,0]],[17,false,["_active"],[2,["e9EkiL/+1I4KWEMpMRNY1g"]]],[11,2,["_clips","length"],24],[183,["_clips","0"],24,18],[183,["_defaultClip"],24,19],[11,"Panel_Outline",["_name"],-170],[5,["_lpos"],-171,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-172],[5,["_lpos"],-173,[1,0,0,0]],[17,false,["_active"],[2,["07J8NL3JNE+J1JbZaH9Gkn"]]],[183,["_clips","1"],24,20]]],17]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-181,[49,"c1RSk6NUhFVYmVRsNR9Aqa",1,[[11,"Holder_Tower Button 02",["_name"],15],[5,["_lpos"],15,[1,0,0,0]],[5,["_lrot"],15,[3,0,0,0,1]],[5,["_euler"],15,[1,0,0,0]],[11,"Button_Color",["_name"],-175],[5,["_lpos"],-176,[1,0,0,0]],[11,"Button_Outline",["_name"],25],[5,["_lpos"],25,[1,0,0,0]],[5,["_lrot"],25,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],25,[1,0,0,45]],[11,"Panel_Outline",["_name"],-177],[5,["_lpos"],-178,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-179],[5,["_lpos"],-180,[1,0,0,0]],[11,true,["_active"],15]]],21]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-188,[49,"0aSc2CSmNOv7gy3zhm972w",1,[[11,"Holder_Tower Button 03",["_name"],16],[5,["_lpos"],16,[1,0,0,0]],[5,["_lrot"],16,[3,0,0,0,1]],[5,["_euler"],16,[1,0,0,0]],[11,"Button_Color",["_name"],-182],[5,["_lpos"],-183,[1,0,0,0]],[11,"Button_Outline",["_name"],26],[5,["_lpos"],26,[1,0,0,0]],[5,["_lrot"],26,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],26,[1,0,0,45]],[11,"Panel_Outline",["_name"],-184],[5,["_lpos"],-185,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-186],[5,["_lpos"],-187,[1,0,0,0]],[11,true,["_active"],16]]],22]],[33,"Entrance Tween",33554432,11,[[48,-189,[1,"c5S5z/jEFO6JAnfFfxfU7P"]],[624,0.5,-190,[1,"9aiq4QQkBKPa50x/gGDdlR"]]],[3,"e0pssaD6NIlYaPEpnxpPDq",2,0]],[33,"Exit Tween",33554432,11,[[48,-191,[1,"84oMcdBWVIiqaD0PGhfUkW"]],[625,0.5,255,0,-192,[1,"89qqDBSwhJ44SD+VTo/vR2"]]],[3,"b1vgGPs/ZKE6BcMuQ4pmJQ",2,0]],[33,"Show UI Listener",33554432,7,[[48,-193,[1,"d7UvftNAdJ2ZYMCCvBlTtF"]],[232,5,-194,[1,"64E/yhfyhGvbKVip5RKmYP"],[[8,"90668MDLy5GBJFMTozjY7sY","showUI",13]]]],[3,"61+/9H3YVL1q044zfDtisN",2,0]],[33,"Hide UI Listener",33554432,7,[[48,-195,[1,"9cSu8Z4ylHk5ioiJm3q8l+"]],[232,6,-196,[1,"f2rQNNcbdNnKFDcunIEgwi"],[[8,"90668MDLy5GBJFMTozjY7sY","hideUI",13]]]],[3,"fev6V9Fd1AyotLT40rpZJa",2,0]],[134,"Started",33554432,28,[[[48,-197,[1,"2dz1+BhpJNKp2UK4hd9sQo"]],-198],4,1],[3,"f2wBGBCr5Nva5ulVG10sPN",2,0]],[298,3,43,[1,"d1eKVOOLVGU7G9e8+5J8ov"],[[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"],[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"]]],[134,"Finished",33554432,28,[[[48,-199,[1,"2dCcObPZVMbKXNSLZm51rr"]],-200],4,1],[3,"fdlAOdn2BJEIJS5PWgcdTT",2,0]],[298,4,45,[1,"d1eKVOOLVGU7G9e8+5J8ov"],[[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"],[153,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"]]],[299,[1,"53ipIgQFdFtrBLm6Y7q+Qj"]],[299,[1,"f2jk0YGmtIIrlBFk1nTV3M"]],[2,["99UzDZa6pHQ4VtG5vEXqut"]],[2,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[2,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[2,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[2,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[2,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[2,["cdN/iXwS9EWaea7ROuvyKb"]],[2,["0325m7PSVKEJgP6FqjArxY"]],[2,["35oTOUcq5LW6sLAKY0sSNr"]],[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]],[2,["0aSc2CSmNOv7gy3zhm972w","69yyRlXrpMd62pIm5Z3QYa"]],[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["42ZSZDURBPuYxZbUVkytNk"]],[2,["64o7LRB4FEdaQLAV4SPsYe"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["50hrJYbf9IHLRR1ePLEmnJ"]],[2,["e0iQibPDNGYIKJsHwZFwIm"]]],0,[0,1,22,0,1,22,0,1,22,0,1,22,0,1,49,0,5,3,0,1,49,0,1,50,0,1,50,0,1,51,0,1,51,0,1,52,0,1,52,0,1,53,0,1,53,0,1,54,0,1,54,0,1,55,0,1,55,0,1,56,0,1,56,0,1,57,0,1,57,0,1,58,0,1,58,0,1,59,0,1,59,0,1,60,0,1,60,0,1,61,0,1,61,0,1,62,0,1,62,0,1,63,0,1,63,0,1,64,0,5,10,0,1,64,0,1,76,0,5,10,0,1,76,0,1,77,0,5,17,0,1,77,0,-1,47,0,-1,48,0,-1,21,0,-1,34,0,-1,35,0,46,2,0,3,1,0,-2,36,0,-3,37,0,-4,38,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,44,0,13,46,0,13,47,0,13,48,0,13,44,0,13,46,0,3,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,3,0,-2,11,0,-3,7,0,0,3,0,0,3,0,0,3,0,-1,29,0,-2,20,0,-3,33,0,5,10,0,5,17,0,5,27,0,43,36,0,43,37,0,43,38,0,0,5,0,0,5,0,19,5,0,5,5,0,0,5,0,0,5,0,-1,30,0,0,6,0,0,6,0,0,6,0,-2,8,0,-3,9,0,0,7,0,-1,41,0,-2,42,0,-3,18,0,-4,19,0,-5,28,0,0,8,0,0,8,0,19,8,0,0,8,0,-1,31,0,0,9,0,0,9,0,19,9,0,0,9,0,-1,32,0,0,10,0,0,10,0,0,11,0,-1,13,0,-2,39,0,-3,40,0,-4,12,0,0,12,0,-1,27,0,-2,17,0,0,13,0,0,17,0,0,17,0,0,18,0,5,18,0,0,18,0,0,18,0,0,19,0,5,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,27,0,0,27,0,0,28,0,-1,43,0,-2,45,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,1,65,0,1,65,0,1,66,0,1,66,0,1,67,0,1,67,0,1,68,0,1,68,0,1,69,0,1,69,0,3,36,0,1,70,0,1,70,0,1,71,0,1,71,0,1,72,0,1,72,0,3,37,0,1,73,0,1,73,0,1,74,0,1,74,0,1,75,0,1,75,0,3,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,-2,44,0,0,45,0,-2,46,0,10,2,1,6,3,4,0,13,5,6,6,6,6,20,10,6,12,200],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4],[2,20,26,27,28,2,20,26,27,28,2,20,26,27,28,4,11,4,9,9,9,4,4,40],[11,11,11,20,21,11,11,11,20,21,11,11,11,20,21,118,2,38,45,45,67,38,38,37]],[[[58,"P-Charger-1"],[152,"P-Charger-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Charger-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.9,0.9,1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"fbcmmbHnpbkKfFI1OpgAzY",-32,[81,"a8SW1Faz9InYyK96nQrWtr",1,[[75,[2,["fbcmmbHnpbkKfFI1OpgAzY"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.2,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["b2FzVpdT5WjYWZcvkiHil1"]],3],[17,"SM_Model",["_name"],[2,["68I7jgr3Ffeb9oCqZlx96t"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["fbcmmbHnpbkKfFI1OpgAzY"]],[42,"VFX",2,[-36,-37,-38],[3,"bdNGNXBQ9KTLo/bx+BUMIf",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"daMwfGc4NL/auxQL8Q4JCQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"17o8Y07eNF/b1c3HMAfd1L"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"aanBhtfPdPlYQWdTIR4r+Y",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"7aXOGkfxlNB6KIdMBW0PEI"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"312++yuaZFqKnSTOCLaFu5",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"99+kQz+NdFNb+r9ZWyIgMO"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"d73932Ss1LSY14pUMC8EnN",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"4edAx2gE9MXaM6VmiiC0Sv"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"fcSPK6NplLd5EgIKaLsVnz"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"a7lJh34g9IM4Ukk1My+Bit",1,0]],[145,23,[1,"7973OshxtNs6o8Rndp256l"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,496,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4283948521]]],11]]],0,0,[0],[16],[41]],[[[149,[[156,[114,[-22,-23,-24,-25,-26,-27,-28,-29,-30],[[403,0,-5,-4,[[157,[104,"hasEnergy"]]]],[82,0,false,-7,-6,[[91,"exit"]]],[82,0,false,-9,-8,[[91,"exitClicked"]]],[403,0,-11,-10,[[175,1,[104,"hasEnergy"]]]],[82,0,false,-13,-12,[[175,1,[104,"hasEnergy"]]]],[82,0,false,-15,-14,[[157,[104,"hasEnergy"]]]],[82,0,false,-17,-16,[[91,"exit"]]],[115,-19,-18],[82,0,false,-21,-20,[[91,"intro"]]]],-3,-2,-1]]],[{},"exit",4,[101,2],"exitClicked",4,[101,2],"hasEnergy",4,[176,1,true],"intro",4,[101,2]]],[63,"LevelUpButton_Idle",[72,2]],[63,"LevelUpButton_NoEnergyIdle",[72,4]],[63,"LevelUpButton_Intro",[72,0]],[61,"Entry"],[61,"Any"],[63,"LevelUpButton_Exit",[72,1]],[61,"Exit"],[63,"LevelUpButton_Exit Upgrade",[72,3]],[63,"Empty",[186]]],0,[0,29,5,0,30,7,0,31,4,0,14,1,0,15,3,0,14,6,0,15,1,0,14,8,0,15,1,0,14,2,0,15,3,0,14,2,0,15,1,0,14,1,0,15,2,0,14,6,0,15,2,0,14,9,0,15,4,0,14,3,0,15,5,0,-1,4,0,-2,7,0,-3,5,0,-4,3,0,-5,6,0,-6,1,0,-7,8,0,-8,2,0,-9,9,30],[0,0,0,0,0],[18,18,18,18,18],[210,209,211,208,212]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[68,32]],[[[319,"builtin-unlit",[{"hash":3152709001,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[138,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[63,32]],[[[58,"SM_TowerCanonBody_01"],[55,"SM_TowerCanonBody_01",[-2],[3,"71Cqetuz1TIrfKXzSRo+z5",-1,0]],[64,"SM_TowerCanonBody_01",1,[[62,-3,[1,"d9wgbH4UlZC7nUms8aIXK/"],[0],[45],1]],[3,"a0vA4SVVBXN5xQ94MS7y5I",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,257]],[[[480,"FuturaStd-Bold","FuturaStd-Bold.ttf"],-1],0,0,[],[],[]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4285082325]]],11]]],0,0,[0],[16],[41]],[[[58,"P-OverCharger-1"],[152,"P-OverCharger-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"OverCharger-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"7862h+dgVbk5QFM+q8blZa",-32,[81,"87ezNMSW1Pj7eH2L+9FW6e",1,[[75,[2,["7862h+dgVbk5QFM+q8blZa"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.117,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["33p2XKWl9b4LU6vlryeMiU"]],3],[17,"SM_Model",["_name"],[2,["29mesNITFSQo4+2eDCD29U"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["7862h+dgVbk5QFM+q8blZa"]],[42,"VFX",2,[-36,-37,-38],[3,"e7q2ZZEtBG4b05YDeprIFJ",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"07/D0H+hBOtbLTh3kwjVNO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"b9+99mXE5Dp7fls5nddwxi"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"b7hfQ4rSRPtacQqIjZ47YU",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"9ayf/cIaZLp5LmqS/M7KzR"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"e6XGWXmiFHU7OwSIe3qbCm",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"f0AW0tnyVIP7WSDcrl8H1E"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"0fanKKi7VFgpz6lRDDtuCi",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"d9Casq+5JFaJWAQA/CiQiE"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"e7edqMXKhFeoc9iMoSUZ36"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"32M7FxrCVKI7Xft3OiHENL",1,0]],[145,23,[1,"fdeu2EU09DaabKimvdRlii"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,497,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"P-LaserTower-Beam"],[55,"P-LaserTower-Beam",[-2],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[65,"Temp",1,[[357,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[4,0.5],[6],0]],[3,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0],[48],[113]],[[[536,[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[16],[41]],[[[58,"SM_Tower0MG2Body_01"],[227,"SM_Tower0MG2Body_01",[-2],[3,"4d/LLVKgJfRaWh6CVtkvdN",-1,0],[1,2000,0,0]],[64,"SM_Tower0MG2Body_01",1,[[62,-3,[1,"91rnZr2NlU+5mkmycELrbU"],[0],[45],1]],[3,"1bNv8OFqZfVYpfEynFuksV",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,252]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[498,499]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17,-18],[[82,0,false,-5,-4,[[157,[104,"clickYes"]],[91,"exit"]]],[82,0,false,-7,-6,[[175,1,[104,"clickYes"]],[91,"exit"]]],[115,-9,-8],[355,0,false,0,-11,-10,[[91,"intro"]]]],-3,-2,-1]]],[{},"clickYes",4,[176,1,false],"exit",4,[101,2],"intro",4,[101,2]]],[63,"Confirmation Reset_Intro",[72,0]],[61,"Entry"],[61,"Any"],[61,"Exit"],[63,"Confirmation Reset_ExitNo",[72,1]],[63,"Confirmation Reset_ExitYes",[72,2]],[63,"Empty",[186]]],0,[0,29,3,0,30,4,0,31,2,0,14,6,0,15,1,0,14,5,0,15,1,0,14,7,0,15,2,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,3,0,-4,1,0,-5,5,0,-6,6,0,-7,7,18],[0,0,0],[18,18,18],[125,126,127]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17,-18],[[82,0,false,-5,-4,[[157,[104,"clickYes"]],[91,"exit"]]],[82,0,false,-7,-6,[[175,1,[104,"clickYes"]],[91,"exit"]]],[115,-9,-8],[355,0,false,0,-11,-10,[[91,"intro"]]]],-3,-2,-1]]],[{},"clickYes",4,[176,1,false],"exit",4,[101,2],"intro",4,[101,2]]],[63,"ConfirmationPanel_Intro",[72,0]],[61,"Entry"],[61,"Any"],[61,"Exit"],[63,"ConfirmationPanel_ExitNo",[72,1]],[63,"ConfirmationPanel_ExitYes",[72,2]],[63,"Empty",[186]]],0,[0,29,3,0,30,4,0,31,2,0,14,6,0,15,1,0,14,5,0,15,1,0,14,7,0,15,2,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,3,0,-4,1,0,-5,5,0,-6,6,0,-7,7,18],[0,0,0],[18,18,18],[75,76,500]],[[[58,"P-Runner-1"],[152,"P-Runner-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Runner-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"56wQT6ekRbMpczHSaWzAPR",-32,[81,"b6ThQi+45HXJ7pB6s0AduF",1,[[75,[2,["56wQT6ekRbMpczHSaWzAPR"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["313Q+KY7xZ5rxcBAcijvSt"]],3],[17,"SM_Model",["_name"],[2,["4akHIYctheZYlBuf7N3NQy"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["56wQT6ekRbMpczHSaWzAPR"]],[42,"VFX",2,[-36,-37,-38],[3,"bbDJc4k1dGxLjq6D2UwBeq",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"fcPEsGvepKOrTUJB6fcWs6",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"b9P5pZ9LdBOpokTLjsJd8b"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"f4EvwtfG5OEogC0/xgRL4P",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"67o5WKLpNAwIAELigkkEUx"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"beHSMfbpBALKwfas+0RiYc",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[65,"On Death VFX Finished",5,[[118,-55,[1,"28DttneaJIGraTVbpNQ4Be"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"57lJ/zOTBOxr/hzZtVWldU",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"59F1T5lkdGbooM7lYreasT"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"aaf3NUvhhATKlLF3MaFyPO"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"1bDC3INmZDPKSD+VXGoFWT",1,0]],[145,23,[1,"5blfnh3mZEKY21waVs51Q/"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,501,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[77,"SM_CubeDetail_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_CubeDetail_01",[-2],[3,"37AJz6L3dTxa3usvYy5S1i",-1,0]],[64,"SM_CubeDetail_01",1,[[62,-3,[1,"9bRA9bc99UN4/jH8hpKpSw"],[0],[45],1]],[3,"b7OTkN7zJbQaLfYZ0r1fCN",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[502,503]],[[[68,".bin",220353745,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6144,"length":1824,"count":456,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6144,"count":128,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3242543339729309,-0.32377660274505615,0.6501219272613525],"maxPosition",8,[1,0.32335513830184937,0.3234686851501465,1.0834296941757202]]],-1],0,0,[],[],[]],[[[77,"SM_BlockPath_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockPath_03",[-2],[3,"e9QGVwjwRRNYH2wTOhd0ZX",-1,0]],[64,"SM_BlockPath_03",1,[[62,-3,[1,"0fKTIDFQVVW7qzAtQnZb77"],[0],[45],1]],[3,"d5MAXqwNBQ37lQWF+m2Yc7",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[504,505]],[[[68,".bin",3128253248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[77,"SM_TowerThunderBBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerThunderBBody_01",[-2],[3,"9aoAAYJKJR56nsyDVR3xr1",-1,0]],[64,"SM_TowerThunderBBody_01",1,[[62,-3,[1,"a174aNwnFUq6B+C8hupOtt"],[0],[45],1]],[3,"71MWaMDMlRTpG7nD0b8naJ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[506,251]],[[[68,".bin",2163548195,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47088,"length":11256,"count":2814,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47088,"count":981,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4354470372200012,-0.26893654465675354,-0.041434984654188156],"maxPosition",8,[1,0.4385400414466858,0.26907116174697876,0.7261096835136414]]],-1],0,0,[],[],[]],[[[77,"SM_Portal_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",1334893654,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":180,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5758242011070251,-0.13157989084720612,0.02858945168554783],"maxPosition",8,[1,0.5758242011070251,0.436624675989151,1.8215761184692383]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Portal_01",[-2],[3,"8eEEusTA5fJb9F/OdJ08Sj",-1,0]],[494,"SM_Portal_01",1,[[62,-3,[1,"63JiEgzJZUH4IaEhPAqvsa"],[0],[45],1]],[3,"25hFHXaUhVr4TfyO0rKYFI",1,0],[3,-0.12415452954984084,0.6961218663368202,0.6961218663368202,0.12415452954984084],[1,0.972308337688446,0.972308337688446,0.972308337688446],[1,-90.00000000000001,159.77505676497233,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[507,508]],[[[149,[[213,"idleBase",[114,[-6,-7,-8,-9],[[115,-5,-4]],-3,-2,-1]],[213,"spawn",[114,[-25,-26,-27,-28,-29,-30],[[115,-14,-13],[214,0,-16,-15,[[91,"spawn"]]],[634,0,false,-18,-17],[82,0,false,-20,-19,[[91,"spawn"]]],[318,0,-22,-21],[82,0,false,-24,-23,[[91,"spawn"]]]],-12,-11,-10]]],[{},"spawn",4,[101,2]]],[63,"Spawn",[72,1]],[250,"Empty"],[63,"Spawn2",[72,2]],[61,"Entry"],[61,"Entry"],[61,"Exit"],[61,"Any"],[63,"Idle",[72,0]],[61,"Exit"],[61,"Any"]],0,[0,29,7,0,30,6,0,31,4,0,14,8,0,15,4,0,-1,4,0,-2,6,0,-3,7,0,-4,8,0,29,10,0,30,9,0,31,5,0,14,2,0,15,5,0,14,1,0,15,2,0,14,2,0,15,1,0,14,3,0,15,1,0,14,2,0,15,3,0,14,1,0,15,3,0,-1,5,0,-2,9,0,-3,10,0,-4,1,0,-5,2,0,-6,3,30],[0,0,0],[18,18,18],[136,137,137]],[[{"name":"T_UI_Button_Settings","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[509]],[[[76],[55,"SM_TowerCanonBody_01",[-2],[3,"71Cqetuz1TIrfKXzSRo+z5",-1,0]],[64,"SM_TowerCanonBody_01",1,[[62,-3,[1,"d9wgbH4UlZC7nUms8aIXK/"],[0],[45],1]],[3,"a0vA4SVVBXN5xQ94MS7y5I",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[510,257]],[[[68,".bin",1420947421,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20736,"length":7296,"count":1824,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20736,"count":432,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2249182164669037,-0.3272516429424286,0],"maxPosition",8,[1,0.2249182164669037,0.22491823136806488,0.3301343023777008]]],-1],0,0,[],[],[]],[[[77,"SM_TowerCanonBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[58,"P-Shielder-0"],[152,"P-Shielder-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"Shielder-0",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"d8e+2t58lRg7KkNuP6KtFQ",-28,[81,"ccW/QR3s5FuJ9hbrA2GmFi",1,[[75,[2,["d8e+2t58lRg7KkNuP6KtFQ"]],[[57,-27,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[17,"SM_Model",["_name"],[2,["d8e+2t58lRg7KkNuP6KtFQ"]]],[14,["_lpos"],[2,["d8e+2t58lRg7KkNuP6KtFQ"]],[1,0,0,0]],[14,["_lrot"],[2,["d8e+2t58lRg7KkNuP6KtFQ"]],[3,0,0,0,1]],[14,["_euler"],[2,["d8e+2t58lRg7KkNuP6KtFQ"]],[1,0,0,0]],[35,["_materials","0"],[2,["39boRnqgtbo5vuS2ne40Wb"]],3],[17,"SM_Model",["_name"],[2,["45PDynTphbp7AfDJkFxT6/"]]]]],2]],[42,"Scripts",1,[3,-29,-30,-31],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[42,"VFX",2,[-32,-33,-34],[3,"e6dPxkiN9DiYK38qG8I1ir",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-42,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-41]]]],[[11,"P-HP-Bar",["_name"],-35],[5,["_lpos"],-36,[1,207,448.00000000000006,0]],[5,["_lrot"],-37,[3,0,0,0,1]],[5,["_euler"],-38,[1,0,0,0]],[11,"Art",["_name"],-39],[5,["_lpos"],-40,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",6,[-43],[3,"61k08KTwdFQp6Gnmd7inar",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,9,[1,"c2gTn9B2RJgaa8a3Mo7TZT"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-44],[31,5]],[73,"VFX_Death_Shards",6,[-45],[3,"1cupfJzExEXI2WWcv4uspZ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"9b+9coGHxDd48nz53pmpI4"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-46],[31,7]],[73,"VFX_Spawn",6,[-47,-48],[3,"d0zJGFhpVFTYAP9KQdjrWF",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-49],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[630,14,[1,"f3B793wMZKGovjAcwFxNT/"],[[142]],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-50],[8,"cc.ParticleSystem","play",9],[8,"cc.ParticleSystem","play",11],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-51,[1,"5by60KLslI8Yp9MLRmjcsq"],[10,12],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"85NYyP5KVIw5rOErjiILU0",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-52,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,13,[1,"85faTLaH1LVJBcnSLkivNM"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-53],[31,9]],[119,0.3,false,13,[1,"0d8sGCaKxJ+ZUHSBS3ioBR"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-54],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-55],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,22,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[7],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,7,0,5,7,0,13,15,0,3,1,0,32,23,0,34,21,0,35,15,0,5,3,0,5,14,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,24,0,0,2,0,-1,17,0,-2,18,0,-3,4,0,-4,6,0,-1,21,0,0,4,0,3,4,0,-2,14,0,-3,22,0,-4,16,0,-1,9,0,-2,11,0,-3,13,0,1,8,0,1,8,0,1,8,0,1,8,0,1,25,0,1,25,0,19,18,0,3,7,0,-1,10,0,7,10,0,-1,12,0,7,12,0,-1,19,0,-2,20,0,-1,15,0,5,16,0,0,16,0,0,17,0,7,19,0,7,20,0,-1,23,0,10,1,3,6,5,7,6,24,55],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,511,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[480,"AGENCYB","AGENCYB.ttf"],-1],0,0,[],[],[]],[[[58,"SM_TowerPlasmaQBody_01"],[55,"SM_TowerPlasmaQBody_01",[-2],[3,"19dqAvhYZW66LFXyVsSUYV",-1,0]],[64,"SM_TowerPlasmaQBody_01",1,[[62,-3,[1,"d1WspVTtle/Jp16o0xqn79"],[0],[45],1]],[3,"fbzvYb5AVdtq1H47hzSAAe",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,258]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17],[[115,-5,-4],[82,0,false,-7,-6,[[157,[104,"inScene"]]]],[82,0,false,-9,-8,[[175,1,[104,"inScene"]]]],[82,0,false,-11,-10,[[157,[104,"inScene"]]]]],-3,-2,-1]],[213,"Idle Layer",[114,[-23,-24,-25,-26],[[115,-22,-21]],-20,-19,-18]]],[{},"inScene",4,[176,1,false]]],[63,"Pointer_Intro",[72,0]],[61,"Entry"],[63,"Pointer_Exit",[72,1]],[63,"Empty",[186]],[61,"Entry"],[61,"Exit"],[61,"Any"],[61,"Exit"],[61,"Any"],[63,"Pointer_Idle",[72,2]]],0,[0,29,7,0,30,6,0,31,2,0,14,4,0,15,2,0,14,1,0,15,4,0,14,3,0,15,1,0,14,1,0,15,3,0,-1,2,0,-2,6,0,-3,7,0,-4,1,0,-5,3,0,-6,4,0,29,9,0,30,8,0,31,5,0,14,10,0,15,5,0,-1,5,0,-2,8,0,-3,9,0,-4,10,26],[0,0,0],[18,18,18],[259,260,146]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,3120562175],"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[138,32]],[[[77,"SM_Tower01HKOBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_Tower01HKOBody_01",[-2],[3,"754aHt1OpZU5MrqxM/Ip4m",-1,0]],[64,"SM_Tower01HKOBody_01",1,[[62,-3,[1,"46S3F1J79Rz4XvfNv5iTfa"],[0],[45],1]],[3,"394Llq4YJQGJQtg3lCaMlI",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[512,246]],[[[68,".bin",2786443526,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27024,"length":9300,"count":2325,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27024,"count":563,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2534458637237549,-0.6484761238098145,1.065432986280257e-8],"maxPosition",8,[1,0.2534458637237549,0.3838222026824951,0.44677677750587463]]],-1],0,0,[],[],[]],[[[58,"P-Cannon-Tower"],[370,"P-Cannon-Tower",64,[[-11,-12,[98,"Events",-14,[3,"ef4CiMUqFFBLxbigVGcbkS",-13,0]],-15,-16],1,1,4,1,1],[-10],[240,"c7FBgV+GNP8JXw9YieWPKB",-9,0,[-1,-2,-3,-4,-5,-6,-7,-8]]],[322,"Head Pivot",[-17,-18,-19,-20,-21,-22,-23,-24],[3,"8aAB0jLY5MWZXHyr3JbC+S",1,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[141,"Tower Attack",[[692,3,2,2,1,-28,[1,"46n88TmQFJgZL3l6vHb/n1"],1,-27,-26,[-25],33,41]],[3,"f40ywYz1xDCq70ENky8ahk",1,0]],[227,"Head",[2,-29,-30,-31,-32],[3,"adz0F6B8NHH7q2XNNslumG",1,0],[1,0,0.4,0]],[2,["424JMWZcNT+7LUIxhmggm+"]],[42,"Scripts",1,[3,-33,-34,-35,-36],[3,"395/jqomdNs4i+MZIAv9Bl",1,0]],[325,"Art",1,[-38,-39],[[210,-37,[1,"b6WTiqI1JLQKJpWDVCDXcn"],[30,31],32]],[3,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[30,0,null,2,[22,"71Cqetuz1TIrfKXzSRo+z5",-44,[49,"2apbKhEaRH9q60s+SY4v1z",1,[[11,"SM_TowerCanonBody_01",["_name"],-40],[5,["_lpos"],-41,[1,0,0,0]],[5,["_lrot"],-42,[3,0,0,0,1]],[5,["_euler"],-43,[1,0,0,0]],[35,["_materials","0"],[2,["d9wgbH4UlZC7nUms8aIXK/"]],5]]],4]],[30,0,null,2,[22,"424JMWZcNT+7LUIxhmggm+",-45,[49,"4baFVhGZJJXI4/2YGNo2W3",1,[[11,"SM_TowerSmash3RBody_01",["_name"],5],[5,["_lpos"],5,[1,0,0,0]],[5,["_lrot"],5,[3,0,0,0,1]],[5,["_euler"],5,[1,0,0,0]],[35,["_materials","0"],[2,["6dld1XsrhbprQRWAgl+86p"]],7],[11,false,["_active"],5],[5,["_lscale"],5,[1,1,1,1]]]],6]],[30,0,null,2,[22,"93NMATgvJXN5P2Z0Pbx6xd",-51,[49,"8c7nZwMMBOPrhH04yHD4Pq",1,[[11,"SM_TowerCometTBody_01",["_name"],-46],[5,["_lpos"],-47,[1,0,0,0]],[5,["_lrot"],-48,[3,0,0,0,1]],[5,["_euler"],-49,[1,0,0,0]],[35,["_materials","0"],[2,["36LCcIeKVRp7Mac4l4WlzY"]],9],[11,false,["_active"],-50]]],8]],[2,["93NMATgvJXN5P2Z0Pbx6xd"]],[30,0,null,2,[22,"76kmy9MSZU7qIHreg7REJV",-57,[49,"f0rq2kGH9BVIOzx6vwUFxp",1,[[11,"SM_TowerH311Body_01",["_name"],-52],[5,["_lpos"],-53,[1,0,0,0]],[5,["_lrot"],-54,[3,0,0,0,1]],[5,["_euler"],-55,[1,0,0,0]],[35,["_materials","0"],[2,["d5Ph66/6xbPK4Q72/PB8zz"]],11],[11,false,["_active"],-56]]],10]],[2,["76kmy9MSZU7qIHreg7REJV"]],[30,0,null,2,[22,"b8JcZpYRhbA7dBnVFp97b+",-63,[49,"f9oFE+OLhGkaOipP0J6xB0",1,[[11,"SM_TowerS4RBody_01",["_name"],-58],[5,["_lpos"],-59,[1,0,0,0]],[5,["_lrot"],-60,[3,0,0,0,1]],[5,["_euler"],-61,[1,0,0,0]],[35,["_materials","0"],[2,["aa2p+GekNcwr3d84smoPpV"]],13],[11,false,["_active"],-62]]],12]],[2,["b8JcZpYRhbA7dBnVFp97b+"]],[30,0,null,2,[22,"6ba5eX4SReyqm+Vbwgfquh",-69,[49,"448OA+EgZLjIAV7MPAl44Y",1,[[11,"SM_TowerMeteorUBody_01",["_name"],-64],[5,["_lpos"],-65,[1,0,0,0]],[5,["_lrot"],-66,[3,0,0,0,1]],[5,["_euler"],-67,[1,0,0,0]],[35,["_materials","0"],[2,["2aeozPTBpe75ML5ovX4gHo"]],15],[11,false,["_active"],-68]]],14]],[2,["6ba5eX4SReyqm+Vbwgfquh"]],[30,0,null,2,[22,"33sM9enERVxYZcocgwSPwR",-75,[49,"2c5InsZIxAw54BbRBHbLJS",1,[[11,"SM_TowerStarfallBody_01",["_name"],-70],[5,["_lpos"],-71,[1,0,0,0]],[5,["_lrot"],-72,[3,0,0,0,1]],[5,["_euler"],-73,[1,0,0,0]],[35,["_materials","0"],[2,["c2i6M6mIdSAJVEUjqztCnG"]],17],[11,false,["_active"],-74]]],16]],[2,["33sM9enERVxYZcocgwSPwR"]],[2,["71Cqetuz1TIrfKXzSRo+z5"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[408,"cannontower",3,"cannontower",1,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[140,"cannontower","cannontower-plus",4,-1,"Level Up (4)",8],[193,"cannontower-plus","smash.3r",5,"Smash.3R (5)",9],[140,"cannontower-plus","comet-t",5,1,"Comet-T (5)",10],[140,"smash.3r","smash.3r-plus",6,-1,"Level Up (6)",9],[140,"smash.3r-plus","s.4r",8,2,"S.4R (8)",14],[140,"smash.3r-plus","h3ll",8,3,"H3LL (8)",12],[140,"s.4r","s.4r-plus",9,-1,"Level Up (9)",14],[140,"h3ll","h3ll-plus",9,-1,"Level Up (9)",12],[140,"comet-t","comet-t-plus",6,-1,"Level Up (6)",10],[140,"comet-t-plus","meteor-u",8,4,"Meteor-U (8)",16],[140,"comet-t-plus","starfall",6,5,"Starfall (6)",18],[140,"meteor-u","meteor-u-plus",9,-1,"Level Up (9)",16],[140,"starfall","starfall-plus",9,-1,"Level Up (9)",18],[140,"-","cannontower",-1,-1,"-",8]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","towerDestroyed",3]]],[418,"TEMP-Model-Base",false,7,[-77],[[95,"Cube<ModelComponent>",-76,[1,"7bG1DGF3VI0JZiYz5rIjhD"],[2],[45],3]],[3,"085+2asOdGZYXXlS21L1NF",1,0],[1,0.5,0.5,0.5]],[42,"Cannon Tower Model",7,[4,-78],[3,"0asWtFjFNIhrWk5ZT8ESYR",1,0]],[273,"Bullet_Muzzle_Ring",512,4,[-79],[3,"40ZckTtjBCRofnNXry6G6r",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[189,"Bullet_Muzzle_Fragments",4,[-80],[3,"68UqoyA5xGLYLkmj0PFCsi",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[189,"Bullet_Muzzle_Flash_A",4,[-81],[3,"16nFLyiHVOHreKv6xR01kw",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[419,"VFX_TowerUpgrade",64,4,[-82,-83],[3,"e7MfxMqbpLeK9xgRaH0TIK",1,0],[1,0,0.158,0]],[243,false,[1,"34axcLrxpNPoYeRmEfqFBX"],[[24,null],6,0],[66,[4,3668826087]],[27,3,0.03,0.08],[0],[0],[27,3,0.2,1.5],[0],[0],[54,3,1.5707963267948966],[0],[27,3,0.9,1.6],[0],[4,3],[0],[25,true,[337,3,[50,[[44,0],[12,255,0.04910714285714286],[12,0,1]]],[50,[[44,0],[12,255,0.06696428571428571],[12,0,1]]]]],[373,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-1.7453292519943295,1.7453292519943295]],[28,[0],[0]],[24,[0],[0],[6],[6],-84],[31,25]],[243,false,[1,"1dP6VpE6RHwL3Ew5Ht9UFe"],[[26,null],6,0],[336,2,[4,2285688290],[4,2318556644]],[27,3,1.8,2.8],[0],[0],[0],[0],[0],[0],[0],[4,3],[0],[4,2],[0],[25,true,[20,1,[50,[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.41794871794871796,1],[[7,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[7,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-85],[31,27]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-86,[49,"14r4/EoxNPTZOfvqwJZymE",1,[[11,"SM_TowerBase_01",["_name"],21],[5,["_lpos"],21,[1,0,0,0]],[5,["_lrot"],21,[3,0,0,0,1]],[5,["_euler"],21,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],29]]],28]],[112,"Physics",32,1,[[-87,[402,4,-88,[1,"97e/OxmxpCU4rWbyCxoizi"]]],1,4],[3,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[42,"VFX",6,[-89,-90],[3,"c4pQRqFbpCoq07gB0Ki9/Q",1,0]],[141,"Shoot SFX",[[139,"sfx-towers-cannon-shoot",-91,[1,"34jpi96CJH4LCfi8bG0Dz0"]]],[3,"55MMh1S+ZGALk/v/emywL5",1,0]],[420,"Cube",23,[[95,"Cube<ModelComponent>",-92,[1,"97Ufor9GlN64W+hZraFqg3"],[0],[45],1]],[3,"c7K8ONC+dATbpE1sB25eRu",1,0],[1,0,0.75,0],[1,0.5,0.5,0.8]],[365,"Bullet Spawn Pivot",2,[3,"3anVnTxohH2pXT2TED77tE",1,0],[1,0,0.223,0.269],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[129,0.2,false,false,1,25,[1,"79Rzr+uvdNF7T2Pvq1Jfvo"],[[18,null],6,0],[66,[4,2986344447]],[4,0.6],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.09598214285714286,[4,4294753015]],[18,0.3147321428571428,[4,4293678506]],[18,0.8191964285714286,[4,4283436566]]],[[44,255],[12,255,0.19642857142857154],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.4846153846153846,1],[[7,2,0.14814814814814814,2.7575757575757565,2.7575757575757565],[7,2,0.9333333333333332,0.37555555555555636,0.37555555555555636],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-93],[31,19]],[86,0.5,false,false,26,[1,"e1Fd06BhRL8oiNVSMV9hig"],[[20,null],6,0],[6],[27,3,0.1,0.3],[0],[0],[27,3,0.2,0.8],[0],[0],[0],[0],[27,3,0.3,0.5],[54,3,0.3],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[136],[18,0.05133928571428574,[4,4293175768]],[18,0.2767857142857143,[4,4291450006]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[279,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-94],[31,21]],[129,0.3,false,false,1,27,[1,"2cjMEBy9pBeJgv0nVoW0M3"],[[22,null],6,0],[6],[4,1.5],[4,1],[0],[0],[0],[0],[0],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.11830357142857142],[18,0.4151785714285714,[4,4293678518]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.6512820512820513,1],[[40,2,1,0.027777777777778234,1,0.027777777777778234,1],[7,2,0.6814814814814815,-1.0432098765432094,-1.0432098765432094],[52,2,-3.020202020202019,1,-3.020202020202019,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-95],[31,23]],[56,"VFX_TowerGlow",28,[29],[3,"75Y823RixCSo81r2/e9EZx",1,0]],[56,"VFX_TowerDots",28,[30],[3,"aaRxgnQTJGu6jkeiVFavd8",1,0]],[42,"Base",24,[-96],[3,"67LrFav61MSKViQ3O8Fp51",1,0]],[42,"Base Pivot",42,[31],[3,"81yE+LS/NEFblvHUGGg48U",1,0]],[111,true,3,32,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[693,0.6,0,0,[1,"98A8nrqfpPmLQXeM5sAbvh"],22,[[162,"cannontower",34],[162,"smash.3r",35],[162,"s.4r",36],[162,"h3ll",37],[162,"comet-t",38],[162,"meteor-u",39],[162,"starfall",40]],36,[[8,"cc.ParticleSystem","play",25],[8,"cc.ParticleSystem","play",26],[8,"cc.ParticleSystem","play",27],[8,"cc.Animation","play",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",34]]],[56,"Cannon Attack VFX",33,[45],[3,"87QaRbqdVFaZ4sVn71oDNo",1,0]],[33,"Aura VFX Controller",64,33,[[409,-97,[1,"e0WsZoaU5E+ZFgS3xEACa3"],22,[29,30]]],[3,"6cWFGwLYtJdLMhm/ktb0YR",1,0]],[42,"Audio",6,[34],[3,"5cXLYlxJpJu45TjPkQidod",1,0]],[320,[1,"58hT8GWIRPNaY6fJrBaaJb"],4],[56,"Look At Target",6,[49],[3,"889oxCJrBMWLmFe3eY/1Gk",1,0]],[65,"Upgrade Handler",6,[[694,1,-98,[1,"f8KyFnbQZI8byKuDWSm+zV"],22,[[8,"a7f6bBnGXlLbINkQ05pYpA3","setShootFrequency",3]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","setShootFrequency",3]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","setRange",3]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","setExplosionRange",3]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","setCCTargets",3]],[[8,"a7f6bBnGXlLbINkQ05pYpA3","setBurn",3]]]],[3,"36JqN9SdFIwpXf+iY/w2Zw",1,0]],[144,"Debug",32,1,[-99],[3,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[302,"Radius Sphere",false,32,52,[[95,"Sphere<ModelComponent>",-100,[1,"0cZhNLD85HH5MFbxfIpZNi"],[42],[45],43]],[3,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,3,3,3]]],0,[0,-1,8,0,-2,9,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,31,0,3,1,0,-1,22,0,-1,7,0,-2,6,0,3,1,0,6,1,0,-4,32,0,-5,52,0,-1,8,0,-2,9,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,36,0,-1,49,0,51,45,0,52,44,0,0,3,0,-2,25,0,-3,26,0,-4,27,0,-5,28,0,-2,51,0,-3,50,0,-4,48,0,-5,33,0,0,7,0,-1,23,0,-2,24,0,1,20,0,1,20,0,1,20,0,1,20,0,3,8,0,3,9,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,3,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,3,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,3,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,3,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,3,18,0,0,23,0,-1,35,0,-2,42,0,-1,37,0,-1,38,0,-1,39,0,-1,40,0,-2,41,0,7,29,0,7,30,0,3,31,0,-1,44,0,0,32,0,-1,46,0,-2,47,0,0,34,0,0,35,0,7,37,0,7,38,0,7,39,0,-1,43,0,0,47,0,0,51,0,-1,53,0,0,53,0,10,1,2,6,4,3,6,6,4,6,24,29,0,40,30,0,41,31,6,43,34,6,48,45,0,46,49,0,50,100],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,45],[-1,12,-1,12,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,4,9,-1,-2,17,53,37,37,37,37,37,37,37,83,-1,12,40,84],[513,40,228,40,82,1,83,1,84,1,85,1,86,1,87,1,88,1,14,13,7,5,35,33,7,5,7,5,43,1,58,44,58,250,69,69,69,514,69,69,69,515,141,19,37,69]],[[[149,[[156,[114,[-10,-11,-12,-13,-14,-15],[[115,-5,-4],[214,0,-7,-6,[[91,"notCompleted"]]],[214,0,-9,-8,[[91,"complete"]]]],-3,-2,-1]]],[{},"complete",4,[101,2],"notCompleted",4,[101,2]]],[250,"Empty"],[61,"Entry"],[61,"Exit"],[61,"Any"],[63,"Star_Empty_Intro",[72,0]],[63,"Star_Gold_Intro",[72,1]]],0,[0,29,4,0,30,3,0,31,2,0,14,1,0,15,2,0,14,5,0,15,1,0,14,6,0,15,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,1,15],[0,0],[18,18],[185,186]],[[{"name":"UI_Degrade_Light","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[516]],[[[58,"P-Shielder-1"],[152,"P-Shielder-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"Shielder-1",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"6aGvFRzrhcy6Pvc0BNb/OY",-32,[81,"34WZxUbadHVq2T1lkTRiL7",1,[[75,[2,["6aGvFRzrhcy6Pvc0BNb/OY"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["b1gGjB+ixTeo5mURKnQwqu"]],3],[17,"SM_Model",["_name"],[2,["cdMyiT4ZBYyoo8D8TLDR7U"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["6aGvFRzrhcy6Pvc0BNb/OY"]],[42,"VFX",2,[-36,-37,-38],[3,"e3fMtzbZZFM60zevO1/LpO",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"85aTtJf8ZHJY0Yjl9hKJiB",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"a2tTo/ZUFKcLg5wwLes5gf"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"c9oR6xJ79JnrYVLNGhWEWp",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"7bLQWxTAZLfLoqxTgiZLFu"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"a3QtghbXVCM6BxOrtuOmDQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[65,"On Death VFX Finished",5,[[118,-55,[1,"25g+wzznBBuqSvIHX8VeNS"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"c1+Dxs8PJFFY00wmp2+H/O",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"97fFIOQB5DL7QNygxzb5md"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"4b/qpMl9ZPZr7UuqbZ/OYR"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,23,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,517,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"P-TheGang2"],[228,"P-TheGang2",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30],[3,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[188,"Art",1,[-32,-33,-34,2],[[88,true,-31,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-35,-36,-37,-38,-39],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-40],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"77rOjdJ21R1KKIOlYM4BQr",-49,[81,"b0zVPKtXNDBqBPhFVjhVsT",1,[[75,[2,["77rOjdJ21R1KKIOlYM4BQr"]],[[57,-48,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-41],[5,["_lpos"],-42,[1,0,0,0]],[5,["_lrot"],-43,[3,0,0,0,1]],[5,["_euler"],-44,[1,0,0,0]],[5,["_lscale"],-45,[1,0.9,0.9,0.9]],[35,["_materials","0"],[2,["407oAt4+lSGbdC+vtR9xCJ"]],3],[11,"SM_Model",["_name"],-46],[5,["_lscale"],-47,[1,0.7,0.7,0.7]]]],2]],[2,["77rOjdJ21R1KKIOlYM4BQr"]],[141,"Spawn Enemies",[[235,-51,[1,"04N/OeyoRFkJL647STjw+j"],-50]],[3,"299KP2UGxDH48w1UfpNTfY",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-59,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-58]]]],[[11,"P-HP-Bar",["_name"],-52],[5,["_lpos"],-53,[1,207,448.00000000000006,0]],[5,["_lrot"],-54,[3,0,0,0,1]],[5,["_euler"],-55,[1,0,0,0]],[11,"Art",["_name"],-56],[5,["_lpos"],-57,[1,0,0,0]]]],39]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",2,[-60],[3,"08xCVrxlxEhq50E/NF55eY",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"85Rhrv4bxC9Idj1S+Tsdep"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-61],[31,5]],[73,"VFX_Death_Shards",2,[-62],[3,"01JvLqmMhDBa4s8CIc/iMl",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,13,[1,"6c2cTofuBCBZlCca6zWUXz"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[28,[0],[0]],[24,[0],[0],[6],[6],-63],[31,7]],[73,"VFX_Spawn",2,[-64,-65],[3,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",4,[-66],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-67],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]],1],[65,"On Death VFX Finished",4,[[118,-68,[1,"67W+7l9PZAA4LQkNbOeiI6"],[12,14],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"54py1+24lEvosm8pG/dm8g",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-69,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["41Jrlqi2tdbKkcy+f7Uc1y"]],[120,0.3,false,15,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-70],[31,9]],[119,0.3,false,15,[1,"36ejVK11FPAJNrDXjhhqb6"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-71],[31,11]],[56,"VFX-BossExplosion",2,[-72],[3,"b3i7PVkoZDJbVrCr3/8fIH",1,0]],[86,0.2,false,false,24,[1,"3cIqBt2hlNc7PS6I28JLfI"],[[12,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-73],[31,13]],[109,"VFX-Flash",2,[-74],[3,"far0d2xtZGg76X1RiZlptu",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,26,[1,"29ObAiEIZPTpEKMWJ8wJRd"],[[14,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-75],[31,15]],[109,"VFX_SprayOut",2,[-76],[3,"daTbKVTSJHd6a2s5CtnEAd",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,28,[1,"01BYfFtOlFgLlsTKgfiqGt"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-77],[121,1,0.1,17]],[56,"VFX_Explosion2",2,[-78],[3,"a6ycLOVt5Nm6UmGywbn8QG",1,0]],[86,1.5,false,false,30,[1,"23U2rlcfdCHbDARkWAMMpU"],[[18,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-79],[31,19]],[109,"VFX_SprayOut2",2,[-80],[3,"e8WEpBD4hNJ5kJMUsDXN2O",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,32,[1,"bbCigUyOxCaJH7inZq0aTt"],[20],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-81],[121,1,0.1,21]],[109,"VFX-ScreenTone",2,[-82],[3,"2d+wQP1/hEjK1Onmy5gI2V",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,34,[1,"e2sTsJQeZA7KNO759raE3U"],[[22,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-83],[31,23]],[56,"VFX-CircleIn",2,[-84],[3,"59qjoNyUxJQL5y+7NhHfn8",1,0]],[86,0.4,false,false,36,[1,"20Celuqx5DULWiADZOYOHv"],[[24,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-85],[31,25]],[56,"VFX-RingIn",2,[-86],[3,"27E7PxAQJPKJjOofpk8Ytn",1,0]],[86,0.4,false,false,38,[1,"86QNokLjtAg63pJbt5Qozy"],[[26,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-87],[31,27]],[109,"VFX_SprayIn",2,[-88],[3,"56uTKIQNZJW5CaUHwPatNd",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,40,[1,"03c48BEJFG1IVbfRfXb1Gk"],[28],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-89],[121,1,0.5,29]],[109,"VFX-ChargeFlash",2,[-90],[3,"2cvT3Wk0VAIq41coA3JDNZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,42,[1,"55XvcIcyROGK2MvdRABg8f"],[30],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-91],[31,31]],[109,"VFX-Sparkle",2,[-92],[3,"37DlejBYRPyb3Br/ZWpkRv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,44,[1,"3cA5Wmv9FBMrd/jAwxni0G"],[[32,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-93],[31,33]],[109,"VFX_LightRay",2,[-94],[3,"1c0/9e5fVF17wdh6mQkfPi",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,46,[1,"0fTCj3c41HPojBtTq6g0Km"],[34],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-95],[31,35]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",4,[8],[3,"75f0ZlA1tFNbD5bXAVHqFR",1,0]],[264,"TheGang2",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,48],[265,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[56,"Stun",4,[51],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,5,9,0,13,17,0,3,1,0,-1,50,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,53,0,-1,11,0,-2,13,0,-3,15,0,-4,24,0,-5,26,0,-6,28,0,-7,30,0,-8,32,0,-9,34,0,-10,36,0,-11,38,0,-12,40,0,-13,42,0,-14,44,0,-15,46,0,0,3,0,-1,19,0,-2,20,0,-3,6,0,-1,5,0,-2,16,0,-3,52,0,-4,18,0,-5,49,0,-1,48,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,1,21,0,1,21,0,0,6,0,3,6,0,41,50,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,54,0,1,54,0,19,20,0,3,9,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,22,0,-2,23,0,-1,17,0,5,18,0,0,18,0,0,19,0,7,22,0,7,23,0,-1,25,0,7,25,0,-1,27,0,7,27,0,-1,29,0,7,29,0,-1,31,0,7,31,0,-1,33,0,7,33,0,-1,35,0,7,35,0,-1,37,0,7,37,0,-1,39,0,7,39,0,-1,41,0,7,41,0,-1,43,0,7,43,0,-1,45,0,7,45,0,-1,47,0,7,47,0,10,1,2,6,3,8,6,49,9,6,53,50,32,51,51,0,52,95],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,142,1,27,26,16,25,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,8,24]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,3187702527],"emissive",8,[4,4278190264]],{},{}],11,0,0]]],0,0,[0],[16],[77]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"packable":true}],[2],0,[0],[33],[518]],[[[68,".bin",943121267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":40992,"length":12060,"count":3015,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":40992,"count":854,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3001744747161865,-0.28390058875083923,-7.990747263875164e-8],"maxPosition",8,[1,0.29635441303253174,0.2936505079269409,0.8477445840835571]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerPuls3rBody_01",[-2],[3,"bbqAjalhlRdoiOW0dhSoUC",-1,0]],[64,"SM_TowerPuls3rBody_01",1,[[62,-3,[1,"1fCLEjPmBTW6Y7Y/vYCPCL"],[0],[45],1]],[3,"97vFv7UilZ+5/FaYF3Os3e",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[519,261]],[[[77,"SM_TowerPuls3rBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[34,32]],[[[68,".bin",558920944,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30012208223342896,-0.2995493412017822,0.6501219272613525],"maxPosition",8,[1,0.2992830276489258,0.2995187044143677,0.7541868090629578]]],-1],0,0,[],[],[]],[[[77,"SM_CubeDetail_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_CubeDetail_03",[-2],[3,"deBsgn88dR46R0UuPdg7fm",-1,0]],[64,"SM_CubeDetail_03",1,[[62,-3,[1,"95XT6Y7ppZgLhssma9tJt7"],[0],[45],1]],[3,"fcdmTYr61QxrM7T/OeRr2j",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[520,521]],[[[58,"Holder_TutorialPointer"],[137,"Holder_TutorialPointer",33554432,[-6,-7],[[48,-2,[1,"b9PfOAZgFN6p0BKEDc5YB7"]],[383,false,true,-3,[1,"d9aA9XKDNDxaXBmqxi8M0X"],[6,7,8],9],[627,-4,[1,"ae3DV85ZpCVIN/Ff+LHNbZ"],10],[94,-5,[1,"f0QX8qm+pEO6NGuROfxZtL"]]],[3,"a6yEVxZJJG26dGeFT9ITlD",-1,0]],[83,"VFX Glow",33554432,1,[-9,-10,-11,-12],[[9,-8,[1,"9eXTj+6GFMmJ+DrwDEAwS7"],[5,52,52]]],[3,"3d4OXdCCREjLpeUZ185I/w",1,0]],[137,"Mask",33554432,[-16],[[9,-13,[1,"64/pLw+hBMqrR6wexzhn6n"],[5,40,40]],[695,-14,[1,"fe+g6neQ1E2K4KV3Cf5FVm"]],[172,45,40,40,1,-15,[1,"512qGMvHJHEKBqN9iYIt4O"]]],[3,"37XAMfFZtLaoIlD0b/rdz1",1,0]],[83,"Outline",33554432,1,[3],[[9,-17,[1,"d9EiA0ZrVNUKmHfGiJKs9p"],[5,40,40]],[46,1,0,-18,[1,"8cfm9j6IpMcL8oZh4ba1ye"],[4,4280250623],5]],[3,"1fwO7+2OVOQbfeOE872+jR",1,0]],[33,"Outline 01",33554432,2,[[9,-19,[1,"65krB14ZBHq5oRYV0/E85K"],[5,54,54]],[46,1,0,-20,[1,"41wskz7/JLNJjUm9FZJGod"],[4,3036676095],0]],[3,"3b0++ptxZAsYMC7V7tB1mj",1,0]],[33,"Outline 02",33554432,2,[[9,-21,[1,"92VmHWebNJybjapv4+OImX"],[5,62,62]],[46,1,0,-22,[1,"60kIgjxUFLbJR+nCJxXz5a"],[4,2030043135],1]],[3,"16fpiNKaJI4Jr+Kmez8b43",1,0]],[33,"Outline 03",33554432,2,[[9,-23,[1,"c2718n8m1A2IJfoGKKH0ri"],[5,70,70]],[46,1,0,-24,[1,"6dabJrM19EiJFnj8u7PCk6"],[4,1023410175],2]],[3,"16bi+c369EyLkumh1TZTB4",1,0]],[33,"Outline 04",33554432,2,[[9,-25,[1,"37eMQdkAZL74DfnvxhveYq"],[5,70,70]],[46,1,0,-26,[1,"ad9xS5a6pOnY2SmfNqXvU2"],[4,1023410175],3]],[3,"fa1NwgeYhL142Sdcn5hZ6m",1,0]],[33,"Pointer_Outline",33554432,3,[[9,-27,[1,"c9uiQ7v79B+qTaxOAclA7O"],[5,48,48]],[211,0,false,-28,[1,"d1m6Y1lvNGdIQGY0LApDe4"],[4,4280250623],4]],[3,"1fo2oAL5pNHZfIBGAHTJOW",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,4,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,0,3,0,0,3,0,0,3,0,-1,9,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,10,1,3,6,4,28],[0,0,0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,-1,-2,-3,17,24],[18,18,18,18,522,4,146,259,260,146,523]],[[[205,[{"rasterizerState":{"shadeModel":1,"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[524,41]],[[[58,"SM_TowerGunBody_01"],[227,"SM_TowerGunBody_01",[-2],[3,"1bEwzooBRYiLITAV26DhPq",-1,0],[1,2000,0,0]],[64,"SM_TowerGunBody_01",1,[[62,-3,[1,"eee7bsTeFUS4J0Fkyz/23b"],[0],[45],1]],[3,"40sd+ebzdfxaPzPgpSi8i0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,262]],[[[58,"SM_TowerPuls3rBody_01"],[55,"SM_TowerPuls3rBody_01",[-2],[3,"bbqAjalhlRdoiOW0dhSoUC",-1,0]],[64,"SM_TowerPuls3rBody_01",1,[[62,-3,[1,"1fCLEjPmBTW6Y7Y/vYCPCL"],[0],[45],1]],[3,"97vFv7UilZ+5/FaYF3Os3e",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,261]],[[[58,"Holder_Tower Button 01"],[170,"Holder_Tower Button 01",33554432,[-24,-25,-26,-27,-28,-29],[[[9,-2,[1,"25bZG6qtVDLqKUsnFbkHph"],[5,70,70]],[190,false,-3,[1,"8bBj36fMNOUZFpmts6EkfF"],[10,11,12,13,14,15,16,17]],-4,-5,[637,1,-18,[1,"94p6swXrpO+Zjkt35b0SDd"],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-17]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-16]],-15,[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,true",-14]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,false",-13]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-12]],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-11]],[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-10]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","select,true",-9]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","select,false",-8]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","locked,true",-7]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","locked,false",-6]]],[356,-20,[1,"057Isi53xPlon1QQ7CeoD3"],-19],[107,-22,[1,"55Bs3F+NlNNZr+da6KbvRs"],-21],[57,-23,[1,"cdPwqjUQxFCr3/WBq2ESBP"]]],4,4,1,1,4,4,4,4],[3,"0fJEdVoOpA/qcZPGFboeiN",-1,0],[1,-100,10,0]],[53,"Holder_Energy Cost",33554432,1,[-32,-33,-34,-35],[[9,-30,[1,"1bYw0vYBlNNLRWjiaMIHt6"],[5,44,44]],[23,0,-31,[1,"e93959MTBBpomAW/Y/+XxF"],[4,4282974275],9]],[3,"b88SOLEf1G8Llh8jZIyZGc",1,0],[1,0.729,-20.353,0]],[134,"Text_Cost",33554432,2,[[[9,-36,[1,"efhgosR0JK/Jm5K2Xml5tk"],[5,30,30]],-37,[351,false,1,-38,[1,"1460ImerxABY/nzyvkIux4"],[4,4281532425]],[96,-40,[1,"18Ab96S/NIhqWdzUNKKVoa"],-39]],4,1,4,4],[3,"88LfI7dS1NjrL8YcAEfH/E",1,0]],[238,"Panel_Lock",false,33554432,2,[-44,-45],[[9,-41,[1,"62xNBVLJlGXoECOKHDOYWa"],[5,44,44]],[23,0,-42,[1,"983Qz8AEVEKZr7ggufIeNR"],[4,4282187811],8],[128,45,20,20,-43,[1,"a56ogD9YxMk6TGd+tobCok"]]],[3,"07J8NL3JNE+J1JbZaH9Gkn",1,0]],[238,"Select_VFX",false,33554432,1,[-48,-49],[[48,-46,[1,"b6oLel7jpOKZZoilUXwEea"]],[94,-47,[1,"610z2KPIdBZbuaMlBZs7lz"]]],[3,"e9EkiL/+1I4KWEMpMRNY1g",1,0]],[112,"Text_Tower Name",33554432,1,[[[9,-50,[1,"efnxDkWnFAoqsoPFJA8RnK"],[5,64,30]],-51,[96,-53,[1,"e2gItzYPxPsabMF8tROWDM"],-52]],4,1,4],[3,"342psUUPBA4bgrW+GKuf1H",1,0],[1,0,17.208,0]],[33,"Button_Color",33554432,1,[[9,-54,[1,"a1URUecQZFMKrW1v6gLiJw"],[5,70,70]],[23,0,-55,[1,"1cdt9yu/dBB7zqOsgHxDIs"],[4,4293450459],3]],[3,"a6az63RfpIg6Gg/gQf45Dh",1,0]],[33,"Panel_Outline",33554432,2,[[9,-56,[1,"a8ssls5EhOSK0Ed0RNyOvE"],[5,44,44]],[23,0,-57,[1,"51kUbKOopKY7AQKPP9rWsY"],[4,4293450459],4],[128,45,20,20,-58,[1,"6e1XzmtapDe7vJR5MKsblI"]]],[3,"b4p3nx06pA3q2OOmIuPIqT",1,0]],[33,"Panel_Energy Color",33554432,2,[[9,-59,[1,"44AnkAPldEk5VlWryWvx+O"],[5,34,34]],[23,0,-60,[1,"d7jnCqbkJCf6ILjGxYiWzq"],[4,4291874560],5],[117,45,5,5,5,5,32,32,-61,[1,"e4RRNXGpRIeLQ6pal9dc0/"]]],[3,"a4xPBm209GU5Mh8eoXMqG3",1,0]],[33,"Button_Outline 2",33554432,5,[[9,-62,[1,"45PSXa5rZH07hOZ7iSdS4M"],[5,84,84]],[46,1,0,-63,[1,"8eYSa67uFLZbTRHhKmrHyj"],[4,1177457151],0]],[3,"42ZSZDURBPuYxZbUVkytNk",1,0]],[33,"Button_Outline 1",33554432,5,[[9,-64,[1,"88iMIohbhOLr2VcCgYTqHO"],[5,77,77]],[46,1,0,-65,[1,"92ZFpV2KxL85DrB1TrbNTy"],[4,2196298459],1]],[3,"64o7LRB4FEdaQLAV4SPsYe",1,0]],[78,"Button_Outline",33554432,1,[[9,-66,[1,"dfbJ7c+W1MELPyPf6kRZrm"],[5,60,60]],[23,0,-67,[1,"7c9KNm1rREtZ4NWitSU7H/"],[4,4293450459],2]],[3,"78bCuqtM5FvINnH01nOP6N",1,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[33,"Panel_Color",33554432,4,[[9,-68,[1,"c935UvIfJOXqxQ1MtM3cUt"],[5,36,36]],[23,0,-69,[1,"b7JWPVQFtKVoXipP2h7Jtp"],[4,4289238409],6]],[3,"be+BVdgytGg4WwPrKtdPrt",1,0]],[33,"Icon_Lock",33554432,4,[[9,-70,[1,"2dNg4mK1xDIZaxD8DPTwyJ"],[5,16,20]],[212,-71,[1,"c3XPNhv/dGM5SxpOrj8yZI"],[4,4282187811],7]],[3,"53X2+0Vn1Mq7gRmjdVGvYB",1,0]],[33,"On Enable",33554432,1,[[48,-72,[1,"1dPOhA97BNxqF5SytZdFWv"]],[203,-73,[1,"24Qb9T6zpHU4YDHutwgLhy"],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",1]]]],[3,"167yW9OrRIL6YqRj0MFYRz",1,0]],[387,3,0.9,1,[1,"bfWHMMhHhHZppymV9Y7kAU"],[[8,"80495HhBfdC64qEifbVQrbr","onClicked",1]],7],[600,"CANNON",22,23,23,2,false,false,6,[1,"69yyRlXrpMd62pIm5Z3QYa"],[4,4281532425]],[399,"2",33,32,28,2,false,3,[1,"fdqTZt2D5LBbb2BdiWmcs2"]],[100,1,[1,"e9ztg1W2VLEKkbhoJBjjZP"]]],0,[0,3,1,0,0,1,0,0,1,0,-3,19,0,-4,16,0,5,1,0,5,1,0,5,1,0,5,1,0,5,1,0,5,1,0,5,1,0,5,1,0,5,1,0,42,16,0,5,3,0,5,6,0,0,1,0,42,16,0,0,1,0,25,19,0,0,1,0,0,1,0,-1,5,0,-2,12,0,-3,7,0,-4,6,0,-5,2,0,-6,15,0,0,2,0,0,2,0,-1,8,0,-2,9,0,-3,3,0,-4,4,0,0,3,0,-2,18,0,0,3,0,23,18,0,0,3,0,0,4,0,0,4,0,0,4,0,-1,13,0,-2,14,0,0,5,0,0,5,0,-1,10,0,-2,11,0,0,6,0,-2,17,0,23,17,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,10,1,73],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19],[2,2,2,2,2,2,2,2,2,2,-1,-2,-3,-4,-5,-6,-7,-8,11,11,24],[4,4,28,0,28,0,0,42,0,0,45,263,264,265,266,267,67,268,2,2,525]],[[{"name":"Icon_Lock","rect":{"x":0,"y":0,"width":16,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":20},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[526]],[[[68,".bin",3160802190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.249710351228714,-0.24971024692058563,-0.3999999761581421],"maxPosition",8,[1,0.24971038103103638,0.24971021711826324,0.9448086023330688]]],-1],0,0,[],[],[]],[[[77,"SM_EndBlock_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EndBlock_02",[-2],[3,"02IhkEmuRXK63cdwkK5zZa",-1,0]],[64,"SM_EndBlock_02",1,[[62,-3,[1,"32LRqVqIxUXrhRaZjufCFa"],[0],[45],1]],[3,"4flHvjPe5Z1qmiSfhf+rvk",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[527,528]],[[[58,"P-Biker-0"],[228,"P-Biker-0",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-17,-18,-19,-20],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[42,"Scripts",1,[-21,-22,-23,-24,-25],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",3,[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"94xHiK0AJcG7HhDtrTSJEu",-33,[81,"41lLw7bWpMPKP1Z0umF78z",1,[[75,[2,["94xHiK0AJcG7HhDtrTSJEu"]],[[57,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0.133]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[5,["_lscale"],-31,[1,1,1,1]],[35,["_materials","0"],[2,["b13/XLHw9X17XAy1C9bbJp"]],3],[17,"SM_Model",["_name"],[2,["40xe0mc49a/5+K5jzHdd0S"]]]]],2]],[2,["94xHiK0AJcG7HhDtrTSJEu"]],[42,"VFX",2,[-34,-35,-36],[3,"eeyvk3jpFNP7GmzA8XJ74Z",1,0]],[141,"Spawn Enemies",[[235,-38,[1,"64WVBj+DBCkLuka36EpKwz"],-37]],[3,"aeKtktO2BMGodiKFF+UfbX",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"29nzqz6+BGM5GWnSmYYIQk",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"59XwAM6GhGRq9NIhu7AJyO"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"77cQJQ0wxLtYGOusmsgk3x",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,13,[1,"c5CW/8bKhJN5pLomjUAi0e"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"57OatTSHxKw4Iego89Dz7K",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",3,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[65,"On Death VFX Finished",3,[[118,-55,[1,"3aOOHWMg1Cw7Cnt0lH88Sy"],[12,14],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"48Oiy3VmNAMpvMxNyZXXAv",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,15,[1,"d7CP0Wtl5NAqCPNpobPZlM"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,15,[1,"07chXauGRE/rZIjO2CwDyM"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",3,[8],[3,"e4LCrp8d5Fb5h1ZfgGE9m9",1,0]],[264,"Biker-0",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,23],[265,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[56,"Stun",3,[26],[3,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,5,9,0,13,17,0,3,1,0,-1,25,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,3,1,0,6,1,0,-4,28,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,-1,4,0,-2,16,0,-3,27,0,-4,18,0,-5,24,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,0,5,0,3,5,0,-1,11,0,-2,13,0,-3,15,0,41,25,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,29,0,1,29,0,19,20,0,3,9,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,21,0,-2,22,0,-1,17,0,5,18,0,0,18,0,0,19,0,7,21,0,7,22,0,10,1,8,6,24,9,6,28,25,32,26,26,0,27,58],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,529,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[68,".bin",3962567776,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyCrowder_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_EnemyCrowder_01",[-2],[3,"7fciu/Gg9S/bnu8xJWbMom",-1,0]],[64,"SM_EnemyCrowder_01",1,[[62,-3,[1,"9efmySxl5TsIXK39+yLHpg"],[0],[45],1]],[3,"ee6J7zZuhZ7ZlMxt5O9sjf",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[530,531]],[[[58,"ShopPanel"],[80,"ShopPanel",33554432,[-53,-54,-55,-56,-57,-58,-59,-60,-61,-62],[[9,-50,[1,"49ShHhZ/dCq7pq5/7C7C5w"],[5,414,896.01]],[570,45,-0.01,100,100,1,-51,[1,"171MnYxFRNfKXgRmWyWA2/"]],[139,"sfx-ui-menutap",-52,[1,"b6lJeVpFhLjo2PJo8QqXtb"]]],[105,"68bll21PNLdos7u2gIR3Y0",-49,0,[[71,["_animator"],-48,[2,["9fkwbwsEJNtp1a9YblePmY"]],-47,[2,["836Ayw0qlL5aalHfUNDfhK"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46]],[1,0,0.0049999999999954525,0]],[271,"Holder_Confirmation Tower",false,33554432,1,[-133,-134,-135,-136,-137,-138,-139,-140],[[[48,-63,[1,"20eHYBW8BJMpRGFDjQJcID"]],[219,false,-64,[1,"ecGj5xSt5Dn7mm7kQ03bt4"],[287,288,289,290,291,292,293],294],-65,[384,"Increase Max HP to {data}","Increase Max Energy to {data}","Increase Energy Recharge Rate to {data}","Unlock {data} gun upgrade","Unlock {data} cannon upgrade","Unlock {data} laser upgrade",-127,[1,"a2ksuvARpJhb8eBZ1ELSBo"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-125],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-126]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-124]],-123,-122,-121,-120,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-119]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-118]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-117]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-116]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-115]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-114]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-113]],[[84,-100,-99],[84,-102,-101],[84,-104,-103],[84,-106,-105],[84,-108,-107],[84,-110,-109],[84,-112,-111]],[[84,-86,-85],[84,-88,-87],[84,-90,-89],[84,-92,-91],[84,-94,-93],[84,-96,-95],[84,-98,-97]],[[84,-72,-71],[84,-74,-73],[84,-76,-75],[84,-78,-77],[84,-80,-79],[84,-82,-81],[84,-84,-83]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,true",-70]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,false",-68],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-69]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,true",-66],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-67]],295],[57,-128,[1,"f1VUB86bFEoZrcuGkjXRBj"]],[107,-130,[1,"73q4M5YzhOn7JoFARIzVHl"],-129],[220,-132,[1,"b4P8HiCZRJuZV5WSX0WUAS"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-131]]]]]],4,4,1,4,4,4,4],[16,null,"89KfShwWpLgbsnSJI63bnY",0]],[329,"Button_Tab01",33554432,[-154,-155,-156,-157,-158,-159,-160],[[[9,-141,[1,"f7hQA0e4dIyoaigSKi5jFU"],[5,68,68]],[184,3,0.9,-148,[1,"0bZdeupMZH+aGv7jzSxkpI"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-143],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-144],[8,"ac879rTendCEbpZWFz/jexs","playSFX",1],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-145],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-146],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-147]],[4,4292269782],-142,111,112,113,114],[94,-149,[1,"c958F8UldI75MAbgqo+xFq"]],[190,false,-150,[1,"31sfSzd11O7oSFl7nKnxXr"],[115,116]],-151,[107,-153,[1,"fdLE0AQoFEgrHv06KDLCm3"],-152]],4,4,4,4,1,4],[16,null,"6bHTbufCFL67bvR526/tpO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[329,"Button_Tab02",33554432,[-174,-175,-176,-177,-178,-179,-180],[[[9,-161,[1,"3aUmHk+0pEsqm9owqADOfF"],[5,68,68]],[184,3,0.9,-168,[1,"63ZKqYhbdDH62zpdPLShJi"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-163],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",3],[34,"ca25cTenhxIzImdddRm852A","setTowers","0",-164],[34,"4633boUp01PnK/YH7enPkIw","setTowers","0",-165],[34,"29dcbqkeLJDCo7uiXlubGL/","setTab","0",-166],[8,"ac879rTendCEbpZWFz/jexs","playSFX",1],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",-167]],[4,4292269782],-162,107,108,109,110],[94,-169,[1,"3fEmGZ0RVMeZ/OjKoFE0OO"]],[233,false,-170,[1,"11/U/FvBZJT5o/ZYOFwMkZ"]],-171,[107,-173,[1,"63Uoo+XPFKM54O6jQaIKiO"],-172]],4,4,4,4,1,4],[16,null,"78Bxrau7dA4b0Hk2jQOtPS",0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[271,"Holder_Confirmation Common",false,33554432,1,[-197,-198,-199,-200,-201],[[[48,-181,[1,"f2Q7jQOANOUbaBBhPWRWK6"]],[219,false,-182,[1,"f7OgVqVOtDOo6QyT7lrzXd"],[325,326,327],328],-183,[451,"Increase Max HP {data.old} to {data.new}","Increase Max Energy {data.old} to {data.new}","Increase Energy Recharge Rate {data.old} to {data.new}","Unlock {data} gun upgrade","Unlock {data} cannon upgrade","Unlock {data} laser upgrade",-191,[1,"62Y2X8ocRPlZ+fLv4aLZZ5"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-189],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-190]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-188]],-187,-186,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-185]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-184]],[[182,"c4d68jIEQZKZ5AKzGQQzzsP","setText"]],[[142]],[[142]],[[142]],[[110],[110],[110],[110],[110],[110]],[[110],[110],[110],[110],[110],[110]],[[110],[110],[110],[110],[110],[110]],329],[57,-192,[1,"82ud+vnJFMLI1rgZ7u7STz"]],[107,-194,[1,"5dgn1iVn1DzLsDbi3eVV9j"],-193],[220,-196,[1,"363TffZaVKrqR5vCLJ7aEm"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-195]]]]]],4,4,1,4,4,4,4],[16,null,"03X1qSFq5D1q+bTyc0esLD",0]],[271,"Holder_Confirmation Reset Upgrades",false,33554432,1,[-210,-211,-212,-213],[[[48,-202,[1,"03g0jXYQBFaJ4xUGTjaH3L"]],[190,false,-203,[1,"13bAUhttBFBq4sioNnefrw"],[154,155,156]],-204,[57,-205,[1,"70okvl1JpKgIFVGAMfLIvc"]],[107,-207,[1,"36JlfUh6VJDLCdrBCsfiXN"],-206],[220,-209,[1,"7exEyqFBRAJZWzpvZRYTna"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-208]]]]]],4,4,1,4,4,4],[16,null,"de0DC7vdROk5AWlDIvdY9k",0]],[170,"Holder_Tab 01",33554432,[-228,-229,-230,-231,-232],[[[9,-214,[1,"52mXA+EWpMb5sytFd+zlCS"],[5,80,80]],[190,false,-215,[1,"05b6880JpB7pP51qtHmW35"],[63,64]],-216,[184,3,0.9,-225,[1,"49P/tNC9lJO7YEPKgQ296q"],[[34,"ca25cTenhxIzImdddRm852A","setTowers","0",-218],[34,"29dcbqkeLJDCo7uiXlubGL/","setTab","0",-219],[34,"4633boUp01PnK/YH7enPkIw","setTowers","0",-220],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-221],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-222],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-223],[8,"ac879rTendCEbpZWFz/jexs","playSFX",1],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",-224]],[4,4292269782],-217,85,86,87,88],[107,-227,[1,"becbjJrKtLKKKXpFFhmK14"],-226]],4,4,1,4,4],[16,null,"540fzbZCJEwr3K+aN/h0qL",0],[1,-104,7.153,0]],[170,"Holder_Tab 02",33554432,[-246,-247,-248,-249,-250],[[[9,-233,[1,"1bBUZxlrxCG6sgKtYOWbov"],[5,80,80]],[233,false,-234,[1,"44t622WjFEoK7zk2I6wTSB"]],-235,[184,3,0.9,-243,[1,"6bAGU0W5JFbqu8rA4uYrRJ"],[[34,"ca25cTenhxIzImdddRm852A","setTowers","1",-237],[34,"29dcbqkeLJDCo7uiXlubGL/","setTab","1",-238],[34,"4633boUp01PnK/YH7enPkIw","setTowers","1",-239],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-240],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",7],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-241],[8,"ac879rTendCEbpZWFz/jexs","playSFX",1],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","cannon tower",-242]],[4,4292269782],-236,81,82,83,84],[107,-245,[1,"96Iemq47JIh5IWmxxfOM5B"],-244]],4,4,1,4,4],[16,null,"82VLcRayVN/b6VA9ji8mc2",0],[1,0,7.153,0]],[170,"Holder_Tab 03",33554432,[-263,-264,-265,-266,-267],[[[9,-251,[1,"cbH/kRo5lDGZ6kavzXDETE"],[5,80,80]],[233,false,-252,[1,"5dR2IXqrdKU70XROQoLJJy"]],-253,[184,3,0.9,-260,[1,"a71gAfqWZCVZYWhdjQDI8n"],[[34,"ca25cTenhxIzImdddRm852A","setTowers","2",-255],[34,"29dcbqkeLJDCo7uiXlubGL/","setTab","2",-256],[34,"4633boUp01PnK/YH7enPkIw","setTowers","2",-257],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-258],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",7],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",8],[8,"ac879rTendCEbpZWFz/jexs","playSFX",1],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","laser tower",-259]],[4,4292269782],-254,77,78,79,80],[107,-262,[1,"769OM/ZgJALpHJNFKQ6sRV"],-261]],4,4,1,4,4],[16,null,"28F/XecwZKTYjDtSaKim2C",0],[1,104,7.153,0]],[150,"Towers Models Holder",33554432,[-279,-280,-281,-282,-283,-284,-285],[[[48,-268,[1,"98qCdWF8pIertRUqJ0ATNY"]],-269,[696,-278,[1,"a1jJ8roBJH7qPlfp+MtR/u"],[-271,-272,-273,-274,-275,-276,-277],-270,65,66]],4,1,4],[3,"04lqpVrx1HNIY8hccMEHK0",1,0]],[80,"Tree Lines",33554432,[-298,-299,-300,-301,-302,-303,-304],[[47,-286,[1,"acndY1/yBMIp6r+kqWrZFJ"],[5,360,260],[0,0.5,0]],[394,-297,[1,"9banQW/Q5Fi7y0lA0K057k"],[395,[[180,"0",[-287,-288]],[180,"1",[-289,-290]],[180,"2",[-291,-292]],[180,"3",[-293]],[180,"4",[-294]],[180,"5",[-295,-296]]]],[4,4292928274],[4,4281556991],[4,4289238409]]],[16,null,"beTlU7EIxA+KnaZ2h1084m",0],[1,0,-117.06,0]],[137,"Buttons",33554432,[-314,-315,-316,-317,-318,-319,-320],[[48,-305,[1,"b44QP8nehM0457PuVT9MLy"]],[697,-313,[1,"66wJsvsQdDIqNKxZH9BXQ1"],[-306,-307,-308,-309,-310,-311,-312]]],[3,"8dDlI0rdZLtZNsSo8r5Yxc",1,0]],[80,"Panel_Color",33554432,[-324,-325,-326,-327,-328,-329],[[9,-321,[1,"2bV4pcEzdMbIphVl9O8v60"],[5,0,160]],[23,0,-322,[1,"cfn1KTFtdCY5RFV0+eHEtW"],[4,4293450459],247],[260,1,2,8,8,2,-323,[1,"82qqPyDepNA5nImHB55LzK"]]],[16,null,"62oFnyLwRGcqa9L6wkHKhg",0],[1,0,17,0]],[137,"Button_Reset Upgrades",33554432,[-337,-338,-339,-340],[[9,-330,[1,"d6C7Yo7l1K1YO8VkYjGRlC"],[5,68,68]],[184,3,0.9,-333,[1,"fc2ulURS9NX59ZkE3qrh1D"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",6],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",6],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-332]],[4,4292269782],-331,157,158,159,160],[94,-334,[1,"4eExhMJthFP6+Gh2WdCa9G"]],[88,true,-335,[1,"a0+uXTsuNMmZuaOvmrfr4b"],[161],162],[139,"sfx-ui-menutap",-336,[1,"d912ipnKlLpqI1zC5xbkPX"]]],[16,null,"f6yfrjvm5C9a3TbmShCAEC",0]],[80,"Holder_Item List",33554432,[-346,-347,-348,-349,-350],[[9,-341,[1,"bc63VeMORAGqZ7Dae69esh"],[5,360,460]],[386,1,-342,[1,"bbLgAcJttD6KCv4iQksQd9"]],[377,false,1,30,-343,[1,"c2KXhwaxBBAany4iSfZgVr"]],[57,-344,[1,"b0M8U7yiVH6J5sLR1zmaM1"]],[94,-345,[1,"ba4hK8XtBCubA5Cx6cIayK"]]],[16,null,"7362Z2cI5M+onEkzK+mZj2",0],[1,0,452,0]],[170,"Text_Title",33554432,[-356],[[[9,-351,[1,"67vq62yn9G+KLRWLmeIjY6"],[5,75.46,27.72]],-352,[179,1,4.140000000000015,-353,[1,"10+So3FshMCbCMd6G3jBs0"]],[96,-355,[1,"91ifmkSeVGb40IKkwLtuO1"],-354]],4,1,4,4],[16,null,"1eh3U1nbZDCq9P3IZmEoJN",0],[1,0,262,0]],[137,"Button_Yes",33554432,[-364,-365,-366],[[9,-358,[1,"be4cwdEQpAY4SGY0pffBAX"],[5,56,40]],[23,0,-359,[1,"e9IyuL4zBBkogqlkjdRdAv"],[4,4283033344],143],[312,3,0.9,-361,[1,"6dZWzsyptFIpCouE4rT1kz"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",6],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",6],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-360]],144],[88,true,-362,[1,"35+7fCbnJC7Y4rCtVSW+sX"],[145],146],[139,"sfx-ui-menutap",-363,[1,"d912ipnKlLpqI1zC5xbkPX"]]],[3,"f6tMYACitHf5FgpcOBWRxy",-357,0]],[137,"Button_No",33554432,[-373,-374,-375],[[9,-367,[1,"67J8qbdSNLjY9i8Zw7yU6x"],[5,56,40]],[23,0,-368,[1,"d2EaVd6JxMbpsX6xnXP0T1"],[4,4283302143],150],[312,3,0.9,-370,[1,"5auEgH4ttP5KTdkczKkBoi"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",6],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",6],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-369]],151],[88,true,-371,[1,"dbqbM4FeVLzpdz7QdUlmW3"],[152],153],[139,"sfx-ui-menutap",-372,[1,"d912ipnKlLpqI1zC5xbkPX"]]],[16,null,"67+XrKScpALqp1eixytaQQ",0]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-381,[208,"eer6v2QCxMwq9fj0n6sQoL",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"28n9EjSJNDyYhyDUOjV7J3"]],[199,[1,"37vwfTbSRNprHuHEtFKtTC"]]]]],[[11,"SM_TowerBase_01",["_name"],-376],[5,["_lpos"],-377,[1,0,0,0]],[5,["_lrot"],-378,[3,0,0,0,1]],[5,["_euler"],-379,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],197],[17,8388608,["_layer"],[2,["52Wr8elKJczKH4c2zJXMeu"]]],[11,false,["_active"],-380]]],196]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-390,[208,"ac1v+0CO5G/o5WSZo/9qCO",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"19H6Z/0bFKarkhVaQNdzgH"]],[199,[1,"db0GZ2PSBFP7mf2dN0ijWZ"]]]]],[[11,"SM_TowerBase_01",["_name"],-382],[5,["_lpos"],-383,[1,0,0,0]],[5,["_lrot"],-384,[3,0,0,0,1]],[5,["_euler"],-385,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],222],[11,false,["_active"],-386],[11,8388608,["_layer"],-387],[11,8388608,["_layer"],-388],[11,true,["_active"],-389]]],221]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-396,[60,"1ehkzVtQpKRoVlwKpBjF5I",null,[[11,"SM_TowerBase_01",["_name"],-391],[5,["_lpos"],-392,[1,0,0,0]],[5,["_lrot"],-393,[3,0,0,0,1]],[5,["_euler"],-394,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],240],[11,false,["_active"],-395]]],239]],[53,"Currency_Panel",33554432,2,[-400,-401,-402,-403,-404],[[9,-397,[1,"34FczWLOdFZqdJCV5kU1If"],[5,187.43,34]],[23,0,-398,[1,"7bLmzAwn9LcbXb5yH9G0oC"],[4,3366911],257],[261,1,1,14,14,4,-399,[1,"41g4p+6slAu7Q1jdePE8I/"]]],[16,null,"4dqtUMBJBKLr2wcycjkhLM",0],[1,0,-95.054,0]],[53,"Panel_Color",33554432,1,[-409,15,-410,-411],[[47,-405,[1,"a8EiAae8hAr4bAVgrqDT7M"],[5,414,732],[0,0.5,0]],[108,0,-406,[1,"e0GtYBqSxFOpuGUS6Ywerd"],90],[378,44,-20,500,1,-407,[1,"3133zd/DZE8bNS2S8lHdcg"]],[168,-408,[1,"6bOcN6toRN3ZlBR9SlhpMG"]]],[16,null,"2dPvmSdyNCu6RNHSXPEq/P",0],[1,0,-468.005,0]],[53,"BackGround_Light Texture",33554432,23,[-415,-416,-417,-418,-419],[[9,-412,[1,"2e/meUhpRIurxBgFM4xw+I"],[5,414,732]],[172,45,100,100,1,-413,[1,"d58f1pQFpJ/7dmKNeRdoSU"]],[94,-414,[1,"6fcjsIjKdGIYaUd55kqOPI"]]],[16,null,"8d2fFPz1xOprzpl8p5Hf4l",0],[1,0,366,0]],[80,"Holder_ShopList",33554432,[-423,-424,-425,-426,-427],[[9,-420,[1,"f1g3+kvQpGxp6SD4e+C4QV"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-421,[1,"52vv0Vc6JNVo94t48SfuSp"]],[247,2,2,6,-422,[1,"d0ZXgOgGdEzpYfWDS+qB7g"]]],[16,null,"13liXMX3JNvbKjgOn4hq30",0],[1,0,-42.87100000000001,0]],[80,"Holder_ShopList",33554432,[-431,-432,-433,-434,-435],[[9,-428,[1,"0fuu0yma1IN4cpmIn6g+04"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-429,[1,"ef6dB7H2BMoq7JqxTbvV9r"]],[247,2,2,6,-430,[1,"85F80Aa0RDE54gE+6dgRj0"]]],[16,null,"adajZ3wIBCBY5vpCaI8gE6",0],[1,0,-42.87100000000001,0]],[80,"Holder_ShopList",33554432,[-439,-440,-441,-442,-443],[[9,-436,[1,"04hdTRvkpLPIJI+jg10+rb"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-437,[1,"ddX3I1rXlMSbKgPipSDvnU"]],[247,2,2,6,-438,[1,"c0X19pgmBDDK5LF74/cWuD"]]],[16,null,"44j1G6nOxDb4PNNH8yvIyU",0],[1,0,-42.87100000000001,0]],[197,"Holder_TowerUpgrade",false,33554432,23,[16,-447,-448,-449,10],[[9,-444,[1,"faM7GPYs1DHJk9ULFhSSVF"],[5,360,560]],[57,-445,[1,"adfLPbvrRMeZcA1naWQIbR"]],[94,-446,[1,"fcPkjxj/tInbloirK8cEOW"]]],[16,null,"e42yyndwVO/aCmpTo4uG1N",0],[1,0,431.475,0]],[80,"Panel_Color",33554432,[-453,-454],[[9,-450,[1,"14RY9LbLxOlL45xQECDXdw"],[5,330,89.72]],[23,0,-451,[1,"f7XovzC0ZJkr9FYgq7Ju2J"],[4,4281556991],135],[260,1,2,8,8,2,-452,[1,"80RLeolCdJJ43qbn+QCKBB"]]],[16,null,"44bJHWkiZMcaCaHweKBVdf",0],[1,0,17,0]],[322,"Head Pivot",[-455,-456,-457,-458,-459,-460,-461],[16,null,"49dKoHWVZIcrRRKwHEnkqp",0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[252,"Tower Gun Head Pivot",[-462,-463,-464,-465,-466,-467,-468],[16,null,"a7hneHCgpOJ5Q/8o0KLfhe",0],[1,0,0.30000001192092896,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[252,"Head Pivot",[-469,-470,-471,-472,-473,-474,-475],[16,null,"ddyf7wlHpKuqt/eIJnVmMK",0],[1,0,0.3,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[150,"Button_Yes",33554432,[-480,-481,-482],[[[9,-476,[1,"d8tz15hUZAGLICubJzFyBR"],[5,56,40]],[23,0,-477,[1,"99N3Jmf5VA2Zdr23zZ2I7f"],[4,4283033344],263],-478,[88,true,-479,[1,"94h3hJwYNMCoBdyOsGSVCM"],[264],265]],4,4,1,4],[16,null,"2bjbBobSxA0bKteyU0/xAz",0]],[150,"Button_No",33554432,[-487,-488,-489],[[[9,-483,[1,"95EY4JFSJJU4oZatLWCPHs"],[5,56,40]],[23,0,-484,[1,"8f+ZXLlgRGN58FfQHGTkMx"],[4,4283302143],269],-485,[88,true,-486,[1,"2ervYz+j5FM4JQqunSb7dc"],[270],271]],4,4,1,4],[16,null,"6d2y12U2hHG4zH3bL+Jfl5",0]],[150,"Button_Back",33554432,[-494,-495,-496],[[[9,-490,[1,"06cP1chqBG2be0/5B0iGHF"],[5,62,40]],[23,0,-491,[1,"fbVvm4iVBGgKSrhPEnIOCQ"],[4,4292724926],275],-492,[88,true,-493,[1,"6fkS47UzNGzoqEjrf2Ek6A"],[276],277]],4,4,1,4],[16,null,"ea0JIZy+xBNYytRZdPy89C",0]],[170,"Button_Back",33554432,[-501,-502,-503],[[[9,-497,[1,"53ai0tn6REmJPKY5xASrsW"],[5,62,40]],[23,0,-498,[1,"99mDOJL0pAQ6135ws3pjFw"],[4,4292724926],284],-499,[88,true,-500,[1,"41t9g7x5JCoJ4NqMe/j+3I"],[285],286]],4,4,1,4],[16,null,"4euq0G2oNCqYycL78F+XsU",0],[1,0,-90,0]],[80,"Panel_Color",33554432,[-507,-508],[[9,-504,[1,"cdoSZt0dFLBILTecEfMPiG"],[5,330,45.72]],[23,0,-505,[1,"1883XWiglPQ5OrO4+Y8s3O"],[4,4293450459],303],[260,1,2,8,8,2,-506,[1,"28QRpDHtBKfqfXRsJLI60/"]]],[16,null,"65gCvGHflAZ62ojJoEYZk4",0],[1,0,17,0]],[53,"Currency_Panel",33554432,5,[-512,-513,-514,-515],[[9,-509,[1,"25xg0XXWFB46/QhhyFgRLL"],[5,183.43,34]],[23,0,-510,[1,"766NC1HppJJ5+jtG8MYK2n"],[4,3366911],312],[261,1,1,14,14,4,-511,[1,"b8NOXbfatLD5rWD3q3+TiL"]]],[16,null,"beq3VAqgRNN75PbqovO0HC",0],[1,0,-66.825,0]],[150,"Button_Yes",33554432,[-520,-521,-522],[[[9,-516,[1,"fcCjBcEu5FkadedQIiRGQx"],[5,56,40]],[23,0,-517,[1,"2cFNfeBktHxICdfuxb390x"],[4,4283033344],316],-518,[88,true,-519,[1,"2ervYz+j5FM4JQqunSb7dc"],[317],318]],4,4,1,4],[16,null,"f3o9FnxnlKOo8pKk744+b6",0]],[150,"Button_No",33554432,[-527,-528,-529],[[[9,-523,[1,"c9n3cxX91OV4aENQsKR1zZ"],[5,56,40]],[23,0,-524,[1,"28Je6GcIZBj6BORxc6Ht1J"],[4,4283302143],322],-525,[88,true,-526,[1,"2ervYz+j5FM4JQqunSb7dc"],[323],324]],4,4,1,4],[16,null,"52KrkRgtNPDo28xZW7jJ2o",0]],[53,"Holder_ShopList (New)",33554432,28,[11,-532,-533,12],[[48,-530,[1,"e4Q6D8tJJFgbcHyjwh0rF2"]],[117,17,60,-40,173,126.92099999999996,100,100,-531,[1,"f2iPXnlV1OHr0i7dB8mdh9"]]],[16,null,"b5e+hxCrpHW68OnBNt7IUQ",0],[1,0,57,0]],[224,"Button_Back",33554432,1,[-539],[[9,-534,[1,"40ZcLQAd9DJoiS3dftpr/m"],[5,40,40]],[46,1,0,-535,[1,"6c1OOnOCRChpwVafCJlxGq"],[4,4294765656],119],[589,-537,[1,"d7jlzszTJE6LT11SWlXp7u"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true,.4",3],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",4],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true,.4",7],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",8],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false,.4",9],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",16]],[4,4292269782],-536,120,121,122,123],[442,17,812.607,139,1,-538,[1,"cb73+n4ZNNLoAuOg7/VcUw"]]],[16,null,"44L4tEVZpIq7aa6UqNBevT",0],[1,139,-384.602,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[53,"Holder_Tower Stats",33554432,13,[-543,-544,-545],[[47,-540,[1,"1eRyDcMY5PvqU7BWrEmWbl"],[5,154,50],[0,1,0.5]],[248,1,1,32,-541,[1,"c44TBCdsBEZZfyuNwkGmBT"]],[154,0,-542,[1,"b070zEHPhK4IXcyjgY/Fv1"]]],[16,null,"51q2mQtBBONbWsqmwGu5cn",0],[1,149.412,-43,0]],[360,"Towers Holder",8388608,[-549,-550,-551],[[9,-546,[1,"d5/n74qV9HAJU29fZtrXoX"],[5,0.8333333333333334,1.0833333333333333]],[200,45,5,-5,100,100,-547,[1,"c85llaHbZBsZ/ncu90wkGl"]],[306,true,true,-548,[1,"61cy0NQ5VBDpVP78+De16t"]]],[16,null,"b64X39hPtCZ7D7lfeTYliT",0],[1,0,27.5,200],[3,-3.0616169978683824e-17,0.8660254037844387,0.49999999999999994,5.3028761936245346e-17],[1,60,60,60],[1,-60,180,0]],[53,"Collum_01",33554432,15,[-555,25],[[9,-552,[1,"32Y5V3byFKuqK+N7JXeznY"],[5,120,460]],[246,5,13.694,-13.694,99.99,-553,[1,"0cSqBZZl9D+oYP89TSl8md"]],[249,false,1,0,-554,[1,"f5cAvkOhtMGKKG1BDhv+6e"],12]],[16,null,"54WS7barRHmJ1LrGpDoA+c",0],[1,-120,-13.693999999999988,0]],[53,"Collum_02",33554432,15,[-559,26],[[9,-556,[1,"79NCyZnfxKB7LopVQ/7aJx"],[5,120,460]],[246,5,13.694,-13.694,99.99,-557,[1,"53DoZ3/UZI+rctXnxAnjoU"]],[249,false,1,0,-558,[1,"32Gy2rnztJA5Tml/RkxXvn"],22]],[16,null,"65YO3Ls5xAMqyClmBfkgxr",0],[1,2,-13.693999999999988,0]],[53,"Collum_03",33554432,15,[-563,27],[[9,-560,[1,"35V/ziLWRJBYUcVAXtFT8D"],[5,120,460]],[246,5,13.694,-13.694,99.99,-561,[1,"4ehzcld3VO3rCzoWJ/xbn2"]],[249,false,1,0,-562,[1,"adNiNly1tBn5+dhH5pTWIl"],32]],[16,null,"a5GjDUe49KpIVkVL391Xy9",0],[1,124,-13.693999999999988,0]],[83,"Left Side",33554432,11,[-566,-567,-568],[[47,-564,[1,"e7r2GeMo9Jw67LlIMZfbXr"],[5,180,260],[0,1,0]],[294,5,100,-565,[1,"0cevL0De5FppNWFghYjplh"]]],[16,null,"d5r9TGGClG04uw8ACFCoUm",0]],[361,"Right Side",33554432,11,[-571,-572,-573],[[47,-569,[1,"1egS9F8V5APY9dUN3aVGdy"],[5,180,260],[0,1,0]],[294,5,100,-570,[1,"57w1VphxtGP5rgdAdAantd"]]],[16,null,"40RWkfA+JDsJwEPQTShAVk",0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[80,"Bar_Left",33554432,[-577,-578],[[9,-574,[1,"23bLN3TYRPp4VHxS1bzaPs"],[5,2,103.72]],[23,0,-575,[1,"4brLfiAttJy5tZT/OhuHTJ"],[4,4284216710],131],[307,13,-6,-7,-7,172,1,-576,[1,"38TE5ZuJJN4qWKE+GJrzBx"],29]],[16,null,"2dTGLg5wtOwqOwb/VcmfMh",0],[1,-170,36.86,0]],[80,"Bar_Right",33554432,[-582,-583],[[9,-579,[1,"53ZbFus8tATr+AAkaY/qGS"],[5,2,103.72]],[23,0,-580,[1,"55BO83MAtFM7+F4uIaipPI"],[4,4284216710],134],[308,37,-6,-7,-7,172,1,-581,[1,"dccNjJ6rxBmrvCEt33eUOv"],29]],[16,null,"70u1fZkMZF4Jv4cHZS8hsL",0],[1,170,36.86,0]],[253,"Holder_Yes Feedback",false,33554432,[-585,-586,-587,-588],[[9,-584,[1,"d8raadzRRFPIO9YBJ6nEaE"],[5,40,36]]],[16,null,"61DejrkLZETLVvXr7Ej88g",0]],[80,"Bar_Left",33554432,[-592,-593],[[9,-589,[1,"6faw+7QrRNeLz7AQGxDZSh"],[5,2,174]],[23,0,-590,[1,"ccxMB4qSpKirNmcPYwSIhB"],[4,4284216710],172],[258,5,-7,-7,172,1,-591,[1,"07ypDjeJRIaYDj0V3N8KE+"],13]],[16,null,"54IvC3S+JBNJ7wXlJl8IfE",0],[1,-170,70,0]],[80,"Bar_Right",33554432,[-597,-598],[[9,-594,[1,"4bv4hhEJpKn6pzG6YU67XS"],[5,2,174]],[23,0,-595,[1,"c84ayXa81KKbKRa0RghYdR"],[4,4284216710],175],[258,5,-7,-7,172,1,-596,[1,"c8WiK76IxNjob0biLnFHMK"],13]],[16,null,"ea4IrXmUBDo7GnM9reepxT",0],[1,170,70,0]],[369,"Head",[[30,[102,"Bullet Spawn Pivot",-599,[16,null,"c0pXUGaNZKwbAOwCAovM39",0],[1,0,0.135,-0.406]],-600,-601,-602],1,4,1,1,1],[16,null,"bfM6+LgF5HAI2BQvt7chGS",0],[1,0,0.4,0]],[2,["424JMWZcNT+7LUIxhmggm+"]],[2,["4d/LLVKgJfRaWh6CVtkvdN"]],[2,["06VFwTsJJRM4OSJg2XW4Q9"]],[2,["efp8IlO8deIZfWSlH1z7o0"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[80,"Holder_Energy Cost",33554432,[-605,-606,-607],[[9,-603,[1,"44Imax/rpLxK9dC+HfHFYo"],[5,50,50]],[23,0,-604,[1,"93DemOaGZHEJZmhwSY8GSE"],[4,4282712119],246]],[16,null,"eaHLSMrv5BUIat6sqiGKsD",0],[1,11.263,27.002,0]],[253,"Holder_Yes Feedback",false,33554432,[-609,-610,-611,-612],[[9,-608,[1,"efBR4Fl7tD9ZNjrExc7NwH"],[5,40,36]]],[16,null,"487Ibq+3FH/q+dmdPXnNmE",0]],[80,"Panel Color",33554432,[-616,-617],[[9,-613,[1,"37AFTw6p1Cl4uICmfblduW"],[5,290,80]],[23,0,-614,[1,"40HJ5FrYVMYrl4hXIliHUP"],[4,4283302143],280],[168,-615,[1,"87aLHe+XhOV5diEczisIkO"]]],[16,null,"decb9bcU9IUIXQApjWKk5T",0],[1,0,-14.5,0]],[80,"Bar_Left",33554432,[-621,-622],[[9,-618,[1,"c0b8o35a9AlZckTIl9xWA5"],[5,2,59.72]],[23,0,-619,[1,"a0zXip8D9JqYceHiNvIEUl"],[4,4284216710],299],[307,13,-6,-7,-7,172,1,-620,[1,"e9kI7NomZGkL8f3YwdujH0"],37]],[16,null,"56Hk2UKeZI66WcShdJ+gEq",0],[1,-170,0,0]],[80,"Bar_Right",33554432,[-626,-627],[[9,-623,[1,"da7lnAXkNMs4PKAWYWOfeH"],[5,2,59.72]],[23,0,-624,[1,"9bkYEIo/VLB5VbyHhPXFV+"],[4,4284216710],302],[308,37,-6,-7,-7,172,1,-625,[1,"90n9ZO6ZhH5ouBiVHb0sLi"],37]],[16,null,"6eP/1hbqpOi5XeRFke3a3C",0],[1,170,0,0]],[253,"Holder_Yes Feedback",false,33554432,[-629,-630,-631,-632],[[9,-628,[1,"e4yHsMrkdGWKzEdF1on50d"],[5,40,36]]],[16,null,"8d5K8baVxM/IOyYBuIC/Nx",0]],[178,"Currency_Holder",33554432,1,[-636,-637],[[47,-633,[1,"9fgBVfUghCwb9nKUDADkXL"],[5,71.31,40],[0,1,0.5]],[248,1,1,4,-634,[1,"71/sO1GNdOuoIetEp4q5P7"]],[94,-635,[1,"eawvBvuRhKXYhy1UxHkrt6"]]],[16,null,"ca0jEmhiVLRrnJObBYr4Aw",0],[1,187.017,235.559,0],[1,1.2,1.2,1]],[53,"Text_Title",33554432,45,[-641],[[9,-638,[1,"987GnmLHBNyr1Cn91icFLE"],[5,31.48,37.8]],[70,"life",30,30,30,false,-639,[1,"a737Ae2JdB7ZyZ6ZHwVw1O"],[4,4294765656],6],[179,1,13.099999999999994,-640,[1,"2d7R8odc5ILJJGhtOWdKxO"]]],[16,null,"b2P6ihABdJ65BKsymgkopd",0],[1,0,198,0]],[30,0,null,25,[22,"75a1vm5JJA+ohuNwq5URob",-642,[60,"70wDt2VWFD16VzFvDwRYUS",null,[[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,true,["_debug"],[2,["9fkwbwsEJNtp1a9YblePmY"]]]]],7]],[53,"Text_Title",33554432,46,[-646],[[9,-643,[1,"794h5Xb+lA1Y5o9NX4anoL"],[5,71.41,37.8]],[70,"energy",30,30,30,false,-644,[1,"66gZu9LO5Lc7gHE/uweiJ4"],[4,4294765656],16],[179,1,13.099999999999994,-645,[1,"21bx/mQgdPn5wfmBrv1v/X"]]],[16,null,"54O84YE+ZD77CsJR4YWs9Q",0],[1,0,198,0]],[53,"Text_Title",33554432,47,[-650],[[9,-647,[1,"8dXYTxJ1xBD5LjCUeZhtKU"],[5,94.86,37.8]],[70,"recharge",30,30,30,false,-648,[1,"224nSdXpBGNK6zpXObiT5U"],[4,4294765656],26],[179,1,13.099999999999994,-649,[1,"68wDuoYsROs7QdHYUNLkI9"]]],[16,null,"73k6Di2YRER49CXSzEBrco",0],[1,0,198,0]],[83,"Line 01",33554432,48,[-653,-654],[[47,-651,[1,"01nKohP81MSqzuoch25Wr8"],[5,180,260],[0,1,0]],[128,45,100,100,-652,[1,"eew606MuJBNLpowW4901A7"]]],[16,null,"1a1W5s8t1HsZ2uTFYEXY2i",0]],[83,"Line 02",33554432,48,[-657,-658],[[47,-655,[1,"faVfzWDWdCZZDKnrZ7c5I3"],[5,180,260],[0,1,0]],[128,45,100,100,-656,[1,"45jRYe6yJIJqSIAQ6HeEHa"]]],[16,null,"fa2BeNCxdOkqyk+GqYGut3",0]],[83,"Line 01",33554432,49,[-661,-662],[[47,-659,[1,"7c5DUvpAhI/IpABkeBbQLc"],[5,180,260],[0,1,0]],[128,45,100,100,-660,[1,"45LlZzcIJO2byTPdpZ2yRQ"]]],[16,null,"96TRkWxkVMRoJqu2LxcZbk",0]],[83,"Line 02",33554432,49,[-665,-666],[[47,-663,[1,"78IKsUXgtPUKYHWHiwMyzt"],[5,180,260],[0,1,0]],[128,45,100,100,-664,[1,"a8gT0jIPFG5JbeVinWiwvJ"]]],[16,null,"30JqS38cNPlqXO1tRvrJk+",0]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[53,"Holder_TowerTabs",33554432,28,[7,8,9],[[48,-667,[1,"26upwnFQhKj5plbK8f8FRM"]]],[16,null,"21u58HYahI9529WWCwsjXr",0],[1,0,-230.39,0]],[159,"Overlay",false,33554432,6,[[9,-668,[1,"e3kmK0VDVF37oDPp2uvuyg"],[5,414,896.01]],[23,0,-669,[1,"9chMOzv+RAu5oVzjI+2XvN"],[4,3358785545],128],[309,45,40,36,1,-670,[1,"c76iAiYHJF+Y6Vh9RyDvIg"],1],[168,-671,[1,"49oAl8aI1LIZscqppxfFMq"]]],[16,null,"caH4KbkzVNJoYksUntIvKI",0]],[53,"Holder_Panel",33554432,6,[29,52],[[9,-672,[1,"250wsJsWlK+LipyQZOQGSG"],[5,360,80]],[154,0,-673,[1,"f7d4o5StREMbXON7OSsrtR"]]],[16,null,"ccjXMF5Y1GX7NCEmisq04+",0],[1,0,0.174,0]],[159,"Overlay",false,33554432,2,[[9,-674,[1,"924Fe0JWVICZ+qZy0Zyds1"],[5,414,896.01]],[23,0,-675,[1,"adThZoApVFeIJPVIQB5/c+"],[4,3358785545],163],[379,45,-20,-20,-20,-20,40,36,1,-676,[1,"81JH53HMBMx7F02KpUU6GU"],1],[168,-677,[1,"dc4+nGma5HI4viVsvyMKik"]]],[16,null,"59uu6dCMFE4aiFjzrJDOLt",0]],[53,"Holder_Panel",33554432,2,[13,62],[[9,-678,[1,"c00bDeemVFkoP3d/HkRGGd"],[5,360,180]],[154,0,-679,[1,"f5tnF9dwJL2qQDP0AsiyZu"]]],[16,null,"4dNPc2kF1A3rZdMayAKlW5",0],[1,0,6.447,0]],[112,"Text_Purchased Item",33554432,13,[[[47,-680,[1,"b9Gxug6+VGn7WpSV1DAp5I"],[5,190,30],[0,1,0.5]],-681,[96,-683,[1,"3bUqCPZMBH3bs52r7Hbt3e"],-682]],4,1,4],[16,null,"68/kp11xFJXLFnkZNdPK2u",0],[1,147.784,57,0]],[112,"Text_Item Info",33554432,13,[[[47,-684,[1,"f1WHbnultIoKWo++yG7uyn"],[5,226,56],[0,1,0.5]],-685,[96,-687,[1,"f6B9bHgTBMbKY21uiZre8d"],-686]],4,1,4],[16,null,"f6i5DXWT9Cx7gAZHIhv3jR",0],[1,150.492,12,0]],[53,"Stats 01",33554432,43,[-689,-690,-691],[[9,-688,[1,"b9egFrgXdF5Zqn/cw1e6Mp"],[5,30,30]]],[16,null,"b662KMOoBPU4skzO7gPyLN",0],[1,-139,-5.182,0]],[134,"Text_Stats Number",33554432,85,[[[9,-692,[1,"7dbvqIRNNEhqNtYuh2+/Mp"],[5,16.34,22.68]],-693,[96,-695,[1,"2874AxyihA9qHekX89QY6Y"],-694]],4,1,4],[16,null,"6ct52JpWZLAKO8EDQD+9W7",0]],[53,"Stats 02",33554432,43,[-697,-698,-699],[[9,-696,[1,"03gSA0d2JHFZwDkr0w0m9r"],[5,30,30]]],[16,null,"0bY56c/3dJNokQxGn5uzR8",0],[1,-77,-5.182,0]],[134,"Text_Stats Number",33554432,87,[[[9,-700,[1,"feFlhINkRKrIIIAkg5789Q"],[5,12.63,22.68]],-701,[96,-703,[1,"0fLksR0Z9Dx7ayXTrZYn3m"],-702]],4,1,4],[16,null,"a3ntAPPFVAG4YJ6m3Yz7uv",0]],[53,"Stats 03",33554432,43,[-705,-706,-707],[[9,-704,[1,"8dNose/UlIx4DhNXhExRIQ"],[5,30,30]]],[16,null,"41v+3KbvxKOLDXPqvL4Lf6",0],[1,-15,-5.182,0]],[134,"Text_Stats Number",33554432,89,[[[9,-708,[1,"caU76sCXRFdbxZ2pmUIaRl"],[5,8.19,22.68]],-709,[96,-711,[1,"3f0kUo9gBF7a6dY0yHuKLX"],-710]],4,1,4],[16,null,"e8M/iDVY5EcpRd/lhtU2U5",0]],[80,"Tower Placement (PH)",33554432,[44],[[47,-712,[1,"80Md0XN9tKNqz5w6P0fZNK"],[5,50,65],[0,0.5,0]],[390,false,0,-713,[1,"49B5Sxo09HPZ3f6s4F90tM"],[4,4291112778],243],[380,1,-10,-714,[1,"14Z84JUQ5B36aVLlmLjGWD"],13]],[16,null,"54bU7/TFVLKZkth5EoLFxL",0],[1,12.308,97,0]],[2,["71Cqetuz1TIrfKXzSRo+z5"]],[2,["93NMATgvJXN5P2Z0Pbx6xd"]],[2,["76kmy9MSZU7qIHreg7REJV"]],[2,["b8JcZpYRhbA7dBnVFp97b+"]],[2,["6ba5eX4SReyqm+Vbwgfquh"]],[2,["33sM9enERVxYZcocgwSPwR"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[2,["1bEwzooBRYiLITAV26DhPq"]],[2,["6bEJXm3ENa5ZOriZO+0Lz9"]],[2,["d2WuMenSdQdr89Jfpld4zw"]],[2,["754aHt1OpZU5MrqxM/Ip4m"]],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[2,["bbqAjalhlRdoiOW0dhSoUC"]],[2,["27Yce2+45c87fcrQ+S23Kt"]],[2,["9aoAAYJKJR56nsyDVR3xr1"]],[2,["12sIxAd4xbv59W3ANKj2X7"]],[2,["a8rRRSGbdZ75rtdYdCxXvt"]],[2,["19dqAvhYZW66LFXyVsSUYV"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[134,"Text_Stats Number",33554432,61,[[[9,-715,[1,"20tRbesPZNhJmYTPjCgPPF"],[5,19.11,52.92]],-716,[96,-718,[1,"19oyL48rNE1LHXc+RhRHHz"],-717]],4,1,4],[16,null,"0chn2/IIpNHo6ifUibx9HW",0]],[112,"Text_Value",33554432,22,[[[47,-719,[1,"f7xzqMzM1JtInZux0qiQ/R"],[5,29.05,40.32],[0,0,0.5]],-720,[96,-722,[1,"45kWQ1eo1BEYzar+fAt3KB"],-721]],4,1,4],[16,null,"c72tJF5YxE96F1c4SnsIqc",0],[1,3.9549999999999983,0.628,0]],[53,"AlreadyBought_Panel",33554432,2,[-726],[[9,-723,[1,"71MAMJbNtJBomKmarYD//C"],[5,145.76,34]],[23,0,-724,[1,"50MRT++D5FHaxiRVWPhvTZ"],[4,3366911],259],[261,1,1,14,14,4,-725,[1,"120GBg2Y9Fta2xwZ/yRHXn"]]],[16,null,"82qEZ6Z05GtbtPFe5HXOFw",0],[1,0,-95.054,0]],[197,"Holder_LackingMaxEnergy",false,33554432,2,[63,36],[[48,-727,[1,"bdigI5k7RNA49+HOQ3oQk+"]],[154,0,-728,[1,"5b1cbg9K9JpImYDDuRUZ5Y"]]],[16,null,"a4mrJrQN9HcaupKbt+T0Hs",0],[1,0,-149.583,0]],[159,"Overlay",false,33554432,5,[[9,-729,[1,"917WitCYREDL8OqETvIQHt"],[5,414,896.01]],[23,0,-730,[1,"22bcCQathJdqjh1m/Rs0+U"],[4,3358785545],296],[309,45,40,36,1,-731,[1,"65DRnKIORB6K9vb9Eupx06"],1],[168,-732,[1,"075i6bmYNP4JNDHotyxqX/"]]],[16,null,"2crDsytKFOsrd8iv1XKiOI",0]],[53,"Holder_Panel",33554432,5,[37,66],[[9,-733,[1,"e6+QMXblhJo6yoUAKqU2kw"],[5,360,80]],[154,0,-734,[1,"46LLHKNrxLA5G/TcDj9PfO"]]],[16,null,"69pFPFmDtKy4rLOsLQGtTg",0],[1,0,0.174,0]],[112,"Text_Purchased Item",33554432,37,[[[9,-735,[1,"48lhEMcSNO4KsP0VHCiwux"],[5,230.96,27.72]],-736,[96,-738,[1,"73WWIARLxL9pDXmyYC4Vw8"],-737]],4,1,4],[16,null,"cc1Gl3QppGk4xtAYyyqUjJ",0],[1,0,1,0]],[112,"Text_Value",33554432,38,[[[47,-739,[1,"f9bBXE3+RNkpKFTauM8A5u"],[5,29.05,40.32],[0,0,0.5]],-740,[96,-742,[1,"4diUgXmhNC0JEtSdza1J9D"],-741]],4,1,4],[16,null,"95MRIyDDJLAYxE6QXtusr8",0],[1,1.9549999999999983,0.628,0]],[224,"Icon_Stars Outline",33554432,67,[-745,-746],[[9,-743,[1,"81hcuAD/VLGqxEY/uDKuSA"],[5,26,26]],[108,0,-744,[1,"55UW672npHWZ0MnTfMJISe"],332]],[16,null,"98MIa5WJZNL4puF/c/n93C",0],[1,-13,0,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[53,"Separator 1",33554432,15,[-749],[[47,-747,[1,"63qLMfhsxNm5RviHJA2fhx"],[5,2,450],[0,0.5,1]],[23,0,-748,[1,"32uhArh8BCH4QWdXRyUqeM"],[4,4289235857],14]],[16,null,"3bm5EBHC5FaZrWAMgguu5R",0],[1,-59,194.501,0]],[41,"Square Top",33554432,120,[[9,-750,[1,"f0ZBLSdNhJELV/F/bJNvkb"],[5,2,2]],[23,0,-751,[1,"b6bY2oPKNOGLbteYvNJCZZ"],[4,4289235857],13],[179,1,-6,-752,[1,"ceeusgRxVMc61U+Ww9bHSd"]]],[16,null,"fadEvppatIrI0QhEIXXK6y",0],[1,0,5,0]],[53,"Separator 2",33554432,15,[-755],[[47,-753,[1,"49ynJ1AwtBCILqW4zkhLTj"],[5,2,450],[0,0.5,1]],[23,0,-754,[1,"fdfUKDUINI2IOnpuAvDuBN"],[4,4289235857],24]],[16,null,"6cOefGYZRPrbYFpYJFU8cL",0],[1,63,194.501,0]],[41,"Square Top",33554432,122,[[9,-756,[1,"19XmPpuihHRYxY4beXnVcz"],[5,2,2]],[23,0,-757,[1,"f5nDAn11BKbIMP4X7f2W8L"],[4,4289235857],23],[179,1,-6,-758,[1,"14YsizpZZFUaN4+V+3vHDP"]]],[16,null,"0eRPKgcidPgIjObDFxmKMT",0],[1,0,5,0]],[41,"Horizontal",33554432,72,[[47,-759,[1,"dbTXBQ6ZdF1oJ7cr5laqSw"],[5,64,2],[0,1,0.5]],[23,0,-760,[1,"b0CFEAtG1KGLcT8a99cMI1"],[4,4292928274],34]],[16,null,"73eTe0T3FP2ZXSxJy3TwFy",0],[1,0,226,0]],[85,"Vertical",33554432,72,[[47,-761,[1,"d7KZDIxDlAcoun64rrz+52"],[5,80,2],[0,1,0.5]],[23,0,-762,[1,"30Oi6HzFhFeJRaEuIKz/zy"],[4,4292928274],35]],[16,null,"c4CaBKQ0NJsLeGq+FGVN7Y",0],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,73,[[47,-763,[1,"4dbR5MKEJLzIHfjbcl/51C"],[5,48,2],[0,1,0.5]],[23,0,-764,[1,"a9bxUy7rlNiojwo2y4tO1N"],[4,4292928274],36]],[16,null,"b5zICNYD5IzJ+QrmEpOcR7",0],[1,-90,120,0]],[85,"Vertical",33554432,73,[[47,-765,[1,"61q/BoXa9DYoACXOjZ6JYO"],[5,98,2],[0,1,0.5]],[23,0,-766,[1,"97ICXQC29AkrmJ75D+piQJ"],[4,4292928274],37]],[16,null,"5atNgIbtBNxL9SuGH2f/rX",0],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,48,[-769],[[47,-767,[1,"f2lmoaF3NAcp6ROm0hStS2"],[5,180,260],[0,1,0]],[128,45,100,100,-768,[1,"cbFabPmVBAnKwb0nxdXV6H"]]],[16,null,"10mEgFgkBNW6Tb3i1KrDlI",0]],[85,"Vertical",33554432,128,[[47,-770,[1,"3ekgIruYJN45LE3+6Z9yfY"],[5,71,2],[0,1,0.5]],[23,0,-771,[1,"00yYzFVIFGNJZSDK5RqkC7"],[4,4292928274],38]],[16,null,"9589XdOKxFx6zgT5VoYbuD",0],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,74,[[47,-772,[1,"ecH+IRScxEm5h0ZDzdQdyE"],[5,64,2],[0,1,0.5]],[23,0,-773,[1,"4eV0A/hSVKZrSJsXgdMgI9"],[4,4292928274],39]],[16,null,"aft/GfD/pHgoVO8VL1ezWB",0],[1,0,226,0]],[85,"Vertical",33554432,74,[[47,-774,[1,"594zBj8dlMubIm9DrTm1LG"],[5,80,2],[0,1,0.5]],[23,0,-775,[1,"e5y1oIqHBKTJDEd+GUmiVD"],[4,4292928274],40]],[16,null,"04zXata2ZMKIz4Z3qUoGRi",0],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,75,[[47,-776,[1,"22Vmg3619IrpSGI0hmdZL6"],[5,48,2],[0,1,0.5]],[23,0,-777,[1,"7bVXjryiVJEJbNg+WC0AcQ"],[4,4292928274],41]],[16,null,"f45DZbNgBJeIqKBWB2pT9j",0],[1,-90,120,0]],[85,"Vertical",33554432,75,[[47,-778,[1,"b92J///nVJ7b6rMQzvNin9"],[5,98,2],[0,1,0.5]],[23,0,-779,[1,"433hithXNA8JwaTLt2O/kf"],[4,4292928274],42]],[16,null,"a7/FFYvCpOwLAMtQ2dKpZo",0],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,49,[-782],[[47,-780,[1,"f54JukNKJJ0Lr9KmkSVLYY"],[5,180,260],[0,1,0]],[128,45,100,100,-781,[1,"00NMD+7t1Fsac9NGagOCJo"]]],[16,null,"d2YFTNTk9J6Is5msZ9YSIC",0]],[85,"Vertical",33554432,134,[[47,-783,[1,"bbgTdt/cpAQLzXLwQWUCtM"],[5,71,2],[0,1,0.5]],[23,0,-784,[1,"b2GhoLHvhAEoT/o+Ud5haM"],[4,4292928274],43]],[16,null,"0dcrEpS31NrpOyDkWE4y8Q",0],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-793,[49,"d7Qi7A1tdH/LTTi6o0sKpj",1,[[11,"Fill Color",["_name"],-785],[5,["_lpos"],-786,[1,0,0,0]],[11,"Holder_ShopItemTower",["_name"],-787],[5,["_lpos"],-788,[1,0,108.968,0]],[5,["_lrot"],-789,[3,0,0,0,1]],[5,["_euler"],-790,[1,0,0,0]],[11,"No Currency Button",["_name"],-791],[5,["_lpos"],-792,[1,-0.5500000000000043,-5,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]],[17,true,["_active"],[2,["80YiVz6qFKN7arm9xbYeRI","1bEwzooBRYiLITAV26DhPq"]]],[17,true,["_active"],[2,["cfzF/Wk51P1JXBk/zJoOFP","a6UoiMmTtU6YsbaNPx5rqf"]]],[17,false,["_active"],[2,["833LM+JjxM6KI5LMQd3zSF"]]]]],51]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-808,[49,"15DJ7jmq1Ae66WkKJeB5w1",1,[[11,"Fill Color",["_name"],-794],[5,["_lpos"],-795,[1,0,0,0]],[11,"Holder_ShopItemTower T2 01",["_name"],-796],[5,["_lpos"],-797,[1,-63,3.9399999999999977,0]],[5,["_lrot"],-798,[3,0,0,0,1]],[5,["_euler"],-799,[1,0,0,0]],[11,"No Currency Button",["_name"],-800],[5,["_lpos"],-801,[1,-0.5500000000000043,-5,0]],[17,false,["_active"],[2,["07KURNz6dMK4PdBiolw5Np"]]],[11,"Icon_Currency Outline",["_name"],-802],[5,["_lpos"],-803,[1,-5.85,0,0]],[11,"Text_Cost",["_name"],-804],[5,["_lpos"],-805,[1,9,0,0]],[11,"Icon_Currency",["_name"],-806],[5,["_lpos"],-807,[1,0,0,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,-26,-21,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]]]],52]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-817,[49,"74FoDqeghE5JvREcQdepbY",1,[[11,"Fill Color",["_name"],-809],[5,["_lpos"],-810,[1,0,0,0]],[11,"Holder_ShopItemTower T2 02",["_name"],-811],[5,["_lpos"],-812,[1,63,3.9399999999999977,0]],[5,["_lrot"],-813,[3,0,0,0,1]],[5,["_euler"],-814,[1,0,0,0]],[11,"No Currency Button",["_name"],-815],[5,["_lpos"],-816,[1,-0.5500000000000043,-5,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,26,-21,0]]]],53]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-820,[49,"08YItQGcBFQpduqVLVCrtO",1,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 01",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,-139,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-818,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-819]]],54]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-825,[49,"8aYv3hX5FKB5nbxfplnPh8",1,[[11,"Fill Color",["_name"],-821],[5,["_lpos"],-822,[1,0,0,0]],[11,"Holder_ShopItemTower T3 02",["_name"],76],[5,["_lpos"],76,[1,-63,-121.06,0]],[5,["_lrot"],76,[3,0,0,0,1]],[5,["_euler"],76,[1,0,0,0]],[11,"No Currency Button",["_name"],-823],[5,["_lpos"],-824,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],76]]],55]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-828,[49,"c4vzRLahNK5pcaIc4/EzI3",1,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 03",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,63,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-826,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-827]]],56]],[30,0,{},12,[22,"54x3LC6jNKF6d4tobLj//p",-833,[49,"78ZYB+NMNHz7TSPoxDnk9O",1,[[11,"Fill Color",["_name"],-829],[5,["_lpos"],-830,[1,0,0,0]],[11,"Holder_ShopItemTower T3 04",["_name"],77],[5,["_lpos"],77,[1,139,-121.06,0]],[5,["_lrot"],77,[3,0,0,0,1]],[5,["_euler"],77,[1,0,0,0]],[11,"No Currency Button",["_name"],-831],[5,["_lpos"],-832,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],77]]],57]],[78,"Panel_Color",33554432,7,[[9,-834,[1,"d8WZhKUxFBmpOfrLz+J1zz"],[5,50,50]],[23,0,-835,[1,"b2XVlfquJPO6fvbckOMdPU"],[4,4292928274],58]],[16,null,"a68qp4fWJAbI//7O3LYDPg",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,8,[[9,-836,[1,"70qa+4AFhN2YXHNF83SJOA"],[5,50,50]],[23,0,-837,[1,"d9vxvAagxMqJ0sq/4Q6q8u"],[4,4292928274],67]],[16,null,"acuabYWKlNm5l3FYnSFZay",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,8,[[9,-838,[1,"edphJ7W9dCL7t6/dgz7SZK"],[5,54,54]],[46,1,0,-839,[1,"8frlo8Xx9IU4aWuKzORQVX"],[4,2028004114],69],[117,45,13,13,13,13,64,64,-840,[1,"1ckxpUxM5OXYgK0KLEQLQp"]]],[16,null,"6cZeF+qn5BlaCt6CC7SRvA",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,8,[[9,-841,[1,"b6DeDdMzdChZkmlQW/IJJf"],[5,58,58]],[46,1,0,-842,[1,"6elm++XwxBvYXWPBJYZxNd"],[4,1021371154],70],[117,45,11,11,11,11,68,68,-843,[1,"f4QrPU081Jf6/n+7MGmHok"]]],[16,null,"92aRsQiYBBGYSK0rA48sAS",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Panel_Color",33554432,9,[[9,-844,[1,"8bgUFgCt1BcIsw3mQAVECk"],[5,50,50]],[23,0,-845,[1,"c0E5atT+dBCZKy7i5f49qA"],[4,4292928274],72]],[16,null,"f2cF3zPXNJaLDqv2QWBmOU",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[224,"Text_Tab",33554432,3,[-848],[[9,-846,[1,"34At4MM+dLCJfGfJrFed1t"],[5,50.39,35.28]],[70,"CUBE",28,28,28,false,-847,[1,"cbKAhT8m9Os6K6BxRwAmmz"],[4,4292659132],96]],[16,null,"abdM2QEG1CGrSV7u13MQVR",0],[1,0,0.6,0],[3,0,0,-0.3826834323650899,0.9238795325112867],[1,0,0,-45.000000000000014]],[323,"Text_Tab (Backup)",false,33554432,3,[-851],[[9,-849,[1,"65h3dZDnZJB6QwwRLL6GSB"],[5,63.15,27.72]],[70,"Upgrade",22,22,22,false,-850,[1,"c5Fo3VbHhGgZ2aWct1jwh7"],[4,4292659132],98]],[16,null,"adTqH81MVBS5fYW3iY9yOw",0],[1,3.145,0.593,0],[3,0,0,-0.3826834323650899,0.9238795325112867],[1,0,0,-45.000000000000014]],[224,"Text_Tab",33554432,4,[-854],[[9,-852,[1,"19a37/i2REnIgg6A/8Z9Qw"],[5,65.83,35.28]],[70,"TOWER",28,28,28,false,-853,[1,"663cGnR/FKhY3mLNDG5c+x"],[4,4292659132],104]],[16,null,"79pqbc7QdMiYHrm1MjKaKC",0],[1,0,0.7,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[323,"Text_Tab (Backup)",false,33554432,4,[-857],[[9,-855,[1,"0bWMvzkpNOG4720hU9a7vS"],[5,63.15,27.72]],[70,"Upgrade",22,22,22,false,-856,[1,"08J0hxz85JybetkHY7++iS"],[4,4292659132],106]],[16,null,"8fXj0l7OZIwpTjX837QXYj",0],[1,1.624,0.7,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[112,"Text_Reset Info",33554432,29,[[[9,-858,[1,"f5ROveJmJL77kPPQv0t2de"],[5,230.96,71.72]],-859,[96,-861,[1,"fbDQHpG4ZC5Zg9yfme1XF5"],-860]],4,1,4],[16,null,"bb7+Dl8jRLapR/K0vQj9ir",0],[1,0,1,0]],[53,"Holder_Lines",33554432,29,[50,51],[[9,-862,[1,"86/3R68T1Itr22BHocq4n7"],[5,0,0]]],[16,null,"09dcPhk5tGQbWFtJc7aHf8",0],[1,0,-36.86,0]],[103,"Top_Bar",false,33554432,50,[[47,-863,[1,"ebumiRTEJJuZT/Z0uPb2BE"],[5,8,2],[0,0,0.5]],[23,0,-864,[1,"5dLJmvK8lABYOq0yHhNZuA"],[4,4284216710],129],[148,1,1,-865,[1,"4f/QIHR7lOybaTog3Bxpfd"]]],[16,null,"52414k4GVIp6G+4AHnSb0/",0],[1,0,39.86,0]],[103,"Bot_Bar",false,33554432,50,[[47,-866,[1,"d7O01AKeBCorokTAlkG16H"],[5,8,2],[0,0,0.5]],[23,0,-867,[1,"77NAXrghlFBKr0fpAChFbZ"],[4,4284216710],130],[148,4,1,-868,[1,"51VrybpdZDbo1H6BPIag8e"]]],[16,null,"b8pK2EzTlL/6B073002oeg",0],[1,0,-39.86,0]],[103,"Top_Bar",false,33554432,51,[[47,-869,[1,"76GVTf85NE57thxwIqu8iv"],[5,8,2],[0,1,0.5]],[23,0,-870,[1,"1d8DfgtqNCm48/J8H2v89R"],[4,4284216710],132],[148,1,0,-871,[1,"a261/Z9ZtC87FyfEnYC1PX"]]],[16,null,"8d2/IdKXdDS7e8HXgvaz3D",0],[1,0,39.86,0]],[103,"Bot_Bar",false,33554432,51,[[47,-872,[1,"57QJnJ0GtOkre0+ecyZIyb"],[5,8,2],[0,1,0.5]],[23,0,-873,[1,"3f0VdH4hhNbY2hdsg2a87Q"],[4,4284216710],133],[148,4,1,-874,[1,"72VeLK2Z5K4oFcatMXVS+5"]]],[16,null,"2498vn859AxbMwfZrRJLT9",0],[1,0,-39.86,0]],[41,"Text_Stats Name",33554432,85,[[9,-875,[1,"fabEz7cxpHQak3qtPX4V7K"],[5,35.67,16.58]],[181," damage ",14,14,13.95,false,false,-876,[1,"85VXw/33VOq4xqxFnrr9E+"],[4,4282187811],164],[191,0.1,-877,[1,"50jJ8fN2JGFo1qa+Rmm6LY"],[4,4282187811]]],[16,null,"83g4veuLZMuLbbU/2ymw+O",0],[1,0,22,0]],[41,"Text_Stats Name",33554432,87,[[9,-878,[1,"21UJwCbBlPKYamjxTaFv/Y"],[5,28.259999999999998,16.58]],[181,"speed",14,14,13.95,false,false,-879,[1,"4a/3aKBElB/qyR3SBvN9Qd"],[4,4282187811],166],[191,0.1,-880,[1,"83BnxNRZlHu75JwcW3A/Gm"],[4,4282187811]]],[16,null,"ceqss1009DV6D3u24crGcj",0],[1,0,22,0]],[41,"Text_Stats Name",33554432,89,[[9,-881,[1,"25X81WD+pI0av2UyulZLu3"],[5,28.05,16.58]],[181,"range",14,14,13.95,false,false,-882,[1,"721zqqgA5Kg5xqMwKtB/ZM"],[4,4282187811],168],[191,0.1,-883,[1,"9dT34EwFJFW6gfATitlMFK"],[4,4282187811]]],[16,null,"a7tHQgvvtN1a+1hiHxpp4Y",0],[1,0,22,0]],[53,"Holder_Lines",33554432,13,[53,54],[[9,-884,[1,"bbXJzOE4VPfK6FjUzmQehj"],[5,0,0]]],[16,null,"49wTbCCSREN4zWQLyl+4jk",0],[1,0,-70,0]],[103,"Top_Bar",false,33554432,53,[[47,-885,[1,"4bB/tmartFwZ7PNCBb5YHx"],[5,8,2],[0,0,0.5]],[23,0,-886,[1,"29cPXc6KlB9opedy8rP3zM"],[4,4284216710],170],[167,1,-887,[1,"99WYGzrjlFDZxZRoCu+RRN"]]],[16,null,"35jFeVsdRBvqeNrX+pxrm1",0],[1,0,86,0]],[103,"Bot_Bar",false,33554432,53,[[47,-888,[1,"2b++2u4slBK5PzY37fgYmc"],[5,8,2],[0,0,0.5]],[23,0,-889,[1,"baC+oSoX5C4qfkJJhtj98I"],[4,4284216710],171],[167,4,-890,[1,"11BGCEeldInpPcTBbgfHe8"]]],[16,null,"cfuGUfzhhJaZ9moIIKq2IQ",0],[1,0,-86,0]],[103,"Top_Bar",false,33554432,54,[[47,-891,[1,"57AuE0xUhGQ61sPc6sq3fy"],[5,8,2],[0,1,0.5]],[23,0,-892,[1,"9d9NvkoFxJIJXsXdjMRyaA"],[4,4284216710],173],[167,1,-893,[1,"d1PPGODwlCqpGYBWKcuzln"]]],[16,null,"14GaKuOShIMqa/ATn9dnvE",0],[1,0,86,0]],[103,"Bot_Bar",false,33554432,54,[[47,-894,[1,"2cNkMLl/dH8Jg2o0t+/flU"],[5,8,2],[0,1,0.5]],[23,0,-895,[1,"aad0CDV5xEEaBOKRFbpm4R"],[4,4284216710],174],[167,4,-896,[1,"3b+O+CtpZFCIkz9A5Ts4WV"]]],[16,null,"c015eixxFEvaiHo0IF6V8C",0],[1,0,-86,0]],[197,"Holder_Tower",false,33554432,13,[91,61],[[9,-897,[1,"04tUid4jdEBJrV6K2OJTr0"],[5,0,0]]],[16,null,"a9DPxrPehNga8Wb4LPvvLV",0],[1,-132,-71,0]],[30,0,null,30,[22,"71Cqetuz1TIrfKXzSRo+z5",-898,[208,"1ftIdeGzlMVJQjbR6+giI+",null,[[75,[2,["a0vA4SVVBXN5xQ94MS7y5I"]],[[202,[1,"3fHBaiS2BMxqVyKQWK+8OB"]],[199,[1,"8dt5eRvnpAGIomK1JE/H3N"]]]]],[[11,"SM_TowerCanonBody_01",["_name"],92],[5,["_lpos"],92,[1,0,0,0]],[5,["_lrot"],92,[3,0,0,0,1]],[5,["_euler"],92,[1,0,0,0]],[35,["_materials","0"],[2,["d9wgbH4UlZC7nUms8aIXK/"]],177],[17,8388608,["_layer"],[2,["a0vA4SVVBXN5xQ94MS7y5I"]]],[11,false,["_active"],92]]],176]],[30,0,null,30,[22,"424JMWZcNT+7LUIxhmggm+",-899,[60,"d6F84ycKtBGqhc+jIeXEhq",null,[[11,"SM_TowerSmash3RBody_01",["_name"],56],[5,["_lpos"],56,[1,0,0,0]],[5,["_lrot"],56,[3,0,0,0,1]],[5,["_euler"],56,[1,0,0,0]],[35,["_materials","0"],[2,["6dld1XsrhbprQRWAgl+86p"]],179],[11,false,["_active"],56],[5,["_lscale"],56,[1,1,1,1]]]],178]],[30,0,null,30,[22,"93NMATgvJXN5P2Z0Pbx6xd",-900,[60,"0e9y8RnrlJEpwcIOqmzkAB",null,[[11,"SM_TowerCometTBody_01",["_name"],93],[5,["_lpos"],93,[1,0,0,0]],[5,["_lrot"],93,[3,0,0,0,1]],[5,["_euler"],93,[1,0,0,0]],[35,["_materials","0"],[2,["36LCcIeKVRp7Mac4l4WlzY"]],181],[11,false,["_active"],93]]],180]],[30,0,null,30,[22,"76kmy9MSZU7qIHreg7REJV",-901,[60,"ba3PKsvgNKZo+4qM2y+dFN",null,[[11,"SM_TowerH311Body_01",["_name"],94],[5,["_lpos"],94,[1,0,0,0]],[5,["_lrot"],94,[3,0,0,0,1]],[5,["_euler"],94,[1,0,0,0]],[35,["_materials","0"],[2,["d5Ph66/6xbPK4Q72/PB8zz"]],183],[11,false,["_active"],94]]],182]],[30,0,null,30,[22,"b8JcZpYRhbA7dBnVFp97b+",-902,[60,"28QkawEipOYI0zm/bTlmbT",null,[[11,"SM_TowerS4RBody_01",["_name"],95],[5,["_lpos"],95,[1,0,0,0]],[5,["_lrot"],95,[3,0,0,0,1]],[5,["_euler"],95,[1,0,0,0]],[35,["_materials","0"],[2,["aa2p+GekNcwr3d84smoPpV"]],185],[11,false,["_active"],95]]],184]],[30,0,null,30,[22,"6ba5eX4SReyqm+Vbwgfquh",-903,[60,"14C73SQqpO9KiS7KLdiNu2",null,[[11,"SM_TowerMeteorUBody_01",["_name"],96],[5,["_lpos"],96,[1,0,0,0]],[5,["_lrot"],96,[3,0,0,0,1]],[5,["_euler"],96,[1,0,0,0]],[35,["_materials","0"],[2,["2aeozPTBpe75ML5ovX4gHo"]],187],[11,false,["_active"],96]]],186]],[30,0,null,30,[22,"33sM9enERVxYZcocgwSPwR",-904,[60,"00QNlygFBFULV5JiqJ5/Vw",null,[[11,"SM_TowerStarfallBody_01",["_name"],97],[5,["_lpos"],97,[1,0,0,0]],[5,["_lrot"],97,[3,0,0,0,1]],[5,["_euler"],97,[1,0,0,0]],[35,["_materials","0"],[2,["c2i6M6mIdSAJVEUjqztCnG"]],189],[11,false,["_active"],97]]],188]],[254,"Head Tower Gun",[[31,[362,"Bullet Spawn Position",32,-905,[16,null,"40mOz5O+9L25Orebor+dbE",0],[1,0,0.565,-0.45]],-906],1,4,1],[16,null,"8eDDkT1bJI8b9AFGi6q+bT",0]],[30,0,null,31,[22,"1bEwzooBRYiLITAV26DhPq",-907,[60,"d1ZxISFxtJuqu74De9Ow5w",null,[[11,"SM_TowerGunBody_01",["_name"],99],[5,["_lpos"],99,[1,0,0,0]],[5,["_lrot"],99,[3,0,0,0,1]],[5,["_euler"],99,[1,0,0,0]],[35,["_materials","0"],[2,["eee7bsTeFUS4J0Fkyz/23b"]],202],[11,false,["_active"],99]]],201]],[30,0,null,31,[22,"4d/LLVKgJfRaWh6CVtkvdN",-908,[60,"d1381ttidPj4LofnQtD2v8",null,[[11,"SM_Tower0MG2Body_01",["_name"],57],[5,["_lpos"],57,[1,0,0,0]],[5,["_lrot"],57,[3,0,0,0,1]],[5,["_euler"],57,[1,0,0,0]],[35,["_materials","0"],[2,["91rnZr2NlU+5mkmycELrbU"]],204],[11,false,["_active"],57],[11,8388608,["_layer"],57],[17,8388608,["_layer"],[2,["1bNv8OFqZfVYpfEynFuksV"]]]]],203]],[30,0,null,31,[22,"6bEJXm3ENa5ZOriZO+0Lz9",-909,[60,"94/1eMiGdKn4TWyFhEIduk",null,[[11,"SM_TowerBullziBody_01",["_name"],100],[5,["_lpos"],100,[1,0,0,0]],[5,["_lrot"],100,[3,0,0,0,1]],[5,["_euler"],100,[1,0,0,0]],[35,["_materials","0"],[2,["853BuGPRRQ2oL14CCvM0kL"]],206],[11,false,["_active"],100]]],205]],[30,0,null,31,[22,"06VFwTsJJRM4OSJg2XW4Q9",-910,[60,"81l3gj5E5Ks5brGsH6SdSe",null,[[11,"SM_Tower0MG4Body_01",["_name"],58],[5,["_lpos"],58,[1,0,0,0]],[5,["_lrot"],58,[3,0,0,0,1]],[5,["_euler"],58,[1,0,0,0]],[35,["_materials","0"],[2,["9bOQ2QYGtZs4WzqtGYB9n9"]],208],[11,false,["_active"],58],[11,8388608,["_layer"],58],[17,8388608,["_layer"],[2,["26PODSVIdRU55mar2WcIzo"]]]]],207]],[30,0,null,31,[22,"efp8IlO8deIZfWSlH1z7o0",-911,[208,"43eEVT+8tEQYD/OxzqORse",null,[[75,[2,["3aIYRFdwZW1ITWY1VGXMEK"]],[[202,[1,"87m8SGce9FF6ypHZus4AxJ"]],[199,[1,"68El6n6mRDaI/OUa3GOgz4"]]]]],[[11,"SM_Tower3MGvBody_01",["_name"],59],[5,["_lpos"],59,[1,0,0,0]],[5,["_lrot"],59,[3,0,0,0,1]],[5,["_euler"],59,[1,0,0,0]],[35,["_materials","0"],[2,["49Ry8eFLhb25C1Q8wGk6C1"]],210],[11,false,["_active"],59],[11,8388608,["_layer"],59],[17,8388608,["_layer"],[2,["3aIYRFdwZW1ITWY1VGXMEK"]]]]],209]],[30,0,null,31,[22,"d2WuMenSdQdr89Jfpld4zw",-912,[60,"93cC2joZ5BLbEPQnhOPl0M",null,[[11,"SM_TowerTunnelerBody_01",["_name"],101],[5,["_lpos"],101,[1,0,0,0]],[5,["_lrot"],101,[3,0,0,0,1]],[5,["_euler"],101,[1,0,0,0]],[35,["_materials","0"],[2,["9dDxbuCdVYVYsfEinJuqgr"]],212],[11,false,["_active"],101]]],211]],[30,0,null,31,[22,"754aHt1OpZU5MrqxM/Ip4m",-913,[60,"89xmM7X9NPwrg7Js+eu/2Q",null,[[11,"SM_Tower01HKOBody_01",["_name"],102],[5,["_lpos"],102,[1,0,0,0]],[5,["_lrot"],102,[3,0,0,0,1]],[5,["_euler"],102,[1,0,0,0]],[35,["_materials","0"],[2,["46S3F1J79Rz4XvfNv5iTfa"]],214],[11,false,["_active"],102]]],213]],[254,"Head",[[32,[102,"Laser Beam Spawn Pivot",-914,[16,null,"d96S1V1VZApJ10FJrlFriB",0],[1,0,0.598,-0.667]],[102,"Pulsar Spawn Pivot",-915,[16,null,"cdMItmcTNF1ocMh+ONkWsp",0],[1,0,0.2,0]]],1,4,4],[16,null,"ab9cn+9/NIGavz5Ap43o7D",0]],[30,0,null,32,[22,"c3aOBtjPNU96Ex7+KDGHdh",-916,[60,"27wRKeh1BOvomEOVBUv/Kt",null,[[11,"SM_TowerLaserBody_01",["_name"],103],[5,["_lpos"],103,[1,0,0,0]],[5,["_lrot"],103,[3,0,0,0,1]],[5,["_euler"],103,[1,0,0,0]],[35,["_materials","0"],[2,["c79Byda9tSsLPjCdZFbGni"]],226],[11,false,["_active"],103]]],225]],[30,0,null,32,[22,"bbqAjalhlRdoiOW0dhSoUC",-917,[60,"73CzTQLxtBjY868RL1xsPp",null,[[11,"SM_TowerPuls3rBody_01",["_name"],104],[5,["_lpos"],104,[1,0,0,0]],[5,["_lrot"],104,[3,0,0,0,1]],[5,["_euler"],104,[1,0,0,0]],[35,["_materials","0"],[2,["1fCLEjPmBTW6Y7Y/vYCPCL"]],228],[11,false,["_active"],104]]],227]],[30,0,null,32,[22,"27Yce2+45c87fcrQ+S23Kt",-918,[60,"ecFxiBbjBCjJJZT94mdmgU",null,[[11,"SM_TowerPulsarBody_01",["_name"],105],[5,["_lpos"],105,[1,0,0,0]],[5,["_lrot"],105,[3,0,0,0,1]],[5,["_euler"],105,[1,0,0,0]],[35,["_materials","0"],[2,["c1qYGglmVbiJ63kvX3SnJg"]],230],[11,false,["_active"],105]]],229]],[30,0,null,32,[22,"9aoAAYJKJR56nsyDVR3xr1",-919,[60,"ee7o/3/QpI0Jep9WlcZGTu",null,[[11,"SM_TowerThunderBBody_01",["_name"],106],[5,["_lpos"],106,[1,0,0,0]],[5,["_lrot"],106,[3,0,0,0,1]],[5,["_euler"],106,[1,0,0,0]],[35,["_materials","0"],[2,["a174aNwnFUq6B+C8hupOtt"]],232],[11,false,["_active"],106]]],231]],[30,0,null,32,[22,"12sIxAd4xbv59W3ANKj2X7",-920,[60,"44e/zYoHRN2ZN7aolbasSw",null,[[11,"SM_TowerElectroneerBody_01",["_name"],107],[5,["_lpos"],107,[1,0,0,0]],[5,["_lrot"],107,[3,0,0,0,1]],[5,["_euler"],107,[1,0,0,0]],[35,["_materials","0"],[2,["366PFgp3dcA6jQhh5OaNY0"]],234],[11,false,["_active"],107]]],233]],[30,0,null,32,[22,"a8rRRSGbdZ75rtdYdCxXvt",-921,[60,"3bCj4+449P7rbIlSBncmL1",null,[[11,"SM_TowerOmegaBeamBody_01",["_name"],108],[5,["_lpos"],108,[1,0,0,0]],[5,["_lrot"],108,[3,0,0,0,1]],[5,["_euler"],108,[1,0,0,0]],[35,["_materials","0"],[2,["ebLTCL4wZWyoex5cTjGOhH"]],236],[11,false,["_active"],108]]],235]],[30,0,null,32,[22,"19dqAvhYZW66LFXyVsSUYV",-922,[60,"17M/NDxDpG2odEA803pjdi",null,[[11,"SM_TowerPlasmaQBody_01",["_name"],109],[5,["_lpos"],109,[1,0,0,0]],[5,["_lrot"],109,[3,0,0,0,1]],[5,["_euler"],109,[1,0,0,0]],[35,["_materials","0"],[2,["d1WspVTtle/Jp16o0xqn79"]],238],[11,false,["_active"],109]]],237]],[41,"Text_Stats Name",33554432,61,[[9,-923,[1,"22v1C6JmhIx7jig4/eXnT5"],[5,62.730000000000004,16.58]],[181," energy cost ",14,14,13.95,false,false,-924,[1,"dekFkAvWxKb4nEvspyDiGE"],[4,4282187811],244],[191,0.1,-925,[1,"61yvZ7aE5G7JmLYxb69K0T"],[4,4282187811]]],[16,null,"8b8/UWiKNN9Jwy0k90rbQW",0],[1,0,36.079,0]],[366,"Currency_Panel Grey",33554432,[[9,-926,[1,"5cktPupLFCo6eHgWil+YX5"],[5,187.43,34]],[23,0,-927,[1,"7apdKFTEFCvqXry2l4mxLm"],[4,4285361517],252],[309,45,183.43,34,1,-928,[1,"3b8/OHaElMYYPA0yjgdQ+E"],22]],[3,"58WtRrRoJG+oiqnWmldOy5",1,0],[1,79.715,0,0]],[53,"Icon_Currency",33554432,22,[-931],[[9,-929,[1,"78CCWb191BJIzZfrySIVfc"],[5,26,26]],[23,0,-930,[1,"22O0usQ8FOHLEdUXrIw+MF"],[4,4294765656],255]],[16,null,"47Qe7aVr5PiLFwfgRa11bw",0],[1,50.004999999999995,0.785,0]],[33,"Icon",33554432,195,[[9,-932,[1,"65FyjFxoNM/L7hVyxnQXBb"],[5,24,24]],[108,0,-933,[1,"c1puzLQ3ZE0oeQT+WQFFnQ"],254],[117,45,1,1,1,1,40,36,-934,[1,"f7M46D6g1MEqYoJrzLQart"]]],[16,null,"6aVvYl7FBG8aUifflqt1B9",0]],[83,"Holder_Lines",33554432,37,[64,65],[[9,-935,[1,"5aEPve8JFIMImVC6SKw3WB"],[5,0,0]]],[16,null,"50C9uA0MtIe7L9nGUpgqeW",0]],[103,"Top_Bar",false,33554432,64,[[47,-936,[1,"80HX0jXaBNB4itMH1D+tnp"],[5,8,2],[0,0,0.5]],[23,0,-937,[1,"9dRLQUZ3pAPYxAhdJCsfjF"],[4,4284216710],297],[148,1,0,-938,[1,"83iNCMyX9M550TObsFltbE"]]],[16,null,"08CqHkmzZFcaarUg3f/678",0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,64,[[47,-939,[1,"76fubz5nhAFbXbDH4ZXUmV"],[5,8,2],[0,0,0.5]],[23,0,-940,[1,"a4Af9xvzRDW61mW1XbK5Ul"],[4,4284216710],298],[148,4,0,-941,[1,"d404f0sEdIGoOATSD5Fp8G"]]],[16,null,"12bNTRkKRC5Kd8YaPkZGTN",0],[1,0,-28.86,0]],[103,"Top_Bar",false,33554432,65,[[47,-942,[1,"0eSzvLftFFh6OUuQxeRqiZ"],[5,8,2],[0,1,0.5]],[23,0,-943,[1,"0fQhT1yJlLUpKFCrjH0tCG"],[4,4284216710],300],[148,1,0,-944,[1,"8daEqpN9VGr72QTz8ue0Ic"]]],[16,null,"54QVJy7Z9Lpqau9znmr67E",0],[1,0,28.86,0]],[103,"Bot_Bar",false,33554432,65,[[47,-945,[1,"6d1ru7CPdC6IhdyJqGq9xL"],[5,8,2],[0,1,0.5]],[23,0,-946,[1,"72xvfQ12lBr7gZ9GHl3gIw"],[4,4284216710],301],[148,4,0,-947,[1,"f2DlkRXfpCkJ+4fxBIiJWf"]]],[16,null,"12VqkMpnhDUq4rJ6ISu3yj",0],[1,0,-28.86,0]],[53,"Icon_Currency",33554432,38,[-950],[[9,-948,[1,"71j2bdxvpD2prILcbx40TC"],[5,26,26]],[23,0,-949,[1,"80RcnPdWtED4iRBEhkTiad"],[4,4294765656],310]],[16,null,"dekrSOL7VJy54gST+lIb6/",0],[1,48.004999999999995,0.785,0]],[33,"Icon",33554432,202,[[9,-951,[1,"79NWctGNRCZ4v92VdgciJh"],[5,24,24]],[108,0,-952,[1,"73lNzZcwVBkbiGz+ahTncn"],309],[117,45,1,1,1,1,40,36,-953,[1,"d40X9TR9pC/Kb3lkwSADSA"]]],[16,null,"edY1stVC1BsKzPQA1lo72L",0]],[112,"Text_Currency Total",33554432,67,[[[47,-954,[1,"41Zkf8H6hCT6JlmW4OfT7g"],[5,41.31,32.76],[0,1,0.5]],-955,[464," ",-957,[1,"7aSb0SGQpKBJKmeD4oAEKK"],-956]],4,1,4],[16,null,"29v7IVSbBP6ruZqbVhKPb6",0],[1,-30,0,0]],[33,"Icon_BG Color",33554432,119,[[9,-958,[1,"bcZYvoZ+1M/a0guohj7rdu"],[5,24,24]],[23,0,-959,[1,"ebhGozGx1G05NbN5lFWO4I"],[4,4294765656],330],[117,45,1,1,1,1,32,32,-960,[1,"16f3GvA55FS5lI2bigqwOo"]]],[16,null,"afVJRQKz1FDIMYTKprqX8M",0]],[33,"Icon_Currency",33554432,119,[[9,-961,[1,"64OhwfhWRNd4nB+N7ujPgi"],[5,22,22]],[108,0,-962,[1,"edyBP75RZIr5Qb9GoWpYW4"],331],[117,45,2,2,2,2,26,26,-963,[1,"c8u5ypNWxINbyfx/vjgwIW"]]],[16,null,"81Q3H5w2NIp4PWFq9h3WxO",0]],[85,"LSquare 01",33554432,24,[[9,-964,[1,"d0YW7YvLFKJKXUvt0hiQhW"],[5,36,36]],[23,0,-965,[1,"d2vItGxCZPnLuiApcV51CG"],[4,266127292],0]],[16,null,"aarKgt/3FFX7FY10qAetdq",0],[1,-140.631,-155.68,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 02",33554432,24,[[9,-966,[1,"75kACSdctKkqn+YTChYLkk"],[5,330,330]],[23,0,-967,[1,"03z9LfJelBKKPQENOanybr"],[4,266127292],1]],[16,null,"c0Y+hrM+RELouFnPWdnMBM",0],[1,-317.989,-58.783,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 03",33554432,24,[[9,-968,[1,"47zef+LAlIK5LhBz1MXsZ2"],[5,330,330]],[23,0,-969,[1,"96ZD6j+6BJspMnZra389nE"],[4,266127292],2]],[16,null,"c9HABdLkVEI6pN57qVCiN0",0],[1,-288.713,-282.661,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 01",33554432,24,[[9,-970,[1,"06JXdz4SpPHIE2YlZv92CR"],[5,330,330]],[23,0,-971,[1,"0dzjX0jcFLdYEJ/k8uqjo9"],[4,266127292],3]],[16,null,"aapXT4h4pIGZ/NQYCj1meV",0],[1,344.954,-149.847,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 02",33554432,24,[[9,-972,[1,"5aH6T6imxFyoNiB70m1QfV"],[5,330,330]],[23,0,-973,[1,"977z9D0vpIab0ed/YeIEww"],[4,266127292],4]],[16,null,"69s8Af+oVLFo1wzZDpaqjI",0],[1,134.971,-450.239,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Text_SubTitle",33554432,68,[[9,-974,[1,"d1ztpgNqlLaqTwLg+YT0h2"],[5,40.28,27.72]],[70,"total",26,26,22,false,-975,[1,"e7E2ZtFyhD77RPXSou7nkz"],[4,4294765656],5]],[16,null,"c0VH81coxF8qV44WnZn8ax",0],[1,1.41,-21,0]],[30,0,null,25,[22,"75a1vm5JJA+ohuNwq5URob",-976,[60,"12TKHhc5VBtp/TmmEQHdUG",null,[[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],8]],[30,0,null,25,[22,"75a1vm5JJA+ohuNwq5URob",-977,[60,"10JdPBYMhGnZ7POjjFfsYp",null,[[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],9]],[30,0,null,25,[22,"75a1vm5JJA+ohuNwq5URob",-978,[60,"d3JBcK9n5CMKAvyx4MB1lS",null,[[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],10]],[30,0,null,25,[22,"75a1vm5JJA+ohuNwq5URob",-979,[60,"2bVHPZZ1RNJ6fidDqIWUxV",null,[[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],11]],[41,"Text_SubTitle",33554432,70,[[9,-980,[1,"94s0/xbVxDBr8iLxDYLXId"],[5,40.28,27.72]],[70,"total",26,26,22,false,-981,[1,"0enviJPytOmJ32TJq0USyk"],[4,4294765656],15]],[16,null,"13dOqkCc1C6rtNPgMn+Tjg",0],[1,-8.421,-21,0]],[30,0,{},26,[22,"75a1vm5JJA+ohuNwq5URob",-982,[60,"30/wQAvnZPtIlQh+02+xvR",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],17]],[30,0,{},26,[22,"75a1vm5JJA+ohuNwq5URob",-983,[60,"19bXoDYZZMwIWZXL+JWh4K",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],18]],[30,0,{},26,[22,"75a1vm5JJA+ohuNwq5URob",-984,[60,"8dbz7ZnHtA9Knqi4FyY/lY",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],19]],[30,0,{},26,[22,"75a1vm5JJA+ohuNwq5URob",-985,[60,"99ZQUlZ7tEmKW7YuEmcHGg",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],20]],[30,0,{},26,[22,"75a1vm5JJA+ohuNwq5URob",-986,[60,"28dsWsrZRJsa1s8v2wwP01",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],21]],[41,"Text_SubTitle",33554432,71,[[9,-987,[1,"fdTxCEKClN8rwV3H8T3sTc"],[5,37.62,27.72]],[70,"rate",26,26,22,false,-988,[1,"bcfJ8RXcZAqrVP1dglf6mN"],[4,4294765656],25]],[16,null,"85b9ZWHJBGfYKSmncM2FZc",0],[1,2.743,-21,0]],[30,0,{},27,[22,"75a1vm5JJA+ohuNwq5URob",-989,[60,"1dL964mdlLSpQJfrQ+8Kf3",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],27]],[30,0,{},27,[22,"75a1vm5JJA+ohuNwq5URob",-990,[60,"9a5mG4j9FHdrFfb/KI8evN",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],28]],[30,0,{},27,[22,"75a1vm5JJA+ohuNwq5URob",-991,[60,"c9a9b8rHlKD6gzFgvH6LuM",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],29]],[30,0,{},27,[22,"75a1vm5JJA+ohuNwq5URob",-992,[60,"81wIZ5/fZCKq2nc2h8aG/A",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],30]],[30,0,{},27,[22,"75a1vm5JJA+ohuNwq5URob",-993,[60,"edIDYcAodIpZMhXSxHy4a7",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],31]],[41,"Bar",33554432,16,[[9,-994,[1,"913wbKpuBEzITd1fzDQ9YA"],[5,36,2]],[23,0,-995,[1,"3dbffEzddE5Yf4feuuNeui"],[4,4292928274],33]],[16,null,"7fqMEykb5ABp+7+IMrSKlF",0],[1,0,-17.107,0]],[85,"Tier Cube 01",33554432,11,[[9,-996,[1,"d23ij/kLJIJIWAu8+rL57r"],[5,6,6]],[23,0,-997,[1,"6dx88nUW9PbbqVmSfhtTIz"],[4,1692459794],44]],[16,null,"ccKCOemI1MpKSvXVPO7sQu",0],[1,-6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 02",33554432,11,[[9,-998,[1,"0f6PsTpqJBirVR01eAB0YZ"],[5,6,6]],[23,0,-999,[1,"9arYp42INLl7Wf40SusvaV"],[4,1692459794],45]],[16,null,"40D2hZJaJLmIh44e7S/GTB",0],[1,6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 03",33554432,11,[[9,-1000,[1,"604vd5P3dEkq688R7E8QqI"],[5,6,6]],[23,0,-1001,[1,"c1n8U1IRhJGaR31ZHNjc/O"],[4,1692459794],46]],[16,null,"d5L7xjDeFJupCgO9tJdtZa",0],[1,-12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 04",33554432,11,[[9,-1002,[1,"2fD0+3kDRKaaV/xnAsUg4Y"],[5,6,6]],[23,0,-1003,[1,"b7HW/CaaRONpgTupJO7+pn"],[4,1692459794],47]],[16,null,"e1JPPpclJE4owL+6IWOcWA",0],[1,0,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 05",33554432,11,[[9,-1004,[1,"79Xr7GpclE8KVGUNN0Vpru"],[5,6,6]],[23,0,-1005,[1,"0fkMcO/SBM1Ypt4geKhkuQ"],[4,1692459794],48]],[16,null,"adqQgsC41Fu7GOM3d/l9SM",0],[1,12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Divider 01",33554432,41,[[9,-1006,[1,"d3NNG3lqFNi6//7Tqo4Qgu"],[5,280,2]],[23,0,-1007,[1,"1f6vH430xJSZ508pqv7LCT"],[4,1021167806],49]],[16,null,"19I73LlkhFr6KTj6586VA8",0],[1,0,52.94,0]],[41,"Divider 02",33554432,41,[[9,-1008,[1,"dbyFBK6gJNiqbMFetLlrTm"],[5,280,2]],[23,0,-1009,[1,"59mhL+RQ1ELoaxno5E9q5S"],[4,1021167806],50]],[16,null,"30/e+IsyRAtr9pZIlNiV+9",0],[1,0,-58.56,0]],[78,"Select_Fill",33554432,7,[[9,-1010,[1,"abDLPLb9xKu4YC89o0UdHU"],[5,50,50]],[23,0,-1011,[1,"e08/Zh+d1N05VgO56qDlj/"],[4,8912686],59]],[16,null,"acxUe8OblOb4pA3EcX7v8y",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,7,[[9,-1012,[1,"e80QCv+4FIeZn6xouz5NpO"],[5,54,54]],[46,1,0,-1013,[1,"5de3aUUfpFiocy2CPdNKka"],[4,2028004114],60]],[16,null,"5bTXhMKdpOgIK2TZhRvIJh",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,7,[[9,-1014,[1,"dbNPfQ/mtINIMWWu14OUBb"],[5,58,58]],[46,1,0,-1015,[1,"f70Hg9YFtNeKHPoig8txBs"],[4,1021371154],61]],[16,null,"51JXUIC1NIUYX4chA6aK08",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,7,[[9,-1016,[1,"740w6et5FBtLq7NXG6J47h"],[5,24.46,28.98]],[70,"Gun",19,19,23,false,-1017,[1,"c7QCzMHu5LK5l04QMqdckV"],[4,3369912252],62]],[16,null,"c9uP8F3T1A1b5WCR+FvinQ",0],[1,0,3,0]],[239,"Tower T1",33554432,10,[[48,-1018,[1,"7byDh8tXJH7J1KicbawOl0"]]],[3,"c552+mJKRFAZnHMoMC6I05",1,0],[1,0,157.96799999999996,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T2 Left",33554432,10,[[48,-1019,[1,"6beQfO3xREbIOtGvW6PQdQ"]]],[3,"8eDz1jB1dIabGYP6vKAmmd",1,0],[1,-63,52.94,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T2 Right",33554432,10,[[48,-1020,[1,"b3EpQf4FFJGaRtCWmtpNZj"]]],[3,"30NeenBLhJgZ/RppOOACp6",1,0],[1,63,52.94,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T3 Left-Left",33554432,10,[[48,-1021,[1,"27BTZiIapO5abhhqKI5bJR"]]],[3,"b1/l/DaJNLL47CPX+aEDrn",1,0],[1,-139,-72.06,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T3 Left-Right",33554432,10,[[48,-1022,[1,"8aqmhH2FVCVqXD+Dsb+In/"]]],[3,"50USyHvJ9PXqVaxTOpbPZL",1,0],[1,-63,-72.06,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T3 Right-Left",33554432,10,[[48,-1023,[1,"a77MMDxClEKa7yaPe2RBOk"]]],[3,"dbMLupTpVD1KjshFxhZ6vc",1,0],[1,63,-72.06,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[239,"Tower T3 Right-Right",33554432,10,[[48,-1024,[1,"b9T38MhVpEi6ks+3gBVM0h"]]],[3,"25EBe4omxKMYHVwNavkoz+",1,0],[1,139,-72.06,0],[3,0.27059805007309845,0.6532814824381882,0.2705980500730985,0.6532814824381883],[1,75.99999999999999,76,76],[1,0,89.99999999999999,44.99999999999999]],[78,"Select_Fill",33554432,8,[[9,-1025,[1,"a0zVwtfA1GtZ5SinTcPkFC"],[5,50,50]],[23,0,-1026,[1,"e8AT33NwhPRK1XeWTSw60F"],[4,8912686],68]],[16,null,"0edyml4d9FlIC/CYxyw6LO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Text_Tower",33554432,8,[[9,-1027,[1,"8cn+slrQZF6r0ZkhxoqcQ1"],[5,47.44,28.98]],[70,"Cannon",19,19,23,false,-1028,[1,"43Ab66+AdPiLBYT8WASCQ7"],[4,3369912252],71]],[16,null,"30HbmstvROa74KfgW0kssA",0],[1,0,3,0]],[78,"Select_Fill",33554432,9,[[9,-1029,[1,"ec6mhZBPdLFKnZYaoakHgX"],[5,50,50]],[23,0,-1030,[1,"6aeQST5ddDwacnrd5jybde"],[4,8912686],73]],[16,null,"9ed7kVuHtDI7ISLKdQixuI",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,9,[[9,-1031,[1,"ddiCfpJUhDJ4MFHa1tXBQJ"],[5,54,54]],[46,1,0,-1032,[1,"8dd30VPw1Jf7eyTiviSkjK"],[4,2028004114],74]],[16,null,"0174+tKAhNw7gKkTSb6FXA",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,9,[[9,-1033,[1,"a191RJC0BAXaSZHV7W47qK"],[5,58,58]],[46,1,0,-1034,[1,"abSEBnHTZHfIcLtWgCfjHW"],[4,1021371154],75]],[16,null,"d678vTh/JMl7o+q7FNoDj5",0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,9,[[9,-1035,[1,"b68DKHxhBFz6pt2Ouizxhs"],[5,36.64,28.98]],[70,"Laser",19,19,23,false,-1036,[1,"50Cfo19rlAKaVOQfKhbCyG"],[4,3369912252],76]],[16,null,"00WKI/qMFLoKqOp2xdXGs0",0],[1,0,3,0]],[103,"Divider",false,33554432,28,[[9,-1037,[1,"b3+hDRDXlHD4ARQpduBePf"],[5,260,2]],[23,0,-1038,[1,"f4P+BfPN1N65VNuDEibWHl"],[4,1692256446],89]],[16,null,"b0effX2LZPGJTc5O3Kx2ux",0],[1,0,-169.835,0]],[41,"On Enable",33554432,23,[[48,-1039,[1,"6e6UxFD61LmZ9+SM3JNxyi"]],[203,-1040,[1,"edv7pDpRVAIoY521TMpdj9"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",7],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",8],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",9]]]],[16,null,"c6F3PxAZ9HWLBhhsqAPckX",0],[1,0,201.08500000000004,0]],[53,"Holder_Button Tab01",33554432,1,[3],[[48,-1041,[1,"d5ejNvArVBFa7N3ubLue/m"]]],[16,null,"98mDa1I/9Oc4+R8Wzq4vlV",0],[1,-131.089,-382.005,0]],[33,"Panel_Color",33554432,3,[[9,-1042,[1,"c4uT4fExxMR7NHUeUd9aSC"],[5,60,60]],[23,0,-1043,[1,"efRRf8nQRErKgKhWAJEIep"],[4,4292928274],91]],[16,null,"b6ewoDHdpMhL4Obw+bqunF",0]],[33,"Select_Fill",33554432,3,[[9,-1044,[1,"13F5IVq4xNFZx1amiaQBCK"],[5,60,60]],[23,0,-1045,[1,"b827vLpXtBMJ9KSMlqKD9p"],[4,8912686],92]],[16,null,"65X3RAmRVFtqC0Vw/Dfsfb",0]],[33,"Outline 01",33554432,3,[[9,-1046,[1,"9bRBEc8dBC26F7K0RGlPYU"],[5,66,66]],[46,1,0,-1047,[1,"b8G9MsGa1OdojG291gasG1"],[4,2028004114],93]],[16,null,"feHga0yWVKf6asO70sEFoh",0]],[33,"Outline 02",33554432,3,[[9,-1048,[1,"4ax78aQKZPtbS8gBeMW+tI"],[5,72,72]],[46,1,0,-1049,[1,"66stK1r/BGmI0I//+P+iy3"],[4,1021371154],94]],[16,null,"70KJ95lZxCAqyoUuZX03Mx",0]],[103,"Text_Tab-001",false,33554432,151,[[9,-1050,[1,"9b/BxnXIZH967K+pr7QveV"],[5,23.58,17.64]],[70,"Cube",14,14,14,false,-1051,[1,"2emXHGLn5O3pZJLSU/1VId"],[4,4292659132],95]],[16,null,"a7uFPMFN9LUqmHfJrPyyNf",0],[1,0,12.188,0]],[33,"On Enable",33554432,3,[[48,-1052,[1,"ea494IxSJAf5m7ISf8pNXV"]],[203,-1053,[1,"69K4AS+EFMuIAihcHvv00c"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",3]]]],[16,null,"ddiStGBCRK6brSSgFSiJ1/",0]],[41,"Text_Tab-001",33554432,152,[[9,-1054,[1,"79iaLMLlZJHI2mIh312pT8"],[5,23.58,17.64]],[70,"Cube",14,14,14,false,-1055,[1,"d5AWqx31dPq5bojSYLuPtt"],[4,4292659132],97]],[16,null,"38+ZWtFk5MepZBEp1KNirX",0],[1,0,12.188,0]],[53,"Holder_Button Tab02",33554432,1,[4],[[48,-1056,[1,"18Kq3QUQFC44T/adUXse+9"]]],[16,null,"34XSZ29xJI3IV9uq7qPmH5",0],[1,-15,-382.005,0]],[33,"Panel_Color",33554432,4,[[9,-1057,[1,"86sW1W+MlElbJloF8fZ275"],[5,60,60]],[23,0,-1058,[1,"49BrSYGitAtZryVPiq7Gcz"],[4,4292928274],99]],[16,null,"a1R9WPAclIVLv8YPyoietP",0]],[33,"Select_Fill",33554432,4,[[9,-1059,[1,"a8dkAgGMRKCZEuZGFhqVSW"],[5,60,60]],[23,0,-1060,[1,"00HoVx4UVMPof7wit/2Sj5"],[4,8912686],100]],[16,null,"59+3UYuw9NP7FLH0QGNWQQ",0]],[33,"Outline 01",33554432,4,[[9,-1061,[1,"95pXuWUEhJ/byf3/iA5w6s"],[5,66,66]],[46,1,0,-1062,[1,"e7tcjeYlhPOrh63KNzGbU1"],[4,2028004114],101]],[16,null,"77AHlzL0NBV6+17/MUs6sU",0]],[33,"Outline 02",33554432,4,[[9,-1063,[1,"dcS7aFKJ9EIKPw1/XJuUQb"],[5,72,72]],[46,1,0,-1064,[1,"37t2/91wVGBLmQI8u9R5pL"],[4,1021371154],102]],[16,null,"9fUZerXERLu4RykjQlBXqF",0]],[103,"Text_Tab-001",false,33554432,153,[[9,-1065,[1,"feHBmazFBC3rcQ/CpfCDXH"],[5,29.58,17.64]],[70,"Tower",14,14,14,false,-1066,[1,"2fpG/HfuhFCppHPnFEvZFJ"],[4,4292659132],103]],[16,null,"eaNJw4a/JLPqCvXVAY1m89",0],[1,0,12.188,0]],[33,"On Enable",33554432,4,[[48,-1067,[1,"5fa1/0kXVEL4h04Cbz6B27"]],[203,-1068,[1,"9b8Ei9YPZFgISFJJURHjFq"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",4]]]],[16,null,"e2RT42HmBMmYKfMYgRtB4A",0]],[41,"Text_Tab-001",33554432,154,[[9,-1069,[1,"90Kpeen0FKk75xxYbE0VIP"],[5,29.58,17.64]],[70,"Tower",14,14,14,false,-1070,[1,"7dRB0MjjdJTY/oXrcva+u1"],[4,4292659132],105]],[16,null,"efJ4ucu15Fjq/3xz763zNf",0],[1,0,12.188,0]],[41,"Divider",33554432,1,[[9,-1071,[1,"00tJ4w5QJCdIpoAKACS+7G"],[5,372,2]],[212,-1072,[1,"77DgUNXeRI867tkoMWcihm"],[4,1692256446],117]],[16,null,"09AApWuHBN6oXBB2IX0bxN",0],[1,0,-321.04,0]],[78,"Icon_Back",33554432,42,[[9,-1073,[1,"ff5h51nqBNbYJgYmlBK3aV"],[5,20,20]],[23,0,-1074,[1,"fbngMu0nNMFYJgw19TWjct"],[4,4281532425],118]],[16,null,"15JA6vwHJDKqrmm4l4M5J9",0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[178,"Holder_Button Reset",33554432,1,[14],[[48,-1075,[1,"26iEvGdYdDboaiN95VhIH7"]]],[16,null,"ecaMT4XttBYrcB8l+EhKGM",0],[1,127.455,282.194,0],[1,0.6,0.6,1]],[33,"Panel_Color",33554432,14,[[9,-1076,[1,"36i5ty1RNM8okjOXkyX1uC"],[5,180,40]],[23,0,-1077,[1,"58xTMK+wZK15ctGngdG5j/"],[4,4283302143],124]],[16,null,"7b2VquGkVOt7ZLAHQcDrAT",0]],[33,"Outline 01",33554432,14,[[9,-1078,[1,"4eoiLOh9lIw66pdROBU0QO"],[5,186,46]],[46,1,0,-1079,[1,"1blf5uKWZG2IctZjJgpIK2"],[4,2018377983],125]],[16,null,"67BS86Z5lJkYtO4mqTC+PL",0]],[33,"Outline 02",33554432,14,[[9,-1080,[1,"49cr0OCjpIfJJsRdgNLvMn"],[5,192,52]],[46,1,0,-1081,[1,"3cVwc7m7FE2rMAm7AC1V96"],[4,1011745023],126]],[16,null,"bfIkhUVXNKyLW06x+WsL0F",0]],[41,"Text_Tab",33554432,14,[[9,-1082,[1,"314/hz+ntCRb75P0HIyXlm"],[5,149.06,35.28]],[70,"Reset upgrades",28,28,28,false,-1083,[1,"74HcB9DQROjZTaLkDyL5mK"],[4,4281532425],127]],[16,null,"bevhrv1lZPdKuPoIU9CN01",0],[1,0,0.7,0]],[78,"Outline 02",33554432,52,[[9,-1084,[1,"c0TFciSOFDlodu0jSO6NGt"],[5,72,72]],[46,1,0,-1085,[1,"43MCAoIqpHrpQTifwsS2Iz"],[4,4281255201],136]],[16,null,"77ErH5pR5NnLHl5oNOv2xH",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,52,[[9,-1086,[1,"bcuCGcvvtFc4AtVYIz6qqt"],[5,66,66]],[46,1,0,-1087,[1,"1aaj2L1OFPRrfP5hr4QiNT"],[4,4281255201],137]],[16,null,"46jgsR0PtE6KWmW5M1zHEk",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,52,[[9,-1088,[1,"0aFi2rtolGrLTHkvI3DhrL"],[5,60,60]],[212,-1089,[1,"febs11Fg9EYofaDX1W5KqO"],[4,4281255201],138]],[16,null,"97B0bjWjZMTJLpPlMSu1+6",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,52,[[9,-1090,[1,"e7dD3dWsFPhJkSfEKnHlJp"],[5,24,18]],[108,0,-1091,[1,"47xGBJFc9F24Na0txk0ocb"],139]],[16,null,"d541NifstFDJI7mcvFl3aU",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[178,"Holder_Yes",33554432,6,[17],[[9,-1092,[1,"42kSgf4rZFa6cxHC8a++4o"],[5,60,40]]],[16,null,"9ezBAUgXhH0pZwSPoSNEk/",0],[1,50,-67.838,0],[1,0,0,1]],[33,"Outline 01",33554432,17,[[9,-1093,[1,"f9sa9WvDBGe4uSOyecY6Ya"],[5,62,46]],[46,1,0,-1094,[1,"e97u/iyT1DGZHTwrtRWxEQ"],[4,2521425664],140]],[16,null,"6e6Sg1NwNL4br2wx7NILgq",0]],[33,"Outline 02",33554432,17,[[9,-1095,[1,"5b+3r/KA1Fka+lwkB2m4L9"],[5,68,51]],[46,1,0,-1096,[1,"58olRWD7dIeKW69RRuLMp1"],[4,1347020544],141]],[16,null,"caAijO8p1BL6Q7A9ZmaqwM",0]],[41,"Text_Yes",33554432,17,[[9,-1097,[1,"0cBNZGsuRGzZZfEUeWvHez"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-1098,[1,"87dWjO+LJLxr0G21S1gbEA"],[4,4279976969],142]],[16,null,"80AYtZ98NPnY+QkMAvaMZU",0],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,6,[18],[[9,-1099,[1,"29BZIK81RHZY/sCLSYgyad"],[5,60,40]]],[16,null,"51CDatF0lCr5LYmYwCinHg",0],[1,-50,-67.838,0],[1,0,0,1]],[33,"Outline 01",33554432,18,[[9,-1100,[1,"d6x+1e5lhJ24QB2pOVt9hN"],[5,62,46]],[46,1,0,-1101,[1,"80Y96BwhZIYJPW5AZB5Yky"],[4,2521694463],147]],[16,null,"78cq0RB7xGfpmbGpyig4TG",0]],[33,"Outline 02",33554432,18,[[9,-1102,[1,"c2yocJRydCe4hi2O213how"],[5,68,51]],[46,1,0,-1103,[1,"0dCQCkMNBPa4gg2ur2b/IJ"],[4,1347289343],148]],[16,null,"1e5qcFfH9HrqAMC/zxRdAe",0]],[41,"Text_No",33554432,18,[[9,-1104,[1,"894alU7vlJNrC3XGlZBJeq"],[5,24.77,35.28]],[70,"No",28,28,28,false,-1105,[1,"31ws1h0U9N+b6g3oP9I9KI"],[4,4279764543],149]],[16,null,"0aRdPIJnhMuJvsyhMLCC4U",0],[1,-0.448,1.157,0]],[78,"Panel_Color",33554432,85,[[9,-1106,[1,"38nkrMUZxNW7lpePLYlfPY"],[5,20,20]],[23,0,-1107,[1,"42sl75qbxDd6V41cUzTWsP"],[4,4282187811],165]],[16,null,"78zLNxkbNHUK7xobqh0a9d",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,87,[[9,-1108,[1,"faj1RDVXlLCKjAYLOVgUlW"],[5,20,20]],[23,0,-1109,[1,"33aeG3zptON6xNT23tglCp"],[4,4282187811],167]],[16,null,"85TvCUA2lEaKUU0uR6WqA/",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,89,[[9,-1110,[1,"98ZatXECFDkqCdOzHgGWui"],[5,20,20]],[23,0,-1111,[1,"55CsWVy79EgKLm0iz2qHy1"],[4,4282187811],169]],[16,null,"bbN9ax7AhPPY6suHkOrMua",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[226,"Art",[-1113],[[210,-1112,[1,"1emyBrfQBAUq0NqzxvMf9B"],[198,199],200]],[16,null,"7cjfgLGpRBPp4beJLjYp7Q",0],[1,0,0.25,0]],[42,"Cannon Tower Model",294,[55,-1114],[16,null,"5bL2xCgF5MwJld1wvGmhz9",0]],[226,"Art",[-1116],[[210,-1115,[1,"6fbc70eANNWp28wZL+5OTh"],[223],224]],[16,null,"0fgA/YYBdC66p+kPHNbzl7",0],[1,0,0.25,0]],[42,"Gun Tower Model",296,[177,-1117],[16,null,"2eB6XlQLRAQoferPO7XwZa",0]],[55,"Muzzles",[-1118,-1119],[16,null,"deNT69sBlJ6piMckjDCRJ2",0]],[273,"Bullet_Muzzle_Flash",512,298,[-1120,-1121],[16,null,"e1H64SQOdPK5ca9COiD9xL",0],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[226,"Art",[-1123],[[210,-1122,[1,"5f3Vp/c05BWKb+rd3WtdNP"],[241],242]],[16,null,"0aYnimvoFHdL3YBaFUXPHZ",0],[1,0,0.25,0]],[324,"Laser Tower",300,[185,-1124],[16,null,"2abxVc3MhB5oEydlBrlWiM",0],[1,0,-0.05,0]],[33,"Panel_Color",33554432,61,[[9,-1125,[1,"1aS/dKVEBDip1wXiO5Nezj"],[5,44,44]],[23,0,-1126,[1,"9ayssUVXlFY6LgyMaImk5y"],[4,4292928274],245]],[16,null,"c8kkB8AltMyp5doXreuKTF",0]],[78,"Outline 02",33554432,62,[[9,-1127,[1,"8exm+CjsRBfZOsu+Kn6HHT"],[5,72,72]],[46,1,0,-1128,[1,"716OaubDhL2I/7WkL5+Ygy"],[4,4281255201],248]],[16,null,"1aYaoXLpJOjaoq9W1Hd2oP",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,62,[[9,-1129,[1,"02siiyh99P7pkHNEuxhva6"],[5,66,66]],[46,1,0,-1130,[1,"e4tS8gx5pLoYWxYhGXQqmG"],[4,4281255201],249]],[16,null,"25not+uKlBTJlN8seu8tpy",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,62,[[9,-1131,[1,"8bKmbyECRAVYugDGwNR/LJ"],[5,60,60]],[212,-1132,[1,"07u4Ko/m9HM7a4PGwdfxaL"],[4,4281255201],250]],[16,null,"b2syh/+0pELbp4sxKtZxgY",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,62,[[9,-1133,[1,"f65OvKTYtOBIRvYyXpc/dG"],[5,24,18]],[108,0,-1134,[1,"56mzPjlGdHiIHxooPFOFAJ"],251]],[16,null,"f0Ku3ruvtPxIFUO/R1/Rrb",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[53,"Holder_Grey Panel",33554432,22,[194],[[9,-1135,[1,"c4uSEgwQ5O3aKpAK6mqOAL"],[5,0,0]]],[3,"1dkUsmMM1D+py1TqLQV/C8",1,0],[1,-79.715,0,0]],[41,"Text_unlock for",33554432,22,[[9,-1136,[1,"2eJthZwyBGlJU0GUWik0++"],[5,75.67,27.72]],[70,"unlock for",22,22,22,false,-1137,[1,"3fdSH//VZNy6vG6F/K1s+5"],[4,4281532425],253]],[16,null,"e4MAi8uvNMjKsNZa+kw9XZ",0],[1,-37.88,0,0]],[41,"Text_?",33554432,22,[[47,-1138,[1,"06Of+rJ/BDyIkkuFWE8kOD"],[5,12.71,40.32],[0,0,0.5]],[314,"?",2,30,30,32,false,-1139,[1,"912Vx1HGZENa41YuGX/u9H"],[4,4281532425],256]],[16,null,"0fkK7xDxBK6YZkCeXlTi39",0],[1,67.005,0,0]],[33,"Text_unlock for",33554432,113,[[9,-1140,[1,"79b6H/RFhEzZM9my1NAWU6"],[5,117.76,27.72]],[70,"Already bought!",22,22,22,false,-1141,[1,"38slrfDhhFIpAl0qEeT8k3"],[4,4281532425],258]],[16,null,"2dgH+NA9pP6JUiLtAYA68j",0]],[178,"Holder_Yes",33554432,2,[33],[[9,-1142,[1,"01a5NzOHJL6p3d4IMxqkoq"],[5,60,40]]],[16,null,"89ZY/FsSVA+7amd3ytgNIM",0],[1,50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,33,[[9,-1143,[1,"70H07dO/BDGqbaIhMEF/du"],[5,62,46]],[46,1,0,-1144,[1,"d1lXGHIP1PwIqTwEDqPXwB"],[4,2521425664],260]],[16,null,"e9XDGuw0JPUqABngU8dqEx",0]],[33,"Outline 02",33554432,33,[[9,-1145,[1,"54Obts0A5LL6wmQQcbYUEe"],[5,68,51]],[46,1,0,-1146,[1,"e6KMYE1IpEBJDDoqyZFCrH"],[4,1347020544],261]],[16,null,"886bXdN05GaKTi7kGvXbwU",0]],[41,"Text_Yes",33554432,33,[[9,-1147,[1,"98ExqNqkxB45eme06MnzDG"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-1148,[1,"44tBjKsFJNAah+Lpgc8RlE"],[4,4279976969],262]],[16,null,"bfTIeSVgZA3YKahvjMGWcX",0],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,2,[34],[[9,-1149,[1,"e1/Pk25u9DPLxFM8D/jlxZ"],[5,60,40]]],[16,null,"63HMoaxTVEOr7ZC37a/6/C",0],[1,-50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,34,[[9,-1150,[1,"5cVopZRXhDxqN3aMRE2Jja"],[5,62,46]],[46,1,0,-1151,[1,"100gSwCjJLYZAeR7ADC0Qu"],[4,2521694463],266]],[16,null,"cfc1ASTDlFCpX4hjxt0VqK",0]],[33,"Outline 02",33554432,34,[[9,-1152,[1,"4bf5JBsh5AnpX7IVwUDupE"],[5,68,51]],[46,1,0,-1153,[1,"e1L2nAh45Hrot/A1+Jv8hs"],[4,1347289343],267]],[16,null,"60u55ry49C9r23Sqh6KxfV",0]],[41,"Text_No",33554432,34,[[9,-1154,[1,"3fT+r3R5xIrqtjccAdOIug"],[5,24.77,35.28]],[70,"No",28,28,28,false,-1155,[1,"abIMmvbfxP9ooKi1zP6KFk"],[4,4279764543],268]],[16,null,"f0mjCbC39HIax1qR5Dov/H",0],[1,-0.448,1.157,0]],[301,"Holder_Back",false,33554432,2,[35],[[48,-1156,[1,"21o3jiRBpMyYx7ScmKzBwe"]]],[16,null,"00KdnigKJLRJAc9juW9w6z",0],[1,0,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,35,[[9,-1157,[1,"f0d9MJHnhKOJV0WJDZ1+uT"],[5,68,46]],[46,1,0,-1158,[1,"faHmLE93xDbqiLOy1RiT+K"],[4,2531117246],272]],[16,null,"a6nFDtQUtMJIWwtRWOcMbW",0]],[33,"Outline 02",33554432,35,[[9,-1159,[1,"09HC6EvoVGmLUtR5aEYHAF"],[5,74,51]],[46,1,0,-1160,[1,"4eCYVBfXRHmI3PMjjDe2Qp"],[4,1356712126],273]],[16,null,"9ayUEO9/dApJve9ICBpOkW",0]],[41,"Text_Back",33554432,35,[[9,-1161,[1,"9a7DL0laBELKU5b1XQYsW9"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-1162,[1,"15/dnMUsZM44BwzogxB+tO"],[4,4281532425],274]],[16,null,"447OHxuN5Ce4dyzGhVvZVm",0],[1,-0.448,1.157,0]],[41,"Text_01",33554432,63,[[9,-1163,[1,"6fMI9H+uBM3qwVYiC+v57C"],[5,260.41,37.8]],[181,"Not enough Max Energy to build!",24,24,30,false,false,-1164,[1,"9aox0tZ8dNVZoDR1JCVJGf"],[4,4281539080],278]],[16,null,"ecgQTC8jZPeb9pnLU92cnO",0],[1,0,17.459,0]],[41,"Text_02",33554432,63,[[9,-1165,[1,"89qFFbq5ROZazswmcmBidX"],[5,234.5,37.8]],[398,"Upgrade your Max energy first.",22,22,30,false,false,-1166,[1,"35DHBAgJtKdoVQLICWdeu2"],279]],[16,null,"b7/gxtVC9AlZKqvP+tgA/D",0],[1,0,-16.628,0]],[33,"Outline 01",33554432,36,[[9,-1167,[1,"f1MI/dYZdN7rfomcdYwYvk"],[5,68,46]],[46,1,0,-1168,[1,"31z+a5g9FDo4ZPs3sW86ut"],[4,2531117246],281]],[16,null,"fd1LJizwlHPo8Z3yIJHJjs",0]],[33,"Outline 02",33554432,36,[[9,-1169,[1,"c5V/rtmrFObbhgAuqLx+o+"],[5,74,51]],[46,1,0,-1170,[1,"26NMu1QhlNrqCy/oiKd22Q"],[4,1356712126],282]],[16,null,"d3b6ByvPRESYv152Fk3oab",0]],[41,"Text_Back",33554432,36,[[9,-1171,[1,"ddmcVlU3dPVYou0KmAziPL"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-1172,[1,"b0ZL8ucFpJbILZAfH1wM0Z"],[4,4281532425],283]],[16,null,"01Ss8umn9IhaRTKbyl6Cee",0],[1,-0.448,1.157,0]],[78,"Outline 02",33554432,66,[[9,-1173,[1,"961AcUtTdJpbLuOYn0+ep+"],[5,72,72]],[46,1,0,-1174,[1,"f0mQc7eZpC652ro/gz5oo1"],[4,4281255201],304]],[16,null,"ebRLvSPZxMsZFheg7UOP9m",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,66,[[9,-1175,[1,"2ez2lkVudLT4YcPaof5X4l"],[5,66,66]],[46,1,0,-1176,[1,"a4vp2q9/NIL44uwuXrf67C"],[4,4281255201],305]],[16,null,"4byw2RfqFE0KQLsuUPznqO",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,66,[[9,-1177,[1,"c33kXo7WRERJYUifSaSmnT"],[5,60,60]],[212,-1178,[1,"49hKL+vKpAOZ85aGWTQMEB"],[4,4281255201],306]],[16,null,"318FaHo6FPiIBxO7WNjoYU",0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,66,[[9,-1179,[1,"acn7sEqsxAEpw+c8pZFlng"],[5,24,18]],[108,0,-1180,[1,"25h2VFqxlCfZDpUhnejj6k"],307]],[16,null,"51qBNy77xOY6J8hH4d+9v2",0],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[41,"Text_unlock for",33554432,38,[[9,-1181,[1,"efa8eUF+RGyJJpud+Bmrlk"],[5,75.67,27.72]],[70,"unlock for",22,22,22,false,-1182,[1,"e0XAkquPxHT7Utg1vW52Dn"],[4,4281532425],308]],[16,null,"83OAw0A0VBdodkbsUpcPQM",0],[1,-39.88,0,0]],[41,"Text_?",33554432,38,[[47,-1183,[1,"a2Yu08lbdI9Zu8AZXePOcF"],[5,12.71,40.32],[0,0,0.5]],[314,"?",2,30,30,32,false,-1184,[1,"010hvp0HNLN7G6I7p/yJfs"],[4,4281532425],311]],[16,null,"15iagm1ylLWZvvTTIqluTN",0],[1,65.005,0,0]],[178,"Holder_Yes",33554432,5,[39],[[9,-1185,[1,"86M2+q35JGxresWB20xAGb"],[5,60,40]]],[16,null,"acxYtBhZxMq5Lr40CFAPw5",0],[1,50,-125.599,0],[1,0,0,1]],[33,"Outline 01",33554432,39,[[9,-1186,[1,"8199syCnFDWb2eAERt4XaX"],[5,62,46]],[46,1,0,-1187,[1,"89gY5fT5BF66GSNt0BiCHj"],[4,2521425664],313]],[16,null,"89HVjEP3dEr7yMg88DowKF",0]],[33,"Outline 02",33554432,39,[[9,-1188,[1,"cbU1Ltoe5OI7sjeVOa6cuI"],[5,68,51]],[46,1,0,-1189,[1,"9besbSceJPe5slXWtKMNoe"],[4,1347020544],314]],[16,null,"593a2NW7lAM53sUOA3Dd02",0]],[41,"Text_Yes",33554432,39,[[9,-1190,[1,"d9HYPVttdNgIjwfj101HQE"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-1191,[1,"8805Xtb2JMcLxHc/cBoaBV"],[4,4279976969],315]],[16,null,"9cVwd1RA5OcJ1eLjFAECkV",0],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,5,[40],[[9,-1192,[1,"e0yI4hnX9MT40L2q6cGaaD"],[5,60,40]]],[16,null,"27zuu12PBOoIBJbJU4hu9u",0],[1,-50,-125.599,0],[1,0,0,1]],[33,"Outline 01",33554432,40,[[9,-1193,[1,"15i/vKLsZDO6sgZcHo+zso"],[5,62,46]],[46,1,0,-1194,[1,"b9KGGUajZEY7SWqp5gdmj6"],[4,2521694463],319]],[16,null,"26JyY4ZHVMa6BgOJK25bdA",0]],[33,"Outline 02",33554432,40,[[9,-1195,[1,"1e/+uYeNdCtL2uQaYUK16y"],[5,68,51]],[46,1,0,-1196,[1,"14Osz76hVF3J7Z4IIkWo9z"],[4,1347289343],320]],[16,null,"52azU+3qBBFKDx6OyeF0Eg",0]],[41,"Text_No",33554432,40,[[9,-1197,[1,"35rkSsE79DF5hOUzii1nko"],[5,24.77,35.28]],[70,"No",28,28,28,false,-1198,[1,"02vN2UokNAZq3GU2wLQO4M"],[4,4279764543],321]],[16,null,"07CZoqRTZHZqXxX5Fz10pY",0],[1,-0.448,1.157,0]],[284,"gun tower",22,22,22,false,16,[1,"44mzkM2l9NKaW4GR2kmqM3"],[4,4294765656]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["77TNXOqB1K7aFVadEOVrbg"]],[2,["02eF1XhQpMbKYv2Jp8pbJ+"]],[2,["46XEwx/YdPSoYGq9WRUULu"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[100,7,[1,"484sM2549FI6KtX6rwKr9E"]],[561,true,10,[1,"2aNaZry+pFlqU/Ih6pPNpf"]],[100,8,[1,"97++uOsVlD6ZygbwxpRGAf"]],[100,9,[1,"3ejmlhXpROMJB9Pk51jYqB"]],[100,4,[1,"cdYC9hil1OHIZyibQ8Fn9I"]],[100,3,[1,"58ZanPd5BPNa9HjZMcJ4kM"]],[221,"Reset all your upgrades?",22,22,22,3,false,155,[1,"6ahz6BOJpC+K+J3SaizJ2Z"],[4,4281532425]],[100,6,[1,"b1JX8ilAhGLYcYeSt18o/j"]],[348,"Smash.3R",2,22,22,20,2,false,false,83,[1,"23kF+MLUlF45AawKNhFREq"],[4,4281532425]],[349,"Mussum Ipsum, cacilds vidis litro abertis. Em pé sem cair, deitado sem dormir, testad pra ai linhas. Dä ok até.",2,0,16,15,15,2,false,84,[1,"6eP5OULu9Ms7Qy4Nl80EfQ"],[4,4286808963]],[185,"20",18,18,18,false,86,[1,"a3K5owSBZMioWqqslQ6pGs"]],[185,"10",18,18,18,false,88,[1,"5e1urkH41Bj7fPcEFFHfOj"]],[185,"4",18,18,18,false,90,[1,"b7dnA6wJROdrQqs1ez6E1f"]],[144,"P-Cannon-Tower",64,44,[294],[16,null,"72CUi05AdGOoqnsNldLiHQ",0]],[273,"Bullet_Muzzle_Ring",512,55,[-1199],[16,null,"4a4ndbc2lHWIg2llm3ey6+",0],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[129,0.2,false,false,1,372,[1,"4aYVow3PVDZYYLtSkk11Ot"],[[190,null],6,0],[66,[4,2986344447]],[4,0.6],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.09598214285714286,[4,4294753015]],[18,0.3147321428571428,[4,4293678506]],[18,0.8191964285714286,[4,4283436566]]],[[44,255],[12,255,0.19642857142857154],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.4846153846153846,1],[[7,2,0.14814814814814814,2.7575757575757565,2.7575757575757565],[7,2,0.9333333333333332,0.37555555555555636,0.37555555555555636],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1200],[31,191]],[189,"Bullet_Muzzle_Fragments",55,[-1201],[16,null,"365PYHk7tK+p80wKBWnjfP",0],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[86,0.5,false,false,374,[1,"a17oPhklFP86C3fjqVcfHm"],[[192,null],6,0],[6],[27,3,0.1,0.3],[0],[0],[27,3,0.2,0.8],[0],[0],[0],[0],[27,3,0.3,0.5],[54,3,0.3],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[136],[18,0.05133928571428574,[4,4293175768]],[18,0.2767857142857143,[4,4291450006]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[279,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-1202],[31,193]],[189,"Bullet_Muzzle_Flash_A",55,[-1203],[16,null,"20gIAUlvhItI3IAUCGpmoa",0],[1,0,0.13,-0.5],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.3,false,false,1,376,[1,"a4ohdeEBBNrr/KavHHR/iz"],[[194,null],6,0],[6],[4,1.5],[4,1],[0],[0],[0],[0],[0],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.11830357142857142],[18,0.4151785714285714,[4,4293678518]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.6512820512820513,1],[[40,2,1,0.027777777777778234,1,0.027777777777778234,1],[7,2,0.6814814814814815,-1.0432098765432094,-1.0432098765432094],[52,2,-3.020202020202019,1,-3.020202020202019,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1204],[31,195]],[42,"Base",295,[-1205],[16,null,"e3DkrNnrNNhrnM9kdtO4Va",0]],[42,"Base Pivot",378,[19],[16,null,"56h9GhupJIUaT67Np8bk0e",0]],[144,"P-Gun-Tower",32,44,[296],[16,null,"62ERELdDJKKKr0x07ojqqD",0]],[42,"VFXs",177,[298],[16,null,"b3au/X/7NGUqQQuFeyQgG7",0]],[333,true,0.2,false,false,1,299,[1,"47fCv1d2lEIrcsWeoxrjv/"],[[215,null],6,0],[6],[4,1],[4,0.5],[0],[0],[0],[0],[0],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1206],[31,216]],[334,false,0.2,false,false,1,299,[1,"c5t2dKIzRISJmwTVLCQflI"],[[217,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1207],[31,218]],[189,"Bullet_Muzzle-Square",298,[-1208],[16,null,"52ReaRfQZNUY2o+Hgcmq6F",0],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.2,false,false,1,384,[1,"d7XStftG1Dxq0OVqTDDpk/"],[[219,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1209],[31,220]],[42,"Base Gun Tower",297,[20],[16,null,"bcjdi/s1ZNComSBdTd2+Cu",0]],[2,["52Wr8elKJczKH4c2zJXMeu"]],[144,"P-Laser-Tower",128,44,[300],[16,null,"afYDiyc5ZI2qesRshN0Qf0",0]],[42,"Base",301,[-1210],[16,null,"34Uq9szxpMGKxpzpyBoR9I",0]],[42,"Base Pivot",389,[21],[16,null,"10QJBHxktP1JGkNfx5yKrw",0]],[185,"4",42,42,42,false,111,[1,"dccG/aZzBA7bi14ydDQ0AH"]],[41,"Holder_Lines",33554432,13,[[9,-1211,[1,"18KrmNmVpBqrKcyVRLFXGa"],[5,0,0]]],[16,null,"2dg7sljKJKJKaDMpR/VfdM",0],[1,0,-72,0]],[315,"20",2,32,32,32,false,112,[1,"e2egLlwS1AT49MKpUC+E63"]],[155,3,0.9,33,[1,"63YVQxsgtCKLHfGAjYnP6h"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",2]]],[155,3,0.9,34,[1,"f9YDmbk45GepNnaAO9CHu1"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",2]]],[155,3,0.9,35,[1,"00ifH+cmpItb22pVCucpcB"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",2]]],[155,3,0.9,36,[1,"dcsjb8czVJjI25KrZwJww7"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",2]]],[100,2,[1,"4bXFgjCi1Oep5MuL3z4qnv"]],[221,"Energy +2",22,22,22,3,false,117,[1,"78V+MwrA9LLKBfQbMIHykZ"],[4,4281532425]],[315,"20",2,32,32,32,false,118,[1,"fc+N42tvZGcYXz+DEeVocY"]],[155,3,0.9,39,[1,"bbMgQc3rtGkbzaQgv3KKaR"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",5]]],[155,3,0.9,40,[1,"e0L5bQoo5NDqCEPGVLc4kW"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",5]]],[100,5,[1,"aaEctOAmBHqr0xm5mVao1J"]],[347,"999 ",2,26,26,26,false,204,[1,"5dz4spSmVFi7WN+5osJxdc"],[4,4294174947]]],0,[0,-1,69,0,-2,213,0,-3,214,0,-4,215,0,-5,216,0,-6,218,0,-7,219,0,-8,220,0,-9,221,0,-10,222,0,-11,224,0,-12,225,0,-13,226,0,-14,227,0,-15,228,0,-16,136,0,-17,138,0,-18,140,0,-19,142,0,-20,143,0,-21,144,0,-22,145,0,-23,170,0,-24,171,0,-25,172,0,-26,173,0,-27,174,0,-28,175,0,-29,176,0,-30,19,0,-31,178,0,-32,179,0,-33,180,0,-34,181,0,-35,182,0,-36,183,0,-37,184,0,-38,20,0,-39,186,0,-40,187,0,-41,188,0,-42,189,0,-43,190,0,-44,191,0,-45,192,0,-46,21,0,5,69,0,13,69,0,3,1,0,0,1,0,0,1,0,0,1,0,-1,23,0,-2,256,0,-3,264,0,-4,272,0,-5,42,0,-6,274,0,-7,2,0,-8,5,0,-9,6,0,-10,67,0,0,2,0,0,2,0,-3,398,0,5,2,0,5,2,0,5,2,0,5,2,0,5,2,0,21,21,0,22,186,0,21,21,0,22,188,0,21,21,0,22,192,0,21,21,0,22,187,0,21,21,0,22,189,0,21,21,0,22,191,0,21,21,0,22,190,0,21,19,0,22,170,0,21,19,0,22,171,0,21,19,0,22,172,0,21,19,0,22,174,0,21,19,0,22,173,0,21,19,0,22,175,0,21,19,0,22,176,0,21,20,0,22,178,0,21,20,0,22,179,0,21,20,0,22,180,0,21,20,0,22,181,0,21,20,0,22,182,0,21,20,0,22,184,0,21,20,0,22,183,0,5,90,0,5,111,0,5,88,0,5,86,0,5,84,0,5,83,0,5,112,0,49,397,0,47,396,0,44,395,0,45,394,0,5,2,0,5,2,0,5,2,0,0,2,0,0,2,0,25,398,0,0,2,0,5,2,0,0,2,0,-1,81,0,-2,82,0,-3,22,0,-4,113,0,-5,311,0,-6,315,0,-7,319,0,-8,114,0,0,3,0,19,3,0,5,3,0,5,4,0,5,7,0,5,8,0,5,9,0,0,3,0,0,3,0,0,3,0,-5,363,0,25,363,0,0,3,0,-1,257,0,-2,258,0,-3,259,0,-4,260,0,-5,151,0,-6,262,0,-7,152,0,0,4,0,19,4,0,5,4,0,5,10,0,5,11,0,5,12,0,5,16,0,0,4,0,0,4,0,0,4,0,-5,362,0,25,362,0,0,4,0,-1,265,0,-2,266,0,-3,267,0,-4,268,0,-5,153,0,-6,270,0,-7,154,0,0,5,0,0,5,0,-3,403,0,5,117,0,5,118,0,44,402,0,45,401,0,5,5,0,5,5,0,5,5,0,0,5,0,0,5,0,25,403,0,0,5,0,5,5,0,0,5,0,-1,115,0,-2,116,0,-3,38,0,-4,334,0,-5,338,0,0,6,0,0,6,0,-3,365,0,0,6,0,25,365,0,0,6,0,5,6,0,0,6,0,-1,79,0,-2,80,0,-3,283,0,-4,287,0,0,7,0,0,7,0,-3,358,0,19,146,0,5,10,0,5,12,0,5,11,0,5,7,0,5,8,0,5,9,0,5,16,0,0,7,0,25,358,0,0,7,0,-1,146,0,-2,237,0,-3,238,0,-4,239,0,-5,240,0,0,8,0,0,8,0,-3,360,0,19,147,0,5,10,0,5,12,0,5,11,0,5,8,0,5,9,0,5,16,0,0,8,0,25,360,0,0,8,0,-1,147,0,-2,248,0,-3,148,0,-4,149,0,-5,249,0,0,9,0,0,9,0,-3,361,0,19,150,0,5,10,0,5,12,0,5,11,0,5,9,0,5,16,0,0,9,0,25,361,0,0,9,0,-1,150,0,-2,250,0,-3,251,0,-4,252,0,-5,253,0,0,10,0,-2,359,0,85,359,0,-1,241,0,-2,242,0,-3,243,0,-4,244,0,-5,245,0,-6,246,0,-7,247,0,0,10,0,-1,241,0,-2,242,0,-3,243,0,-4,244,0,-5,245,0,-6,246,0,-7,247,0,0,11,0,-1,124,0,-2,125,0,-1,130,0,-2,131,0,-1,126,0,-2,127,0,-1,129,0,-1,135,0,-1,132,0,-2,133,0,0,11,0,-1,48,0,-2,49,0,-3,230,0,-4,231,0,-5,232,0,-6,233,0,-7,234,0,0,12,0,-1,136,0,-2,138,0,-3,140,0,-4,142,0,-5,143,0,-6,144,0,-7,145,0,0,12,0,-1,136,0,-2,138,0,-3,140,0,-4,142,0,-5,143,0,-6,144,0,-7,145,0,0,13,0,0,13,0,0,13,0,-1,83,0,-2,84,0,-3,43,0,-4,164,0,-5,169,0,-6,392,0,0,14,0,19,14,0,5,14,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,275,0,-2,276,0,-3,277,0,-4,278,0,0,15,0,0,15,0,0,15,0,0,15,0,0,15,0,-1,45,0,-2,120,0,-3,46,0,-4,122,0,-5,47,0,0,16,0,-2,342,0,0,16,0,23,342,0,0,16,0,-1,229,0,3,17,0,0,17,0,0,17,0,5,17,0,0,17,0,0,17,0,0,17,0,-1,284,0,-2,285,0,-3,286,0,0,18,0,0,18,0,5,18,0,0,18,0,0,18,0,0,18,0,-1,288,0,-2,289,0,-3,290,0,1,98,0,1,98,0,1,98,0,1,98,0,1,98,0,3,19,0,1,60,0,1,60,0,1,60,0,1,60,0,1,60,0,1,60,0,1,387,0,1,387,0,3,20,0,1,110,0,1,110,0,1,110,0,1,110,0,1,110,0,3,21,0,0,22,0,0,22,0,0,22,0,-1,307,0,-2,308,0,-3,112,0,-4,195,0,-5,309,0,0,23,0,0,23,0,0,23,0,0,23,0,-1,24,0,-3,28,0,-4,255,0,0,24,0,0,24,0,0,24,0,-1,207,0,-2,208,0,-3,209,0,-4,210,0,-5,211,0,0,25,0,0,25,0,0,25,0,-1,69,0,-2,213,0,-3,214,0,-4,215,0,-5,216,0,0,26,0,0,26,0,0,26,0,-1,218,0,-2,219,0,-3,220,0,-4,221,0,-5,222,0,0,27,0,0,27,0,0,27,0,-1,224,0,-2,225,0,-3,226,0,-4,227,0,-5,228,0,0,28,0,0,28,0,0,28,0,-2,41,0,-3,78,0,-4,254,0,0,29,0,0,29,0,0,29,0,-1,155,0,-2,156,0,-1,170,0,-2,171,0,-3,172,0,-4,173,0,-5,174,0,-6,175,0,-7,176,0,-1,178,0,-2,179,0,-3,180,0,-4,181,0,-5,182,0,-6,183,0,-7,184,0,-1,186,0,-2,187,0,-3,188,0,-4,189,0,-5,190,0,-6,191,0,-7,192,0,0,33,0,0,33,0,-3,394,0,0,33,0,-1,312,0,-2,313,0,-3,314,0,0,34,0,0,34,0,-3,395,0,0,34,0,-1,316,0,-2,317,0,-3,318,0,0,35,0,0,35,0,-3,396,0,0,35,0,-1,320,0,-2,321,0,-3,322,0,0,36,0,0,36,0,-3,397,0,0,36,0,-1,325,0,-2,326,0,-3,327,0,0,37,0,0,37,0,0,37,0,-1,117,0,-2,197,0,0,38,0,0,38,0,0,38,0,-1,332,0,-2,118,0,-3,202,0,-4,333,0,0,39,0,0,39,0,-3,401,0,0,39,0,-1,335,0,-2,336,0,-3,337,0,0,40,0,0,40,0,-3,402,0,0,40,0,-1,339,0,-2,340,0,-3,341,0,0,41,0,0,41,0,-2,235,0,-3,236,0,0,42,0,0,42,0,19,42,0,0,42,0,0,42,0,-1,273,0,0,43,0,0,43,0,0,43,0,-1,85,0,-2,87,0,-3,89,0,0,44,0,0,44,0,0,44,0,-1,371,0,-2,380,0,-3,388,0,0,45,0,0,45,0,0,45,0,-1,68,0,0,46,0,0,46,0,0,46,0,-1,70,0,0,47,0,0,47,0,0,47,0,-1,71,0,0,48,0,0,48,0,-1,72,0,-2,73,0,-3,128,0,0,49,0,0,49,0,-1,74,0,-2,75,0,-3,134,0,0,50,0,0,50,0,0,50,0,-1,157,0,-2,158,0,0,51,0,0,51,0,0,51,0,-1,159,0,-2,160,0,0,52,0,-1,279,0,-2,280,0,-3,281,0,-4,282,0,0,53,0,0,53,0,0,53,0,-1,165,0,-2,166,0,0,54,0,0,54,0,0,54,0,-1,167,0,-2,168,0,6,55,0,-3,372,0,-4,374,0,-5,376,0,0,61,0,0,61,0,-1,193,0,-2,302,0,-3,111,0,0,62,0,-1,303,0,-2,304,0,-3,305,0,-4,306,0,0,63,0,0,63,0,0,63,0,-1,323,0,-2,324,0,0,64,0,0,64,0,0,64,0,-1,198,0,-2,199,0,0,65,0,0,65,0,0,65,0,-1,200,0,-2,201,0,0,66,0,-1,328,0,-2,329,0,-3,330,0,-4,331,0,0,67,0,0,67,0,0,67,0,-1,204,0,-2,119,0,0,68,0,0,68,0,0,68,0,-1,212,0,3,69,0,0,70,0,0,70,0,0,70,0,-1,217,0,0,71,0,0,71,0,0,71,0,-1,223,0,0,72,0,0,72,0,-1,124,0,-2,125,0,0,73,0,0,73,0,-1,126,0,-2,127,0,0,74,0,0,74,0,-1,130,0,-2,131,0,0,75,0,0,75,0,-1,132,0,-2,133,0,0,78,0,0,79,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,83,0,-2,366,0,23,366,0,0,83,0,0,84,0,-2,367,0,23,367,0,0,84,0,0,85,0,-1,161,0,-2,291,0,-3,86,0,0,86,0,-2,368,0,23,368,0,0,86,0,0,87,0,-1,162,0,-2,292,0,-3,88,0,0,88,0,-2,369,0,23,369,0,0,88,0,0,89,0,-1,163,0,-2,293,0,-3,90,0,0,90,0,-2,370,0,23,370,0,0,90,0,0,91,0,0,91,0,0,91,0,0,111,0,-2,391,0,23,391,0,0,111,0,0,112,0,-2,393,0,23,393,0,0,112,0,0,113,0,0,113,0,0,113,0,-1,310,0,0,114,0,0,114,0,0,115,0,0,115,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,-2,399,0,23,399,0,0,117,0,0,118,0,-2,400,0,23,400,0,0,118,0,0,119,0,0,119,0,-1,205,0,-2,206,0,0,120,0,0,120,0,-1,121,0,0,121,0,0,121,0,0,121,0,0,122,0,0,122,0,-1,123,0,0,123,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,128,0,-1,129,0,0,129,0,0,129,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,134,0,0,134,0,-1,135,0,0,135,0,0,135,0,1,343,0,1,343,0,1,137,0,1,137,0,1,137,0,1,137,0,1,344,0,1,344,0,3,136,0,1,345,0,1,345,0,1,139,0,1,139,0,1,139,0,1,139,0,1,346,0,1,346,0,1,347,0,1,347,0,1,348,0,1,348,0,1,349,0,1,349,0,3,138,0,1,350,0,1,350,0,1,141,0,1,141,0,1,141,0,1,141,0,1,351,0,1,351,0,3,140,0,1,352,0,1,352,0,3,142,0,1,353,0,1,353,0,1,354,0,1,354,0,3,143,0,1,355,0,1,355,0,3,144,0,1,356,0,1,356,0,1,357,0,1,357,0,3,145,0,0,146,0,0,146,0,0,147,0,0,147,0,0,148,0,0,148,0,0,148,0,0,149,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,-1,261,0,0,152,0,0,152,0,-1,263,0,0,153,0,0,153,0,-1,269,0,0,154,0,0,154,0,-1,271,0,0,155,0,-2,364,0,23,364,0,0,155,0,0,156,0,0,157,0,0,157,0,0,157,0,0,158,0,0,158,0,0,158,0,0,159,0,0,159,0,0,159,0,0,160,0,0,160,0,0,160,0,0,161,0,0,161,0,0,161,0,0,162,0,0,162,0,0,162,0,0,163,0,0,163,0,0,163,0,0,164,0,0,165,0,0,165,0,0,165,0,0,166,0,0,166,0,0,166,0,0,167,0,0,167,0,0,167,0,0,168,0,0,168,0,0,168,0,0,169,0,3,170,0,3,171,0,3,172,0,3,173,0,3,174,0,3,175,0,3,176,0,6,177,0,-3,381,0,3,178,0,3,179,0,3,180,0,3,181,0,3,182,0,3,183,0,3,184,0,6,185,0,6,185,0,3,186,0,3,187,0,3,188,0,3,189,0,3,190,0,3,191,0,3,192,0,0,193,0,0,193,0,0,193,0,0,194,0,0,194,0,0,194,0,0,195,0,0,195,0,-1,196,0,0,196,0,0,196,0,0,196,0,0,197,0,0,198,0,0,198,0,0,198,0,0,199,0,0,199,0,0,199,0,0,200,0,0,200,0,0,200,0,0,201,0,0,201,0,0,201,0,0,202,0,0,202,0,-1,203,0,0,203,0,0,203,0,0,203,0,0,204,0,-2,404,0,23,404,0,0,204,0,0,205,0,0,205,0,0,205,0,0,206,0,0,206,0,0,206,0,0,207,0,0,207,0,0,208,0,0,208,0,0,209,0,0,209,0,0,210,0,0,210,0,0,211,0,0,211,0,0,212,0,0,212,0,3,213,0,3,214,0,3,215,0,3,216,0,0,217,0,0,217,0,3,218,0,3,219,0,3,220,0,3,221,0,3,222,0,0,223,0,0,223,0,3,224,0,3,225,0,3,226,0,3,227,0,3,228,0,0,229,0,0,229,0,0,230,0,0,230,0,0,231,0,0,231,0,0,232,0,0,232,0,0,233,0,0,233,0,0,234,0,0,234,0,0,235,0,0,235,0,0,236,0,0,236,0,0,237,0,0,237,0,0,238,0,0,238,0,0,239,0,0,239,0,0,240,0,0,240,0,0,241,0,0,242,0,0,243,0,0,244,0,0,245,0,0,246,0,0,247,0,0,248,0,0,248,0,0,249,0,0,249,0,0,250,0,0,250,0,0,251,0,0,251,0,0,252,0,0,252,0,0,253,0,0,253,0,0,254,0,0,254,0,0,255,0,0,255,0,0,256,0,0,257,0,0,257,0,0,258,0,0,258,0,0,259,0,0,259,0,0,260,0,0,260,0,0,261,0,0,261,0,0,262,0,0,262,0,0,263,0,0,263,0,0,264,0,0,265,0,0,265,0,0,266,0,0,266,0,0,267,0,0,267,0,0,268,0,0,268,0,0,269,0,0,269,0,0,270,0,0,270,0,0,271,0,0,271,0,0,272,0,0,272,0,0,273,0,0,273,0,0,274,0,0,275,0,0,275,0,0,276,0,0,276,0,0,277,0,0,277,0,0,278,0,0,278,0,0,279,0,0,279,0,0,280,0,0,280,0,0,281,0,0,281,0,0,282,0,0,282,0,0,283,0,0,284,0,0,284,0,0,285,0,0,285,0,0,286,0,0,286,0,0,287,0,0,288,0,0,288,0,0,289,0,0,289,0,0,290,0,0,290,0,0,291,0,0,291,0,0,292,0,0,292,0,0,293,0,0,293,0,0,294,0,-1,295,0,-2,378,0,0,296,0,-1,297,0,-2,386,0,-1,299,0,-2,384,0,-1,382,0,-2,383,0,0,300,0,-1,301,0,-2,389,0,0,302,0,0,302,0,0,303,0,0,303,0,0,304,0,0,304,0,0,305,0,0,305,0,0,306,0,0,306,0,0,307,0,0,308,0,0,308,0,0,309,0,0,309,0,0,310,0,0,310,0,0,311,0,0,312,0,0,312,0,0,313,0,0,313,0,0,314,0,0,314,0,0,315,0,0,316,0,0,316,0,0,317,0,0,317,0,0,318,0,0,318,0,0,319,0,0,320,0,0,320,0,0,321,0,0,321,0,0,322,0,0,322,0,0,323,0,0,323,0,0,324,0,0,324,0,0,325,0,0,325,0,0,326,0,0,326,0,0,327,0,0,327,0,0,328,0,0,328,0,0,329,0,0,329,0,0,330,0,0,330,0,0,331,0,0,331,0,0,332,0,0,332,0,0,333,0,0,333,0,0,334,0,0,335,0,0,335,0,0,336,0,0,336,0,0,337,0,0,337,0,0,338,0,0,339,0,0,339,0,0,340,0,0,340,0,0,341,0,0,341,0,-1,373,0,7,373,0,-1,375,0,7,375,0,-1,377,0,7,377,0,-1,379,0,7,382,0,7,383,0,-1,385,0,7,385,0,-1,390,0,0,392,0,10,1,3,6,256,4,6,264,7,6,78,8,6,78,9,6,78,10,6,28,11,6,41,12,6,41,13,6,82,14,6,274,15,6,23,16,6,28,17,6,283,18,6,287,19,6,379,20,6,386,21,6,390,25,6,45,26,6,46,27,6,47,29,6,80,30,6,55,31,6,177,32,6,185,33,6,311,34,6,315,35,6,319,36,6,114,37,6,116,39,6,334,40,6,338,44,6,91,50,6,156,51,6,156,52,6,80,53,6,164,54,6,164,55,6,295,61,6,169,62,6,82,63,6,114,64,6,197,65,6,197,66,6,116,91,6,169,177,6,297,185,6,301,194,6,307,294,6,371,296,6,380,298,6,381,300,6,388,1211],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,342,358,360,361,362,363,364,365,366,367,368,369,370,391,393,394,395,396,397,398,399,400,401,402,403,404],[2,2,2,2,2,11,11,4,4,4,4,4,2,2,2,11,11,4,4,4,4,4,2,2,2,11,11,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,2,2,2,2,11,-1,-2,86,40,2,2,2,2,11,2,2,2,2,11,20,26,27,28,20,26,27,28,20,26,27,28,2,2,2,2,2,2,11,11,11,11,2,2,2,2,11,11,11,11,20,26,27,28,20,26,27,28,-1,-2,2,2,2,20,26,27,28,2,2,2,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,2,20,-1,17,2,2,11,2,20,-1,17,-1,-2,-3,20,26,27,28,-1,17,2,11,2,11,2,11,2,2,2,2,2,2,2,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,4,9,-1,-2,17,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,8,-1,8,-1,8,4,9,-1,17,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,9,-1,17,2,11,2,2,2,2,2,2,2,2,11,2,2,11,2,11,2,2,2,11,2,-1,17,2,2,11,2,-1,17,2,2,11,2,-1,17,11,11,2,2,2,11,2,-1,17,-1,-2,-3,-4,-5,-6,-7,17,40,2,2,2,2,2,2,2,2,2,2,2,2,11,2,2,11,2,2,2,11,2,-1,17,2,2,11,2,-1,17,-1,-2,-3,17,40,2,2,2,11,24,24,24,24,24,11,24,11,11,11,11,11,11,11,20,20,20,20,24,11,11,20,20,24,11],[0,0,0,0,0,2,2,15,15,15,15,15,4,0,0,2,2,15,15,15,15,15,4,0,0,2,2,15,15,15,15,15,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,51,29,29,29,29,29,29,29,4,0,18,18,2,81,74,532,37,4,0,18,18,2,4,0,18,18,2,0,11,20,21,0,11,20,21,0,11,20,21,51,80,4,0,4,4,2,2,2,2,4,0,4,4,2,2,2,2,0,11,20,21,0,11,20,21,128,129,51,187,0,0,11,20,21,0,4,4,2,0,0,0,0,0,0,0,0,4,4,0,54,4,4,2,0,0,12,12,4,4,2,0,0,12,12,125,126,127,0,11,20,21,12,12,0,2,0,2,0,2,0,0,0,0,0,0,0,82,1,83,1,84,1,85,1,86,1,87,1,88,1,14,13,7,5,35,33,43,1,58,44,58,89,1,90,1,91,1,92,1,93,1,94,1,95,1,72,63,36,34,36,34,43,1,44,44,96,1,97,1,98,1,99,1,100,1,101,1,102,1,43,1,59,59,0,2,0,0,0,4,4,0,54,0,2,53,49,2,0,2,0,4,4,2,0,12,12,4,4,2,0,12,12,4,4,2,0,12,12,2,2,0,4,4,2,0,12,12,103,104,105,106,107,64,108,64,37,0,0,0,0,0,0,0,0,4,4,0,54,2,53,49,2,0,4,4,2,0,12,12,4,4,2,0,12,12,75,76,76,75,37,49,53,49,2,55,55,55,110,110,2,200,2,2,2,2,2,2,2,0,0,0,0,132,2,2,0,0,199,2]],[[[58,"P-Syndicate2"],[228,"P-Syndicate2",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30],[3,"90jBanitFHibPF3jtQV8ng",1,0]],[188,"Art",1,[-32,-33,-34,2],[[88,true,-31,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[42,"Scripts",1,[-35,-36,-37,-38,-39],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-40],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"2axzyI7CVcfZRup1kGtapw",-49,[81,"04f7DNNP5MRY95F4/mujU5",1,[[75,[2,["2axzyI7CVcfZRup1kGtapw"]],[[57,-48,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-41],[5,["_lpos"],-42,[1,0,0,0]],[5,["_lrot"],-43,[3,0,0,0,1]],[5,["_euler"],-44,[1,0,0,0]],[35,["_materials","0"],[2,["b6fnLcG+tQcbB2kGlXABH/"]],3],[11,"SM_Model",["_name"],-45],[5,["_lscale"],-46,[1,0.75,0.75,0.75]],[5,["_lscale"],-47,[1,0.7,0.7,0.7]]]],2]],[2,["2axzyI7CVcfZRup1kGtapw"]],[141,"Spawn Enemies",[[235,-51,[1,"6f+qVoBZtASr10AxRy966f"],-50]],[3,"60e3j3xxFEN6sxgrUDw45N",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-59,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-58]]]],[[11,"P-HP-Bar",["_name"],-52],[5,["_lpos"],-53,[1,207,448.00000000000006,0]],[5,["_lrot"],-54,[3,0,0,0,1]],[5,["_euler"],-55,[1,0,0,0]],[11,"Art",["_name"],-56],[5,["_lpos"],-57,[1,0,0,0]]]],39]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",2,[-60],[3,"e4fVLBSLVNSp7p/dfOjBoR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,11,[1,"badnIvfeBBZJiVfl9k3hRp"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-61],[31,5]],[73,"VFX_Death_Shards",2,[-62],[3,"76L9PqnRlGorfSHRkkuKUW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,13,[1,"62IbtjxB9FnI1G4XSy0m16"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[28,[0],[0]],[24,[0],[0],[6],[6],-63],[31,7]],[73,"VFX_Spawn",2,[-64,-65],[3,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",4,[-66],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-67],[8,"cc.ParticleSystem","play",11],[8,"cc.ParticleSystem","play",13],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]],1],[65,"On Death VFX Finished",4,[[118,-68,[1,"fe+CZItjxMyb9f2BHbTpon"],[12,14],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"b67GIBJUdN6qixP7x+E94e",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-69,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["6fTB9CmINSd6bm5DKa9NOW"]],[120,0.3,false,15,[1,"84KU+um7hPNYOClMRjIMmi"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-70],[31,9]],[119,0.3,false,15,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-71],[31,11]],[56,"VFX-BossExplosion",2,[-72],[3,"f4rwwJua9JxbhIH5yNN3N1",1,0]],[86,0.2,false,false,24,[1,"4fTqtST9FEW78SerDtuh0g"],[[12,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-73],[31,13]],[109,"VFX-Flash",2,[-74],[3,"46d1aA9ytNTJzIyfw2xqq2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,26,[1,"4ej+amSApK3qdtvs+82BNN"],[[14,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-75],[31,15]],[109,"VFX_SprayOut",2,[-76],[3,"36AS4VbsJC+qWvW/6Tm4AW",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,28,[1,"1acAYY1O1JYLSgyq7sNLYa"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-77],[121,1,0.1,17]],[56,"VFX_Explosion2",2,[-78],[3,"8asHkIt1hEAZDlqfz+jvt2",1,0]],[86,1.5,false,false,30,[1,"41fT42rEFEgpXLsHnIp6T0"],[[18,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-79],[31,19]],[109,"VFX_SprayOut2",2,[-80],[3,"6epHL9GutGN4kA5cCLl8CV",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,32,[1,"38x1wGsL5PU7QJ22GK5k6j"],[20],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-81],[121,1,0.1,21]],[109,"VFX-ScreenTone",2,[-82],[3,"batgRxJe5FOosMrn2fMPyl",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,34,[1,"29uEHq445K9oMFFjNEjS+q"],[[22,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-83],[31,23]],[56,"VFX-CircleIn",2,[-84],[3,"16tOYvmMpP4bU9sHRoLuyo",1,0]],[86,0.4,false,false,36,[1,"2dguywGFhLR4QpsOlVm7u7"],[[24,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-85],[31,25]],[56,"VFX-RingIn",2,[-86],[3,"7aKEFvM5JAHJoTN+DNXbGG",1,0]],[86,0.4,false,false,38,[1,"6890fVuTVCO4Lt6apVCkvR"],[[26,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-87],[31,27]],[109,"VFX_SprayIn",2,[-88],[3,"cdcibxKh9BhaYVVcInC94s",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,40,[1,"a5BbbRrwFNU6/6Qto2Bu9b"],[28],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-89],[121,1,0.5,29]],[109,"VFX-ChargeFlash",2,[-90],[3,"6dIONV2hRBlIXywb+2Dyw2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,42,[1,"1cetJnd19J6r9PFD9EPz2E"],[30],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-91],[31,31]],[109,"VFX-Sparkle",2,[-92],[3,"02ILq9aG1MWrhuGVvwVMVk",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,44,[1,"1eQUD59A1H4Z14sGmJYNJk"],[[32,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-93],[31,33]],[109,"VFX_LightRay",2,[-94],[3,"7f4NZLVidIzI+u7ZIXJd0U",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,46,[1,"5eAOiK8kVBi6DPx6gXg7Lp"],[34],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-95],[31,35]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",4,[8],[3,"62R6RgLjhMRberQEA4kCzJ",1,0]],[264,"Syndicate2",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,48],[265,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[56,"Stun",4,[51],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[42,"UI",1,[9],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,5,9,0,13,17,0,3,1,0,-1,50,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,53,0,-1,11,0,-2,13,0,-3,15,0,-4,24,0,-5,26,0,-6,28,0,-7,30,0,-8,32,0,-9,34,0,-10,36,0,-11,38,0,-12,40,0,-13,42,0,-14,44,0,-15,46,0,0,3,0,-1,19,0,-2,20,0,-3,6,0,-1,5,0,-2,16,0,-3,52,0,-4,18,0,-5,49,0,-1,48,0,1,7,0,1,7,0,1,7,0,1,7,0,1,21,0,1,7,0,1,21,0,0,6,0,3,6,0,41,50,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,54,0,1,54,0,19,20,0,3,9,0,-1,12,0,7,12,0,-1,14,0,7,14,0,-1,22,0,-2,23,0,-1,17,0,5,18,0,0,18,0,0,19,0,7,22,0,7,23,0,-1,25,0,7,25,0,-1,27,0,7,27,0,-1,29,0,7,29,0,-1,31,0,7,31,0,-1,33,0,7,33,0,-1,35,0,7,35,0,-1,37,0,7,37,0,-1,39,0,7,39,0,-1,41,0,7,41,0,-1,43,0,7,43,0,-1,45,0,7,45,0,-1,47,0,7,47,0,10,1,2,6,3,8,6,49,9,6,53,50,32,51,51,0,52,95],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,145,1,27,26,16,25,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,8,24]],[[[138,1,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{},{},{}],[[[{},"mainColor",8,[4,1677721599]],{},{}],11,0,0]]],0,0,[0],[16],[77]],[[{"name":"Icon_Menu","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[533]],[[{"name":"Icon_SpeedUp","rect":{"x":5,"y":9,"width":41,"height":30},"offset":{"x":1.5,"y":0},"originalSize":{"width":48,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[534]],[[[76],[55,"SM_EnemySyndicate_01",[-2],[3,"2axzyI7CVcfZRup1kGtapw",-1,0]],[64,"SM_EnemySyndicate_01",1,[[62,-3,[1,"b6fnLcG+tQcbB2kGlXABH/"],[0],[45],1]],[3,"6fTB9CmINSd6bm5DKa9NOW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[535,536]],[[[68,".bin",2646089242,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23136,"length":3000,"count":750,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23136,"count":482,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39107099175453186,-0.4409671723842621,-0.01536291278898716],"maxPosition",8,[1,0.3910704255104065,0.5285049676895142,0.5613952875137329]]],-1],0,0,[],[],[]],[[[77,"SM_EnemySyndicate_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2684536131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.010000001639127731,-4.3711387287537207e-10],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.00911111943423748]]],-1],0,0,[],[],[]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,1342234879]],{},{}],11,0,0]]],0,0,[0],[16],[77]],[[[149,[[156,[114,[-10,-11,-12,-13,-14,-15],[[82,0,false,-5,-4,[[91,"exit"]]],[115,-7,-6],[355,0,false,0,-9,-8,[[91,"intro"]]]],-3,-2,-1]]],[{},"exit",4,[101,2],"intro",4,[101,2]]],[61,"Entry"],[61,"Any"],[63,"GameCompletedPanel_Intro",[72,0]],[61,"Exit"],[63,"GameCompletedPanel_Exit",[72,1]],[63,"Empty",[186]]],0,[0,29,2,0,30,4,0,31,1,0,14,5,0,15,3,0,14,6,0,15,1,0,14,3,0,15,2,0,-1,1,0,-2,4,0,-3,2,0,-4,3,0,-5,5,0,-6,6,15],[0,0],[18,18],[179,180]],[[[76],[55,"SM_TowerSmash3RBody_01",[-2],[3,"424JMWZcNT+7LUIxhmggm+",-1,0]],[64,"SM_TowerSmash3RBody_01",1,[[62,-3,[1,"6dld1XsrhbprQRWAgl+86p"],[0],[45],1]],[3,"01bmdrW4JXtZt850BsSA/w",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[537,256]],[[[77,"SM_TowerSmash3RBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",1577380827,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29664,"length":8448,"count":2112,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29664,"count":618,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23616410791873932,-0.30108144879341125,-3.000557580179475e-10],"maxPosition",8,[1,0.23616410791873932,0.2366417944431305,0.3322126269340515]]],-1],0,0,[],[],[]],[[[77,"SM_TowerPlasmaQBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",1875717138,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":68736,"length":19248,"count":4812,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":68736,"count":1432,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2567823529243469,-0.6116607189178467,-0.11887958645820618],"maxPosition",8,[1,0.25330302119255066,0.1778063327074051,0.39120617508888245]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerPlasmaQBody_01",[-2],[3,"19dqAvhYZW66LFXyVsSUYV",-1,0]],[64,"SM_TowerPlasmaQBody_01",1,[[62,-3,[1,"d1WspVTtle/Jp16o0xqn79"],[0],[45],1]],[3,"fbzvYb5AVdtq1H47hzSAAe",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[538,258]],[[[58,"P-Syndicate4"],[152,"P-Syndicate4",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"Syndicate4",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[55,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35],[3,"90jBanitFHibPF3jtQV8ng",1,0]],[188,"Art",1,[-37,-38,-39,2],[[88,true,-36,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[371,"Scripts",1,[[-40,-41,-42,-43,[98,"Specials",-44,[3,"62R6RgLjhMRberQEA4kCzJ",1,0]]],1,1,1,1,4],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",4,[-45],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,3,[22,"2axzyI7CVcfZRup1kGtapw",-54,[81,"04f7DNNP5MRY95F4/mujU5",1,[[75,[2,["2axzyI7CVcfZRup1kGtapw"]],[[57,-53,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-46],[5,["_lpos"],-47,[1,0,0,0]],[5,["_lrot"],-48,[3,0,0,0,1]],[5,["_euler"],-49,[1,0,0,0]],[35,["_materials","0"],[2,["b6fnLcG+tQcbB2kGlXABH/"]],3],[11,"SM_Model",["_name"],-50],[5,["_lscale"],-51,[1,0.5,0.5,0.5]],[5,["_lscale"],-52,[1,0.4,0.4,0.4]]]],2]],[2,["2axzyI7CVcfZRup1kGtapw"]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-62,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-61]]]],[[11,"P-HP-Bar",["_name"],-55],[5,["_lpos"],-56,[1,207,448.00000000000006,0]],[5,["_lrot"],-57,[3,0,0,0,1]],[5,["_euler"],-58,[1,0,0,0]],[11,"Art",["_name"],-59],[5,["_lpos"],-60,[1,0,0,0]]]],39]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",2,[-63],[3,"e4fVLBSLVNSp7p/dfOjBoR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"badnIvfeBBZJiVfl9k3hRp"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-64],[31,5]],[73,"VFX_Death_Shards",2,[-65],[3,"76L9PqnRlGorfSHRkkuKUW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"62IbtjxB9FnI1G4XSy0m16"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[28,[0],[0]],[24,[0],[0],[6],[6],-66],[31,7]],[73,"VFX_Spawn",2,[-67,-68],[3,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",4,[-69],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[204,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-70],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",6]],1],[65,"On Death VFX Finished",4,[[118,-71,[1,"fe+CZItjxMyb9f2BHbTpon"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"b67GIBJUdN6qixP7x+E94e",1,0]],[127,"Temp-Model",false,3,[[95,"Sphere<ModelComponent>",-72,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",3,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[2,["6fTB9CmINSd6bm5DKa9NOW"]],[120,0.3,false,14,[1,"84KU+um7hPNYOClMRjIMmi"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-73],[31,9]],[119,0.3,false,14,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-74],[31,11]],[56,"VFX-BossExplosion",2,[-75],[3,"78/A1oAVZGt5Nx0Jv2cSnQ",1,0]],[86,0.2,false,false,23,[1,"61of+qwh1OXJbSEpm88EdG"],[[12,null],6,0],[6],[4,3],[0],[0],[0],[0],[0],[164,3],[4,1.8],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.9241071428571428,[4,4289835441]],[18,0.9620535714285714,[4,4281084972]]],[[12,255,0.6004464285714286],[12,0,1]]]]],[37,[0]],[92,true,true,[15,1,20,[10,[0,0.6948717948717948,1],[[52,2,2.839080459770115,1,2.839080459770115,1],[7,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[15,1,6,[10,[0,0.7974358974358975],[[165,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[166,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[15,1,5,[10,[0,0.8051282051282052],[[165,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[166,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-76],[31,13]],[109,"VFX-Flash",2,[-77],[3,"9b/tc8yRJJgb9Y4fyZvTlb",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[86,0.2,false,false,25,[1,"33z1qKzHBKBouNrUQQe7ah"],[[14,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[0],[4,1.7],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-78],[31,15]],[109,"VFX_SprayOut",2,[-79],[3,"91OIpAWd1Mwa2TFyHR15k4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,1,false,false,27,[1,"ceWvnQP3VA0JnBBBeDeTgi"],[16],[6],[27,3,0.1,0.4],[0],[0],[27,3,2,10],[0],[0],[0],[4,1.7],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,1],[[13,2,1],[7,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-80],[121,1,0.1,17]],[56,"VFX_Explosion2",2,[-81],[3,"a2Ey/ucylK7JmQjIIWoL4L",1,0]],[86,1.5,false,false,29,[1,"e9g9r/Z2lLgKKyo71j1k/N"],[[18,null],6,0],[66,[4,4294506744]],[4,1],[0],[0],[0],[0],[0],[164,3],[4,2],[4,1.5],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.033482142857142856],[51,0.078125],[18,0.18973214285714285,[4,4288716960]],[18,0.8459821428571428,[4,4280624421]]],[[12,255,0.1049107142857143],[12,255,0.21651785714285715],[12,0,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,0.38461538461538464,1],[[52,2,6.259259259259259,1,6.259259259259259,1],[7,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-82],[31,19]],[109,"VFX_SprayOut2",2,[-83],[3,"d4EcppghdAWLmCYsxQbPIE",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,6,false,false,31,[1,"6fjx+pjjxEjKwTyqpRPsZv"],[20],[6],[27,3,0.1,0.4],[0],[0],[27,3,10,50],[0],[0],[0],[4,2],[4,1],[0],[97,80],[0],[[29,[4,50]]],[25,true,[20,1,[50,[[44,255],[12,255,0.22767857142857142],[12,0,1]]]]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[133,true,[0],[0],[0],[36,1,[10,[0,0.27708427247702977,0.5230769230769231,1],[[13,2,1],[7,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[7,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[13,2,0.020792806452028488]]]]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-84],[121,1,0.1,21]],[109,"VFX-ScreenTone",2,[-85],[3,"646nhm3pdBt62J+94ablAg",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[195,false,false,33,[1,"39c77q0AVJtr2o6676Y9Wt"],[[22,null],6,0],[66,[4,1811939327]],[4,100],[0],[0],[0],[0],[0],[0],[4,2],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.44642857142857145],[12,0,1]]]]],[93,0,[4,1]],[59,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-86],[31,23]],[56,"VFX-CircleIn",2,[-87],[3,"20ULk8nAdCAJ6aVJNsVBKH",1,0]],[86,0.4,false,false,35,[1,"98gfqAkvJDvpn0m+tucUBw"],[[24,null],6,0],[6],[4,0.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.1],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12946428571428564,[4,4280229663]],[18,0.7745535714285714,[4,4289703855]],[51,0.9464285714285714]],[[44,0],[12,255,0.5357142857142858],[12,255,1]]]]],[37,[0]],[38,true,[15,1,20,[10,[0,1],[[40,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-88],[31,25]],[56,"VFX-RingIn",2,[-89],[3,"1ank61p3BBIIY3JWRsC9Jq",1,0]],[86,0.4,false,false,37,[1,"7cO5d4Lg1HSp2EVCQ/wYHC"],[[26,null],6,0],[6],[4,1.5],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[4,0.35],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.12276785714285714,[4,4280887593]],[18,0.7745535714285714,[4,4290032820]],[51,0.9464285714285714]],[[44,0],[12,34,0.34151785714285715],[12,255,0.6941964285714286],[12,255,1]]]]],[37,[0]],[38,true,[15,1,8,[10,[0,1],[[40,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[52,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,5,[10,[0,1],[[13,2,0.29629629629629634],[13,2,-0.00018428406391548277]]]]],[28,[0],[0]],[24,[0],[0],[6],[6],-90],[31,27]],[109,"VFX_SprayIn",2,[-91],[3,"6br31GirVI0bJ6qY9Bou/t",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1.2,false,false,39,[1,"ffJFB/JRZJLIW4y1gH7ESD"],[28],[6],[4,0.2],[0],[0],[4,5],[0],[0],[0],[0],[4,0.1],[0],[15,1,80,[10,[0,0.7333333333333333],[[7,2,0.05555555555555556,2.781893004115226,2.781893004115226],[13,2,0.9925925925925926]]]],[0],[146,[6]],[130,true,3,[4,1]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-92],[121,1,0.5,29]],[109,"VFX-ChargeFlash",2,[-93],[3,"c4NkGnEzZPCZS6CsUnUwlv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[74,2,false,false,41,[1,"a4GzlWIj9MU6eISh5S64S6"],[30],[6],[4,0.6],[0],[0],[0],[0],[0],[0],[4,0.3],[4,2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[44,255],[12,255,0.8191964285714286],[12,0,1]]]]],[93,0,[4,1]],[38,true,[15,1,5,[10,[0,1],[[7,2,0.1962962962962963,2.572916666666667,2.572916666666667],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-94],[31,31]],[109,"VFX-Sparkle",2,[-95],[3,"37PcFhJvRJ/bdjhLzNX+7P",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[217,0.7,false,false,43,[1,"7aJAngdqZKVYRaXvMGOGUS"],[[32,null],6,0],[20,4,[39,[[106,[4,4294926764]],[18,0.3169642857142857,[4,4294943343]],[18,0.6517857142857143,[4,4292278146]],[18,1,[4,4284279807]]],[[44,255]]]],[27,3,0.1,1.2],[0],[0],[4,0.1],[0],[0],[0],[4,1],[4,0.15],[0],[196,30,30],[0],[25,true,[20,1,[50,[[44,0],[12,255,0.12723214285714285],[12,255,0.2879464285714286],[12,0,1]]]]],[230,true,3,2,1.2,[4,1]],[38,true,[15,1,2,[10,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[13,2,0.48518518518518516],[7,2,1,0.18055555555555491,0.18055555555555491],[13,2,0.5074074074074074],[13,2,0.4962962962962963]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-96],[31,33]],[109,"VFX_LightRay",2,[-97],[3,"96NtzFmo9FS6Osuf9Ca+DQ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[163,1,false,false,45,[1,"2cnv2B6z1MXJFIZX0sneur"],[34],[6],[15,1,4,[10,[0,1],[[7,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[13,2,1]]]],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,1],[0],[15,1,10,[10,[0,1],[[7,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[13,2,1]]]],[0],[25,true,[20,1,[50,[[44,0],[12,133,0.09375],[12,255,0.15401785714285715],[12,153,0.24330357142857142],[12,0,1]]]]],[93,0,[4,1]],[92,true,true,[0],[36,1,[10,[0,0.2717948717948718,1],[[7,2,1,-3.2828282828282838,-3.2828282828282838],[7,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[7,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[15,1,2,[10,[0,0.2717948717948718,0.9923076923076923],[[7,2,0.5,2.4246031746031744,2.4246031746031744],[7,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-0.17453292519943295,0.17453292519943295]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-98],[31,35]],[126,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",4,[-99],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,48,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,49,0,34,47,0,35,16,0,5,5,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,3,1,0,6,1,0,-4,50,0,-1,10,0,-2,12,0,-3,14,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,0,3,0,-1,18,0,-2,19,0,-3,6,0,-1,5,0,-2,15,0,-3,48,0,-4,17,0,6,4,0,-1,47,0,1,7,0,1,7,0,1,7,0,1,7,0,1,20,0,1,7,0,1,20,0,0,6,0,3,6,0,1,9,0,1,9,0,1,9,0,1,9,0,1,51,0,1,51,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,21,0,-2,22,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,21,0,7,22,0,-1,24,0,7,24,0,-1,26,0,7,26,0,-1,28,0,7,28,0,-1,30,0,7,30,0,-1,32,0,7,32,0,-1,34,0,7,34,0,-1,36,0,7,36,0,-1,38,0,7,38,0,-1,40,0,7,40,0,-1,42,0,7,42,0,-1,44,0,7,44,0,-1,46,0,7,46,0,-1,49,0,10,1,2,6,3,8,6,50,99],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,145,1,27,26,16,25,7,5,14,13,7,5,10,9,10,9,7,5,10,9,10,9,7,5,14,13,10,9,10,9,35,33,52,50,8,23,8,24]],[[{"name":"Icon_Back","rect":{"x":5,"y":3,"width":56,"height":61},"offset":{"x":1,"y":-1.5},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[539]],[[{"name":"UI_LifeCube Outline","rect":{"x":0,"y":0,"width":34,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":34,"height":34},"rotated":false,"capInsets":[6,6,6,6],"packable":true}],[2],0,[0],[33],[540]],[[[68,".bin",787161715,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24936872720718384,-0.24936871230602264,0],"maxPosition",8,[1,0.24936872720718384,0.24936871230602264,0.35908234119415283]]],-1],0,0,[],[],[]],[[[76],[55,"SM_TowerCubeSlime_01",[-2],[3,"bf/rqmxy1RI6d5s9dt63bw",-1,0]],[64,"SM_TowerCubeSlime_01",1,[[62,-3,[1,"c1FqYGy+FXzrIyDY9Dcjtd"],[0],[45],1]],[3,"edQcfb6yFWK5nAfohWkqQ0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[541,542]],[[[77,"SM_TowerCubeSlime_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"shininessExponent":35.99999928474426},"emissive",8,[4,4294967295]],{},{}],11,0,0]]],0,0,[0],[16],[6]],[[[76],[55,"SM_PortalVFX",[-2],[3,"60ciIzpkBUBJz6DMJ4URqe",-1,0]],[64,"SM_PortalVFX",1,[[62,-3,[1,"62L0kXUTlVnL/DCq3Kmz1z"],[0],[45],1]],[3,"6ftKokXEVS274EdU6PgUr7",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[543,135]],[[[68,".bin",623489286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3392,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3392,"count":53,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4215879440307617,-0.06565006077289581,-0.4989520013332367],"maxPosition",8,[1,0.42241746187210083,0.13540655374526978,0.7823701500892639]]],-1],0,0,[],[],[]],[[[58,"SM_Tower3MGvBody_01"],[227,"SM_Tower3MGvBody_01",[-2],[3,"efp8IlO8deIZfWSlH1z7o0",-1,0],[1,2000,0,0]],[64,"SM_Tower3MGvBody_01",1,[[62,-3,[1,"49Ry8eFLhb25C1Q8wGk6C1"],[0],[45],1]],[3,"3aIYRFdwZW1ITWY1VGXMEK",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,225]],[[[58,"P-ClosestToGoal-TowerTarget"],[141,"P-ClosestToGoal-TowerTarget",[[698,-2,[1,"49a8sf5uNI6KBGiXZHdXrk"]]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[76],[55,"SM_TowerGunBody_01",[-2],[3,"1bEwzooBRYiLITAV26DhPq",-1,0]],[64,"SM_TowerGunBody_01",1,[[62,-3,[1,"eee7bsTeFUS4J0Fkyz/23b"],[0],[45],1]],[3,"40sd+ebzdfxaPzPgpSi8i0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[544,262]],[[[68,".bin",2475420575,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24336,"length":5340,"count":1335,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24336,"count":507,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2029980719089508,-0.36052513122558594,-0.0021895617246627808],"maxPosition",8,[1,0.20299796760082245,0.2185363620519638,0.2959030568599701]]],-1],0,0,[],[],[]],[[[77,"SM_TowerGunBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[319,"builtin-particle",[{"hash":585841727,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1223598056,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3735404623,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":2524517876,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[58,"SM_TowerTunnelerBody_01"],[227,"SM_TowerTunnelerBody_01",[-2],[3,"d2WuMenSdQdr89Jfpld4zw",-1,0],[1,2000,0,0]],[64,"SM_TowerTunnelerBody_01",1,[[62,-3,[1,"9dDxbuCdVYVYsfEinJuqgr"],[0],[45],1]],[3,"bac3BKSlVQpqE9QB4VllW4",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,255]],[[[537,[{}],[{}]]],0,0,[0],[16],[77]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[5,32]],[[[76],[55,"SM_BlockPath_01",[-2],[3,"38TprYPCRWppYLEJoooZq3",-1,0]],[64,"SM_BlockPath_01",1,[[62,-3,[1,"c6ETENbq5XL5UBZI2bIgRH"],[0],[45],1]],[3,"8cBWn12o1aHr/dSCvdO6Ui",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[545,546]],[[[68,".bin",1607146932,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[77,"SM_BlockPath_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_NOISE_1":true,"USE_NOISE_2":true,"ALPHA_TEST_CHANNEL":"r","NOISE_1_BLEND_MIX":true,"NOISE_2_BLEND_MIX":true}],[[[{"alphaThreshold":0.1},"tilingOffset",8,[2,1,1,0.1,0.3],"mainColor",8,[4,4279447896],"noise1TilingOffset",8,[2,0.5,1,0.1,0.2],"noise2TilingOffset",8,[2,0.65,0.5,0.15,0.15],"noise1Texture",6,0,"noise2Texture",6,1]],11]]],0,0,[0,0,0],[56,57,16],[269,270,271]],[[[138,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_NOISE_1":true,"ALPHA_TEST_CHANNEL":"r","NOISE_1_BLEND_MULTIPLY":true,"NOISE_2_BLEND_MULTIPLY":true}],[[[{"alphaThreshold":0.012},"mainColor",8,[4,4280887788],"colorScale",8,[1,10,10,10],"noise1TilingOffset",8,[2,1,0.5,0.05,0.03],"noise2TilingOffset",8,[2,-1,0.5,0.15,0.15],"mainTexture",6,0,"noise1Texture",6,1,"noise2Texture",6,2]],11]]],0,0,[0,0,0,0],[36,56,57,16],[547,270,269,271]],[[{"name":"UI_Degrade_Light Top Panel","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[548]],[[[76],[55,"SM_Cracks_01",[-2],[3,"4bKhv/jV5Y7ZI2kqZex6z2",-1,0]],[64,"SM_Cracks_01",1,[[62,-3,[1,"fdBUKNZOdcRpJjryQ5pdeh"],[0],[45],1]],[3,"3elJq4TRhXhJIUEinPKVAi",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[549,550]],[[[68,".bin",4208186262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":1704,"count":426,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4868195950984955,-0.4885806143283844,-0.5260231494903564],"maxPosition",8,[1,0.48866888880729675,0.4876311719417572,0.7066559791564941]]],-1],0,0,[],[],[]],[[[77,"SM_Cracks_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[245,32]],[[[77,"SM_EnemyCargo_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",473574830,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27072,"length":3528,"count":882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27072,"count":564,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3002181947231293,-0.3246779441833496,-0.031475454568862915],"maxPosition",8,[1,0.3003091514110565,0.42986026406288147,0.21766367554664612]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyCargo_02",[-2],[3,"30XKbfMTNf97kxPRwjyic5",-1,0]],[64,"SM_EnemyCargo_02",1,[[62,-3,[1,"03kt8efSpXE6Pxg+UKrU++"],[0],[45],1]],[3,"62Thw20TRVIrkE0s7tlGnj",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[551,552]],[[[77,"SM_EnemyCrowder_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2994938267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyCrowder_03",[-2],[3,"f1XKrwhjBUbpq3ZOc66Wy1",-1,0]],[64,"SM_EnemyCrowder_03",1,[[62,-3,[1,"ddPCXGq0tRx48X2hJdJETp"],[0],[45],1]],[3,"b1PSBQTipWm50yzvj/8b+f",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[553,554]],[[[77,"SM_TowerS4RBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerS4RBody_01",[-2],[3,"b8JcZpYRhbA7dBnVFp97b+",-1,0]],[64,"SM_TowerS4RBody_01",1,[[62,-3,[1,"aa2p+GekNcwr3d84smoPpV"],[0],[45],1]],[3,"42d3cbnwxfy6Z3GE8KKuaQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[555,254]],[[[68,".bin",427611967,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":8340,"count":2085,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25920164585113525,-0.36292514204978943,-0.008752617053687572],"maxPosition",8,[1,0.25920164585113525,0.2576525807380676,0.39157843589782715]]],-1],0,0,[],[],[]],[[[149,[[156,[114,[-12,-13,-14,-15,-16,-17,-18],[[82,0,false,-5,-4,[[91,"damaged"]]],[82,0,false,-7,-6,[[91,"exit"]]],[115,-9,-8],[214,0,-11,-10,[[91,"show"]]]],-3,-2,-1]]],[{},"damaged",4,[101,2],"exit",4,[101,2],"show",4,[101,2]]],[63,"LifeCube_Intro",[72,0]],[61,"Entry"],[250,"Empty"],[61,"Exit"],[61,"Any"],[63,"LifeCube_Exit",[72,1]],[63,"LifeCube_DmgTaken",[72,2]]],0,[0,29,5,0,30,4,0,31,2,0,14,7,0,15,1,0,14,6,0,15,1,0,14,3,0,15,2,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,5,0,-4,1,0,-5,6,0,-6,7,0,-7,3,18],[0,0,0],[18,18,18],[233,235,234]],[[[58,"P-GunTower-Bullet-0MG2"],[137,"P-GunTower-Bullet-0MG2",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[58,"P-GunTower-Bullet-3MGV"],[137,"P-GunTower-Bullet-3MGV",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[149,[[156,[114,[-8,-9,-10,-11,-12],[[115,-5,-4],[404,false,-7,-6,[[157,[104,"isDead"]]]]],-3,-2,-1]]],[{},"isDead",4,[176,1,false]]],[61,"Entry"],[63,"EnemySpawn",[72,0]],[61,"Exit"],[61,"Any"],[63,"BossDeath",[72,1]]],0,[0,29,4,0,30,3,0,31,1,0,14,2,0,15,1,0,14,5,0,15,2,0,-1,1,0,-2,3,0,-3,4,0,-4,2,0,-5,5,12],[0,0],[18,18],[8,66]],[[[76],[55,"SM_TowerOmegaBeamBody_01",[-2],[3,"a8rRRSGbdZ75rtdYdCxXvt",-1,0]],[64,"SM_TowerOmegaBeamBody_01",1,[[62,-3,[1,"ebLTCL4wZWyoex5cTjGOhH"],[0],[45],1]],[3,"39Vq44EYlYEbQuQOG7elsR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[556,147]],[[[77,"SM_TowerOmegaBeamBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2031234339,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":65904,"length":19332,"count":4833,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":65904,"count":1373,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26430246233940125,-0.6576791405677795,-0.12537960708141327],"maxPosition",8,[1,0.2587829530239105,0.19153396785259247,0.39770618081092834]]],-1],0,0,[],[],[]],[[[58,"P-LevelHints"],[141,"P-LevelHints",[[699,-2,[1,"96AnJeKGBLNp5FsOaJ3eUR"],[[215,1,"Defend the CubeTower! Activate the Base GunTowers. They are cheap and effective against most enemies!","guntower",1],[158,2,"Chargers incoming! The most common enemies you'll find. Base GunTowers are powerful enough to deal with them.","Charger-0",2],[215,3,"The Cannon Tower deals splash damage. Perfect for dealing with grouped enemies.","cannontower",1],[215,4,"Don't forget to unlock your upgrades in the menu. You earn coins after each level that can be spent to upgrade your towers.","0.mg-2",1],[215,5,"Laser Towers do more damage the longer it attacks. Best for slow, tough enemies. ","lasertower",1],[158,6,"Warning! Warning! Boss incoming! Be careful and use everything you've learned!","BossTank",2],[158,7,"Crowder incoming! These small and weak eneimes come in packs. Use Cannon towers to finish them off.","Crowder-0",2],[158,8,"Runners incoming! Quick firing weapons are best against these speedy enemies.","Runner-0",2],[158,9,"Tank incoming! Laser towers are your best bet against these slow but tough juggernauts.","Tank-0",2],[215,10,"Receive up to 3 coins per level. Spend them in the shop to upgrade your Cube's performance and upgrade your tower types.","s.4r",1],[158,11,"These very fast enemies do not cause damage to the CubeTower, but create power overloads that stop energy production.","OverCharger-0",2],[158,12,"Divider incoming! Beware this boss' powerful abilty to split and avoid destruction.","TheGang",2],[158,13,"Warning! Tier 2 Chargers have been detected!","Charger-1",2],[158,14,"Warning! Tier 2 Crowders have been detected! Make sure to upgrade your towers.","Crowder-1",2],[158,15,"New enemy type detected! Cargo units drop more enemies upon defeat, be careful.","Cargo-0",2],[215,16,"Sonar Towers are helpful at slowing enemies. Visit the shop to upgrade your towers.","pulsar",1],[158,17,"Warning Tier 2 Tanks have been detected! Highly recommend upgrading Laser Towers against these robust enemy units.","Tank-1",2],[158,18,"Warning! Warning! Boss type, Breeder incoming! This powerful enemy continually spawns more enemies.","Breeder",2],[215,19,"Visit the shop if you need to reset your upgrades however you like.","tunneller",1],[158,20,"Warning! Tier 2 Runners detected! Quick firing towers are highly recommended.","Runner-1",2],[158,21,"Bikers incoming! These fast enemies release addtional units after they are destroyed.","Biker-0",2],[215,22,"The Starfall towers are capable of taking out serveral enemies at once. Visit the shop to upgrade your towers.","starfall",1],[215,23,"The 0.MG-4 is the fastest turret out there. When swarms of medium enemies spawn, it can quickly switch targets for better efficiency.","0.mg-4",1],[158,24,"Warning! Warning! Megalodon boss dectected! Reading are off the charts!","BossTank2",2],[215,25,"The Fl4m tower is an evolution for the Cannon Tower that sets the ground ablaze, dealing continuous damage to passing enemies.","h3ll",1],[158,26,"Warning! Warning! Tier 3 Charger detected!","Charger-2",2],[158,27,"Tank Tier 3 detected!  Recommend the Omega Beam upgrade for the Laser Tower to deal with this new threat.","Tank-2",2],[158,28,"Swarms of Crowders incoming! This Tier 3 unit is as fast as ever!","Crowder-2",2],[158,29,"Alert! Tier 3 Runners are so fast our radars can barely detect them!","Runner-2",2],[158,30,"The Bisector is a powerful boss that splits into smaller forms when defeated. Decimate every piece of this terrible enemy with your towers.","Syndicate",2],[215,31,"Upgrade your Cube's abilties at the shop if you are getting stuck. Good luck!","3.mg-v",1],[158,32,"Tier 2 Cargos spawn stronger enemies when destroyed. Get rid of them as soon as you can!","Cargo-1",2],[158,33,"This more powerful version of the Biker releases a tier 3 enemy when defeated.","Biker-1",2],[215,34,"Final Wave of enemies are approaching!","puls.3r",1],[700,35,"Readings are off the charts... something isn't right..."],[158,36,"This is it -- the final Mothership. Protect the Cube Tower at all costs, the universe depends on it. ","MotherShip",2]]]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[],[],[]],[[[58,"P-GunTower-Bullet-0MG4"],[137,"P-GunTower-Bullet-0MG4",32,[-9,-10,-11,-12,-13,-14],[[241,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[8,"cc.ParticleSystem","play",-3],[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[270,"Projectile",32,1,[[[274,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[45],7],-16,-17],4,1,1],[3,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[79,"Bullet_Burst_Flash",512,1,[-18],[3,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[129,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[54,3,6.283185307179586],[0],[4,0.15],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.05357142857142855,[4,4292723871]],[18,1,[4,4284358679]]],[[44,255],[12,255,0.6026785714285714],[12,0,1]]]]],[93,0,[4,1]],[38,true,[36,1,[10,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[7,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[7,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[7,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[231,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[36,1,[10,[0,1],[[13,2,1],[13,2,1]]]],[0]],[24,[4,1],[0],[6],[6],-19],[31,1]],[79,"Bullet_Burst_Square",32,1,[-20],[3,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[79,"Bullet_Burst_Fragments",32,1,[-21],[3,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[272,"Bullet_Trail",false,512,1,[-22,-23],[3,"4b8ydGY/tOzKGDYewdhT94",1,0]],[144,"Temporary",32,1,[-24,-25],[3,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[33,"Projectile Collision Fade Out",32,8,[[244,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[3,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[33,"Projectile Fade In",32,8,[[245,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[3,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[129,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[27,3,0.7853981633974483,0.7853981633974483],[0],[4,0.24],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[106,[4,33554431]],[18,0.044642857142857144,[4,32281173]],[18,0.8191964285714286,[4,22023713]]],[[44,255],[12,255,0.18749999999999997],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.30256410256410254,1],[[7,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-28],[31,3]],[86,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[6],[27,3,0.05,0.15],[0],[0],[27,3,0.2,0.8],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.2,0.4],[0],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.14732142857142858,[4,4291465556]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-29],[131]],[242,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[66,[4,2412752452]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,2],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293187241]],[18,0.2767857142857143,[4,4291465556]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[229,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[131]],[276,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[6],[4,1],[0],[0],[4,5],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,1],[4,3],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-31],[131]],[277,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[66,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[4,5],[0],[0],[0],[[29,[4,1]]],[146,[6]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[187,true,false,[4,0.2],[4,0.5],[20,1,[160,[[106,[4,4294287463]],[18,1,[4,4283307025]]]]],[6],-32],[131]],[278,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[160,[[136],[18,0.49999999999999994,[4,4293381654]],[51,1]]]]],[37,[0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[280,false,[0],[0],[6],[6],-33],[281,2]]],0,[0,3,1,0,-1,4,0,5,3,0,5,9,0,5,5,0,5,6,0,5,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,7,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,7,11,0,7,12,0,7,13,0,7,14,0,7,15,0,7,16,0,10,1,33],[0,0,0,0,0,0,0,0,0],[-1,8,-1,8,-1,-1,-2,12,-2],[61,56,36,34,16,16,39,62,39]],[[[77,"SM_EnemyRunner_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",793930568,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[76],[55,"SM_EnemyRunner_01",[-2],[3,"d0adRU765c27WX41620vEc",-1,0]],[64,"SM_EnemyRunner_01",1,[[62,-3,[1,"7dZSupN3RW26NRzewpcbRt"],[0],[45],1]],[3,"98EZ57Gb1dMaZCZDdMJXKN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[557,558]],[[[149,[[156,[114,[-18,-19,-20,-21,-22,-23,-24,-25,-26],[[318,0,-5,-4],[82,0,false,-7,-6,[[91,"exit"]]],[82,0,false,-9,-8,[[91,"exit"]]],[82,0,false,-11,-10,[[175,1,[104,"select"]]]],[355,0,false,0,-13,-12,[[157,[104,"select"]]]],[115,-15,-14],[354,0,true,false,-17,-16,[[91,"intro"]]]],-3,-2,-1]],[213,"Energy Layer",[114,[-36,-37,-38,-39,-40],[[115,-31,-30],[82,0,false,-33,-32,[[175,1,[104,"hasEnergy"]]]],[82,0,false,-35,-34,[[157,[104,"hasEnergy"]]]]],-29,-28,-27]],[213,"Locked Layer",[114,[-50,-51,-52,-53,-54],[[115,-45,-44],[82,0,false,-47,-46,[[157,[104,"locked"]]]],[82,0,false,-49,-48,[[175,1,[104,"locked"]]]]],-43,-42,-41]]],[{},"select",4,[176,1,false],"exit",4,[101,2],"intro",4,[101,2],"hasEnergy",4,[176,1,true],"locked",4,[176,1,false]]],[63,"TowerButton_UnSelected",[72,4]],[63,"TowerButton_Selected",[72,3]],[63,"Has Energy",[72,6]],[63,"Empty",[186]],[61,"Entry"],[61,"Any"],[63,"TowerButton_Intro",[72,0]],[61,"Entry"],[63,"Not Enough Energy",[72,5]],[61,"Entry"],[63,"TowerButton_Locked",[72,7]],[61,"Exit"],[63,"TowerButton_Exit",[72,1]],[63,"TowerButton_Exit Upgrade",[72,2]],[63,"Empty",[186]],[61,"Exit"],[61,"Any"],[61,"Exit"],[61,"Any"]],0,[0,29,6,0,30,12,0,31,5,0,14,1,0,15,7,0,14,14,0,15,2,0,14,13,0,15,1,0,14,1,0,15,2,0,14,2,0,15,1,0,14,15,0,15,5,0,14,7,0,15,6,0,-1,5,0,-2,12,0,-3,6,0,-4,7,0,-5,13,0,-6,14,0,-7,2,0,-8,1,0,-9,15,0,29,17,0,30,16,0,31,8,0,14,3,0,15,8,0,14,9,0,15,3,0,14,3,0,15,9,0,-1,8,0,-2,16,0,-3,17,0,-4,9,0,-5,3,0,29,19,0,30,18,0,31,10,0,14,4,0,15,10,0,14,11,0,15,4,0,14,4,0,15,11,0,-1,10,0,-2,18,0,-3,19,0,-4,11,0,-5,4,54],[0,0,0,0,0,0,0,0],[18,18,18,18,18,18,18,18],[265,45,266,264,263,267,268,67]],[[{"name":"Reference_Stage Pause","rect":{"x":0,"y":0,"width":840,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":840,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[559]],[[[149,[[156,[114,[-14,-15,-16,-17,-18,-19,-20,-21],[[82,0,false,-5,-4,[[91,"exitClicked"]]],[82,0,false,-7,-6,[[91,"exit"]]],[318,0,-9,-8],[115,-11,-10],[82,0,false,-13,-12,[[91,"intro"]]]],-3,-2,-1]]],[{},"exit",4,[101,2],"exitClicked",4,[101,2],"intro",4,[101,2]]],[63,"DestroyButton_Idle",[72,0]],[61,"Entry"],[61,"Any"],[63,"DestroyButton_Intro",[72,3]],[61,"Exit"],[63,"DestroyButton_Exit",[72,1]],[63,"DestroyButton_Exit Upgrade",[72,2]],[63,"Empty",[186]]],0,[0,29,3,0,30,5,0,31,2,0,14,7,0,15,1,0,14,6,0,15,1,0,14,1,0,15,4,0,14,8,0,15,2,0,14,4,0,15,3,0,-1,2,0,-2,5,0,-3,3,0,-4,1,0,-5,6,0,-6,7,0,-7,4,0,-8,8,21],[0,0,0,0],[18,18,18,18],[560,139,213,214]],[[[76],[55,"SM_EnemyBiker_02",[-2],[3,"b7Sl95+MZf9bANHYjJnknT",-1,0]],[64,"SM_EnemyBiker_02",1,[[62,-3,[1,"2dUztD+cNX8aVf/J8P3X7o"],[0],[45],1]],[3,"a0vkGbwHRdCYZf+gRDRxfR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[561,562]],[[[68,".bin",1857184372,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14688,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14688,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.27878057956695557,-0.2357187718153,1.5832483768463135e-8],"maxPosition",8,[1,0.2783522307872772,0.6113541722297668,0.8522592782974243]]],-1],0,0,[],[],[]],[[[77,"SM_EnemyBiker_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[701,"GameScene"],[194,0,{},[177,"New Node"],[22,"feXYlDJrhOiIHGtymY3yxW",-7,[49,"4bbjznBsZOa5a9i8ALge3c",-6,[[11,"Enemies Holder",["_name"],-1],[5,["_lpos"],-2,[1,0,0,227.162]],[5,["_lrot"],-3,[3,0.0805214068653804,0.3812272063696535,-0.03335305878500261,0.9203638919632243]],[5,["_euler"],-4,[1,10,45,0]],[5,["_lscale"],-5,[1,130,130,130]],[17,false,["_active"],[2,["7e5RAOazJDUoqdJyOb9q5f"]]],[17,false,["_active"],[2,["02tfv4BbdAxpSCsGntWHOx"]]]]],68]],[194,0,{},[177,"New Node"],[531,"68bll21PNLdos7u2gIR3Y0",-178,[49,"8a0yrC1IRBQrJDZQlYZoBK",-177,[[11,"Holder_ShopItemUpgrade-001",["_name"],-56],[5,["_lpos"],-57,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-58],[5,["_lpos"],-59,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-60],[5,["_lpos"],-61,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-62],[5,["_lpos"],-63,[1,0,-158,0]],[11,"Holder_ShopItemUpgrade-001",["_name"],-64],[5,["_lpos"],-65,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-66],[5,["_lpos"],-67,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-68],[5,["_lpos"],-69,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-70],[5,["_lpos"],-71,[1,0,-158,0]],[11,"Holder_ShopItemUpgrade-001",["_name"],-72],[5,["_lpos"],-73,[1,0,82,0]],[11,"Holder_ShopItemUpgrade-002",["_name"],-74],[5,["_lpos"],-75,[1,0,2,0]],[11,"Holder_ShopItemUpgrade-003",["_name"],-76],[5,["_lpos"],-77,[1,0,-78,0]],[11,"Holder_ShopItemUpgrade-004",["_name"],-78],[5,["_lpos"],-79,[1,0,-158,0]],[11,"ShopPanel",["_name"],-80],[5,["_lpos"],-81,[1,0,0,512]],[5,["_lrot"],-82,[3,0,0,0,1]],[5,["_euler"],-83,[1,0,0,0]],[11,"Icon_Currency Outline",["_name"],-84],[5,["_lpos"],-85,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-86],[5,["_lpos"],-87,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-88],[5,["_lpos"],-89,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-90],[5,["_lpos"],-91,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-92],[5,["_lpos"],-93,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-94],[5,["_lpos"],-95,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-96],[5,["_lpos"],-97,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-98],[5,["_lpos"],-99,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-100],[5,["_lpos"],-101,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-102],[5,["_lpos"],-103,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-104],[5,["_lpos"],-105,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-106],[5,["_lpos"],-107,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-108],[5,["_lpos"],-109,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-110],[5,["_lpos"],-111,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-112],[5,["_lpos"],-113,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-114],[5,["_lpos"],-115,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-116],[5,["_lpos"],-117,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-118],[5,["_lpos"],-119,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-120],[5,["_lpos"],-121,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-122],[5,["_lpos"],-123,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-124],[5,["_lpos"],-125,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-126],[5,["_lpos"],-127,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-128],[5,["_lpos"],-129,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-130],[5,["_lpos"],-131,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-132],[5,["_lpos"],-133,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-134],[5,["_lpos"],-135,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-136],[5,["_lpos"],-137,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-138],[5,["_lpos"],-139,[1,9.999999999999998,0,0]],[11,"Icon_Currency Outline",["_name"],-140],[5,["_lpos"],-141,[1,-5.850000000000001,0,0]],[11,"Text_Cost",["_name"],-142],[5,["_lpos"],-143,[1,9.999999999999998,0,0]],[11,"Icon_Currency",["_name"],-144],[5,["_lpos"],-145,[1,0,0,0]],[11,"Icon_Currency",["_name"],-146],[5,["_lpos"],-147,[1,0,0,0]],[11,"Icon_Currency",["_name"],-148],[5,["_lpos"],-149,[1,0,0,0]],[11,"Icon_Currency",["_name"],-150],[5,["_lpos"],-151,[1,0,0,0]],[11,"Icon_Currency",["_name"],-152],[5,["_lpos"],-153,[1,0,0,0]],[11,"Icon_Currency",["_name"],-154],[5,["_lpos"],-155,[1,0,0,0]],[11,"Icon_Currency",["_name"],-156],[5,["_lpos"],-157,[1,0,0,0]],[11,"Icon_Currency",["_name"],-158],[5,["_lpos"],-159,[1,0,0,0]],[11,"Icon_Currency",["_name"],-160],[5,["_lpos"],-161,[1,0,0,0]],[11,"Icon_Currency",["_name"],-162],[5,["_lpos"],-163,[1,0,0,0]],[11,"Icon_Currency",["_name"],-164],[5,["_lpos"],-165,[1,0,0,0]],[11,"Icon_Currency",["_name"],-166],[5,["_lpos"],-167,[1,0,0,0]],[11,"Icon_Currency",["_name"],-168],[5,["_lpos"],-169,[1,0,0,0]],[11,"Icon_Currency",["_name"],-170],[5,["_lpos"],-171,[1,0,0,0]],[11,"Icon_Currency",["_name"],-172],[5,["_lpos"],-173,[1,0,0,0]],[11,false,["_active"],-174],[14,["_contentSize"],[2,["49ShHhZ/dCq7pq5/7C7C5w"]],[5,414,896]],[11,0,["_top"],-175],[11,0,["_bottom"],-176]]],[[71,["_animator"],-55,[2,["9fkwbwsEJNtp1a9YblePmY"]],-54,[2,["836Ayw0qlL5aalHfUNDfhK"]]]],[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53],69]],[90,0,{},[428,"46k0m6lkdE7LjR/vInpkl2",-229,[448,"84oPhfCVNNepRzTDrc/qVl",-228,[[266,[2,["0aSc2CSmNOv7gy3zhm972w","b88SOLEf1G8Llh8jZIyZGc"]],[-225]],[266,[2,["175KhMRQRDzrwjR+Y/XD8F"]],[-226]],[266,[2,["basO3xNKRMubx47MkKLOyR"]],[-227]]],[[297,[2,["c4JryQ715OxZEXyEuY811m"]],[-223]],[297,[2,["559OljkmVJbb40T1JglvS/"]],[-224]]],[[11,"Holder_TowerUpgradeMenu",["_name"],-182],[5,["_lpos"],-183,[1,0,0,0]],[5,["_lrot"],-184,[3,0,0,0,1]],[5,["_euler"],-185,[1,0,0,0]],[11,1,["_animationEvents","0","_actions","length"],-186],[209,["_animationEvents","0","_actions","0"],-188,[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-187]],[17,false,["_debug"],[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[11,"Button_Color",["_name"],-189],[5,["_lpos"],-190,[1,0,0,0]],[11,"Button_Color",["_name"],-191],[5,["_lpos"],-192,[1,0,0,0]],[11,"Button_Color",["_name"],-193],[5,["_lpos"],-194,[1,0,0,0]],[17,"Dot_Outline",["_name"],[2,["fad6l15HhESar9QeacgpaJ"]]],[11,"Panel_Outline",["_name"],-195],[5,["_lpos"],-196,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-197],[5,["_lpos"],-198,[1,0,0,0]],[11,"Panel_Outline",["_name"],-199],[5,["_lpos"],-200,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-201],[5,["_lpos"],-202,[1,0,0,0]],[11,"Panel_Outline",["_name"],-203],[5,["_lpos"],-204,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-205],[5,["_lpos"],-206,[1,0,0,0]],[17,0,["_opacity"],[2,["18PnzBvKpPm5jHmDihqUZ9"]]],[17,false,["_active"],[2,["37Eb9ZL+JM5azHm5AEqitc"]]],[11,"Stats 01",["_name"],-207],[5,["_lpos"],-208,[1,-62,-5.182,0]],[11,"Stats 02",["_name"],-209],[5,["_lpos"],-210,[1,0,-5.182,0]],[11,"Stats 03",["_name"],-211],[5,["_lpos"],-212,[1,62,-5.182,0]],[11,true,["_active"],-213],[11,"Holder_Tower Button 03",["_name"],-214],[5,["_color"],-215,[4,4281401599]],[11,"Destroy",["_string"],-216],[11,1,["clickEvents","length"],-217],[209,["clickEvents","1"],-218,[182,"ac879rTendCEbpZWFz/jexs","playSFX"]],[11,1,["clickEvents","length"],-219],[209,["clickEvents","1"],-220,[182,"ac879rTendCEbpZWFz/jexs","playSFX"]],[11,1,["clickEvents","length"],-221],[209,["clickEvents","1"],-222,[182,"ac879rTendCEbpZWFz/jexs","playSFX"]],[17,false,["_debug"],[2,["82+Qldi0dJcJTsSoTpzmOs"]]],[17,true,["_debug"],[2,["99AQyBFexBdqAz+WiT48yy"]]],[17,8,["_eventID"],[2,["2dmSthkmBFhqDzGkvuZcgk"]]]]],[-179,-180,-181],55]],[271,"Holder_Confirmation Tower",false,33554432,2,[-300,-301,-302,-303,-304,-305,-306,-307],[[[48,-230,[1,"20eHYBW8BJMpRGFDjQJcID"]],[219,false,-231,[1,"ecGj5xSt5Dn7mm7kQ03bt4"],[301,302,303,304,305,306,307],308],-232,[384,"Increase Max HP to {data}","Increase Max Energy to {data}","Increase Energy Recharge Rate to {data}","Unlock {data} gun upgrade","Unlock {data} cannon upgrade","Unlock {data} laser upgrade",-294,[1,"a2ksuvARpJhb8eBZ1ELSBo"],[[8,"99672sUg5NFw4x7bEPAiyHE","activate",-292],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-293]],[[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-291]],-290,-289,-288,-287,[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-286]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-285]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-284]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-283]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-282]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-281]],[[8,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-280]],[[84,-267,-266],[84,-269,-268],[84,-271,-270],[84,-273,-272],[84,-275,-274],[84,-277,-276],[84,-279,-278]],[[84,-253,-252],[84,-255,-254],[84,-257,-256],[84,-259,-258],[84,-261,-260],[84,-263,-262],[84,-265,-264]],[[84,-239,-238],[84,-241,-240],[84,-243,-242],[84,-245,-244],[84,-247,-246],[84,-249,-248],[84,-251,-250]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,true",-237]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,false",-235],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-236]],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","lackingMaxEnergy,true",-233],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","towerBought,false",-234]],309],[57,-295,[1,"f1VUB86bFEoZrcuGkjXRBj"]],[107,-297,[1,"73q4M5YzhOn7JoFARIzVHl"],-296],[220,-299,[1,"b4P8HiCZRJuZV5WSX0WUAS"],[[201,"AE_FinishedExit",[[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-298]]]]]],4,4,1,4,4,4,4],[43,null,"89KfShwWpLgbsnSJI63bnY",416]],[90,0,{},[428,"46k0m6lkdE7LjR/vInpkl2",-344,[81,"615Zd7XYRLqKkUnNrgpIIW",-343,[[297,[2,["559OljkmVJbb40T1JglvS/"]],[-342]]],[[17,"Holder_TowerUpgradeMenu",["_name"],[2,["46k0m6lkdE7LjR/vInpkl2"]]],[14,["_lpos"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[14,["_lrot"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[3,0,0,0,1]],[14,["_euler"],[2,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[11,"Button_Color",["_name"],-311],[5,["_lpos"],-312,[1,0,0,0]],[11,"Button_Color",["_name"],-313],[5,["_lpos"],-314,[1,0,0,0]],[11,"Button_Color",["_name"],-315],[5,["_lpos"],-316,[1,0,0,0]],[11,"Stats 01",["_name"],-317],[5,["_lpos"],-318,[1,-62,-5.182,0]],[11,"Stats 02",["_name"],-319],[5,["_lpos"],-320,[1,0,-5.182,0]],[11,"Stats 03",["_name"],-321],[5,["_lpos"],-322,[1,62,-5.182,0]],[17,"Dot_Outline",["_name"],[2,["fad6l15HhESar9QeacgpaJ"]]],[11,"Panel_Outline",["_name"],-323],[5,["_lpos"],-324,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-325],[5,["_lpos"],-326,[1,0,0,0]],[11,"Panel_Outline",["_name"],-327],[5,["_lpos"],-328,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-329],[5,["_lpos"],-330,[1,0,0,0]],[11,"Panel_Outline",["_name"],-331],[5,["_lpos"],-332,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-333],[5,["_lpos"],-334,[1,0,0,0]],[17,0,["_opacity"],[2,["18PnzBvKpPm5jHmDihqUZ9"]]],[17,false,["_active"],[2,["37Eb9ZL+JM5azHm5AEqitc"]]],[17,false,["_debug"],[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[11,3,["clickEvents","length"],-335],[449,["clickEvents","1","target"],-337,-336],[209,["clickEvents","2"],-338,[182,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons"]],[11,1,["_animationEvents","0","_actions","length"],-339],[209,["_animationEvents","0","_actions","0"],-341,[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-340]]]],[-308,-309,-310],47]],[170,"Holder_Tab 01",33554432,[-357,-358,-359,-360,-361],[[[9,-345,[1,"52mXA+EWpMb5sytFd+zlCS"],[5,80,80]],[190,false,-346,[1,"05b6880JpB7pP51qtHmW35"],[138,139]],-347,[184,3,0.9,-354,[1,"49P/tNC9lJO7YEPKgQ296q"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","0"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","0"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","0",-349],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-350],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-351],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-352],[8,"ac879rTendCEbpZWFz/jexs","playSFX",2],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","gun tower",-353]],[4,4292269782],-348,170,171,172,173],[107,-356,[1,"becbjJrKtLKKKXpFFhmK14"],-355]],4,4,1,4,4],[43,null,"540fzbZCJEwr3K+aN/h0qL",174],[1,-104,7.153,0]],[170,"Holder_Tab 02",33554432,[-373,-374,-375,-376,-377],[[[9,-362,[1,"1bBUZxlrxCG6sgKtYOWbov"],[5,80,80]],[233,false,-363,[1,"44t622WjFEoK7zk2I6wTSB"]],-364,[184,3,0.9,-370,[1,"6bAGU0W5JFbqu8rA4uYrRJ"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","1"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","1"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","1",-366],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-367],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",6],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",-368],[8,"ac879rTendCEbpZWFz/jexs","playSFX",2],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","cannon tower",-369]],[4,4292269782],-365,165,166,167,168],[107,-372,[1,"96Iemq47JIh5IWmxxfOM5B"],-371]],4,4,1,4,4],[43,null,"82VLcRayVN/b6VA9ji8mc2",169],[1,0,7.153,0]],[170,"Holder_Tab 03",33554432,[-388,-389,-390,-391,-392],[[[9,-378,[1,"cbH/kRo5lDGZ6kavzXDETE"],[5,80,80]],[233,false,-379,[1,"5dR2IXqrdKU70XROQoLJJy"]],-380,[184,3,0.9,-385,[1,"a71gAfqWZCVZYWhdjQDI8n"],[[153,"ca25cTenhxIzImdddRm852A","setTowers","2"],[153,"29dcbqkeLJDCo7uiXlubGL/","setTab","2"],[34,"4633boUp01PnK/YH7enPkIw","setTowers","2",-382],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",-383],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",6],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",7],[8,"ac879rTendCEbpZWFz/jexs","playSFX",2],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","laser tower",-384]],[4,4292269782],-381,160,161,162,163],[107,-387,[1,"769OM/ZgJALpHJNFKQ6sRV"],-386]],4,4,1,4,4],[43,null,"28F/XecwZKTYjDtSaKim2C",164],[1,104,7.153,0]],[517,"Main Camera","053H6cfuFHVIse29fy0nSI",[-400,-401,-402,-403],[[-393,[679,0.5,-395,-394,[1,0.1,0,0]],[578,false,-396,[1,2,3]],-397,[580,true,-399,-398]],1,4,4,1,4],[1,2,19.545,13.135],[3,-0.49999999999999994,0,0,0.8660254037844387],[1,-60,0,0]],[80,"Tree Lines",33554432,[-416,-417,-418,-419,-420,-421,-422],[[47,-404,[1,"acndY1/yBMIp6r+kqWrZFJ"],[5,360,260],[0,0.5,0]],[394,-415,[1,"9banQW/Q5Fi7y0lA0K057k"],[395,[[180,"0",[-405,-406]],[180,"1",[-407,-408]],[180,"2",[-409,-410]],[180,"3",[-411]],[180,"4",[-412]],[180,"5",[-413,-414]]]],[4,4292928274],[4,4281556991],[4,4289238409]]],[43,null,"beTlU7EIxA+KnaZ2h1084m",122],[1,0,-117.06,0]],[80,"Panel_Color",33554432,[-426,-427,-428,-429,-430,-431],[[9,-423,[1,"2bV4pcEzdMbIphVl9O8v60"],[5,0,160]],[23,0,-424,[1,"cfn1KTFtdCY5RFV0+eHEtW"],[4,4293450459],441],[260,1,2,8,8,2,-425,[1,"82qqPyDepNA5nImHB55LzK"]]],[43,null,"62oFnyLwRGcqa9L6wkHKhg",442],[1,0,17,0]],[495,"Controllers","315/LHwoJB6YIB5wxj4rHw",[-432,-433,-434,-435,-436,-437,-438,-439,-440,-441]],[496,"Content Holder",false,33554432,[-447,-448,-449],[[122,-442,[5,414,896]],[571,45,100,100,1,-443],[343,false,-444],[317,-445],[275,-446]]],[80,"Holder_Item List",33554432,[-455,-456,-457,-458,-459],[[9,-450,[1,"bc63VeMORAGqZ7Dae69esh"],[5,360,460]],[386,1,-451,[1,"bbLgAcJttD6KCv4iQksQd9"]],[377,false,1,30,-452,[1,"c2KXhwaxBBAany4iSfZgVr"]],[57,-453,[1,"b0M8U7yiVH6J5sLR1zmaM1"]],[94,-454,[1,"ba4hK8XtBCubA5Cx6cIayK"]]],[43,null,"7362Z2cI5M+onEkzK+mZj2",214],[1,0,452,0]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-468,[208,"ac1v+0CO5G/o5WSZo/9qCO",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"19H6Z/0bFKarkhVaQNdzgH"]],[199,[1,"db0GZ2PSBFP7mf2dN0ijWZ"]]]]],[[11,"SM_TowerBase_01",["_name"],-460],[5,["_lpos"],-461,[1,0,0,0]],[5,["_lrot"],-462,[3,0,0,0,1]],[5,["_euler"],-463,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],343],[11,false,["_active"],-464],[11,8388608,["_layer"],-465],[11,8388608,["_layer"],-466],[11,true,["_active"],-467]]],342]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-474,[208,"eer6v2QCxMwq9fj0n6sQoL",null,[[75,[2,["52Wr8elKJczKH4c2zJXMeu"]],[[202,[1,"28n9EjSJNDyYhyDUOjV7J3"]],[199,[1,"37vwfTbSRNprHuHEtFKtTC"]]]]],[[11,"SM_TowerBase_01",["_name"],-469],[5,["_lpos"],-470,[1,0,0,0]],[5,["_lrot"],-471,[3,0,0,0,1]],[5,["_euler"],-472,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],376],[17,8388608,["_layer"],[2,["52Wr8elKJczKH4c2zJXMeu"]]],[11,false,["_active"],-473]]],375]],[90,0,null,[22,"a6UoiMmTtU6YsbaNPx5rqf",-480,[60,"1ehkzVtQpKRoVlwKpBjF5I",null,[[11,"SM_TowerBase_01",["_name"],-475],[5,["_lpos"],-476,[1,0,0,0]],[5,["_lrot"],-477,[3,0,0,0,1]],[5,["_euler"],-478,[1,0,0,0]],[35,["_materials","0"],[2,["c8x41wezhYTop9GywitTd7"]],394],[11,false,["_active"],-479]]],393]],[367,"Button_Play",33554432,[-487,-488],[[122,-481,[5,110,110]],[388,2,-484,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-483]],[4,4292269782],-482,28,29,30,31],[275,-485],[346,"GameScene_PlayNextLevel",-486]],[1,-1.3959999999999866,180.344,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[90,0,{},[332,"c46/YsCPVOJYA4mWEpNYRx",-499,[60,"e8c2NCecRDkorEgxnFR5XZ",null,[[14,["_contentSize"],[2,["39YbcMoONPnqpEYIvfvLdK"]],[5,414,896]],[17,"Button_Color",["_name"],[2,["8eLggjorhEIr3xF4IjNE8D"]]],[14,["_lpos"],[2,["8eLggjorhEIr3xF4IjNE8D"]],[1,0,0,0]],[17,"Game_Canvas",["_name"],[2,["c46/YsCPVOJYA4mWEpNYRx"]]],[14,["_lpos"],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[1,207,448.00000000000006,0]],[14,["_lrot"],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[14,["_euler"],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]],[17,"Energy Cube 01",["_name"],[2,["8eVMMyTAhHTrxdUCI00RNH"]]],[14,["_lpos"],[2,["8eVMMyTAhHTrxdUCI00RNH"]],[1,4.5,0,0]],[17,"Energy Cube 02",["_name"],[2,["d7ZEjS/RNNcpxy6bensm5T"]]],[14,["_lpos"],[2,["d7ZEjS/RNNcpxy6bensm5T"]],[1,30.6,0,0]],[14,["_lscale"],[2,["d7ZEjS/RNNcpxy6bensm5T"]],[1,0,1,1]],[17,"Energy Cube 03",["_name"],[2,["7fzNbEGA5C7LBeU+6/kk0+"]]],[14,["_lpos"],[2,["7fzNbEGA5C7LBeU+6/kk0+"]],[1,56.7,0,0]],[14,["_lscale"],[2,["7fzNbEGA5C7LBeU+6/kk0+"]],[1,0,1,1]],[17,"Energy Cube 04",["_name"],[2,["a4dr5gBqVD8KmMo9U690pe"]]],[14,["_lpos"],[2,["a4dr5gBqVD8KmMo9U690pe"]],[1,82.8,0,0]],[14,["_lscale"],[2,["a4dr5gBqVD8KmMo9U690pe"]],[1,0,1,1]],[17,"Energy Cube 05",["_name"],[2,["2cz2kVPWpBaYfDUmpze4C2"]]],[14,["_lpos"],[2,["2cz2kVPWpBaYfDUmpze4C2"]],[1,108.89999999999999,0,0]],[14,["_lscale"],[2,["2cz2kVPWpBaYfDUmpze4C2"]],[1,0,1,1]],[17,"Energy Cube 06",["_name"],[2,["32GQvJZZ1CfL8jE0XAQI7p"]]],[14,["_lpos"],[2,["32GQvJZZ1CfL8jE0XAQI7p"]],[1,134.99999999999997,0,0]],[14,["_lscale"],[2,["32GQvJZZ1CfL8jE0XAQI7p"]],[1,0,1,1]],[17,"Energy Cube 07",["_name"],[2,["8bn6okF5BG6Jaim8hBAiyD"]]],[14,["_lpos"],[2,["8bn6okF5BG6Jaim8hBAiyD"]],[1,161.09999999999997,0,0]],[14,["_lscale"],[2,["8bn6okF5BG6Jaim8hBAiyD"]],[1,0,1,1]],[17,"Energy Cube 08",["_name"],[2,["cf12Kt7l1LELKFSPjDHbWy"]]],[14,["_lpos"],[2,["cf12Kt7l1LELKFSPjDHbWy"]],[1,187.19999999999996,0,0]],[14,["_lscale"],[2,["cf12Kt7l1LELKFSPjDHbWy"]],[1,0,1,1]],[17,"Energy Cube 09",["_name"],[2,["f1J1aAxmpPvoc5FGVdqMEx"]]],[14,["_lpos"],[2,["f1J1aAxmpPvoc5FGVdqMEx"]],[1,213.29999999999995,0,0]],[14,["_lscale"],[2,["f1J1aAxmpPvoc5FGVdqMEx"]],[1,0,1,1]],[17,"Energy Cube 10",["_name"],[2,["d1aI9zoc9M0ZqlDjUrVkW1"]]],[14,["_lpos"],[2,["d1aI9zoc9M0ZqlDjUrVkW1"]],[1,239.39999999999995,0,0]],[14,["_lscale"],[2,["d1aI9zoc9M0ZqlDjUrVkW1"]],[1,0,1,1]],[17,"Energy Cube 01",["_name"],[2,["0axfYOGJ9KIpwnZnDqgaBm"]]],[14,["_lpos"],[2,["0axfYOGJ9KIpwnZnDqgaBm"]],[1,4.5,0,0]],[17,"Energy Cube 02",["_name"],[2,["53HN9ngBFPwIoXt0tubF9k"]]],[14,["_lpos"],[2,["53HN9ngBFPwIoXt0tubF9k"]],[1,41.6,0,0]],[17,"Energy Cube 03",["_name"],[2,["c2M0agW91M9LnjfWAKWt7r"]]],[14,["_lpos"],[2,["c2M0agW91M9LnjfWAKWt7r"]],[1,67.7,0,0]],[17,"Energy Cube 04",["_name"],[2,["01ffODeyhP/4KgJPoDRwfM"]]],[14,["_lpos"],[2,["01ffODeyhP/4KgJPoDRwfM"]],[1,93.8,0,0]],[17,"Energy Cube 05",["_name"],[2,["b7Jgl14dxLzKKEB3XSS3ej"]]],[14,["_lpos"],[2,["b7Jgl14dxLzKKEB3XSS3ej"]],[1,119.89999999999999,0,0]],[17,"Energy Cube 06",["_name"],[2,["51U0ikYrVBMpFfaWahlqGV"]]],[14,["_lpos"],[2,["51U0ikYrVBMpFfaWahlqGV"]],[1,145.99999999999997,0,0]],[17,"Energy Cube 07",["_name"],[2,["c3mnqxREVDdqeDtBJOq0J+"]]],[14,["_lpos"],[2,["c3mnqxREVDdqeDtBJOq0J+"]],[1,172.09999999999997,0,0]],[17,"Energy Cube 08",["_name"],[2,["9a+qH8Q7ZAoowWqHZ6iGr6"]]],[14,["_lpos"],[2,["9a+qH8Q7ZAoowWqHZ6iGr6"]],[1,198.19999999999996,0,0]],[17,"Energy Cube 09",["_name"],[2,["5fdgPWM4RJ5oImY3BOlnT2"]]],[14,["_lpos"],[2,["5fdgPWM4RJ5oImY3BOlnT2"]],[1,224.29999999999995,0,0]],[17,"Energy Cube 10",["_name"],[2,["1d7JAlIBpFbYQ00E+ylGdn"]]],[14,["_lpos"],[2,["1d7JAlIBpFbYQ00E+ylGdn"]],[1,250.39999999999995,0,0]],[17,"Holder_Lock 01",["_name"],[2,["bb80MsTbNMEqr55ap8h3Hm"]]],[14,["_lpos"],[2,["bb80MsTbNMEqr55ap8h3Hm"]],[1,15.5,0,0]],[17,"Holder_Lock 02",["_name"],[2,["ec9n9ITfNK2JYJNhbKYEy9"]]],[14,["_lpos"],[2,["ec9n9ITfNK2JYJNhbKYEy9"]],[1,41.6,0,0]],[17,"Holder_Lock 03",["_name"],[2,["c23wtes3RFUowrK/zzWVwH"]]],[14,["_lpos"],[2,["c23wtes3RFUowrK/zzWVwH"]],[1,67.7,0,0]],[17,"Holder_Lock 04",["_name"],[2,["1e7YKWXolPDqsDfaxtB2zx"]]],[14,["_lpos"],[2,["1e7YKWXolPDqsDfaxtB2zx"]],[1,93.8,0,0]],[17,"Holder_Lock 05",["_name"],[2,["d5L3xcBFlC06ObWGEhfzu6"]]],[14,["_lpos"],[2,["d5L3xcBFlC06ObWGEhfzu6"]],[1,119.89999999999999,0,0]],[17,"Holder_Lock 06",["_name"],[2,["ddfacMMP1CYLMMZxNr+o53"]]],[14,["_lpos"],[2,["ddfacMMP1CYLMMZxNr+o53"]],[1,145.99999999999997,0,0]],[17,"Holder_Lock 07",["_name"],[2,["47qh4mv7hG3aFQmnyvU6M8"]]],[14,["_lpos"],[2,["47qh4mv7hG3aFQmnyvU6M8"]],[1,172.09999999999997,0,0]],[17,"Holder_Lock 08",["_name"],[2,["10qNw07JtDn4N11pOKvx6+"]]],[14,["_lpos"],[2,["10qNw07JtDn4N11pOKvx6+"]],[1,198.19999999999996,0,0]],[17,"Holder_Lock 09",["_name"],[2,["d5iuWH8ulEx7/fFhQ6usn9"]]],[14,["_lpos"],[2,["d5iuWH8ulEx7/fFhQ6usn9"]],[1,224.29999999999995,0,0]],[17,"Holder_Lock 10",["_name"],[2,["cfLsKUx3tCopm/TJHV/rZk"]]],[14,["_lpos"],[2,["cfLsKUx3tCopm/TJHV/rZk"]],[1,250.39999999999995,0,0]],[17,"Text_Wave",["_name"],[2,["22AI187bdJUJ6J+Dfz8YEB"]]],[14,["_lpos"],[2,["22AI187bdJUJ6J+Dfz8YEB"]],[1,-29.35,0,0]],[17,"Text_Current Wave",["_name"],[2,["85/2sIiHdI+5CeJ7Gddt1C"]]],[14,["_lpos"],[2,["85/2sIiHdI+5CeJ7Gddt1C"]],[1,26.79,0,0]],[17,"Text_Total Waves",["_name"],[2,["7952zDG4tIi62NWqHN2ywz"]]],[14,["_lpos"],[2,["7952zDG4tIi62NWqHN2ywz"]],[1,56.14,0,0]],[14,["_lpos"],[2,["095/3h0rhKTrx79A3GWOco","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,21,0]],[17,"LifeCube_Holder-001",["_name"],[2,["7cNem45h9DQZzm6etDeVan","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["7cNem45h9DQZzm6etDeVan","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,21,0]],[17,"LifeCube_Holder-002",["_name"],[2,["02WKp1aaZM5JahQG4GQFOT","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["02WKp1aaZM5JahQG4GQFOT","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,21,0]],[17,"LifeCube_Holder-003",["_name"],[2,["66QmLgfF9LxJdx0wLt8UTM","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["66QmLgfF9LxJdx0wLt8UTM","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,21,0]],[17,"LifeCube_Holder-004",["_name"],[2,["b4G0BDxa1KEYbReDXot7x5","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["b4G0BDxa1KEYbReDXot7x5","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,21,0]],[17,"LifeCube_Holder-005",["_name"],[2,["06B8cO2XxB9p2K43Z/q+wo","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["06B8cO2XxB9p2K43Z/q+wo","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,21,0]],[17,"LifeCube_Holder-006",["_name"],[2,["13eIwjQGNOtI2Ma49UBtLG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["13eIwjQGNOtI2Ma49UBtLG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,21,0]],[17,"LifeCube_Holder-007",["_name"],[2,["cf05UvdYhAJZYNkQcMyV5L","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["cf05UvdYhAJZYNkQcMyV5L","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,21,0]],[17,"LifeCube_Holder-008",["_name"],[2,["a2CnGIgYNF1549oF7vSBXk","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["a2CnGIgYNF1549oF7vSBXk","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,21,0]],[17,"LifeCube_Holder-009",["_name"],[2,["bbmhP8kNNFHYhDHE6osOGC","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["bbmhP8kNNFHYhDHE6osOGC","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,21,0]],[17,"LifeCube_Holder-010",["_name"],[2,["5blYx2mgNGB4CSEcuOc88D","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["5blYx2mgNGB4CSEcuOc88D","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,-15,0]],[17,"LifeCube_Holder-011",["_name"],[2,["4fQFdgr01LDbnqUBek4oiG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["4fQFdgr01LDbnqUBek4oiG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,-15,0]],[17,"LifeCube_Holder-012",["_name"],[2,["adaCthYBFOLYNMtCicsIHG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["adaCthYBFOLYNMtCicsIHG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,-15,0]],[17,"LifeCube_Holder-013",["_name"],[2,["e0fyMWYtJBbZHqGdMEB7n6","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["e0fyMWYtJBbZHqGdMEB7n6","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,-15,0]],[17,"LifeCube_Holder-014",["_name"],[2,["f8T8TRrL5IL6mxmSyfR6X3","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["f8T8TRrL5IL6mxmSyfR6X3","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,-15,0]],[17,"LifeCube_Holder-015",["_name"],[2,["0aHbmObZBPJbGalTEfX6Dg","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["0aHbmObZBPJbGalTEfX6Dg","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,-15,0]],[17,"LifeCube_Holder-016",["_name"],[2,["39ydII2U1C04Ew6G7nhJ7h","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["39ydII2U1C04Ew6G7nhJ7h","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,-15,0]],[17,"LifeCube_Holder-017",["_name"],[2,["fcTfiIOR9Pf4i37khI4GUN","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["fcTfiIOR9Pf4i37khI4GUN","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,-15,0]],[17,"LifeCube_Holder-018",["_name"],[2,["6a9la9eQ1M44Civqhp+e5M","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["6a9la9eQ1M44Civqhp+e5M","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,-15,0]],[17,"LifeCube_Holder-019",["_name"],[2,["a1My+52mNMd6m/8VuXt47Y","2fFGF3dqxMNKSC0hr3+Zvd"]]],[14,["_lpos"],[2,["a1My+52mNMd6m/8VuXt47Y","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,-15,0]],[14,["_contentSize"],[2,["04UahlQ19MrrcYxMIvXv1N"]],[5,414,896]],[17,"Content Holder_Game",["_name"],[2,["ddKGi6x+1G/b3lO10Aw/fr"]]],[14,["_lpos"],[2,["ddKGi6x+1G/b3lO10Aw/fr"]],[1,0,0,0]],[17,"TopPanel",["_name"],[2,["939ao4QRtJRaDKWBd5sT4d"]]],[14,["_lpos"],[2,["939ao4QRtJRaDKWBd5sT4d"]],[1,0,398,0]],[17,"Square_Holder",["_name"],[2,["42mHyfmpNPqaKQn+Fp0oII"]]],[14,["_lpos"],[2,["42mHyfmpNPqaKQn+Fp0oII"]],[1,0,30,0]],[17,"Energy_Holder",["_name"],[2,["d7iVc1atpLIadbU2ouzi81"]]],[14,["_lpos"],[2,["d7iVc1atpLIadbU2ouzi81"]],[1,0,-1,0]],[17,"Panel_BG",["_name"],[2,["c2hyooaShJ2Y/WAKYp9+Lc"]]],[14,["_lpos"],[2,["c2hyooaShJ2Y/WAKYp9+Lc"]],[1,-133,0,0]],[17,"Panel_Shadow",["_name"],[2,["96F77oR3ZIQLz48o2C2S5t"]]],[14,["_lpos"],[2,["96F77oR3ZIQLz48o2C2S5t"]],[1,-133,0,0]],[17,"Panel_Locked",["_name"],[2,["01sa8N1EdNNrGcO4CVQWaV"]]],[14,["_lpos"],[2,["01sa8N1EdNNrGcO4CVQWaV"]],[1,-133,0,0]],[17,"Button_Pause",["_name"],[2,["b5wW2uS75Gcrcv1B4GlOOZ"]]],[14,["_lpos"],[2,["b5wW2uS75Gcrcv1B4GlOOZ"]],[1,178.47,-1.5,0]],[14,["_contentSize"],[2,["06zRYavfhAkbZlZ3RJfaEP"]],[5,414,896]],[17,"MidPanel",["_name"],[2,["0dajiuehJKAY6NGi/qi06k"]]],[14,["_lpos"],[2,["0dajiuehJKAY6NGi/qi06k"]],[1,0,0,0]],[17,"Square_Detail 01",["_name"],[2,["ecQBpVZJNJ4bDMzJNvIaZC"]]],[14,["_lpos"],[2,["ecQBpVZJNJ4bDMzJNvIaZC"]],[1,-247.175,75.47200000000001,0]],[17,"Square_Detail 02",["_name"],[2,["d9g06R0y1KgJlD9A7Ely+0"]]],[14,["_lpos"],[2,["d9g06R0y1KgJlD9A7Ely+0"]],[1,-236.412,90.325,0]],[17,"Square_Detail 03",["_name"],[2,["86kMi+WgtEb4R+S+lkcfC6"]]],[14,["_lpos"],[2,["86kMi+WgtEb4R+S+lkcfC6"]],[1,-245.238,83.221,0]],[17,"BotPanel",["_name"],[2,["f7zvnB7f5I1J6JDxy+modA"]]],[14,["_lpos"],[2,["f7zvnB7f5I1J6JDxy+modA"]],[1,0,-398,0]],[17,"Text_Life",["_name"],[2,["c44S47FFxO/qd9YQoHqN2n"]]],[14,["_lpos"],[2,["c44S47FFxO/qd9YQoHqN2n"]],[1,0,47.5,0]],[17,"Life_Holder",["_name"],[2,["077TOWP9ZBcKlau9bmd+dc"]]],[14,["_lpos"],[2,["077TOWP9ZBcKlau9bmd+dc"]],[1,0,12,0]],[14,["_contentSize"],[2,["6cj4+UyDZAm5y/Y4ZTISSK"]],[5,414,896]],[17,"Content Holder_IntroPause",["_name"],[2,["fcJel8rm9PjpE6wSmC6xSq"]]],[14,["_lpos"],[2,["fcJel8rm9PjpE6wSmC6xSq"]],[1,0,0,0]],[14,["_contentSize"],[2,["b2cTEyFexNZ5fssjNc6ysC"]],[5,414,896]],[17,"Overlay",["_name"],[2,["81ElX3LmlEG60SbfRx51Hh"]]],[14,["_lpos"],[2,["81ElX3LmlEG60SbfRx51Hh"]],[1,0,0,0]],[17,"TopPanel",["_name"],[2,["2bHbcyDxJHJpF4cz0aKl5i"]]],[14,["_lpos"],[2,["2bHbcyDxJHJpF4cz0aKl5i"]],[1,0,398,0]],[17,"Square_Holder",["_name"],[2,["fcqc8za/FPXKblpXqBUdSU"]]],[14,["_lpos"],[2,["fcqc8za/FPXKblpXqBUdSU"]],[1,0,30,0]],[14,["_contentSize"],[2,["fb1v5cKHlK1ouNRSKjY4T5"]],[5,414,896]],[17,"MidPanel",["_name"],[2,["be/BJ2jGtBoYjUGoMnFRCo"]]],[14,["_lpos"],[2,["be/BJ2jGtBoYjUGoMnFRCo"]],[1,0,0,0]],[17,"Button_Play",["_name"],[2,["1dypAxc/5AFYHm8WxESVDL"]]],[14,["_lpos"],[2,["1dypAxc/5AFYHm8WxESVDL"]],[1,0,-243,0]],[14,["_lrot"],[2,["1dypAxc/5AFYHm8WxESVDL"]],[3,0,0,0.3826834323650899,0.9238795325112867]],[14,["_euler"],[2,["1dypAxc/5AFYHm8WxESVDL"]],[1,0,0,45.000000000000014]],[17,"BotPanel",["_name"],[2,["738isYwCdIQIlnsZPLtJRG"]]],[14,["_lpos"],[2,["738isYwCdIQIlnsZPLtJRG"]],[1,0,-398,0]],[14,["_contentSize"],[2,["40/IHCEfFBA5Hf2iMv1fSS"]],[5,414,896]],[17,"Content Holder_Rewards",["_name"],[2,["4cl5imHU5LX7DmMQPwqat4"]]],[14,["_lpos"],[2,["4cl5imHU5LX7DmMQPwqat4"]],[1,0,0,0]],[14,["_contentSize"],[2,["9fO72Wl9dP7p770oBmdz2K"]],[5,12.29,22.68]],[11,"Button_Ad",["_name"],-489],[5,["_lpos"],-490,[1,0,0,0]],[11,"Content Holder_Freeze",["_name"],-491],[5,["_lpos"],-492,[1,0,0,0]],[11,"BG Image",["_name"],-493],[5,["_lpos"],-494,[1,0,0,0]],[17,true,["_interactable"],[2,["515DCz5i1LIbf/mQFg2qJ/"]]],[11,"Text_Purchased Item",["_name"],-495],[5,["_lpos"],-496,[1,0,1,0]],[11,"Holder_Lines",["_name"],-497],[5,["_lpos"],-498,[1,0,-36.86,0]]]],[[71,["_enemyModels","0","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["7e5RAOazJDUoqdJyOb9q5f"]]],[71,["_enemyModels","1","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["02tfv4BbdAxpSCsGntWHOx"]]],[71,["_enemyModels","2","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["a86TWrORNDdonkl8tekAPI"]]],[71,["_enemyModels","3","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["ab+gkUD2pBFJNP5SgZltSD"]]],[71,["_enemyModels","4","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["29iYbQ/FJGBb/hqN0z9DZm"]]],[71,["_enemyModels","5","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["ebk8B9FqtJ56e1xPxl/Tpg"]]],[71,["_enemyModels","6","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["310L5OB6VHzbFd+EzwX1YG"]]],[71,["_enemyModels","7","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["5cKF4dTqVIJ5L7VSbllisq"]]],[71,["_enemyModels","8","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["1cE/3a3NhIspuSjA4NYPQj"]]],[71,["_enemyModels","9","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["ecTABl1IJJ1KhKpjMdPvkX"]]],[71,["_enemyModels","10","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["4aGaO5twNItJ9FFcSTgTAh"]]],[71,["_enemyModels","11","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["c0iyYl2rBHx5TfkU/oItpZ"]]],[71,["_enemyModels","12","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["5bIlpMottGHbAEAGkT0PlM"]]],[71,["_enemyModels","13","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["ccjJGYo+JJ3Zdhg0WkW3HB"]]],[71,["_enemyModels","14","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["f9xH5AXxtFdLZihQRnUi9e"]]],[71,["_enemyModels","15","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["c8sIcAK59EqJbrDB5pLFfn"]]],[71,["_enemyModels","16","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["f0XmGFRx9F74rNFCRis9jR"]]],[71,["_enemyModels","17","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["52LbepvlBDTZU7uCBwPrnh"]]],[71,["_enemyModels","18","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["39fj1OoStFnJ+G91QAvHk2"]]],[71,["_enemyModels","19","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["fdmaT7GbJBHqo2JsEOdVP5"]]],[71,["_enemyModels","20","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["8a8fEgx9FOVaZbVsegsAbV"]]],[71,["_enemyModels","21","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["54TnVpzZ1JxKQgwWdIkLZ+"]]],[71,["_enemyModels","22","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["3aSaHn47VG4LAW7+nTRFc6"]]],[71,["_enemyModels","23","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["1d8gqqvh9HnrYEbHds5dbn"]]],[71,["_enemyModels","24","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["26gvRVhA1NMojbSmcu0Ni3"]]],[71,["_enemyModels","25","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["f4bjzu+j1Lf5KG0Gxo3jIR"]]],[71,["_enemyModels","26","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["d6YcNMfGdIl7HbFCcdLOY0"]]],[71,["_enemyModels","27","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["8eaPRwQy9MWKNAx+nIaefe"]]],[71,["_enemyModels","28","enemyNode"],1,[2,["fcglxwqyJPLImoJ297eYFo"]],1,[2,["c7tyKdOsROLIgx/j5t56bv"]]],[89,["_activateCommonTab","0","target"],2,[2,["7362Z2cI5M+onEkzK+mZj2"]]],[89,["_activateCommonTab","1","target"],2,[2,["e42yyndwVO/aCmpTo4uG1N"]]],[89,["_activateTowersTab","0","target"],2,[2,["7362Z2cI5M+onEkzK+mZj2"]]],[89,["_activateTowersTab","1","target"],2,[2,["e42yyndwVO/aCmpTo4uG1N"]]],[89,["_commonColumns","0","nodes","0"],2,[2,["70wDt2VWFD16VzFvDwRYUS","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","0","nodes","1"],2,[2,["12TKHhc5VBtp/TmmEQHdUG","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","0","nodes","2"],2,[2,["10JdPBYMhGnZ7POjjFfsYp","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","0","nodes","3"],2,[2,["d3JBcK9n5CMKAvyx4MB1lS","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","0","nodes","4"],2,[2,["2bVHPZZ1RNJ6fidDqIWUxV","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","1","nodes","0"],2,[2,["30/wQAvnZPtIlQh+02+xvR","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","1","nodes","1"],2,[2,["19bXoDYZZMwIWZXL+JWh4K","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","1","nodes","2"],2,[2,["8dbz7ZnHtA9Knqi4FyY/lY","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","1","nodes","3"],2,[2,["99ZQUlZ7tEmKW7YuEmcHGg","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","1","nodes","4"],2,[2,["28dsWsrZRJsa1s8v2wwP01","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","2","nodes","0"],2,[2,["1dL964mdlLSpQJfrQ+8Kf3","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","2","nodes","1"],2,[2,["9a5mG4j9FHdrFfb/KI8evN","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","2","nodes","2"],2,[2,["c9a9b8rHlKD6gzFgvH6LuM","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","2","nodes","3"],2,[2,["81wIZ5/fZCKq2nc2h8aG/A","75a1vm5JJA+ohuNwq5URob"]]],[89,["_commonColumns","2","nodes","4"],2,[2,["edIDYcAodIpZMhXSxHy4a7","75a1vm5JJA+ohuNwq5URob"]]],[89,["_backButton"],2,[2,["d7jlzszTJE6LT11SWlXp7u"]]],[89,["_towerTabButton"],2,[2,["63ZKqYhbdDH62zpdPLShJi"]]],[89,["_commonTabButton"],2,[2,["0bZdeupMZH+aGv7jzSxkpI"]]],[89,["_resetUpgradesButton"],2,[2,["6dZWzsyptFIpCouE4rT1kz"]]],[89,["_commonConfirmationPanelNode"],2,[2,["03X1qSFq5D1q+bTyc0esLD"]]],[89,["_towersConfirmationPanelNode"],2,[2,["89KfShwWpLgbsnSJI63bnY"]]],[89,["_towerColumns","0","nodes","0"],2,[2,["d7Qi7A1tdH/LTTi6o0sKpj","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","1"],2,[2,["15DJ7jmq1Ae66WkKJeB5w1","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","2"],2,[2,["74FoDqeghE5JvREcQdepbY","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","3"],2,[2,["08YItQGcBFQpduqVLVCrtO","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","4"],2,[2,["8aYv3hX5FKB5nbxfplnPh8","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","5"],2,[2,["c4vzRLahNK5pcaIc4/EzI3","54x3LC6jNKF6d4tobLj//p"]]],[89,["_towerColumns","0","nodes","6"],2,[2,["78ZYB+NMNHz7TSPoxDnk9O","54x3LC6jNKF6d4tobLj//p"]]],[89,["_onGetCurrency","0","target"],2,[2,["29v7IVSbBP6ruZqbVhKPb6"]]]],67]],[80,"Holder_ShopList",33554432,[-503,-504,-505,-506,-507],[[9,-500,[1,"f1g3+kvQpGxp6SD4e+C4QV"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-501,[1,"52vv0Vc6JNVo94t48SfuSp"]],[247,2,2,6,-502,[1,"d0ZXgOgGdEzpYfWDS+qB7g"]]],[43,null,"13liXMX3JNvbKjgOn4hq30",225],[1,0,-42.87100000000001,0]],[80,"BackGround_Light Texture",33554432,[-511,-512,-513,-514,-515],[[9,-508,[1,"2e/meUhpRIurxBgFM4xw+I"],[5,414,732]],[172,45,100,100,1,-509,[1,"d58f1pQFpJ/7dmKNeRdoSU"]],[94,-510,[1,"6fcjsIjKdGIYaUd55kqOPI"]]],[43,null,"8d2fFPz1xOprzpl8p5Hf4l",80],[1,0,366,0]],[170,"Text_Title",33554432,[-521],[[[9,-516,[1,"67vq62yn9G+KLRWLmeIjY6"],[5,75.46,27.72]],-517,[179,1,4.140000000000015,-518,[1,"10+So3FshMCbCMd6G3jBs0"]],[96,-520,[1,"91ifmkSeVGb40IKkwLtuO1"],-519]],4,1,4,4],[43,null,"1eh3U1nbZDCq9P3IZmEoJN",83],[1,0,262,0]],[80,"Holder_ShopList",33554432,[-525,-526,-527,-528,-529],[[9,-522,[1,"0fuu0yma1IN4cpmIn6g+04"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-523,[1,"ef6dB7H2BMoq7JqxTbvV9r"]],[247,2,2,6,-524,[1,"85F80Aa0RDE54gE+6dgRj0"]]],[43,null,"adajZ3wIBCBY5vpCaI8gE6",195],[1,0,-42.87100000000001,0]],[80,"Holder_ShopList",33554432,[-533,-534,-535,-536,-537],[[9,-530,[1,"04hdTRvkpLPIJI+jg10+rb"],[5,120,402]],[200,45,71.87100000000001,-13.87100000000001,100,100,-531,[1,"ddX3I1rXlMSbKgPipSDvnU"]],[247,2,2,6,-532,[1,"c0X19pgmBDDK5LF74/cWuD"]]],[43,null,"44j1G6nOxDb4PNNH8yvIyU",211],[1,0,-42.87100000000001,0]],[702,"GameScene",[9,-550,-551,12,-552,-553,-554],[530,"ea591b11-25ba-4f13-b076-6bf7b8146203",[[71,["clickEvents","0","target"],19,[2,["515DCz5i1LIbf/mQFg2qJ/"]],19,[2,["4cl5imHU5LX7DmMQPwqat4"]]],[71,["_target"],19,[2,["515DCz5i1LIbf/mQFg2qJ/"]],19,[2,["a7WL99dbZAPr2YtBu3ZQco"]]]],[-538,-539,-540,-541,-542,-543,-544,-545,-546,-547,-548,-549,19]],[703,[704,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,1,1,1,1],[2,1,1,1,0.5208],[2,1,1,1,1]],[705,[4,4283190348],[0,1024,1024]],[706,false,467,468],[707],[708]]],[368,"Events","d9JFFoe6tMvKzxMlX0jW6S",25,[-555,-556,-557,-558,-559,-560,-561]],[497,"Rewards_Canvas",false,33554432,[13,-566,-567],[[122,-562,[5,414,896]],[563,-563],[572,45,1,-564],[574,-565]],[1,207,448,0]],[53,"Panel_Color",33554432,2,[21,14,-572,-573],[[47,-568,[1,"a8EiAae8hAr4bAVgrqDT7M"],[5,414,732],[0,0.5,0]],[108,0,-569,[1,"e0GtYBqSxFOpuGUS6Ywerd"],180],[378,44,-20,500,1,-570,[1,"3133zd/DZE8bNS2S8lHdcg"]],[168,-571,[1,"6bOcN6toRN3ZlBR9SlhpMG"]]],[43,null,"2dPvmSdyNCu6RNHSXPEq/P",181],[1,0,-468.005,0]],[522,"Holder_TowerUpgrade",false,33554432,28,[[22,-577,-578,-579,null],1,1,1,1,0],[[9,-574,[1,"faM7GPYs1DHJk9ULFhSSVF"],[5,360,560]],[57,-575,[1,"adfLPbvrRMeZcA1naWQIbR"]],[94,-576,[1,"fcPkjxj/tInbloirK8cEOW"]]],[43,null,"e42yyndwVO/aCmpTo4uG1N",178],[1,0,431.475,0]],[322,"Head Pivot",[-580,-581,-582,-583,-584,-585,-586],[43,null,"49dKoHWVZIcrRRKwHEnkqp",464],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[331,"Currency_Panel",33554432,4,[[null,-590,-591,-592,-593],0,1,1,1,1],[[9,-587,[1,"34FczWLOdFZqdJCV5kU1If"],[5,187.43,34]],[23,0,-588,[1,"7bLmzAwn9LcbXb5yH9G0oC"],[4,3366911],245],[261,1,1,14,14,4,-589,[1,"41g4p+6slAu7Q1jdePE8I/"]]],[43,null,"4dqtUMBJBKLr2wcycjkhLM",246],[1,0,-95.054,0]],[150,"Button_Yes",33554432,[-598,-599,-600],[[[9,-594,[1,"d8tz15hUZAGLICubJzFyBR"],[5,56,40]],[23,0,-595,[1,"99N3Jmf5VA2Zdr23zZ2I7f"],[4,4283033344],257],-596,[88,true,-597,[1,"94h3hJwYNMCoBdyOsGSVCM"],[258],259]],4,4,1,4],[43,null,"2bjbBobSxA0bKteyU0/xAz",260]],[150,"Button_No",33554432,[-605,-606,-607],[[[9,-601,[1,"95EY4JFSJJU4oZatLWCPHs"],[5,56,40]],[23,0,-602,[1,"8f+ZXLlgRGN58FfQHGTkMx"],[4,4283302143],268],-603,[88,true,-604,[1,"2ervYz+j5FM4JQqunSb7dc"],[269],270]],4,4,1,4],[43,null,"6d2y12U2hHG4zH3bL+Jfl5",271]],[150,"Button_Back",33554432,[-612,-613,-614],[[[9,-608,[1,"06cP1chqBG2be0/5B0iGHF"],[5,62,40]],[23,0,-609,[1,"fbVvm4iVBGgKSrhPEnIOCQ"],[4,4292724926],279],-610,[88,true,-611,[1,"6fkS47UzNGzoqEjrf2Ek6A"],[280],281]],4,4,1,4],[43,null,"ea0JIZy+xBNYytRZdPy89C",282]],[170,"Button_Back",33554432,[-619,-620,-621],[[[9,-615,[1,"53ai0tn6REmJPKY5xASrsW"],[5,62,40]],[23,0,-616,[1,"99mDOJL0pAQ6135ws3pjFw"],[4,4292724926],296],-617,[88,true,-618,[1,"41t9g7x5JCoJ4NqMe/j+3I"],[297],298]],4,4,1,4],[43,null,"4euq0G2oNCqYycL78F+XsU",299],[1,0,-90,0]],[252,"Tower Gun Head Pivot",[-622,-623,-624,-625,-626,-627,-628],[43,null,"a7hneHCgpOJ5Q/8o0KLfhe",370],[1,0,0.30000001192092896,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[252,"Head Pivot",[-629,-630,-631,-632,-633,-634,-635],[43,null,"ddyf7wlHpKuqt/eIJnVmMK",413],[1,0,0.3,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[498,"Stars_Holder",33554432,[-639,-640,-641],[[122,-636,[5,312,100]],[445,1,128,1,-637],[585,1,1,12,-638]],[1,0,-128,0]],[422,"Star_Outline 01",33554432,38,[-646,-647],[[122,-642,[5,96,96]],[393,0,-643,[4,4281532425],17],[343,false,-644],[317,-645]],[1,-108,-15.533,0],[3,0,0,0.5591929034707469,0.8290375725550416],[1,0,0,68]],[422,"Star_Outline 02",33554432,38,[-652,-653],[[122,-648,[5,96,96]],[393,0,-649,[4,4281532425],20],[343,false,-650],[317,-651]],[1,0,1.392,0],[3,0,0,0.3090169943749474,0.9510565162951535],[1,0,0,36]],[328,"Star_Outline 03",33554432,38,[-658,-659],[[122,-654,[5,96,96]],[393,0,-655,[4,4281532425],23],[343,false,-656],[317,-657]],[1,108,-14.376,0]],[367,"Button_Menu",33554432,[-665,-666],[[122,-660,[5,68,68]],[388,2,-663,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-662]],[4,4292269782],-661,35,36,37,38],[346,"GameScene_GoToMenu",-664]],[1,-65,90.995,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[367,"Button_PlayAgain",33554432,[-672,-673],[[122,-667,[5,68,68]],[388,2,-670,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-669]],[4,4292269782],-668,42,43,44,45],[346,"GameScene_ReplayLevel",-671]],[1,65,90.995,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[90,0,{},[332,"d2vYEIV9FA2ZrKggRnx1pJ",-684,[207,"cbcWiA6+5NgZ9s5ugv8Kr9",[[11,"P-TowerUpgrades-UI",["_name"],-676],[5,["_lpos"],-677,[1,207,448.00000000000006,0]],[5,["_lrot"],-678,[3,0,0,0,1]],[5,["_euler"],-679,[1,0,0,0]],[11,"Content Holder_TowerUpgrade",["_name"],-680],[5,["_lpos"],-681,[1,0,-110,0]],[11,"Pivot",["_name"],-682],[5,["_lpos"],-683,[1,76,71,0]]]],[[71,["_animator"],3,[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]],3,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[89,["_tierUpUpgrades","0","entryNode"],3,[2,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_tierUpUpgrades","1","entryNode"],3,[2,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_tierUpUpgrades","2","entryNode"],3,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_commonUpgrades","0","entryNode"],3,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[89,["_commonUpgrades","1","entryNode"],3,[2,["basO3xNKRMubx47MkKLOyR"]]],[89,["_showUpgradeInfo","0","target"],3,[2,["bb7Kak23hMTYfuoFKHjabu"]]],[89,["_setTierUpUI","0","target"],3,[2,["165POIGiVCTbJeF4ypPaek"]]],[89,["_setTierUpUI","1","target"],3,[2,["34GO02mHFBr7SAk+hQxhbP"]]],[89,["_setLevelUpUI","0","target"],3,[2,["165POIGiVCTbJeF4ypPaek"]]],[89,["_setLevelUpUI","1","target"],3,[2,["34GO02mHFBr7SAk+hQxhbP"]]],[71,["clickEvents","0","target"],3,[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],3,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[71,["_target"],3,[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],3,[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]]],[71,["clickEvents","0","target"],3,[2,["50hrJYbf9IHLRR1ePLEmnJ"]],3,[2,["basO3xNKRMubx47MkKLOyR"]]],[71,["clickEvents","0","target"],3,[2,["e0iQibPDNGYIKJsHwZFwIm"]],3,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[71,["_animator"],3,[2,["82+Qldi0dJcJTsSoTpzmOs"]],3,[2,["47yBIwvkZE2aGBAdlhkSNv"]]],[71,["_onEnable","0","target"],3,[2,["44hjLkOIxHkqZ37y3El6fN"]],3,[2,["175KhMRQRDzrwjR+Y/XD8F"]]],[71,["_onEnable","0","target"],3,[2,["5aPj7mhcBJsoJqrNFRjFCq"]],3,[2,["basO3xNKRMubx47MkKLOyR"]]],[71,["_animator"],3,[2,["99AQyBFexBdqAz+WiT48yy"]],3,[2,["56JKwaJhFDV5L2wgkKwUbU"]]],[89,["_onEventRaised","0","target"],3,[2,["c4JryQ715OxZEXyEuY811m"]]],[89,["_onEventRaised","0","target"],3,[2,["c4JryQ715OxZEXyEuY811m"]]],[67,["_button"],-674,3,[2,["50hrJYbf9IHLRR1ePLEmnJ"]]],[67,["_button"],-675,3,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[89,["_onEventRaised","1","target"],3,[2,["559OljkmVJbb40T1JglvS/"]]],[89,["_onEventRaised","1","target"],3,[2,["559OljkmVJbb40T1JglvS/"]]]],54]],[177,"New Node"],[360,"Towers Holder",8388608,[-688,-689,-690],[[9,-685,[1,"d5/n74qV9HAJU29fZtrXoX"],[5,0.8333333333333334,1.0833333333333333]],[200,45,5,-5,100,100,-686,[1,"c85llaHbZBsZ/ncu90wkGl"]],[306,true,true,-687,[1,"61cy0NQ5VBDpVP78+De16t"]]],[43,null,"b64X39hPtCZ7D7lfeTYliT",446],[1,0,27.5,200],[3,-3.0616169978683824e-17,0.8660254037844387,0.49999999999999994,5.3028761936245346e-17],[1,60,60,60],[1,-60,180,0]],[53,"Holder_Tower Stats",33554432,11,[-694,-695,-696],[[47,-691,[1,"1eRyDcMY5PvqU7BWrEmWbl"],[5,154,50],[0,1,0.5]],[248,1,1,32,-692,[1,"c44TBCdsBEZZfyuNwkGmBT"]],[154,0,-693,[1,"b070zEHPhK4IXcyjgY/Fv1"]]],[43,null,"51q2mQtBBONbWsqmwGu5cn",324],[1,149.412,-43,0]],[499,"Cheats",false,"caCbRdmw9IMI+2UoiX6yZl",25,[-698,-699,-700,-701,-702],[[709,-697]]],[30,0,{},12,[22,"d9LIHxHFhFXIOgqeR/0ow3",-707,[207,"5cLd8y4jxCerl1gQdm1CD2",[[11,"Waves",["_name"],-703],[5,["_lpos"],-704,[1,0,0,0]],[5,["_lrot"],-705,[3,0,0,0,1]],[5,["_euler"],-706,[1,0,0,0]]]],6]],[268,"On Play Next Level Listener",26,[-713,-714,-715,-716],[[353,"GameScene_PlayNextLevel",-712,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-708],[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-709],[8,"99672sUg5NFw4x7bEPAiyHE","activate",-710],[8,"326a1KkFqpHRqr1jwdngHKG","setNextLevel",-711]]]]],[500,"On Scene Finish Preloading",false,50,[[412,3,-718,[[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-717]]],[413,1,"GameScene",-719],[275,-720]]],[423,"On Scene Finish Preloading",false,[[412,3,-722,[[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-721]]],[413,1,"GameScene",-723],[275,-724]]],[423,"On Scene Finish Preloading",false,[[412,3,-726,[[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-725]]],[413,1,"MenuScene",-727],[275,-728]]],[161,"On Game Start with delay",26,[[339,1,5,-731,[[8,"51cbayfFYRI0b4PXBU6JCiq","raise",-729],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-730]]],[462,1,-732],[275,-733]]],[328,"TopPanel",33554432,13,[-736,38,-737],[[122,-734,[5,414,100]],[446,41,100,-735]],[1,0,398,0]],[328,"BotPanel",33554432,13,[18,42,43],[[122,-738,[5,414,100]],[446,44,100,-739]],[1,0,-398,0]],[287,"Button_Color",33554432,42,[-743],[[122,-740,[5,66,66]],[283,1,0,-741,[4,4294174947],33],[282,45,1,1,1,1,108,108,-742]]],[287,"Button_Color",33554432,43,[-747],[[122,-744,[5,66,66]],[283,1,0,-745,[4,4281556991],40],[282,45,1,1,1,1,108,108,-746]]],[368,"UI","37TVMmiIZG+YU5/xGRwq9X",25,[-748,-749,44,-750,19]],[53,"Collum_01",33554432,14,[-754,20],[[9,-751,[1,"32Y5V3byFKuqK+N7JXeznY"],[5,120,460]],[246,5,13.694,-13.694,99.99,-752,[1,"0cSqBZZl9D+oYP89TSl8md"]],[249,false,1,0,-753,[1,"f5cAvkOhtMGKKG1BDhv+6e"],219]],[43,null,"54WS7barRHmJ1LrGpDoA+c",220],[1,-120,-13.693999999999988,0]],[331,"Holder_ShopList (New)",33554432,29,[[10,-757,-758,null],1,1,1,0],[[48,-755,[1,"e4Q6D8tJJFgbcHyjwh0rF2"]],[117,17,60,-40,173,126.92099999999996,100,100,-756,[1,"f2iPXnlV1OHr0i7dB8mdh9"]]],[43,null,"b5e+hxCrpHW68OnBNt7IUQ",127],[1,0,57,0]],[83,"Left Side",33554432,10,[-761,-762,-763],[[47,-759,[1,"e7r2GeMo9Jw67LlIMZfbXr"],[5,180,260],[0,1,0]],[294,5,100,-760,[1,"0cevL0De5FppNWFghYjplh"]]],[43,null,"d5r9TGGClG04uw8ACFCoUm",97]],[361,"Right Side",33554432,10,[-766,-767,-768],[[47,-764,[1,"1egS9F8V5APY9dUN3aVGdy"],[5,180,260],[0,1,0]],[294,5,100,-765,[1,"57w1VphxtGP5rgdAdAantd"]]],[43,null,"40RWkfA+JDsJwEPQTShAVk",111],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[53,"Collum_02",33554432,14,[-772,23],[[9,-769,[1,"79NCyZnfxKB7LopVQ/7aJx"],[5,120,460]],[246,5,13.694,-13.694,99.99,-770,[1,"53DoZ3/UZI+rctXnxAnjoU"]],[249,false,1,0,-771,[1,"32Gy2rnztJA5Tml/RkxXvn"],196]],[43,null,"65YO3Ls5xAMqyClmBfkgxr",197],[1,2,-13.693999999999988,0]],[53,"Collum_03",33554432,14,[-776,24],[[9,-773,[1,"35V/ziLWRJBYUcVAXtFT8D"],[5,120,460]],[246,5,13.694,-13.694,99.99,-774,[1,"4ehzcld3VO3rCzoWJ/xbn2"]],[249,false,1,0,-775,[1,"adNiNly1tBn5+dhH5pTWIl"],212]],[43,null,"a5GjDUe49KpIVkVL391Xy9",213],[1,124,-13.693999999999988,0]],[369,"Head",[[30,[102,"Bullet Spawn Pivot",-777,[43,null,"c0pXUGaNZKwbAOwCAovM39",453],[1,0,0.135,-0.406]],-778,-779,-780],1,4,1,1,1],[43,null,"bfM6+LgF5HAI2BQvt7chGS",463],[1,0,0.4,0]],[80,"Panel Color",33554432,[-784,-785],[[9,-781,[1,"37AFTw6p1Cl4uICmfblduW"],[5,290,80]],[23,0,-782,[1,"40HJ5FrYVMYrl4hXIliHUP"],[4,4283302143],288],[168,-783,[1,"87aLHe+XhOV5diEczisIkO"]]],[43,null,"decb9bcU9IUIXQApjWKk5T",289],[1,0,-14.5,0]],[80,"Holder_Energy Cost",33554432,[-788,-789,-790],[[9,-786,[1,"44Imax/rpLxK9dC+HfHFYo"],[5,50,50]],[23,0,-787,[1,"93DemOaGZHEJZmhwSY8GSE"],[4,4282712119],335]],[43,null,"eaHLSMrv5BUIat6sqiGKsD",336],[1,11.263,27.002,0]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[2,["4d/LLVKgJfRaWh6CVtkvdN"]],[2,["06VFwTsJJRM4OSJg2XW4Q9"]],[2,["efp8IlO8deIZfWSlH1z7o0"]],[2,["424JMWZcNT+7LUIxhmggm+"]],[253,"Holder_Yes Feedback",false,33554432,[-792,-793,-794,-795],[[9,-791,[1,"efBR4Fl7tD9ZNjrExc7NwH"],[5,40,36]]],[43,null,"487Ibq+3FH/q+dmdPXnNmE",425]],[80,"Bar_Left",33554432,[-799,-800],[[9,-796,[1,"6faw+7QrRNeLz7AQGxDZSh"],[5,2,174]],[23,0,-797,[1,"ccxMB4qSpKirNmcPYwSIhB"],[4,4284216710],431],[258,5,-7,-7,172,1,-798,[1,"07ypDjeJRIaYDj0V3N8KE+"],11]],[43,null,"54IvC3S+JBNJ7wXlJl8IfE",432],[1,-170,70,0]],[80,"Bar_Right",33554432,[-804,-805],[[9,-801,[1,"4bv4hhEJpKn6pzG6YU67XS"],[5,2,174]],[23,0,-802,[1,"c84ayXa81KKbKRa0RghYdR"],[4,4284216710],437],[258,5,-7,-7,172,1,-803,[1,"c8WiK76IxNjob0biLnFHMK"],11]],[43,null,"ea4IrXmUBDo7GnM9reepxT",438],[1,170,70,0]],[268,"On Replay Level Listener",26,[-809,-810,52],[[353,"GameScene_ReplayLevel",-808,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-806],[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-807],[8,"99672sUg5NFw4x7bEPAiyHE","activate",52]]]]],[268,"On Go To Menu Listener",26,[-814,-815,53],[[353,"GameScene_GoToMenu",-813,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-811],[8,"ebaab2OBJ5OarmKfYyuWVeW","raise",-812],[8,"99672sUg5NFw4x7bEPAiyHE","activate",53]]]]],[268,"On Game Start",26,[-820],[[440,5,-818,[[8,"85ba8zO9clG9KMZhnWVluYT","startWave",49],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",-816],[8,"93f08a/C8BE67WCaBfvDFAN","log",-817]]],[275,-819]]],[368,"Temp","317YDVkRxEeIEUImgJQGj/",25,[27,-821,-822,-823]],[328,"Square_Holder",33554432,55,[-826,-827],[[255,-824],[445,1,-29.999999999999996,1,-825]],[1,0,30,0]],[518,"Text_VictoryDefeat",33554432,[[[122,-828,[5,184.26,113.4]],-829,[596,-831,-830]],4,1,4],[1,0,102.635,0]],[287,"Button_Color",33554432,18,[-834],[[122,-832,[5,108,108]],[283,1,0,-833,[4,4292928274],26]]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["0fJEdVoOpA/qcZPGFboeiN"]],[2,["feXYlDJrhOiIHGtymY3yxW"]],[2,["68bll21PNLdos7u2gIR3Y0"]],[30,0,null,20,[22,"75a1vm5JJA+ohuNwq5URob",-835,[60,"70wDt2VWFD16VzFvDwRYUS",null,[[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,true,["_debug"],[2,["9fkwbwsEJNtp1a9YblePmY"]]]]],226]],[83,"Line 01",33554432,62,[-838,-839],[[47,-836,[1,"01nKohP81MSqzuoch25Wr8"],[5,180,260],[0,1,0]],[128,45,100,100,-837,[1,"eew606MuJBNLpowW4901A7"]]],[43,null,"1a1W5s8t1HsZ2uTFYEXY2i",88]],[83,"Line 02",33554432,62,[-842,-843],[[47,-840,[1,"faVfzWDWdCZZDKnrZ7c5I3"],[5,180,260],[0,1,0]],[128,45,100,100,-841,[1,"45jRYe6yJIJqSIAQ6HeEHa"]]],[43,null,"fa2BeNCxdOkqyk+GqYGut3",93]],[83,"Line 01",33554432,63,[-846,-847],[[47,-844,[1,"7c5DUvpAhI/IpABkeBbQLc"],[5,180,260],[0,1,0]],[128,45,100,100,-845,[1,"45LlZzcIJO2byTPdpZ2yRQ"]]],[43,null,"96TRkWxkVMRoJqu2LxcZbk",102]],[83,"Line 02",33554432,63,[-850,-851],[[47,-848,[1,"78IKsUXgtPUKYHWHiwMyzt"],[5,180,260],[0,1,0]],[128,45,100,100,-849,[1,"a8gT0jIPFG5JbeVinWiwvJ"]]],[43,null,"30JqS38cNPlqXO1tRvrJk+",107]],[53,"Holder_TowerTabs",33554432,29,[6,7,8],[[48,-852,[1,"26upwnFQhKj5plbK8f8FRM"]]],[43,null,"21u58HYahI9529WWCwsjXr",175],[1,0,-230.39,0]],[53,"Text_Title",33554432,64,[-856],[[9,-853,[1,"794h5Xb+lA1Y5o9NX4anoL"],[5,71.41,37.8]],[70,"energy",30,30,30,false,-854,[1,"66gZu9LO5Lc7gHE/uweiJ4"],[4,4294765656],188],[179,1,13.099999999999994,-855,[1,"21bx/mQgdPn5wfmBrv1v/X"]]],[43,null,"54O84YE+ZD77CsJR4YWs9Q",189],[1,0,198,0]],[53,"Text_Title",33554432,65,[-860],[[9,-857,[1,"8dXYTxJ1xBD5LjCUeZhtKU"],[5,94.86,37.8]],[70,"recharge",30,30,30,false,-858,[1,"224nSdXpBGNK6zpXObiT5U"],[4,4294765656],204],[179,1,13.099999999999994,-859,[1,"68wDuoYsROs7QdHYUNLkI9"]]],[43,null,"73k6Di2YRER49CXSzEBrco",205],[1,0,198,0]],[53,"Text_Title",33554432,60,[-864],[[9,-861,[1,"987GnmLHBNyr1Cn91icFLE"],[5,31.48,37.8]],[70,"life",30,30,30,false,-862,[1,"a737Ae2JdB7ZyZ6ZHwVw1O"],[4,4294765656],217],[179,1,13.099999999999994,-863,[1,"2d7R8odc5ILJJGhtOWdKxO"]]],[43,null,"b2P6ihABdJ65BKsymgkopd",218],[1,0,198,0]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[80,"Tower Placement (PH)",33554432,[46],[[47,-865,[1,"80Md0XN9tKNqz5w6P0fZNK"],[5,50,65],[0,0.5,0]],[390,false,0,-866,[1,"49B5Sxo09HPZ3f6s4F90tM"],[4,4291112778],444],[380,1,-10,-867,[1,"14Z84JUQ5B36aVLlmLjGWD"],11]],[43,null,"54bU7/TFVLKZkth5EoLFxL",445],[1,12.308,97,0]],[53,"Holder_Panel",33554432,4,[11,74],[[9,-868,[1,"c00bDeemVFkoP3d/HkRGGd"],[5,360,180]],[154,0,-869,[1,"f5tnF9dwJL2qQDP0AsiyZu"]]],[43,null,"4dNPc2kF1A3rZdMayAKlW5",426],[1,0,6.447,0]],[159,"Overlay",false,33554432,4,[[9,-870,[1,"924Fe0JWVICZ+qZy0Zyds1"],[5,414,896.01]],[23,0,-871,[1,"adThZoApVFeIJPVIQB5/c+"],[4,3358785545],234],[379,45,-20,-20,-20,-20,40,36,1,-872,[1,"81JH53HMBMx7F02KpUU6GU"],2],[168,-873,[1,"dc4+nGma5HI4viVsvyMKik"]]],[43,null,"59uu6dCMFE4aiFjzrJDOLt",235]],[112,"Text_Value",33554432,31,[[[47,-874,[1,"f7xzqMzM1JtInZux0qiQ/R"],[5,29.05,40.32],[0,0,0.5]],-875,[96,-877,[1,"45kWQ1eo1BEYzar+fAt3KB"],-876]],4,1,4],[43,null,"c72tJF5YxE96F1c4SnsIqc",238],[1,3.9549999999999983,0.628,0]],[53,"AlreadyBought_Panel",33554432,4,[-881],[[9,-878,[1,"71MAMJbNtJBomKmarYD//C"],[5,145.76,34]],[23,0,-879,[1,"50MRT++D5FHaxiRVWPhvTZ"],[4,3366911],249],[261,1,1,14,14,4,-880,[1,"120GBg2Y9Fta2xwZ/yRHXn"]]],[43,null,"82qEZ6Z05GtbtPFe5HXOFw",250],[1,0,-95.054,0]],[197,"Holder_LackingMaxEnergy",false,33554432,4,[67,35],[[48,-882,[1,"bdigI5k7RNA49+HOQ3oQk+"]],[154,0,-883,[1,"5b1cbg9K9JpImYDDuRUZ5Y"]]],[43,null,"a4mrJrQN9HcaupKbt+T0Hs",300],[1,0,-149.583,0]],[112,"Text_Purchased Item",33554432,11,[[[47,-884,[1,"b9Gxug6+VGn7WpSV1DAp5I"],[5,190,30],[0,1,0.5]],-885,[96,-887,[1,"3bUqCPZMBH3bs52r7Hbt3e"],-886]],4,1,4],[43,null,"68/kp11xFJXLFnkZNdPK2u",310],[1,147.784,57,0]],[112,"Text_Item Info",33554432,11,[[[47,-888,[1,"f1WHbnultIoKWo++yG7uyn"],[5,226,56],[0,1,0.5]],-889,[96,-891,[1,"f6B9bHgTBMbKY21uiZre8d"],-890]],4,1,4],[43,null,"f6i5DXWT9Cx7gAZHIhv3jR",311],[1,150.492,12,0]],[330,"Text_Stats Number",33554432,[[[9,-892,[1,"7dbvqIRNNEhqNtYuh2+/Mp"],[5,16.34,22.68]],-893,[96,-895,[1,"2874AxyihA9qHekX89QY6Y"],-894]],4,1,4],[43,null,"6ct52JpWZLAKO8EDQD+9W7",330]],[53,"Stats 01",33554432,47,[-897,-898,111],[[9,-896,[1,"b9egFrgXdF5Zqn/cw1e6Mp"],[5,30,30]]],[43,null,"b662KMOoBPU4skzO7gPyLN",329],[1,-139,-5.182,0]],[53,"Stats 02",33554432,47,[-900,-901,-902],[[9,-899,[1,"03gSA0d2JHFZwDkr0w0m9r"],[5,30,30]]],[43,null,"0bY56c/3dJNokQxGn5uzR8",317],[1,-77,-5.182,0]],[134,"Text_Stats Number",33554432,113,[[[9,-903,[1,"feFlhINkRKrIIIAkg5789Q"],[5,12.63,22.68]],-904,[96,-906,[1,"0fLksR0Z9Dx7ayXTrZYn3m"],-905]],4,1,4],[43,null,"a3ntAPPFVAG4YJ6m3Yz7uv",316]],[53,"Stats 03",33554432,47,[-908,-909,-910],[[9,-907,[1,"8dNose/UlIx4DhNXhExRIQ"],[5,30,30]]],[43,null,"41v+3KbvxKOLDXPqvL4Lf6",323],[1,-15,-5.182,0]],[134,"Text_Stats Number",33554432,115,[[[9,-911,[1,"caU76sCXRFdbxZ2pmUIaRl"],[5,8.19,22.68]],-912,[96,-914,[1,"3f0kUo9gBF7a6dY0yHuKLX"],-913]],4,1,4],[43,null,"e8M/iDVY5EcpRd/lhtU2U5",322]],[134,"Text_Stats Number",33554432,68,[[[9,-915,[1,"20tRbesPZNhJmYTPjCgPPF"],[5,19.11,52.92]],-916,[96,-918,[1,"19oyL48rNE1LHXc+RhRHHz"],-917]],4,1,4],[43,null,"0chn2/IIpNHo6ifUibx9HW",337]],[2,["6bEJXm3ENa5ZOriZO+0Lz9"]],[2,["d2WuMenSdQdr89Jfpld4zw"]],[2,["754aHt1OpZU5MrqxM/Ip4m"]],[2,["1bEwzooBRYiLITAV26DhPq"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[2,["93NMATgvJXN5P2Z0Pbx6xd"]],[2,["b8JcZpYRhbA7dBnVFp97b+"]],[2,["76kmy9MSZU7qIHreg7REJV"]],[2,["6ba5eX4SReyqm+Vbwgfquh"]],[2,["33sM9enERVxYZcocgwSPwR"]],[2,["a6UoiMmTtU6YsbaNPx5rqf"]],[2,["bbqAjalhlRdoiOW0dhSoUC"]],[2,["27Yce2+45c87fcrQ+S23Kt"]],[2,["9aoAAYJKJR56nsyDVR3xr1"]],[2,["12sIxAd4xbv59W3ANKj2X7"]],[2,["a8rRRSGbdZ75rtdYdCxXvt"]],[2,["19dqAvhYZW66LFXyVsSUYV"]],[2,["c3aOBtjPNU96Ex7+KDGHdh"]],[2,["71Cqetuz1TIrfKXzSRo+z5"]],[161,"Defeat",48,[[291,68,-920,[[8,"51cbayfFYRI0b4PXBU6JCiq","raise",-919]]],[462,4,-921],[300,"Defeat - Press D",-922]]],[424,"Increase",[[458,1,"1",-923],[291,49,-925,[[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-924]]],[300,"Increase Time Scale - Press 1",-926]]],[424,"Decrease",[[458,2,"1",-927],[291,50,-929,[[8,"eb61d1BRKpDnpWImZxs1KwG","raise",-928]]],[300,"Decrease Time Scale - Press 2",-930]]],[161,"Freeze",48,[[291,70,-932,[[8,"a2b25EHeuNHtrhlTfnn9xoq","raise",-931]]],[346,"RequestBonus",-933],[300,"Use Freeze - Press f",-934]]],[501,"On Start","66ETBFXUFPEL/k7STqv5fs",25,[-938,-939],[[608,-937,[[8,"0ca47t6TKlPq7GfoQTtu5fu","getCurrentLevelData",-935],[8,"ac879rTendCEbpZWFz/jexs","playSFX",-936]]]]],[30,0,{},12,[22,"e8925zNxNCiI5CO2GAh1dK",-944,[207,"a993SC1X1KBKGmijL7hxg3",[[11,"Pathfinder",["_name"],-940],[5,["_lpos"],-941,[1,0,0,0]],[5,["_lrot"],-942,[3,0,0,0,1]],[5,["_euler"],-943,[1,0,0,0]]]],12]],[2,["640VKea5NIK4USuLAyLBs1"]],[30,0,null,12,[22,"485iyaahFDNIyx781avzqz",-949,[207,"b7OzExvKNPt4g7TSG2GVr+",[[11,"Game Victory Controller",["_name"],-945],[5,["_lpos"],-946,[1,0,0,0]],[5,["_lrot"],-947,[3,0,0,0,1]],[5,["_euler"],-948,[1,0,0,0]]]],5]],[2,["485iyaahFDNIyx781avzqz"]],[2,["d9LIHxHFhFXIOgqeR/0ow3"]],[2,["e7x73SDh9MfZgQfJSXZT9u"]],[30,0,null,12,[22,"6e1KAM02FA0aLvlHvC21gw",-954,[207,"14iq2DlihOoogQDCiSTdOk",[[11,"LevelConstructor",["_name"],-950],[5,["_lpos"],-951,[1,0,0,0]],[5,["_lrot"],-952,[3,0,0,0,1]],[5,["_euler"],-953,[1,0,0,0]]]],8]],[2,["6e1KAM02FA0aLvlHvC21gw"]],[30,0,null,12,[22,"984XA+aJRLtqRQQNLDETJ9",-959,[207,"8dgOQaXQ1IrLz9AInRcKfK",[[11,"P-EnergySystem",["_name"],-955],[5,["_lpos"],-956,[1,0,0,0]],[5,["_lrot"],-957,[3,0,0,0,1]],[5,["_euler"],-958,[1,0,0,0]]]],9]],[2,["984XA+aJRLtqRQQNLDETJ9"]],[30,0,null,12,[22,"99QFVlgAJEv6eNRQXbLkNr",-964,[207,"a06664lKZEHbLA3sK9fGRG",[[11,"P-TutorialController",["_name"],-960],[5,["_lpos"],-961,[1,0,0,0]],[5,["_lrot"],-962,[3,0,0,0,1]],[5,["_euler"],-963,[1,0,0,0]]]],10]],[2,["99QFVlgAJEv6eNRQXbLkNr"]],[2,["80fcPs02lOuKj5k9FDAJ+8"]],[2,["e8925zNxNCiI5CO2GAh1dK"]],[269,"Load Game Scene",33554432,50,[[255,-965],[414,1.5,2,"GameScene",-966]],[1,207,448,0]],[269,"Load Game Scene",33554432,77,[[255,-967],[414,1.5,2,"GameScene",-968]],[1,207,448,0]],[269,"Load Game Scene",33554432,78,[[255,-969],[414,1.5,2,"MenuScene",-970]],[1,207,448,0]],[288,"Star_Icon",33554432,39,[[122,-971,[5,84,84]],[345,0,-972,15],[282,45,6,6,6,6,92,92,-973]]],[288,"Star_Icon",33554432,40,[[122,-974,[5,84,84]],[345,0,-975,18],[282,45,6,6,6,6,92,92,-976]]],[288,"Star_Icon",33554432,41,[[122,-977,[5,84,84]],[345,0,-978,21],[282,45,6,6,6,6,92,92,-979]]],[287,"MidPanel",33554432,13,[82],[[122,-980,[5,414,896]],[573,45,100,100,-981]]],[269,"Outline",33554432,57,[[122,-982,[5,66,66]],[283,1,0,-983,[4,4294174947],32],[282,45,-6,6,6,-6,108,108,-984]],[1,-6,-6,0]],[269,"Outline",33554432,58,[[122,-985,[5,66,66]],[283,1,0,-986,[4,4281556991],39],[282,45,-6,6,6,-6,108,108,-987]],[1,-6,-6,0]],[502,"Game Flow",33554432,[-989,-990],[[255,-988]]],[30,0,{},59,[332,"c46/YsCPVOJYA4mWEpNYRx",-998,[207,"5bVhYb4RRKk5rGHE0TyHUL",[[11,"P-TowerConstruction-UI",["_name"],-992],[5,["_lpos"],-993,[1,207,447.99999999999994,0]],[5,["_lrot"],-994,[3,0,0,0,1]],[5,["_euler"],-995,[1,0,0,0]],[11,"Art",["_name"],-996],[5,["_lpos"],-997,[1,0,0,0]]]],[[89,["_animator"],5,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[89,["_entries","0","entryNode"],5,[2,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_entries","1","entryNode"],5,[2,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_entries","2","entryNode"],5,[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[89,["_showTowerInfo","1","target"],5,[2,["bb7Kak23hMTYfuoFKHjabu"]]],[71,["_animator"],5,[2,["ffZ2Ct4zBH+Zt94rHKmSpg"]],5,[2,["f13UGmbg5KLrhluQFmxr/w"]]],[71,["clickEvents","0","target"],5,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]],5,[2,["559OljkmVJbb40T1JglvS/"]]],[67,["_button"],-991,5,[2,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[89,["_onEventRaised","0","target"],5,[2,["559OljkmVJbb40T1JglvS/"]]],[89,["_onEventRaised","0","target"],5,[2,["559OljkmVJbb40T1JglvS/"]]]],46]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["8bBj36fMNOUZFpmts6EkfF"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["d2vYEIV9FA2ZrKggRnx1pJ"]],[366,"Text_+",33554432,[[9,-999,[1,"d60lqCvyBOV51j5Yq5uq1K"],[5,15.38,34.239999999999995]],[70,"+",24,24,24,false,-1000,[1,"4bqh9sDHhGzopYpFv+F8KY"],[4,4287102766],56],[400,-1001,[1,"26pVjKDeBKJquFLBwrT5zf"],[4,4282974275]]],[372,"9eOM8cT8tD/KTEb2GtywTH",44,57],[1,-18.862,-0.695,0]],[2,["46k0m6lkdE7LjR/vInpkl2"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["8bBj36fMNOUZFpmts6EkfF"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["78bCuqtM5FvINnH01nOP6N"]],[2,["c6vKOiB3JG7pMlMy/WnSzq"]],[41,"Horizontal",33554432,93,[[47,-1002,[1,"dbTXBQ6ZdF1oJ7cr5laqSw"],[5,64,2],[0,1,0.5]],[23,0,-1003,[1,"b0CFEAtG1KGLcT8a99cMI1"],[4,4292928274],84]],[43,null,"73eTe0T3FP2ZXSxJy3TwFy",85],[1,0,226,0]],[85,"Vertical",33554432,93,[[47,-1004,[1,"d7KZDIxDlAcoun64rrz+52"],[5,80,2],[0,1,0.5]],[23,0,-1005,[1,"30Oi6HzFhFeJRaEuIKz/zy"],[4,4292928274],86]],[43,null,"c4CaBKQ0NJsLeGq+FGVN7Y",87],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,94,[[47,-1006,[1,"4dbR5MKEJLzIHfjbcl/51C"],[5,48,2],[0,1,0.5]],[23,0,-1007,[1,"a9bxUy7rlNiojwo2y4tO1N"],[4,4292928274],89]],[43,null,"b5zICNYD5IzJ+QrmEpOcR7",90],[1,-90,120,0]],[85,"Vertical",33554432,94,[[47,-1008,[1,"61q/BoXa9DYoACXOjZ6JYO"],[5,98,2],[0,1,0.5]],[23,0,-1009,[1,"97ICXQC29AkrmJ75D+piQJ"],[4,4292928274],91]],[43,null,"5atNgIbtBNxL9SuGH2f/rX",92],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,62,[-1012],[[47,-1010,[1,"f2lmoaF3NAcp6ROm0hStS2"],[5,180,260],[0,1,0]],[128,45,100,100,-1011,[1,"cbFabPmVBAnKwb0nxdXV6H"]]],[43,null,"10mEgFgkBNW6Tb3i1KrDlI",96]],[85,"Vertical",33554432,184,[[47,-1013,[1,"3ekgIruYJN45LE3+6Z9yfY"],[5,71,2],[0,1,0.5]],[23,0,-1014,[1,"00yYzFVIFGNJZSDK5RqkC7"],[4,4292928274],94]],[43,null,"9589XdOKxFx6zgT5VoYbuD",95],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,95,[[47,-1015,[1,"ecH+IRScxEm5h0ZDzdQdyE"],[5,64,2],[0,1,0.5]],[23,0,-1016,[1,"4eV0A/hSVKZrSJsXgdMgI9"],[4,4292928274],98]],[43,null,"aft/GfD/pHgoVO8VL1ezWB",99],[1,0,226,0]],[85,"Vertical",33554432,95,[[47,-1017,[1,"594zBj8dlMubIm9DrTm1LG"],[5,80,2],[0,1,0.5]],[23,0,-1018,[1,"e5y1oIqHBKTJDEd+GUmiVD"],[4,4292928274],100]],[43,null,"04zXata2ZMKIz4Z3qUoGRi",101],[1,-63,227,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[41,"Horizontal",33554432,96,[[47,-1019,[1,"22Vmg3619IrpSGI0hmdZL6"],[5,48,2],[0,1,0.5]],[23,0,-1020,[1,"7bVXjryiVJEJbNg+WC0AcQ"],[4,4292928274],103]],[43,null,"f45DZbNgBJeIqKBWB2pT9j",104],[1,-90,120,0]],[85,"Vertical",33554432,96,[[47,-1021,[1,"b92J///nVJ7b6rMQzvNin9"],[5,98,2],[0,1,0.5]],[23,0,-1022,[1,"433hithXNA8JwaTLt2O/kf"],[4,4292928274],105]],[43,null,"a7/FFYvCpOwLAMtQ2dKpZo",106],[1,-138.5,121,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[83,"Line 03",33554432,63,[-1025],[[47,-1023,[1,"f54JukNKJJ0Lr9KmkSVLYY"],[5,180,260],[0,1,0]],[128,45,100,100,-1024,[1,"00NMD+7t1Fsac9NGagOCJo"]]],[43,null,"d2YFTNTk9J6Is5msZ9YSIC",110]],[85,"Vertical",33554432,190,[[47,-1026,[1,"bbgTdt/cpAQLzXLwQWUCtM"],[5,71,2],[0,1,0.5]],[23,0,-1027,[1,"b2GhoLHvhAEoT/o+Ud5haM"],[4,4292928274],108]],[43,null,"0dcrEpS31NrpOyDkWE4y8Q",109],[1,-63.5,94,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[78,"Panel_Color",33554432,6,[[9,-1028,[1,"d8WZhKUxFBmpOfrLz+J1zz"],[5,50,50]],[23,0,-1029,[1,"b2XVlfquJPO6fvbckOMdPU"],[4,4292928274],128]],[43,null,"a68qp4fWJAbI//7O3LYDPg",129],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,7,[[9,-1030,[1,"70qa+4AFhN2YXHNF83SJOA"],[5,50,50]],[23,0,-1031,[1,"d9vxvAagxMqJ0sq/4Q6q8u"],[4,4292928274],140]],[43,null,"acuabYWKlNm5l3FYnSFZay",141],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,7,[[9,-1032,[1,"edphJ7W9dCL7t6/dgz7SZK"],[5,54,54]],[46,1,0,-1033,[1,"8frlo8Xx9IU4aWuKzORQVX"],[4,2028004114],144],[117,45,13,13,13,13,64,64,-1034,[1,"1ckxpUxM5OXYgK0KLEQLQp"]]],[43,null,"6cZeF+qn5BlaCt6CC7SRvA",145],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,7,[[9,-1035,[1,"b6DeDdMzdChZkmlQW/IJJf"],[5,58,58]],[46,1,0,-1036,[1,"6elm++XwxBvYXWPBJYZxNd"],[4,1021371154],146],[117,45,11,11,11,11,68,68,-1037,[1,"f4QrPU081Jf6/n+7MGmHok"]]],[43,null,"92aRsQiYBBGYSK0rA48sAS",147],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Panel_Color",33554432,8,[[9,-1038,[1,"8bgUFgCt1BcIsw3mQAVECk"],[5,50,50]],[23,0,-1039,[1,"c0E5atT+dBCZKy7i5f49qA"],[4,4292928274],150]],[43,null,"f2cF3zPXNJaLDqv2QWBmOU",151],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[53,"Separator 1",33554432,14,[-1042],[[47,-1040,[1,"63qLMfhsxNm5RviHJA2fhx"],[5,2,450],[0,0.5,1]],[23,0,-1041,[1,"32uhArh8BCH4QWdXRyUqeM"],[4,4289235857],184]],[43,null,"3bm5EBHC5FaZrWAMgguu5R",185],[1,-59,194.501,0]],[41,"Square Top",33554432,197,[[9,-1043,[1,"f0ZBLSdNhJELV/F/bJNvkb"],[5,2,2]],[23,0,-1044,[1,"b6bY2oPKNOGLbteYvNJCZZ"],[4,4289235857],182],[179,1,-6,-1045,[1,"ceeusgRxVMc61U+Ww9bHSd"]]],[43,null,"fadEvppatIrI0QhEIXXK6y",183],[1,0,5,0]],[53,"Separator 2",33554432,14,[-1048],[[47,-1046,[1,"49ynJ1AwtBCILqW4zkhLTj"],[5,2,450],[0,0.5,1]],[23,0,-1047,[1,"fdfUKDUINI2IOnpuAvDuBN"],[4,4289235857],200]],[43,null,"6cOefGYZRPrbYFpYJFU8cL",201],[1,63,194.501,0]],[41,"Square Top",33554432,199,[[9,-1049,[1,"19XmPpuihHRYxY4beXnVcz"],[5,2,2]],[23,0,-1050,[1,"f5nDAn11BKbIMP4X7f2W8L"],[4,4289235857],198],[179,1,-6,-1051,[1,"14YsizpZZFUaN4+V+3vHDP"]]],[43,null,"0eRPKgcidPgIjObDFxmKMT",199],[1,0,5,0]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,null,30,[22,"71Cqetuz1TIrfKXzSRo+z5",-1052,[208,"1ftIdeGzlMVJQjbR6+giI+",null,[[75,[2,["a0vA4SVVBXN5xQ94MS7y5I"]],[[202,[1,"3fHBaiS2BMxqVyKQWK+8OB"]],[199,[1,"8dt5eRvnpAGIomK1JE/H3N"]]]]],[[11,"SM_TowerCanonBody_01",["_name"],136],[5,["_lpos"],136,[1,0,0,0]],[5,["_lrot"],136,[3,0,0,0,1]],[5,["_euler"],136,[1,0,0,0]],[35,["_materials","0"],[2,["d9wgbH4UlZC7nUms8aIXK/"]],466],[17,8388608,["_layer"],[2,["a0vA4SVVBXN5xQ94MS7y5I"]]],[11,false,["_active"],136]]],465]],[197,"Holder_Tower",false,33554432,11,[103,68],[[9,-1053,[1,"04tUid4jdEBJrV6K2OJTr0"],[5,0,0]]],[43,null,"a9DPxrPehNga8Wb4LPvvLV",443],[1,-132,-71,0]],[53,"Icon_Currency",33554432,31,[-1056],[[9,-1054,[1,"78CCWb191BJIzZfrySIVfc"],[5,26,26]],[23,0,-1055,[1,"22O0usQ8FOHLEdUXrIw+MF"],[4,4294765656],241]],[43,null,"47Qe7aVr5PiLFwfgRa11bw",242],[1,50.004999999999995,0.785,0]],[33,"Icon",33554432,206,[[9,-1057,[1,"65FyjFxoNM/L7hVyxnQXBb"],[5,24,24]],[108,0,-1058,[1,"c1puzLQ3ZE0oeQT+WQFFnQ"],239],[117,45,1,1,1,1,40,36,-1059,[1,"f7M46D6g1MEqYoJrzLQart"]]],[43,null,"6aVvYl7FBG8aUifflqt1B9",240]],[41,"Text_Stats Name",33554432,113,[[9,-1060,[1,"21UJwCbBlPKYamjxTaFv/Y"],[5,28.259999999999998,16.58]],[181,"speed",14,14,13.95,false,false,-1061,[1,"4a/3aKBElB/qyR3SBvN9Qd"],[4,4282187811],312],[191,0.1,-1062,[1,"83BnxNRZlHu75JwcW3A/Gm"],[4,4282187811]]],[43,null,"ceqss1009DV6D3u24crGcj",313],[1,0,22,0]],[41,"Text_Stats Name",33554432,115,[[9,-1063,[1,"25X81WD+pI0av2UyulZLu3"],[5,28.05,16.58]],[181,"range",14,14,13.95,false,false,-1064,[1,"721zqqgA5Kg5xqMwKtB/ZM"],[4,4282187811],318],[191,0.1,-1065,[1,"9dT34EwFJFW6gfATitlMFK"],[4,4282187811]]],[43,null,"a7tHQgvvtN1a+1hiHxpp4Y",319],[1,0,22,0]],[41,"Text_Stats Name",33554432,112,[[9,-1066,[1,"fabEz7cxpHQak3qtPX4V7K"],[5,35.67,16.58]],[181," damage ",14,14,13.95,false,false,-1067,[1,"85VXw/33VOq4xqxFnrr9E+"],[4,4282187811],325],[191,0.1,-1068,[1,"50jJ8fN2JGFo1qa+Rmm6LY"],[4,4282187811]]],[43,null,"83g4veuLZMuLbbU/2ymw+O",326],[1,0,22,0]],[41,"Text_Stats Name",33554432,68,[[9,-1069,[1,"22v1C6JmhIx7jig4/eXnT5"],[5,62.730000000000004,16.58]],[181," energy cost ",14,14,13.95,false,false,-1070,[1,"dekFkAvWxKb4nEvspyDiGE"],[4,4282187811],331],[191,0.1,-1071,[1,"61yvZ7aE5G7JmLYxb69K0T"],[4,4282187811]]],[43,null,"8b8/UWiKNN9Jwy0k90rbQW",332],[1,0,36.079,0]],[30,0,null,36,[22,"1bEwzooBRYiLITAV26DhPq",-1072,[60,"d1ZxISFxtJuqu74De9Ow5w",null,[[11,"SM_TowerGunBody_01",["_name"],121],[5,["_lpos"],121,[1,0,0,0]],[5,["_lrot"],121,[3,0,0,0,1]],[5,["_euler"],121,[1,0,0,0]],[35,["_materials","0"],[2,["eee7bsTeFUS4J0Fkyz/23b"]],372],[11,false,["_active"],121]]],371]],[254,"Head Tower Gun",[[36,[362,"Bullet Spawn Position",32,-1073,[43,null,"40mOz5O+9L25Orebor+dbE",346],[1,0,0.565,-0.45]],-1074],1,4,1],[43,null,"8eDDkT1bJI8b9AFGi6q+bT",357]],[30,0,null,36,[22,"4d/LLVKgJfRaWh6CVtkvdN",-1075,[60,"d1381ttidPj4LofnQtD2v8",null,[[11,"SM_Tower0MG2Body_01",["_name"],70],[5,["_lpos"],70,[1,0,0,0]],[5,["_lrot"],70,[3,0,0,0,1]],[5,["_euler"],70,[1,0,0,0]],[35,["_materials","0"],[2,["91rnZr2NlU+5mkmycELrbU"]],359],[11,false,["_active"],70],[11,8388608,["_layer"],70],[17,8388608,["_layer"],[2,["1bNv8OFqZfVYpfEynFuksV"]]]]],358]],[30,0,null,36,[22,"6bEJXm3ENa5ZOriZO+0Lz9",-1076,[60,"94/1eMiGdKn4TWyFhEIduk",null,[[11,"SM_TowerBullziBody_01",["_name"],118],[5,["_lpos"],118,[1,0,0,0]],[5,["_lrot"],118,[3,0,0,0,1]],[5,["_euler"],118,[1,0,0,0]],[35,["_materials","0"],[2,["853BuGPRRQ2oL14CCvM0kL"]],361],[11,false,["_active"],118]]],360]],[30,0,null,36,[22,"06VFwTsJJRM4OSJg2XW4Q9",-1077,[60,"81l3gj5E5Ks5brGsH6SdSe",null,[[11,"SM_Tower0MG4Body_01",["_name"],71],[5,["_lpos"],71,[1,0,0,0]],[5,["_lrot"],71,[3,0,0,0,1]],[5,["_euler"],71,[1,0,0,0]],[35,["_materials","0"],[2,["9bOQ2QYGtZs4WzqtGYB9n9"]],363],[11,false,["_active"],71],[11,8388608,["_layer"],71],[17,8388608,["_layer"],[2,["26PODSVIdRU55mar2WcIzo"]]]]],362]],[30,0,null,36,[22,"efp8IlO8deIZfWSlH1z7o0",-1078,[208,"43eEVT+8tEQYD/OxzqORse",null,[[75,[2,["3aIYRFdwZW1ITWY1VGXMEK"]],[[202,[1,"87m8SGce9FF6ypHZus4AxJ"]],[199,[1,"68El6n6mRDaI/OUa3GOgz4"]]]]],[[11,"SM_Tower3MGvBody_01",["_name"],72],[5,["_lpos"],72,[1,0,0,0]],[5,["_lrot"],72,[3,0,0,0,1]],[5,["_euler"],72,[1,0,0,0]],[35,["_materials","0"],[2,["49Ry8eFLhb25C1Q8wGk6C1"]],365],[11,false,["_active"],72],[11,8388608,["_layer"],72],[17,8388608,["_layer"],[2,["3aIYRFdwZW1ITWY1VGXMEK"]]]]],364]],[30,0,null,36,[22,"d2WuMenSdQdr89Jfpld4zw",-1079,[60,"93cC2joZ5BLbEPQnhOPl0M",null,[[11,"SM_TowerTunnelerBody_01",["_name"],119],[5,["_lpos"],119,[1,0,0,0]],[5,["_lrot"],119,[3,0,0,0,1]],[5,["_euler"],119,[1,0,0,0]],[35,["_materials","0"],[2,["9dDxbuCdVYVYsfEinJuqgr"]],367],[11,false,["_active"],119]]],366]],[30,0,null,36,[22,"754aHt1OpZU5MrqxM/Ip4m",-1080,[60,"89xmM7X9NPwrg7Js+eu/2Q",null,[[11,"SM_Tower01HKOBody_01",["_name"],120],[5,["_lpos"],120,[1,0,0,0]],[5,["_lrot"],120,[3,0,0,0,1]],[5,["_euler"],120,[1,0,0,0]],[35,["_materials","0"],[2,["46S3F1J79Rz4XvfNv5iTfa"]],369],[11,false,["_active"],120]]],368]],[30,0,null,30,[22,"424JMWZcNT+7LUIxhmggm+",-1081,[60,"d6F84ycKtBGqhc+jIeXEhq",null,[[11,"SM_TowerSmash3RBody_01",["_name"],73],[5,["_lpos"],73,[1,0,0,0]],[5,["_lrot"],73,[3,0,0,0,1]],[5,["_euler"],73,[1,0,0,0]],[35,["_materials","0"],[2,["6dld1XsrhbprQRWAgl+86p"]],378],[11,false,["_active"],73],[5,["_lscale"],73,[1,1,1,1]]]],377]],[30,0,null,30,[22,"93NMATgvJXN5P2Z0Pbx6xd",-1082,[60,"0e9y8RnrlJEpwcIOqmzkAB",null,[[11,"SM_TowerCometTBody_01",["_name"],123],[5,["_lpos"],123,[1,0,0,0]],[5,["_lrot"],123,[3,0,0,0,1]],[5,["_euler"],123,[1,0,0,0]],[35,["_materials","0"],[2,["36LCcIeKVRp7Mac4l4WlzY"]],380],[11,false,["_active"],123]]],379]],[30,0,null,30,[22,"b8JcZpYRhbA7dBnVFp97b+",-1083,[60,"28QkawEipOYI0zm/bTlmbT",null,[[11,"SM_TowerS4RBody_01",["_name"],124],[5,["_lpos"],124,[1,0,0,0]],[5,["_lrot"],124,[3,0,0,0,1]],[5,["_euler"],124,[1,0,0,0]],[35,["_materials","0"],[2,["aa2p+GekNcwr3d84smoPpV"]],382],[11,false,["_active"],124]]],381]],[30,0,null,30,[22,"76kmy9MSZU7qIHreg7REJV",-1084,[60,"ba3PKsvgNKZo+4qM2y+dFN",null,[[11,"SM_TowerH311Body_01",["_name"],125],[5,["_lpos"],125,[1,0,0,0]],[5,["_lrot"],125,[3,0,0,0,1]],[5,["_euler"],125,[1,0,0,0]],[35,["_materials","0"],[2,["d5Ph66/6xbPK4Q72/PB8zz"]],384],[11,false,["_active"],125]]],383]],[30,0,null,30,[22,"6ba5eX4SReyqm+Vbwgfquh",-1085,[60,"14C73SQqpO9KiS7KLdiNu2",null,[[11,"SM_TowerMeteorUBody_01",["_name"],126],[5,["_lpos"],126,[1,0,0,0]],[5,["_lrot"],126,[3,0,0,0,1]],[5,["_euler"],126,[1,0,0,0]],[35,["_materials","0"],[2,["2aeozPTBpe75ML5ovX4gHo"]],386],[11,false,["_active"],126]]],385]],[30,0,null,30,[22,"33sM9enERVxYZcocgwSPwR",-1086,[60,"00QNlygFBFULV5JiqJ5/Vw",null,[[11,"SM_TowerStarfallBody_01",["_name"],127],[5,["_lpos"],127,[1,0,0,0]],[5,["_lrot"],127,[3,0,0,0,1]],[5,["_euler"],127,[1,0,0,0]],[35,["_materials","0"],[2,["c2i6M6mIdSAJVEUjqztCnG"]],388],[11,false,["_active"],127]]],387]],[30,0,null,37,[22,"c3aOBtjPNU96Ex7+KDGHdh",-1087,[60,"27wRKeh1BOvomEOVBUv/Kt",null,[[11,"SM_TowerLaserBody_01",["_name"],135],[5,["_lpos"],135,[1,0,0,0]],[5,["_lrot"],135,[3,0,0,0,1]],[5,["_euler"],135,[1,0,0,0]],[35,["_materials","0"],[2,["c79Byda9tSsLPjCdZFbGni"]],415],[11,false,["_active"],135]]],414]],[254,"Head",[[37,[102,"Laser Beam Spawn Pivot",-1088,[43,null,"d96S1V1VZApJ10FJrlFriB",398],[1,0,0.598,-0.667]],[102,"Pulsar Spawn Pivot",-1089,[43,null,"cdMItmcTNF1ocMh+ONkWsp",399],[1,0,0.2,0]]],1,4,4],[43,null,"ab9cn+9/NIGavz5Ap43o7D",400]],[30,0,null,37,[22,"bbqAjalhlRdoiOW0dhSoUC",-1090,[60,"73CzTQLxtBjY868RL1xsPp",null,[[11,"SM_TowerPuls3rBody_01",["_name"],129],[5,["_lpos"],129,[1,0,0,0]],[5,["_lrot"],129,[3,0,0,0,1]],[5,["_euler"],129,[1,0,0,0]],[35,["_materials","0"],[2,["1fCLEjPmBTW6Y7Y/vYCPCL"]],402],[11,false,["_active"],129]]],401]],[30,0,null,37,[22,"27Yce2+45c87fcrQ+S23Kt",-1091,[60,"ecFxiBbjBCjJJZT94mdmgU",null,[[11,"SM_TowerPulsarBody_01",["_name"],130],[5,["_lpos"],130,[1,0,0,0]],[5,["_lrot"],130,[3,0,0,0,1]],[5,["_euler"],130,[1,0,0,0]],[35,["_materials","0"],[2,["c1qYGglmVbiJ63kvX3SnJg"]],404],[11,false,["_active"],130]]],403]],[30,0,null,37,[22,"9aoAAYJKJR56nsyDVR3xr1",-1092,[60,"ee7o/3/QpI0Jep9WlcZGTu",null,[[11,"SM_TowerThunderBBody_01",["_name"],131],[5,["_lpos"],131,[1,0,0,0]],[5,["_lrot"],131,[3,0,0,0,1]],[5,["_euler"],131,[1,0,0,0]],[35,["_materials","0"],[2,["a174aNwnFUq6B+C8hupOtt"]],406],[11,false,["_active"],131]]],405]],[30,0,null,37,[22,"12sIxAd4xbv59W3ANKj2X7",-1093,[60,"44e/zYoHRN2ZN7aolbasSw",null,[[11,"SM_TowerElectroneerBody_01",["_name"],132],[5,["_lpos"],132,[1,0,0,0]],[5,["_lrot"],132,[3,0,0,0,1]],[5,["_euler"],132,[1,0,0,0]],[35,["_materials","0"],[2,["366PFgp3dcA6jQhh5OaNY0"]],408],[11,false,["_active"],132]]],407]],[30,0,null,37,[22,"a8rRRSGbdZ75rtdYdCxXvt",-1094,[60,"3bCj4+449P7rbIlSBncmL1",null,[[11,"SM_TowerOmegaBeamBody_01",["_name"],133],[5,["_lpos"],133,[1,0,0,0]],[5,["_lrot"],133,[3,0,0,0,1]],[5,["_euler"],133,[1,0,0,0]],[35,["_materials","0"],[2,["ebLTCL4wZWyoex5cTjGOhH"]],410],[11,false,["_active"],133]]],409]],[30,0,null,37,[22,"19dqAvhYZW66LFXyVsSUYV",-1095,[60,"17M/NDxDpG2odEA803pjdi",null,[[11,"SM_TowerPlasmaQBody_01",["_name"],134],[5,["_lpos"],134,[1,0,0,0]],[5,["_lrot"],134,[3,0,0,0,1]],[5,["_euler"],134,[1,0,0,0]],[35,["_materials","0"],[2,["d1WspVTtle/Jp16o0xqn79"]],412],[11,false,["_active"],134]]],411]],[53,"Holder_Lines",33554432,11,[75,76],[[9,-1096,[1,"bbXJzOE4VPfK6FjUzmQehj"],[5,0,0]]],[43,null,"49wTbCCSREN4zWQLyl+4jk",439],[1,0,-70,0]],[103,"Top_Bar",false,33554432,75,[[47,-1097,[1,"4bB/tmartFwZ7PNCBb5YHx"],[5,8,2],[0,0,0.5]],[23,0,-1098,[1,"29cPXc6KlB9opedy8rP3zM"],[4,4284216710],427],[167,1,-1099,[1,"99WYGzrjlFDZxZRoCu+RRN"]]],[43,null,"35jFeVsdRBvqeNrX+pxrm1",428],[1,0,86,0]],[103,"Bot_Bar",false,33554432,75,[[47,-1100,[1,"2b++2u4slBK5PzY37fgYmc"],[5,8,2],[0,0,0.5]],[23,0,-1101,[1,"baC+oSoX5C4qfkJJhtj98I"],[4,4284216710],429],[167,4,-1102,[1,"11BGCEeldInpPcTBbgfHe8"]]],[43,null,"cfuGUfzhhJaZ9moIIKq2IQ",430],[1,0,-86,0]],[103,"Top_Bar",false,33554432,76,[[47,-1103,[1,"57AuE0xUhGQ61sPc6sq3fy"],[5,8,2],[0,1,0.5]],[23,0,-1104,[1,"9d9NvkoFxJIJXsXdjMRyaA"],[4,4284216710],433],[167,1,-1105,[1,"d1PPGODwlCqpGYBWKcuzln"]]],[43,null,"14GaKuOShIMqa/ATn9dnvE",434],[1,0,86,0]],[103,"Bot_Bar",false,33554432,76,[[47,-1106,[1,"2cNkMLl/dH8Jg2o0t+/flU"],[5,8,2],[0,1,0.5]],[23,0,-1107,[1,"aad0CDV5xEEaBOKRFbpm4R"],[4,4284216710],435],[167,4,-1108,[1,"3b+O+CtpZFCIkz9A5Ts4WV"]]],[43,null,"c015eixxFEvaiHo0IF6V8C",436],[1,0,-86,0]],[268,"On Game Start",9,[-1111],[[339,0.5,5,-1110,[[8,"d7a81e91EBDlImajYv5iUSd","setCameraZoomIntensity",-1109],[34,"2022ebMdchE2pNL1SpqTm8g","setTrigger","zoomIn",9]]]]],[161,"Get Current Level Size",239,[[710,1,-1112,[[8,"2022ebMdchE2pNL1SpqTm8g","setInt",9]]]]],[711,1083179519,9,[4,4281335808]],[161,"Get Current Level Data",141,[[610,1,-1113,[[8,"ca967I1gMNLm6CKVgweRwFH","loadLevel",142],[8,"e93b2BayABBuKYLltRfqtdm","createLevel",148],[8,"85ba8zO9clG9KMZhnWVluYT","setLevel",49],[8,"c75d1lxJgZOt6RDeS6sCJMj","setCurrentLevel",152]]]]],[30,0,null,12,[22,"640VKea5NIK4USuLAyLBs1",-1114,[207,"90JDUIIG1Kt4hd0tMrkCi3",[[11,"Game Over Controller",["_name"],143],[5,["_lpos"],143,[1,0,0,0]],[5,["_lrot"],143,[3,0,0,0,1]],[5,["_euler"],143,[1,0,0,0]]]],4]],[30,0,{},12,[22,"e7x73SDh9MfZgQfJSXZT9u",-1115,[207,"eeRVaC0cVIipVgQo67b2Mx",[[11,"Spawner",["_name"],147],[5,["_lpos"],147,[1,0,0,0]],[5,["_lrot"],147,[3,0,0,0,1]],[5,["_euler"],147,[1,0,0,0]]]],7]],[30,0,{},12,[22,"80fcPs02lOuKj5k9FDAJ+8",-1116,[207,"0dKO4gSQNEmYLEioXS3WAQ",[[11,"P-Freeze-RewardedAdsBonus",["_name"],154],[5,["_lpos"],154,[1,0,0,0]],[5,["_lrot"],154,[3,0,0,0,1]],[5,["_euler"],154,[1,0,0,0]]]],11]],[161,"Play Music",141,[[595,"ost-gameplay-0",-1117]]],[161,"Show Loading",50,[[396,0.5,"Loading_Show",-1118]]],[161,"Set Next Level",50,[[715,-1119]]],[161,"Show Loading",77,[[396,0.5,"Loading_Show",-1120]]],[161,"Show Loading",78,[[396,0.5,"Loading_Show",-1121]]],[161,"Log String",79,[[415,"Game Start Event!",-1122]]],[268,"On Game Started",26,[-1125],[[440,1,-1124,[[8,"93f08a/C8BE67WCaBfvDFAN","log",-1123]]]]],[161,"Log",252,[[415,"Game Started Event!",-1126]]],[268,"Wave Animation Finished",26,[-1129],[[615,5,-1128,[[8,"93f08a/C8BE67WCaBfvDFAN","log",-1127]]]]],[161,"Log",254,[[415,"Wave Activate Spawn Event!",-1130]]],[289,"Square_Outline",33554432,81,[[122,-1131,[5,720,720]],[283,1,0,-1132,[4,4294174947],13]],[1,0,230,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[289,"Square_Color",33554432,81,[[122,-1133,[5,720,720]],[345,0,-1134,14]],[1,0,244,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[289,"Text_%",33554432,39,[[122,-1135,[5,11.97,25.2]],[350,">1",20,20,20,false,-1136,[4,4286215282],16]],[1,-54.298,-15.379,0],[3,0,0,-0.6115270401858311,0.79122353296749],[1,0,0,-75.4]],[289,"Text_%",33554432,40,[[122,-1137,[5,16.36,25.2]],[350,">5",20,20,20,false,-1138,[4,4286215282],19]],[1,-43.845,-56.026,0],[3,0,0,-0.3090169943749474,0.9510565162951535],[1,0,0,-36]],[289,"Text_%",33554432,41,[[122,-1139,[5,21.31,25.2]],[350,">10",20,20,20,false,-1140,[4,4286215282],22]],[1,-1.229,-57.292,0],[3,0,0,0.0558215049931638,0.998440764181981],[1,0,0,6.4]],[269,"Text_Stage Level",33554432,55,[[122,-1141,[5,90.4,47.88]],[350,"Stage 1",38,38,38,false,-1142,[4,4281532425],24]],[1,0,-15.888,0]],[269,"Outline",33554432,83,[[122,-1143,[5,108,108]],[283,1,0,-1144,[4,4292928274],25]],[1,-6,-6,0]],[289,"Icon_Play",33554432,18,[[122,-1145,[5,48,64]],[594,-1146,[4,4281532425],27]],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[425,"Icon_Menu",33554432,42,[[122,-1147,[5,40,40]],[460,false,-1148,[4,4281532425],34]],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[425,"Icon_PlayAgain",33554432,43,[[122,-1149,[5,46,48]],[460,false,-1150,[4,4281532425],41]],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[287,"Scripts",33554432,27,[-1152],[[122,-1151,[5,0,0]]]],[288,"End Game UI",33554432,266,[[255,-1153],[716,-1154]]],[287,"Events",33554432,27,[165],[[122,-1155,[5,0,0]]]],[288,"On Victory Listener",33554432,165,[[255,-1156],[339,0.5,3,-1157,[[8,"99672sUg5NFw4x7bEPAiyHE","activate",13]]]]],[288,"On Defeat Listener",33554432,165,[[255,-1158],[339,0.5,4,-1159,[[8,"99672sUg5NFw4x7bEPAiyHE","activate",13],[34,"c4d68jIEQZKZ5AKzGQQzzsP","setText","Defeat...",82],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",18]]]]],[503,"UI Camera",59,[[712,"Camera<CameraComponent>",0,0,41943040,-1160,[4,4286073907]],[717,-1161]],[1,8000,0,0]],[2,["1ayGJX7NFLw4ZV5ksbBfGW"]],[223,"On Enable",33554432,[[48,-1162,[1,"230Nm3xu9HS5fTq148/bUF"]],[203,-1163,[1,"44hjLkOIxHkqZ37y3El6fN"],[[153,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[372,"640RFaY5hOWogyWMP69QTl",44,58]],[223,"On Enable",33554432,[[48,-1164,[1,"d3IhF/959G6pZY5aWTWu3x"]],[203,-1165,[1,"5aPj7mhcBJsoJqrNFRjFCq"],[[153,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[372,"74yGjUCfZLOZH/wxmjTQgg",44,59]],[30,0,null,59,[22,"c6vKOiB3JG7pMlMy/WnSzq",-1166,[207,"a9wE3l5VlBsYA7gDxipjdG",[[11,"P-Tutorial-UI",["_name"],179],[5,["_lpos"],179,[1,207,448.00000000000006,0]],[5,["_lrot"],179,[3,0,0,0,1]],[5,["_euler"],179,[1,0,0,0]]]],66]],[85,"LSquare 01",33554432,21,[[9,-1167,[1,"d0YW7YvLFKJKXUvt0hiQhW"],[5,36,36]],[23,0,-1168,[1,"d2vItGxCZPnLuiApcV51CG"],[4,266127292],70]],[43,null,"aarKgt/3FFX7FY10qAetdq",71],[1,-140.631,-155.68,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 02",33554432,21,[[9,-1169,[1,"75kACSdctKkqn+YTChYLkk"],[5,330,330]],[23,0,-1170,[1,"03z9LfJelBKKPQENOanybr"],[4,266127292],72]],[43,null,"c0Y+hrM+RELouFnPWdnMBM",73],[1,-317.989,-58.783,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"LSquare 03",33554432,21,[[9,-1171,[1,"47zef+LAlIK5LhBz1MXsZ2"],[5,330,330]],[23,0,-1172,[1,"96ZD6j+6BJspMnZra389nE"],[4,266127292],74]],[43,null,"c9HABdLkVEI6pN57qVCiN0",75],[1,-288.713,-282.661,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 01",33554432,21,[[9,-1173,[1,"06JXdz4SpPHIE2YlZv92CR"],[5,330,330]],[23,0,-1174,[1,"0dzjX0jcFLdYEJ/k8uqjo9"],[4,266127292],76]],[43,null,"aapXT4h4pIGZ/NQYCj1meV",77],[1,344.954,-149.847,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"RSquare 02",33554432,21,[[9,-1175,[1,"5aH6T6imxFyoNiB70m1QfV"],[5,330,330]],[23,0,-1176,[1,"977z9D0vpIab0ed/YeIEww"],[4,266127292],78]],[43,null,"69s8Af+oVLFo1wzZDpaqjI",79],[1,134.971,-450.239,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Bar",33554432,22,[[9,-1177,[1,"913wbKpuBEzITd1fzDQ9YA"],[5,36,2]],[23,0,-1178,[1,"3dbffEzddE5Yf4feuuNeui"],[4,4292928274],81]],[43,null,"7fqMEykb5ABp+7+IMrSKlF",82],[1,0,-17.107,0]],[85,"Tier Cube 01",33554432,10,[[9,-1179,[1,"d23ij/kLJIJIWAu8+rL57r"],[5,6,6]],[23,0,-1180,[1,"6dx88nUW9PbbqVmSfhtTIz"],[4,1692459794],112]],[43,null,"ccKCOemI1MpKSvXVPO7sQu",113],[1,-6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 02",33554432,10,[[9,-1181,[1,"0f6PsTpqJBirVR01eAB0YZ"],[5,6,6]],[23,0,-1182,[1,"9arYp42INLl7Wf40SusvaV"],[4,1692459794],114]],[43,null,"40D2hZJaJLmIh44e7S/GTB",115],[1,6,118,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 03",33554432,10,[[9,-1183,[1,"604vd5P3dEkq688R7E8QqI"],[5,6,6]],[23,0,-1184,[1,"c1n8U1IRhJGaR31ZHNjc/O"],[4,1692459794],116]],[43,null,"d5L7xjDeFJupCgO9tJdtZa",117],[1,-12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 04",33554432,10,[[9,-1185,[1,"2fD0+3kDRKaaV/xnAsUg4Y"],[5,6,6]],[23,0,-1186,[1,"b7HW/CaaRONpgTupJO7+pn"],[4,1692459794],118]],[43,null,"e1JPPpclJE4owL+6IWOcWA",119],[1,0,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[85,"Tier Cube 05",33554432,10,[[9,-1187,[1,"79Xr7GpclE8KVGUNN0Vpru"],[5,6,6]],[23,0,-1188,[1,"0fkMcO/SBM1Ypt4geKhkuQ"],[4,1692459794],120]],[43,null,"adqQgsC41Fu7GOM3d/l9SM",121],[1,12,-8,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Divider 01",33554432,61,[[9,-1189,[1,"d3NNG3lqFNi6//7Tqo4Qgu"],[5,280,2]],[23,0,-1190,[1,"1f6vH430xJSZ508pqv7LCT"],[4,1021167806],123]],[43,null,"19I73LlkhFr6KTj6586VA8",124],[1,0,52.94,0]],[41,"Divider 02",33554432,61,[[9,-1191,[1,"dbyFBK6gJNiqbMFetLlrTm"],[5,280,2]],[23,0,-1192,[1,"59mhL+RQ1ELoaxno5E9q5S"],[4,1021167806],125]],[43,null,"30/e+IsyRAtr9pZIlNiV+9",126],[1,0,-58.56,0]],[78,"Select_Fill",33554432,6,[[9,-1193,[1,"abDLPLb9xKu4YC89o0UdHU"],[5,50,50]],[23,0,-1194,[1,"e08/Zh+d1N05VgO56qDlj/"],[4,8912686],130]],[43,null,"acxUe8OblOb4pA3EcX7v8y",131],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,6,[[9,-1195,[1,"e80QCv+4FIeZn6xouz5NpO"],[5,54,54]],[46,1,0,-1196,[1,"5de3aUUfpFiocy2CPdNKka"],[4,2028004114],132]],[43,null,"5bTXhMKdpOgIK2TZhRvIJh",133],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,6,[[9,-1197,[1,"dbNPfQ/mtINIMWWu14OUBb"],[5,58,58]],[46,1,0,-1198,[1,"f70Hg9YFtNeKHPoig8txBs"],[4,1021371154],134]],[43,null,"51JXUIC1NIUYX4chA6aK08",135],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,6,[[9,-1199,[1,"740w6et5FBtLq7NXG6J47h"],[5,24.46,28.98]],[70,"Gun",19,19,23,false,-1200,[1,"c7QCzMHu5LK5l04QMqdckV"],[4,3369912252],136]],[43,null,"c9uP8F3T1A1b5WCR+FvinQ",137],[1,0,3,0]],[78,"Select_Fill",33554432,7,[[9,-1201,[1,"a0zVwtfA1GtZ5SinTcPkFC"],[5,50,50]],[23,0,-1202,[1,"e8AT33NwhPRK1XeWTSw60F"],[4,8912686],142]],[43,null,"0edyml4d9FlIC/CYxyw6LO",143],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[41,"Text_Tower",33554432,7,[[9,-1203,[1,"8cn+slrQZF6r0ZkhxoqcQ1"],[5,47.44,28.98]],[70,"Cannon",19,19,23,false,-1204,[1,"43Ab66+AdPiLBYT8WASCQ7"],[4,3369912252],148]],[43,null,"30HbmstvROa74KfgW0kssA",149],[1,0,3,0]],[78,"Select_Fill",33554432,8,[[9,-1205,[1,"ec6mhZBPdLFKnZYaoakHgX"],[5,50,50]],[23,0,-1206,[1,"6aeQST5ddDwacnrd5jybde"],[4,8912686],152]],[43,null,"9ed7kVuHtDI7ISLKdQixuI",153],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,8,[[9,-1207,[1,"ddiCfpJUhDJ4MFHa1tXBQJ"],[5,54,54]],[46,1,0,-1208,[1,"8dd30VPw1Jf7eyTiviSkjK"],[4,2028004114],154]],[43,null,"0174+tKAhNw7gKkTSb6FXA",155],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[78,"Outline 02",33554432,8,[[9,-1209,[1,"a191RJC0BAXaSZHV7W47qK"],[5,58,58]],[46,1,0,-1210,[1,"abSEBnHTZHfIcLtWgCfjHW"],[4,1021371154],156]],[43,null,"d678vTh/JMl7o+q7FNoDj5",157],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[41,"Text_Tower",33554432,8,[[9,-1211,[1,"b68DKHxhBFz6pt2Ouizxhs"],[5,36.64,28.98]],[70,"Laser",19,19,23,false,-1212,[1,"50Cfo19rlAKaVOQfKhbCyG"],[4,3369912252],158]],[43,null,"00WKI/qMFLoKqOp2xdXGs0",159],[1,0,3,0]],[103,"Divider",false,33554432,29,[[9,-1213,[1,"b3+hDRDXlHD4ARQpduBePf"],[5,260,2]],[23,0,-1214,[1,"f4P+BfPN1N65VNuDEibWHl"],[4,1692256446],176]],[43,null,"b0effX2LZPGJTc5O3Kx2ux",177],[1,0,-169.835,0]],[41,"On Enable",33554432,28,[[48,-1215,[1,"6e6UxFD61LmZ9+SM3JNxyi"]],[203,-1216,[1,"edv7pDpRVAIoY521TMpdj9"],[[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,true",6],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",7],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","selected,false",8]]]],[43,null,"c6F3PxAZ9HWLBhhsqAPckX",179],[1,0,201.08500000000004,0]],[41,"Text_SubTitle",33554432,98,[[9,-1217,[1,"94s0/xbVxDBr8iLxDYLXId"],[5,40.28,27.72]],[70,"total",26,26,22,false,-1218,[1,"0enviJPytOmJ32TJq0USyk"],[4,4294765656],186]],[43,null,"13dOqkCc1C6rtNPgMn+Tjg",187],[1,-8.421,-21,0]],[30,0,{},23,[22,"75a1vm5JJA+ohuNwq5URob",-1219,[60,"30/wQAvnZPtIlQh+02+xvR",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],190]],[30,0,{},23,[22,"75a1vm5JJA+ohuNwq5URob",-1220,[60,"19bXoDYZZMwIWZXL+JWh4K",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],191]],[30,0,{},23,[22,"75a1vm5JJA+ohuNwq5URob",-1221,[60,"8dbz7ZnHtA9Knqi4FyY/lY",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],192]],[30,0,{},23,[22,"75a1vm5JJA+ohuNwq5URob",-1222,[60,"99ZQUlZ7tEmKW7YuEmcHGg",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],193]],[30,0,{},23,[22,"75a1vm5JJA+ohuNwq5URob",-1223,[60,"28dsWsrZRJsa1s8v2wwP01",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],194]],[41,"Text_SubTitle",33554432,99,[[9,-1224,[1,"fdTxCEKClN8rwV3H8T3sTc"],[5,37.62,27.72]],[70,"rate",26,26,22,false,-1225,[1,"bcfJ8RXcZAqrVP1dglf6mN"],[4,4294765656],202]],[43,null,"85b9ZWHJBGfYKSmncM2FZc",203],[1,2.743,-21,0]],[30,0,{},24,[22,"75a1vm5JJA+ohuNwq5URob",-1226,[60,"1dL964mdlLSpQJfrQ+8Kf3",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,162,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],206]],[30,0,{},24,[22,"75a1vm5JJA+ohuNwq5URob",-1227,[60,"9a5mG4j9FHdrFfb/KI8evN",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],207]],[30,0,{},24,[22,"75a1vm5JJA+ohuNwq5URob",-1228,[60,"c9a9b8rHlKD6gzFgvH6LuM",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],208]],[30,0,{},24,[22,"75a1vm5JJA+ohuNwq5URob",-1229,[60,"81wIZ5/fZCKq2nc2h8aG/A",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],209]],[30,0,{},24,[22,"75a1vm5JJA+ohuNwq5URob",-1230,[60,"edIDYcAodIpZMhXSxHy4a7",null,[[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]],[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]]]],210]],[41,"Text_SubTitle",33554432,100,[[9,-1231,[1,"d1ztpgNqlLaqTwLg+YT0h2"],[5,40.28,27.72]],[70,"total",26,26,22,false,-1232,[1,"e7E2ZtFyhD77RPXSou7nkz"],[4,4294765656],215]],[43,null,"c0VH81coxF8qV44WnZn8ax",216],[1,1.41,-21,0]],[30,0,null,20,[22,"75a1vm5JJA+ohuNwq5URob",-1233,[60,"12TKHhc5VBtp/TmmEQHdUG",null,[[17,"Holder_ShopItemUpgrade-001",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,82,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],221]],[30,0,null,20,[22,"75a1vm5JJA+ohuNwq5URob",-1234,[60,"10JdPBYMhGnZ7POjjFfsYp",null,[[17,"Holder_ShopItemUpgrade-002",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,2,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],222]],[30,0,null,20,[22,"75a1vm5JJA+ohuNwq5URob",-1235,[60,"d3JBcK9n5CMKAvyx4MB1lS",null,[[17,"Holder_ShopItemUpgrade-003",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-78,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],223]],[30,0,null,20,[22,"75a1vm5JJA+ohuNwq5URob",-1236,[60,"2bVHPZZ1RNJ6fidDqIWUxV",null,[[17,"Holder_ShopItemUpgrade-004",["_name"],[2,["75a1vm5JJA+ohuNwq5URob"]]],[14,["_lpos"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,-158,0]],[14,["_lrot"],[2,["75a1vm5JJA+ohuNwq5URob"]],[3,0,0,0,1]],[14,["_euler"],[2,["75a1vm5JJA+ohuNwq5URob"]],[1,0,0,0]],[17,"Icon_Currency Outline",["_name"],[2,["c5V6UYtXxON7v4PZCR+2j0"]]],[14,["_lpos"],[2,["c5V6UYtXxON7v4PZCR+2j0"]],[1,-5.850000000000001,0,0]],[17,"Text_Cost",["_name"],[2,["1eKklzzutK7rqzu2nHAYzW"]]],[14,["_lpos"],[2,["1eKklzzutK7rqzu2nHAYzW"]],[1,9.999999999999998,0,0]],[17,"Icon_Currency",["_name"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]]],[14,["_lpos"],[2,["06ZHFJfVhAmZlV4L3jlM3i"]],[1,0,0,0]],[17,"Outline 01",["_name"],[2,["215kGHmF9JEYpNBbzBlk/3"]]],[14,["_lpos"],[2,["215kGHmF9JEYpNBbzBlk/3"]],[1,0,4.204,0]]]],224]],[55,"Cannon Tower Model",[66,-1237],[43,null,"5bL2xCgF5MwJld1wvGmhz9",452]],[226,"Art",[318],[[210,-1238,[1,"1emyBrfQBAUq0NqzxvMf9B"],[448,449],450]],[43,null,"7cjfgLGpRBPp4beJLjYp7Q",451],[1,0,0.25,0]],[41,"Text_unlock for",33554432,31,[[9,-1239,[1,"2eJthZwyBGlJU0GUWik0++"],[5,75.67,27.72]],[70,"unlock for",22,22,22,false,-1240,[1,"3fdSH//VZNy6vG6F/K1s+5"],[4,4281532425],236]],[43,null,"e4MAi8uvNMjKsNZa+kw9XZ",237],[1,-37.88,0,0]],[41,"Text_?",33554432,31,[[47,-1241,[1,"06Of+rJ/BDyIkkuFWE8kOD"],[5,12.71,40.32],[0,0,0.5]],[314,"?",2,30,30,32,false,-1242,[1,"912Vx1HGZENa41YuGX/u9H"],[4,4281532425],243]],[43,null,"0fkK7xDxBK6YZkCeXlTi39",244],[1,67.005,0,0]],[33,"Text_unlock for",33554432,107,[[9,-1243,[1,"79b6H/RFhEzZM9my1NAWU6"],[5,117.76,27.72]],[70,"Already bought!",22,22,22,false,-1244,[1,"38slrfDhhFIpAl0qEeT8k3"],[4,4281532425],247]],[43,null,"2dgH+NA9pP6JUiLtAYA68j",248]],[178,"Holder_Yes",33554432,4,[32],[[9,-1245,[1,"01a5NzOHJL6p3d4IMxqkoq"],[5,60,40]]],[43,null,"89ZY/FsSVA+7amd3ytgNIM",261],[1,50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,32,[[9,-1246,[1,"70H07dO/BDGqbaIhMEF/du"],[5,62,46]],[46,1,0,-1247,[1,"d1lXGHIP1PwIqTwEDqPXwB"],[4,2521425664],251]],[43,null,"e9XDGuw0JPUqABngU8dqEx",252]],[33,"Outline 02",33554432,32,[[9,-1248,[1,"54Obts0A5LL6wmQQcbYUEe"],[5,68,51]],[46,1,0,-1249,[1,"e6KMYE1IpEBJDDoqyZFCrH"],[4,1347020544],253]],[43,null,"886bXdN05GaKTi7kGvXbwU",254]],[41,"Text_Yes",33554432,32,[[9,-1250,[1,"98ExqNqkxB45eme06MnzDG"],[5,34.47,35.28]],[70,"Yes",28,28,28,false,-1251,[1,"44tBjKsFJNAah+Lpgc8RlE"],[4,4279976969],255]],[43,null,"bfTIeSVgZA3YKahvjMGWcX",256],[1,-0.448,1.157,0]],[178,"Holder_No",33554432,4,[33],[[9,-1252,[1,"e1/Pk25u9DPLxFM8D/jlxZ"],[5,60,40]]],[43,null,"63HMoaxTVEOr7ZC37a/6/C",272],[1,-50,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,33,[[9,-1253,[1,"5cVopZRXhDxqN3aMRE2Jja"],[5,62,46]],[46,1,0,-1254,[1,"100gSwCjJLYZAeR7ADC0Qu"],[4,2521694463],262]],[43,null,"cfc1ASTDlFCpX4hjxt0VqK",263]],[33,"Outline 02",33554432,33,[[9,-1255,[1,"4bf5JBsh5AnpX7IVwUDupE"],[5,68,51]],[46,1,0,-1256,[1,"e1L2nAh45Hrot/A1+Jv8hs"],[4,1347289343],264]],[43,null,"60u55ry49C9r23Sqh6KxfV",265]],[41,"Text_No",33554432,33,[[9,-1257,[1,"3fT+r3R5xIrqtjccAdOIug"],[5,24.77,35.28]],[70,"No",28,28,28,false,-1258,[1,"abIMmvbfxP9ooKi1zP6KFk"],[4,4279764543],266]],[43,null,"f0mjCbC39HIax1qR5Dov/H",267],[1,-0.448,1.157,0]],[301,"Holder_Back",false,33554432,4,[34],[[48,-1259,[1,"21o3jiRBpMyYx7ScmKzBwe"]]],[43,null,"00KdnigKJLRJAc9juW9w6z",283],[1,0,-153.828,0],[1,0,0,1]],[33,"Outline 01",33554432,34,[[9,-1260,[1,"f0d9MJHnhKOJV0WJDZ1+uT"],[5,68,46]],[46,1,0,-1261,[1,"faHmLE93xDbqiLOy1RiT+K"],[4,2531117246],273]],[43,null,"a6nFDtQUtMJIWwtRWOcMbW",274]],[33,"Outline 02",33554432,34,[[9,-1262,[1,"09HC6EvoVGmLUtR5aEYHAF"],[5,74,51]],[46,1,0,-1263,[1,"4eCYVBfXRHmI3PMjjDe2Qp"],[4,1356712126],275]],[43,null,"9ayUEO9/dApJve9ICBpOkW",276]],[41,"Text_Back",33554432,34,[[9,-1264,[1,"9a7DL0laBELKU5b1XQYsW9"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-1265,[1,"15/dnMUsZM44BwzogxB+tO"],[4,4281532425],277]],[43,null,"447OHxuN5Ce4dyzGhVvZVm",278],[1,-0.448,1.157,0]],[41,"Text_01",33554432,67,[[9,-1266,[1,"6fMI9H+uBM3qwVYiC+v57C"],[5,260.41,37.8]],[181,"Not enough Max Energy to build!",24,24,30,false,false,-1267,[1,"9aox0tZ8dNVZoDR1JCVJGf"],[4,4281539080],284]],[43,null,"ecgQTC8jZPeb9pnLU92cnO",285],[1,0,17.459,0]],[41,"Text_02",33554432,67,[[9,-1268,[1,"89qFFbq5ROZazswmcmBidX"],[5,234.5,37.8]],[398,"Upgrade your Max energy first.",22,22,30,false,false,-1269,[1,"35DHBAgJtKdoVQLICWdeu2"],286]],[43,null,"b7/gxtVC9AlZKqvP+tgA/D",287],[1,0,-16.628,0]],[33,"Outline 01",33554432,35,[[9,-1270,[1,"f1MI/dYZdN7rfomcdYwYvk"],[5,68,46]],[46,1,0,-1271,[1,"31z+a5g9FDo4ZPs3sW86ut"],[4,2531117246],290]],[43,null,"fd1LJizwlHPo8Z3yIJHJjs",291]],[33,"Outline 02",33554432,35,[[9,-1272,[1,"c5V/rtmrFObbhgAuqLx+o+"],[5,74,51]],[46,1,0,-1273,[1,"26NMu1QhlNrqCy/oiKd22Q"],[4,1356712126],292]],[43,null,"d3b6ByvPRESYv152Fk3oab",293]],[41,"Text_Back",33554432,35,[[9,-1274,[1,"ddmcVlU3dPVYou0KmAziPL"],[5,45.88,35.28]],[70,"Back",28,28,28,false,-1275,[1,"b0ZL8ucFpJbILZAfH1wM0Z"],[4,4281532425],294]],[43,null,"01Ss8umn9IhaRTKbyl6Cee",295],[1,-0.448,1.157,0]],[78,"Panel_Color",33554432,113,[[9,-1276,[1,"faj1RDVXlLCKjAYLOVgUlW"],[5,20,20]],[23,0,-1277,[1,"33aeG3zptON6xNT23tglCp"],[4,4282187811],314]],[43,null,"85TvCUA2lEaKUU0uR6WqA/",315],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,115,[[9,-1278,[1,"98ZatXECFDkqCdOzHgGWui"],[5,20,20]],[23,0,-1279,[1,"55CsWVy79EgKLm0iz2qHy1"],[4,4282187811],320]],[43,null,"bbN9ax7AhPPY6suHkOrMua",321],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,112,[[9,-1280,[1,"38nkrMUZxNW7lpePLYlfPY"],[5,20,20]],[23,0,-1281,[1,"42sl75qbxDd6V41cUzTWsP"],[4,4282187811],327]],[43,null,"78zLNxkbNHUK7xobqh0a9d",328],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[33,"Panel_Color",33554432,68,[[9,-1282,[1,"1aS/dKVEBDip1wXiO5Nezj"],[5,44,44]],[23,0,-1283,[1,"9ayssUVXlFY6LgyMaImk5y"],[4,4292928274],333]],[43,null,"c8kkB8AltMyp5doXreuKTF",334]],[55,"Gun Tower Model",[213,-1284],[43,null,"2eB6XlQLRAQoferPO7XwZa",345]],[226,"Art",[344],[[210,-1285,[1,"6fbc70eANNWp28wZL+5OTh"],[339],340]],[43,null,"0fgA/YYBdC66p+kPHNbzl7",341],[1,0,0.25,0]],[55,"Muzzles",[-1286,-1287],[43,null,"deNT69sBlJ6piMckjDCRJ2",355]],[273,"Bullet_Muzzle_Flash",512,346,[-1288,-1289],[43,null,"e1H64SQOdPK5ca9COiD9xL",351],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[227,"Laser Tower",[227,-1290],[43,null,"2abxVc3MhB5oEydlBrlWiM",397],[1,0,-0.05,0]],[226,"Art",[348],[[210,-1291,[1,"5f3Vp/c05BWKb+rd3WtdNP"],[390],391]],[43,null,"0aYnimvoFHdL3YBaFUXPHZ",392],[1,0,0.25,0]],[78,"Outline 02",33554432,74,[[9,-1292,[1,"8exm+CjsRBfZOsu+Kn6HHT"],[5,72,72]],[46,1,0,-1293,[1,"716OaubDhL2I/7WkL5+Ygy"],[4,4281255201],417]],[43,null,"1aYaoXLpJOjaoq9W1Hd2oP",418],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Outline 01",33554432,74,[[9,-1294,[1,"02siiyh99P7pkHNEuxhva6"],[5,66,66]],[46,1,0,-1295,[1,"e4tS8gx5pLoYWxYhGXQqmG"],[4,4281255201],419]],[43,null,"25not+uKlBTJlN8seu8tpy",420],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[78,"Panel_Color",33554432,74,[[9,-1296,[1,"8bKmbyECRAVYugDGwNR/LJ"],[5,60,60]],[212,-1297,[1,"07u4Ko/m9HM7a4PGwdfxaL"],[4,4281255201],421]],[43,null,"b2syh/+0pELbp4sxKtZxgY",422],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[169,"Icon_Yes",33554432,74,[[9,-1298,[1,"f65OvKTYtOBIRvYyXpc/dG"],[5,24,18]],[108,0,-1299,[1,"56mzPjlGdHiIHxooPFOFAJ"],423]],[43,null,"f0Ku3ruvtPxIFUO/R1/Rrb",424],[1,0.837921535706073,-2.093743179093451,0],[1,2,2,1]],[161,"Victory",48,[[291,86,-1300,[[8,"4b49aIoOPNJGbyOKIzv2YTd","victory",144]]],[300,"Victory - Press V",-1301]]],[161,"Toggle Infinity Energy",48,[[291,69,-1302,[[8,"ca75cIVvLBMl7Ykys8006FJ","toggleInfinityEnergy",150]]],[300,"Toggle Infinity Energy - Press E",-1303]]],[504,"Time Scale",48,[138,139]],[161,"VFX Camera",9,[[713,1,6,512,-1304,[4,4281335808]]]],[161,"Camera Shake Event Listener",9,[[353,"CameraShake_ShakeCamera",-1305,[[8,"c3d3d1BwjRM46w7Jwj5DBqA","play",9]]]]],[161,"Theme Camera Color",9,[[718,-1306,[[[4,4281335808],[4,4280697788],[4,4282260786]],8,8,8],241,0]]],[317,9],[161,"Touch Controller",12,[[719,2,-1307,241]]],[601,"Clear!",90,90,90,false,82,[4,4294174947]],[161,"Camera Switch",80,[[720,[null,null],-1308]]],[505,"Debug Camera",80,[[714,-1,14,1822425087,-1309]],[1,20.028,5.522,4.35],[3,-0.0922959556412573,0.7010573846499778,0.09229595564125723,0.7010573846499779],[1,-14.999999999999998,89.99999999999999,-3.1805546814635168e-15]],[161,"On Wave Completed",80,[[616,2,2,-1310,[[8,"85ba8zO9clG9KMZhnWVluYT","startWave",49]]]]],[2,["08Ww6G8aRNBJeV17NK55//"]],[177,"New Node"],[299,[1,"f73Gqm8NxNwIPuL/MNLazi"]],[2,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[2,["cdN/iXwS9EWaea7ROuvyKb"]],[2,["0325m7PSVKEJgP6FqjArxY"]],[2,["35oTOUcq5LW6sLAKY0sSNr"]],[2,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[2,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[2,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[2,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[2,["99UzDZa6pHQ4VtG5vEXqut"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1321,[49,"74XRvRkuBPX6zuG43ddIDV",5,[[11,"Holder_Tower Button 01",["_name"],84],[5,["_lpos"],84,[1,0,0,0]],[5,["_lrot"],84,[3,0,0,0,1]],[5,["_euler"],84,[1,0,0,0]],[11,"Button_Color",["_name"],-1311],[5,["_lpos"],-1312,[1,0,0,0]],[11,"Button_Outline",["_name"],168],[5,["_lpos"],168,[1,0,0,0]],[5,["_lrot"],168,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],168,[1,0,0,45]],[11,true,["_active"],84],[11,"Button_Outline 2",["_name"],-1313],[5,["_lpos"],-1314,[1,0,0,0]],[11,"Button_Outline 1",["_name"],-1315],[5,["_lpos"],-1316,[1,0,0,0]],[17,false,["_active"],[2,["e9EkiL/+1I4KWEMpMRNY1g"]]],[11,2,["_clips","length"],169],[183,["_clips","0"],169,49],[183,["_defaultClip"],169,50],[11,"Panel_Outline",["_name"],-1317],[5,["_lpos"],-1318,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1319],[5,["_lpos"],-1320,[1,0,0,0]],[17,false,["_active"],[2,["07J8NL3JNE+J1JbZaH9Gkn"]]],[183,["_clips","1"],169,51]]],48]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["42ZSZDURBPuYxZbUVkytNk"]],[2,["64o7LRB4FEdaQLAV4SPsYe"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1328,[49,"c1RSk6NUhFVYmVRsNR9Aqa",5,[[11,"Holder_Tower Button 02",["_name"],85],[5,["_lpos"],85,[1,0,0,0]],[5,["_lrot"],85,[3,0,0,0,1]],[5,["_euler"],85,[1,0,0,0]],[11,"Button_Color",["_name"],-1322],[5,["_lpos"],-1323,[1,0,0,0]],[11,"Button_Outline",["_name"],170],[5,["_lpos"],170,[1,0,0,0]],[5,["_lrot"],170,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],170,[1,0,0,45]],[11,"Panel_Outline",["_name"],-1324],[5,["_lpos"],-1325,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1326],[5,["_lpos"],-1327,[1,0,0,0]],[11,true,["_active"],85]]],52]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1335,[49,"0aSc2CSmNOv7gy3zhm972w",5,[[11,"Holder_Tower Button 03",["_name"],86],[5,["_lpos"],86,[1,0,0,0]],[5,["_lrot"],86,[3,0,0,0,1]],[5,["_euler"],86,[1,0,0,0]],[11,"Button_Color",["_name"],-1329],[5,["_lpos"],-1330,[1,0,0,0]],[11,"Button_Outline",["_name"],171],[5,["_lpos"],171,[1,0,0,0]],[5,["_lrot"],171,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],171,[1,0,0,45]],[11,"Panel_Outline",["_name"],-1331],[5,["_lpos"],-1332,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1333],[5,["_lpos"],-1334,[1,0,0,0]],[11,true,["_active"],86]]],53]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["92c+4KiBlHB7JmE4DwBM6Z"]],[2,["bcFr/o7h5GhJL+FrxYvuDn"]],[177,"New Node"],[299,[1,"53ipIgQFdFtrBLm6Y7q+Qj"]],[299,[1,"f2jk0YGmtIIrlBFk1nTV3M"]],[2,["99UzDZa6pHQ4VtG5vEXqut"]],[2,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[2,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[2,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[2,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[2,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[2,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[2,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[2,["cdN/iXwS9EWaea7ROuvyKb"]],[2,["0325m7PSVKEJgP6FqjArxY"]],[2,["35oTOUcq5LW6sLAKY0sSNr"]],[2,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]],[2,["0aSc2CSmNOv7gy3zhm972w","69yyRlXrpMd62pIm5Z3QYa"]],[2,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],[2,["50hrJYbf9IHLRR1ePLEmnJ"]],[2,["e0iQibPDNGYIKJsHwZFwIm"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1346,[49,"74XRvRkuBPX6zuG43ddIDV",3,[[11,"Holder_Tower Button 01",["_name"],87],[5,["_lpos"],87,[1,0,0,0]],[5,["_lrot"],87,[3,0,0,0,1]],[5,["_euler"],87,[1,0,0,0]],[11,"Button_Color",["_name"],-1336],[5,["_lpos"],-1337,[1,0,0,0]],[11,"Button_Outline",["_name"],175],[5,["_lpos"],175,[1,0,0,0]],[5,["_lrot"],175,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],175,[1,0,0,45]],[11,true,["_active"],87],[11,"Button_Outline 2",["_name"],-1338],[5,["_lpos"],-1339,[1,0,0,0]],[11,"Button_Outline 1",["_name"],-1340],[5,["_lpos"],-1341,[1,0,0,0]],[17,false,["_active"],[2,["e9EkiL/+1I4KWEMpMRNY1g"]]],[11,2,["_clips","length"],176],[183,["_clips","0"],176,61],[183,["_defaultClip"],176,62],[11,"Panel_Outline",["_name"],-1342],[5,["_lpos"],-1343,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1344],[5,["_lpos"],-1345,[1,0,0,0]],[17,false,["_active"],[2,["07J8NL3JNE+J1JbZaH9Gkn"]]],[183,["_clips","1"],176,63]]],60]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["42ZSZDURBPuYxZbUVkytNk"]],[2,["64o7LRB4FEdaQLAV4SPsYe"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1353,[49,"c1RSk6NUhFVYmVRsNR9Aqa",3,[[11,"Holder_Tower Button 02",["_name"],88],[5,["_lpos"],88,[1,0,0,0]],[5,["_lrot"],88,[3,0,0,0,1]],[5,["_euler"],88,[1,0,0,0]],[11,"Button_Color",["_name"],-1347],[5,["_lpos"],-1348,[1,0,0,0]],[11,"Button_Outline",["_name"],177],[5,["_lpos"],177,[1,0,0,0]],[5,["_lrot"],177,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],177,[1,0,0,45]],[11,"Panel_Outline",["_name"],-1349],[5,["_lpos"],-1350,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1351],[5,["_lpos"],-1352,[1,0,0,0]],[11,true,["_active"],88]]],64]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[194,0,null,[177,"New Node"],[22,"0fJEdVoOpA/qcZPGFboeiN",-1360,[49,"0aSc2CSmNOv7gy3zhm972w",3,[[11,"Holder_Tower Button 03",["_name"],89],[5,["_lpos"],89,[1,0,0,0]],[5,["_lrot"],89,[3,0,0,0,1]],[5,["_euler"],89,[1,0,0,0]],[11,"Button_Color",["_name"],-1354],[5,["_lpos"],-1355,[1,0,0,0]],[11,"Button_Outline",["_name"],178],[5,["_lpos"],178,[1,0,0,0]],[5,["_lrot"],178,[3,0,0,0.3826834323650898,0.9238795325112867]],[5,["_euler"],178,[1,0,0,45]],[11,"Panel_Outline",["_name"],-1356],[5,["_lpos"],-1357,[1,0,0,0]],[11,"Panel_Energy Color",["_name"],-1358],[5,["_lpos"],-1359,[1,0,0,0]],[11,true,["_active"],89]]],65]],[2,["a6az63RfpIg6Gg/gQf45Dh"]],[2,["b4p3nx06pA3q2OOmIuPIqT"]],[2,["a4xPBm209GU5Mh8eoXMqG3"]],[2,["04WDb5mtRGGpfMyqoB0Xxf"]],[2,["d2z2sk+ilKSZaI9H0szJaw"]],[2,["98bH1qNPBKRJHtgTkStvtX"]],[2,["94HKvpp8tGXay3fNGq8XPM"]],[2,["49AqclMgJJsa3HNnpIL7GO"]],[2,["12TKHhc5VBtp/TmmEQHdUG","75a1vm5JJA+ohuNwq5URob"]],[2,["10JdPBYMhGnZ7POjjFfsYp","75a1vm5JJA+ohuNwq5URob"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","75a1vm5JJA+ohuNwq5URob"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","75a1vm5JJA+ohuNwq5URob"]],[2,["19bXoDYZZMwIWZXL+JWh4K","75a1vm5JJA+ohuNwq5URob"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","75a1vm5JJA+ohuNwq5URob"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","75a1vm5JJA+ohuNwq5URob"]],[2,["28dsWsrZRJsa1s8v2wwP01","75a1vm5JJA+ohuNwq5URob"]],[2,["9a5mG4j9FHdrFfb/KI8evN","75a1vm5JJA+ohuNwq5URob"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","75a1vm5JJA+ohuNwq5URob"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","75a1vm5JJA+ohuNwq5URob"]],[2,["edIDYcAodIpZMhXSxHy4a7","75a1vm5JJA+ohuNwq5URob"]],[2,["70wDt2VWFD16VzFvDwRYUS","c5V6UYtXxON7v4PZCR+2j0"]],[2,["70wDt2VWFD16VzFvDwRYUS","1eKklzzutK7rqzu2nHAYzW"]],[2,["12TKHhc5VBtp/TmmEQHdUG","c5V6UYtXxON7v4PZCR+2j0"]],[2,["12TKHhc5VBtp/TmmEQHdUG","1eKklzzutK7rqzu2nHAYzW"]],[2,["10JdPBYMhGnZ7POjjFfsYp","c5V6UYtXxON7v4PZCR+2j0"]],[2,["10JdPBYMhGnZ7POjjFfsYp","1eKklzzutK7rqzu2nHAYzW"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","c5V6UYtXxON7v4PZCR+2j0"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","1eKklzzutK7rqzu2nHAYzW"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","c5V6UYtXxON7v4PZCR+2j0"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","1eKklzzutK7rqzu2nHAYzW"]],[2,["30/wQAvnZPtIlQh+02+xvR","c5V6UYtXxON7v4PZCR+2j0"]],[2,["30/wQAvnZPtIlQh+02+xvR","1eKklzzutK7rqzu2nHAYzW"]],[2,["19bXoDYZZMwIWZXL+JWh4K","c5V6UYtXxON7v4PZCR+2j0"]],[2,["19bXoDYZZMwIWZXL+JWh4K","1eKklzzutK7rqzu2nHAYzW"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","c5V6UYtXxON7v4PZCR+2j0"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","1eKklzzutK7rqzu2nHAYzW"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","c5V6UYtXxON7v4PZCR+2j0"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","1eKklzzutK7rqzu2nHAYzW"]],[2,["28dsWsrZRJsa1s8v2wwP01","c5V6UYtXxON7v4PZCR+2j0"]],[2,["28dsWsrZRJsa1s8v2wwP01","1eKklzzutK7rqzu2nHAYzW"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","c5V6UYtXxON7v4PZCR+2j0"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","1eKklzzutK7rqzu2nHAYzW"]],[2,["9a5mG4j9FHdrFfb/KI8evN","c5V6UYtXxON7v4PZCR+2j0"]],[2,["9a5mG4j9FHdrFfb/KI8evN","1eKklzzutK7rqzu2nHAYzW"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","c5V6UYtXxON7v4PZCR+2j0"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","1eKklzzutK7rqzu2nHAYzW"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","c5V6UYtXxON7v4PZCR+2j0"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","1eKklzzutK7rqzu2nHAYzW"]],[2,["edIDYcAodIpZMhXSxHy4a7","c5V6UYtXxON7v4PZCR+2j0"]],[2,["edIDYcAodIpZMhXSxHy4a7","1eKklzzutK7rqzu2nHAYzW"]],[2,["70wDt2VWFD16VzFvDwRYUS","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["12TKHhc5VBtp/TmmEQHdUG","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["10JdPBYMhGnZ7POjjFfsYp","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["d3JBcK9n5CMKAvyx4MB1lS","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["2bVHPZZ1RNJ6fidDqIWUxV","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["30/wQAvnZPtIlQh+02+xvR","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["19bXoDYZZMwIWZXL+JWh4K","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["8dbz7ZnHtA9Knqi4FyY/lY","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["99ZQUlZ7tEmKW7YuEmcHGg","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["28dsWsrZRJsa1s8v2wwP01","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["1dL964mdlLSpQJfrQ+8Kf3","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["9a5mG4j9FHdrFfb/KI8evN","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["c9a9b8rHlKD6gzFgvH6LuM","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["81wIZ5/fZCKq2nc2h8aG/A","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["edIDYcAodIpZMhXSxHy4a7","06ZHFJfVhAmZlV4L3jlM3i"]],[2,["171MnYxFRNfKXgRmWyWA2/"]],[284,"gun tower",22,22,22,false,22,[1,"44mzkM2l9NKaW4GR2kmqM3"],[4,4294765656]],[100,6,[1,"484sM2549FI6KtX6rwKr9E"]],[100,7,[1,"97++uOsVlD6ZygbwxpRGAf"]],[100,8,[1,"3ejmlhXpROMJB9Pk51jYqB"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1365,[49,"d7Qi7A1tdH/LTTi6o0sKpj",2,[[11,"Fill Color",["_name"],-1361],[5,["_lpos"],-1362,[1,0,0,0]],[11,"Holder_ShopItemTower",["_name"],201],[5,["_lpos"],201,[1,0,108.968,0]],[5,["_lrot"],201,[3,0,0,0,1]],[5,["_euler"],201,[1,0,0,0]],[11,"No Currency Button",["_name"],-1363],[5,["_lpos"],-1364,[1,-0.5500000000000043,-5,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]],[17,true,["_active"],[2,["80YiVz6qFKN7arm9xbYeRI","1bEwzooBRYiLITAV26DhPq"]]],[17,true,["_active"],[2,["cfzF/Wk51P1JXBk/zJoOFP","a6UoiMmTtU6YsbaNPx5rqf"]]],[17,false,["_active"],[2,["833LM+JjxM6KI5LMQd3zSF"]]]]],227]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1376,[49,"15DJ7jmq1Ae66WkKJeB5w1",2,[[11,"Fill Color",["_name"],-1366],[5,["_lpos"],-1367,[1,0,0,0]],[11,"Holder_ShopItemTower T2 01",["_name"],202],[5,["_lpos"],202,[1,-63,3.9399999999999977,0]],[5,["_lrot"],202,[3,0,0,0,1]],[5,["_euler"],202,[1,0,0,0]],[11,"No Currency Button",["_name"],-1368],[5,["_lpos"],-1369,[1,-0.5500000000000043,-5,0]],[17,false,["_active"],[2,["07KURNz6dMK4PdBiolw5Np"]]],[11,"Icon_Currency Outline",["_name"],-1370],[5,["_lpos"],-1371,[1,-5.85,0,0]],[11,"Text_Cost",["_name"],-1372],[5,["_lpos"],-1373,[1,9,0,0]],[11,"Icon_Currency",["_name"],-1374],[5,["_lpos"],-1375,[1,0,0,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,-26,-21,0]],[17,false,["_debug"],[2,["e1NG+1hV1G5K2CKkNvRXuk"]]]]],228]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[2,["77TNXOqB1K7aFVadEOVrbg"]],[2,["02eF1XhQpMbKYv2Jp8pbJ+"]],[2,["46XEwx/YdPSoYGq9WRUULu"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1381,[49,"74FoDqeghE5JvREcQdepbY",2,[[11,"Fill Color",["_name"],-1377],[5,["_lpos"],-1378,[1,0,0,0]],[11,"Holder_ShopItemTower T2 02",["_name"],203],[5,["_lpos"],203,[1,63,3.9399999999999977,0]],[5,["_lrot"],203,[3,0,0,0,1]],[5,["_euler"],203,[1,0,0,0]],[11,"No Currency Button",["_name"],-1379],[5,["_lpos"],-1380,[1,-0.5500000000000043,-5,0]],[14,["_lpos"],[2,["bbMJKn/OdOCqRjfsfqizBg"]],[1,26,-21,0]]]],229]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1384,[49,"08YItQGcBFQpduqVLVCrtO",2,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 01",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,-139,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-1382,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-1383]]],230]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1389,[49,"8aYv3hX5FKB5nbxfplnPh8",2,[[11,"Fill Color",["_name"],-1385],[5,["_lpos"],-1386,[1,0,0,0]],[11,"Holder_ShopItemTower T3 02",["_name"],101],[5,["_lpos"],101,[1,-63,-121.06,0]],[5,["_lrot"],101,[3,0,0,0,1]],[5,["_euler"],101,[1,0,0,0]],[11,"No Currency Button",["_name"],-1387],[5,["_lpos"],-1388,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],101]]],231]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1392,[49,"c4vzRLahNK5pcaIc4/EzI3",2,[[17,"Fill Color",["_name"],[2,["6fSn7vontHlJIAhCZsp+Rg"]]],[14,["_lpos"],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[1,0,0,0]],[17,"Holder_ShopItemTower T3 03",["_name"],[2,["54x3LC6jNKF6d4tobLj//p"]]],[14,["_lpos"],[2,["54x3LC6jNKF6d4tobLj//p"]],[1,63,-121.06,0]],[14,["_lrot"],[2,["54x3LC6jNKF6d4tobLj//p"]],[3,0,0,0,1]],[5,["_euler"],-1390,[1,0,0,0]],[17,"No Currency Button",["_name"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]]],[14,["_lpos"],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[1,-0.5500000000000043,-5,0]],[11,true,["_active"],-1391]]],232]],[2,["54x3LC6jNKF6d4tobLj//p"]],[30,0,{},45,[22,"54x3LC6jNKF6d4tobLj//p",-1397,[49,"78ZYB+NMNHz7TSPoxDnk9O",2,[[11,"Fill Color",["_name"],-1393],[5,["_lpos"],-1394,[1,0,0,0]],[11,"Holder_ShopItemTower T3 04",["_name"],102],[5,["_lpos"],102,[1,139,-121.06,0]],[5,["_lrot"],102,[3,0,0,0,1]],[5,["_euler"],102,[1,0,0,0]],[11,"No Currency Button",["_name"],-1395],[5,["_lpos"],-1396,[1,-0.5500000000000043,-5,0]],[11,true,["_active"],102]]],233]],[2,["6fSn7vontHlJIAhCZsp+Rg"]],[2,["f6K2ivZp9A1bGDfHHRl1wf"]],[144,"P-Cannon-Tower",64,46,[319],[43,null,"72CUi05AdGOoqnsNldLiHQ",447]],[315,"20",2,32,32,32,false,106,[1,"e2egLlwS1AT49MKpUC+E63"]],[155,3,0.9,32,[1,"63YVQxsgtCKLHfGAjYnP6h"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,true",4]]],[155,3,0.9,33,[1,"f9YDmbk45GepNnaAO9CHu1"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",4]]],[155,3,0.9,34,[1,"00ifH+cmpItb22pVCucpcB"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",4]]],[155,3,0.9,35,[1,"dcsjb8czVJjI25KrZwJww7"],[[142],[34,"2022ebMdchE2pNL1SpqTm8g","setBool","clickYes,false",4]]],[100,4,[1,"4bXFgjCi1Oep5MuL3z4qnv"]],[348,"Smash.3R",2,22,22,20,2,false,false,109,[1,"23kF+MLUlF45AawKNhFREq"],[4,4281532425]],[349,"Mussum Ipsum, cacilds vidis litro abertis. Em pé sem cair, deitado sem dormir, testad pra ai linhas. Dä ok até.",2,0,16,15,15,2,false,110,[1,"6eP5OULu9Ms7Qy4Nl80EfQ"],[4,4286808963]],[185,"10",18,18,18,false,114,[1,"5e1urkH41Bj7fPcEFFHfOj"]],[185,"4",18,18,18,false,116,[1,"b7dnA6wJROdrQqs1ez6E1f"]],[185,"20",18,18,18,false,111,[1,"a3K5owSBZMioWqqslQ6pGs"]],[185,"4",42,42,42,false,117,[1,"dccG/aZzBA7bi14ydDQ0AH"]],[144,"P-Gun-Tower",32,46,[345],[43,null,"62ERELdDJKKKr0x07ojqqD",338]],[42,"Base Gun Tower",344,[15],[43,null,"bcjdi/s1ZNComSBdTd2+Cu",344]],[2,["52Wr8elKJczKH4c2zJXMeu"]],[42,"VFXs",213,[346],[43,null,"b3au/X/7NGUqQQuFeyQgG7",356]],[333,true,0.2,false,false,1,347,[1,"47fCv1d2lEIrcsWeoxrjv/"],[[347,null],6,0],[6],[4,1],[4,0.5],[0],[0],[0],[0],[0],[0],[4,0.2],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[92,true,true,[36,1,[10,[0,0.30256410256410254,1],[[7,2,0.0962962962962963,2.757575757575757,2.757575757575757],[7,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1398],[31,348]],[334,false,0.2,false,false,1,347,[1,"c5t2dKIzRISJmwTVLCQflI"],[[349,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1399],[31,350]],[189,"Bullet_Muzzle-Square",346,[-1400],[43,null,"52ReaRfQZNUY2o+Hgcmq6F",354],[1,0,0.55,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.2,false,false,1,541,[1,"d7XStftG1Dxq0OVqTDDpk/"],[[352,null],6,0],[6],[4,0.8],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.296875],[18,0.4151785714285714,[4,4293694037]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.16294642857142866],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.3717948717948718,1],[[7,2,0.04814814814814815,2.757575757575757,2.757575757575757],[7,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1401],[31,353]],[55,"Base Pivot",[16],[43,null,"56h9GhupJIUaT67Np8bk0e",374]],[42,"Base",318,[543],[43,null,"e3DkrNnrNNhrnM9kdtO4Va",373]],[144,"P-Laser-Tower",128,46,[349],[43,null,"afYDiyc5ZI2qesRshN0Qf0",389]],[42,"Base",348,[-1402],[43,null,"34Uq9szxpMGKxpzpyBoR9I",396]],[42,"Base Pivot",546,[17],[43,null,"10QJBHxktP1JGkNfx5yKrw",395]],[41,"Holder_Lines",33554432,11,[[9,-1403,[1,"18KrmNmVpBqrKcyVRLFXGa"],[5,0,0]]],[43,null,"2dg7sljKJKJKaDMpR/VfdM",440],[1,0,-72,0]],[273,"Bullet_Muzzle_Ring",512,66,[-1404],[43,null,"4a4ndbc2lHWIg2llm3ey6+",456],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[129,0.2,false,false,1,549,[1,"4aYVow3PVDZYYLtSkk11Ot"],[[454,null],6,0],[66,[4,2986344447]],[4,0.6],[0],[0],[0],[0],[0],[4,0.7853981633974483],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[18,0.09598214285714286,[4,4294753015]],[18,0.3147321428571428,[4,4293678506]],[18,0.8191964285714286,[4,4283436566]]],[[44,255],[12,255,0.19642857142857154],[12,0,1]]]]],[37,[0]],[38,true,[15,1,1.5,[10,[0,0.4846153846153846,1],[[7,2,0.14814814814814814,2.7575757575757565,2.7575757575757565],[7,2,0.9333333333333332,0.37555555555555636,0.37555555555555636],[13,2,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1405],[31,455]],[189,"Bullet_Muzzle_Fragments",66,[-1406],[43,null,"365PYHk7tK+p80wKBWnjfP",459],[1,0,0.13,-0.5],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[86,0.5,false,false,551,[1,"a17oPhklFP86C3fjqVcfHm"],[[457,null],6,0],[6],[27,3,0.1,0.3],[0],[0],[27,3,0.2,0.8],[0],[0],[0],[0],[27,3,0.3,0.5],[54,3,0.3],[0],[0],[[29,[27,3,4,8]]],[25,true,[20,1,[39,[[136],[18,0.05133928571428574,[4,4293175768]],[18,0.2767857142857143,[4,4291450006]],[18,1,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[218,true,3,2,true,0.25,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[279,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-1407],[31,458]],[189,"Bullet_Muzzle_Flash_A",66,[-1408],[43,null,"20gIAUlvhItI3IAUCGpmoa",462],[1,0,0.13,-0.5],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[129,0.3,false,false,1,553,[1,"a4ohdeEBBNrr/KavHHR/iz"],[[460,null],6,0],[6],[4,1.5],[4,1],[0],[0],[0],[0],[0],[0],[4,0.25],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.11830357142857142],[18,0.4151785714285714,[4,4293678518]],[18,0.8191964285714286,[4,4283436577]]],[[44,255],[12,182,0.5758928571428572],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.6512820512820513,1],[[40,2,1,0.027777777777778234,1,0.027777777777778234,1],[7,2,0.6814814814814815,-1.0432098765432094,-1.0432098765432094],[52,2,-3.020202020202019,1,-3.020202020202019,1]]]],[15,1,2,[10,[0,0.4948717948717949,1],[[52,2,0.21241830065359474,1,0.21241830065359474,1],[7,2,0.5777777777777777,1.89272030651341,1.89272030651341],[40,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[15,1,2.5,[10,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[40,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[7,2,0.8925925925925926,4.513888888888884,4.513888888888884],[7,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[40,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-1409],[31,461]]],0,[0,1,90,0,1,90,0,1,90,0,1,90,0,1,90,0,46,19,0,3,1,0,-1,92,0,-2,314,0,-3,315,0,-4,316,0,-5,317,0,-6,302,0,-7,303,0,-8,304,0,-9,305,0,-10,306,0,-11,308,0,-12,309,0,-13,310,0,-14,311,0,-15,312,0,-16,500,0,-17,503,0,-18,509,0,-19,512,0,-20,514,0,-21,517,0,-22,519,0,-23,204,0,-24,220,0,-25,221,0,-26,223,0,-27,222,0,-28,224,0,-29,225,0,-30,16,0,-31,212,0,-32,214,0,-33,215,0,-34,216,0,-35,217,0,-36,218,0,-37,219,0,-38,15,0,-39,226,0,-40,228,0,-41,229,0,-42,230,0,-43,231,0,-44,232,0,-45,233,0,-46,17,0,5,92,0,13,92,0,1,438,0,1,438,0,1,439,0,1,439,0,1,440,0,1,440,0,1,441,0,1,441,0,1,442,0,1,442,0,1,443,0,1,443,0,1,444,0,1,444,0,1,445,0,1,445,0,1,446,0,1,446,0,1,447,0,1,447,0,1,448,0,1,448,0,1,449,0,1,449,0,1,91,0,1,91,0,1,91,0,1,91,0,1,450,0,1,450,0,1,451,0,1,451,0,1,452,0,1,452,0,1,453,0,1,453,0,1,454,0,1,454,0,1,455,0,1,455,0,1,456,0,1,456,0,1,457,0,1,457,0,1,458,0,1,458,0,1,459,0,1,459,0,1,460,0,1,460,0,1,461,0,1,461,0,1,462,0,1,462,0,1,463,0,1,463,0,1,464,0,1,464,0,1,465,0,1,465,0,1,466,0,1,466,0,1,467,0,1,467,0,1,468,0,1,468,0,1,469,0,1,469,0,1,470,0,1,470,0,1,471,0,1,471,0,1,472,0,1,472,0,1,473,0,1,473,0,1,474,0,1,474,0,1,475,0,1,475,0,1,476,0,1,476,0,1,477,0,1,477,0,1,478,0,1,478,0,1,479,0,1,479,0,1,480,0,1,480,0,1,481,0,1,481,0,1,482,0,1,482,0,1,483,0,1,483,0,1,484,0,1,484,0,1,485,0,1,485,0,1,486,0,1,486,0,1,487,0,1,487,0,1,488,0,1,488,0,1,489,0,1,489,0,1,490,0,1,490,0,1,491,0,1,491,0,1,492,0,1,492,0,1,493,0,1,493,0,1,494,0,1,494,0,1,91,0,1,495,0,1,495,0,46,19,0,3,2,0,-1,419,0,-2,425,0,-3,429,0,1,174,0,1,174,0,1,174,0,1,174,0,1,401,0,5,398,0,1,401,0,1,402,0,1,402,0,1,403,0,1,403,0,1,404,0,1,404,0,1,405,0,1,405,0,1,406,0,1,406,0,1,407,0,1,407,0,1,408,0,1,408,0,1,409,0,1,409,0,1,410,0,1,410,0,1,411,0,1,411,0,1,412,0,1,412,0,1,413,0,1,413,0,1,414,0,1,414,0,1,415,0,1,415,0,1,416,0,1,416,0,1,417,0,1,417,0,1,418,0,1,418,0,-1,399,0,-1,400,0,-1,173,0,-1,273,0,-1,274,0,46,44,0,3,3,0,0,4,0,0,4,0,-3,528,0,5,4,0,5,4,0,5,4,0,5,4,0,5,4,0,21,17,0,22,226,0,21,17,0,22,229,0,21,17,0,22,233,0,21,17,0,22,228,0,21,17,0,22,230,0,21,17,0,22,232,0,21,17,0,22,231,0,21,16,0,22,204,0,21,16,0,22,220,0,21,16,0,22,221,0,21,16,0,22,222,0,21,16,0,22,223,0,21,16,0,22,224,0,21,16,0,22,225,0,21,15,0,22,212,0,21,15,0,22,214,0,21,15,0,22,215,0,21,15,0,22,216,0,21,15,0,22,217,0,21,15,0,22,219,0,21,15,0,22,218,0,5,116,0,5,117,0,5,114,0,5,111,0,5,110,0,5,109,0,5,106,0,49,527,0,47,526,0,44,525,0,45,524,0,5,4,0,5,4,0,5,4,0,0,4,0,0,4,0,25,528,0,0,4,0,5,4,0,0,4,0,-1,105,0,-2,104,0,-3,31,0,-4,107,0,-5,323,0,-6,327,0,-7,331,0,-8,108,0,-1,382,0,-2,388,0,-3,392,0,1,369,0,1,369,0,1,370,0,1,370,0,1,371,0,1,371,0,1,372,0,1,372,0,1,373,0,1,373,0,1,374,0,1,374,0,1,375,0,1,375,0,1,376,0,1,376,0,1,377,0,1,377,0,1,378,0,1,378,0,1,379,0,1,379,0,1,380,0,1,380,0,1,272,0,9,5,0,1,272,0,1,272,0,1,381,0,5,367,0,1,381,0,-1,368,0,46,166,0,3,5,0,0,6,0,0,6,0,-3,497,0,19,192,0,5,10,0,5,6,0,5,7,0,5,8,0,5,22,0,0,6,0,25,497,0,0,6,0,-1,192,0,-2,289,0,-3,290,0,-4,291,0,-5,292,0,0,7,0,0,7,0,-3,498,0,19,193,0,5,10,0,5,7,0,5,8,0,5,22,0,0,7,0,25,498,0,0,7,0,-1,193,0,-2,293,0,-3,194,0,-4,195,0,-5,294,0,0,8,0,0,8,0,-3,499,0,19,196,0,5,10,0,5,8,0,5,22,0,0,8,0,25,499,0,0,8,0,-1,196,0,-2,295,0,-3,296,0,-4,297,0,-5,298,0,-1,241,0,5,9,0,0,9,0,0,9,0,-4,360,0,25,360,0,0,9,0,-1,357,0,-2,358,0,-3,239,0,-4,359,0,0,10,0,-1,180,0,-2,181,0,-1,186,0,-2,187,0,-1,182,0,-2,183,0,-1,185,0,-1,191,0,-1,188,0,-2,189,0,0,10,0,-1,62,0,-2,63,0,-3,282,0,-4,283,0,-5,284,0,-6,285,0,-7,286,0,0,11,0,0,11,0,0,11,0,-1,109,0,-2,110,0,-3,47,0,-4,234,0,-5,205,0,-6,548,0,-1,243,0,-2,144,0,-3,361,0,-4,49,0,-5,244,0,-6,148,0,-7,142,0,-8,150,0,-9,152,0,-10,245,0,0,13,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,55,0,-2,162,0,-3,56,0,0,14,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,60,0,-2,197,0,-3,64,0,-4,199,0,-5,65,0,1,69,0,1,69,0,1,69,0,1,69,0,1,69,0,1,69,0,1,537,0,1,537,0,3,15,0,1,122,0,1,122,0,1,122,0,1,122,0,1,122,0,3,16,0,1,128,0,1,128,0,1,128,0,1,128,0,1,128,0,3,17,0,0,18,0,19,83,0,5,18,0,0,18,0,0,18,0,0,18,0,-1,83,0,-2,263,0,1,433,0,1,433,0,1,434,0,1,434,0,1,435,0,1,435,0,1,436,0,1,436,0,1,437,0,1,437,0,3,19,0,0,20,0,0,20,0,0,20,0,-1,92,0,-2,314,0,-3,315,0,-4,316,0,-5,317,0,0,21,0,0,21,0,0,21,0,-1,276,0,-2,277,0,-3,278,0,-4,279,0,-5,280,0,0,22,0,-2,496,0,0,22,0,23,496,0,0,22,0,-1,281,0,0,23,0,0,23,0,0,23,0,-1,302,0,-2,303,0,-3,304,0,-4,305,0,-5,306,0,0,24,0,0,24,0,0,24,0,-1,308,0,-2,309,0,-3,310,0,-4,311,0,-5,312,0,-1,243,0,-2,144,0,-3,49,0,-4,244,0,-5,148,0,-6,142,0,-7,150,0,-8,152,0,-9,245,0,-10,166,0,-11,44,0,-12,275,0,-2,141,0,-3,26,0,-5,80,0,-6,59,0,-7,48,0,-1,50,0,-2,77,0,-3,78,0,-4,79,0,-5,54,0,-6,252,0,-7,254,0,0,27,0,0,27,0,0,27,0,0,27,0,-2,266,0,-3,268,0,0,28,0,0,28,0,0,28,0,0,28,0,-3,29,0,-4,300,0,0,29,0,0,29,0,0,29,0,-2,61,0,-3,97,0,-4,299,0,-1,204,0,-2,220,0,-3,221,0,-4,223,0,-5,222,0,-6,224,0,-7,225,0,0,31,0,0,31,0,0,31,0,-2,320,0,-3,106,0,-4,206,0,-5,321,0,0,32,0,0,32,0,-3,524,0,0,32,0,-1,324,0,-2,325,0,-3,326,0,0,33,0,0,33,0,-3,525,0,0,33,0,-1,328,0,-2,329,0,-3,330,0,0,34,0,0,34,0,-3,526,0,0,34,0,-1,332,0,-2,333,0,-3,334,0,0,35,0,0,35,0,-3,527,0,0,35,0,-1,337,0,-2,338,0,-3,339,0,-1,212,0,-2,214,0,-3,215,0,-4,216,0,-5,217,0,-6,218,0,-7,219,0,-1,226,0,-2,228,0,-3,229,0,-4,230,0,-5,231,0,-6,232,0,-7,233,0,0,38,0,0,38,0,0,38,0,-1,39,0,-2,40,0,-3,41,0,0,39,0,0,39,0,0,39,0,0,39,0,-1,159,0,-2,258,0,0,40,0,0,40,0,0,40,0,0,40,0,-1,160,0,-2,259,0,0,41,0,0,41,0,0,41,0,0,41,0,-1,161,0,-2,260,0,0,42,0,19,57,0,5,42,0,0,42,0,0,42,0,-1,57,0,-2,264,0,0,43,0,19,58,0,5,43,0,0,43,0,0,43,0,-1,58,0,-2,265,0,13,399,0,13,400,0,1,172,0,1,172,0,1,172,0,1,172,0,1,396,0,1,396,0,1,397,0,1,397,0,3,44,0,0,46,0,0,46,0,0,46,0,-1,522,0,-2,535,0,-3,545,0,0,47,0,0,47,0,0,47,0,-1,112,0,-2,113,0,-3,115,0,0,48,0,-1,354,0,-2,137,0,-3,355,0,-4,356,0,-5,140,0,1,146,0,1,146,0,1,146,0,1,146,0,3,49,0,5,247,0,5,156,0,5,51,0,5,248,0,0,50,0,-1,247,0,-2,156,0,-3,51,0,-4,248,0,5,51,0,0,51,0,0,51,0,0,51,0,5,52,0,0,52,0,0,52,0,0,52,0,5,53,0,0,53,0,0,53,0,0,53,0,5,54,0,5,54,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,-1,81,0,-3,261,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,-1,163,0,0,58,0,0,58,0,0,58,0,-1,164,0,-1,271,0,-2,166,0,-4,275,0,0,60,0,0,60,0,0,60,0,-1,100,0,0,61,0,0,61,0,-2,287,0,-3,288,0,0,62,0,0,62,0,-1,93,0,-2,94,0,-3,184,0,0,63,0,0,63,0,-1,95,0,-2,96,0,-3,190,0,0,64,0,0,64,0,0,64,0,-1,98,0,0,65,0,0,65,0,0,65,0,-1,99,0,6,66,0,-3,549,0,-4,551,0,-5,553,0,0,67,0,0,67,0,0,67,0,-1,335,0,-2,336,0,0,68,0,0,68,0,-1,211,0,-2,343,0,-3,117,0,0,74,0,-1,350,0,-2,351,0,-3,352,0,-4,353,0,0,75,0,0,75,0,0,75,0,-1,235,0,-2,236,0,0,76,0,0,76,0,0,76,0,-1,237,0,-2,238,0,5,249,0,5,157,0,0,77,0,-1,249,0,-2,157,0,5,250,0,5,158,0,0,78,0,-1,250,0,-2,158,0,5,79,0,5,251,0,0,79,0,0,79,0,-1,251,0,-2,363,0,-3,364,0,-4,365,0,0,81,0,0,81,0,-1,256,0,-2,257,0,0,82,0,-2,362,0,23,362,0,0,82,0,0,83,0,0,83,0,-1,262,0,3,92,0,0,93,0,0,93,0,-1,180,0,-2,181,0,0,94,0,0,94,0,-1,182,0,-2,183,0,0,95,0,0,95,0,-1,186,0,-2,187,0,0,96,0,0,96,0,-1,188,0,-2,189,0,0,97,0,0,98,0,0,98,0,0,98,0,-1,301,0,0,99,0,0,99,0,0,99,0,-1,307,0,0,100,0,0,100,0,0,100,0,-1,313,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,105,0,0,105,0,0,106,0,-2,523,0,23,523,0,0,106,0,0,107,0,0,107,0,0,107,0,-1,322,0,0,108,0,0,108,0,0,109,0,-2,529,0,23,529,0,0,109,0,0,110,0,-2,530,0,23,530,0,0,110,0,0,111,0,-2,533,0,23,533,0,0,111,0,0,112,0,-1,210,0,-2,342,0,0,113,0,-1,208,0,-2,340,0,-3,114,0,0,114,0,-2,531,0,23,531,0,0,114,0,0,115,0,-1,209,0,-2,341,0,-3,116,0,0,116,0,-2,532,0,23,532,0,0,116,0,0,117,0,-2,534,0,23,534,0,0,117,0,5,137,0,0,137,0,0,137,0,0,137,0,0,138,0,5,138,0,0,138,0,0,138,0,0,139,0,5,139,0,0,139,0,0,139,0,5,140,0,0,140,0,0,140,0,0,140,0,5,242,0,5,246,0,0,141,0,-1,242,0,-2,246,0,1,155,0,1,155,0,1,155,0,1,155,0,3,142,0,1,145,0,1,145,0,1,145,0,1,145,0,3,144,0,1,149,0,1,149,0,1,149,0,1,149,0,3,148,0,1,151,0,1,151,0,1,151,0,1,151,0,3,150,0,1,153,0,1,153,0,1,153,0,1,153,0,3,152,0,0,156,0,0,156,0,0,157,0,0,157,0,0,158,0,0,158,0,0,159,0,0,159,0,0,159,0,0,160,0,0,160,0,0,160,0,0,161,0,0,161,0,0,161,0,0,162,0,0,162,0,0,163,0,0,163,0,0,163,0,0,164,0,0,164,0,0,164,0,0,165,0,-1,269,0,-2,270,0,13,368,0,1,167,0,1,167,0,1,167,0,1,167,0,1,366,0,1,366,0,3,166,0,0,173,0,0,173,0,0,173,0,0,180,0,0,180,0,0,181,0,0,181,0,0,182,0,0,182,0,0,183,0,0,183,0,0,184,0,0,184,0,-1,185,0,0,185,0,0,185,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,-1,191,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,194,0,0,195,0,0,195,0,0,195,0,0,196,0,0,196,0,0,197,0,0,197,0,-1,198,0,0,198,0,0,198,0,0,198,0,0,199,0,0,199,0,-1,200,0,0,200,0,0,200,0,0,200,0,3,204,0,0,205,0,0,206,0,0,206,0,-1,207,0,0,207,0,0,207,0,0,207,0,0,208,0,0,208,0,0,208,0,0,209,0,0,209,0,0,209,0,0,210,0,0,210,0,0,210,0,0,211,0,0,211,0,0,211,0,3,212,0,6,213,0,-3,538,0,3,214,0,3,215,0,3,216,0,3,217,0,3,218,0,3,219,0,3,220,0,3,221,0,3,222,0,3,223,0,3,224,0,3,225,0,3,226,0,6,227,0,6,227,0,3,228,0,3,229,0,3,230,0,3,231,0,3,232,0,3,233,0,0,234,0,0,235,0,0,235,0,0,235,0,0,236,0,0,236,0,0,236,0,0,237,0,0,237,0,0,237,0,0,238,0,0,238,0,0,238,0,5,240,0,0,239,0,-1,240,0,0,240,0,0,242,0,3,243,0,3,244,0,3,245,0,0,246,0,0,247,0,0,248,0,0,249,0,0,250,0,0,251,0,5,253,0,0,252,0,-1,253,0,0,253,0,5,255,0,0,254,0,-1,255,0,0,255,0,0,256,0,0,256,0,0,257,0,0,257,0,0,258,0,0,258,0,0,259,0,0,259,0,0,260,0,0,260,0,0,261,0,0,261,0,0,262,0,0,262,0,0,263,0,0,263,0,0,264,0,0,264,0,0,265,0,0,265,0,0,266,0,-1,267,0,0,267,0,0,267,0,0,268,0,0,269,0,0,269,0,0,270,0,0,270,0,0,271,0,0,271,0,0,273,0,0,273,0,0,274,0,0,274,0,3,275,0,0,276,0,0,276,0,0,277,0,0,277,0,0,278,0,0,278,0,0,279,0,0,279,0,0,280,0,0,280,0,0,281,0,0,281,0,0,282,0,0,282,0,0,283,0,0,283,0,0,284,0,0,284,0,0,285,0,0,285,0,0,286,0,0,286,0,0,287,0,0,287,0,0,288,0,0,288,0,0,289,0,0,289,0,0,290,0,0,290,0,0,291,0,0,291,0,0,292,0,0,292,0,0,293,0,0,293,0,0,294,0,0,294,0,0,295,0,0,295,0,0,296,0,0,296,0,0,297,0,0,297,0,0,298,0,0,298,0,0,299,0,0,299,0,0,300,0,0,300,0,0,301,0,0,301,0,3,302,0,3,303,0,3,304,0,3,305,0,3,306,0,0,307,0,0,307,0,3,308,0,3,309,0,3,310,0,3,311,0,3,312,0,0,313,0,0,313,0,3,314,0,3,315,0,3,316,0,3,317,0,-2,544,0,0,319,0,0,320,0,0,320,0,0,321,0,0,321,0,0,322,0,0,322,0,0,323,0,0,324,0,0,324,0,0,325,0,0,325,0,0,326,0,0,326,0,0,327,0,0,328,0,0,328,0,0,329,0,0,329,0,0,330,0,0,330,0,0,331,0,0,332,0,0,332,0,0,333,0,0,333,0,0,334,0,0,334,0,0,335,0,0,335,0,0,336,0,0,336,0,0,337,0,0,337,0,0,338,0,0,338,0,0,339,0,0,339,0,0,340,0,0,340,0,0,341,0,0,341,0,0,342,0,0,342,0,0,343,0,0,343,0,-2,536,0,0,345,0,-1,347,0,-2,541,0,-1,539,0,-2,540,0,-2,546,0,0,349,0,0,350,0,0,350,0,0,351,0,0,351,0,0,352,0,0,352,0,0,353,0,0,353,0,0,354,0,0,354,0,0,355,0,0,355,0,0,357,0,0,358,0,0,359,0,0,361,0,0,363,0,0,364,0,0,365,0,1,383,0,1,383,0,1,384,0,1,384,0,1,385,0,1,385,0,1,386,0,1,386,0,1,387,0,1,387,0,3,382,0,1,389,0,1,389,0,1,390,0,1,390,0,1,391,0,1,391,0,3,388,0,1,393,0,1,393,0,1,394,0,1,394,0,1,395,0,1,395,0,3,392,0,1,420,0,1,420,0,1,421,0,1,421,0,1,422,0,1,422,0,1,423,0,1,423,0,1,424,0,1,424,0,3,419,0,1,426,0,1,426,0,1,427,0,1,427,0,1,428,0,1,428,0,3,425,0,1,430,0,1,430,0,1,431,0,1,431,0,1,432,0,1,432,0,3,429,0,1,501,0,1,501,0,1,502,0,1,502,0,3,500,0,1,504,0,1,504,0,1,505,0,1,505,0,1,506,0,1,506,0,1,507,0,1,507,0,1,508,0,1,508,0,3,503,0,1,510,0,1,510,0,1,511,0,1,511,0,3,509,0,1,513,0,1,513,0,3,512,0,1,515,0,1,515,0,1,516,0,1,516,0,3,514,0,1,518,0,1,518,0,3,517,0,1,520,0,1,520,0,1,521,0,1,521,0,3,519,0,7,539,0,7,540,0,-1,542,0,7,542,0,-1,547,0,0,548,0,-1,550,0,7,550,0,-1,552,0,7,552,0,-1,554,0,7,554,0,87,25,3,6,398,5,6,367,6,6,97,7,6,97,8,6,97,9,6,25,10,6,61,11,6,104,12,6,25,13,6,27,14,6,28,15,6,536,16,6,543,17,6,547,18,6,56,19,6,59,20,6,60,21,6,28,22,6,29,23,6,64,24,6,65,27,6,80,30,6,66,32,6,323,33,6,327,34,6,331,35,6,108,36,6,213,37,6,227,38,6,55,42,6,56,43,6,56,44,6,59,46,6,103,52,6,77,53,6,78,66,6,318,67,6,108,68,6,205,74,6,104,75,6,234,76,6,234,82,6,162,103,6,205,111,6,112,138,6,356,139,6,356,165,6,268,213,6,344,227,6,348,318,6,319,319,6,522,344,6,345,345,6,535,346,6,538,348,6,349,349,6,545,543,6,544,1409],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,360,362,496,497,498,499,523,524,525,526,527,528,529,530,531,532,533,534],[39,-1,-2,-3,4,4,4,4,4,4,4,4,4,2,2,2,11,2,2,11,2,2,11,2,11,2,2,2,20,26,27,28,2,2,2,20,26,27,28,2,2,2,20,26,27,28,4,4,4,9,9,9,4,4,4,4,11,4,4,4,4,9,9,9,4,4,4,4,4,4,2,4,2,4,2,4,2,4,2,4,4,2,4,4,2,4,2,4,4,2,4,2,4,4,2,4,4,4,2,4,2,4,4,2,4,2,4,4,2,4,4,4,2,4,2,4,2,4,2,4,2,4,4,2,4,2,4,4,2,4,2,4,2,4,2,4,11,4,-1,-2,2,4,2,4,2,4,2,4,11,4,2,4,2,4,2,4,2,4,11,4,20,26,27,28,4,20,26,27,28,4,20,26,27,28,4,4,2,4,4,4,2,4,2,4,2,4,11,4,11,4,4,4,4,4,4,4,2,4,2,4,2,4,11,4,11,4,4,4,4,4,4,4,2,4,4,11,4,11,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,11,4,4,2,4,2,4,11,4,2,4,11,4,2,4,2,4,2,4,11,4,2,-1,17,4,4,2,4,2,4,11,4,2,-1,17,4,4,2,4,2,4,11,4,2,-1,17,4,4,11,4,11,4,2,4,2,4,2,4,11,4,2,-1,17,4,4,-1,-2,-3,-4,-5,-6,-7,17,40,4,4,11,4,2,4,4,4,11,4,2,4,4,4,4,11,4,2,4,4,4,11,4,2,4,2,4,4,4,-1,17,4,4,9,4,4,4,-1,8,-1,8,4,-1,8,4,4,4,4,4,9,4,9,4,9,4,9,4,9,4,9,4,4,9,4,4,4,9,4,9,4,9,4,9,4,9,4,9,4,9,4,-1,17,4,4,9,4,4,4,4,4,4,4,9,4,9,4,9,4,9,4,9,4,9,4,4,9,4,2,4,2,4,2,4,2,4,4,4,2,4,2,4,2,4,2,4,2,4,2,4,4,4,2,4,4,2,4,4,4,-1,-2,17,4,4,4,-1,8,4,-1,8,4,-1,8,4,4,4,4,9,88,89,24,11,11,24,24,24,11,20,20,20,20,24,11,11,11,11,11,11],[31,218,219,220,563,564,565,566,567,568,569,570,571,4,78,57,2,71,57,2,71,57,2,71,2,4,0,70,0,11,20,21,4,0,122,0,11,20,21,4,0,123,0,11,20,21,572,118,38,45,45,67,38,38,120,118,2,120,120,120,38,45,45,67,38,38,573,574,178,3,0,3,0,3,0,3,0,3,0,3,3,0,3,3,0,3,0,3,3,0,3,0,3,3,0,3,3,3,0,3,0,3,3,0,3,0,3,3,0,3,3,3,0,3,0,3,0,3,0,3,0,3,3,51,3,51,3,3,4,3,0,3,18,3,18,3,2,3,81,74,4,3,0,3,18,3,18,3,2,3,4,3,0,3,18,3,18,3,2,3,0,11,20,21,3,0,11,20,21,3,0,11,20,21,3,3,51,3,3,3,80,3,0,3,0,3,2,3,2,3,15,15,15,15,15,3,4,3,0,3,0,3,2,3,2,3,15,15,15,15,15,3,4,3,3,2,3,2,3,4,3,15,15,15,15,3,15,29,29,29,29,29,29,29,0,3,2,3,3,53,3,49,3,2,3,0,3,2,3,0,3,4,3,4,3,2,3,0,12,12,3,3,4,3,4,3,2,3,0,12,12,3,3,4,3,4,3,2,3,0,12,12,3,3,2,3,2,3,0,3,4,3,4,3,2,3,0,12,12,3,3,103,104,105,106,107,64,108,64,37,3,3,2,3,0,3,3,3,2,3,0,3,3,3,3,2,3,0,3,3,3,2,3,0,3,0,3,3,3,44,44,3,43,1,3,3,3,72,63,36,34,3,36,34,3,3,3,3,90,1,91,1,92,1,93,1,94,1,95,1,3,89,1,3,3,43,1,83,1,84,1,86,1,85,1,87,1,88,1,3,59,59,3,43,1,3,3,3,3,3,3,97,1,98,1,99,1,100,1,101,1,102,1,3,96,1,3,4,3,4,3,0,3,54,3,3,3,0,3,0,3,0,3,0,3,0,3,0,3,3,3,0,3,3,0,3,3,3,58,44,58,3,3,3,14,13,3,7,5,3,35,33,3,3,3,82,1,575,576,577,2,2,55,55,55,2,0,0,0,0,132,2,2,2,2,2,2]],[[[535,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[9,32]],[[[68,".bin",3684176765,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45120,"length":14136,"count":3534,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45120,"count":940,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22441986203193665,-0.37148118019104004,1.065432986280257e-8],"maxPosition",8,[1,0.22441986203193665,0.25310033559799194,0.41917550563812256]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Tower0MG4Body_01",[-2],[3,"06VFwTsJJRM4OSJg2XW4Q9",-1,0]],[64,"SM_Tower0MG4Body_01",1,[[62,-3,[1,"9bOQ2QYGtZs4WzqtGYB9n9"],[0],[45],1]],[3,"26PODSVIdRU55mar2WcIzo",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[578,249]],[[[77,"SM_Tower0MG4Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_BlockPath_02",[-2],[3,"fefPIkSBJemp8PPyjHLGkW",-1,0]],[64,"SM_BlockPath_02",1,[[62,-3,[1,"c2E9Ka2cRe7YGAxkqvC+yR"],[0],[45],1]],[3,"52gJWCdoBSSbT31FTbAOUJ",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[579,580]],[[[77,"SM_BlockPath_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",4013001885,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[149,[[156,[114,[-10,-11,-12,-13,-14],[[115,-5,-4],[404,false,-7,-6,[[157,[104,"isPlaying"]]]],[404,false,-9,-8,[[175,1,[104,"isPlaying"]]]]],-3,-2,-1]]],[{},"isPlaying",4,[176,1,false]]],[63,"Empty",[186]],[61,"Entry"],[63,"AC_Freeze_Idle",[72,0]],[61,"Exit"],[61,"Any"]],0,[0,29,5,0,30,4,0,31,2,0,14,1,0,15,2,0,14,3,0,15,1,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,5,0,-4,3,0,-5,1,14],[0],[18],[189]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2600515022]]],11]]],0,0,[0],[16],[41]],[[[58,"P-Towers-Data"],[141,"P-Towers-Data",[[721,-2,[1,"8ezo2lmotJmJjfEzb43bkR"],[[251,"guntower","towers-gun-base","Cheap and fast-paced weapons to deal with almost any type of enemy.","Gun Tower",["0.mg-2","bullz-i"],0],[251,"0.mg-2","towers-gun-0","Faster version of the GunTower. Deal 3x the damage with these beauties.","0.MG-2",["0.mg-4","3.mg-v"],1],[251,"bullz-i","towers-gun-1","Slow but incredibly powerful weapon with a long range.","Bullz-i",["01.hko","tunneller"],2],[216,"0.mg-4","towers-gun-2","Speed up your tower's firing speed with this upgrade.","0.MG-4",3],[216,"3.mg-v","towers-gun-3","Hit up to 3 different enemies simultaneously.","3.MG-V",4],[216,"01.hko","towers-gun-4","The tower with the greatest reach and power of all.","01.HKO",5],[216,"tunneller","towers-gun-5","Tower's piercing shot can go through enemies and hit several in a row.","Tunneller",6]],[[251,"cannontower","towers-cannon-base","Fires explosive shots that damage multiple enemies at once.","Cannon Tower",["smash.3r","comet-t"],7],[251,"smash.3r","towers-cannon-0","Fires explosive shots that damage multiple enemies at once.","Smash.3R",["s.4r","h3ll"],8],[251,"comet-t","towers-cannon-1","Extreme long range, but cannot target close enemies.","Comet-T",["meteor-u","starfall"],9],[216,"s.4r","towers-cannon-2","A large blast of quantum energy deals massive area damage.","S.4R",10],[216,"h3ll","towers-cannon-3","Sprays fire on the ground that damages passing enemies.","F14m",11],[216,"meteor-u","towers-cannon-4","Launch energy missiles that deal splash damage to the other side of the map.","Meteor-U",12],[216,"starfall","towers-cannon-5","This ranged weapon has the largest area of ​​damage of all.","Starfall",13]],[[251,"lasertower","towers-laser-base","The Lasertower deal more damage the longer it hits the same enemy.","Laser Tower",["pulsar","plasma-q"],14],[251,"pulsar","towers-laser-0","The Pulsar emits electrostatic waves which damage and slow enemies in an area.","Pulsar",["puls.3r","thunder-b"],15],[251,"plasma-q","towers-laser-1","This turret fires a laser that does more damage the more it hits the same enemy.","Plasma-Q",["omega bean","electron discharger"],16],[216,"puls.3r","towers-laser-2","The pulse of this tower is bigger, stronger and more efficient.","Puls.3R",17],[216,"thunder-b","towers-laser-3","In addition to the standard pulse, a secondary attack paralyzes all nearby enemies.","Thunder-B",18],[216,"omega bean","towers-laser-4","Nothing is more powerful than the Omega Beam.","Omega Beam",19],[216,"electron discharger","towers-laser-5","Ricochet and hit more than one enemy at a time with this laser upgrade.","Electroneer",20]]]],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,3,1,0,0,1,0,10,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38],[581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601]],[[[76],[55,"SM_BlockDetail_05",[-2],[3,"6bMnZwcz1cbYMdXClIbfGW",-1,0]],[64,"SM_BlockDetail_05",1,[[62,-3,[1,"11J0+1wghVOZLzTMW9skJd"],[0],[45],1]],[3,"28JrtDh2NUaoj1O2DQn7No",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[602,603]],[[[77,"SM_BlockDetail_05__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",3354956192,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":6948,"count":1737,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4329226613044739,-0.4157247543334961,-0.014000981114804745],"maxPosition",8,[1,0.41070592403411865,0.3868376910686493,0.34005191922187805]]],-1],0,0,[],[],[]],[[[58,"P-Crowder-2"],[152,"P-Crowder-2",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Crowder-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.8,0.8,1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"f1XKrwhjBUbpq3ZOc66Wy1",-32,[81,"fe7l2Yz4JBlLpQvX8iAtyo",1,[[75,[2,["f1XKrwhjBUbpq3ZOc66Wy1"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.035,0.105]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["ddPCXGq0tRx48X2hJdJETp"]],3],[17,"SM_Model",["_name"],[2,["b1PSBQTipWm50yzvj/8b+f"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["f1XKrwhjBUbpq3ZOc66Wy1"]],[364,"VFX",2,[-36,-37,-38],[3,"b4byJFzzBHFZKTzhUZXyh4",1,0],[1,1.25,1.25,1]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"d4eHbiXzJDgrE7nxP0pyNa",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"57EK2RnfxHpJ2YGXB7OPss"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"345uEpnupH+bDQOFJre6Gy",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"f7tqoVL9hDAZ5a6ms+IJKu"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"c6okZev39Pq4/glqMJ8I4R",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","pause",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"b79/XIgi9OG5Dfokng7GFi"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"28Dx7CMtpKlqq3QFMl8HwA",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"32bDQLZ4FIhJz4GIjBWbHs"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"4eRTX1pxJDJ6KqrEMaPKEe"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"b8R63nS9ZBy74/8jxJBxPR",1,0]],[145,23,[1,"04EfnxZuJNAo6cxRm6XkKn"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,604,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[319,"dcc/imported-specular-glossiness",[{"hash":221290481,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n  precision highp float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  layout(set = 1, binding = 0) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4  diffuseColor;\n    vec4  specularColor;\n    vec4  emissive;\n    float alphaThreshold;\n    float shininessExponent;\n    float glossiness;\n    float metallic;\n    float normalScale;\n    float transparencyFactor;\n    float diffuseFactor;\n    float specularFactor;\n  };\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  layout(location = 0) in float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  layout(set = 0, binding = 2) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n    layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = texture(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = texture(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  layout(location = 1) in highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    layout(location = 9) in vec3 v_luv;\n    layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  #endif\n  layout(location = 3) in vec3 v_position;\n  layout(location = 5) in vec2 v_uv;\n  layout(location = 6) in vec2 v_uv1;\n  layout(location = 4) in vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    layout(set = 1, binding = 1) uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    layout(set = 1, binding = 2) uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    layout(set = 1, binding = 3) uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    layout(location = 2) in vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    layout(set = 1, binding = 4) uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    layout(set = 1, binding = 5) uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    layout(location = 7) in vec3 v_tangent;\n    layout(location = 8) in vec3 v_bitangent;\n    layout(set = 1, binding = 6) uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    layout(set = 1, binding = 7) uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      layout(set = 2, binding = 1) uniform CCForwardLight {\n        highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n        vec4 cc_lightColor[LIGHTS_PER_PASS];\n        vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n        vec4 cc_lightDir[LIGHTS_PER_PASS];\n      };\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      layout(set = 1, binding = 8) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      layout(set = 1, binding = 9) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      layout(set = 1, binding = 10) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        fragColorX = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        fragColorX = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      layout(location = 0) out vec4 fragColor0;\n      layout(location = 1) out vec4 fragColor1;\n      layout(location = 2) out vec4 fragColor2;\n      void main () {\n        StandardSurface s; surf(s);\n        fragColor0 = s.albedo;\n        fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        fragColor2 = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  layout(std140) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4  diffuseColor;\n    vec4  specularColor;\n    vec4  emissive;\n    float alphaThreshold;\n    float shininessExponent;\n    float glossiness;\n    float metallic;\n    float normalScale;\n    float transparencyFactor;\n    float diffuseFactor;\n    float specularFactor;\n  };\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  in float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  layout(std140) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    uniform highp sampler2D cc_shadowMap;\n    uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = texture(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = texture(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  in highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    in vec3 v_luv;\n    uniform sampler2D cc_lightingMap;\n  #endif\n  in vec3 v_position;\n  in vec2 v_uv;\n  in vec2 v_uv1;\n  in vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    in vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    in vec3 v_tangent;\n    in vec3 v_bitangent;\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      layout(std140) uniform CCForwardLight {\n        highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n        vec4 cc_lightColor[LIGHTS_PER_PASS];\n        vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n        vec4 cc_lightDir[LIGHTS_PER_PASS];\n      };\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        fragColorX = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        fragColorX = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      layout(location = 0) out vec4 fragColor0;\n      layout(location = 1) out vec4 fragColor1;\n      layout(location = 2) out vec4 fragColor2;\n      void main () {\n        StandardSurface s; surf(s);\n        fragColor0 = s.albedo;\n        fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        fragColor2 = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\n  precision highp float;\n  uniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n             uniform vec4 albedo;\n           uniform vec4 albedoScaleAndCutoff;\n           uniform vec4 diffuseColor;\n           uniform vec4 specularColor;\n           uniform vec4 emissive;\n           uniform float shininessExponent;\n           uniform float glossiness;\n           uniform float metallic;\n           uniform float normalScale;\n           uniform float transparencyFactor;\n           uniform float diffuseFactor;\n           uniform float specularFactor;\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  varying float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    uniform highp sampler2D cc_shadowMap;\n    uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        #ifdef GL_EXT_shader_texture_lod\n          return texture2DLodEXT(tex, coord, lod);\n        #else\n          return texture2D(tex, coord, lod);\n        #endif\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        #ifdef GL_EXT_shader_texture_lod\n          return textureCubeLodEXT(tex, coord, lod);\n        #else\n          return textureCube(tex, coord, lod);\n        #endif\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = textureCube(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  varying highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    varying vec3 v_luv;\n    uniform sampler2D cc_lightingMap;\n  #endif\n  varying vec3 v_position;\n  varying vec2 v_uv;\n  varying vec2 v_uv1;\n  varying vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    varying vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    varying vec3 v_tangent;\n    varying vec3 v_bitangent;\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture2D(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        gl_FragData[0] = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        gl_FragData[0] = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      void main () {\n        StandardSurface s; surf(s);\n        gl_FragData[0] = s.albedo;\n        gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        gl_FragData[2] = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":231,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":83}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"TEXTURE_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","defines":[],"range":[0,2]},{"name":"USE_SHININESS_MAP","type":"boolean","defines":[]},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","defines":["USE_SHININESS_MAP"],"options":["r","g","b","a"]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_MAP","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean","defines":[]},{"name":"GLOSSINESS_MAP_USE_SINGLE_CHANNEL","type":"boolean","defines":["!HAS_EXPORTED_GLOSSINESS","USE_SHININESS_MAP"]},{"name":"HAS_EXPORTED_METALLIC","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":1243567465,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  layout(set = 1, binding = 2) uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedoScaleAndCutoff;\n   uniform vec4 diffuseColor;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":192,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":83}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"TEXTURE_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"DiffuseMap"},"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"DiffuseColor","type":"color"},"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"editor":{"displayName":"diffuseFactor"},"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"shininessExponent":{"type":13,"value":[100],"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0],"editor":{"displayName":"SpecularColor","type":"color"}},"specularMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"specularFactor":{"type":13,"value":[1],"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"transparencyMap":{"value":"grey","type":28,"editor":{"displayName":"TransparencyMap"}},"transparencyFactor":{"type":13,"value":[0]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"editor":{"displayName":"bumpFactor","parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_GLOSSINESS","slide":true,"step":0.001,"range":[0,1]}},"metallic":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_METALLIC","slide":true,"step":0.001,"range":[0,1]}},"metallicMap":{"value":"grey","type":28,"editor":{"parent":"HAS_EXPORTED_METALLIC"}},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}},"diffuseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"diffuseFactor":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0,0,0,0.5]},"normalScale":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"DiffuseMap"},"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"DiffuseColor","type":"color"},"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"editor":{"displayName":"diffuseFactor"},"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"shininessExponent":{"type":13,"value":[100],"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0],"editor":{"displayName":"SpecularColor","type":"color"}},"specularMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"specularFactor":{"type":13,"value":[1],"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"transparencyMap":{"value":"grey","type":28,"editor":{"displayName":"TransparencyMap"}},"transparencyFactor":{"type":13,"value":[0]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"editor":{"displayName":"bumpFactor","parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_GLOSSINESS","slide":true,"step":0.001,"range":[0,1]}},"metallic":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_METALLIC","slide":true,"step":0.001,"range":[0,1]}},"metallicMap":{"value":"grey","type":28,"editor":{"parent":"HAS_EXPORTED_METALLIC"}},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}},"diffuseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"diffuseFactor":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0,0,0,0.5]},"normalScale":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[138,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[36,16],[119,32]],[[[138,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2133178879]]],11]]],0,0,[0],[16],[41]],[[[58,"P-Cargo-0"],[228,"P-Cargo-0",[[-11,-12,[98,"Events",-14,[3,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[57,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[427,"Art",1,[[-17,-18,-19,-20,[102,"Spawn Enemies Position",-21,[3,"92C2ihYrZIh5C4P7PUymES",1,0],[1,0,0,0.334]]],1,1,1,1,4],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[42,"Scripts",1,[-22,-23,-24,-25,-26],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[56,"Movement",3,[-27],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"891ZPn4nZbPKViqxf9B2Lw",-29,[81,"de+ZzbaCVEz6dhmUt5BqpK",1,[[75,[2,["891ZPn4nZbPKViqxf9B2Lw"]],[[57,-28,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[17,"SM_Model",["_name"],[2,["891ZPn4nZbPKViqxf9B2Lw"]]],[14,["_lpos"],[2,["891ZPn4nZbPKViqxf9B2Lw"]],[1,0,0,0]],[14,["_lrot"],[2,["891ZPn4nZbPKViqxf9B2Lw"]],[3,0,0,0,1]],[14,["_euler"],[2,["891ZPn4nZbPKViqxf9B2Lw"]],[1,0,0,0]],[35,["_materials","0"],[2,["2bPtrJwrJaRbWH2ryoR9YV"]],3],[17,"SM_Model",["_name"],[2,["e0BhHAhhZUvI7kUr1l9BXG"]]]]],2]],[42,"VFX",2,[-30,-31,-32],[3,"86UwATuFRNZbAyv2wVMIuG",1,0]],[141,"Spawn Enemies",[[235,-34,[1,"2bbkspvNpEQ7+deqegYn6+"],-33]],[3,"ddPGPRhwNAzY8D82XoRcNi",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-42,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-41]]]],[[11,"P-HP-Bar",["_name"],-35],[5,["_lpos"],-36,[1,207,448.00000000000006,0]],[5,["_lrot"],-37,[3,0,0,0,1]],[5,["_euler"],-38,[1,0,0,0]],[11,"Art",["_name"],-39],[5,["_lpos"],-40,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",6,[-43],[3,"21NlB1r8pKBImFR83LT4iO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"0a7Eew0jpIUIR9RidHSUe2"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-44],[31,5]],[73,"VFX_Death_Shards",6,[-45],[3,"1fo7ROk/xOrr70IbFR+gBj",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"7bAMDUeelEUoY5SQ3cQdyl"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-46],[31,7]],[73,"VFX_Spawn",6,[-47,-48],[3,"a5209nuxBHwqsEgTEDCA32",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",3,[-49],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-50],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[8,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",7]]],[65,"On Death VFX Finished",3,[[118,-51,[1,"73y0T1JFxHvY0QNTDhOJ8F"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"f9EjW3+g5LA7yjyBUe+OwC",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-52,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"4bSBlWxxND96ByqcEj9B6T"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-53],[31,9]],[119,0.3,false,14,[1,"a0cTEPTtpDGIwVZ5Q2vfh+"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-54],[31,11]],[126,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[42,"Specials",3,[7],[3,"c3O8NYyeZLHIqWEOBVwkGI",1,0]],[264,"Cargo-0",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",15],[8,"71b59j50pJOQYyfqjE0LpJs","initialize",7]],16,22],[265,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[56,"Stun",3,[25],[3,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,8,0,5,8,0,13,16,0,3,1,0,-1,24,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,3,1,0,6,1,0,-4,27,0,0,2,0,-1,18,0,-2,19,0,-3,5,0,-4,6,0,6,2,0,-1,4,0,-2,15,0,-3,26,0,-4,17,0,-5,23,0,-1,22,0,0,5,0,3,5,0,-1,10,0,-2,12,0,-3,14,0,41,24,0,0,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,28,0,1,28,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,10,1,7,6,23,8,6,27,24,32,25,25,0,26,54],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,605,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[77,"SM_Terrain_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2651114680,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-1],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Terrain_01",[-2],[3,"41a5+qz5hYnIPWfy1FW12A",-1,0]],[64,"SM_Terrain_01",1,[[62,-3,[1,"acGj9fHzdeWYNWvKyhsFEP"],[0],[45],1]],[3,"beOI3ZOflcHa6cx5C+09BJ",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[606,607]],[[[77,"SM_Terrain_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[68,".bin",2188122872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-1],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[76],[55,"SM_Terrain_02",[-2],[3,"c2ITubO5BY0ZR5scOChS6x",-1,0]],[64,"SM_Terrain_02",1,[[62,-3,[1,"018VhKq6ZVZbAm171nxoLE"],[0],[45],1]],[3,"e2kf+C7V5c1ruSk8xjP5ma",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[608,609]],[[[58,"SM_TowerBase_01"],[55,"SM_TowerBase_01",[-2],[3,"a6UoiMmTtU6YsbaNPx5rqf",-1,0]],[64,"SM_TowerBase_01",1,[[62,-3,[1,"c8x41wezhYTop9GywitTd7"],[0],[45],1]],[3,"52Wr8elKJczKH4c2zJXMeu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[1,272]],[[[68,".bin",900802491,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[58,"P-LaserTower-Beam-ElectronDischarger"],[55,"P-LaserTower-Beam-ElectronDischarger",[-2],[3,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[65,"Temp",1,[[357,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[4,0.5],[6],0]],[3,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0],[48],[113]],[[[58,"P-Runner-0"],[152,"P-Runner-0",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Runner-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[198,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"d0adRU765c27WX41620vEc",-32,[81,"3cz+5HcTNKUK2p31mcJ1bm",1,[[75,[2,["d0adRU765c27WX41620vEc"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["7dZSupN3RW26NRzewpcbRt"]],3],[17,"SM_Model",["_name"],[2,["98EZ57Gb1dMaZCZDdMJXKN"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["d0adRU765c27WX41620vEc"]],[42,"VFX",2,[-36,-37,-38],[3,"47XnFp0lhA+ZwJVUtsAwIG",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"53E7LR5ftGDIs16fiVbUiD",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"3dgUxZBaNNRYOnzgS7mppU"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"45Yobpl+hPkKUOXFcJ6PKW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"fbHfhg7FBEPatI1PyCUcy2"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"61OoH7rd5MLrg6nnisv1ts",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"10YxHsCVVPs7bieW/lsaMI"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"1aaOMv63VCIb3bFCg5rt7N",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"2crvuY90JDmKdjZBfXRLTh"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"8dW2Qi0YlP/7uxhWv0k5l3"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"a2KbPtmYVDHJlKprPfK2dF",1,0]],[145,23,[1,"f3I+5x8DtNWpsRFAN5q7fN"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,610,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[{"name":"Icon_Currency Outline 32","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[33],[611]],[[[58,"P-Stunner-1"],[152,"P-Stunner-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[234,"Stunner-1",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"22NP+cD/5Tgoh+buCGMtgq",-32,[81,"e2uIc3Fv1A4qrgPG+WAd+U",1,[[75,[2,["22NP+cD/5Tgoh+buCGMtgq"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,0,0]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["11T+cnA+pVrprAp+evER/v"]],3],[17,"SM_Model",["_name"],[2,["aecmakxK5ezJYcZJrdxRqp"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["22NP+cD/5Tgoh+buCGMtgq"]],[42,"VFX",2,[-36,-37,-38],[3,"18KTDx1/xOopizTMetkWja",1,0]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"bcDYiGGsJGlJcBLJ6g+bSM",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"b4IiUfMFZNp5gjVHxjS5bf"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"9f7oH49lpIsLDuDlrioh86",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"a5wXUoFrBLbLHlfS3GqNSk"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"b05kSVRldJtazN9Iq14BbQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"cfRvE9HGVF3JcFwwHa0Gsb"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"6dL2SHH0xMPo4Cy1ozGBo2",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"6dYe4DZ+ZK5K7LGqQLTLyU"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"1cNmIyv15KvKrr+mA1v+1s"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"28wv4th1pNs6qDNkpOR9dx",1,0]],[145,23,[1,"92X5rq9oNDNouphSNFIziH"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,612,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"P-Crowder-1"],[152,"P-Crowder-1",[[-16,-17,[98,"Events",-19,[3,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[192,"Crowder-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[8,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[57,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[111,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[123,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[124,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[105,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[67,["_uiFillbar"],-4,-3,[2,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[188,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[3,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.7,0.7,0.9]],[151,"Movement",[-26],[3,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[30,0,null,2,[22,"b72WmV0l9c1KqFhtvygc0y",-32,[81,"36wdFeI49FwKrFnMDERSbJ",1,[[75,[2,["b72WmV0l9c1KqFhtvygc0y"]],[[57,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[11,"SM_Model",["_name"],-27],[5,["_lpos"],-28,[1,0,-0.03,0.125]],[5,["_lrot"],-29,[3,0,0,0,1]],[5,["_euler"],-30,[1,0,0,0]],[35,["_materials","0"],[2,["b3aDCHVaVYjbgLKMR2nL+J"]],3],[17,"SM_Model",["_name"],[2,["01qnpmKihVjaWNSQR8aYkQ"]]]]],2]],[42,"Scripts",1,[3,-33,-34,-35],[3,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[2,["b72WmV0l9c1KqFhtvygc0y"]],[364,"VFX",2,[-36,-37,-38],[3,"85FNgEJ2JJa6EPB7xpSBrb",1,0],[1,1.4285714285714288,1.4285714285714288,1.1111111111111112]],[90,0,{},[22,"c46/YsCPVOJYA4mWEpNYRx",-46,[81,"6bKe4jflhIZ7FP8vUekJqr",1,[[75,[2,["84Ywt62DNL1o63TuorfGV8"]],[[125,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[11,"P-HP-Bar",["_name"],-39],[5,["_lpos"],-40,[1,207,448.00000000000006,0]],[5,["_lrot"],-41,[3,0,0,0,1]],[5,["_euler"],-42,[1,0,0,0]],[11,"Art",["_name"],-43],[5,["_lpos"],-44,[1,0,0,0]]]],15]],[2,["c46/YsCPVOJYA4mWEpNYRx"]],[73,"VFX_Death_Erupt",7,[-47],[3,"1dm51OcV9CR5vZYrSLHUOT",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,10,[1,"9dLYSX/cpAJ6yWyVdmaDAV"],[4],[6],[4,0.4],[0],[0],[0],[0],[0],[0],[0],[4,0.16],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.3169642857142857],[18,0.4575892857142857,[4,4294938922]],[18,1,[4,4289817645]]],[[12,255,0.5736607142857143],[12,0,1]]]]],[37,[0]],[92,true,true,[135,2,2,[10,[0,1],[[7,2,0.02962962962962963,1.913888888888889,1.913888888888889],[13,2,1]]],[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-48],[31,5]],[73,"VFX_Death_Shards",7,[-49],[3,"033QYjsxpD55euiRCls+D2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[74,1,false,false,12,[1,"75sUJK5mFPZql4NRrmp+L7"],[6],[6],[27,3,0.05,0.1],[0],[0],[27,3,3,5],[0],[0],[54,3,6.283185307179586],[0],[27,3,0.3,0.8],[4,1],[0],[0],[[29,[27,3,5,7]]],[25,true,[20,1,[39,[[51,0.16964285714285715],[18,0.33035714285714285,[4,4294938368]],[18,0.7991071428571429,[4,4284748062]]],[[12,255,0.23883928571428573],[12,0,1]]]]],[132,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[59,[0],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[69,true,[0],[0],[27,3,-8.726646259971647,8.726646259971647]],[147,true,2,2,[0],[0]],[24,[0],[0],[6],[6],-50],[31,7]],[73,"VFX_Spawn",7,[-51,-52],[3,"05oZk/dQNK5JkL9vhWdbAh",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[56,"HP Controller",5,[-53],[3,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[173,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[8,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[8,"cc.ParticleSystem","play",10],[8,"cc.ParticleSystem","play",12],[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[8,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[65,"On Death VFX Finished",5,[[118,-55,[1,"faD77/d0JFObgw8ppU/IQO"],[11,13],[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[3,"39JvZCAedOp6Sve/f5F4Kk",1,0]],[127,"Temp-Model",false,2,[[95,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[45],1]],[3,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[102,"HP UI Reference Position",2,[3,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[120,0.3,false,14,[1,"b0h1viJI9NJp2YFd13e8ps"],[8],[6],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2,[10,[0,1],[[87,2,1,1,1],[52,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-57],[31,9]],[119,0.3,false,14,[1,"8e3C5E/thOBbxPvQPp8/NG"],[[10,null],6,0],[66,[4,3372220415]],[4,0.3],[0],[0],[0],[0],[0],[0],[0],[4,0.3],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[50,[[12,255,0.5044642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,2.5,[10,[0,1],[[52,2,1.815873015873016,1,1.815873015873016,1],[40,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[15,1,0.75,[10,[0.002314922765629036,0.16526413076721125,1],[[7,2,0.5395300454042952,4.184733825497376,4.184733825497376],[7,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[7,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[15,1,3,[10,[0,0.6256410256410256,1],[[7,2,0.2555555555555556,2.663194444444444,2.663194444444444],[13,2,1],[7,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-58],[31,11]],[126,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[8,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[56,"Stun",5,[-59],[3,"d8dKppTK1Bg5gb3LSAfK53",1,0]],[145,23,[1,"3alebOeupLRK4YP9EKkBoR"],[[8,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[8,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[42,"UI",1,[8],[3,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[2,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,5,8,0,13,16,0,3,1,0,32,24,0,34,22,0,35,16,0,5,3,0,5,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,3,1,0,6,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,3,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,19,19,0,3,8,0,-1,11,0,7,11,0,-1,13,0,7,13,0,-1,20,0,-2,21,0,-1,16,0,5,17,0,0,17,0,0,18,0,7,20,0,7,21,0,-1,24,0,10,1,3,6,5,8,6,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,12,4,9,-1,8,-1,8,-1,8,-1,8,-1,-2,17,4],[22,19,613,1,27,26,16,25,7,5,14,13,8,23,8,24]],[[[58,"P-CannonTower-Bullet"],[137,"P-CannonTower-Bullet",32,[-10,-11,-12,-13,-14,-15,-16],[[241,-9,[1,"2eB6S5fH9Gpa6sXL5ogwek"],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-8]],[[8,"12ea43w32ZDAL2+IVCNZlsZ","play",-3],[8,"cc.ParticleSystem","play",-4],[8,"cc.ParticleSystem","play",-5],[8,"cc.ParticleSystem","play",-6],[8,"cc.ParticleSystem","play",-7]],[-2]]],[3,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[134,"Projectile",32,1,[[-17,[242,false,0,-19,[1,"60NA75wIBKrb9UenM7BSXD"],[[12,null],6,0],[66,[4,4294963651]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,5],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4291435445]],[18,0.2767857142857143,[4,4285071381]],[18,1,[4,4282851095]]],[[12,255,0.4888392857142857],[12,0,1]]]]],[229,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-18],[31,13]]],1,4],[3,"ffLh35Rv5Pub/YXZRrDmog",1,0]],[79,"Bullet_Burst_Fragments",32,1,[-20],[3,"77kPImBYpO4qoUMcARek8M",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[113,"Bullet_Burst_Dome",32,1,[-21],[3,"7f/mMQLctLupWl1kxrg8pL",1,0]],[113,"Bullet_Burst_Erupt",32,1,[-22],[3,"6a5g/BsbVIe6yRhZBz18gk",1,0]],[113,"Bullet_Burst_Crossflash",32,1,[-23],[3,"9ctdF1fEBAQo4uOfUo90S3",1,0]],[129,0.3,false,false,5,6,[1,"4aw8Ro5vZKpK3qiuIxnxCq"],[[6,null],6,0],[6],[4,2.5],[0],[0],[0],[0],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.07589285714285715],[18,0.14285714285714285,[4,4292358049]],[18,0.4330357142857143,[4,4282652448]]],[[44,255],[12,0,1]]]]],[37,[0]],[38,true,[36,1,[10,[0.10512820512820513,0.4205128205128205,1],[[40,2,1,-2.6093189964157695,1,-2.6093189964157695,1],[7,2,0.3296296296296296,-1.148148148148149,-1.148148148148149],[437,2,1,1]]]],[36,1,[10,[0,0.14358974358974358,0.9948717948717949],[[7,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[7,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[7,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[15,1,1.5,[10,[0,0.3,1],[[7,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[7,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-24],[31,7]],[546,false,false,0,[1,"60NA75wIBKrb9UenM7BSXD"],[[8,null],6,0],[66,[4,4294963651]],[27,3,0.05,0.1],[0],[0],[4,1],[0],[0],[54,3,6.283185307179586],[0],[27,3,1,1],[0],[0],[4,5],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4291435445]],[18,0.2767857142857143,[4,4285071381]],[18,1,[4,4282851095]]],[[12,255,0.4888392857142857],[12,0,1]]]]],[229,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[59,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[26,[4,6],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[171,true,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-25],[31,9]],[144,"Temporary",32,1,[-26,-27],[3,"7fW+IqqY1ABJgKtUjCjEXf",1,0]],[33,"Projectile Collision Fade Out",32,9,[[244,0.1,-28,[1,"53h3MEGrZHta1cWZlDZLcs"],2,[1,1,1,1],[1,0,0,0]]],[3,"91TFzB1KFDqo3PcLpjArLT",1,0]],[33,"Projectile Fade In",32,9,[[245,0,-29,[1,"eeNRsynBJH3YmBnheBo7iv"],2,[1,0.6,0.6,1]]],[3,"983Y4rFE1Er5oETxRL2kPn",1,0]],[86,0.5,false,false,3,[1,"dc5n3c3wpBgrDQc+cL5LAK"],[[0,null],6,0],[6],[27,3,0.05,0.2],[0],[0],[0],[0],[0],[0],[0],[27,3,0.3,1],[0],[0],[0],[[29,[27,3,8,16]]],[25,true,[20,1,[39,[[18,0.026785714285714315,[4,4293175763]],[18,0.14732142857142858,[4,4291449978]],[18,0.7142857142857143,[4,4282851095]]],[[12,255,0.12946428571428573],[12,0,1]]]]],[435,true,0,true,0.6,0.5,0.17453292519943295,[0]],[38,true,[36,1,[10,[0,1],[[40,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[40,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[133,true,[0],[0],[135,2,3,[10,[0.005128205128205128,1],[[116,-1,1,1,1,1],[116,0.07407407407407407,1.079610538373425,1,1.079610538373425,1]]],[10,[0,1],[[116,-0.3333333333333333,1,1,1,1],[116,-0.007407407407407408,0.3259259259259259,1,0.3259259259259259,1]]]],[4,1]],[19,[0],[0],[0]],[374,0,[15,1,5,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]],[15,1,5,[10,[0,1],[[13,2,1],[13,2,1]]]],[15,1,5,[10,[0,0.14102564102564102],[[116,-0.007407407407407407,-1,1,-1,1],[116,1,7.143434343434343,1,7.143434343434343,1]]]],[0]],[69,true,[0],[0],[15,1,40,[10,[0,1],[[143,1,1,1,1],[116,1,1,1,1,1]]]]],[279,2,2,1,[97,4],[54,3,2]],[24,[0],[0],[6],[6],-30],[31,1]],[434,true,true,0.5,false,false,5,[null,null],4,[1,"39yFXTfNtGxYUbi0PjKyYM"],[6],[4,6],[4,6],[4,6],[0],[4,-1.5707963267948966],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[51,0.08258928571428571],[18,0.1383928571428572,[4,4294145738]],[18,0.859375,[4,4293332504]]],[[12,255,0.1294642857142857],[12,0,1]]]]],[37,[0]],[38,true,[15,1,10,[10,[0,0.27692307692307694,1],[[40,2,0.45555555555555555,1.805555555555556,1,1.805555555555556,1],[7,2,0.8148148148148149,0.741741741741742,0.741741741741742],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[438,true,true,[97,20],[97,180],[196,10.471975511965978,180]],[28,[0],[0]],[24,[0],[0],[6],[6],-31],[439,4,0,2,3]],[129,0.3,false,false,5,5,[1,"2afh8fCupLiYbEXkwFmj9H"],[[4,null],6,0],[6],[4,2.5],[0],[0],[0],[0],[0],[0],[0],[4,0.4],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.14285714285714285,[4,4292358049]],[18,0.4330357142857143,[4,4284233013]]],[[44,255],[12,0,1]]]]],[37,[0]],[92,true,true,[0],[36,1,[10,[0,0.14358974358974358,0.9948717948717949],[[7,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[7,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[7,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[15,1,1.5,[10,[0,0.3,1],[[7,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[7,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[13,2,1]]]],[4,1]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[0]],[28,[0],[0]],[24,[0],[0],[6],[6],-32],[31,5]],[113,"Bullet_Trail",32,1,[8],[3,"48fu0FU+9EVL4gh+tFJ1Oq",1,0]],[430,1,4,2,2,[1,"85ZEf8rc5GG4ynsarsE4M4"],[[10,null],6,0],[6],[4,1],[0],[0],[0],[0],[0],[0],[0],[4,1],[0],[0],[0],[[29,[4,1]]],[25,true,[20,1,[39,[[136],[18,0.5245535714285714,[4,4294946672]],[51,1]],[[44,255]]]]],[37,[0]],[38,true,[36,1,[10,[0,0.5076923076923077,1],[[40,2,1,-0.07222222222222197,1,-0.07222222222222197,1],[13,2,0.8518518518518519],[87,2,1,1,1]]]],[0],[0],[0]],[26,[0],[0],[0],[4,1]],[19,[0],[0],[0]],[21,[0],[0],[0],[0]],[32,[0],[0],[4,-6.283185307179586]],[28,[0],[0]],[187,true,false,[4,5],[4,0.7],[66,[4,4294901974]],[20,1,[39,[[106,[4,4293656746]],[18,0.6383928571428572,[4,4284226069]]],[[12,255,0.8883928571428572],[12,0,1]]]],-33],[31,11]]],0,[0,3,1,0,-1,7,0,5,10,0,5,3,0,5,4,0,5,5,0,5,6,0,5,11,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,15,0,-6,2,0,-7,9,0,-1,16,0,7,8,0,0,2,0,-1,12,0,-1,13,0,-1,14,0,-1,7,0,7,7,0,7,8,0,-1,10,0,-2,11,0,0,10,0,0,11,0,7,12,0,7,13,0,7,14,0,7,16,0,10,1,8,0,15,33],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,8,12,8,-1,8,-1,8,-1,8,-1,8,-1,8],[7,5,204,205,27,26,35,33,7,5,203,138,7,5]],[[[205,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"ROUGHNESS":3}],[[[{"energy":10,"thickness":0.1,"outline_thickness":0.1,"beam_difference":0.1},"mainColor",8,[4,4291733291],"outlineColor",8,[4,4294959520]]],11]]],0,0,[0],[16],[614]],[[[77,"SM_TowerBase_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[16],[6]],[[[76],[55,"SM_TowerBase_01",[-2],[3,"a6UoiMmTtU6YsbaNPx5rqf",-1,0]],[64,"SM_TowerBase_01",1,[[62,-3,[1,"c8x41wezhYTop9GywitTd7"],[0],[45],1]],[3,"52Wr8elKJczKH4c2zJXMeu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,3,1,0,-1,2,0,0,2,0,10,1,3],[0,0],[-1,12],[615,272]],[[[68,".bin",1797920726,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9792,"length":2784,"count":696,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9792,"count":204,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3708244562149048,-0.3708243668079376,7.450580596923828e-9],"maxPosition",8,[1,0.37082427740097046,0.37082439661026,0.14156852662563324]]],-1],0,0,[],[],[]]]]

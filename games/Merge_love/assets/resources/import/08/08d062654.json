[1,["c4EjBPijJOyr8KFgAcrsIr","a6G25+7MhMaZbFnnO9VO5E","924HzmhyFNlL98d6L7qggT","36PIjZDQFHiZWjwRGOBr4h","d1XSxyZwVEKqbG8JddS81S","55JkjkNqdA96LcckzfRioO","c2KCU8gCpK67k+n2u8nl1M"],["node","_parent","_defaultClip","root","temp_mask","imgNode","img","data","mater_light","_effectAsset"],[["cc.Node",["_name","_groupIndex","_active","_prefab","_children","_components","_trs","_contentSize","_parent","_anchorPoint"],0,4,2,9,7,5,1,5],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Prefab",["_name"],2],["158adH/co1MSpdOXLvFVbey",["node","img","imgNode","temp_mask","mater_light"],3,1,1,1,1,6],["cc.Sprite",["node","_materials"],3,1,3],["cc.Animation",["node","_clips","_defaultClip"],3,1,3,6],["38dd37exNtFYoVo4f8yzlre",["node"],3,1],["b0b46KSp1pK6KPdEVc5dGME",["node"],3,1],["cc.Material",["_name","_techniqueData"],2,11],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[1,0,1,2],[4,0,1,1],[5,0,1,2,1],[2,0,2],[0,0,1,4,5,3,6,3],[0,0,5,3,7,2],[0,0,8,4,5,3,6,2],[0,0,4,3,7,9,6,2],[0,0,8,5,3,7,9,2],[0,0,2,8,4,3,3],[3,0,1,2,3,4,1],[1,1,1],[6,0,1],[7,0,1],[8,0,1,2],[9,0,1,2,4]],[[[[3,"temp_furniture_shuichi"],[4,"temp_furniture_shuichi",1,[-6,-7],[[10,-5,-4,-3,-2,8]],[11,-1],[0,0,476.3139720814413,0,0,0,1,1,1,1]],[5,"img",[[1,-8,[0]],[2,-9,[2,3,4],1],[12,-10]],[0,"e18yb+f3NFQp7klWb3EbjC",1],[5,71,100]],[6,"imgNode",1,[2],[[2,-11,[6],5]],[0,"46U1Ms0QRMaa7cVsVRZA4S",1],[0,0,476.3139720814413,0,0,0,1,1,1,1]],[7,"mask",[-12],[0,"deS44sgzpFrLcB94iTm7fh",1],[5,1734,915],[0,1,0.5],[866,0,0,0,0,0,1,1,1,1]],[8,"img",4,[[1,-13,[7]],[13,-14]],[0,"b8e5nRPrBG7JBZIBi0hP3G",1],[5,1732,915],[0,1,0.5]],[9,"temp",false,1,[4],[0,"aeV2O/Md9KkqOSb8xeQn5s",1]]],0,[0,3,1,0,4,4,0,5,3,0,6,2,0,0,1,0,-1,3,0,-2,6,0,0,2,0,0,2,0,0,2,0,0,3,0,-1,5,0,0,5,0,0,5,0,7,1,2,1,3,4,1,6,14],[0,0,0,0,0,0,0,0,0],[-1,2,-1,-2,-3,2,-1,-1,8],[2,1,3,1,0,0,0,4,5]],[[[14,"water3",[{},"0",11,[{"defines":{"USE_TEXTURE":true}},"props",11,[{"_distanceFactor":300,"_waveWidth":0.2,"_timeFactor":-10,"_curWaveDis":0},"_startPos",8,[0,0.42,0.3]]]]]],0,0,[0],[9],[6]],[[[15,"water3",[{"hash":2702570411,"record":null,"name":"water3|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\n  vec2 _startPos;\n  float _distanceFactor;\n  float _timeFactor;\n  float _totalFactor;\n  float _waveWidth;\n  float _curWaveDis;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 dv = _startPos.xy - v_uv0.xy;\n  float dis = sqrt(dv.x * dv.x + dv.y * dv.y);\n  float sinFactor = sin(dis * _distanceFactor + cc_time.x * _timeFactor) * _totalFactor;\n  float discardFactor = clamp(_waveWidth - abs(_curWaveDis - dis), 0.0,1.0) / _waveWidth;\n  vec2 dv1 = normalize(dv);\n  vec2 offset = dv1  * sinFactor * discardFactor;\n  vec2 uv = offset + v_uv0.xy;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 _startPos;\nuniform float _distanceFactor;\nuniform float _timeFactor;\nuniform float _totalFactor;\nuniform float _waveWidth;\nuniform float _curWaveDis;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 dv = _startPos.xy - v_uv0.xy;\n  float dis = sqrt(dv.x * dv.x + dv.y * dv.y);\n  float sinFactor = sin(dis * _distanceFactor + cc_time.x * _timeFactor) * _totalFactor;\n  float discardFactor = clamp(_waveWidth - abs(_curWaveDis - dis), 0.0,1.0) / _waveWidth;\n  vec2 dv1 = normalize(dv);\n  vec2 offset = dv1  * sinFactor * discardFactor;\n  vec2 uv = offset + v_uv0.xy;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ARGS","binding":1,"members":[{"name":"_startPos","type":14,"count":1},{"name":"_distanceFactor","type":13,"count":1},{"name":"_timeFactor","type":13,"count":1},{"name":"_totalFactor","type":13,"count":1},{"name":"_waveWidth","type":13,"count":1},{"name":"_curWaveDis","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"water3|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"_startPos":{"type":14,"value":[0.5,0.5]},"_distanceFactor":{"type":13,"value":[300]},"_timeFactor":{"type":13,"value":[-30]},"_totalFactor":{"type":13,"value":[0.01]},"_waveWidth":{"type":13,"value":[0.5]},"_curWaveDis":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]]]]
[1,["53rzWmHrJNc4YDrZlwxmiK","04gzjcT3xOerAhGiiuUQrY"],["_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.AnimationClip",["_name","_duration","curveData"],1,11],["cc.Material",["_name","_techniqueData"],1]],[[0,0,1,2,4],[1,0,1,2,3],[2,0,1,3]],[[[[0,"room1",[{"hash":1215115024,"record":null,"name":"room1|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform sampler2D texture;\nuniform PROPERTIES {\n   float time;\n   float width;\n   float mu;\n  };\nin mediump vec2 v_uv0;\nin vec4 v_color;\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n  ALPHA_TEST(color);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  #endif\n    color.a = v_uv0.x > time ? 0.0 : 1.0;\n    if (v_uv0.x > time) {\n      float y = 0.5 - v_uv0.y;\n      float t = time + cos(y) * width;\n      float d = v_uv0.x - t;\n      if (d > width) {\n        color.a = 0.0;\n      }\n      else {\n        color.a = v_color.a * ((width - d) / width);\n      }\n    }\n    gl_FragColor = vec4(color.r, color.g, color.b, color.a);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform sampler2D texture;\nuniform float time;\nuniform float width;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n  ALPHA_TEST(color);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n  #endif\n    color.a = v_uv0.x > time ? 0.0 : 1.0;\n    if (v_uv0.x > time) {\n      float y = 0.5 - v_uv0.y;\n      float t = time + cos(y) * width;\n      float d = v_uv0.x - t;\n      if (d > width) {\n        color.a = 0.0;\n      }\n      else {\n        color.a = v_color.a * ((width - d) / width);\n      }\n    }\n    gl_FragColor = vec4(color.r, color.g, color.b, color.a);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PROPERTIES","binding":1,"members":[{"name":"time","type":13,"count":1},{"name":"width","type":13,"count":1},{"name":"mu","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"room1|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"time":{"type":13,"value":[0.5]},"width":{"type":13,"value":[0.05]},"mu":{"type":13,"value":[0.2]},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"furniture_scale",0.3333333333333333,[{"paths":{},"comps":{}},"props",11,[{},"scale",12,[[[{"frame":0},"value",8,[0,0.95,1.1]],[{"frame":0.08333333333333333},"value",8,[0,1.1,0.9]],[{"frame":0.25},"value",8,[0,0.95,1.1]],[{"frame":0.3333333333333333},"value",8,[0,1,1]]],11,11,11,11]]]]],0,0,[],[],[]],[[[0,"brightness",[{"hash":2700854438,"record":null,"name":"brightness|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nin vec4 a_color;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform PROPERTIES{\n   float red;\n   float green;\n   float blue;\n   float bright;\n   };\nin mediump vec2 v_uv0;\nin vec4 v_color;\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  gl_FragColor = vec4(color.r * bright, color.g  * bright, color.b  * bright, color.a);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}","frag":"\nprecision highp float;\nuniform sampler2D texture;\nuniform float bright;\nvarying mediump vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  vec4 color = v_color * texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  gl_FragColor = vec4(color.r * bright, color.g  * bright, color.b  * bright, color.a);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[],"samplers":[]}},"defines":[{"name":"CC_USE_ALPHA_ATLAS_TEXTURE","type":"boolean","defines":[]}],"blocks":[{"name":"PROPERTIES","binding":0,"members":[{"name":"red","type":13,"count":1},{"name":"green","type":13,"count":1},{"name":"blue","type":13,"count":1},{"name":"bright","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"brightness|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"red":{"type":13,"value":[0.5]},"green":{"type":13,"value":[0.5]},"blue":{"type":13,"value":[0.5]},"bright":{"type":13,"value":[1.5]}}}]}]]],0,0,[],[],[]],[[[2,"brightness",{}]],0,0,[0],[0],[0]],[[[1,"furniture_bounce",0.3333333333333333,[{"paths":{},"comps":{}},"props",11,[{"y":[{"frame":0,"value":0,"curve":"quartIn"},{"frame":0.16666666666666666,"value":60},{"frame":0.3333333333333333,"value":0}]},"scale",12,[[[{"frame":0},"value",8,[0,0.95,1.1]],[{"frame":0.08333333333333333},"value",8,[0,1.1,0.9]],[{"frame":0.25},"value",8,[0,0.95,1.1]],[{"frame":0.3333333333333333},"value",8,[0,1,1]]],11,11,11,11]]]]],0,0,[],[],[]],[[[2,"room1",{"0":{"props":{},"defines":{"USE_ALPHA_TEST":true}}}]],0,0,[0],[0],[1]]]]
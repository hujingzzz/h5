[1,["fdoJXLgx1GAa2UhGATlj3o","4fYU/9PatPmYcFh0nkL9yN@f9941","7dj5uJT9FMn6OrOOx83tfK@f9941","24XuY4D69NQ4Y1GOOo+xQO@f9941","52Ix1dYfFLSYYeGZBavDQA@f9941","31nR+Wj4tATIJdNxI43rdq@f9941","93+w9yeMlI+qBx31YFmF0X@f9941","7dj5uJT9FMn6OrOOx83tfK@6c48a","609xlc7CpF67qUiVX2DoHQ"],["node","_customMaterial","_spriteFrame","root","page","guide","display","data","_textureSource","_effectAsset"],[["cc.Node",["_name","_layer","_components","_prefab","_parent","_children","_lpos"],1,9,4,1,2,5],["cc.Sprite",["_sizeMode","_type","node","__prefab","_customMaterial","_spriteFrame","_color"],1,1,4,6,6,5],["cc.Label",["_string","_actualFontSize","_fontSize","_underlineHeight","_lineHeight","_overflow","_isUnderline","_enableWrapText","node","__prefab","_color","_customMaterial"],-5,1,4,5,6],["cc.Node",["_name","_layer","_parent","_components","_prefab","_lpos"],1,1,12,4,5],["cc.Widget",["_alignFlags","_isAbsLeft","_isAbsRight","_isAbsTop","_isAbsBottom","_originalWidth","_originalHeight","node","__prefab"],-4,1,4],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],"cc.SpriteFrame",["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["16232UJ/alDba2Vvgrt+r50",["node","__prefab","tutorial","display","guide","page"],3,1,4,3,1,1,1],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.Button",["_transition","node","__prefab","clickEvents","_hoverColor","_pressedColor"],2,1,4,9,5,5],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.LabelOutline",["node","__prefab","_color"],3,1,4,5],["27c4fQKCrBM8o9JHVqQpX+h",["id","node","__prefab","labels"],2,1,4,2],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1],["cc.Material",["_props","_defines"],1]],[[8,0,2],[10,0,1,2,1],[11,0,1,2,2],[5,1,2,1],[3,0,1,2,3,4,5,3],[0,0,1,4,2,3,6,3],[7,0,2],[0,0,1,5,2,3,3],[0,0,1,4,2,3,3],[0,0,1,4,5,2,3,3],[0,0,1,4,5,2,3,6,3],[3,0,1,2,3,4,3],[4,0,1,2,3,4,7,8,6],[4,0,1,2,3,4,5,6,7,8,8],[9,0,1,2,3,4,5,1],[5,0,1,2,2],[1,0,2,3,6,4,5,2],[1,2,3,4,5,1],[1,1,0,2,3,4,5,3],[1,2,3,1],[12,0,1,1],[13,0,1,2,3,4,5,2],[14,0,1,2,3],[15,0,1,2,1],[16,0,1,2,3,2],[2,0,1,2,4,6,3,8,9,10,11,7],[2,0,1,2,5,3,8,9,10,6],[2,0,1,2,4,3,8,9,10,6],[2,0,1,2,4,5,7,3,8,9,10,8],[17,0,1,2,3,5],[18,0,1,3]],[[[[6,"gameGuide"],[7,"gameGuide",33554432,[-9,-10,-11,-12,-13],[[12,45,false,false,false,false,-2,[0,"22CfXad3hD3LPsiJLqfbl9"]],[14,-6,[0,"6ahY3xGwdArapYto6lpDVW"],[7,8,9],-5,-4,-3],[3,-7,[0,"12X0Ux+G9C0azYeRgC49HL"]],[1,-8,[0,"09Xm2aoDtNyIPPOf3ufX/h"],[5,720,1560]]],[2,"c61mh7K3FIn5638jVhLO5T",-1,0]],[8,"mask",33554432,1,[[16,0,-14,[0,"6anJc0GrFMb6og5gV8foTk"],[4,4278190080],0,1],[20,-15,[0,"b8MRmZaXRN4o5qRxgB+cST"]],[13,45,false,false,false,false,100,100,-16,[0,"7bw+g5nptAg4g+eDvpZwK8"]],[15,200,-17,[0,"7fg6o2nGxFKIznp7soxF17"]],[1,-18,[0,"a7tArcVOVKwLQ/jfYJblDH"],[5,720,1560]]],[2,"7evnRujMRM7q6oVWG65mmB",1,0]],[9,"Popup_floor",33554432,1,[-22,-23],[[17,-19,[0,"51gpJUv09Im6g9XC95TpFK"],4,5],[3,-20,[0,"1fXLj8jLFG2J6neN42NQb1"]],[1,-21,[0,"acws8YfCRH6pN6K/pceu7g"],[5,542,588]]],[2,"e6XP5jsJ5NI7/SHxZzEQHR",1,0]],[10,"bt",33554432,1,[-27,-28],[[21,3,-24,[0,"1c+KXPFzVAvrXwFdVqTBSX"],[[22,"16232UJ/alDba2Vvgrt+r50","onClick",1]],[4,4294967295],[4,4292072403]],[3,-25,[0,"eer2tetqBO/IahFhhn+xRJ"]],[1,-26,[0,"b5MLNsIshJUIsBaBAjU5NR"],[5,128,45]]],[2,"9eqRYCuANBqp53Rz+c+b9c",1,0],[1,180,-240,0]],[11,"New Label",33554432,4,[[-29,[23,-30,[0,"8fq8bWoFdBo7HizsiHNYUv"],[4,4278393179]],[24,37,-32,[0,"c1kcD37oVEm4jd21qVm8MD"],[-31]],[3,-33,[0,"36nty43cFKH6n7vWirlidl"]],[1,-34,[0,"105830B/dJmpSTFff/Ercl"],[5,132,44.32]]],1,4,4,4,4],[2,"f9hKJltlVLnoX7ZkTKOeRq",1,0]],[5,"Popup_floor_frame_1",33554432,3,[[18,1,0,-35,[0,"49ttKtUUZOZpuMmbC9BXKr"],2,3],[3,-36,[0,"2a35ewvBFFgoiK8UVTO9VC"]],[1,-37,[0,"29cPdCDaJL57QrQZSzLv1K"],[5,504,368]]],[2,"2bdfl10dRFAYDDakJxSoKT",1,0],[1,0,90,0]],[4,"spr",33554432,3,[[-38,[3,-39,[0,"83EBAxJQVJbpSvXmP5ibG+"]],[1,-40,[0,"f0HSzR8g5Cwoxv8VPJ96Ij"],[5,478,342]]],1,4,4],[2,"eegTZSywNAvpn0hhlhbDdE",1,0],[1,0,90,0]],[4,"describe",33554432,1,[[-41,[3,-42,[0,"efM0p8e/FG5I3iG5us5LD4"]],[1,-43,[0,"45EZ8P72dAtJaGsh3X9gCe"],[5,500,80]]],1,4,4],[2,"9ftExT4jVHIrgbqxdYGEzJ",1,0],[1,0,-159.97,0]],[4,"page",33554432,1,[[-44,[3,-45,[0,"e34XfzbfRKt5V+iajwNoRr"]],[1,-46,[0,"78QG9NyOVI96WhRQw2liti"],[5,44.48,40.32]]],1,4,4],[2,"2e1A00rn5N1aBPcf6BKHsv",1,0],[1,0,-240,0]],[5,"New Label copy",33554432,4,[[25,"              ",34,34,34,true,3,-47,[0,"74EdCWCQJIE7DbBrq603Sk"],[4,4278393179],6],[3,-48,[0,"38OzyrmRlPEKAT0i2QC9+3"]],[1,-49,[0,"d7tQOg3EFPC6q9VCS4DlQQ"],[5,132.25,42.84]]],[2,"f3ioOcgTpHarESm48ldYXZ",1,0],[1,2,0,0]],[19,7,[0,"61CMjyFp1J0JP3EhRNpYmB"]],[26,"方块会不断上升，点击三个相同的方块即可消除。",32,32,2,0,8,[0,"58VKE3thtJIpkQyaUJ2cif"],[4,4279449983]],[27,"1/3",32,32,32,0,9,[0,"94FVhaXUJFZpKbxAaXeO/1"],[4,4279449983]],[28,"点击继续",32,32,32,2,false,0,5,[0,"5dcENQwFlL4q46XK4zgpGe"],[4,4294901759]]],0,[0,3,1,0,0,1,0,4,13,0,5,12,0,6,11,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,8,0,-4,9,0,-5,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,-1,6,0,-2,7,0,0,4,0,0,4,0,0,4,0,-1,5,0,-2,10,0,-1,14,0,0,5,0,-1,14,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,-1,11,0,0,7,0,0,7,0,-1,12,0,0,8,0,0,8,0,-1,13,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,7,1,49],[0,0,0,0,0,0,0,0,0,0,11,11,12,13,14],[1,2,1,2,1,2,1,-1,-2,-3,1,2,1,1,1],[0,2,0,3,0,4,0,1,5,6,0,1,0,0,0]],[[[29,"builtin-sprite",[{}],[{"hash":67215139,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[6],0,[0],[8],[7]],[[[30,[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[9],[8]]]]

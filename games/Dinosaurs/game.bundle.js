(self.webpackChunkgame_core = self.webpackChunkgame_core || []).push([
    [757], {
        712: function () {
            HTMLCanvasElement.prototype.toBlob || Object.defineProperty(HTMLCanvasElement.prototype, "toBlob", {
                value: function (t, e, n) {
                    for (var i = atob(this.toDataURL(e, n).split(",")[1]), a = i.length, r = a >> 2, s = new Uint8Array(a), o = new Uint32Array(s.buffer, 0, r), l = 0, c = 0; l < r; l++) o[l] = i.charCodeAt(c++) | i.charCodeAt(c++) << 8 | i.charCodeAt(c++) << 16 | i.charCodeAt(c++) << 24;
                    for (var u = 3 & a; u--;) s[c] = i.charCodeAt(c++);
                    t(new Blob([s], {
                        type: e || "image/png"
                    }))
                }
            })
        },
        572: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                FacebookTournament: function () {
                    return d
                }
            });
            var i = n(9),
                a = n(30),
                r = n.n(a),
                s = n(5),
                o = n.n(s),
                l = n(38),
                c = n(342),
                u = n(319),
                h = GameCore.Configs.AppId,
                d = function () {
                    function t() {}
                    var e = t.prototype;
                    return e.createAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.tournament.createAsync(e);
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.shareAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.tournament.shareAsync(e);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.joinAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.tournament.joinAsync(e);
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.postScoreAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.tournament.postScoreAsync(e);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.getTournamentsAsync = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.tournament.getTournamentsAsync();
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), t
                }(),
                f = function () {
                    function t(t) {
                        var e = this;
                        this.facebook = void 0, this.isCalledSubscribeBot = !1, this.isCalledCreateShortcut = !1, this.requestTournamentAsync = function () {
                            var t = (0, i.default)(o().mark((function t(n) {
                                var i;
                                return o().wrap((function (t) {
                                    for (;;) switch (t.prev = t.next) {
                                        case 0:
                                            return t.prev = 0, t.next = 3, e.facebook.getTournamentAsync();
                                        case 3:
                                            return t.next = 5, e.facebook.tournament.shareAsync({
                                                score: n
                                            });
                                        case 5:
                                            t.next = 12;
                                            break;
                                        case 7:
                                            return t.prev = 7, t.t0 = t.catch(0), i = GameSDK.player.getName(), t.next = 12, e.facebook.tournament.createAsync({
                                                initialScore: n,
                                                config: {
                                                    tournamentTitle: i + "'s Tournament"
                                                }
                                            });
                                        case 12:
                                        case "end":
                                            return t.stop()
                                    }
                                }), t, null, [
                                    [0, 7]
                                ])
                            })));
                            return function (e) {
                                return t.apply(this, arguments)
                            }
                        }(), this.facebook = t
                    }
                    var e = t.prototype;
                    return e.switchAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameCore.Utils.Valid.isValueChangeAsync(window.__fbGameReady, !0);
                                    case 2:
                                        return t.next = 4, GameSDK.context.switchAsync(e);
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.chooseAsync = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, GameCore.Utils.Valid.isValueChangeAsync(window.__fbGameReady, !0);
                                    case 3:
                                        return t.next = 5, GameSDK.context.chooseAsync({
                                            filters: ["INCLUDE_EXISTING_CHALLENGES"],
                                            minSize: 2,
                                            maxSize: 2
                                        });
                                    case 5:
                                    case 15:
                                        return t.abrupt("return", GameSDK.context.getID());
                                    case 8:
                                        if (t.prev = 8, t.t0 = t.catch(0), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code"))) {
                                            t.next = 16;
                                            break
                                        }
                                        t.t1 = t.t0.code, t.next = "USER_INPUT" === t.t1 ? 14 : "SAME_CONTEXT" === t.t1 ? 15 : 16;
                                        break;
                                    case 14:
                                        return t.abrupt("return", !1);
                                    case 16:
                                        return t.abrupt("return", null);
                                    case 17:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 8]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.createAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, GameCore.Utils.Valid.isValueChangeAsync(window.__fbGameReady, !0);
                                    case 3:
                                        return t.next = 5, GameSDK.context.createAsync("" + e);
                                    case 5:
                                    case 15:
                                        return t.abrupt("return", GameSDK.context.getID());
                                    case 8:
                                        if (t.prev = 8, t.t0 = t.catch(0), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code"))) {
                                            t.next = 16;
                                            break
                                        }
                                        t.t1 = t.t0.code, t.next = "USER_INPUT" === t.t1 ? 14 : "SAME_CONTEXT" === t.t1 ? 15 : 16;
                                        break;
                                    case 14:
                                        return t.abrupt("return", !1);
                                    case 16:
                                        return t.abrupt("return", null);
                                    case 17:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 8]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.getPlayerToken = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            var e;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.player.getSignedPlayerInfoAsync();
                                    case 2:
                                        return e = t.sent, t.abrupt("return", e.getSignature());
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.getContextPlayers = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            var n, i;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, GameSDK.context.getPlayersAsync();
                                    case 3:
                                        return n = t.sent, i = [], n.forEach((function (t) {
                                            var n = t.getID();
                                            if (n !== e) {
                                                var a = t.getName();
                                                if (a) {
                                                    var r = t.getPhoto();
                                                    i.push(new c.default(n, a, r).toObject())
                                                }
                                            }
                                        })), t.abrupt("return", GameCore.Utils.Array.unique(i));
                                    case 9:
                                        return t.prev = 9, t.t0 = t.catch(0), t.abrupt("return", []);
                                    case 13:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 9]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.shareAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.shareAsync(e);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.sendMessage = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            var n, i, a, r, s, l;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = e.data, i = e.image, a = e.template, r = e.cta, s = e.text, l = {
                                            data: n,
                                            image: i,
                                            action: "CUSTOM",
                                            template: a,
                                            cta: r,
                                            text: s,
                                            strategy: "IMMEDIATE",
                                            notification: "PUSH"
                                        }, t.next = 4, GameSDK.updateAsync(l);
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.inviteAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.inviteAsync(e);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.postSessionScoreAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.postSessionScoreAsync(e);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.getRewardedVideoAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.getRewardedVideoAsync(e);
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.getInterstitialAdAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.getInterstitialAdAsync(e);
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.getContextID = function () {
                        return GameSDK.context.getID()
                    }, e.attemptToAddShortcut = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            var e, n, i, a, r;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (!this.isCalledCreateShortcut) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 2:
                                        if (t.prev = 2, "ANDROID" !== GameSDK.getPlatform()) {
                                            t.next = 6;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 6:
                                        return t.next = 8, GameSDK.player.getDataAsync(["lastCallCreateShortcut"]);
                                    case 8:
                                        if (t.t0 = t.sent, t.t0) {
                                            t.next = 11;
                                            break
                                        }
                                        t.t0 = {};
                                    case 11:
                                        if (e = t.t0, !(n = e.lastCallCreateShortcut) || !(0, u.checkIsToday)(+n)) {
                                            t.next = 15;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 15:
                                        if (i = Date.now(), GameSDK.player.setDataAsync({
                                                lastCallCreateShortcut: i
                                            }), this.isSupportAPI("canCreateShortcutAsync")) {
                                            t.next = 20;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 20:
                                        return t.next = 22, GameSDK.canCreateShortcutAsync();
                                    case 22:
                                        if (!t.sent) {
                                            t.next = 40;
                                            break
                                        }
                                        return a = l.AnalyticsEvents.SHORTCUT_CREATE, r = l.AnalyticsEvents.SHORTCUT_CREATE_POPUP, this.isCalledCreateShortcut = !0, window.game.analytics.event(r), t.prev = 27, t.next = 30, GameCore.Utils.Valid.isValueChangeAsync(window.__fbGameReady, !0);
                                    case 30:
                                        return t.next = 32, GameSDK.createShortcutAsync();
                                    case 32:
                                        return window.game.analytics.event(a, {
                                            success: !0
                                        }), t.abrupt("return", !0);
                                    case 36:
                                        return t.prev = 36, t.t1 = t.catch(27), window.game.analytics.event(a, {
                                            success: !1
                                        }), t.abrupt("return", !1);
                                    case 40:
                                        return t.abrupt("return", !1);
                                    case 43:
                                        return t.prev = 43, t.t2 = t.catch(2), t.abrupt("return", !1);
                                    case 46:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [2, 43],
                                [27, 36]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.attemptToSubscribeBot = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            var e, n, i, a, r;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (!this.isCalledSubscribeBot) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 2:
                                        if (t.prev = 2, this.isSupportAPI("player.canSubscribeBotAsync")) {
                                            t.next = 6;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 6:
                                        return t.next = 8, GameSDK.player.canSubscribeBotAsync();
                                    case 8:
                                        if (!t.sent) {
                                            t.next = 34;
                                            break
                                        }
                                        return t.next = 12, GameSDK.player.getDataAsync(["lastCallSubscribeBot"]);
                                    case 12:
                                        if (e = t.sent, !(n = e.lastCallSubscribeBot) || !(0, u.checkIsToday)(+n)) {
                                            t.next = 16;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 16:
                                        return i = Date.now(), GameSDK.player.setDataAsync({
                                            lastCallSubscribeBot: i
                                        }), a = l.AnalyticsEvents.BOT_SUBSCRIBE, r = l.AnalyticsEvents.BOT_SUBSCRIBE_POPUP, this.isCalledSubscribeBot = !0, window.game.analytics.event(r), t.prev = 21, t.next = 24, GameCore.Utils.Valid.isValueChangeAsync(window.__fbGameReady, !0);
                                    case 24:
                                        return t.next = 26, GameSDK.player.subscribeBotAsync();
                                    case 26:
                                        return window.game.analytics.event(a, {
                                            success: !0
                                        }), t.abrupt("return", !0);
                                    case 30:
                                        return t.prev = 30, t.t0 = t.catch(21), window.game.analytics.event(a, {
                                            success: !1
                                        }), t.abrupt("return", !1);
                                    case 34:
                                        return t.abrupt("return", !1);
                                    case 37:
                                        return t.prev = 37, t.t1 = t.catch(2), t.abrupt("return", !1);
                                    case 40:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [2, 37],
                                [21, 30]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.matchPlayerAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e, n, i) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, this.isSupportAPI("checkCanPlayerMatchAsync")) {
                                            t.next = 4;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 4:
                                        return t.next = 6, GameSDK.checkCanPlayerMatchAsync();
                                    case 6:
                                        if (t.sent) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 9:
                                        return t.next = 11, GameSDK.matchPlayerAsync(e, n, i);
                                    case 11:
                                        return t.abrupt("return", !0);
                                    case 14:
                                        return t.prev = 14, t.t0 = t.catch(0), t.abrupt("return", !1);
                                    case 17:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 14]
                            ])
                        })));
                        return function (e, n, i) {
                            return t.apply(this, arguments)
                        }
                    }(), e.setLoadingProgress = function (t) {
                        GameSDK.setLoadingProgress(t)
                    }, e.getLocale = function () {
                        return GameSDK.getLocale() || "en"
                    }, e.injectTournament = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            var e;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (!GameCore.Configs.Tournament.UseMock) {
                                            t.next = 8;
                                            break
                                        }
                                        return t.next = 4, n.e(357).then(n.bind(n, 723));
                                    case 4:
                                        e = t.sent.default, this.facebook.tournament = new e, t.next = 9;
                                        break;
                                    case 8:
                                        this.facebook.tournament = new d;
                                    case 9:
                                        this.facebook.getTournamentAsync = this.getTournamentAsync, this.facebook.requestTournamentAsync = this.requestTournamentAsync;
                                    case 11:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.getTournamentAsync = function () {
                        var t = (0, i.default)(o().mark((function t() {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.getTournamentAsync();
                                    case 2:
                                        return t.abrupt("return", t.sent);
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e.sendNotificationAsync = function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            var n, i, a, r;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, n = e.href, i = e.ref, a = e.message, r = e.delayTime, t.next = 5, FBInstant.graphApi.requestAsync("/me/notifications", "POST", {
                                            ref: i,
                                            href: n || "https://fb.gg/play/" + h,
                                            template: a,
                                            scheduleInterval: r
                                        });
                                    case 5:
                                        t.next = 10;
                                        break;
                                    case 7:
                                        t.prev = 7, t.t0 = t.catch(0);
                                    case 10:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 7]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), e.isSupportAPI = function (t) {
                        var e;
                        return r()(e = GameSDK.getSupportedAPIs()).call(e, t)
                    }, t
                }();
            e.default = f
        },
        643: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(473),
                l = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).instance = void 0, i.placementId = void 0, i.instance = null, i.placementId = n, i
                    }(0, a.default)(e, t), e.setGame = function (t) {
                        self.game = t
                    };
                    var n = e.prototype;
                    return n.loadAsync = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (this.status === GameCore.Ads.Status.IDLE) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 2:
                                        return t.prev = 2, this.status = GameCore.Ads.Status.LOADING, t.next = 6, this.createInstanceByType(this.type);
                                    case 6:
                                        if (this.instance = t.sent, null !== this.instance) {
                                            t.next = 9;
                                            break
                                        }
                                        throw new GameCore.Ads.AdError("AD_INSTANCE_NOT_INITIATED", "Ad instance didn't initiated.");
                                    case 9:
                                        return t.next = 11, this.instance.loadAsync();
                                    case 11:
                                        this.status = GameCore.Ads.Status.FILLED, t.next = 19;
                                        break;
                                    case 14:
                                        throw t.prev = 14, t.t0 = t.catch(2), this.status = GameCore.Ads.Status.IDLE, this.instance = null, t.t0;
                                    case 19:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [2, 14]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.showAsync = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e, n;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, this.status === GameCore.Ads.Status.FILLED) {
                                            t.next = 3;
                                            break
                                        }
                                        throw new GameCore.Ads.AdError("AD_NOT_FILLED", "Ads no fill.");
                                    case 3:
                                        if (this.status = GameCore.Ads.Status.SHOWING, null !== this.instance) {
                                            t.next = 6;
                                            break
                                        }
                                        throw new GameCore.Ads.AdError("AD_INSTANCE_NOT_INITIATED", "Ad instance didn't initiated.");
                                    case 6:
                                        return e = this.getSceneName(), this.type === GameCore.Ads.Types.INTERSTITIAL && self.game.analytics.showInterstitialAd(e), this.type === GameCore.Ads.Types.REWARDED && self.game.analytics.showRewardedVideoAd(e), t.next = 11, this.instance.showAsync();
                                    case 11:
                                        this.status = GameCore.Ads.Status.IDLE, this.instance = null, t.next = 21;
                                        break;
                                    case 15:
                                        throw t.prev = 15, t.t0 = t.catch(0), t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code") && "ADS_NOT_LOADED" === t.t0.code ? this.status = GameCore.Ads.Status.FILLED : (this.status = GameCore.Ads.Status.IDLE, this.instance = null), n = this.getSceneName(), self.game.analytics.showAdFail(this.type, n, t.t0), t.t0;
                                    case 21:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 15]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getStatus = function () {
                        return this.status
                    }, n.createInstanceByType = function () {
                        var t = (0, i.default)(s().mark((function t(e) {
                            var n;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        n = self.game.facebook, t.t0 = e, t.next = t.t0 === GameCore.Ads.Types.REWARDED ? 4 : t.t0 === GameCore.Ads.Types.INTERSTITIAL ? 7 : 10;
                                        break;
                                    case 4:
                                        return t.next = 6, n.getRewardedVideoAsync(this.placementId);
                                    case 6:
                                    case 9:
                                        return t.abrupt("return", t.sent);
                                    case 7:
                                        return t.next = 9, n.getInterstitialAdAsync(this.placementId);
                                    case 10:
                                        return t.abrupt("return", null);
                                    case 11:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.getSceneName = function () {
                        try {
                            var t = self.game.globalScene;
                            return t instanceof o.default ? t.getCurrentScene().scene.getSceneName() : "unknown"
                        } catch (e) {
                            return "unknown"
                        }
                    }, e
                }(GameCore.Ads.AdInstance);
            e.default = l
        },
        172: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                get: function () {
                    return T
                },
                post: function () {
                    return S
                }
            });
            var i = n(29),
                a = n(9),
                r = n(5),
                s = n.n(r),
                o = n(90),
                l = n.n(o),
                c = n(0),
                u = n(47),
                h = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "BadRequest", i.message = e || "This request is bad", i.payload = n, i
                    }
                    return (0, c.default)(e, t), e
                }((0, u.default)(Error)),
                d = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "RequestTimeout", i.message = e || "This request is timeout", i.payload = n, i
                    }
                    return (0, c.default)(e, t), e
                }((0, u.default)(Error)),
                f = n(319),
                p = GameCore.Configs,
                g = p.AppId,
                v = p.Network,
                m = function (t) {
                    if (!t.ok) throw new h(null, {
                        response: t
                    })
                },
                E = function () {
                    var t = window.game.auth.getToken();
                    return {
                        token: t,
                        timeout: v.Timeout,
                        headers: {
                            Authorization: "Bearer " + t,
                            "Content-Type": "application/json"
                        }
                    }
                },
                y = function (t, e, n, i) {
                    return (0, a.default)(s().mark((function a() {
                        var r, o, c, u, f;
                        return s().wrap((function (a) {
                            for (;;) switch (a.prev = a.next) {
                                case 0:
                                    return a.prev = 0, r = t + "/apps/" + g + "/" + e, o = new AbortController, n.signal = o.signal, c = setTimeout((function () {
                                        o.abort()
                                    }), n.timeout), GameCore.Utils.Valid.isObject(i) && (n.body = l()(i)), a.next = 8, fetch(r, n);
                                case 8:
                                    return u = a.sent, clearTimeout(c), m(u), a.next = 13, u.json();
                                case 13:
                                    if (a.t0 = a.sent, a.t0) {
                                        a.next = 16;
                                        break
                                    }
                                    a.t0 = {};
                                case 16:
                                    return f = a.t0, a.abrupt("return", f);
                                case 20:
                                    if (a.prev = 20, a.t1 = a.catch(0), !(a.t1 instanceof h)) {
                                        a.next = 24;
                                        break
                                    }
                                    return a.abrupt("return", null);
                                case 24:
                                    if (!(a.t1 instanceof Object && GameCore.Utils.Object.hasOwn(a.t1, "name"))) {
                                        a.next = 27;
                                        break
                                    }
                                    if ("AbortError" !== a.t1.name) {
                                        a.next = 27;
                                        break
                                    }
                                    throw new d(null);
                                case 27:
                                    throw a.t1;
                                case 28:
                                case "end":
                                    return a.stop()
                            }
                        }), a, null, [
                            [0, 20]
                        ])
                    })))
                },
                A = function () {
                    var t = (0, a.default)(s().mark((function t(e, n) {
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, t.abrupt("return", e());
                                case 4:
                                    if (t.prev = 4, t.t0 = t.catch(0), !(t.t0 instanceof d && n > 0)) {
                                        t.next = 18;
                                        break
                                    }
                                    return t.prev = 7, t.next = 10, (0, f.sleepAsync)(600);
                                case 10:
                                    return t.next = 12, A(e, n - 1);
                                case 12:
                                    return t.abrupt("return", t.sent);
                                case 15:
                                    return t.prev = 15, t.t1 = t.catch(7), t.abrupt("return", {});
                                case 18:
                                    if (!(t.t0 instanceof d)) {
                                        t.next = 20;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 20:
                                    return t.abrupt("return", {});
                                case 22:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 4],
                            [7, 15]
                        ])
                    })));
                    return function (e, n) {
                        return t.apply(this, arguments)
                    }
                }(),
                T = function () {
                    var t = (0, a.default)(s().mark((function t(e, n, a, r) {
                        var o, l;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return void 0 === n && (n = {}), void 0 === r && (r = v.Retries), t.prev = 2, o = (0, i.default)({}, E(), n, {
                                        method: "GET"
                                    }), l = y(a, e, o), t.next = 7, A(l, r);
                                case 7:
                                    return t.abrupt("return", t.sent);
                                case 10:
                                    return t.prev = 10, t.t0 = t.catch(2), t.abrupt("return", {});
                                case 14:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [2, 10]
                        ])
                    })));
                    return function (e, n, i, a) {
                        return t.apply(this, arguments)
                    }
                }(),
                S = function () {
                    var t = (0, a.default)(s().mark((function t(e, n, a, r, o) {
                        var l, c;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return void 0 === a && (a = {}), void 0 === o && (o = v.Retries), t.prev = 2, l = (0, i.default)({}, E(), a, {
                                        method: "POST"
                                    }), c = y(r, e, l, n), t.next = 7, A(c, o);
                                case 7:
                                    return t.abrupt("return", t.sent);
                                case 10:
                                    return t.prev = 10, t.t0 = t.catch(2), t.abrupt("return", {});
                                case 14:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [2, 10]
                        ])
                    })));
                    return function (e, n, i, a, r) {
                        return t.apply(this, arguments)
                    }
                }()
        },
        192: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                CONTEXT_GAME_MODE_DETECTED: function () {
                    return r
                },
                CONTEXT_GAME_MODE_REQUESTED: function () {
                    return s
                },
                CONTEXT_PROCESSED: function () {
                    return a
                },
                CONTEXT_RECEIVED: function () {
                    return i
                },
                MESSAGES_SENT_REMOVE: function () {
                    return l
                },
                MESSAGES_SENT_UPDATE: function () {
                    return o
                },
                SCENE_KEY_UPDATE: function () {
                    return c
                }
            });
            var i = "CONTEXT_RECEIVED",
                a = "CONTEXT_PROCESSED",
                r = "CONTEXT_GAME_MODE_DETECTED",
                s = "CONTEXT_GAME_MODE_REQUESTED",
                o = "MESSAGES_SENT_UPDATE",
                l = "MESSAGES_SENT_REMOVE",
                c = "SCENE_KEY_UPDATE"
        },
        38: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                AnalyticsEvents: function () {
                    return i.AnalyticsEvents
                }
            });
            var i = n(341)
        },
        195: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                CHALLENGE_FRIENDS_MESSAGE: function () {
                    return o
                },
                CHALLENGE_FRIEND_MATCH: function () {
                    return r
                },
                MATCHING_GROUP_MATCH: function () {
                    return s
                },
                SHARE_INVITE: function () {
                    return i
                },
                TOURNAMENT: function () {
                    return a
                }
            });
            var i = "share_invite",
                a = "tournament",
                r = "challenge_friend_match",
                s = "matching_group_match",
                o = "challenge_friends_message"
        },
        196: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                SampleOpponent: function () {
                    return r
                }
            });
            var i = n(342),
                a = n(132),
                r = new i.default("10", "Your Friend", a.default.AVATAR.FILE).toObject()
        },
        455: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(29),
                a = n(65),
                r = n.n(a),
                s = n(189),
                o = n.n(s),
                l = n(343),
                c = GameCore.Configs.Gameplay,
                u = c.StartCoins,
                h = c.MaximumMeleeLevel,
                d = c.MaximumRangedLevel,
                f = GameCore.Utils,
                p = f.Valid,
                g = f.Object,
                v = function () {
                    function t(t) {
                        this.coins = void 0, this.settings = void 0, this.gameData = void 0, this.userGuideDisplays = void 0, this.freeCoinsLastUsedTime = void 0, this.offlineRewardLastCheck = void 0, this.validateUnitData = function (t) {
                            var e = t.split("/");
                            if (3 !== e.length) return !1;
                            var n = [],
                                i = e[0].split("-");
                            if (5 !== i.length) return !1;
                            n.push.apply(n, i);
                            var a = e[1].split("-");
                            if (5 !== a.length) return !1;
                            n.push.apply(n, a);
                            var s = e[2].split("-");
                            return 5 === s.length && (n.push.apply(n, s), !n.some((function (t) {
                                if ("0" === t[0]) return !1;
                                if ("r" !== t[0] && "m" !== t[0]) return !0;
                                var e = r()(t.substring(1));
                                return e < 1 || e > 11
                            })))
                        }, this.setupDefaultData(), this.updateCoins(t), this.updateSettings(t), this.updateGameData(t), this.updateUserGuideDisplays(t), this.updateFreeCoinsLastUsedTime(t), this.updateOfflineRewardLastCheck(t)
                    }
                    var e = t.prototype;
                    return e.setupDefaultData = function () {
                        this.coins = {
                            suffix: 0,
                            baseValue: 1e3 * u
                        }, this.settings = (0, i.default)({}, l.defaultSettings);
                        for (var t = {
                                MELEE: {},
                                RANGED: {}
                            }, e = 1; e <= h; e++) t.MELEE[e] = 0;
                        for (var n = 1; n <= d; n++) t.RANGED[n] = 0;
                        this.gameData = {
                            selectedLevel: 0,
                            playerUnitData: "0-0-0-0-0/0-0-0-0-0/0-0-m1-0-0",
                            playerLevelProgress: 0,
                            meleeUnlockedUnitLevel: 0,
                            rangedUnlockedUnitLevel: 0,
                            unitScreenAdWatchedCount: t
                        }, this.userGuideDisplays = 0, this.freeCoinsLastUsedTime = 0, this.offlineRewardLastCheck = 0
                    }, e.updateCoins = function (t) {
                        var e = t.coins;
                        !1 !== p.isObject(e) && (g.hasOwn(e, "suffix") && p.isNumber(e.suffix) && (this.coins.suffix = e.suffix), g.hasOwn(e, "baseValue") && p.isNumber(e.baseValue) && (this.coins.baseValue = e.baseValue))
                    }, e.updateSettings = function (t) {
                        var e = t.settings;
                        !1 !== p.isObject(e) && (g.hasOwn(e, "sound") && p.isBoolean(e.sound) && (this.settings.sound = e.sound), g.hasOwn(e, "music") && p.isBoolean(e.music) && (this.settings.music = e.music), g.hasOwn(e, "vibrate") && p.isBoolean(e.vibrate) && (this.settings.vibrate = e.vibrate))
                    }, e.updateGameData = function (t) {
                        var e = t.gameData;
                        if (!1 !== p.isObject(e)) {
                            if (g.hasOwn(e, "selectedLevel") && p.isNumber(e.selectedLevel) && (this.gameData.selectedLevel = e.selectedLevel), g.hasOwn(e, "playerUnitData"))
                                if (p.isString(e.playerUnitData)) this.validateUnitData(e.playerUnitData) && (this.gameData.playerUnitData = e.playerUnitData);
                            if (g.hasOwn(e, "playerLevelProgress") && p.isNumber(e.playerLevelProgress) && (this.gameData.playerLevelProgress = e.playerLevelProgress), g.hasOwn(e, "playerLevelProgress") && p.isNumber(e.meleeUnlockedUnitLevel) && (this.gameData.meleeUnlockedUnitLevel = e.meleeUnlockedUnitLevel), g.hasOwn(e, "rangedUnlockedUnitLevel") && p.isNumber(e.rangedUnlockedUnitLevel) && (this.gameData.rangedUnlockedUnitLevel = e.rangedUnlockedUnitLevel), g.hasOwn(e, "unitScreenAdWatchedCount") && p.isObject(e.unitScreenAdWatchedCount)) {
                                var n = e.unitScreenAdWatchedCount;
                                if (p.isObject(n.MELEE))
                                    for (var i = 0, a = o()(n.MELEE); i < a.length; i++) {
                                        var s = a[i],
                                            l = s[0],
                                            c = s[1],
                                            u = r()(l);
                                        p.isNumber(u) && p.isNumber(c) && (this.gameData.unitScreenAdWatchedCount.MELEE[u] = c)
                                    }
                                if (p.isObject(n.RANGED))
                                    for (var h = 0, d = o()(n.RANGED); h < d.length; h++) {
                                        var f = d[h],
                                            v = f[0],
                                            m = f[1],
                                            E = r()(v);
                                        p.isNumber(E) && p.isNumber(m) && (this.gameData.unitScreenAdWatchedCount.RANGED[E] = m)
                                    }
                            }
                        }
                    }, e.updateUserGuideDisplays = function (t) {
                        var e = t.userGuideDisplays;
                        !1 !== p.isNumber(e) && (this.userGuideDisplays = e)
                    }, e.updateFreeCoinsLastUsedTime = function (t) {
                        var e = t.freeCoinsLastUsedTime;
                        !1 !== p.isNumber(e) && (this.freeCoinsLastUsedTime = e)
                    }, e.updateOfflineRewardLastCheck = function (t) {
                        var e = t.offlineRewardLastCheck;
                        !1 !== p.isNumber(e) && (this.offlineRewardLastCheck = e)
                    }, e.toObject = function () {
                        return {
                            coins: this.coins,
                            settings: this.settings,
                            gameData: this.gameData,
                            userGuideDisplays: this.userGuideDisplays,
                            freeCoinsLastUsedTime: this.freeCoinsLastUsedTime,
                            offlineRewardLastCheck: this.offlineRewardLastCheck
                        }
                    }, e.convertToPlayerData = function () {
                        var t = this.gameData,
                            e = this.coins,
                            n = e.baseValue,
                            i = e.suffix;
                        return {
                            settings: this.settings,
                            customFields: {
                                coinBaseValue: n,
                                coinSuffixValue: i,
                                freeCoinsLastUsedTime: this.freeCoinsLastUsedTime,
                                offlineRewardLastCheck: this.offlineRewardLastCheck,
                                selectedLevel: t.selectedLevel,
                                playerUnitData: t.playerUnitData,
                                playerLevelProgress: t.playerLevelProgress,
                                meleeUnlockedUnitLevel: t.meleeUnlockedUnitLevel,
                                rangedUnlockedUnitLevel: t.rangedUnlockedUnitLevel,
                                unitScreenAdWatchedCount: t.unitScreenAdWatchedCount
                            },
                            userGuideDisplays: this.userGuideDisplays
                        }
                    }, e.convertToFacebookData = function (t) {
                        var e = t.settings,
                            n = t.customFields,
                            i = t.userGuideDisplays,
                            a = n.selectedLevel,
                            r = n.coinBaseValue,
                            s = n.coinSuffixValue,
                            o = n.freeCoinsLastUsedTime,
                            l = n.offlineRewardLastCheck,
                            c = n.playerUnitData,
                            u = n.playerLevelProgress,
                            h = n.meleeUnlockedUnitLevel,
                            d = n.rangedUnlockedUnitLevel,
                            f = n.unitScreenAdWatchedCount;
                        return this.settings = e, this.userGuideDisplays = i, this.freeCoinsLastUsedTime = o, this.offlineRewardLastCheck = l, this.coins.suffix = s, this.coins.baseValue = r, this.gameData.selectedLevel = a, this.gameData.playerUnitData = c, this.gameData.playerLevelProgress = u, this.gameData.meleeUnlockedUnitLevel = h, this.gameData.rangedUnlockedUnitLevel = d, this.gameData.unitScreenAdWatchedCount = f, this.toObject()
                    }, t
                }();
            e.default = v
        },
        588: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidContextId", i.message = e || "This contextId is not valid", i.payload = n, i
                    }
                    return (0, i.default)(e, t), e
                }((0, n(47).default)(Error));
            e.default = a
        },
        706: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "WideFrameRenderFail", i.message = e || "Wide frame render fail", i.payload = n, i
                    }
                    return (0, i.default)(e, t), e
                }((0, n(47).default)(Error));
            e.default = a
        },
        66: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(149),
                a = function () {
                    function t(t, e) {
                        if (this.scene = void 0, this.config = void 0, this.isStarted = void 0, this.tween = void 0, !(e.targets.length < 1)) {
                            this.buildConfig(t, e);
                            var n = this.config.targets[0].scene;
                            n instanceof Phaser.Scene && (this.scene = n, this.isStarted = !1, this.tween = n.tweens.create(this.config))
                        }
                    }
                    var e = t.prototype;
                    return e.buildConfig = function (t, e) {
                        this.config = (0, i.merge)(t, e)
                    }, e.play = function () {
                        this.tween && (this.isStarted && this.tween.hasStarted ? this.restart() : (this.tween.play(!0), this.isStarted = !0))
                    }, e.restart = function () {
                        var t;
                        null == (t = this.tween) || t.restart()
                    }, e.stop = function () {
                        var t;
                        null == (t = this.tween) || t.stop()
                    }, e.remove = function () {
                        var t;
                        null == (t = this.tween) || t.remove()
                    }, e.next = function (t) {
                        return this.tween ? (this.tween.off(Phaser.Tweens.Events.TWEEN_COMPLETE, t), this.tween.once(Phaser.Tweens.Events.TWEEN_COMPLETE, t), this.tween) : null
                    }, t
                }();
            e.default = a
        },
        346: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(66),
                s = {
                    targets: [],
                    repeat: -1,
                    yoyo: !0,
                    duration: 33,
                    ease: Phaser.Math.Easing.Sine.InOut,
                    props: {
                        x: 5
                    }
                },
                o = function (t) {
                    function e(e) {
                        var n, a, r;
                        return (r = t.call(this, s, e) || this).posX = void 0, r.handleSwitchPosition = function () {
                            var t;
                            r.posX = -r.posX, null == (t = r.tween) || t.updateTo("x", -r.posX)
                        }, null != (n = r.config) && n.props ? (r.posX = r.config.props.x, null == (a = r.tween) || a.on(Phaser.Tweens.Events.TWEEN_REPEAT, r.handleSwitchPosition), r) : (0, i.default)(r)
                    }
                    return (0, a.default)(e, t), e
                }(r.default);
            e.default = o
        },
        467: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    duration: 400,
                    ease: n(468).default,
                    props: {
                        scale: "-=0.1"
                    }
                },
                s = function (t) {
                    function e(e) {
                        return t.call(this, r, e) || this
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        468: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(345),
                a = n.n(i)()(.48, 1.57, .6, .83);
            e.default = a
        },
        326: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    duration: 600,
                    ease: Phaser.Math.Easing.Cubic.Out,
                    props: {
                        alpha: {
                            start: 0,
                            from: 0,
                            to: 1
                        }
                    }
                },
                s = function (t) {
                    function e(e) {
                        return t.call(this, r, e) || this
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        460: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    props: {
                        alpha: {
                            duration: 500,
                            value: {
                                start: 0,
                                from: 0,
                                to: 1
                            },
                            ease: Phaser.Math.Easing.Cubic.Out
                        },
                        scale: {
                            duration: 1e3,
                            value: {
                                start: .8,
                                from: .8,
                                to: 1
                            },
                            ease: Phaser.Math.Easing.Elastic.Out,
                            easeParams: [.1, .45]
                        }
                    }
                },
                s = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, r, e) || this).baseScales = void 0, n
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        116: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    props: {
                        alpha: {
                            start: 0,
                            to: 1,
                            duration: 500,
                            ease: Phaser.Math.Easing.Cubic.Out
                        },
                        scale: {
                            start: .8,
                            to: 1,
                            duration: 1e3,
                            ease: Phaser.Math.Easing.Elastic.Out,
                            easeParams: [.1, .45]
                        }
                    },
                    delay: 0
                },
                s = function (t) {
                    function e(e) {
                        return t.call(this, r, e) || this
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        115: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    duration: 600,
                    ease: Phaser.Math.Easing.Quadratic.Out,
                    props: {
                        alpha: {
                            start: 1,
                            from: 1,
                            to: 0
                        }
                    }
                },
                s = function (t) {
                    function e(e) {
                        return t.call(this, r, e) || this
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        726: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(66),
                r = {
                    targets: [],
                    duration: 300,
                    ease: n(468).default,
                    props: {
                        scale: {
                            from: 1.2,
                            to: 1
                        }
                    }
                },
                s = function (t) {
                    function e(e) {
                        return t.call(this, r, e) || this
                    }
                    return (0, i.default)(e, t), e
                }(a.default);
            e.default = s
        },
        461: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(66),
                s = {
                    targets: [],
                    duration: 1e3,
                    ease: Phaser.Math.Easing.Quadratic.InOut,
                    props: {
                        scale: .2
                    }
                },
                o = function (t) {
                    function e(e) {
                        var n, a;
                        (a = t.call(this, s, e) || this).spline = void 0, a.createCounter = function (t, e) {
                            var n = a.config.onCurveUpdate,
                                i = "function" === typeof n ? n : null;
                            e.forEach((function (e, n) {
                                if (a.scene) {
                                    var r = t.data[n],
                                        s = r.duration,
                                        o = r.delay,
                                        l = new Phaser.Math.Vector2;
                                    a.scene.tweens.addCounter({
                                        delay: o,
                                        duration: s,
                                        ease: Phaser.Math.Easing.Quadratic.InOut,
                                        onUpdate: function (t) {
                                            a.spline.getPoint(t.getValue(), l), e.x = l.x, e.y = l.y, i && i(e)
                                        }
                                    })
                                }
                            }))
                        };
                        var r = a.config.curve;
                        return r ? (a.spline = new Phaser.Curves.Spline(r), null == (n = a.tween) || n.on(Phaser.Tweens.Events.TWEEN_START, a.createCounter), a) : (0, i.default)(a)
                    }
                    return (0, a.default)(e, t), e
                }(r.default);
            e.default = o
        },
        74: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(65),
                a = n.n(i),
                r = function () {
                    function t(t, e, n) {
                        this.baseValue = void 0, this.suffix = void 0, this.suffix = e || 0, this.baseValue = Math.floor(t), n || !1 || (this.initValue(), this.refactorValue())
                    }
                    var e = t.prototype;
                    return e.initValue = function () {
                        if (0 === this.suffix && this.baseValue >= 1e3) {
                            var t = this.baseValue.toString(),
                                e = t.length - 1;
                            this.suffix = Math.floor(e / 3);
                            var n = e % 3;
                            this.suffix >= 2 && (this.baseValue = a()(t.substring(0, 4 + n)))
                        } else this.baseValue *= 1e3
                    }, e.refactorValue = function () {
                        return this.baseValue = Math.floor(this.baseValue), this.baseValue >= 1e6 ? (this.baseValue = Math.floor(this.baseValue / 1e3), void this.suffix++) : 0 !== this.baseValue ? this.baseValue < 1e3 && this.suffix > 0 ? (this.baseValue *= 1e3, void this.suffix--) : void 0 : void(this.suffix = 0)
                    }, e.add = function (e) {
                        if (e.baseValue < 0) this.subtract(new t(-1 * e.baseValue, e.suffix, !0));
                        else if (!(this.suffix - e.suffix >= 2)) {
                            if (e.suffix - this.suffix >= 2) return this.baseValue = e.baseValue, void(this.suffix = e.suffix);
                            if (this.suffix === e.suffix) this.baseValue += e.baseValue;
                            else {
                                this.suffix = this.suffix > e.suffix ? this.suffix : e.suffix;
                                var n = this.suffix > e.suffix ? this.baseValue : e.baseValue,
                                    i = this.suffix > e.suffix ? e : this;
                                this.baseValue = n + Math.floor(i.baseValue / 1e3)
                            }
                            this.refactorValue()
                        }
                    }, e.subtract = function (t) {
                        return t.suffix > this.suffix || t.baseValue > this.baseValue && t.suffix === this.suffix ? (this.baseValue = 0, void(this.suffix = 0)) : void(this.suffix - t.suffix >= 2 || (this.baseValue -= Math.floor(t.baseValue / Math.pow(1e3, this.suffix - t.suffix)), this.refactorValue()))
                    }, e.multiply = function (e) {
                        if ("number" === typeof e && e < 1e3) return this.baseValue *= e, void this.refactorValue();
                        var n = "number" === typeof e ? new t(e) : e;
                        this.suffix += n.suffix, this.baseValue *= Math.floor(n.baseValue / 1e3), this.refactorValue()
                    }, e.divide = function (e) {
                        if ("number" === typeof e && e < 1e3) return this.baseValue /= e, void this.refactorValue();
                        var n = "number" === typeof e ? new t(e) : e;
                        this.suffix -= n.suffix, this.baseValue /= Math.floor(n.baseValue / 1e3), this.refactorValue()
                    }, e.clone = function () {
                        return new t(this.baseValue, this.suffix, !0)
                    }, e.biggerThan = function (t) {
                        return this.suffix > t.suffix || !(this.suffix < t.suffix) && this.baseValue > t.baseValue
                    }, e.smallerThan = function (t) {
                        return this.suffix < t.suffix || !(this.suffix > t.suffix) && this.baseValue < t.baseValue
                    }, e.toString = function () {
                        return "" + Math.floor(this.baseValue / 1e3) + this.generateTextSuffix()
                    }, e.generateTextSuffix = function () {
                        switch (this.suffix) {
                            case 0:
                                return "";
                            case 1:
                                return "K";
                            case 2:
                                return "M";
                            case 3:
                                return "B";
                            case 4:
                                return "T";
                            default:
                                var t = this.suffix - 5,
                                    e = Math.floor(t / 26),
                                    n = t % 26;
                                return "" + String.fromCharCode(e + 65) + String.fromCharCode(n + 65)
                        }
                    }, t
                }();
            e.default = r
        },
        57: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(73),
                a = n(3),
                r = n(0),
                s = n(38),
                o = n(467),
                l = n(25),
                c = n(40),
                u = n(110),
                h = n(92),
                d = function (t) {
                    function e(e, n, i, r, s, c) {
                        var u;
                        return void 0 === c && (c = !1), (u = t.call(this, e) || this).useSound = !0, u.isClicked = !1, u.isDisable = !1, u.scaleUp = -1, u.scaleDown = -1, u.button = void 0, u.upAnimation = void 0, u.downAnimation = void 0, u.isUsePixelPerfect = !1, u.hitArea = void 0, u.hitZone = void 0, u.scaleDownPress = void 0, u.parentName = void 0, u.onceCallbacks = void 0, u.isLogEvent = void 0, u.handelObjectDestroy = function () {
                            u.scene && u.scene.events.off(Phaser.Scenes.Events.SLEEP, u.handleSceneSleep)
                        }, u.handleSceneSleep = function () {
                            u.scene && u.scene.tweens.killTweensOf((0, a.default)(u))
                        }, u.handlePointerDown = function () {
                            var t, e;
                            u.isClicked || null != (t = u.upAnimation) && null != (e = t.tween) && e.isPlaying() || (u.isClicked = !0, u.runDownAnimation())
                        }, u.handleOnClick = function (t) {
                            return function () {
                                var e, n, i, a;
                                u.isClicked && (null != (e = u.upAnimation) && null != (n = e.tween) && n.isPlaying() || (u.isClicked = !1, u.runUpAnimation(), null == (i = u.upAnimation) || null == (a = i.tween) || a.once(Phaser.Tweens.Events.TWEEN_COMPLETE, (function () {
                                    u.logButtonEvent(), u.processCallback(t), (0, h.default)(50)
                                }))))
                            }
                        }, u.handlePointerOut = function () {
                            var t, e;
                            u.isClicked && (null != (t = u.upAnimation) && null != (e = t.tween) && e.isPlaying() || (u.isClicked = !1, u.runUpAnimation()))
                        }, u.runDownAnimation = function () {
                            var t; - 1 === u.scaleDown && (u.scaleUp = u.scale, u.scaleDown = u.scaleDownPress), u.useSound && u.playSound(), null == (t = u.downAnimation) || t.remove(), u.downAnimation = new o.default({
                                targets: [(0, a.default)(u)],
                                duration: 150,
                                props: {
                                    scale: u.scaleDown
                                },
                                onUpdate: function () {
                                    u.hitZone.scale = 1 / u.scale
                                }
                            }), u.downAnimation.play()
                        }, u.isUsePixelPerfect = c, u.onceCallbacks = [], u.isLogEvent = !0, u.setDepth(l.default.BUTTON), u.createButton(n, i, r, s), u.updateSize(), u.listenEvents(), u.scene.add.existing((0, a.default)(u)), u
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.listenEvents = function () {
                        this.scene.events.on(Phaser.Scenes.Events.SLEEP, this.handleSceneSleep), this.once(Phaser.GameObjects.Events.DESTROY, this.handelObjectDestroy)
                    }, n.setOnceCallback = function (t) {
                        this.onceCallbacks.push(t)
                    }, n.processCallback = function (t) {
                        var e, n, i;
                        null == (e = this.upAnimation) || e.stop(), null == (n = this.downAnimation) || n.stop(), null == (i = this.scene) || i.tweens.killTweensOf(this), -1 !== this.scaleUp && this.setScale(this.scaleUp), t(), this.onceCallbacks.length > 0 && (this.onceCallbacks.forEach((function (t) {
                            return t()
                        })), this.onceCallbacks = [])
                    }, n.setDisabled = function (t) {
                        if (this.isDisable !== t) {
                            var e, n;
                            if (t) this.setAlpha(.5), null == (e = this.hitArea) || e.disableInteractive();
                            else this.setAlpha(1), null == (n = this.hitArea) || n.setInteractive();
                            this.isDisable = t
                        }
                    }, n.isDisabled = function () {
                        return this.isDisable
                    }, n.createButton = function (t, e, n, i) {
                        this.button = this.scene.add.image(0, 0, t, e), n && i && this.button.setWorldSize(n, i), this.scaleDownPress = this.scale - .1;
                        var a = this.button,
                            r = a.displayWidth,
                            s = a.displayHeight;
                        this.hitZone = this.scene.make.zone({
                            displayWidth: r,
                            displayHeight: s
                        }), this.add([this.button, this.hitZone])
                    }, n.updateSize = function () {
                        var t = this.button,
                            e = t.width,
                            n = t.height,
                            i = e / 100 * 10,
                            a = n / 100 * 10,
                            r = i < 10 ? i : 10,
                            s = a < 10 ? a : 10;
                        this.setSize(e + r, n + s), this.hitZone.setSize(e + r, n + s)
                    }, n.playSound = function () {
                        this.scene.audio.playSound(c.default.BUTTON_CLICK)
                    }, n.runUpAnimation = function () {
                        var t, e = this; - 1 !== this.scaleUp && (null == (t = this.upAnimation) || t.remove(), this.upAnimation = new o.default({
                            targets: [this],
                            duration: 150,
                            props: {
                                scale: this.scaleUp
                            },
                            onUpdate: function () {
                                e.hitZone.scale = 1 / e.scale
                            }
                        }), this.upAnimation.play())
                    }, n.addDebugData = function () {
                        var t = this.getParentName(),
                            e = this.name;
                        (0, u.addBreadcrumbSentry)("ui-click", t + ":" + e)
                    }, n.logButtonEvent = function () {
                        if (this.isLogEvent) {
                            var t = this.getParentName(),
                                e = this.name;
                            this.scene.analytics.event(s.AnalyticsEvents.BUTTON_CLICK, {
                                button_name: e,
                                screen_name: t
                            })
                        }
                    }, n.disableLogEvent = function (t) {
                        this.isLogEvent = !t
                    }, n.getParentName = function () {
                        if (this.parentName) return this.parentName;
                        for (var t = this.parentContainer; t;) {
                            if (t instanceof GameCore.Screen) {
                                var e = t;
                                return this.parentName = e.getScreenName(), this.parentName
                            }
                            t = t.parentContainer
                        }
                        return this.parentName = this.scene.getSceneName(), this.parentName
                    }, (0, i.default)(e, [{
                        key: "onClick",
                        set: function (t) {
                            this.isUsePixelPerfect ? (this.hitArea = this.button, this.hitArea.setInteractive({
                                useHandCursor: !0,
                                pixelPerfect: !0
                            })) : (this.hitArea = this.hitZone, this.updateSize(), this.hitArea.setInteractive({
                                useHandCursor: !0
                            })), this.hitArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, this.handlePointerDown), this.hitArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, this.handleOnClick(t)), this.hitArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, this.handlePointerOut)
                        }
                    }, {
                        key: "onDown",
                        set: function (t) {
                            this.hitArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, t)
                        }
                    }, {
                        key: "onOut",
                        set: function (t) {
                            this.hitArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_OUT, t)
                        }
                    }, {
                        key: "isUsePixelPerFect",
                        get: function () {
                            return this.isUsePixelPerfect
                        }
                    }]), e
                }(Phaser.GameObjects.Container);
            e.default = d
        },
        199: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(57),
                r = n(2),
                s = n(40),
                o = r.default.DEFAULT_8_BIT,
                l = o.KEY,
                c = o.FRAME,
                u = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, l, c.BUTTON_CLOSE, 31.5, 31.5) || this).scene = e, n.setName("Close"), n
                    }
                    return (0, i.default)(e, t), e.prototype.playSound = function () {
                        this.scene.audio.playSound(s.default.CLOSE_CLICK, {
                            volume: .3
                        })
                    }, e
                }(a.default);
            e.default = u
        },
        472: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i, a = n.key,
                            r = n.frame,
                            s = n.width,
                            o = n.height,
                            l = n.usePixelPerfect;
                        (i = t.call(this, e, a, r, s, o, l) || this).paddingZone = void 0, i.showDebugZone = void 0, i.debugZone = void 0;
                        var c = n.paddingZone,
                            u = void 0 === c ? 0 : c,
                            h = n.showDebugZone,
                            d = void 0 !== h && h;
                        return i.paddingZone = u, i.showDebugZone = d, i
                    }
                    return (0, i.default)(e, t), e.prototype.updateSize = function () {
                        t.prototype.updateSize.call(this);
                        var e, n = this.width,
                            i = this.height,
                            a = n + this.paddingZone,
                            r = i + this.paddingZone;
                        (this.setSize(a, r), this.hitZone.setSize(a, r), this.showDebugZone) && (null == (e = this.debugZone) || e.destroy(), this.debugZone = this.hitZone.drawDebugBox(10699282, .5), this.add(this.debugZone))
                    }, e
                }(n(57).default);
            e.default = a
        },
        200: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return d
                }
            });
            var i = n(3),
                a = n(0),
                r = n(2),
                s = n(66),
                o = {
                    targets: [],
                    duration: 600,
                    ease: Phaser.Math.Easing.Linear,
                    props: {
                        angle: {
                            from: 0,
                            to: 360
                        }
                    }
                },
                l = function (t) {
                    function e(e) {
                        return t.call(this, o, e) || this
                    }
                    return (0, a.default)(e, t), e
                }(s.default),
                c = r.default.DEFAULT_8_BIT,
                u = c.KEY,
                h = c.FRAME,
                d = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, 0, 0, u, h.PRELOADER) || this).anim = void 0, n.runAnimation(), n.setWorldSize(113, 113), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.runAnimation = function () {
                        var t;
                        null == (t = this.anim) || t.remove(), this.anim = new l({
                            targets: [this],
                            repeat: -1,
                            duration: 1200
                        }), this.anim.play()
                    }, n.setVisible = function (e) {
                        return t.prototype.setVisible.call(this, e), e ? this.runAnimation() : this.anim.stop(), this
                    }, e
                }(Phaser.GameObjects.Image)
        },
        616: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return u
                }
            });
            var i = n(0),
                a = n(19),
                r = n(2),
                s = function (t) {
                    function e(e, n) {
                        var i;
                        (i = t.call(this, e) || this).payload = void 0, i.process = void 0, i.minProcess = void 0, i.maxProcess = void 0, i.progressBoxLeft = void 0, i.progressBoxBg = void 0, i.progressBoxRight = void 0, i.progressBarLeft = void 0, i.progressBarBg = void 0, i.progressBarRight = void 0, i.progressAnimation = void 0, i.payload = n;
                        var a = n.width;
                        return i.setSize(a, 39), i.process = 0, i.minProcess = 0, i.maxProcess = 1, i.createProgressBox(), i.createProgressBar(), i.createContainer(), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.setProcess = function (t, e) {
                        void 0 === e && (e = !1), this.process = this.getCorrectValue(t), this.scene && !e ? this.runProcessAnimation(t) : this.updateProcess()
                    }, n.updateProcess = function () {
                        var t = this.progressBarBg.displayHeight,
                            e = this.getDisplayWidthByProcess(this.process);
                        this.progressBarBg.setWorldSize(e, t);
                        var n = this.progressBarBg.x;
                        this.progressBarRight.setX(n + e)
                    }, n.getCorrectValue = function (t) {
                        var e = t;
                        return isFinite(e) || (e = 0), e < this.minProcess && (e = this.minProcess), e > this.maxProcess && (e = this.maxProcess), e
                    }, n.getDisplayWidthByProcess = function (t) {
                        return (this.width - 17) * t
                    }, n.getProcessByDisplayWidth = function (t) {
                        return t / (this.width - 17)
                    }, n.runProcessAnimation = function (t) {
                        var e, n = this;
                        null == (e = this.progressAnimation) || e.remove(), this.progressAnimation = this.scene.add.tween({
                            targets: [this.progressBarBg],
                            duration: 1e3,
                            ease: Phaser.Math.Easing.Quadratic.InOut,
                            props: {
                                displayWidth: function () {
                                    var e = n.getCorrectValue(t);
                                    return n.getDisplayWidthByProcess(e)
                                }
                            },
                            onUpdate: function () {
                                var t = n.progressBarBg,
                                    e = t.x,
                                    i = t.displayWidth;
                                n.progressBarRight.setX(e + i)
                            },
                            onComplete: function () {
                                n.updateProcess()
                            }
                        })
                    }, n.createProgressBox = function () {
                        var t = this.payload,
                            e = t.key,
                            n = t.frames;
                        this.progressBoxLeft = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BG_LEFT
                        }), this.progressBoxLeft.setOrigin(0, .5), this.progressBoxLeft.setWorldSize(9, 39), this.progressBoxRight = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BG_RIGHT
                        }), this.progressBoxRight.setOrigin(0, .5), this.progressBoxRight.setWorldSize(9, 39), this.progressBoxBg = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BG_MID
                        }), this.progressBoxBg.setOrigin(0, .5), this.progressBoxBg.setWorldSize(9, 39);
                        var i = this.progressBoxBg.displayHeight,
                            a = this.displayWidth,
                            r = this.progressBoxLeft.displayWidth,
                            s = this.progressBoxRight.displayWidth;
                        this.progressBoxLeft.setWorldSize(r, i), this.progressBoxRight.setWorldSize(s, i), this.progressBoxBg.setWorldSize(a - (r + s), i), Phaser.Display.Align.In.Center(this.progressBoxBg, this, 0, 0), Phaser.Display.Align.In.LeftCenter(this.progressBoxLeft, this, 0, 0), Phaser.Display.Align.In.RightCenter(this.progressBoxRight, this, 0, 0)
                    }, n.createProgressBar = function () {
                        var t = this.payload,
                            e = t.key,
                            n = t.frames;
                        this.progressBarLeft = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BAR_LEFT
                        }), this.progressBarLeft.setOrigin(0, .5), this.progressBarLeft.setWorldSize(8.5, 32), this.progressBarRight = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BAR_RIGHT
                        }), this.progressBarRight.setOrigin(0, .5), this.progressBarRight.setWorldSize(8.5, 32), this.progressBarBg = this.scene.make.image({
                            key: e,
                            frame: n.PROGRESS_BAR_MID
                        }), this.progressBarBg.setOrigin(0, .5), this.progressBarBg.setWorldSize(8.5, 32);
                        var i = -1.6;
                        Phaser.Display.Align.In.LeftCenter(this.progressBarBg, this, -7, i), Phaser.Display.Align.In.LeftCenter(this.progressBarLeft, this, -2, i), Phaser.Display.Align.In.LeftCenter(this.progressBarRight, this, -2, i), this.setProcess(0, !0)
                    }, n.createContainer = function () {
                        this.add([this.progressBoxBg, this.progressBoxLeft, this.progressBoxRight, this.progressBarBg, this.progressBarLeft, this.progressBarRight]), this.scene.add.existing(this)
                    }, e
                }(Phaser.GameObjects.Container),
                o = r.default.DEFAULT,
                l = o.KEY,
                c = o.FRAME,
                u = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, {
                            key: l,
                            frames: c,
                            width: n
                        }) || this).loadingText = void 0, i.createLoadingText(), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createLoadingText = function () {
                        this.loadingText = this.scene.add.text(0, 0, "Loading...0%", {
                            fontFamily: a.default.FONT_FAMILY,
                            fontSize: "20px",
                            color: "#ffffff",
                            stroke: "#000000",
                            strokeThickness: 3,
                            fixedWidth: 260,
                            align: "center"
                        }), this.loadingText.setHighQuality(), this.loadingText.setShadow(0, 12, "#000000", 0, !0), this.add(this.loadingText), Phaser.Display.Align.In.Center(this.loadingText, this, 0, -2)
                    }, n.updateProcess = function () {
                        var t = this.progressBarBg.displayHeight,
                            e = this.getDisplayWidthByProcess(this.process);
                        this.progressBarBg.setWorldSize(e, t);
                        var n = this.progressBarBg.x;
                        if (this.progressBarRight.setX(n + e), this.loadingText) {
                            var i = Math.floor(100 * this.getProcessByDisplayWidth(e));
                            this.loadingText.setText("Loading..." + i + "%")
                        }
                    }, n.runProcessAnimation = function (t) {
                        var e, n, i = this;
                        null == (e = this.progressAnimation) || e.stop(), null == (n = this.progressAnimation) || n.remove(), this.progressAnimation = this.scene.add.tween({
                            targets: [this.progressBarBg],
                            duration: 600,
                            ease: Phaser.Math.Easing.Circular.InOut,
                            props: {
                                displayWidth: function () {
                                    var e = i.getCorrectValue(t);
                                    return i.getDisplayWidthByProcess(e)
                                }
                            },
                            onUpdate: function () {
                                var t = i.progressBarBg,
                                    e = t.x,
                                    n = t.displayWidth;
                                i.progressBarRight.setX(e + n);
                                var a = Math.floor(100 * i.getProcessByDisplayWidth(n));
                                i.loadingText.setText("Loading..." + a + "%")
                            },
                            onComplete: function () {
                                i.updateProcess()
                            }
                        })
                    }, e
                }(s)
        },
        201: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return f
                }
            });
            var i = n(29),
                a = n(3),
                r = n(0),
                s = n(25),
                o = n(2),
                l = function (t) {
                    function e(e) {
                        return t.call(this, {
                            game: e,
                            fragShader: "\nprecision mediump float;\n\nuniform sampler2D uMainSampler;\n// uniform vec2 uResolution; //khong co\nuniform float uCameraZoom;\n\nuniform vec2 iResolution;\n\nuniform vec4 lightPosition;\nuniform vec4 lightColor;\nuniform float lightRadius;\nuniform float lightAttenuation;\n\nvarying vec2 outTexCoord;\nvarying float outTintEffect;\nvarying vec4 outTint;\n\nvoid main (void)\n{\n    vec4 pos = vec4(0.2, 0.3, 1.0, 200);\n\n    // vec2 center = (lightPosition.xy + 1.0) * (iResolution.xy * 0.5);\n    // vec2 center = lightPosition.xy\n    float distToSurf = length(lightPosition.xy / uCameraZoom - gl_FragCoord.xy / uCameraZoom);\n    float radius = 1.0 - distToSurf / lightRadius;\n    /* if (distToSurf > 50.0) {\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n        return; \n    } */\n    /* if (radius > 0.5) {\n        gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n        return; \n    } */\n    \n    float intensity = smoothstep(0.0, 1.0, radius * lightAttenuation);\n    /* if (intensity == 0.0) {\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        return;\n    } */\n\n    vec4 color = vec4(intensity, intensity, intensity, 0.0) * lightColor;\n    gl_FragColor = vec4(color.rgb * lightColor.a, color.a);\n}\n"
                        }) || this
                    }
                    return (0, r.default)(e, t), e.prototype.onRender = function (t, e) {
                        this.set1f("uCameraZoom", e.zoom)
                    }, e
                }(Phaser.Renderer.WebGL.Pipelines.SinglePipeline);
            l.KEY = "GlowLightPipeLine";
            var c = l,
                u = o.default.DEFAULT_8_BIT,
                h = u.KEY,
                d = u.FRAME,
                f = function (t) {
                    function e(e, n) {
                        var r;
                        return (r = t.call(this, e) || this).config = void 0, r.shaderSprite = void 0, r.isWebGl = !0, r.lightRadius = 0, r.config = (0, i.default)({
                            background: 0,
                            bottomRightCorner: 221341,
                            rightEdge: 423092,
                            bottomEdge: 83583,
                            mainTopColorGradient: 732242,
                            mainBotColorGradient: 155294,
                            shadowHeight: 7,
                            bgCornerStrokeWidth: 2,
                            topInnerCornerStrokeWidth: 4,
                            botInnerCornerStrokeWidth: 4,
                            rightInnerCornerStrokeWidth: 4,
                            lightX: 0,
                            lightY: 0
                        }, n), r.scene.game.canvas.getContext("webgl") || (r.isWebGl = !1), r.isWebGl && !r.scene.game.renderer.pipelines.pipelines.has(c.KEY) && r.scene.game.renderer.pipelines.add(c.KEY, new c(r.scene.game)), r.setDepth(s.default.POPUP), r.createGraphicsPopup(), r.createShaderSprite(), r.createLightEffect(), r.updateSize(), r.scene.add.existing((0, a.default)(r)), r
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.updateSize = function () {
                        var t = this.config,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createGraphicsPopup = function () {
                        var t = this.config,
                            e = t.x,
                            n = t.y,
                            i = t.width,
                            a = t.height,
                            r = t.background,
                            s = t.bottomRightCorner,
                            o = t.rightEdge,
                            l = t.bottomEdge,
                            c = t.mainBotColorGradient,
                            u = t.mainTopColorGradient,
                            h = t.shadowHeight,
                            d = t.bgCornerStrokeWidth,
                            f = t.topInnerCornerStrokeWidth,
                            p = t.botInnerCornerStrokeWidth,
                            g = t.rightInnerCornerStrokeWidth,
                            v = this.scene.make.graphics({}),
                            m = new Phaser.Geom.Rectangle(e - i / 2, n - a / 2, i, a);
                        v.fillStyle(0, .3), v.fillRoundedRect(m.left, m.bottom - 10, m.width, 10 + h, {
                            tl: 0,
                            tr: 0,
                            bl: 12,
                            br: 12
                        }), v.fillStyle(r), v.fillRoundedRect(m.left, m.top, m.width, m.height, {
                            tl: 8,
                            tr: 8,
                            bl: 12,
                            br: 12
                        }), v.fillStyle(s), v.fillRoundedRect(m.left + d, m.bottom - 50, m.width - 2 * d, 50 - d, {
                            tl: 0,
                            tr: 0,
                            bl: 30,
                            br: 8
                        }), v.fillStyle(o), v.fillRoundedRect(m.left + d, m.top + d, m.width - 2 * d, m.height - 2 * d - p, {
                            tl: 8,
                            tr: 8,
                            bl: 30,
                            br: 12
                        }), v.fillStyle(l), v.fillRoundedRect(m.left + d, m.bottom - 50, m.width - 2 * d - g, 50 - d, {
                            tl: 8,
                            tr: 0,
                            bl: 8,
                            br: 3
                        }), v.fillGradientStyle(u, u, c, c), v.fillRect(m.left + d, m.top + d + f + 10, m.width - 2 * d - g, m.height - 2 * d - p - f - 20), v.fillStyle(u), v.fillRoundedRect(m.left + d, m.top + d + f, m.width - 2 * d - g, 10, {
                            tl: 8,
                            tr: 8,
                            bl: 0,
                            br: 0
                        }), v.fillStyle(c), v.fillRoundedRect(m.left + d, m.bottom - d - p - 10, m.width - 2 * d - g, 7, {
                            tl: 0,
                            tr: 0,
                            bl: 3,
                            br: 0
                        }), this.add(v)
                    }, n.createShaderSprite = function () {
                        var t = this.config,
                            e = t.width,
                            n = t.height,
                            i = this.scene.make.image({
                                key: h,
                                frame: d.BLANK
                            });
                        i.setWorldSize(e, n), this.add(i), this.shaderSprite = i, this.shaderSprite.kill()
                    }, n.createLightEffect = function () {
                        var t, e;
                        if (this.isWebGl) {
                            var n = this.config,
                                i = n.width,
                                a = n.mainTopColorGradient;
                            n.lightX, n.lightY;
                            this.shaderSprite.revive(), this.shaderSprite.setPipeline(c.KEY);
                            var r = Phaser.Display.Color.ColorToRGBA(a),
                                s = new Phaser.Display.Color(r.r, r.g, r.b, r.a);
                            s.lighten(90);
                            var o = Phaser.Display.Color.ColorToRGBA(s.color),
                                l = null == (t = this.scene.game.canvas.getContext("webgl")) ? void 0 : t.drawingBufferWidth,
                                u = null == (e = this.scene.game.canvas.getContext("webgl")) ? void 0 : e.drawingBufferHeight;
                            if (l && "number" === typeof l && u && "number" === typeof u) {
                                this.lightRadius = i / 1.2, this.recalculateLightPosition();
                                this.shaderSprite.pipeline.set2f("iResolution", l, u), this.shaderSprite.pipeline.set4f("lightColor", o.r / 255 * 1, o.g / 255 * 1, o.b / 255 * 1, .4), this.shaderSprite.pipeline.set1f("lightRadius", this.lightRadius), this.shaderSprite.pipeline.set1f("lightAttenuation", 1)
                            }
                        }
                    }, n.turnOffLight = function () {
                        this.shaderSprite.kill(), this.shaderSprite.resetPipeline()
                    }, n.recalculateLightPosition = function () {
                        var t, e;
                        if (this.isWebGl && this.shaderSprite.active) {
                            var n = this.config,
                                i = (n.width, n.lightX),
                                a = n.lightY,
                                r = this.scene.gameZone,
                                s = r.displayWidth,
                                o = r.displayHeight,
                                l = (r.originX, r.originY, null == (t = this.scene.game.canvas.getContext("webgl")) ? void 0 : t.drawingBufferWidth),
                                c = null == (e = this.scene.game.canvas.getContext("webgl")) ? void 0 : e.drawingBufferHeight;
                            if (l && "number" === typeof l && c && "number" === typeof c) {
                                var u = this.shaderSprite.getWorldPosition(),
                                    h = l * (u.x + i) / s,
                                    d = c * (o - (u.y + a)) / o;
                                this.shaderSprite.pipeline.set4f("lightPosition", h, d, 1e3, this.lightRadius), this.shaderSprite.pipeline.set1f("lightRadius", this.lightRadius)
                            }
                        }
                    }, e
                }(Phaser.GameObjects.Container)
        },
        469: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                UpdateAbleObject: function () {
                    return d
                },
                default: function () {
                    return f
                }
            });
            var i = n(73),
                a = n(0),
                r = n(56),
                s = n.n(r),
                o = n(113),
                l = n.n(o),
                c = n(35),
                u = n.n(c),
                h = n(612),
                d = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, "UpdateAbleObject") || this).updateInfo = void 0, n
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.GameObjects.GameObject),
                f = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).classType = void 0, i.listConfigs = void 0, i.padding = void 0, i.startObjectIndex = void 0, i.endObjectIndex = void 0, i.listObjects = void 0, i.classType = n.classType, i.listConfigs = n.listConfigs, i.padding = n.padding ? n.padding : 0, i.objects.classType = i.classType, i.updateConfig(i.listConfigs), i
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.reset = function () {
                        t.prototype.reset.call(this), this.killAndHideAll()
                    }, n.getChildren = function () {
                        var t;
                        return s()(t = this.listObjects).call(t, (function (t) {
                            return void 0 != t && t.active
                        }))
                    }, n.updateConfig = function (t) {
                        var e;
                        this.reset(), this.listConfigs = t, this.listObjects = l()(e = new Array(t.length)).call(e, void 0), this.addObjectIndex(0, 0);
                        var n = this.getEndObjectIndex();
                        this.addObjectIndex(1, n), this.startObjectIndex = this.getStartObjectIndex(), this.endObjectIndex = this.getEndObjectIndex(), this.updateMaxHeight(), this.value = this.marginTop
                    }, n.getConfig = function () {
                        return this.listConfigs
                    }, n.killAndHideAll = function () {
                        var t, e = this;
                        this.listObjects instanceof Array && u()(t = this.listObjects).call(t, (function (t) {
                            void 0 !== t && e.objects.killAndHide(t)
                        }))
                    }, n.setItemPosition = function (t, e) {
                        var n = t.height;
                        t.setPosition(0, n / 2 + (n + this.padding) * e - this.height / 2)
                    }, n.updateMaxHeight = function () {
                        return this.maxHeight = Math.max(this.listConfigs.length * (this.objHeight + this.padding) - this.padding + this.marginBottom - this.height, 0)
                    }, n.updateObject = function (t) {
                        this.objects.incY(t);
                        var e = this.getStartObjectIndex(),
                            n = this.getEndObjectIndex();
                        e != this.startObjectIndex && (e > this.startObjectIndex ? this.killObjectIndex(this.startObjectIndex, e - 1) : this.addObjectIndex(e, this.startObjectIndex - 1), this.startObjectIndex = e), n != this.endObjectIndex && (n < this.endObjectIndex ? this.killObjectIndex(n + 1, this.endObjectIndex) : this.addObjectIndex(this.endObjectIndex + 1, n), this.endObjectIndex = n)
                    }, n.killObjectIndex = function (t, e) {
                        for (var n = t; n <= e; n++) {
                            var i = this.listObjects[n];
                            i && (this.objects.killAndHide(i), this.listObjects[n] = void 0)
                        }
                    }, n.addObjectIndex = function (t, e) {
                        for (var n = t; n <= e; n++) {
                            var i = this.padding,
                                a = this.listConfigs;
                            if (n >= a.length) return;
                            var r = this.objects.getFirstDead(!0),
                                s = r.height,
                                o = s / 2 + (s + i) * n + this.value - this.height / 2;
                            r.updateInfo(a[n]), r.setPosition(0, o), r.setActive(!0), r.setVisible(!0), this.addAt(r), this.listObjects[n] = r
                        }
                    }, n.getStartObjectIndex = function () {
                        var t = this.objHeight,
                            e = this.padding;
                        return Math.max(Math.floor((0 - this.value) / (t + e)), 0)
                    }, n.getEndObjectIndex = function () {
                        var t = this.objHeight,
                            e = this.padding,
                            n = this.listConfigs,
                            i = t + e;
                        return Math.min(Math.floor((this.height - this.value) / i), n.length)
                    }, (0, i.default)(e, [{
                        key: "objHeight",
                        get: function () {
                            var t = this.objects.getChildren();
                            return 0 == t.length ? this.maxHeight = 0 : t[0].height
                        }
                    }]), e
                }(h.default)
        },
        612: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(29),
                a = n(73),
                r = n(3),
                s = n(0),
                o = n(35),
                l = n.n(o),
                c = n(171),
                u = n.n(c),
                h = n(113),
                d = n.n(h),
                f = n(56),
                p = n.n(f),
                g = n(50),
                v = n.n(g),
                m = n(107),
                E = n.n(m),
                y = n(111),
                A = n.n(y),
                T = n(118),
                S = n.n(T),
                M = n(25),
                w = n(339);

            function x(t, e) {
                var n = "undefined" !== typeof A() && S()(t) || t["@@iterator"];
                if (n) return (n = n.call(t)).next.bind(n);
                if (Array.isArray(t) || (n = function (t, e) {
                        var n;
                        if (!t) return;
                        if ("string" === typeof t) return C(t, e);
                        var i = v()(n = Object.prototype.toString.call(t)).call(n, 8, -1);
                        "Object" === i && t.constructor && (i = t.constructor.name);
                        if ("Map" === i || "Set" === i) return E()(t);
                        if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return C(t, e)
                    }(t)) || e && t && "number" === typeof t.length) {
                    n && (t = n);
                    var i = 0;
                    return function () {
                        return i >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[i++]
                        }
                    }
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
            }

            function C(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var n = 0, i = new Array(e); n < e; n++) i[n] = t[n];
                return i
            }
            var I = function (t) {
                function e(e, n) {
                    var a, s;
                    (s = t.call(this, e) || this).config = void 0, s.isEnable = void 0, s.maxHeight = void 0, s.isScrolling = void 0, s.boundTop = void 0, s.boundBottom = void 0, s.maskGraphics = void 0, s.objects = void 0, s._value = 0, s.velocity = 0, s.isScrollingSmooth = void 0, s.lastScrollY = void 0, s.isScrollingBack = void 0, s.scrollingBackTo = void 0, s.lastScrollYCount = 0, s.hitArea = void 0, s.onScrollEvents = [], s.update = function (t, e) {
                        s.isScrollingSmooth && s.velocity && s.scrollingSmooth(e), s.isScrollingBack && s.scrollingBack(e)
                    }, s.checkReachBound = function () {
                        return s.isReachTop() || s.isReachBottom()
                    }, s.onMouseScroll = (0, w.debounce)((function (t, e, n) {
                        if (s.isEnable) {
                            var i;
                            if (s.isScrolling = !0, s.checkReachBound()) return s.lastScrollY = l()(i = s.lastScrollY).call(i, (function () {
                                return 0
                            })), void(s.isScrolling = !1);
                            s.stopScrollingBack(), s.startScrollSmooth(-n * s.scrollSmooth / 15)
                        }
                    }), 100, {
                        isImmediate: !0,
                        maxWait: 100
                    }), s.onTouchScroll = function (t) {
                        if (s.isEnable) {
                            s.velocity && s.stopScrollSmooth(), s.stopScrollingBack(), s.isScrolling = !0;
                            var e = s.scene.game.world.getZoomRatio(),
                                n = t.position,
                                i = t.prevPosition,
                                a = (n.y - i.y) / e,
                                r = s.height * s.maxScrollOver,
                                o = 1;
                            if (s.lastScrollY[++s.lastScrollYCount % s.lastScrollY.length] = a, s.isReachTop() && a >= 0) {
                                var l = (r - (s.value - s.marginTop)) / r;
                                o = Math.min(o, l)
                            }
                            if (s.isReachBottom() && a <= 0) {
                                var c = (r - (-s.maxHeight - s.value)) / r;
                                o = Math.min(o, c)
                            }
                            var u = a * o,
                                h = s.maxScrollOver * s.height;
                            s.value + u > s.marginTop + h ? s.value = s.marginTop + h : s.value + u < -s.maxHeight - h ? s.value = -s.maxHeight - h : s.value += u, s.callOnScrollEvents(s.value, u)
                        }
                    }, s.onTouchDown = function () {
                        s.isEnable && (s.velocity && s.stopScrollSmooth(), s.stopScrollingBack())
                    }, s.onTouchEnd = function () {
                        var t, e;
                        if (s.isReachTop() && (s.startScrollingBack(s.marginTop), s.stopScrollSmooth()), s.isReachBottom() && (s.startScrollingBack(-s.maxHeight), s.stopScrollSmooth()), s.isScrolling) {
                            var n = u()(t = s.lastScrollY).call(t, (function (t, e) {
                                return t + e
                            })) / s.lastScrollY.length;
                            s.startScrollSmooth(n * s.scrollSmooth), s.lastScrollY = l()(e = s.lastScrollY).call(e, (function () {
                                return 0
                            }))
                        }
                    }, s.config = (0, i.default)({
                        marginTop: 0,
                        marginBottom: 0,
                        acceleration: 1400,
                        maxScrollOver: .15,
                        scrollSmooth: 40,
                        scrollingBackRate: 5
                    }, n);
                    var o = n.width,
                        c = n.height;
                    return s.isEnable = !1, s.maxHeight = 0, s.lastScrollY = d()(a = new Array(3)).call(a, 0), s.setSize(o, c), s.createGroup(), s.createInput(), s.createEvents(), s.scene.add.existing((0, r.default)(s)), s
                }(0, s.default)(e, t);
                var n = e.prototype;
                return n.onScroll = function (t) {
                    this.onScrollEvents.push(t)
                }, n.gotoTop = function () {
                    this.value = this.config.marginTop
                }, n.reset = function () {
                    this.maxHeight = 0, this.isScrolling = !1, this.isScrollingBack = !1, this.isScrollingSmooth = !1, this.gotoTop(), this.setEnable(!1)
                }, n.createDebug = function () {
                    this.drawDebugBox(16711680, .8)
                }, n.setEnable = function (t) {
                    this.isEnable = t, t ? this.setInteractive({
                        draggable: !0,
                        useHandCursor: !0
                    }) : this.disableInteractive()
                }, n.addItem = function (t) {
                    this.addAt(t), this.objects.add(t);
                    var e = t.y + t.height + this.marginBottom - this.height / 2;
                    this.maxHeight = Math.max(this.maxHeight, e, 0), this.updateObjectVisible()
                }, n.addItems = function (t) {
                    var e = this;
                    this.addAt(t), this.objects.addMultiple(t);
                    var n = l()(t).call(t, (function (t) {
                        return t.y + t.height + e.marginBottom - e.height / 2
                    }));
                    this.maxHeight = Math.max(this.maxHeight, Math.max.apply(Math, n), 0), this.updateObjectVisible()
                }, n.clearItem = function () {
                    this.objects.clear(!0, !0), this.reset()
                }, n.getChildren = function () {
                    var t;
                    return p()(t = this.objects.getChildren()).call(t, (function (t) {
                        return t.active
                    }))
                }, n.createBound = function (t, e, n, i) {
                    this.boundTop = this.scene.make.image({
                        key: t,
                        frame: e
                    }), this.boundBottom = this.scene.make.image({
                        key: t,
                        frame: e
                    }), this.boundTop.setTint(i), this.boundBottom.setTint(i), this.boundTop.setAlpha(1, 1, 0, 0), this.boundBottom.setAlpha(0, 0, 1, 1), this.boundTop.setDepth(M.default.PRIORITY), this.boundBottom.setDepth(M.default.PRIORITY);
                    var a = this.width,
                        r = n,
                        s = this.getWorldPosition(),
                        o = s.x,
                        l = s.y;
                    this.boundTop.setDisplaySize(a, r), this.boundBottom.setDisplaySize(a, r), this.boundTop.setY(-this.displayHeight / 2 + r / 2 + l - this.y - 1), this.boundBottom.setY(this.displayHeight / 2 - r / 2 + l - this.y + 1), this.boundTop.setX(o - this.x), this.boundBottom.setX(o - this.x), this.add([this.boundTop, this.boundBottom])
                }, n.createMask = function () {
                    var t;
                    null == (t = this.maskGraphics) || t.destroy(), this.maskGraphics = this.scene.make.graphics({
                        fillStyle: {
                            color: 255,
                            alpha: 1
                        }
                    }), this.maskGraphics.setName("MaskGraphics");
                    var e = this.width,
                        n = this.height;
                    this.maskGraphics.fillRoundedRect(0 - e / 2, 0 - n / 2, e, n, 0), this.setMask(this.maskGraphics.createGeometryMask()), this.scene.events.off(Phaser.Scenes.Events.UPDATE, this.updateMask, this), this.scene.events.on(Phaser.Scenes.Events.UPDATE, this.updateMask, this)
                }, n.updateMask = function () {
                    var t = this.getWorldPosition(),
                        e = t.x,
                        n = t.y;
                    this.maskGraphics.setPosition(e, n)
                }, n.createGroup = function () {
                    this.objects = this.scene.make.group({})
                }, n.updateObject = function (t) {
                    this.objects.incY(t), this.updateObjectVisible()
                }, n.updateObjectVisible = function () {
                    for (var t = this.objects.getChildren(), e = 0; e < t.length; e++) {
                        var n = t[e];
                        n.y + n.height < -this.height / 2 || n.y - n.height > this.height / 2 ? n.setVisible(!1) : n.setVisible(!0)
                    }
                }, n.createInput = function () {
                    this.setInteractive({
                        draggable: !0,
                        useHandCursor: !0
                    }), this.on(Phaser.Input.Events.POINTER_WHEEL, this.onMouseScroll), this.on(Phaser.Input.Events.GAMEOBJECT_DRAG, this.onTouchScroll), this.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, this.onTouchDown), this.scene.input.on(Phaser.Input.Events.POINTER_UP, this.onTouchEnd, this)
                }, n.createEvents = function () {
                    this.scene.events.on(Phaser.Scenes.Events.UPDATE, this.update)
                }, n.callOnScrollEvents = function (t, e) {
                    for (var n, i = x(this.onScrollEvents); !(n = i()).done;) {
                        (0, n.value)(this, t, e)
                    }
                }, n.scrollingBack = function (t) {
                    var e = (this.scrollingBackTo - this.value) * t * this.scrollingBackRate / 1e3;
                    this.value += e, Math.abs(this.scrollingBackTo - this.value) < .5 && (this.value = this.scrollingBackTo, this.stopScrollingBack()), this.callOnScrollEvents(this.value, e)
                }, n.startScrollingBack = function (t) {
                    this.isScrollingBack = !0, this.scrollingBackTo = t
                }, n.stopScrollingBack = function () {
                    this.isScrollingBack = !1
                }, n.scrollingSmooth = function (t) {
                    var e = this.velocity * t / 1e3;
                    this.value += e;
                    var n = Math.abs(this.velocity) / this.velocity;
                    this.velocity -= n * this.acceleration * t / 1e3, Math.abs(this.velocity) < this.acceleration * t / 1e3 && this.stopScrollSmooth(), this.isReachTop() && (this.startScrollingBack(this.marginTop), this.stopScrollSmooth()), this.isReachBottom() && (this.startScrollingBack(-this.maxHeight), this.stopScrollSmooth()), this.callOnScrollEvents(this.value, e)
                }, n.startScrollSmooth = function (t) {
                    this.isScrollingSmooth = !0, t && (t * this.velocity > 0 ? this.velocity += t : this.velocity = t)
                }, n.stopScrollSmooth = function () {
                    this.isScrollingSmooth = !1, this.isScrolling = !1, this.velocity = 0
                }, n.isReachTop = function () {
                    return this.value > this.marginTop
                }, n.isReachBottom = function () {
                    return -this.value > this.maxHeight
                }, (0, a.default)(e, [{
                    key: "marginTop",
                    get: function () {
                        return this.config.marginTop
                    }
                }, {
                    key: "marginBottom",
                    get: function () {
                        return this.config.marginBottom
                    }
                }, {
                    key: "acceleration",
                    get: function () {
                        return this.config.acceleration
                    }
                }, {
                    key: "maxScrollOver",
                    get: function () {
                        return this.config.maxScrollOver
                    }
                }, {
                    key: "scrollSmooth",
                    get: function () {
                        return this.config.scrollSmooth
                    }
                }, {
                    key: "scrollingBackRate",
                    get: function () {
                        return this.config.scrollingBackRate
                    }
                }, {
                    key: "value",
                    get: function () {
                        return this._value
                    },
                    set: function (t) {
                        var e = t - this._value;
                        this._value = t, this.updateObject(e)
                    }
                }]), e
            }(Phaser.GameObjects.Container);
            e.default = I
        },
        202: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).payload = void 0, a.mainText = void 0, a.shadowText = void 0, a.payload = n, a.createMainText(), a.createShadowText(), a.updateSize(), a.moveDown(a.shadowText), a.scene.add.existing((0, i.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.setText = function (t) {
                        this.mainText.setText(t), this.shadowText.setText(t), this.updateSize()
                    }, n.setTintText = function (t, e, n, i) {
                        this.mainText.setTint(t, e, n, i)
                    }, n.setDropShadow = function (t, e, n, i) {
                        void 0 === i && (i = 1), this.shadowText.setVisible(!0), this.shadowText.setTint(n), this.shadowText.setAlpha(i), Phaser.Display.Align.In.Center(this.shadowText, this.mainText, t, e)
                    }, n.updateSize = function () {
                        var t = this.mainText,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createMainText = function () {
                        this.mainText = this.scene.make.bitmapText({
                            font: this.payload.font,
                            size: this.payload.size,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.add(this.mainText)
                    }, n.createShadowText = function () {
                        this.shadowText = this.scene.make.bitmapText({
                            font: this.payload.font,
                            size: this.payload.size,
                            origin: {
                                x: .5,
                                y: .5
                            },
                            visible: !1
                        }), this.add(this.shadowText)
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = r
        },
        622: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.GAMEPLAY,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).hand = void 0, n.name = "TapTutorialHand", n.addHand(), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.addHand = function () {
                        this.hand = this.scene.make.image({
                            key: s,
                            frame: o.GUIDE_HAND,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.hand.setWorldSize(65.5, 55.5), this.setSize(65.5, 55.5), this.add(this.hand)
                    }, n.playAnimation = function (t, e) {
                        var n, i = this;
                        void 0 === t && (t = 0), void 0 === e && (e = 800);
                        var a = 1 / this.scene.world.getPixelRatio();
                        this.hand.angle = 30, null == (n = this.scene) || n.tweens.add({
                            delay: t,
                            targets: [this.hand],
                            ease: Phaser.Math.Easing.Cubic.Out,
                            props: {
                                alpha: {
                                    start: 0,
                                    value: 1,
                                    duration: 200
                                },
                                scale: {
                                    duration: 400,
                                    start: 1.6 * a,
                                    to: 1.2 * a
                                },
                                angle: {
                                    from: 30,
                                    value: 0,
                                    duration: 400
                                }
                            },
                            onComplete: function () {
                                var t;
                                null == (t = i.scene) || t.tweens.add({
                                    targets: [i.hand],
                                    delay: 200,
                                    duration: 200,
                                    ease: Phaser.Math.Easing.Cubic.Out,
                                    props: {
                                        alpha: 0
                                    },
                                    onComplete: function () {
                                        i.hand.x = 0, i.hand.y = 0, i.hand.scale = a, i.playAnimation(e)
                                    }
                                })
                            }
                        })
                    }, n.stopAnimation = function () {
                        this.scene.tweens.killTweensOf(this.hand)
                    }, n.preDestroy = function () {
                        this.scene.tweens.killTweensOf(this.hand)
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = l
        },
        93: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(2).default.EFFECTS,
                a = i.KEY,
                r = i.FRAME,
                s = {
                    CONFETTI_HEXAGON: {
                        KEY: "confetti-hexagon-animation",
                        TEXTURE: a,
                        PREFIX: r.FX_CONFETTI_HEXAGON,
                        FRAME_RATE: 8,
                        END: 5,
                        ZERO_PAD: 0
                    },
                    CONFETTI_STAR_X: {
                        KEY: "confetti-star-x",
                        TEXTURE: a,
                        PREFIX: r.ANIMATION_STAR_X,
                        FRAME_RATE: 4,
                        END: 4,
                        ZERO_PAD: 0
                    },
                    CONFETTI_STAR_Y: {
                        KEY: "confetti-star-y",
                        TEXTURE: a,
                        PREFIX: r.ANIMATION_STAR_Y,
                        FRAME_RATE: 4,
                        END: 4,
                        ZERO_PAD: 0
                    },
                    RIBBON_A: {
                        KEY: "animation-ribbon-a",
                        TEXTURE: a,
                        PREFIX: r.PREFIX_ANIMATION_RIBBON_CONFETTI_A,
                        FRAME_RATE: 16,
                        END: 3,
                        ZERO_PAD: 0
                    },
                    RIBBON_B: {
                        KEY: "animation-ribbon-b",
                        TEXTURE: a,
                        PREFIX: r.PREFIX_ANIMATION_RIBBON_CONFETTI_B,
                        FRAME_RATE: 16,
                        END: 4,
                        ZERO_PAD: 0
                    },
                    RIBBON_C: {
                        KEY: "animation-ribbon-c",
                        TEXTURE: a,
                        PREFIX: r.PREFIX_ANIMATION_RIBBON_CONFETTI_C,
                        FRAME_RATE: 16,
                        END: 4,
                        ZERO_PAD: 0
                    },
                    RIBBON_D: {
                        KEY: "animation-ribbon-d",
                        TEXTURE: a,
                        PREFIX: r.PREFIX_ANIMATION_RIBBON_CONFETTI_D,
                        FRAME_RATE: 16,
                        END: 4,
                        ZERO_PAD: 0
                    }
                };
            e.default = s
        },
        25: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                FIELD_BACKGROUND: 0,
                BACKGROUND: 1,
                FIREWORKS: 5,
                FIELD_SQUARE: 10,
                FIELD_SQUARE_RECT: 11,
                MANAGER_BASE_DEPTH: 20,
                ENCOURAGING: 31,
                MESSAGE: 33,
                POPUP: 40,
                DEPTH_ON_DRAG: 70,
                UNIT_HP_BAR: 71,
                DMG_POPUP_NUMBER: 80,
                BUTTON: 90,
                ITEM: 91,
                EFFECT: 95,
                PRIORITY: 100,
                TUTORIAL_OBJECT: 101,
                DEBUG: 110,
                ON_TOP: 1e4
            }
        },
        19: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                PRIMARY: {
                    KEY: "LilitaOne",
                    TEXTURE: "./assets/fonts/LilitaOne.png",
                    DATA: "./assets/fonts/LilitaOne.xml"
                },
                SYSTEM_FAMILY_FONT: '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif',
                FONT_FAMILY: "LilitaOne"
            }
        },
        132: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = (0, n(573).getImageScale)(),
                a = {
                    AVATAR: {
                        KEY: "avatar",
                        FILE: "./assets/images/others/avatar.png",
                        CONFIG: {}
                    },
                    ICON_EARTH: {
                        KEY: "icon-earth",
                        FILE: "./assets/images/others/icon-earth.png",
                        CONFIG: {}
                    },
                    BACKGROUND_DESERT: {
                        KEY: "background_desert",
                        FILE: "./assets/images/" + i + "x/bg_desert.jpg",
                        CONFIG: {}
                    },
                    BACKGROUND_ICE: {
                        KEY: "background_ice",
                        FILE: "./assets/images/" + i + "x/bg_ice.jpg",
                        CONFIG: {}
                    },
                    BACKGROUND_TREE: {
                        KEY: "background_tree",
                        FILE: "./assets/images/" + i + "x/bg_tree.jpg",
                        CONFIG: {}
                    },
                    BACKGROUND_VOLCANO: {
                        KEY: "background_volcano",
                        FILE: "./assets/images/" + i + "x/bg_volcano.jpg",
                        CONFIG: {}
                    },
                    BACKGROUND_CRYSTAL: {
                        KEY: "background_crystal",
                        FILE: "./assets/images/" + i + "x/bg_crystal.jpg",
                        CONFIG: {}
                    }
                };
            e.default = a
        },
        2: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(29),
                a = (0, n(573).getImageScale)(),
                r = {
                    DEFAULT_8_BIT: {
                        KEY: "default-8bit-resources",
                        PATH: "./assets/textures/" + a + "x/",
                        JSON: "./assets/textures/" + a + "x/default-8bit-resources.json",
                        FRAME: {
                            BLANK: "blank",
                            CHALLENGE_BACK_EFFECT: "challenge-screen/back-effect",
                            CHALLENGE_FX: "challenge-screen/fx",
                            CHALLENGE_GLOW: "challenge-screen/glow",
                            CHALLENGE_GRADE_BLUE: "challenge-screen/grade-blue",
                            CHALLENGE_GRADE_RED: "challenge-screen/grade-red",
                            CHALLENGE_ICON_ENERGY: "challenge-screen/icon-energy",
                            CHALLENGE_SHAPE: "challenge-screen/shape",
                            CHALLENGE_VS: "challenge-screen/vs",
                            RESULT_SCREEN_FX_WIN: "result-screen/win-fx",
                            RESULT_SCREEN_FX_LOSE: "result-screen/lose-fx",
                            RESULT_SCREEN_COLLECT_BUTTON: "result-screen/button-collect-green",
                            RESULT_SCREEN_GOLD_ICON: "result-screen/golds",
                            RESULT_SCREEN_GREEN_BUTTON: "result-screen/green-button",
                            RESULT_SCREEN_SINGLE_COIN_ICON: "result-screen/mini-gold",
                            RESULT_SCREEN_LEVEL_COMPLETE_TEXT: "result-screen/level-complete",
                            RESULT_SCREEN_CONTINUE_TEXT: "result-screen/continue",
                            RESULT_SCREEN_WIN_TEXT: "result-screen/victory",
                            RESULT_SCREEN_CLAIM_TEXT: "result-screen/claim",
                            RESULT_SCREEN_EARN_TEXT: "result-screen/you-earned",
                            RESULT_SCREEN_RIBBON_WIN: "result-screen/ribbon-green",
                            RESULT_SCREEN_RIBBON_LOSE: "result-screen/ribbon-red",
                            RESULT_SCREEN_YELLOW_BUTTON: "result-screen/yellow-button",
                            UNIT_UNLOCK_GLOW: "unit-unlock/glow",
                            UNIT_UNLOCK_BG: "unit-unlock/bg",
                            UNIT_UNLOCK_BG_1: "unit-unlock/bg-1",
                            UNIT_UNLOCK_FRAME: "unit-unlock/frame",
                            UNIT_UNLOCK_ICON_BATTLE: "unit-unlock/icon-battle",
                            UNIT_UNLOCK_ICON_HEART: "unit-unlock/icon-heart",
                            UNIT_UNLOCK_ROTATE: "unit-unlock/rotate",
                            UNIT_REWARD_ELLIPSE_FX: "unit-reward/ellipse-fx",
                            UNIT_REWARD_FX: "unit-reward/fx",
                            UNIT_REWARD_GLOW: "unit-reward/glow",
                            UNIT_REWARD_GIFT: "unit-reward/gift",
                            UNIT_REWARD_GIFT_GLOW: "unit-reward/gift-glow",
                            UNIT_REWARD_NO_THANKS_TEXT: "unit-reward/no-thanks-text",
                            UNIT_REWARD_GIFT_AD: "unit-reward/gift-ad",
                            UNIT_REWARD_PARTICLE: "unit-reward/particle",
                            TEXT_LOADING: "loading",
                            PRELOADER: "preloader/dual-ring",
                            LEADERBOARD_BG_DARK: "leaderboards/bg-dark",
                            LEADERBOARD_BG_LIGHT: "leaderboards/bg-light",
                            LEADERBOARD_BG_LOSE: "leaderboards/bg-lose",
                            LEADERBOARD_BG_WIN: "leaderboards/bg-win",
                            LEADERBOARD_TAB_BG: "leaderboards/tab-bg",
                            LEADERBOARD_TAB_LINE: "leaderboards/tab-focus",
                            LEADERBOARD_AVATAR: "leaderboards/avatar",
                            LEADERBOARD_RANK_GOLD: "leaderboards/rank-gold",
                            LEADERBOARD_RANK_SILVER: "leaderboards/rank-silver",
                            LEADERBOARD_RANK_COPPER: "leaderboards/rank-copper",
                            LEADERBOARD_BUTTON_GREEN: "leaderboards/green-button",
                            RIBBON_GREEN: "ribbon/green",
                            ICON_AD: "icons/ad-icon",
                            ICON_VIBRATION: "icons/vib",
                            ICON_MUSIC: "icons/music",
                            ICON_SOUND: "icons/sound",
                            ICON_SHARE: "icons/share",
                            ICON_BATTLE: "icons/battle",
                            ICON_TITLE: "icons/title",
                            ICON_ALERT: "icons/alert",
                            ICON_BACK_TO: "icons/back-to",
                            ICON_REPLAY: "icons/replay",
                            BUTTON_CLOSE: "buttons/close",
                            BUTTON_GREEN: "buttons/green",
                            BUTTON_GREEN_LONG: "buttons/green-long",
                            OFFLINE_REWARD_ADS: "offline-reward/ads",
                            OFFLINE_REWARD_CLOSE_BTN: "offline-reward/close-btn",
                            OFFLINE_REWARD_GOLD: "offline-reward/gold",
                            OFFLINE_REWARD_GOLDS: "offline-reward/golds",
                            OFFLINE_REWARD_GREEN_BTN: "offline-reward/green-btn",
                            OFFLINE_REWARD_PARTICLE_1: "offline-reward/particle-1",
                            OFFLINE_REWARD_PARTICLE_2: "offline-reward/particle-2",
                            OFFLINE_REWARD_RIBBON: "offline-reward/ribbon",
                            OFFLINE_REWARD_TICKET: "offline-reward/ticket",
                            OFFLINE_REWARD_YELLOW_BTN: "offline-reward/yellow-btn",
                            UNIT_SCREEN_AD_BUTTON: "unit-screen/ad-button",
                            UNIT_SCREEN_AD_COUNT_BG: "unit-screen/ad-count-bg",
                            UNIT_SCREEN_AD_ICON: "unit-screen/ad-icon",
                            UNIT_SCREEN_BAR: "unit-screen/bar",
                            UNIT_SCREEN_BG: "unit-screen/bg",
                            UNIT_SCREEN_COIN_ICON: "unit-screen/coin-icon",
                            UNIT_SCREEN_FRAME_1: "unit-screen/frame-1",
                            UNIT_SCREEN_FRAME_LOCKED: "unit-screen/frame-locked",
                            UNIT_SCREEN_ICON_BATTLE: "unit-screen/icon-battle",
                            UNIT_SCREEN_ICON_HEART: "unit-screen/icon-heart",
                            UNIT_SCREEN_ICON_LOCK: "unit-screen/icon-lock",
                            UNIT_SCREEN_SLIDEBAR_BG: "unit-screen/slidebar-bg",
                            UNIT_SCREEN_TAB_BG: "unit-screen/tab-bg",
                            UNIT_SCREEN_TAB_FOCUS: "unit-screen/tab-focus",
                            WHEEL_ARROW: "reward-wheel/arrow",
                            WHEEL_BG: "reward-wheel/bg",
                            WHEEL_SLICE_1: "reward-wheel/blue-1",
                            WHEEL_SLICE_2: "reward-wheel/blue-2",
                            WHEEL_BUTTON: "reward-wheel/circle-center",
                            WHEEL_DECO: "reward-wheel/deco",
                            WHEEL_COIN: "reward-wheel/coin",
                            WHEEL_COIN_PREFIX: "reward-wheel/coin-"
                        }
                    },
                    DEFAULT: {
                        KEY: "default-resources",
                        TEXTURE: "./assets/textures/" + a + "x/default-resources.png",
                        JSON: "./assets/textures/" + a + "x/default-resources.json",
                        FRAME: {
                            BLANK: "blank",
                            RIBBON_BLUE: "ribbon/blue",
                            PROGRESS_BAR_MID: "progress/bar-mid",
                            PROGRESS_BG_LEFT: "progress/bg-left",
                            PROGRESS_BG_MID: "progress/bg-mid",
                            PROGRESS_BG_RIGHT: "progress/bg-right",
                            PROGRESS_BAR_LEFT: "progress/bar-left",
                            PROGRESS_BAR_RIGHT: "progress/bar-right",
                            SETTINGS_SWITCH_ON: "settings/switch-on",
                            SETTINGS_SWITCH_OFF: "settings/switch-off",
                            TITLE_LINE: "settings/title-line"
                        }
                    },
                    EFFECTS: {
                        KEY: "effects-resources",
                        PATH: "./assets/textures/" + a + "x/",
                        JSON: "./assets/textures/" + a + "x/effects-resources.json",
                        FRAME: {
                            BLANK: "blank",
                            FX_COMET: "comet",
                            FX_SPARK: "spark",
                            FX_CIRCLE: "circle",
                            FX_CIRCLE_LIGHT: "circle-light",
                            FX_GLOW_LIGHT: "glow-light",
                            FX_GLOW_SMALL: "glow-small",
                            FX_STAR_WHITE: "star-white",
                            FX_STAR_YELLOW: "star-yellow",
                            FX_CONFETTI_SMALL_1: "confetti/small-1",
                            FX_CONFETTI_SMALL_2: "confetti/small-2",
                            FX_CONFETTI_SMALL_3: "confetti/small-3",
                            FX_CONFETTI_SMALL_4: "confetti/small-4",
                            FX_CONFETTI_HEXAGON: "confetti/hexagon-",
                            FX_FIREWORKS_SMALL: "fireworks/small",
                            FX_FIREWORKS_BIG_0: "fireworks/big-explosive-0",
                            FX_FIREWORKS_BIG_1: "fireworks/big-explosive-1",
                            FX_FIREWORKS_SOAR_LINE: "fireworks/soar-line",
                            FX_FIREWORKS_SOAR_CIRCLE: "fireworks/soar-circle",
                            ANIMATION_STAR_X: "star-x/star-",
                            ANIMATION_STAR_Y: "star-y/star-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_A: "ribbon/falling-confetti/confetti-a/confetti-a-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_B: "ribbon/falling-confetti/confetti-b/confetti-b-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_C: "ribbon/falling-confetti/confetti-c/confetti-c-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_D: "ribbon/falling-confetti/confetti-d/confetti-d-"
                        }
                    },
                    ANIMATION_SCENE: {
                        KEY: "effects-resources",
                        PATH: "./assets/textures/" + a + "x/",
                        JSON: "./assets/textures/" + a + "x/animation-scene-resources.json",
                        FRAME: {
                            BLANK: "blank",
                            COIN: "coins/coin",
                            COIN_SMALL: "coins/coin-small",
                            COIN_SMALL_GREY: "coins/coin-small-grey",
                            ANIMATION_STAR_X: "star-x/star-",
                            ANIMATION_STAR_Y: "star-y/star-",
                            FX_SPARK_YELLOW: "yellow-spark",
                            FX_CONFETTI_RIBBON: "ribbon/ribbon",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_A: "ribbon/falling-confetti/confetti-a/confetti-a-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_B: "ribbon/falling-confetti/confetti-b/confetti-b-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_C: "ribbon/falling-confetti/confetti-c/confetti-c-",
                            PREFIX_ANIMATION_RIBBON_CONFETTI_D: "ribbon/falling-confetti/confetti-d/confetti-d-"
                        }
                    },
                    GAMEPLAY: {
                        KEY: "gameplay-resources",
                        TEXTURE: "./assets/textures/" + a + "x/gameplay-resources.png",
                        JSON: "./assets/textures/" + a + "x/gameplay-resources.json",
                        FRAME: {
                            BLANK: "blank",
                            GUIDE_HAND: "hand-guide/hand",
                            GUIDE_ARROW_START: "hand-guide/arrow-start",
                            GUIDE_ARROW_END: "hand-guide/arrow-end",
                            GUIDE_ARROW_MIDDLE: "hand-guide/arrow-middle",
                            HP_BAR_BG: "hp-bar/bg",
                            TOOL_RESET: "dev-tool/reset",
                            TOOL_EDIT: "dev-tool/edit",
                            TOOL_ATTACK: "dev-tool/attack",
                            TOOL_UNIT: "dev-tool/unit",
                            ROCK: "projectiles/rock",
                            JAVELIN: "projectiles/javelin",
                            BOOMERANG: "projectiles/boomerang",
                            MACE: "projectiles/mace",
                            ARROW_1: "projectiles/arrow-1",
                            ARROW_2: "projectiles/arrow-2",
                            BOLT_1: "projectiles/bolt-1",
                            BOLT_2: "projectiles/bolt-2",
                            FIRE_RING: "projectiles/fire-ring",
                            BLUE_FIRE: "projectiles/blue-fire",
                            GREEN_FIRE: "projectiles/level11/green-fire-1",
                            GREEN_FIRE_PREFIX: "projectiles/level11/green-fire-",
                            DASHBOARD_AD_ICON: "dashboard/ad-icon",
                            DASHBOARD_FREE_GOLD: "dashboard/btn-free-gold",
                            DASHBOARD_FREE_GOLD_OFF: "dashboard/btn-free-gold-off",
                            DASHBOARD_FREE_GOLD_GLOW: "dashboard/btn-free-gold-glow",
                            DASHBOARD_COINBAR_COIN: "dashboard/coin-bar-coin",
                            DASHBOARD_COINBAR_BG: "dashboard/coin-bar-bg",
                            DASHBOARD_MINI_COIN: "dashboard/coin-mini",
                            DASHBOARD_UNIT_LIST: "dashboard/btn-unit-list",
                            DASHBOARD_UNITBAR_BG: "dashboard/unitbar-bg",
                            DASHBOARD_UNITBAR_ARCHER: "dashboard/unitbar-archer",
                            DASHBOARD_UNITBAR_DINO: "dashboard/unitbar-dino",
                            DASHBOARD_START_BTN: "dashboard/btn-start",
                            DASHBOARD_SETTINGS_BTN: "dashboard/btn-settings",
                            DASHBOARD_LEADERBOARD_BTN: "dashboard/btn-leaderboard",
                            DASHBOARD_BATTLE_BTN: "dashboard/btn-battle",
                            DASHBOARD_HPBAR_BG: "dashboard/bar/bg",
                            DASHBOARD_HPBAR_FRONT: "dashboard/bar/bg-front",
                            DASHBOARD_HPBAR_RED_LEFT: "dashboard/bar/red-bar/bar-left",
                            DASHBOARD_HPBAR_RED_RIGHT: "dashboard/bar/red-bar/bar-right",
                            DASHBOARD_HPBAR_RED_MID: "dashboard/bar/red-bar/bar-mid",
                            DASHBOARD_HPBAR_RED: "dashboard/bar/red-bar/full-bar",
                            DASHBOARD_HPBAR_RED_HEART: "dashboard/bar/red-bar/icon-heart-red",
                            DASHBOARD_HPBAR_BLUE_LEFT: "dashboard/bar/blue-bar/bar-left",
                            DASHBOARD_HPBAR_BLUE_RIGHT: "dashboard/bar/blue-bar/bar-right",
                            DASHBOARD_HPBAR_BLUE_MID: "dashboard/bar/blue-bar/bar-mid",
                            DASHBOARD_HPBAR_BLUE: "dashboard/bar/blue-bar/full-bar",
                            DASHBOARD_HPBAR_BLUE_HEART: "dashboard/bar/blue-bar/icon-heart-blue",
                            DASHBOARD_BATTLE_BUTTON_GREEN: "dashboard/btn-battle-green",
                            DASHBOARD_BATTLE_ICON: "dashboard/icon-battle",
                            DASHBOARD_MESSAGE_ICON: "dashboard/icon-message",
                            DASHBOARD_AVATAR_FRAME_BLUE: "dashboard/avatar-frame-blue",
                            DASHBOARD_AVATAR_FRAME_RED: "dashboard/avatar-frame-red",
                            DASHBOARD_VS: "dashboard/vs",
                            PURPLE_EFFECT: "effect-text/purple-effect",
                            EFFECT_WIN_GLOW: "effect-text/win/glow",
                            EFFECT_WIN_SHAPE_ABOVE: "effect-text/win/shape-above",
                            EFFECT_WIN_SHAPE_BELOW: "effect-text/win/shape-below",
                            EFFECT_LOSE_GLOW: "effect-text/lose/glow",
                            EFFECT_LOSE_SHAPE_ABOVE: "effect-text/lose/shape-above",
                            EFFECT_LOSE_SHAPE_BELOW: "effect-text/lose/shape-below"
                        }
                    },
                    UNITS: {
                        KEY: "units-resources",
                        PATH: "./assets/textures/" + a + "x/",
                        JSON: "./assets/textures/" + a + "x/units-resources.json",
                        FRAME: {
                            DINO_MALE_DOUX_PREFIX: "dino/male/doux/doux-",
                            DINO_MALE_KIRA_PREFIX: "dino/male/kira/kira-",
                            DINO_MALE_LOKI_PREFIX: "dino/male/loki/loki-",
                            DINO_MALE_MORT_PREFIX: "dino/male/mort/mort-",
                            DINO_MALE_NICO_PREFIX: "dino/male/nico/nico-",
                            DINO_MALE_OLAF_PREFIX: "dino/male/olaf/olaf-",
                            DINO_MALE_TARD_PREFIX: "dino/male/tard/tard-",
                            DINO_MALE_VITA_PREFIX: "dino/male/vita/vita-",
                            DINO_FEMALE_DOUX_PREFIX: "dino/female/doux/doux-",
                            DINO_FEMALE_KIRA_PREFIX: "dino/female/kira/kira-",
                            DINO_FEMALE_LOKI_PREFIX: "dino/female/loki/loki-",
                            DINO_FEMALE_MORT_PREFIX: "dino/female/mort/mort-",
                            DINO_FEMALE_NICO_PREFIX: "dino/female/nico/nico-",
                            DINO_FEMALE_OLAF_PREFIX: "dino/female/olaf/olaf-",
                            DINO_FEMALE_TARD_PREFIX: "dino/female/tard/tard-",
                            DINO_FEMALE_VITA_PREFIX: "dino/female/vita/vita-",
                            LOCKED: {
                                MELEE: {
                                    1: "dino-locked/lv01-velociraptor",
                                    2: "dino-locked/lv02-saurolophus",
                                    3: "dino-locked/lv03-pachysaurus",
                                    4: "dino-locked/lv04-triceratops",
                                    5: "dino-locked/lv05-stegosaurus",
                                    6: "dino-locked/lv06-ankylosaurus",
                                    7: "dino-locked/lv07-baroptiloraptor",
                                    8: "dino-locked/lv08-tyrannosaurus",
                                    9: "dino-locked/lv09-dilophosaurus",
                                    10: "dino-locked/lv10-triceradonosaurus",
                                    11: "dino-locked/lv11-spinosaurus-rex"
                                },
                                RANGED: {
                                    1: "warriors-locked/lv01-rockthrower",
                                    2: "warriors-locked/lv02-javelineer",
                                    3: "warriors-locked/lv03-boomeranger",
                                    4: "warriors-locked/lv04-macer",
                                    5: "warriors-locked/lv05-artemis",
                                    6: "warriors-locked/lv06-william",
                                    7: "warriors-locked/lv07-blanchette",
                                    8: "warriors-locked/lv08-phantom",
                                    9: "warriors-locked/lv09-oracle",
                                    10: "warriors-locked/lv10-shaman",
                                    11: "warriors-locked/lv11-seraph"
                                }
                            },
                            UNLOCKED: {
                                MELEE: {
                                    1: "dino-unlocked/lv01-velociraptor",
                                    2: "dino-unlocked/lv02-saurolophus",
                                    3: "dino-unlocked/lv03-pachysaurus",
                                    4: "dino-unlocked/lv04-triceratops",
                                    5: "dino-unlocked/lv05-stegosaurus",
                                    6: "dino-unlocked/lv06-ankylosaurus",
                                    7: "dino-unlocked/lv07-baroptiloraptor",
                                    8: "dino-unlocked/lv08-tyrannosaurus",
                                    9: "dino-unlocked/lv09-dilophosaurus",
                                    10: "dino-unlocked/lv10-triceradonosaurus",
                                    11: "dino-unlocked/lv11-spinosaurus-rex"
                                },
                                RANGED: {
                                    1: "warriors-unlocked/lv01-rockthrower",
                                    2: "warriors-unlocked/lv02-javelineer",
                                    3: "warriors-unlocked/lv03-boomeranger",
                                    4: "warriors-unlocked/lv04-macer",
                                    5: "warriors-unlocked/lv05-artemis",
                                    6: "warriors-unlocked/lv06-william",
                                    7: "warriors-unlocked/lv07-blanchette",
                                    8: "warriors-unlocked/lv08-phantom",
                                    9: "warriors-unlocked/lv09-oracle",
                                    10: "warriors-unlocked/lv10-shaman",
                                    11: "warriors-unlocked/lv11-seraph"
                                }
                            }
                        }
                    },
                    UNITS_SPRITES: {
                        KEY: "units-sprite-resources",
                        PATH: "./assets/textures/" + a + "x/",
                        JSON: "./assets/textures/" + a + "x/units-sprite-resources.json",
                        FRAME: {
                            MELEE: {
                                1: {
                                    MAIN_TEXTURE: "melee-1/idle/idle-00",
                                    ATTACK_PREFIX: "melee-1/attack/attack-",
                                    DIE_PREFIX: "melee-1/die/die-",
                                    IDLE_PREFIX: "melee-1/idle/idle-",
                                    RUN_PREFIX: "melee-1/run/run-"
                                }
                            },
                            RANGED: {
                                1: {
                                    MAIN_TEXTURE: "ranged-1/idle/idle-00",
                                    ATTACK_PREFIX: "ranged-1/attack/attack-",
                                    DIE_PREFIX: "ranged-1/die/die-",
                                    IDLE_PREFIX: "ranged-1/idle/idle-"
                                }
                            }
                        }
                    },
                    UNITS_SPINES: {
                        MELEE: {
                            1: {
                                KEY: "velociraptor-spine",
                                jsonPATH: "./assets/spines/units/melee-1/velociraptor.json",
                                atlasPATH: "./assets/spines/units/melee-1/velociraptor.atlas"
                            },
                            2: {
                                KEY: "saurolophus-spine",
                                jsonPATH: "./assets/spines/units/melee-2/saurolophus.json",
                                atlasPATH: "./assets/spines/units/melee-2/saurolophus.atlas"
                            },
                            3: {
                                KEY: "pachysaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-3/pachysaurus.json",
                                atlasPATH: "./assets/spines/units/melee-3/pachysaurus.atlas"
                            },
                            4: {
                                KEY: "triceratops-spine",
                                jsonPATH: "./assets/spines/units/melee-4/triceratops.json",
                                atlasPATH: "./assets/spines/units/melee-4/triceratops.atlas"
                            },
                            5: {
                                KEY: "stegosaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-5/stegosaurus.json",
                                atlasPATH: "./assets/spines/units/melee-5/stegosaurus.atlas"
                            },
                            6: {
                                KEY: "ankyntrosaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-6/ankyntrosaurus.json",
                                atlasPATH: "./assets/spines/units/melee-6/ankyntrosaurus.atlas"
                            },
                            7: {
                                KEY: "baroptiloraptor-spine",
                                jsonPATH: "./assets/spines/units/melee-7/baroptiloraptor.json",
                                atlasPATH: "./assets/spines/units/melee-7/baroptiloraptor.atlas"
                            },
                            8: {
                                KEY: "tyrannosaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-8/tyrannosaurus.json",
                                atlasPATH: "./assets/spines/units/melee-8/tyrannosaurus.atlas"
                            },
                            9: {
                                KEY: "dilophosaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-9/dilophosaurus.json",
                                atlasPATH: "./assets/spines/units/melee-9/dilophosaurus.atlas"
                            },
                            10: {
                                KEY: "triceradonosaurus-spine",
                                jsonPATH: "./assets/spines/units/melee-10/triceradonosaurus.json",
                                atlasPATH: "./assets/spines/units/melee-10/triceradonosaurus.atlas"
                            },
                            11: {
                                KEY: "spinosaurus-rex-spine",
                                jsonPATH: "./assets/spines/units/melee-11/spinosaurus-rex.json",
                                atlasPATH: "./assets/spines/units/melee-11/spinosaurus-rex.atlas"
                            }
                        },
                        RANGED: {
                            1: {
                                KEY: "rockthrower-spine",
                                jsonPATH: "./assets/spines/units/ranged-1/rockthrower.json",
                                atlasPATH: "./assets/spines/units/ranged-1/rockthrower.atlas"
                            },
                            2: {
                                KEY: "javelineer-spine",
                                jsonPATH: "./assets/spines/units/ranged-2/javelineer.json",
                                atlasPATH: "./assets/spines/units/ranged-2/javelineer.atlas"
                            },
                            3: {
                                KEY: "boomeranger-spine",
                                jsonPATH: "./assets/spines/units/ranged-3/boomeranger.json",
                                atlasPATH: "./assets/spines/units/ranged-3/boomeranger.atlas"
                            },
                            4: {
                                KEY: "macer-spine",
                                jsonPATH: "./assets/spines/units/ranged-4/macer.json",
                                atlasPATH: "./assets/spines/units/ranged-4/macer.atlas"
                            },
                            5: {
                                KEY: "artemis-spine",
                                jsonPATH: "./assets/spines/units/ranged-5/artemis.json",
                                atlasPATH: "./assets/spines/units/ranged-5/artemis.atlas"
                            },
                            6: {
                                KEY: "william-spine",
                                jsonPATH: "./assets/spines/units/ranged-6/william.json",
                                atlasPATH: "./assets/spines/units/ranged-6/william.atlas"
                            },
                            7: {
                                KEY: "blanchette-spine",
                                jsonPATH: "./assets/spines/units/ranged-7/blanchette.json",
                                atlasPATH: "./assets/spines/units/ranged-7/blanchette.atlas"
                            },
                            8: {
                                KEY: "phantom-spine",
                                jsonPATH: "./assets/spines/units/ranged-8/phantom.json",
                                atlasPATH: "./assets/spines/units/ranged-8/phantom.atlas"
                            },
                            9: {
                                KEY: "oracle-spine",
                                jsonPATH: "./assets/spines/units/ranged-9/oracle.json",
                                atlasPATH: "./assets/spines/units/ranged-9/oracle.atlas"
                            },
                            10: {
                                KEY: "shaman-spine",
                                jsonPATH: "./assets/spines/units/ranged-10/shaman.json",
                                atlasPATH: "./assets/spines/units/ranged-10/shaman.atlas"
                            },
                            11: {
                                KEY: "seraph-spine",
                                jsonPATH: "./assets/spines/units/ranged-11/seraph.json",
                                atlasPATH: "./assets/spines/units/ranged-11/seraph.atlas"
                            }
                        }
                    },
                    SPINE_EFFECTS: {
                        FX_MERGE: {
                            KEY: "fx-merge-spine",
                            jsonPATH: "./assets/spines/effects/merge/fx_merge.json",
                            atlasPATH: "./assets/spines/effects/merge/fx_merge.atlas"
                        }
                    }
                };
            GameCore.Utils.Valid.isDebugger() && (r.EFFECTS.FRAME = (0, i.default)({}, r.ANIMATION_SCENE.FRAME, r.EFFECTS.FRAME)), e.default = r
        },
        44: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                SceneDepth: function () {
                    return i
                },
                SceneEvents: function () {
                    return o
                },
                SceneKeys: function () {
                    return s
                }
            });
            var i, a = n(111),
                r = n.n(a),
                s = {
                    BOOT_SCENE: "BOOT_SCENE",
                    LOAD_SCENE: "LOAD_SCENE",
                    MAP_SCENE: "MAP_SCENE",
                    GAME_SCENE: "GAME_SCENE",
                    GLOBAL_SCENE: "GLOBAL_SCENE",
                    LEVEL_BUILDER_SCENE: "LEVEL_BUILDER_SCENE",
                    TEST_SCENE: "TEST_SCENE",
                    ANIMATIONS_SCENE: "ANIMATIONS_SCENE"
                },
                o = {
                    RUN: r()("RUN"),
                    SLEEP: r()("SLEEP"),
                    SWITCH: r()("SWITCH")
                };
            ! function (t) {
                t[t.SCENE = 0] = "SCENE", t[t.POPUP = 1] = "POPUP"
            }(i || (i = {}))
        },
        32: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                ScreenDepth: function () {
                    return r
                },
                ScreenEvents: function () {
                    return s
                },
                ScreenKeys: function () {
                    return a
                }
            });
            var i = n(577),
                a = {
                    UNITS_SCREEN: "UNITS_SCREEN",
                    READY_SCREEN: "READY_SCREEN",
                    NOTIFY_SCREEN: "NOTIFY_SCREEN",
                    RESULT_SCREEN: "RESULT_SCREEN",
                    BATTLE_SCREEN: "BATTLE_SCREEN",
                    LOADING_SCREEN: "LOADING_SCREEN",
                    SETTINGS_SCREEN: "SETTINGS_SCREEN",
                    UNIT_REWARD_SCREEN: "UNIT_REWARD_SCREEN",
                    UNIT_UNLOCK_SCREEN: "UNIT_UNLOCK_SCREEN",
                    LEADER_BOARD_SCREEN: "LEADER_BOARD_SCREEN",
                    BATTLE_RESULT_SCREEN: "BATTLE_RESULT_SCREEN",
                    OFFLINE_REWARD_SCREEN: "OFFLINE_REWARD_SCREEN",
                    CLOSEABLE_NOTIFY_SCREEN: "CLOSEABLE_NOTIFY_SCREEN",
                    FREE_GOLD_REWARD_SCREEN: "FREE_GOLD_REWARD_SCREEN",
                    CHALLENGE_SPLASH_SCREEN: "CHALLENGE_SPLASH_SCREEN"
                },
                r = {
                    SCREEN: 200,
                    POPUP: 300,
                    SPLASH: 400,
                    PRIORITY: 999
                },
                s = i.default
        },
        40: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                CONGRATULATION: "congratulation",
                DAILY_REWARD: "daily_reward",
                DIAMONDS_DROP: "diamonds_drop",
                DIAMONDS_EAT: "diamonds_eat",
                FIREWORKS_BIG: "fireworks_big",
                FIREWORKS_SOAR: "fireworks_soar",
                FIREWORKS_SMALL: "fireworks_small",
                GEM_DROP: "gem_drop",
                GAME_OVER_SCENE: "game_over_scene",
                MISSION_COMPLETED: "mission_completed",
                MISSION_REWARD: "mission_reward",
                MOVE_WRONG: "move_wrong",
                START_LEVEL: "start_level",
                POPUP_OFF: "popup_off",
                POPUP_SHOW: "popup_show",
                SCORE_COUNTER: "score_counter",
                START_GAME: "start_game",
                YOU_LOSE: "you_lose",
                YOU_WIN: "you_win",
                NEXT_ROUND_EFFECT: "next-round-effect",
                LOSE_SOUND: "lose-sound",
                THUNDER_SOUND: "thunder-sound",
                CLOSE_CLICK: "close-click",
                BUTTON_CLICK: "button-click",
                UNIT_DRAG_END: "drag-unit-end",
                UNIT_DRAG_START: "drag-unit-start",
                START_BATTLE: "start-battle",
                MELEE_ATTACK: "melee-attack",
                ARROW_SHOOT: "arrow-shoot",
                UNIT_DAMAGED: "unit-damaged",
                UNIT_MERGE: "unit-merge",
                WIN_BATTLE: "win-battle",
                TURN_SWITCH: "turn-switch",
                UNIT_UNLOCK: "unit-unlock",
                COIN_SPAWN_SOUND: "coin-spawn",
                COIN_INCREASE_REPEATEDLY_SOUND: "coin-increase-repeatedly",
                GIFT_CHARGE: "gift-charge",
                GIFT_EXPLODE: "gift-explode",
                GIFT_REVEAL: "gift-reveal"
            }
        },
        592: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2),
                s = n(593),
                o = n(25),
                l = n(594),
                c = n(40),
                u = r.default.EFFECTS,
                h = (u.KEY, u.FRAME, r.default.GAMEPLAY),
                d = h.KEY,
                f = h.FRAME,
                p = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).coinGroup = void 0, n.containerGroup = void 0, n.startsExplosive = void 0, n.startsExplosiveSmall = void 0, n.startsExplosiveSmallTimer = void 0, n.gravity = 300, n.setVisible(!0), n.coinGroup = n.scene.add.group({
                            defaultKey: d,
                            defaultFrame: f.DASHBOARD_COINBAR_COIN
                        }), n.containerGroup = n.scene.add.group({
                            classType: Phaser.GameObjects.Container
                        }), n.startsExplosive = new s.default(e), n.startsExplosive.setDepth(o.default.ON_TOP + 1), n.startsExplosiveSmall = new l.default(e), n.startsExplosiveSmall.setDepth(o.default.ON_TOP + 1), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createConfigOne = function (t, e, n) {
                        var i = this,
                            a = t / 300,
                            r = new Phaser.Math.Vector2(0, 0),
                            s = new Phaser.Math.Vector2(0, -t),
                            o = n ? -1 : 1,
                            l = Phaser.Math.RND.between(-90, 90),
                            u = (l + 90) / 180 * 180 * (l < 0 ? 1 : (300 - Math.abs(l)) / 300) * a,
                            h = Phaser.Math.RND.between(20, u + 20),
                            d = new Phaser.Math.Vector2(1, 0);
                        d.setAngle(l * Math.PI / 180);
                        var f = Phaser.Math.RND.between(-Math.abs(l) - 15, 15 - Math.abs(l)),
                            p = h * (100 - Math.abs(l)) / 100 * a,
                            g = Phaser.Math.RND.between(.2 * p, p),
                            v = new Phaser.Math.Vector2(1, 0);
                        v.setAngle(f * Math.PI / 180);
                        var m = o * d.x * h,
                            E = d.y * h,
                            y = o * v.x * g,
                            A = v.y * g - t,
                            T = new Phaser.Math.Vector2(m, E),
                            S = new Phaser.Math.Vector2(y, A),
                            M = new Phaser.Curves.CubicBezier(r, T, S, s),
                            w = Phaser.Math.RND.between(1500 + 3 * h, 2e3 + 3 * h),
                            x = this.coinGroup.get(0, 0);
                        return x.revive(), x.setRotation(-e.rotation), x.setWorldSize(24, 22), e.add(x), {
                            from: 0,
                            to: 1,
                            duration: w,
                            ease: "Sine.In",
                            onUpdate: function (t) {
                                var e = M.getPointAt(t.getValue());
                                x.setPosition(e.x, e.y)
                            },
                            onComplete: function (t) {
                                if (x.kill(), !(t.totalProgress < 1) && (i.scene.audio.playSound(c.default.DIAMONDS_EAT), !i.startsExplosiveSmallTimer || i.startsExplosiveSmallTimer.hasDispatched)) {
                                    i.startsExplosiveSmallTimer = i.scene.time.delayedCall(100, (function () {
                                        return null
                                    }));
                                    var e = x.getWorldPosition();
                                    i.startsExplosiveSmall.explode(10, e.x, e.y)
                                }
                            }
                        }
                    }, n.explode = function (t, e, n, i, a) {
                        var r, s = this;
                        if (t <= 0) return [];
                        this.startsExplosive.explode(30, e, n);
                        var o = new Phaser.Math.Vector2(i - e, a - n),
                            l = o.length(),
                            c = this.containerGroup.get(e, n);
                        c.setRotation(o.angle() + Math.PI / 2), c.revive(), this.add(c);
                        for (var u = void 0, h = 0, d = [], f = 0; f < t; f++) {
                            var p = this.createConfigOne(l, c, f % 2 === 0),
                                g = this.scene.tweens.addCounter(p);
                            d.push(g), p.duration > h && (h = p.duration, u = g)
                        }
                        var v = function () {
                            var t, e;
                            d.forEach((function (t) {
                                t.complete()
                            })), null == (t = s.startsExplosive.emitters.getAt(0)) || t.killAll(), null == (e = s.startsExplosiveSmall.emitters.getAt(0)) || e.killAll(), c.kill()
                        };
                        return null == (r = u) || r.once(Phaser.Tweens.Events.TWEEN_COMPLETE, (function () {
                            c.kill(), s.scene.events.off("sleep", v)
                        })), this.scene.events.once("sleep", v), d
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = p
        },
        462: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_STAR_YELLOW) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_COMET,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            speed: 20,
                            timeScale: 1,
                            frequency: 100,
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            scale: {
                                start: 2 * t,
                                end: .1 * t,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            lifespan: 2666
                        })
                    }, n.run = function (t, e, n, i, a) {
                        this.stop(), this.reset(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.start()
                    }, n.explode = function (t, e, n) {
                        this.emitter || this.reset(), this.emitter.explode(t, e, n)
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, n.reset = function () {
                        this.createEmitters()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        619: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return Tt
                }
            });
            var i = n(29),
                a = n(3),
                r = n(0),
                s = n(2),
                o = n(93),
                l = o.default.RIBBON_A,
                c = l.KEY,
                u = l.TEXTURE,
                h = l.FRAME_RATE,
                d = l.END,
                f = l.PREFIX,
                p = l.ZERO_PAD,
                g = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: h,
                            frames: e.generateFrameNames(u, {
                                prefix: f,
                                end: d,
                                zeroPad: p,
                                start: 1
                            }),
                            yoyo: !0,
                            showOnStart: !0
                        };
                        return t.call(this, e, c, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                v = o.default.RIBBON_B,
                m = v.KEY,
                E = v.TEXTURE,
                y = v.FRAME_RATE,
                A = v.END,
                T = v.PREFIX,
                S = v.ZERO_PAD,
                M = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: y,
                            frames: e.generateFrameNames(E, {
                                prefix: T,
                                end: A,
                                zeroPad: S,
                                start: 1
                            }),
                            yoyo: !0,
                            showOnStart: !0
                        };
                        return t.call(this, e, m, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                w = o.default.RIBBON_C,
                x = w.KEY,
                C = w.TEXTURE,
                I = w.FRAME_RATE,
                b = w.END,
                R = w.PREFIX,
                P = w.ZERO_PAD,
                _ = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: I,
                            frames: e.generateFrameNames(C, {
                                prefix: R,
                                end: b,
                                zeroPad: P,
                                start: 1
                            }),
                            yoyo: !0,
                            showOnStart: !0
                        };
                        return t.call(this, e, x, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                k = o.default.RIBBON_D,
                L = k.KEY,
                D = k.TEXTURE,
                O = k.FRAME_RATE,
                N = k.END,
                U = k.PREFIX,
                B = k.ZERO_PAD,
                F = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: O,
                            frames: e.generateFrameNames(D, {
                                prefix: U,
                                end: N,
                                zeroPad: B,
                                start: 1
                            }),
                            yoyo: !0,
                            showOnStart: !0
                        };
                        return t.call(this, e, L, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                G = o.default.CONFETTI_STAR_X,
                H = G.KEY,
                V = G.TEXTURE,
                Y = G.FRAME_RATE,
                W = G.END,
                K = G.PREFIX,
                z = G.ZERO_PAD,
                X = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: Y,
                            frames: e.generateFrameNames(V, {
                                prefix: K,
                                end: W,
                                zeroPad: z,
                                start: 1
                            }),
                            yoyo: !0,
                            showOnStart: !0
                        };
                        return t.call(this, e, H, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                j = o.default.CONFETTI_STAR_Y,
                q = j.KEY,
                Z = j.TEXTURE,
                Q = j.FRAME_RATE,
                J = j.END,
                $ = j.PREFIX,
                tt = j.ZERO_PAD,
                et = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: Q,
                            frames: e.generateFrameNames(Z, {
                                prefix: $,
                                end: J,
                                zeroPad: tt,
                                start: 1
                            }),
                            showOnStart: !0
                        };
                        return t.call(this, e, q, n) || this
                    }
                    return (0, r.default)(e, t), e
                }(Phaser.Animations.Animation),
                nt = n(35),
                it = n.n(nt),
                at = n(113),
                rt = n.n(at),
                st = n(50),
                ot = n.n(st),
                lt = n(107),
                ct = n.n(lt),
                ut = n(111),
                ht = n.n(ut),
                dt = n(118),
                ft = n.n(dt);

            function pt(t, e) {
                var n = "undefined" !== typeof ht() && ft()(t) || t["@@iterator"];
                if (n) return (n = n.call(t)).next.bind(n);
                if (Array.isArray(t) || (n = function (t, e) {
                        var n;
                        if (!t) return;
                        if ("string" === typeof t) return gt(t, e);
                        var i = ot()(n = Object.prototype.toString.call(t)).call(n, 8, -1);
                        "Object" === i && t.constructor && (i = t.constructor.name);
                        if ("Map" === i || "Set" === i) return ct()(t);
                        if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return gt(t, e)
                    }(t)) || e && t && "number" === typeof t.length) {
                    n && (t = n);
                    var i = 0;
                    return function () {
                        return i >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[i++]
                        }
                    }
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
            }

            function gt(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var n = 0, i = new Array(e); n < e; n++) i[n] = t[n];
                return i
            }
            var vt = function (t) {
                    function e(e) {
                        var n, i, a;
                        return (a = t.call(this, e) || this).scene = void 0, a.ribbon = void 0, a.graphics = void 0, a.colorUse = void 0, a.lastChange = void 0, a.currentFrame = void 0, a.isYoyo = void 0, a.isGravityChanged = void 0, a.points = void 0, a.scene = e.manager.scene, a.points = it()(n = rt()(i = new Array(10)).call(i, null)).call(n, (function () {
                            return {
                                x: 0,
                                y: 0
                            }
                        })), a.isYoyo = !1, a.isGravityChanged = !1, a.lastChange = 0, a.currentFrame = -1, a.createGraphics(), a.randomRibbonUsedWhenFall(), a
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.randomRibbonUsedWhenFall = function () {
                        switch (Phaser.Math.Between(0, 3)) {
                            case 0:
                            default:
                                this.ribbon = this.scene.anims.get(o.default.RIBBON_A.KEY);
                                break;
                            case 1:
                                this.ribbon = this.scene.anims.get(o.default.RIBBON_B.KEY);
                                break;
                            case 2:
                                this.ribbon = this.scene.anims.get(o.default.RIBBON_C.KEY);
                                break;
                            case 3:
                                this.ribbon = this.scene.anims.get(o.default.RIBBON_D.KEY)
                        }
                    }, n.setRibbonPosition = function (t, e) {
                        var n;
                        it()(n = this.points).call(n, (function (n) {
                            n.x = t, n.y = e
                        }))
                    }, n.createGraphics = function () {
                        var t = [8443204, 2928867, 12013036, 16376097, 15285798];
                        this.colorUse = t[Phaser.Math.Between(0, t.length - 1)], this.graphics = this.scene.add.graphics({
                            lineStyle: {
                                width: 3,
                                color: this.colorUse
                            }
                        });
                        var e = this.emitter.manager,
                            n = e.x,
                            i = e.y,
                            a = e.depth;
                        this.graphics.setDepth(a), this.graphics.setPosition(n, i)
                    }, n.update = function (e, n, i) {
                        var a = t.prototype.update.call(this, e, n, i);
                        return this.updateFrames(e), this.updatePoints(), this.updateGraphics(), this.updateGravity(), this.updateVelocity(), this.updateColor(), a
                    }, n.updateFrames = function (t) {
                        this.lastChange += t, this.lastChange >= this.ribbon.msPerFrame && (this.isYoyo ? this.currentFrame-- : this.currentFrame++, this.currentFrame < 0 && (this.isYoyo = !1, this.currentFrame = 1), this.currentFrame >= this.ribbon.frames.length && (this.isYoyo = !0, this.currentFrame -= 1), this.frame = this.ribbon.frames[this.currentFrame].frame, this.lastChange -= this.ribbon.msPerFrame)
                    }, n.updatePoints = function () {
                        this.graphics.visible && (this.points.shift(), this.points.push({
                            x: this.x,
                            y: this.y
                        }))
                    }, n.updateGraphics = function () {
                        if (this.graphics.visible) {
                            for (var t, e = pt(this.points); !(t = e()).done;) {
                                if (0 === t.value.y) return
                            }
                            this.graphics.clear(), this.graphics.strokePoints(this.points)
                        }
                    }, n.updateGravity = function () {
                        this.lifeCurrent > this.life - 2e3 || this.isGravityChanged || (this.isGravityChanged = !0, this.graphics.destroy(), this.emitter.setVisible(!0), this.emitter.setGravityY(45))
                    }, n.updateVelocity = function () {
                        this.graphics.visible && (this.lifeCurrent > this.life - 1800 ? this.velocityX += Phaser.Math.Between(-12, 12) : this.velocityX > 0 ? this.velocityX += Phaser.Math.Between(-10, 6) : this.velocityX += Phaser.Math.Between(-6, 10))
                    }, n.updateColor = function () {
                        this.graphics.visible || (this.tint = this.colorUse)
                    }, e
                }(Phaser.GameObjects.Particles.Particle),
                mt = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.isYoyo = void 0, n.isGravityChanged = void 0, n.lastChange = void 0, n.currentFrame = void 0, n.star = void 0, n.starX = void 0, n.starY = void 0, n.isYoyo = !1, n.isGravityChanged = !1, n.lastChange = 0, n.currentFrame = -1, n.scene = e.manager.scene, n.starX = n.scene.anims.get(o.default.CONFETTI_STAR_X.KEY), n.starY = n.scene.anims.get(o.default.CONFETTI_STAR_Y.KEY), n.star = n.starX, n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.update = function (e, n, i) {
                        var a = t.prototype.update.call(this, e, n, i);
                        return this.updateGravity(), this.updateVelocity(), this.updateFrameRate(), this.updateFrames(e), a
                    }, n.updateGravity = function () {
                        this.lifeCurrent > this.life - 2e3 || this.isGravityChanged || (this.isGravityChanged = !0, this.emitter.setGravityY(15), this.emitter.setSpeedX(0))
                    }, n.updateVelocity = function () {
                        this.lifeCurrent > this.life - 2e3 || (this.velocityX > 0 ? this.velocityX += Phaser.Math.Between(-6, 3) : this.velocityX += Phaser.Math.Between(-3, 6))
                    }, n.updateFrames = function (t) {
                        if (this.lastChange += t, this.lastChange >= this.star.msPerFrame) {
                            var e = Phaser.Math.RND.between(0, 1);
                            this.star = e > 0 ? this.starX : this.starY, this.isYoyo ? this.currentFrame-- : this.currentFrame++, this.currentFrame < 0 && (this.isYoyo = !1, this.currentFrame = 1, this.emitter.setAlpha(1)), this.currentFrame >= this.star.frames.length && (this.isYoyo = !0, this.currentFrame -= 1, this.emitter.setAlpha(.8)), this.frame = this.star.frames[this.currentFrame].frame, this.lastChange -= this.star.msPerFrame
                        }
                    }, n.updateFrameRate = function () {
                        this.lifeCurrent < this.life - 2e3 ? this.star.msPerFrame = 150 : this.star.msPerFrame = Phaser.Math.RND.between(300, 600)
                    }, e
                }(Phaser.GameObjects.Particles.Particle),
                Et = s.default.EFFECTS,
                yt = Et.KEY,
                At = Et.FRAME,
                Tt = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, yt, At.BLANK) || this).emitterConfetti = void 0, n.emitterRibbons = void 0, n.ribbonConfig = void 0, n.confettiConfig = void 0, n.width = void 0, n.height = void 0, n.emitterRibbons = [], n.emitterConfetti = [], n.createConfigs(), n.createAnimations(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createConfigs = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.ribbonConfig = {
                            on: !1,
                            visible: !1,
                            timeScale: 1.5,
                            frame: At.BLANK,
                            particleBringToTop: !0,
                            speedY: {
                                min: -480,
                                max: -560
                            },
                            gravityY: 290,
                            lifespan: {
                                min: 4e3,
                                max: 6e3
                            },
                            rotate: {
                                start: 0,
                                end: 1800,
                                random: !0
                            },
                            scale: {
                                min: .6 * t,
                                max: t
                            },
                            particleClass: vt
                        }, this.confettiConfig = {
                            on: !1,
                            delay: 200,
                            timeScale: 2,
                            tint: [8443204, 2928867, 12013036, 16376097, 15285798],
                            particleBringToTop: !0,
                            frame: At.PREFIX_ANIMATION_RIBBON_CONFETTI_A + "1",
                            speedY: {
                                min: -460,
                                max: -580
                            },
                            gravityY: 280,
                            lifespan: {
                                min: 5e3,
                                max: 8e3
                            },
                            rotate: {
                                start: 0,
                                end: 1080
                            },
                            scale: {
                                min: .6 * t,
                                max: t
                            },
                            particleClass: mt
                        }
                    }, n.createAnimations = function () {
                        if (!this.scene.anims.get(o.default.CONFETTI_STAR_X.KEY)) {
                            var t = new X(this.scene.anims);
                            this.scene.anims.add(o.default.CONFETTI_STAR_X.KEY, t)
                        }
                        if (!this.scene.anims.get(o.default.CONFETTI_STAR_Y.KEY)) {
                            var e = new et(this.scene.anims);
                            this.scene.anims.add(o.default.CONFETTI_STAR_Y.KEY, e)
                        }
                        if (!this.scene.anims.get(o.default.RIBBON_A.KEY)) {
                            var n = new g(this.scene.anims);
                            this.scene.anims.add(o.default.RIBBON_A.KEY, n)
                        }
                        if (!this.scene.anims.get(o.default.RIBBON_B.KEY)) {
                            var i = new M(this.scene.anims);
                            this.scene.anims.add(o.default.RIBBON_B.KEY, i)
                        }
                        if (!this.scene.anims.get(o.default.RIBBON_C.KEY)) {
                            var a = new _(this.scene.anims);
                            this.scene.anims.add(o.default.RIBBON_C.KEY, a)
                        }
                        if (!this.scene.anims.get(o.default.RIBBON_D.KEY)) {
                            var r = new F(this.scene.anims);
                            this.scene.anims.add(o.default.RIBBON_D.KEY, r)
                        }
                    }, n.run = function (t, e, n, i) {
                        this.setPosition(t, e), this.width = n, this.height = i, this.createEmitters(), this.emitterConfetti.forEach((function (t) {
                            t.emitParticle(25)
                        })), this.emitterRibbons.forEach((function (t) {
                            t.emitParticle(20)
                        }))
                    }, n.stop = function () {
                        this.emitterConfetti.forEach((function (t) {
                            t.killAll()
                        })), this.emitterRibbons.forEach((function (t) {
                            t.killAll()
                        })), this.kill()
                    }, n.createEmitters = function () {
                        this.emitterRibbons = [], this.emitterConfetti = [], this.createConfettiLeftEmitter(), this.createConfettiRightEmitter(), this.createRibbonLeftEmitter(), this.createRibbonRightEmitter()
                    }, n.createConfettiLeftEmitter = function () {
                        var t = (0, i.default)({}, this.confettiConfig, {
                                speedX: {
                                    min: 5,
                                    max: 90
                                }
                            }),
                            e = this.createEmitter(t);
                        this.emitterConfetti.push(e)
                    }, n.createConfettiRightEmitter = function () {
                        var t = this.width,
                            e = (0, i.default)({}, this.confettiConfig, {
                                x: t,
                                speedX: {
                                    min: -5,
                                    max: -90
                                }
                            }),
                            n = this.createEmitter(e);
                        this.emitterConfetti.push(n)
                    }, n.createRibbonLeftEmitter = function () {
                        var t = (0, i.default)({}, this.ribbonConfig, {
                                speedX: {
                                    min: 20,
                                    max: 80
                                },
                                emitCallback: function (t) {
                                    t.setRibbonPosition(0, 0)
                                }
                            }),
                            e = this.createEmitter(t);
                        this.emitterRibbons.push(e)
                    }, n.createRibbonRightEmitter = function () {
                        var t = this.width,
                            e = (0, i.default)({}, this.ribbonConfig, {
                                x: t,
                                speedX: {
                                    min: -20,
                                    max: -80
                                },
                                emitCallback: function (e) {
                                    e.setRibbonPosition(t, 0)
                                }
                            }),
                            n = this.createEmitter(e);
                        this.emitterRibbons.push(n)
                    }, n.killAllParticles = function () {
                        var t = this;
                        this.emitterConfetti.forEach((function (e) {
                            e.forEachAlive((function (t) {
                                t.lifeCurrent = 0
                            }), t)
                        })), this.emitterRibbons.forEach((function (e) {
                            e.forEachAlive((function (t) {
                                t.lifeCurrent = 0
                            }), t)
                        }))
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager)
        },
        471: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).payload = void 0, a.payload = n, a.createGraphics(), a.scene.add.existing((0, i.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createGraphics = function () {
                        for (var t = this.payload.lineNumber, e = void 0 === t ? 16 : t, n = 0; n < e; n++) {
                            var i = this.drawCardinalTriangle(),
                                a = Phaser.Math.DegToRad(n * (360 / e));
                            i.setPosition(0, 0), i.setRotation(a), this.scene.add.existing(i), this.add(i)
                        }
                    }, n.drawCardinalTriangle = function () {
                        var t = this.payload,
                            e = t.color,
                            n = t.radius,
                            i = t.width,
                            a = Phaser.Math.Between(n.min, n.max),
                            r = new Phaser.GameObjects.Graphics(this.scene);
                        r.clear();
                        var s = [{
                                x: 0,
                                y: 0
                            }],
                            o = Phaser.Math.Between(i.min, i.max),
                            l = Phaser.Math.DegToRad(o),
                            c = {
                                x: a,
                                y: a * Math.tan(l)
                            };
                        s.push(c);
                        var u = {
                            x: a,
                            y: a * Math.tan(l) * -1
                        };
                        s.push(u), r.lineStyle(1, 16777215, 0), r.beginPath(), r.moveTo(s[0].x, s[0].y);
                        for (var h = 1; h < s.length; h++) r.lineTo(s[h].x, s[h].y);
                        return r.closePath(), r.strokePath(), r.fillGradientStyle(e, e, e, e, 0, 1, 0, 1), r.fillPath(), r
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = r
        },
        463: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_SPARK) || this).deathZone = void 0, n.emitter = void 0, n.createDeathZone(), n.createEmitters(), n.setActive(!1), n.setVisible(!1), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createDeathZone = function () {
                        this.deathZone = new Phaser.Geom.Circle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_SPARK,
                            speed: {
                                min: 10,
                                max: 1200
                            },
                            scale: {
                                start: 1.33 * t,
                                end: 0
                            },
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            deathZone: {
                                source: this.deathZone,
                                type: "onLeave"
                            },
                            lifespan: 3e3
                        })
                    }, n.explode = function (t, e, n, i) {
                        this.setActive(!0), this.setVisible(!0), this.deathZone.radius = i, this.deathZone.setPosition(e, n), this.emitter.explode(t, e, n)
                    }, n.stop = function () {
                        this.emitter.forEachAlive((function (t) {
                            t.lifeCurrent = 0
                        }), this)
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        595: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2),
                s = n(596),
                o = r.default.EFFECTS,
                l = o.KEY,
                c = o.FRAME,
                u = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, l, c.FX_STAR_YELLOW) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.createEmitters(), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            frame: c.FX_STAR_YELLOW,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            deathZone: {
                                source: this.emitZone,
                                type: "onLeave"
                            },
                            frequency: 200,
                            speedX: {
                                min: -1,
                                max: 1
                            },
                            speedY: {
                                min: -9,
                                max: -13
                            },
                            lifespan: {
                                min: 1e3,
                                max: 1500
                            },
                            scale: {
                                min: .01,
                                max: .015
                            },
                            emitCallback: function (e) {
                                e.setScale({
                                    min: t / 4,
                                    max: t
                                })
                            },
                            particleClass: s.default
                        })
                    }, n.run = function (t, e, n, i, a) {
                        this.stop(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.start()
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = u
        },
        625: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_STAR_YELLOW) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_STAR_YELLOW,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            timeScale: 1,
                            frequency: 100,
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            scale: {
                                start: 1 * t,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            lifespan: {
                                min: 1500,
                                max: 3e3
                            }
                        })
                    }, n.run = function (t, e, n, i, a, r) {
                        void 0 === r && (r = 100), this.stop(), this.reset(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.setFrequency(r), this.emitter.start()
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, n.reset = function () {
                        this.createEmitters()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        623: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_COMET) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.createEmitters(), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_COMET,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            deathZone: {
                                source: this.emitZone,
                                type: "onLeave"
                            },
                            timeScale: 1,
                            frequency: 150,
                            speedY: {
                                min: -20,
                                max: -60
                            },
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Cubic.Out
                            },
                            scale: {
                                start: 1 * t,
                                end: 0,
                                ease: Phaser.Math.Easing.Cubic.Out
                            },
                            lifespan: {
                                min: 1500,
                                max: 2500
                            }
                        })
                    }, n.run = function (t, e, n, i, a) {
                        this.stop(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.start()
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        593: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_STAR_YELLOW) || this).emitter = void 0, n.scene = e, n.createEmitters(), n.setActive(!1), n.setVisible(!1), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_STAR_YELLOW,
                            alpha: {
                                start: 1,
                                end: .8
                            },
                            speed: {
                                min: 50,
                                max: 150
                            },
                            scale: {
                                start: .4 * t,
                                end: 1 * t
                            },
                            lifespan: {
                                min: 600,
                                max: 1500
                            }
                        })
                    }, n.explode = function (t, e, n) {
                        this.setActive(!0), this.setVisible(!0), this.emitter.explode(t, e, n)
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        594: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.EFFECTS,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, s, o.FX_COMET) || this).emitter = void 0, n.scene = e, n.createEmitters(), n.setActive(!1), n.setVisible(!1), n.scene.add.existing((0, i.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: o.FX_COMET,
                            alpha: {
                                start: 1,
                                end: .8
                            },
                            speed: {
                                min: 40,
                                max: 80
                            },
                            scale: {
                                start: .4 * t,
                                end: .7 * t
                            },
                            lifespan: {
                                min: 400,
                                max: 600
                            }
                        })
                    }, n.explode = function (t, e, n) {
                        this.revive(), this.emitter.explode(t, e, n)
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager);
            e.default = l
        },
        596: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scale = void 0, n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.update = function (e, n, i) {
                        var a = t.prototype.update.call(this, e, n, i);
                        return this.updateScale(), this.updateVelocity(), a
                    }, n.setScale = function (t) {
                        this.scale = Phaser.Math.FloatBetween(t.min, t.max)
                    }, n.easeInCubic = function (t) {
                        return t * t * t
                    }, n.updateScale = function () {
                        var t = this.easeInCubic(1 - this.lifeT);
                        this.scaleX = this.scale * Math.sin(t * Math.PI), this.scaleY = this.scale * Math.sin(t * Math.PI)
                    }, n.updateVelocity = function () {
                        this.velocityX += 2 * Math.random() - 1
                    }, e
                }(Phaser.GameObjects.Particles.Particle);
            e.default = a
        },
        627: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2).default.GAMEPLAY,
                s = r.KEY,
                o = r.FRAME,
                l = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).bg = void 0, a.frame = void 0, a.defaultHp = void 0, a.currentHp = void 0, a.color = void 0, a.hpLength = void 0, a.hpHeight = void 0, a.defaultHp = 100, a.currentHp = 100, a.hpLength = 30, a.hpHeight = 4, a.color = n, a.createHealthBar(), a.scene.add.existing((0, i.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createHealthBar = function () {
                        var t = this.scene.make.image({
                                key: s,
                                frame: o.HP_BAR_BG
                            }),
                            e = this.hpLength + 1,
                            n = this.hpHeight + 1;
                        t.setOrigin(0, .5), t.setWorldSize(e, n), t.setX(-e / 2), this.add(t), this.bg = t;
                        var i = this.scene.make.image({
                            key: s,
                            frame: o.HP_BAR_BG
                        });
                        i.setOrigin(0, .5), i.setWorldSize(this.hpLength, this.hpHeight), i.setX(-this.hpLength / 2), this.add(i), this.frame = i
                    }, n.setInitHp = function (t) {
                        this.defaultHp = t, this.currentHp = t, this.updateFrameUI()
                    }, n.getCurrentHp = function () {
                        return this.currentHp
                    }, n.updateCurrentHpUI = function (t) {
                        t < 0 && (t = 0), this.currentHp = t, this.updateFrameUI()
                    }, n.updateHpUIByMinus = function (t) {
                        this.currentHp -= t, this.currentHp < 0 && (this.currentHp = 0), this.updateFrameUI()
                    }, n.updateFrameUI = function () {
                        this.frame.setWorldSize(this.currentHp / this.defaultHp * this.hpLength, this.hpHeight), this.frame.setTintFill(this.color)
                    }, n.changeHpColor = function (t) {
                        var e = t ? 39423 : 15466524;
                        this.frame.setTintFill(e), this.color = e
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = l
        },
        18: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                PROJECTILES_ANIMATION: function () {
                    return d
                },
                SPINE_ANIMATIONS: function () {
                    return h
                },
                SPINE_EVENTS: function () {
                    return u
                },
                SPRITES_ANIMATION: function () {
                    return f
                }
            });
            var i = n(2),
                a = i.default.UNITS_SPRITES,
                r = a.KEY,
                s = a.FRAME,
                o = i.default.GAMEPLAY,
                l = o.KEY,
                c = o.FRAME,
                u = {
                    END: 2,
                    START: 0,
                    EVENT: 5,
                    DISPOSE: 3,
                    COMPLETE: 4,
                    INTERRUPT: 1
                },
                h = {
                    MELEE: {
                        RUN: "run",
                        DIE: "die",
                        IDLE: "idle",
                        ATTACK: "attack",
                        CUSTOM_EVENTS: {
                            FINISHED_ATTACKING: "finished_attacking"
                        }
                    },
                    RANGED: {
                        DIE: "die",
                        IDLE: "idle",
                        ATTACK: "attack",
                        ATTACK_ABOVE: "attack_above",
                        ATTACK_BELOW: "attack_below",
                        CUSTOM_EVENTS: {
                            FINISHED_ATTACKING: "finished_attacking"
                        }
                    }
                },
                d = {
                    GREEN_FIRE: {
                        KEY: "confetti-hexagon-animation",
                        TEXTURE: l,
                        PREFIX: c.GREEN_FIRE_PREFIX,
                        FRAME_RATE: 30,
                        START: 1,
                        END: 3,
                        ZERO_PAD: 0
                    }
                },
                f = {
                    MELEE: {
                        1: {
                            ATTACK: {
                                KEY: "velociraptor-attack",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].ATTACK_PREFIX,
                                FRAME_RATE: 30,
                                EVENT_FRAME: 9,
                                START: 0,
                                END: 20,
                                ZERO_PAD: 2
                            },
                            DIE: {
                                KEY: "velociraptor-die",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].DIE_PREFIX,
                                FRAME_RATE: 20,
                                START: 0,
                                END: 19,
                                ZERO_PAD: 2
                            },
                            IDLE: {
                                KEY: "velociraptor-idle",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].IDLE_PREFIX,
                                FRAME_RATE: 30,
                                START: 0,
                                END: 39,
                                ZERO_PAD: 2
                            },
                            RUN: {
                                KEY: "velociraptor-move",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].RUN_PREFIX,
                                FRAME_RATE: 40,
                                START: 0,
                                END: 20,
                                ZERO_PAD: 2
                            }
                        }
                    },
                    RANGED: {
                        1: {
                            ATTACK_ABOVE: {
                                KEY: "rockthrower-attack",
                                TEXTURE: r,
                                PREFIX: s.RANGED[1].ATTACK_PREFIX,
                                FRAME_RATE: 30,
                                EVENT_FRAME: 16,
                                START: 0,
                                END: 29,
                                ZERO_PAD: 2
                            },
                            ATTACK_BELOW: {
                                KEY: "rockthrower-attack",
                                TEXTURE: r,
                                PREFIX: s.RANGED[1].ATTACK_PREFIX,
                                FRAME_RATE: 30,
                                EVENT_FRAME: 16,
                                START: 0,
                                END: 29,
                                ZERO_PAD: 2
                            },
                            DIE: {
                                KEY: "rockthrower-die",
                                TEXTURE: r,
                                PREFIX: s.RANGED[1].DIE_PREFIX,
                                FRAME_RATE: 24,
                                START: 0,
                                END: 23,
                                ZERO_PAD: 2
                            },
                            IDLE: {
                                KEY: "rockthrower-idle",
                                TEXTURE: r,
                                PREFIX: s.RANGED[1].IDLE_PREFIX,
                                FRAME_RATE: 24,
                                START: 0,
                                END: 23,
                                ZERO_PAD: 2
                            }
                        }
                    },
                    ALIEN: {
                        1: {
                            ATTACK: {
                                KEY: "velociraptor-attack",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].ATTACK_PREFIX,
                                FRAME_RATE: 30,
                                START: 0,
                                END: 29,
                                ZERO_PAD: 2
                            },
                            DIE: {
                                KEY: "velociraptor-die",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].DIE_PREFIX,
                                FRAME_RATE: 20,
                                START: 0,
                                END: 19,
                                ZERO_PAD: 2
                            },
                            IDLE: {
                                KEY: "velociraptor-idle",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].IDLE_PREFIX,
                                FRAME_RATE: 40,
                                START: 0,
                                END: 39,
                                ZERO_PAD: 2
                            },
                            RUN: {
                                KEY: "velociraptor-move",
                                TEXTURE: r,
                                PREFIX: s.MELEE[1].RUN_PREFIX,
                                FRAME_RATE: 25,
                                START: 0,
                                END: 24,
                                ZERO_PAD: 2
                            }
                        }
                    }
                }
        },
        108: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                NORMAL: "NORMAL",
                BATTLE: "BATTLE",
                TUTORIAL: "TUTORIAL"
            }
        },
        60: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                COIN_SUFFIX: "coinSuffixValue",
                COIN_BASE_VALUE: "coinBaseValue",
                PLAYER_UNIT_DATA: "playerUnitData",
                LEVEL_PROGRESS: "playerLevelProgress",
                MELEE_UNLOCKED: "meleeUnlockedUnitLevel",
                RANGED_UNLOCKED: "rangedUnlockedUnitLevel",
                FREE_GOLD_LAST_USED: "freeCoinsLastUsedTime",
                SELECTED_LEVEL: "selectedLevel",
                UNIT_SCREEN_AD_WATCHED_COUNT: "unitScreenAdWatchedCount"
            }
        },
        27: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                MELEE_UNIT_TYPE: "melee",
                RANGED_UNIT_TYPE: "ranged",
                ALIEN_UNIT_TYPE: "alien",
                MELEE_ATTACK_RANGE: 40,
                MELEE_MOVEMENT_SPEED: 100,
                MELEE_ATTACK_INTERVAL: 800,
                RANGED_ATTACK_INTERVAL: 1100,
                RANGED_PROJECTILE_SPEED: 600,
                BASE_UNIT_COIN: 2,
                UNIT_COIN_SCALE: 1.6,
                COINS_PER_ATTACK: 1,
                ATTACK_COIN_SCALE: 1.6,
                MULTIPLY_REWARD_ROUND: 6,
                MULTIPLY_REWARD_BATTLE: 2,
                UNIT_SIZE_SCALE: 1,
                UNIT_PRICE_CUSTOM_MODIFIER: [
                    [1, 1],
                    [3, 5],
                    [10, 2],
                    [25, 1.5],
                    [40, 1.5]
                ],
                ATTACK_CUSTOM_MODIFIER: [
                    [1, 1],
                    [9, 2],
                    [30, 1.2]
                ],
                AD_WATCH_REQUIREMENT: [0, 1, 2, 3, 4, 5, 7, 9, 12, 15, 20],
                BUYING_UNIT_LEVEL: [1, 51, 151, 251]
            }
        },
        174: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                PREPARE: "prepare",
                READY: "ready",
                MOVING_TO_TARGET: "movingToTarget",
                PREPARE_TO_ATTACK: "prepareToAttack",
                ATTACKING: "attacking",
                FINISHED_ATTACKING: "finishedAttacking",
                KILLED: "killed"
            }
        },
        728: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = function () {
                function t(t) {
                    this.scene = void 0, this.numOfPlayerSpawnedUnits = void 0, this.resourcePool = void 0, this.scene = t, this.resourcePool = new Phaser.GameObjects.Group(this.scene, {
                        runChildUpdate: !1
                    })
                }
                var e = t.prototype;
                return e.init = function () {
                    this.numOfPlayerSpawnedUnits = 0
                }, e.returnToPool = function (t) {
                    this.resourcePool.add(t)
                }, e.getPlayerSpawnedUnitsCount = function () {
                    return this.numOfPlayerSpawnedUnits
                }, e.setSpawnedUnits = function (t) {
                    this.numOfPlayerSpawnedUnits = t
                }, t
            }();
            e.default = i
        },
        628: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return gt
                }
            });
            var i = n(0),
                a = n(191),
                r = n.n(a),
                s = n(727),
                o = n(203),
                l = n(27),
                c = n(174),
                u = n(18),
                h = n(629),
                d = n(24),
                f = n.n(d),
                p = n(40),
                g = n(135),
                v = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, f()(e = [this]).call(e, a)) || this).handleAttacked = function () {
                            if (!n.unit.isKilled()) {
                                var t = n.unit.attackController.getAttackTarget();
                                t && (t.isKilled() ? n.unit.display.addAnimEventListener(Phaser.Animations.Events.ANIMATION_COMPLETE, n.handleFinishedAttacking) : (t.takeDamage(n.unit), t.attackController.notifyTargetAttacked(n.unit)))
                            }
                        }, n.handleFinishedAttacking = function () {
                            n.unit.setStatus(c.default.FINISHED_ATTACKING)
                        }, n
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.setStatus(i), this.unit.display.play(e, n, !1), this.unit.display.setAnimationTimeScale(1), this.unit.display.addAnimEventListener(u.SPINE_ANIMATIONS.MELEE.CUSTOM_EVENTS.FINISHED_ATTACKING, this.handleAttacked), this.unit.scene.audio.playSound(p.default.MELEE_ATTACK, {
                            volume: .5,
                            detune: -1e3 * Math.random()
                        });
                        var a = this.unit.attackController.getAttackTarget();
                        a && this.unit.display.setFlipX(a.x <= this.unit.x)
                    }, e
                }(g.default),
                m = v,
                E = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, f()(e = [this]).call(e, a)) || this).handleAnimationComplete = function () {
                            n.unit.effectController.runDieEffect()
                        }, n
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t, e = this.payload,
                            n = e.spriteAnimKey,
                            i = e.spineAnimKey,
                            a = e.status;
                        this.unit.setStatus(a), null == (t = this.unit.attackEvent) || t.destroy(), this.unit.uiController.killHpBar(), this.unit.depthController.setDepthOnDeath(), this.unit.effectController.stopDamageEffect(), this.unit.display.play(n, i, !1, !0), this.unit.display.setAnimationTimeScale(1), this.unit.display.addAnimEventListener(Phaser.Animations.Events.ANIMATION_COMPLETE, this.handleAnimationComplete)
                    }, e
                }(g.default),
                y = E,
                A = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status,
                            a = this.unit.attackController.getAttackTarget();
                        a && (this.unit.isDepthDirty = !0, this.unit.getStatus() !== i && (this.unit.setStatus(i), this.unit.display.play(e, n, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random())), this.unit.display.setFlipX(a.x < this.unit.x))
                    }, e
                }(g.default),
                T = A,
                S = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.revive(), this.unit.setStatus(i), this.unit.isDepthDirty = !0, this.unit.uiController.killHpBar(), this.unit.effectController.stopDieEffect(), this.unit.display.setFlipX(!1), this.unit.display.play(e, n, !0, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random()), this.unit.attackController.reset()
                    }, e
                }(g.default),
                M = S,
                w = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.setStatus(i), this.unit.uiController.reviveHpBar(), this.unit.display.play(e, n, !0, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random())
                    }, e
                }(g.default),
                x = w,
                C = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.addAttackCommand = function () {
                        this.attackCommand = new m(this.unit, {
                            status: c.default.ATTACKING,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("ATTACK"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("ATTACK")
                        })
                    }, n.addReadyCommand = function () {
                        this.readyCommand = new x(this.unit, {
                            status: c.default.READY,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("IDLE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("IDLE")
                        })
                    }, n.addMoveCommand = function () {
                        this.moveCommand = new T(this.unit, {
                            status: c.default.MOVING_TO_TARGET,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("RUN"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("RUN")
                        })
                    }, n.addDieCommand = function () {
                        this.dieCommand = new y(this.unit, {
                            status: c.default.KILLED,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("DIE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("DIE")
                        })
                    }, n.addPrepareCommand = function () {
                        this.prepareCommand = new M(this.unit, {
                            status: c.default.PREPARE,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("IDLE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("IDLE")
                        })
                    }, n.getSpriteAnimKeyByUnitLevel = function (t) {
                        try {
                            var e = this.unit,
                                n = e.level,
                                i = (e.scene, e.unitType, n);
                            return i >= 2 && (i = 1), u.SPRITES_ANIMATION.MELEE[i][t].KEY
                        } catch (a) {
                            return u.SPRITES_ANIMATION.ALIEN[1].IDLE.KEY
                        }
                    }, n.getSpineAnimKeyByUnitLevel = function (t) {
                        var e = u.SPINE_ANIMATIONS.MELEE[t];
                        if (!e) throw new Error("Can't find spine animation " + t);
                        return e
                    }, e
                }(h.default),
                I = C,
                b = function (t) {
                    function e(e, n, i, a, r, s) {
                        var o;
                        (o = t.call(this, e, n, i, a, r, s) || this).movementSpeed = void 0, o.savedApproachXOffset = void 0, o.savedApproachYOffset = void 0, o.unitType = l.default.MELEE_UNIT_TYPE, o.movementSpeed = l.default.MELEE_MOVEMENT_SPEED, o.attackInterval = l.default.MELEE_ATTACK_INTERVAL;
                        var c = o.display.getSpineAnimationAttackingTime();
                        return o.attackInterval < c && (o.attackInterval = c), o.savedApproachXOffset = null, o.savedApproachYOffset = null, o
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createActions = function () {
                        this.actions = new I(this)
                    }, n.moveToAttackPosition = function (t) {
                        if (!this.isKilled()) {
                            var e = this.attackController.getAttackTarget();
                            if (e && (null == e || !e.isKilled())) {
                                var n = e.requestAttackPosition(this);
                                n && (this.isDepthDirty = !0, this.executeMovement(t, n.location))
                            }
                        }
                    }, n.executeMovement = function (t, e) {
                        var n = this.x,
                            i = this.y,
                            a = Phaser.Math.Distance.Between(n, i, e.x, e.y),
                            r = e.x - n,
                            s = e.y - i,
                            o = 0 !== r ? r / a * this.movementSpeed / 1e3 * t : 0,
                            l = 0 !== s ? s / a * this.movementSpeed / 1e3 * t : 0;
                        if (Phaser.Math.Distance.Between(n + o, i + l, e.x, e.y) <= 3) return this.setPosition(n + o, i + l), this.setStatus(c.default.PREPARE_TO_ATTACK), void this.attackController.moveAttackSpotMelee(e.x - n, e.y - i);
                        this.display.setFlipX(o < 0), this.setPosition(n + o, i + l), this.attackController.moveAttackSpotMelee(o, l)
                    }, n.moveToTarget = function (t) {
                        this.moveToAttackPosition(t)
                    }, n.determineCounteringEnemy = function () {
                        var t, e, n, i = this.attackController,
                            a = i.beingAttackedByMelee,
                            r = i.beingAttackedByRanged,
                            s = this.attackController.getAttackTarget();
                        if (null != (t = s) && t.isKilled() && (s = null), a && !a.isKilled()) return this.attackController.setAttackTarget(a), null == (e = s) || e.attackController.resetAttackSpotOfUnit(this), !0;
                        if (r && !r.isKilled() && Phaser.Math.Distance.Between(this.x, this.y, r.x, r.y) < (s ? Phaser.Math.Distance.Between(this.x, this.y, s.x, s.y) : 1e4)) return this.attackController.setAttackTarget(r), null == (n = s) || n.attackController.resetAttackSpotOfUnit(this), !0;
                        return !1
                    }, n.setUnitData = function (e) {
                        t.prototype.setUnitData.call(this, e), this.unitType = l.default.MELEE_UNIT_TYPE
                    }, n.update = function (e, n) {
                        if (t.prototype.update.call(this, e, n), !this.isKilled() && this.scene.stateManager.isInPlayingState()) {
                            var i = this.attackController.getAttackTarget();
                            if (this.isReady()) return i && !i.isKilled() || this.findTarget(), void(i && this.actions.move());
                            if (this.isMovingToTarget()) {
                                var a = this.determineCounteringEnemy();
                                if (this.moveToTarget(n), a) return;
                                return null != i && i.isKilled() ? (this.attackController.resetAttackTarget(), void this.actions.ready()) : void 0
                            }
                            if (this.isPreparingToAttack()) return null != i && i.isKilled() ? void this.actions.ready() : void this.attack();
                            this.isFinishedAttacking() && (this.savedApproachXOffset = null, this.savedApproachYOffset = null, this.actions.ready())
                        }
                    }, e
                }(o.default),
                R = n(30),
                P = n.n(R),
                _ = n(2),
                k = _.default.UNITS_SPINES.MELEE[10].KEY,
                L = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                D = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: k,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(L).call(L, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                O = _.default.UNITS_SPINES.MELEE[11].KEY,
                N = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                U = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: O,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(N).call(N, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                B = _.default.UNITS_SPRITES,
                F = B.KEY,
                G = B.FRAME,
                H = _.default.UNITS_SPINES.MELEE[1].KEY,
                V = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                Y = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: H,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            sprite: {
                                key: F,
                                frame: G.MELEE[1].MAIN_TEXTURE,
                                displayWidth: 86.5,
                                displayHeight: 68
                            },
                            useSpine: !P()(V).call(V, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                W = _.default.UNITS_SPINES.MELEE[2].KEY,
                K = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                z = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: W,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(K).call(K, i.level)
                        }) || this).updatePositionHpBar(), a
                    }
                    return (0, i.default)(e, t), e
                }(b),
                X = _.default.UNITS_SPINES.MELEE[3].KEY,
                j = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                q = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: X,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(j).call(j, i.level)
                        }) || this).updatePositionHpBar(), a
                    }
                    return (0, i.default)(e, t), e
                }(b),
                Z = _.default.UNITS_SPINES.MELEE[4].KEY,
                Q = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                J = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: Z,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(Q).call(Q, i.level)
                        }) || this).updatePositionHpBar(), a
                    }
                    return (0, i.default)(e, t), e
                }(b),
                $ = _.default.UNITS_SPINES.MELEE[5].KEY,
                tt = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                et = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: $,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(tt).call(tt, i.level)
                        }) || this).updatePositionHpBar(), a
                    }
                    return (0, i.default)(e, t), e
                }(b),
                nt = _.default.UNITS_SPINES.MELEE[6].KEY,
                it = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                at = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: nt,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(it).call(it, i.level)
                        }) || this).updatePositionHpBar(), a
                    }
                    return (0, i.default)(e, t), e
                }(b),
                rt = _.default.UNITS_SPINES.MELEE[7].KEY,
                st = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                ot = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: rt,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(st).call(st, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                lt = _.default.UNITS_SPINES.MELEE[8].KEY,
                ct = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                ut = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: lt,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(ct).call(ct, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                ht = _.default.UNITS_SPINES.MELEE[9].KEY,
                dt = GameCore.Configs.UnitsConfig.MELEE.listLevelsUseSprite,
                ft = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: ht,
                                spineConfig: {
                                    animation: u.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !P()(dt).call(dt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(b),
                pt = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.requestUnitByLevel = function (t, e, n) {
                        void 0 === n && (n = !1);
                        var i = this.getUnitFromResourcePoolByLevel(t);
                        return i ? (e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, t - 1)), i.reuseUnitFromPool(e), this.scene.add.existing(i), i) : i = this.createUnitByLevel(t, e, n)
                    }, n.requestUnitById = function (t, e, n) {
                        void 0 === n && (n = !1);
                        var i = this.getUnitFromResourcePoolById(t);
                        return i ? (e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, i.level - 1)), i.reuseUnitFromPool(e), this.scene.add.existing(i), i) : i = this.createUnitById(t, e, n)
                    }, n.createUnitByLevel = function (t, e, n) {
                        var i;
                        void 0 === n && (n = !1);
                        var a = this.getUnitDataByLevel(t);
                        switch (t) {
                            case 1:
                                i = new Y(this.scene, e, a);
                                break;
                            case 2:
                                i = new z(this.scene, e, a);
                                break;
                            case 3:
                                i = new q(this.scene, e, a);
                                break;
                            case 4:
                                i = new J(this.scene, e, a);
                                break;
                            case 5:
                                i = new et(this.scene, e, a);
                                break;
                            case 6:
                                i = new at(this.scene, e, a);
                                break;
                            case 7:
                                i = new ot(this.scene, e, a);
                                break;
                            case 8:
                                i = new ut(this.scene, e, a);
                                break;
                            case 9:
                                i = new ft(this.scene, e, a);
                                break;
                            case 10:
                                i = new D(this.scene, e, a);
                                break;
                            case 11:
                                i = new U(this.scene, e, a);
                                break;
                            default:
                                return new s.default(this.scene, e)
                        }
                        return e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, t - 1)), i
                    }, n.createUnitById = function (t, e, n) {
                        var i;
                        void 0 === n && (n = !1);
                        var a = this.getUnitDataById(t);
                        if (!a) return new s.default(this.scene, e);
                        switch (t) {
                            case "velociraptor":
                                i = new Y(this.scene, e, a);
                                break;
                            case "saurolophus":
                                i = new z(this.scene, e, a);
                                break;
                            case "pachysaurus":
                                i = new q(this.scene, e, a);
                                break;
                            case "triceratops":
                                i = new J(this.scene, e, a);
                                break;
                            case "stegosaurus":
                                i = new et(this.scene, e, a);
                                break;
                            case "ankylosaurus":
                                i = new at(this.scene, e, a);
                                break;
                            case "baroptiloraptor":
                                i = new ot(this.scene, e, a);
                                break;
                            case "tyrannosaurus":
                                i = new ut(this.scene, e, a);
                                break;
                            case "dilophosaurus":
                                i = new ft(this.scene, e, a);
                                break;
                            case "triceradonosaurus":
                                i = new D(this.scene, e, a);
                                break;
                            case "spinosaurus-rex":
                                i = new U(this.scene, e, a);
                                break;
                            default:
                                return new s.default(this.scene, e)
                        }
                        return e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, a.level - 1)), i
                    }, n.getUnitDataByLevel = function (t) {
                        return this.scene.cache.json.get("unitData").melee[t - 1]
                    }, n.getUnitDataById = function (t) {
                        var e, n = this.scene.cache.json.get("unitData");
                        return r()(e = n.melee).call(e, (function (e) {
                            return e.id === t
                        }))
                    }, n.getUnitFromResourcePoolByLevel = function (t) {
                        var e = this.resourcePool.getChildren(),
                            n = r()(e).call(e, (function (e) {
                                return e instanceof b && e.level === t
                            }));
                        if (n instanceof o.default) return this.resourcePool.remove(n), n
                    }, n.getUnitFromResourcePoolById = function (t) {
                        var e = this.resourcePool.getChildren(),
                            n = r()(e).call(e, (function (e) {
                                return e instanceof b && e.originalUnitData.id === t
                            }));
                        if (n instanceof o.default) return this.resourcePool.remove(n), n
                    }, e
                }(n(728).default),
                gt = pt
        },
        630: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return Ct
                }
            });
            var i = n(0),
                a = n(191),
                r = n.n(a),
                s = n(727),
                o = n(203),
                l = n(3),
                c = n(18),
                u = n(85),
                h = n(631),
                d = n(632),
                f = n(633),
                p = n(634),
                g = n(635),
                v = n(636),
                m = n(637),
                E = n(638),
                y = n(639),
                A = n(640),
                T = n(641),
                S = function () {
                    function t(t) {
                        this.unit = void 0, this.scene = void 0, this.unit = t, this.scene = t.scene
                    }
                    return t.prototype.createProjectile = function (t) {
                        var e, n = t.level,
                            i = t.speed,
                            a = t.target,
                            r = {
                                attacker: this.unit,
                                target: a,
                                speed: i
                            };
                        switch (n) {
                            case 1:
                                e = new h.default(this.unit.scene, r);
                                break;
                            case 2:
                                e = new d.default(this.unit.scene, r);
                                break;
                            case 3:
                                e = new f.default(this.unit.scene, r);
                                break;
                            case 4:
                                e = new p.default(this.unit.scene, r);
                                break;
                            case 5:
                                e = new g.default(this.unit.scene, r);
                                break;
                            case 6:
                                e = new v.default(this.unit.scene, r);
                                break;
                            case 7:
                                e = new m.default(this.unit.scene, r);
                                break;
                            case 8:
                                e = new E.default(this.unit.scene, r);
                                break;
                            case 9:
                                e = new y.default(this.unit.scene, r);
                                break;
                            case 10:
                                e = new A.default(this.unit.scene, r);
                                break;
                            case 11:
                                e = new T.default(this.unit.scene, r);
                                break;
                            default:
                                e = new u.default(this.unit.scene, r)
                        }
                        this.scene.unitManager.rangedProjectiles.add(e)
                    }, t
                }(),
                M = n(27),
                w = n(174),
                x = n(135),
                C = n(629),
                I = n(40),
                b = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, {
                            spineAnimKey: n.spineAboveAnimKey,
                            spriteAnimKey: n.spriteAboveAnimKey,
                            status: n.status
                        }) || this).unit = void 0, i.spriteBelowAnimKey = void 0, i.spineBelowAnimKey = void 0, i.handleAttacked = function () {
                            if (!i.unit.isKilled()) {
                                var t = i.unit.attackController.getAttackTarget();
                                t && (t.isKilled() && i.unit.display.addAnimEventListener(Phaser.Animations.Events.ANIMATION_COMPLETE, i.handleFinishedAttacking), i.unit.projectileController.createProjectile({
                                    level: i.unit.level,
                                    target: t
                                }), i.unit.scene.audio.playSound(I.default.ARROW_SHOOT, {
                                    volume: .5,
                                    detune: -1e3 * Math.random()
                                }))
                            }
                        }, i.handleFinishedAttacking = function () {
                            i.unit.setStatus(w.default.FINISHED_ATTACKING)
                        }, i.spriteBelowAnimKey = n.spriteBelowAnimKey, i.spineBelowAnimKey = n.spineBelowAnimKey, i.unit = e, i
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status,
                            a = this.unit.attackController.getAttackTarget();
                        a ? (this.unit.setStatus(i), this.unit.display.setAnimationTimeScale(1), this.unit.y > a.y ? this.unit.display.play(this.spriteBelowAnimKey, this.spineBelowAnimKey, !1) : this.unit.display.play(e, n, !1), this.unit.display.addAnimEventListener(c.SPINE_ANIMATIONS.RANGED.CUSTOM_EVENTS.FINISHED_ATTACKING, this.handleAttacked), this.unit.display.setFlipX(a.x <= this.unit.x)) : this.unit.setStatus(w.default.FINISHED_ATTACKING)
                    }, e
                }(x.default),
                R = n(24),
                P = n.n(R),
                _ = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, P()(e = [this]).call(e, a)) || this).handleAnimationComplete = function () {
                            n.unit.effectController.runDieEffect()
                        }, n
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t, e = this.payload,
                            n = e.spriteAnimKey,
                            i = e.spineAnimKey,
                            a = e.status;
                        this.unit.setStatus(a), null == (t = this.unit.attackEvent) || t.destroy(), this.unit.uiController.killHpBar(), this.unit.depthController.setDepthOnDeath(), this.unit.effectController.stopDamageEffect(), this.unit.display.setAnimationTimeScale(1), this.unit.display.play(n, i, !1, !0), this.unit.display.addAnimEventListener(Phaser.Animations.Events.ANIMATION_COMPLETE, this.handleAnimationComplete)
                    }, e
                }(x.default),
                k = _,
                L = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.revive(), this.unit.setStatus(i), this.unit.isDepthDirty = !0, this.unit.uiController.killHpBar(), this.unit.effectController.stopDieEffect(), this.unit.display.setFlipX(!1), this.unit.display.play(e, n, !0, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random()), this.unit.attackController.reset()
                    }, e
                }(x.default),
                D = L,
                O = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.setStatus(i), this.unit.uiController.reviveHpBar(), this.unit.display.play(e, n, !0, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random())
                    }, e
                }(x.default),
                N = O,
                U = (c.SPINE_ANIMATIONS.RANGED, function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).unit = void 0, n.unit = e, n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.addAttackCommand = function () {
                        this.attackCommand = new b(this.unit, {
                            status: w.default.ATTACKING,
                            spriteAboveAnimKey: this.getSpriteAnimKeyByUnitLevel("ATTACK_ABOVE"),
                            spriteBelowAnimKey: this.getSpriteAnimKeyByUnitLevel("ATTACK_BELOW"),
                            spineAboveAnimKey: this.getSpineAnimKeyByUnitLevel("ATTACK_ABOVE"),
                            spineBelowAnimKey: this.getSpineAnimKeyByUnitLevel("ATTACK_BELOW")
                        })
                    }, n.addReadyCommand = function () {
                        this.readyCommand = new N(this.unit, {
                            status: w.default.READY,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("IDLE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("IDLE")
                        })
                    }, n.addMoveCommand = function () {
                        this.moveCommand = new x.default(this.unit, {
                            status: w.default.MOVING_TO_TARGET,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("IDLE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("IDLE")
                        })
                    }, n.addDieCommand = function () {
                        this.dieCommand = new k(this.unit, {
                            status: w.default.KILLED,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("DIE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("DIE")
                        })
                    }, n.addPrepareCommand = function () {
                        this.prepareCommand = new D(this.unit, {
                            status: w.default.PREPARE,
                            spriteAnimKey: this.getSpriteAnimKeyByUnitLevel("IDLE"),
                            spineAnimKey: this.getSpineAnimKeyByUnitLevel("IDLE")
                        })
                    }, n.resetRangedAttackAnimation = function () {
                        this.addAttackCommand()
                    }, n.getSpriteAnimKeyByUnitLevel = function (t) {
                        try {
                            var e = this.unit,
                                n = e.level,
                                i = (e.scene, e.unitType, n);
                            return i >= 2 && (i = 1), c.SPRITES_ANIMATION.RANGED[i][t].KEY
                        } catch (a) {
                            return c.SPRITES_ANIMATION.ALIEN[1].IDLE.KEY
                        }
                    }, n.getSpineAnimKeyByUnitLevel = function (t) {
                        var e = c.SPINE_ANIMATIONS.RANGED[t];
                        if (!e) throw new Error("Can't find spine animation " + t);
                        return e
                    }, e
                }(C.default)),
                B = c.SPINE_ANIMATIONS.RANGED.CUSTOM_EVENTS.FINISHED_ATTACKING,
                F = function (t) {
                    function e(e, n, i, a, r, s) {
                        var o;
                        (o = t.call(this, e, n, i, a, r, s) || this).projectileColor = void 0, o.projectileSpeed = void 0, o.projectileController = void 0, o.projectileController = new S((0, l.default)(o)), o.unitType = M.default.RANGED_UNIT_TYPE, o.attackInterval = M.default.RANGED_ATTACK_INTERVAL;
                        var c = o.display.getSpineAnimationAttackingTime();
                        return o.attackInterval < c && (o.attackInterval = c), o.projectileSpeed = M.default.RANGED_PROJECTILE_SPEED, o
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createActions = function () {
                        this.actions = new U(this)
                    }, n.determineCounteringEnemy = function () {
                        var t, e = this.attackController,
                            n = e.beingAttackedByMelee,
                            i = e.beingAttackedByRanged,
                            a = this.attackController.getAttackTarget();
                        return null != (t = a) && t.isKilled() && (a = null), n && !n.isKilled() ? (this.attackController.setAttackTarget(n), !0) : !(!i || i.isKilled()) && (this.attackController.setAttackTarget(i), !0)
                    }, n.setUnitData = function (e) {
                        t.prototype.setUnitData.call(this, e), this.unitType = M.default.RANGED_UNIT_TYPE
                    }, n.update = function (e, n) {
                        if (t.prototype.update.call(this, e, n), !this.isKilled() && this.scene.stateManager.isInPlayingState()) {
                            var i = this.attackController.getAttackTarget();
                            if (this.isReady()) return this.determineCounteringEnemy() || i && !i.isKilled() || this.findTarget(), void(i && this.setStatus(w.default.PREPARE_TO_ATTACK));
                            if (this.isPreparingToAttack()) return null != i && i.isKilled() ? void this.actions.ready() : void this.attack();
                            this.isAttacking() && null != i && i.isKilled() && 3 !== this.display.getAnimationTimeScale() && (this.display.setAnimationTimeScale(3), this.display.changeCurrentSpriteEventTime(B)), this.isFinishedAttacking() && this.actions.ready()
                        }
                    }, n.reuseUnitFromPool = function (e) {
                        t.prototype.reuseUnitFromPool.call(this, e);
                        var n = this.actions;
                        n instanceof U && n.resetRangedAttackAnimation()
                    }, e
                }(o.default),
                G = n(30),
                H = n.n(G),
                V = n(2),
                Y = V.default.UNITS_SPINES.RANGED[10].KEY,
                W = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                K = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: Y,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(W).call(W, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                z = V.default.UNITS_SPINES.RANGED[11].KEY,
                X = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                j = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: z,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(X).call(X, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                q = V.default.UNITS_SPRITES,
                Z = q.KEY,
                Q = q.FRAME,
                J = V.default.UNITS_SPINES.RANGED[1].KEY,
                $ = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                tt = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: J,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            sprite: {
                                key: Z,
                                frame: Q.RANGED[1].MAIN_TEXTURE,
                                displayWidth: 55,
                                displayHeight: 73
                            },
                            useSpine: !H()($).call($, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                et = V.default.UNITS_SPINES.RANGED[2].KEY,
                nt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                it = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: et,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(nt).call(nt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                at = V.default.UNITS_SPINES.RANGED[3].KEY,
                rt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                st = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: at,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(rt).call(rt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                ot = V.default.UNITS_SPINES.RANGED[4].KEY,
                lt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                ct = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: ot,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(lt).call(lt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                ut = V.default.UNITS_SPINES.RANGED[5].KEY,
                ht = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                dt = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: ut,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(ht).call(ht, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                ft = V.default.UNITS_SPINES.RANGED[6].KEY,
                pt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                gt = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: ft,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(pt).call(pt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                vt = V.default.UNITS_SPINES.RANGED[7].KEY,
                mt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                Et = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: vt,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(mt).call(mt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                yt = V.default.UNITS_SPINES.RANGED[8].KEY,
                At = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                Tt = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: yt,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(At).call(At, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                St = V.default.UNITS_SPINES.RANGED[9].KEY,
                Mt = GameCore.Configs.UnitsConfig.RANGED.listLevelsUseSprite,
                wt = function (t) {
                    function e(e, n, i) {
                        return t.call(this, e, 0, 0, n, i, {
                            spine: {
                                key: St,
                                spineConfig: {
                                    animation: c.SPINE_ANIMATIONS.RANGED.IDLE,
                                    loop: !0
                                }
                            },
                            useSpine: !H()(Mt).call(Mt, i.level)
                        }) || this
                    }
                    return (0, i.default)(e, t), e
                }(F),
                xt = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.requestUnitByLevel = function (t, e, n) {
                        void 0 === n && (n = !1);
                        var i = this.getUnitFromResourcePoolByLevel(t);
                        return i ? (e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, t - 1)), i.reuseUnitFromPool(e), this.scene.add.existing(i), i) : i = this.createUnitByLevel(t, e, n)
                    }, n.requestUnitById = function (t, e, n) {
                        void 0 === n && (n = !1);
                        var i = this.getUnitFromResourcePoolById(t);
                        return i ? (e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, i.level - 1)), i.reuseUnitFromPool(e), this.scene.add.existing(i), i) : i = this.createUnitById(t, e, n)
                    }, n.createUnitByLevel = function (t, e, n) {
                        var i;
                        void 0 === n && (n = !1);
                        var a = this.getUnitDataByLevel(t);
                        switch (t) {
                            case 1:
                                i = new tt(this.scene, e, a);
                                break;
                            case 2:
                                i = new it(this.scene, e, a);
                                break;
                            case 3:
                                i = new st(this.scene, e, a);
                                break;
                            case 4:
                                i = new ct(this.scene, e, a);
                                break;
                            case 5:
                                i = new dt(this.scene, e, a);
                                break;
                            case 6:
                                i = new gt(this.scene, e, a);
                                break;
                            case 7:
                                i = new Et(this.scene, e, a);
                                break;
                            case 8:
                                i = new Tt(this.scene, e, a);
                                break;
                            case 9:
                                i = new wt(this.scene, e, a);
                                break;
                            case 10:
                                i = new K(this.scene, e, a);
                                break;
                            case 11:
                                i = new j(this.scene, e, a);
                                break;
                            default:
                                return new s.default(this.scene, e)
                        }
                        return e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, t - 1)), i
                    }, n.createUnitById = function (t, e, n) {
                        var i;
                        void 0 === n && (n = !1);
                        var a = this.getUnitDataById(t);
                        if (!a) return new s.default(this.scene, e);
                        switch (t) {
                            case "rockthrower":
                                i = new tt(this.scene, e, a);
                                break;
                            case "javelineer":
                                i = new it(this.scene, e, a);
                                break;
                            case "boomeranger":
                                i = new st(this.scene, e, a);
                                break;
                            case "macer":
                                i = new ct(this.scene, e, a);
                                break;
                            case "artemis":
                                i = new dt(this.scene, e, a);
                                break;
                            case "william":
                                i = new gt(this.scene, e, a);
                                break;
                            case "blanchette":
                                i = new Et(this.scene, e, a);
                                break;
                            case "phantom":
                                i = new Tt(this.scene, e, a);
                                break;
                            case "oracle":
                                i = new wt(this.scene, e, a);
                                break;
                            case "shaman":
                                i = new K(this.scene, e, a);
                                break;
                            case "seraph":
                                i = new j(this.scene, e, a);
                                break;
                            default:
                                return new s.default(this.scene, e)
                        }
                        return e && !n && (this.numOfPlayerSpawnedUnits += Math.pow(2, a.level - 1)), i
                    }, n.getUnitDataByLevel = function (t) {
                        return this.scene.cache.json.get("unitData").ranged[t - 1]
                    }, n.getUnitDataById = function (t) {
                        var e, n = this.scene.cache.json.get("unitData");
                        return r()(e = n.ranged).call(e, (function (e) {
                            return e.id === t
                        }))
                    }, n.getUnitFromResourcePoolByLevel = function (t) {
                        var e = this.resourcePool.getChildren(),
                            n = r()(e).call(e, (function (e) {
                                return e instanceof F && e.level === t
                            }));
                        if (n instanceof o.default) return this.resourcePool.remove(n), n
                    }, n.getUnitFromResourcePoolById = function (t) {
                        var e = this.resourcePool.getChildren(),
                            n = r()(e).call(e, (function (e) {
                                return e instanceof F && e.originalUnitData.id === t
                            }));
                        if (n instanceof o.default) return this.resourcePool.remove(n), n
                    }, e
                }(n(728).default),
                Ct = xt
        },
        727: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(18),
                s = n(203),
                o = a.default.UNITS_SPRITES,
                l = o.KEY,
                c = o.FRAME,
                u = a.default.UNITS_SPINES.MELEE[1].KEY,
                h = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, 0, 0, n, {
                            level: 100,
                            id: "alien",
                            name: "Warlock",
                            health: 1,
                            damage: 1,
                            attackSpeed: 1
                        }, {
                            spine: {
                                key: u,
                                spineConfig: {
                                    animation: r.SPINE_ANIMATIONS.MELEE.IDLE,
                                    loop: !0
                                }
                            },
                            sprite: {
                                key: l,
                                frame: c.MELEE[1].MAIN_TEXTURE,
                                displayWidth: 86.5,
                                displayHeight: 68
                            },
                            useSpine: !0
                        }) || this).level = 1, i.unitName = "Alien Lv.100", i.attackPower = 1, i.setDefaultHp(999999), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createActions = function () {
                        throw new Error("Method not implemented.")
                    }, n.findTarget = function () {
                        throw new Error("Method not implemented.")
                    }, e
                }(s.default);
            e.default = h
        },
        203: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return Y
                }
            });
            var i = n(73),
                a = n(3),
                r = n(0),
                s = n(174),
                o = n(191),
                l = n.n(o),
                c = n(56),
                u = n.n(c),
                h = n(171),
                d = n.n(h),
                f = n(27),
                p = function () {
                    function t(t) {
                        this.unit = void 0, this.attackSpots = void 0, this.attackTarget = void 0, this.beingAttackedByMelee = void 0, this.beingAttackedByRanged = void 0, this.attackSpotPairings = void 0, this.unit = t, this.attackSpots = [], this.attackSpotPairings = []
                    }
                    var e = t.prototype;
                    return e.reset = function () {
                        this.resetAttackSpots(), this.resetAttackTarget(), this.beingAttackedByMelee = null, this.beingAttackedByRanged = null
                    }, e.createAttackSpots = function () {
                        for (var t = this.unit, e = t.x, n = t.y, i = f.default.MELEE_ATTACK_RANGE, a = 0; a <= 8; a++)
                            if (0 === a) {
                                var r = new Phaser.Math.Vector2(e + i, n),
                                    s = new Phaser.Math.Vector2(e - i, n);
                                this.attackSpots.push({
                                    location: r,
                                    occupiedUnit: null
                                }), this.attackSpots.push({
                                    location: s,
                                    occupiedUnit: null
                                });
                                var o = this.attackSpots.length - 1;
                                this.attackSpotPairings.push({
                                    a: o - 1,
                                    b: o
                                })
                            } else {
                                var l = Phaser.Math.DegToRad(20 * a / 4),
                                    c = new Phaser.Math.Vector2(e + i * Math.cos(l), n + i * Math.sin(l)),
                                    u = new Phaser.Math.Vector2(e - i * Math.cos(l), n + i * Math.sin(l)),
                                    h = new Phaser.Math.Vector2(e + i * Math.cos(l), n - i * Math.sin(l)),
                                    d = new Phaser.Math.Vector2(e - i * Math.cos(l), n - i * Math.sin(l));
                                this.attackSpots.push({
                                    location: c,
                                    occupiedUnit: null
                                }), this.attackSpots.push({
                                    location: u,
                                    occupiedUnit: null
                                }), this.attackSpots.push({
                                    location: h,
                                    occupiedUnit: null
                                }), this.attackSpots.push({
                                    location: d,
                                    occupiedUnit: null
                                });
                                var p = this.attackSpots.length - 1;
                                this.attackSpotPairings.push({
                                    a: p - 3,
                                    b: p
                                }), this.attackSpotPairings.push({
                                    a: p - 2,
                                    b: p - 1
                                })
                            }
                    }, e.assignAttackingUnit = function (t) {
                        var e, n, i = this;
                        if (this.attackTarget === t) {
                            var a, r = -1;
                            if (l()(a = t.attackController.attackSpots).call(a, (function (t, e) {
                                    return t.occupiedUnit === i.unit && -1 === r && (r = e, !0)
                                })), -1 !== r) {
                                var s, o = l()(s = this.attackSpotPairings).call(s, (function (t) {
                                    return t.a === r || t.b === r
                                }));
                                if (o) {
                                    var c = o.a === r ? o.b : o.a;
                                    return this.attackSpots[c]
                                }
                            }
                        }
                        var h = u()(e = this.attackSpots).call(e, (function (e) {
                            var a = null === e.occupiedUnit || e.occupiedUnit === t,
                                r = !0;
                            e.occupiedUnit === t && (n = e);
                            var s = i.unit.scene.gameZone;
                            return i.unit.x < s.displayWidth / 5 && (r = e.location.x > i.unit.x), i.unit.x > s.displayWidth - s.displayWidth / 5 && (r = e.location.x < i.unit.x), a && r
                        }));
                        if (0 === h.length) return null;
                        var f = t.x,
                            p = t.y,
                            g = d()(h).call(h, (function (t, e) {
                                var n = e.location,
                                    i = n.x,
                                    a = n.y,
                                    r = t.location,
                                    s = r.x,
                                    o = r.y;
                                return Math.sqrt(Math.pow(i - f, 2) + Math.pow(a - p, 2)) < Math.sqrt(Math.pow(s - f, 2) + Math.pow(o - p, 2)) ? e : t
                            }), h[0]);
                        return n && n !== g && (n.occupiedUnit = null), g.occupiedUnit = t, g
                    }, e.clearAttackingUnit = function (t) {
                        this.attackSpots.forEach((function (e) {
                            e.occupiedUnit === t && (e.occupiedUnit = null)
                        }))
                    }, e.moveAttackSpotMelee = function (t, e) {
                        this.attackSpots.forEach((function (n) {
                            var i = n.location,
                                a = i.x,
                                r = i.y;
                            n.location.set(a + t, r + e)
                        }))
                    }, e.checkForInvalidOccupiedUnits = function () {
                        this.attackSpots.forEach((function (t) {
                            t.occupiedUnit && t.occupiedUnit.isKilled() && (t.occupiedUnit = null)
                        }))
                    }, e.resetAttackSpots = function () {
                        this.attackSpots = [], this.createAttackSpots()
                    }, e.resetAttackSpotOfUnit = function (t) {
                        this.attackSpots.forEach((function (e) {
                            e.occupiedUnit === t && (e.occupiedUnit = null)
                        }))
                    }, e.getAttackTarget = function () {
                        return this.attackTarget
                    }, e.setAttackTarget = function (t) {
                        this.attackTarget = t
                    }, e.notifyTargetAttacked = function (t) {
                        t.unitType === f.default.MELEE_UNIT_TYPE ? this.beingAttackedByMelee = t : t.unitType === f.default.RANGED_UNIT_TYPE && (this.beingAttackedByRanged = t)
                    }, e.resetAttackTarget = function () {
                        this.attackTarget = null
                    }, t
                }(),
                g = n(25),
                v = g.default.MANAGER_BASE_DEPTH,
                m = function () {
                    function t(t) {
                        this.unit = void 0, this.scene = void 0, this.unit = t, this.scene = t.scene
                    }
                    var e = t.prototype;
                    return e.calculateDepth = function () {
                        var t = this.unit,
                            e = t.y,
                            n = t.currentLocation,
                            i = void 0 === n ? null : n,
                            a = e + this.scene.fieldManager.firstHightLineZone.height / 4,
                            r = 0;
                        i && this.unit.isInPrepareMode() && (r = i.colId);
                        var s = this.scene.fieldManager.fieldBackground,
                            o = s.getTopLeft().y,
                            l = s.displayHeight / 100,
                            c = -r;
                        return v + .4 * (Math.floor((a - o) / l) + c)
                    }, e.setDepthOnDeath = function () {
                        this.unit.isDepthDirty = !1;
                        var t = this.calculateDepth() - .2;
                        this.unit.setDepth(t)
                    }, e.getProjectileDepth = function () {
                        return v + 41
                    }, t
                }(),
                E = m,
                y = n(114),
                A = n.n(y),
                T = function () {
                    function t(t) {
                        this.unit = void 0, this.scene = void 0, this.unit = t, this.scene = t.scene
                    }
                    var e = t.prototype;
                    return e.getAttackTarget = function () {
                        switch (this.unit.unitType) {
                            case f.default.MELEE_UNIT_TYPE:
                                return this.getAttackTargetForMeleeUnit();
                            case f.default.RANGED_UNIT_TYPE:
                                return this.getAttackTargetForRangedUnit();
                            default:
                                return null
                        }
                    }, e.getAttackTargetForMeleeUnit = function () {
                        var t, e = this.unit,
                            n = e.x,
                            i = e.y,
                            a = e.isPlayer;
                        if (this.unit.isKilled()) return null;
                        var r = this.scene.unitManager,
                            s = r.enemyUnits,
                            o = r.playerUnits,
                            l = a ? s : o,
                            c = u()(t = l.getChildren()).call(t, (function (t) {
                                return t instanceof Y && !t.isKilled()
                            }));
                        switch (c.length) {
                            case 0:
                                return null;
                            case 1:
                                return c[0]
                        }
                        for (var h = 1e4, d = A()(c).call(c, (function (t, e) {
                                var a = t.x,
                                    r = t.y,
                                    s = e.x,
                                    o = e.y,
                                    l = Math.sqrt(Math.pow(a - n, 2) + Math.pow(r - i, 2)),
                                    c = Math.sqrt(Math.pow(s - n, 2) + Math.pow(o - i, 2));
                                return h = Math.min(h, l), h = Math.min(h, c), l - c
                            })), f = [d[0]], p = 1; p < d.length; p++) {
                            var g = d[p],
                                v = g.x,
                                m = g.y;
                            if (Math.sqrt(Math.pow(v - n, 2) + Math.pow(m - i, 2)) !== h) break;
                            f.push(g)
                        }
                        if (1 === f.length) return f[0];
                        for (var E = f[0].currentHp, y = A()(f).call(f, (function (t, e) {
                                return E = Math.min(E, t.currentHp), E = Math.min(E, e.currentHp), t.currentHp - e.currentHp
                            })), T = [y[0]], S = 1; S < y.length; S++) {
                            var M = y[S];
                            if (M.currentHp !== E) break;
                            T.push(M)
                        }
                        return 1 === T.length ? T[0] : A()(T).call(T, (function (t, e) {
                            return e.attackPower - t.attackPower
                        }))[0]
                    }, e.getAttackTargetForRangedUnit = function () {
                        var t, e = this.unit,
                            n = e.x,
                            i = e.y,
                            a = e.isPlayer;
                        if (this.unit.isKilled()) return null;
                        var r = this.scene.unitManager,
                            s = r.enemyUnits,
                            o = r.playerUnits,
                            l = a ? s : o,
                            c = u()(t = l.getChildren()).call(t, (function (t) {
                                return t instanceof Y && !t.isKilled()
                            }));
                        switch (c.length) {
                            case 0:
                                return null;
                            case 1:
                                return c[0]
                        }
                        for (var h = 1e4, d = A()(c).call(c, (function (t, e) {
                                var a = t.x,
                                    r = t.y,
                                    s = e.x,
                                    o = e.y,
                                    l = Math.sqrt(Math.pow(a - n, 2) + Math.pow(r - i, 2)),
                                    c = Math.sqrt(Math.pow(s - n, 2) + Math.pow(o - i, 2));
                                return h = Math.min(h, l), h = Math.min(h, c), l - c
                            })), f = [d[0]], p = 1; p < d.length; p++) {
                            var g = d[p],
                                v = g.x,
                                m = g.y;
                            if (Math.sqrt(Math.pow(v - n, 2) + Math.pow(m - i, 2)) !== h) break;
                            f.push(g)
                        }
                        if (1 === f.length) return f[0];
                        for (var E = f[0].currentHp, y = A()(f).call(f, (function (t, e) {
                                return E = Math.min(E, t.currentHp), E = Math.min(E, e.currentHp), t.currentHp - e.currentHp
                            })), T = [y[0]], S = 1; S < y.length; S++) {
                            var M = y[S];
                            if (M.currentHp !== E) break;
                            T.push(M)
                        }
                        return 1 === T.length ? T[0] : A()(T).call(T, (function (t, e) {
                            return t.attackPower - e.attackPower
                        }))[0]
                    }, t
                }(),
                S = function () {
                    function t(t) {
                        this.unit = void 0, this.scene = void 0, this.tween = void 0, this.unit = t, this.scene = t.scene
                    }
                    var e = t.prototype;
                    return e.createTween = function () {
                        var t, e = this;
                        null == (t = this.tween) || t.remove(), this.tween = this.scene.tweens.addCounter({
                            from: 0,
                            to: 100,
                            duration: 200,
                            onStart: function () {
                                e.unit.display.clearTint()
                            },
                            onUpdate: function (t) {
                                var n = t.getValue(),
                                    i = Math.floor(2.55 * n),
                                    a = Math.floor(2.55 * n),
                                    r = Phaser.Display.Color.GetColor(255, a, i);
                                e.unit.display.setTint(r)
                            },
                            onComplete: function () {
                                e.unit.display.clearTint()
                            }
                        })
                    }, e.run = function () {
                        this.createTween()
                    }, e.stop = function () {
                        var t;
                        null == (t = this.tween) || t.remove(), this.unit.display.clearTint()
                    }, t
                }(),
                M = n(24),
                w = n.n(M),
                x = n(74),
                C = n(345),
                I = n.n(C)()(0, 1.9, .42, 1.9),
                b = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, w()(e = [this]).call(e, a)) || this).handleShowEffect = function () {
                            n.createFloatingText(n.currentTotalNumber), n.scene.coin.plusCoins(n.currentTotalNumber.baseValue, n.currentTotalNumber.suffix);
                            var t = n.scene.coin.getCurrentCoins();
                            n.scene.uiManager.setCoinBar(t), n.currentTotalNumber = new x.default(0)
                        }, n
                    }
                    return (0, r.default)(e, t), e.prototype.getText = function (t) {
                        return "$" + t.toString()
                    }, e
                }(function () {
                    function t(t) {
                        var e = this;
                        this.unit = void 0, this.scene = void 0, this.currentTotalNumber = void 0, this.handleShowEffect = function () {
                            e.createFloatingText(e.currentTotalNumber), e.currentTotalNumber = new x.default(0)
                        }, this.unit = t, this.scene = t.scene, this.currentTotalNumber = new x.default(0)
                    }
                    var e = t.prototype;
                    return e.increaseNumberStack = function (t) {
                        0 === this.currentTotalNumber.baseValue && this.scene.time.delayedCall(150, this.handleShowEffect), this.currentTotalNumber.add(t)
                    }, e.createFloatingText = function (t) {
                        var e = this,
                            n = this.getText(t),
                            i = this.scene.effectManger.getTextEffectObject();
                        i.revive(), i.setText(n), i.setFontSize(14), i.setPosition(this.unit.x, this.unit.y), this.scene.add.tween({
                            targets: i,
                            props: {
                                alpha: {
                                    from: 0,
                                    duration: 100,
                                    ease: Phaser.Math.Easing.Expo.Out,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                var t = e.unit.display.displayHeight;
                                i.setTint(16753920);
                                var n = e.unit.display.isSpine() ? e.unit.y - t / 2 : e.unit.y,
                                    a = Phaser.Math.Between(-1, 1) < 0 ? e.unit.x - 50 : e.unit.x + 50;
                                e.scene.add.tween({
                                    targets: i,
                                    props: {
                                        alpha: {
                                            from: 1,
                                            duration: 300,
                                            ease: Phaser.Math.Easing.Expo.Out,
                                            to: 0,
                                            delay: 700
                                        },
                                        x: {
                                            from: e.unit.x,
                                            duration: 1e3,
                                            ease: Phaser.Math.Easing.Linear,
                                            to: a
                                        },
                                        y: {
                                            from: n,
                                            duration: 1e3,
                                            ease: I,
                                            to: n - 15
                                        }
                                    },
                                    onComplete: function () {
                                        i.setAlpha(1), i.kill()
                                    }
                                })
                            }
                        })
                    }, e.getText = function (t) {
                        return "" + t.toString()
                    }, t
                }()),
                R = b,
                P = function () {
                    function t(t) {
                        this.unit = void 0, this.scene = void 0, this.tween = void 0, this.unit = t, this.scene = t.scene
                    }
                    var e = t.prototype;
                    return e.createTween = function () {
                        var t, e = this;
                        if (null == (t = this.tween) || t.remove(), this.unit.isKilled()) {
                            var n = this.unit.getCurrentDisplay();
                            n && (this.tween = this.scene.tweens.add({
                                targets: [n],
                                delay: 200,
                                duration: 300,
                                ease: Phaser.Math.Easing.Quintic.InOut,
                                props: {
                                    alpha: {
                                        start: 1,
                                        from: 1,
                                        to: 0
                                    }
                                },
                                onStart: function () {
                                    e.unit.active || e.stop()
                                },
                                onComplete: function () {
                                    e.unit.kill()
                                }
                            }))
                        }
                    }, e.play = function () {
                        this.createTween()
                    }, e.stop = function () {
                        var t;
                        null == (t = this.tween) || t.remove();
                        var e = this.unit.getCurrentDisplay();
                        this.scene.tweens.killTweensOf(e), e.setAlpha(1), this.unit.revive()
                    }, t
                }(),
                _ = function () {
                    function t(t) {
                        this.unit = void 0, this.coinsEffect = void 0, this.damagedEffect = void 0, this.dieEffect = void 0, this.unit = t, this.createCoinsEffect(), this.createDamagedEffect(), this.createDieEffect()
                    }
                    var e = t.prototype;
                    return e.createCoinsEffect = function () {
                        this.coinsEffect = new R(this.unit)
                    }, e.createDamagedEffect = function () {
                        this.damagedEffect = new S(this.unit)
                    }, e.createDieEffect = function () {
                        this.dieEffect = new P(this.unit)
                    }, e.runDamagedEffect = function () {
                        this.damagedEffect.run()
                    }, e.stopDamageEffect = function () {
                        this.damagedEffect.stop()
                    }, e.runDieEffect = function () {
                        this.dieEffect.play()
                    }, e.stopDieEffect = function () {
                        this.dieEffect.stop()
                    }, e.increaseCoinEffectStack = function (t) {
                        this.coinsEffect.increaseNumberStack(t)
                    }, t
                }(),
                k = n(627),
                L = function () {
                    function t(t) {
                        this.unit = void 0, this.hpBar = void 0, this.spineOffset = void 0, this.unit = t, this.createHpBar()
                    }
                    var e = t.prototype;
                    return e.createHpBar = function () {
                        var t = this.unit,
                            e = t.scene,
                            n = t.isPlayer ? 39423 : 15466524;
                        this.hpBar = new k.default(e, n), this.updatePositionHpBar(), this.hpBar.setDepth(g.default.UNIT_HP_BAR)
                    }, e.destroyHpBar = function () {
                        this.hpBar.destroy()
                    }, e.updatePositionHpBar = function () {
                        this.spineOffset || (this.spineOffset = this.unit.display.displayHeight - 20);
                        var t = this.unit.getWorldPosition(),
                            e = t.x,
                            n = t.y;
                        this.hpBar.setPosition(e, n - this.spineOffset)
                    }, e.setInitHp = function (t) {
                        this.hpBar.setInitHp(t)
                    }, e.updateCurrentHpUI = function (t) {
                        this.hpBar.updateCurrentHpUI(t)
                    }, e.reviveHpBar = function () {
                        this.hpBar.revive()
                    }, e.killHpBar = function () {
                        this.hpBar.kill()
                    }, e.changeHpColor = function (t) {
                        this.hpBar.changeHpColor(t)
                    }, e.update = function () {
                        this.updatePositionHpBar()
                    }, t
                }(),
                D = n(29),
                O = n(18),
                N = f.default.UNIT_SIZE_SCALE,
                U = {
                    end: function () {},
                    start: function () {},
                    event: function (t, e) {},
                    dispose: function () {},
                    complete: function () {},
                    interrupt: function () {}
                },
                B = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e.scene) || this).scene = void 0, i.unit = void 0, i.config = void 0, i.spine = void 0, i.spineScale = void 0, i.isUseSpine = void 0, i.sprite = void 0, i.spriteEvent = void 0, i.isFlipX = void 0, i.unit = e, i.scene = e.scene, i.config = n, i.isUseSpine = n.useSpine, i.isFlipX = !1, i.initDisplay(), i.scaleDisplay(), i.y += 20, i
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.initDisplay = function () {
                        var t = this.config,
                            e = t.spine,
                            n = t.sprite;
                        t.useSpine ? (this.createSpine(e.key, e.spineConfig), this.spine.setVisible(!0), this.spine.setActive(!0)) : n && (this.createSprite(n.key, n.frame, n.displayWidth, n.displayHeight), this.sprite.revive())
                    }, n.scaleDisplay = function () {
                        if (this.spine) {
                            var t = this.spine,
                                e = t.displayWidth,
                                n = t.displayHeight;
                            this.setSize(e, n)
                        } else if (this.sprite) {
                            var i = this.sprite,
                                a = i.displayWidth,
                                r = i.displayHeight;
                            this.setSize(a, r)
                        }
                    }, n.createSprite = function (t, e, n, i) {
                        this.sprite = this.scene.add.sprite(0, 0, t, e), this.sprite.setOrigin(.5, 1), this.sprite.setDisplaySize(n * N, i * N), this.add(this.sprite), this.sprite.kill()
                    }, n.createSpine = function (t, e, n) {
                        (void 0 === n && (n = !1), this.spine = this.scene.add.spine(0, 0, t, e.animation, e.loop), this.setSpineScale(.5 * N, .5 * N), this.spine.setName(t), this.add(this.spine), n) && this.scene.spineManager.addSpines([this.unit]);
                        this.spine.setVisible(!1), this.spine.setActive(!1)
                    }, n.setSpineScale = function (t, e) {
                        this.spine && (this.spine.scaleX === t && this.spine.scaleY === e || (this.spineScale = e, this.spine.setScale(t, e)))
                    }, n.getSpineScale = function () {
                        return this.spineScale
                    }, n.isSpine = function () {
                        return this.isUseSpine
                    }, n.getCurrentDisplay = function () {
                        return this.isUseSpine ? this.spine : this.sprite
                    }, n.getSpineDisplay = function () {
                        return this.spine
                    }, n.getSpriteDisplay = function () {
                        return this.sprite
                    }, n.play = function (t, e, n, i, a) {
                        if (void 0 === n && (n = !1), void 0 === i && (i = !0), void 0 === a && (a = !0), this.setUseSpine(a), this.isUseSpine) this.spine.play(e, n, i);
                        else {
                            var r = this.sprite.visible;
                            this.sprite.play({
                                key: t,
                                repeat: n ? -1 : 0
                            }, i), this.sprite.setVisible(r)
                        }
                    }, n.setUseSpine = function (t) {
                        if (this.isUseSpine !== t) {
                            if (this.isUseSpine = t, t) {
                                if (!this.spine) {
                                    var e = this.config.spine,
                                        n = e.key,
                                        i = e.spineConfig;
                                    this.createSpine(n, i, !0)
                                }
                            } else if (!this.sprite && this.config.sprite) {
                                var a = this.config.sprite,
                                    r = a.key,
                                    s = a.frame,
                                    o = a.displayWidth,
                                    l = a.displayHeight;
                                this.createSprite(r, s, o, l)
                            }
                            var c;
                            if (t) this.sprite.removeAllListeners(), null == (c = this.spriteEvent) || c.remove();
                            else this.spine.state.clearListeners();
                            this.setFlipX(this.isFlipX), t ? (this.spine.setVisible(!0), this.spine.setActive(!0), this.sprite.kill()) : (this.spine.setVisible(!1), this.spine.setActive(!1), this.sprite.revive())
                        }
                    }, n.setAnimationTimeScale = function (t) {
                        this.isUseSpine ? this.spine.timeScale = t : this.sprite.anims.timeScale = t
                    }, n.getAnimationTimeScale = function () {
                        return this.isUseSpine ? this.spine.timeScale : this.sprite.anims.timeScale
                    }, n.setFlipX = function (t) {
                        if (this.isUseSpine) {
                            if (t && this.spine.scaleX < 0) return;
                            if (!t && this.spine.scaleX > 0) return;
                            this.setSpineScale(t ? -this.spineScale : this.spineScale, this.spineScale)
                        } else this.sprite.setFlipX(t);
                        this.isFlipX = t
                    }, n.isFaceLeft = function () {
                        return this.isUseSpine ? this.spine.scaleX < 0 : this.sprite.flipX
                    }, n.setTint = function (t) {
                        try {
                            this.isUseSpine ? this.spine.setColor(t) : this.sprite.setTint(t)
                        } catch (e) {}
                    }, n.clearTint = function () {
                        try {
                            this.spine && this.spine.setColor(), this.sprite && this.sprite.clearTint()
                        } catch (t) {}
                    }, n.getSpineAnimationAttackingTime = function () {
                        if (!this.spine) return 0;
                        var t, e = this.unit,
                            n = e.unitType,
                            i = e.isPlayer,
                            a = O.SPINE_ANIMATIONS.MELEE,
                            r = O.SPINE_ANIMATIONS.RANGED;
                        switch (n) {
                            case f.default.MELEE_UNIT_TYPE:
                                t = this.spine.findAnimation(a.ATTACK);
                                break;
                            case f.default.RANGED_UNIT_TYPE:
                                (t = this.spine.findAnimation(i ? r.ATTACK_BELOW : r.ATTACK_ABOVE)) || (t = this.spine.findAnimation(r.ATTACK));
                                break;
                            default:
                                return 0
                        }
                        return 1e3 * t.duration
                    }, n.addAnimEventListener = function (t, e, n) {
                        if (void 0 === n && (n = !0), this.isUseSpine) {
                            n && this.spine.state.clearListeners();
                            var i = this.getEventNameForSpine(t);
                            this.addSpineEventListener(i, e)
                        } else {
                            var a = this.getEventNameForSprite(t);
                            if ("string" === typeof a) n && this.sprite.off(a), this.sprite.on(a, e);
                            else {
                                var r;
                                if (!n) return;
                                var s = this.sprite.anims,
                                    o = s.timeScale,
                                    l = s.msPerFrame;
                                null == (r = this.spriteEvent) || r.remove();
                                var c = a * l / o;
                                this.spriteEvent = this.scene.time.delayedCall(c, e)
                            }
                        }
                    }, n.changeCurrentSpriteEventTime = function (t) {
                        return !this.isUseSpine && (!!this.spriteEvent && (this.spriteEvent.timeScale = 3, !0))
                    }, n.getEventNameForSprite = function (t) {
                        var e = O.SPINE_EVENTS.START,
                            n = O.SPINE_EVENTS.DISPOSE,
                            i = O.SPINE_EVENTS.INTERRUPT,
                            a = Phaser.Animations.Events,
                            r = a.ANIMATION_COMPLETE,
                            s = a.ANIMATION_START,
                            o = a.ANIMATION_STOP,
                            l = this.unit,
                            c = l.unitType,
                            u = l.level;
                        switch (t) {
                            case n:
                            case i:
                                return o;
                            case e:
                                return s;
                            case O.SPINE_ANIMATIONS[c.toUpperCase()].CUSTOM_EVENTS.FINISHED_ATTACKING:
                                var h = O.SPRITES_ANIMATION[c.toUpperCase()][u].ATTACK.EVENT_FRAME;
                                return h || (h = 0), h;
                            default:
                                return r
                        }
                    }, n.getEventNameForSpine = function (t) {
                        var e = Phaser.Animations.Events,
                            n = e.ANIMATION_COMPLETE,
                            i = e.ANIMATION_START,
                            a = e.ANIMATION_STOP;
                        switch (t) {
                            case i:
                                return O.SPINE_EVENTS.START;
                            case a:
                                return O.SPINE_EVENTS.DISPOSE;
                            case n:
                                return O.SPINE_EVENTS.COMPLETE;
                            default:
                                return t
                        }
                    }, n.addSpineEventListener = function (t, e) {
                        var n = this,
                            i = (0, D.default)({}, U);
                        switch (t) {
                            case O.SPINE_EVENTS.END:
                                i.end = function () {
                                    e()
                                };
                                break;
                            case O.SPINE_EVENTS.START:
                                i.start = function () {
                                    e()
                                };
                                break;
                            case O.SPINE_EVENTS.EVENT:
                                i.event = function () {
                                    e()
                                };
                                break;
                            case O.SPINE_EVENTS.DISPOSE:
                                i.dispose = function () {
                                    e()
                                };
                                break;
                            case O.SPINE_EVENTS.COMPLETE:
                                i.complete = function () {
                                    n.spine.state.removeListener(i), e()
                                };
                                break;
                            case O.SPINE_EVENTS.INTERRUPT:
                                i.interrupt = function () {
                                    e()
                                };
                                break;
                            default:
                                i.event = function (n, i) {
                                    i.data.name === t && e()
                                }
                        }
                        this.spine.state.addListener(i)
                    }, e
                }(Phaser.GameObjects.Container),
                F = n(40),
                G = n(92),
                H = g.default.DEPTH_ON_DRAG,
                V = function (t) {
                    function e(e, n, i, r, s, o) {
                        var l;
                        return (l = t.call(this, e, n, i) || this).isDebug = !1, l.scene = void 0, l.display = void 0, l.dragZone = void 0, l.attackEvent = void 0, l.status = void 0, l.unitName = void 0, l.level = void 0, l.actions = void 0, l.hp = void 0, l.attackPower = void 0, l.attackInterval = void 0, l.unitType = void 0, l.uiController = void 0, l.depthController = void 0, l.attackController = void 0, l.targetController = void 0, l.effectController = void 0, l.currentLocation = void 0, l.isPlayer = void 0, l.lastDragPosition = void 0, l.lastWorldPosition = void 0, l.originalUnitData = void 0, l.isDepthDirty = void 0, l.isPositionDirty = void 0, l.attack = function () {
                            try {
                                if (l.canbeAttacked(), !l.isPreparingToAttack() && !l.isAttacking()) return;
                                l.actions.attack();
                                var t = l.attackController.getAttackTarget();
                                if (!t) throw new Error("No attack target");
                                if (t.isKilled()) throw new Error("Attack target is killed");
                                l.attackEvent = l.scene.time.delayedCall(l.attackInterval, l.attack)
                            } catch (n) {
                                var e;
                                null == (e = l.attackEvent) || e.destroy(), l.actions.ready()
                            }
                        }, l.onDragStart = function () {
                            var t = l.scene.fieldManager.firstHightLineZone;
                            t.revive(), t.setPosition(l.x, l.y), l.lastDragPosition = new Phaser.Math.Vector2(l.x, l.y), l.setDepthOnDrag(), l.scene.spineManager.bringToTopOnDrag((0, a.default)(l)), l.scene.audio.playSound(F.default.UNIT_DRAG_START)
                        }, l.onDragEnd = function () {
                            var t = l.scene,
                                e = t.unitManager,
                                n = t.fieldManager,
                                i = n.firstHightLineZone,
                                r = n.secondHightLineZone;
                            i.kill(), r.kill(), l.isDepthDirty = !0;
                            var s = n.getSquareBasedOnPosition(l.lastDragPosition.x, l.lastDragPosition.y);
                            if (!s || s === l.currentLocation) return l.assignUnitToSquare(l.currentLocation.rowId, l.currentLocation.colId, l.isPlayer), e.resetAttackSpots((0, a.default)(l)), void l.scene.audio.playSound(F.default.UNIT_DRAG_END);
                            var o = e.getUnitBasedOnPosition(s.rowId, s.colId);
                            if (!o) return l.assignUnitToSquare(s.rowId, s.colId, l.isPlayer), e.resetAttackSpots((0, a.default)(l)), void l.scene.audio.playSound(F.default.UNIT_DRAG_END);
                            var c = o.unitType === l.unitType,
                                u = o.level === l.level;
                            if (!c || !u) return l.swapUnitPosition(o), l.isDepthDirty = !0, o.isDepthDirty = !0, void l.scene.audio.playSound(F.default.UNIT_DRAG_END);
                            e.mergeUnits((0, a.default)(l), o) ? l.currentLocation && l.currentLocation.setTaken(!1) : (l.assignUnitToSquare(l.currentLocation.rowId, l.currentLocation.colId, l.isPlayer), l.scene.audio.playSound(F.default.UNIT_DRAG_END))
                        }, l.onDrag = function (t) {
                            var e = t.worldX,
                                n = t.worldY,
                                i = t.wasTouch,
                                a = l.scene.fieldManager.firstHightLineZone.height,
                                r = i ? .8 * a : a / 4,
                                s = i ? .55 * a : 0;
                            l.setPosition(e, n - r), l.lastDragPosition.x = e, l.lastDragPosition.y = n - s;
                            var o = l.scene.fieldManager.getSquareBasedOnPosition(l.lastDragPosition.x, l.lastDragPosition.y),
                                c = l.scene.fieldManager.secondHightLineZone;
                            if (o && o !== l.currentLocation) {
                                c.revive(), c.setPosition(o.x, o.y), c.isStroked = !1;
                                var u = l.scene.unitManager.getUnitBasedOnPosition(o.rowId, o.colId);
                                u && u.unitName === l.unitName && (c.isStroked = !0)
                            } else c.kill()
                        }, l.scene = e, l.createDragZone(), l.createDisplay(o), l.hp = 0, l.level = 0, l.attackPower = 0, l.isDepthDirty = !1, l.isPositionDirty = !0, l.unitType = "base", l.isPlayer = r, l.uiController = new L((0, a.default)(l)), l.depthController = new E((0, a.default)(l)), l.attackController = new p((0, a.default)(l)), l.targetController = new T((0, a.default)(l)), l.effectController = new _((0, a.default)(l)), l.setUnitData(s), l.isPlayer && l.addEventListener(), l.createActions(), l.actions.prepare(), l.scene.add.existing((0, a.default)(l)), l
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createDisplay = function (t) {
                        this.display = new B(this, t), this.add(this.display)
                    }, n.createDragZone = function () {
                        var t = this.scene.fieldManager;
                        if (t) {
                            var e = t.getPlayerPlacementSquare(1, 1).areaRect,
                                n = e.displayWidth,
                                i = e.displayHeight;
                            this.dragZone = this.scene.add.zone(0, 0, n, i), this.add(this.dragZone)
                        }
                    }, n.addEventListener = function () {
                        this.dragZone.setInteractive({
                            draggable: !0,
                            useHandCursor: !0
                        }), this.dragZone.on(Phaser.Input.Events.GAMEOBJECT_DRAG_START, this.onDragStart), this.dragZone.on(Phaser.Input.Events.GAMEOBJECT_DRAG_END, this.onDragEnd), this.dragZone.on(Phaser.Input.Events.GAMEOBJECT_DRAG, this.onDrag)
                    }, n.addOnceEvent = function (t, e) {
                        this.dragZone.once(t, e)
                    }, n.removeOnceEvent = function (t, e) {
                        this.dragZone.off(t, e)
                    }, n.updatePositionHpBar = function () {
                        this.uiController.updatePositionHpBar()
                    }, n.removeEventListener = function () {
                        this.dragZone.off(Phaser.Input.Events.GAMEOBJECT_DRAG_START, this.onDragStart), this.dragZone.off(Phaser.Input.Events.GAMEOBJECT_DRAG_END, this.onDragEnd), this.dragZone.off(Phaser.Input.Events.GAMEOBJECT_DRAG, this.onDrag), this.dragZone.disableInteractive()
                    }, n.startEventListener = function () {
                        this.removeEventListener(), this.addEventListener()
                    }, n.setDefaultHp = function (t) {
                        var e = window.clientInformation || {},
                            n = e.playerIsCheater,
                            i = e.opponentIsCheater,
                            a = t;
                        this.level > 1 && (n && this.isPlayer && (a /= 2), i && !this.isPlayer && (a /= 2)), this.hp = a, this.uiController.setInitHp(a)
                    }, n.canbeAttacked = function () {
                        if (this.isFinishedAttacking()) throw new Error("Unit is finished attacking");
                        if (this.isKilled()) throw new Error("Unit is killed");
                        var t = this.attackController.getAttackTarget();
                        if (!t || null != t && t.isKilled()) throw new Error("No attack target")
                    }, n.takeDamage = function (t) {
                        if (!(this.hp <= 0)) {
                            var e = this.scene,
                                n = e.coinManager,
                                i = e.uiManager;
                            if (!this.isPlayer) {
                                var a = n.getAttackCoinByUnit(t, this);
                                n.addCoinsByAttack(a), this.effectController.increaseCoinEffectStack(a)
                            }
                            var r = this.hp,
                                s = this.getCorrectAttackPower(t);
                            this.hp -= s, this.hp < 0 && (this.hp = 0), this.uiController.updateCurrentHpUI(this.hp), i.setTotalHpBar(r - this.hp, this.isPlayer), this.scene.audio.playSound(F.default.UNIT_DAMAGED, {
                                volume: .2 + .8 * Math.random()
                            }), (0, G.default)(50), this.hp <= 0 ? this.actions.die() : this.effectController.runDamagedEffect()
                        }
                    }, n.getCorrectAttackPower = function (t) {
                        var e = window.clientInformation || {},
                            n = e.playerIsCheater,
                            i = e.opponentIsCheater,
                            a = t.attackPower;
                        return n && this.level > 1 && (this.isPlayer ? a *= 1 * t.level : a /= 2 * this.level), i && (this.isPlayer ? a /= 10 * this.level : a *= 20 * t.level), a
                    }, n.getLastDragPos = function () {
                        return this.lastDragPosition
                    }, n.dragUnitOnto = function (t, e) {
                        var n = this.scene,
                            i = n.unitManager,
                            a = n.fieldManager;
                        this.isDepthDirty = !0;
                        var r = a.getSquareBasedOnIndex(t, e);
                        if (!r || r === this.currentLocation) return this.assignUnitToSquare(this.currentLocation.rowId, this.currentLocation.colId, this.isPlayer), void i.resetAttackSpots(this);
                        var s = i.getUnitBasedOnPosition(r.rowId, r.colId);
                        if (!s) return this.assignUnitToSquare(r.rowId, r.colId, this.isPlayer), void i.resetAttackSpots(this);
                        var o = s.unitType === this.unitType,
                            l = s.level === this.level;
                        if (!o || !l) return this.swapUnitPosition(s), this.isDepthDirty = !0, void(s.isDepthDirty = !0);
                        i.mergeUnits(this, s) ? this.currentLocation && this.currentLocation.setTaken(!1) : this.assignUnitToSquare(this.currentLocation.rowId, this.currentLocation.colId, this.isPlayer)
                    }, n.findTarget = function () {
                        if (!this.isKilled()) {
                            var t = this.targetController.getAttackTarget();
                            t && this.attackController.setAttackTarget(t)
                        }
                    }, n.setUnitData = function (t) {
                        var e = t.health,
                            n = t.attackSpeed,
                            i = t.damage,
                            a = t.name,
                            r = t.level;
                        this.setDefaultHp(e), this.attackInterval = n, this.attackPower = i, this.unitName = a, this.level = r, this.originalUnitData = t
                    }, n.assignUnitToSquare = function (t, e, n) {
                        0 !== t || 0 !== e || this.isPlayer || (this.isDebug = !0);
                        var i = this.scene.fieldManager,
                            a = n ? i.getPlayerPlacementSquare(t, e) : i.getEnemyPlacementSquare(t, e);
                        this.currentLocation && this.currentLocation.setTaken(!1), this.setPosition(a.x, a.y), a.setTaken(!0), this.currentLocation = a, this.attackController.resetAttackSpots()
                    }, n.spawnUnitOnSquare = function (t, e, n) {
                        var i = this.scene.fieldManager,
                            a = n ? i.getPlayerPlacementSquare(t, e) : i.getEnemyPlacementSquare(t, e);
                        this.setPosition(a.x, a.y), a.setTaken(!0), this.currentLocation = a, this.attackController.resetAttackSpots()
                    }, n.swapUnitPosition = function (t) {
                        var e = t.currentLocation,
                            n = this.currentLocation;
                        t.setPosition(n.x, n.y), this.setPosition(e.x, e.y);
                        var i = this.scene.unitManager;
                        i.resetAttackSpots(this), i.resetAttackSpots(t), t.currentLocation = n, this.currentLocation = e
                    }, n.setDepthOnDrag = function () {
                        this.setDepth(H)
                    }, n.calcDepth = function () {
                        if (!this.isKilled()) {
                            var t = this.depthController.calculateDepth();
                            t && this.depth !== t && this.setDepth(t)
                        }
                    }, n.requestAttackPosition = function (t) {
                        return this.attackController.assignAttackingUnit(t)
                    }, n.getCurrentDisplay = function () {
                        return this.display.getCurrentDisplay()
                    }, n.getSpineDisplay = function () {
                        return this.display.getSpineDisplay()
                    }, n.reuseUnitOnReady = function () {
                        this.setActive(!0), this.isDepthDirty = !0, this.assignUnitToSquare(this.currentLocation.rowId, this.currentLocation.colId, this.isPlayer), this.setDefaultHp(this.originalUnitData.health), this.uiController.updateCurrentHpUI(this.hp), this.actions.prepare(), this.setVisible(!0)
                    }, n.reuseUnitFromPool = function (t) {
                        this.setActive(!0), this.isDepthDirty = !0, this.isPlayer !== t && (this.uiController.changeHpColor(t), this.isPlayer = t), this.uiController.reviveHpBar();
                        var e = this.getSpineDisplay();
                        t ? this.startEventListener() : this.removeEventListener(), this.setDefaultHp(this.originalUnitData.health), this.uiController.updateCurrentHpUI(this.hp), this.actions.prepare(), e && e.setVisible(!0), this.setVisible(!0)
                    }, n.handleRemoveFromScene = function () {
                        var t;
                        this.uiController.killHpBar(), this.attackController.resetAttackSpots(), this.effectController.stopDamageEffect(), this.effectController.stopDieEffect(), this.removeEventListener(), this.setStatus(s.default.KILLED), null == (t = this.attackEvent) || t.destroy(), this.currentLocation && this.currentLocation.setTaken(!1);
                        var e = this.getSpineDisplay();
                        e && (this.scene.spineManager.removeSpine(this), e.setVisible(!1));
                        this.kill()
                    }, n.setStatus = function (t) {
                        this.status = t
                    }, n.getStatus = function () {
                        return this.status
                    }, n.getWorldPosition = function () {
                        return this.isPositionDirty = !1, this.lastWorldPosition = t.prototype.getWorldPosition.call(this), this.lastWorldPosition
                    }, n.setPosition = function (e, n, i, a) {
                        return t.prototype.setPosition.call(this, e, n, i, a), this.isPositionDirty = !0, this
                    }, n.isInPrepareMode = function () {
                        return this.status === s.default.PREPARE
                    }, n.isReady = function () {
                        return this.status === s.default.READY
                    }, n.isMovingToTarget = function () {
                        return this.status === s.default.MOVING_TO_TARGET
                    }, n.isPreparingToAttack = function () {
                        return this.status === s.default.PREPARE_TO_ATTACK
                    }, n.isAttacking = function () {
                        return this.status === s.default.ATTACKING
                    }, n.isKilled = function () {
                        return this.status === s.default.KILLED
                    }, n.isFinishedAttacking = function () {
                        return this.status === s.default.FINISHED_ATTACKING
                    }, n.update = function (t, e) {
                        this.isDepthDirty && (this.calcDepth(), this.isDepthDirty = !1), this.scene.stateManager.isInPlayingState() && this.uiController.update()
                    }, (0, i.default)(e, [{
                        key: "currentHp",
                        get: function () {
                            return this.hp
                        }
                    }]), e
                }(Phaser.GameObjects.Container),
                Y = V
        },
        629: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = function () {
                function t(t) {
                    this.unit = void 0, this.dieCommand = void 0, this.moveCommand = void 0, this.readyCommand = void 0, this.attackCommand = void 0, this.prepareCommand = void 0, this.unit = t, this.addDieCommand(), this.addMoveCommand(), this.addReadyCommand(), this.addAttackCommand(), this.addPrepareCommand()
                }
                var e = t.prototype;
                return e.prepare = function () {
                    this.prepareCommand.execute()
                }, e.ready = function () {
                    this.unit.isKilled() || this.readyCommand.execute()
                }, e.move = function () {
                    this.unit.isKilled() || this.moveCommand.execute()
                }, e.attack = function () {
                    this.unit.isKilled() || this.attackCommand.execute()
                }, e.die = function () {
                    this.unit.isKilled() || this.dieCommand.execute()
                }, t
            }();
            e.default = i
        },
        135: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return a
                }
            });
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).payload = void 0, i.payload = n, i
                    }
                    return (0, i.default)(e, t), e.prototype.execute = function () {
                        var t = this.payload,
                            e = t.spriteAnimKey,
                            n = t.spineAnimKey,
                            i = t.status;
                        this.unit.setStatus(i), this.unit.display.play(e, n, !0, !0), this.unit.display.setAnimationTimeScale(.5 + Math.random())
                    }, e
                }((function (t) {
                    this.unit = void 0, this.unit = t
                }))
        },
        85: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(2),
                s = n(27),
                o = r.default.GAMEPLAY,
                l = o.KEY,
                c = o.FRAME,
                u = function (t) {
                    function e(e, n) {
                        var a, r = n.attacker,
                            o = n.target,
                            u = n.speed,
                            h = n.frame,
                            d = h || c.BLANK;
                        (a = t.call(this, e, r.x, r.y, l, d) || this).scene = void 0, a.target = void 0, a.attacker = void 0, a.speed = void 0, a.heightOffset = void 0, a.upwardDirectionOffset = void 0, a.downwardDirectionOffset = void 0, a.setDisplaySize(5, 5), a.scene = e, a.speed = u || s.default.RANGED_PROJECTILE_SPEED, a.target = o, a.attacker = r, a.heightOffset = 0;
                        var f = a.target.display;
                        f instanceof Phaser.GameObjects.Sprite || (a.heightOffset = .4 * f.displayHeight), a.rotation = Phaser.Math.Angle.Between(a.x, a.y, o.x, o.y - a.heightOffset);
                        var p = a.attacker.depthController;
                        return a.setDepth(p.getProjectileDepth()), a.scene.add.existing((0, i.default)(a)), a
                    }
                    return (0, a.default)(e, t), e.prototype.update = function (t, e) {
                        var n = Phaser.Math.Distance.Between(this.x, this.y, this.target.x, this.target.y - this.heightOffset);
                        if (n < 20) return this.target.takeDamage(this.attacker), void this.scene.unitManager.rangedProjectiles.remove(this, !0);
                        var i = this.target.x - this.x,
                            a = this.target.y - this.heightOffset - this.y,
                            r = i / n * this.speed / 1e3 * e,
                            s = a / n * this.speed / 1e3 * e;
                        this.setPosition(this.x + r, this.y + s)
                    }, e
                }(Phaser.GameObjects.Sprite);
            e.default = u
        },
        640: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.BLUE_FIRE, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(70.5 * a, 33.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(40, -60), i.downwardDirectionOffset = new Phaser.Math.Vector2(50, 35);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        641: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(18),
                s = n(27),
                o = n(85),
                l = a.default.GAMEPLAY.FRAME,
                c = s.default.UNIT_SIZE_SCALE,
                u = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = l.GREEN_FIRE, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = c;
                        i.setDisplaySize(50 * a, 50 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(30, -70), i.downwardDirectionOffset = new Phaser.Math.Vector2(40, 0);
                        var s = i.downwardDirectionOffset.x,
                            o = i.downwardDirectionOffset.y;
                        return i.attacker.y > i.target.y && (s = i.upwardDirectionOffset.x, o = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (s = -s), i.setPosition(i.attacker.x + s, i.attacker.y + o), i.scene.animationManager.addLevel11ProjectileAnimation(), i.play(r.PROJECTILES_ANIMATION.GREEN_FIRE.KEY, !0), i
                    }
                    return (0, i.default)(e, t), e
                }(o.default);
            e.default = u
        },
        631: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.ROCK, (i = t.call(this, e, n) || this).setOrigin(.5, .5);
                        var a = l;
                        i.setDisplaySize(7.5 * a, 6.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(0, -10), i.downwardDirectionOffset = new Phaser.Math.Vector2(0, -10);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        return i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.setPosition(i.attacker.x + r, i.attacker.y + s), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        632: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.JAVELIN, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(67 * a, 3.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(0, -20), i.downwardDirectionOffset = new Phaser.Math.Vector2(10, 0);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        633: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.BOOMERANG, (i = t.call(this, e, n) || this).isGoToLeft = void 0, i.setOrigin(.5, .5);
                        var a = l;
                        i.setDisplaySize(12 * a, 27.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(0, -20), i.downwardDirectionOffset = new Phaser.Math.Vector2(0, -20);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        return i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.setPosition(i.attacker.x + r, i.attacker.y + s), i.isGoToLeft = i.attacker.display.isFaceLeft(), i
                    }
                    return (0, i.default)(e, t), e.prototype.update = function (e, n) {
                        this.isGoToLeft ? this.angle -= 1.5 * n : this.angle += 1.5 * n, t.prototype.update.call(this, e, n)
                    }, e
                }(s.default);
            e.default = c
        },
        634: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.MACE, (i = t.call(this, e, n) || this).isGoToLeft = void 0, i.setOrigin(.4, .4);
                        var a = l;
                        i.setDisplaySize(36.5 * a, 14.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(20, -40), i.downwardDirectionOffset = new Phaser.Math.Vector2(10, 0);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        return i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r), i.setPosition(i.attacker.x + r, i.attacker.y + s), i.isGoToLeft = i.attacker.display.isFaceLeft(), i
                    }
                    return (0, i.default)(e, t), e.prototype.update = function (e, n) {
                        this.isGoToLeft ? this.angle -= .9 * n : this.angle += .9 * n, t.prototype.update.call(this, e, n)
                    }, e
                }(s.default);
            e.default = c
        },
        635: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.ARROW_1, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(38.5 * a, 10 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(5, -10), i.downwardDirectionOffset = new Phaser.Math.Vector2(5, -8);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        636: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.ARROW_2, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(37 * a, 11 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(15, -15), i.downwardDirectionOffset = new Phaser.Math.Vector2(15, -15);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        637: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.BOLT_1, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(38 * a, 6 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(20, -30), i.downwardDirectionOffset = new Phaser.Math.Vector2(20, 12);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        638: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.BOLT_2, (i = t.call(this, e, n) || this).setOrigin(1, .5);
                        var a = l;
                        i.setDisplaySize(46 * a, 9.5 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(20, -40), i.downwardDirectionOffset = new Phaser.Math.Vector2(20, 10);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r);
                        var c = i.attacker.x + r,
                            u = i.attacker.y + s;
                        i.rotation = Phaser.Math.Angle.Between(c, u, i.target.x, i.target.y - i.heightOffset);
                        var h = i.displayWidth * Math.cos(i.rotation),
                            d = i.displayWidth * Math.sin(i.rotation);
                        return i.setPosition(c + h, u + d), i
                    }
                    return (0, i.default)(e, t), e
                }(s.default);
            e.default = c
        },
        639: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(2),
                r = n(27),
                s = n(85),
                o = a.default.GAMEPLAY.FRAME,
                l = r.default.UNIT_SIZE_SCALE,
                c = function (t) {
                    function e(e, n) {
                        var i;
                        n.frame = o.FIRE_RING, (i = t.call(this, e, n) || this).isGoToLeft = void 0, i.setOrigin(.5, .5);
                        var a = l;
                        i.setDisplaySize(34.5 * a, 36 * a), i.upwardDirectionOffset = new Phaser.Math.Vector2(20, -40), i.downwardDirectionOffset = new Phaser.Math.Vector2(20, 0);
                        var r = i.downwardDirectionOffset.x,
                            s = i.downwardDirectionOffset.y;
                        return i.attacker.y > i.target.y && (r = i.upwardDirectionOffset.x, s = i.upwardDirectionOffset.y), i.attacker.display.isFaceLeft() && (r = -r), i.setPosition(i.attacker.x + r, i.attacker.y + s), i.isGoToLeft = i.attacker.display.isFaceLeft(), i
                    }
                    return (0, i.default)(e, t), e.prototype.update = function (e, n) {
                        this.isGoToLeft ? this.angle -= .9 * n : this.angle += .9 * n, t.prototype.update.call(this, e, n)
                    }, e
                }(s.default);
            e.default = c
        },
        198: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = function (t) {
                this.scene = void 0, this.scene = t
            }
        },
        597: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(38),
                l = n(40),
                c = n(108),
                u = n(198),
                h = n(323),
                d = n(324),
                f = GameCore.Configs.Gameplay.DelayFinishGame,
                p = function (t) {
                    function e(e) {
                        var n, i = (n = t.call(this, e) || this).scene,
                            a = i.gameMode,
                            r = i.levelManager,
                            s = i.tutorialManager;
                        if (a === c.default.NORMAL) {
                            r.updateHighestCurrentLevel();
                            var o = r.getCurrentLevelId();
                            n.scene.updateLevelToLeaderboard(o)
                        }
                        a === c.default.BATTLE && n.scene.game.battle.finishBattle("win"), n.scene.audio.playSound(l.default.WIN_BATTLE);
                        var u = r.getCurrentLevelId(),
                            h = n.scene.getPlayedTimeString();
                        return n.scene.analytics.levelComplete(u, n.scene.gameMode, h), n.scene.effectManger.playResultWinAnimation(), n.scene.ads.hideBannerAdAsync(), n.scene.isBannerAdShowed = !1, s.isRunning() ? n.handleTutorialCase() : n.openResultScreen(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.openResultScreen = function () {
                        var t = this,
                            e = this.scene,
                            n = e.uiManager,
                            a = e.coinManager,
                            r = e.gameMode,
                            o = a.getRewardCoinsByAttackCoins();
                        this.scene.time.delayedCall(f, (0, i.default)(s().mark((function e() {
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        if (t.scene.stopManager(), !t.scene.game.ads.canbeShowInterstitialAd()) {
                                            e.next = 14;
                                            break
                                        }
                                        return e.prev = 2, t.scene.scene.pause(), e.next = 6, t.scene.game.ads.showInterstitialAdAsync();
                                    case 6:
                                        e.next = 11;
                                        break;
                                    case 8:
                                        e.prev = 8, e.t0 = e.catch(2);
                                    case 11:
                                        return e.prev = 11, t.scene.game.ads.preloadInterstitialAdAsync().catch((function () {})), e.finish(11);
                                    case 14:
                                        n.showResultScreen("win", r, o);
                                    case 15:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [2, 8, 11, 14]
                            ])
                        }))))
                    }, n.handleTutorialCase = function () {
                        var t = this,
                            e = this.scene,
                            n = e.levelManager,
                            a = e.coinManager,
                            r = e.uiManager,
                            l = e.gameMode;
                        1 === n.getCurrentLevelId() && this.scene.analytics.event(o.AnalyticsEvents.TUTORIAL_STEP, {
                            step: 5
                        });
                        var c = a.getRewardCoinsByAttackCoins();
                        this.scene.time.delayedCall(f, (0, i.default)(s().mark((function e() {
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        t.scene.stopManager(), r.showResultScreen("win", l, c);
                                    case 2:
                                    case "end":
                                        return e.stop()
                                }
                            }), e)
                        }))))
                    }, n.ready = function () {}, n.play = function () {}, n.levelFail = function () {}, n.levelComplete = function () {}, n.levelLoading = function () {
                        var t = new h.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.quit = function () {
                        var t = new d.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.update = function () {}, e
                }(u.default);
            e.default = p
        },
        603: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(40),
                l = n(108),
                c = n(198),
                u = n(323),
                h = n(324),
                d = n(325),
                f = GameCore.Configs.Gameplay.DelayFinishGame,
                p = function (t) {
                    function e(e) {
                        var n, i = (n = t.call(this, e) || this).scene,
                            a = i.gameMode,
                            r = i.levelManager,
                            s = i.tutorialManager;
                        a === l.default.BATTLE && n.scene.game.battle.finishBattle("lose"), n.scene.audio.playSound(o.default.LOSE_SOUND);
                        var c = n.scene.getPlayedTimeString(),
                            u = r.getCurrentLevelId();
                        return n.scene.analytics.levelFail(u, n.scene.gameMode, c), n.scene.effectManger.playResultLoseAnimation(), n.scene.ads.hideBannerAdAsync(), n.scene.isBannerAdShowed = !1, s.isRunning() ? n.handleTutorialCase() : n.openResultScreen(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.openResultScreen = function () {
                        var t = this,
                            e = this.scene,
                            n = e.uiManager,
                            a = e.gameMode,
                            r = this.scene.coinManager.getTotalCoinsByAttack();
                        this.scene.time.delayedCall(f, (0, i.default)(s().mark((function e() {
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        if (t.scene.stopManager(), !t.scene.game.ads.canbeShowInterstitialAd()) {
                                            e.next = 14;
                                            break
                                        }
                                        return e.prev = 2, t.scene.scene.pause(), e.next = 6, t.scene.game.ads.showInterstitialAdAsync();
                                    case 6:
                                        e.next = 11;
                                        break;
                                    case 8:
                                        e.prev = 8, e.t0 = e.catch(2);
                                    case 11:
                                        return e.prev = 11, t.scene.game.ads.preloadInterstitialAdAsync().catch((function () {})), e.finish(11);
                                    case 14:
                                        n.showResultScreen("lose", a, r);
                                    case 15:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [2, 8, 11, 14]
                            ])
                        }))))
                    }, n.handleTutorialCase = function () {
                        var t = this,
                            e = this.scene,
                            n = e.levelManager,
                            a = e.uiManager,
                            r = e.coinManager,
                            o = e.gameMode,
                            l = n.getCurrentLevelId(),
                            c = r.getTotalCoinsByAttack(),
                            u = 1 === l ? 1.5 * f : f;
                        this.scene.time.delayedCall(u, (0, i.default)(s().mark((function e() {
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        if (t.scene.stopManager(), 1 !== l) {
                                            e.next = 5;
                                            break
                                        }
                                        return t.scene.coin.plusCoins(c.baseValue, c.suffix), t.scene.prepareRound(), e.abrupt("return");
                                    case 5:
                                        a.showResultScreen("lose", o, c);
                                    case 6:
                                    case "end":
                                        return e.stop()
                                }
                            }), e)
                        }))))
                    }, n.ready = function () {
                        var t = new d.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.play = function () {}, n.levelFail = function () {}, n.levelComplete = function () {}, n.levelLoading = function () {
                        var t = new u.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.quit = function () {
                        var t = new h.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.update = function () {}, e
                }(c.default);
            e.default = p
        },
        323: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(44),
                l = n(32),
                c = n(598),
                u = n(108),
                h = n(60),
                d = n(198),
                f = n(324),
                p = n(325),
                g = h.default.LEVEL_PROGRESS,
                v = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).isRequesting = !1, n.handleLoadComplete = function () {
                            n.scene.prepareRound();
                            var t = n.scene.scene.get(o.SceneKeys.LOAD_SCENE);
                            t.scene.sleep(), t.lazyLoadResource()
                        }, n.run(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.run = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e, n, i, a, r;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (e = this.scene.uiManager, this.scene.initGameMode(), e.showUIForLevelLoadingState(), !(this.getCurrentLevel() > 1)) {
                                            t.next = 22;
                                            break
                                        }
                                        return n = this.scene.gameMode === u.default.BATTLE, t.next = 9, this.scene.isChallengeMode();
                                    case 9:
                                        if (i = t.sent, n || !i) {
                                            t.next = 22;
                                            break
                                        }
                                        return t.t0 = this.scene.storage, t.next = 14, (0, c.processContextChallengeFriendMode)();
                                    case 14:
                                        return t.t1 = t.sent, t.next = 17, t.t0.dispatch.call(t.t0, t.t1);
                                    case 17:
                                        if (this.scene.initGameMode(), this.scene.gameMode !== u.default.BATTLE) {
                                            t.next = 22;
                                            break
                                        }
                                        return this.scene.quit(), this.scene.restartScene(), t.abrupt("return");
                                    case 22:
                                        this.loadLevelsJson(), this.scene.gameMode === u.default.BATTLE && ((a = this.scene.game.globalScene).screen.close(l.ScreenKeys.LEADER_BOARD_SCREEN), a.screen.close(l.ScreenKeys.BATTLE_SCREEN), this.loadOpponentUnits()), this.isRequesting ? (e.showLoadingScreen(), (r = this.scene.scene.get(o.SceneKeys.LOAD_SCENE)).scene.wake(), r.load.once(Phaser.Loader.Events.COMPLETE, this.handleLoadComplete), r.load.start()) : this.scene.time.delayedCall(0, this.handleLoadComplete);
                                    case 25:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.loadOpponentUnits = function () {
                        var t = this.scene.game.battle.getOpponentInfo();
                        if (t) {
                            var e = t.unitData,
                                n = this.scene.scene.get(o.SceneKeys.LOAD_SCENE);
                            this.isRequesting = !0, n.loadUnits("spine", e)
                        }
                    }, n.getCurrentLevel = function () {
                        var t = this.scene.player.getCustomData(g),
                            e = GameCore.Utils.Valid.isNumber(t) ? t : 1;
                        return e > 0 ? e : 0
                    }, n.loadLevelsJson = function () {
                        var t = this.getCurrentLevel();
                        this.loadLevelJsonByLevel(t), this.reloadNextLevelJson(t)
                    }, n.reloadNextLevelJson = function (t) {
                        var e = t + 1;
                        e % 100 === 0 && this.loadLevelJsonByLevel(e, !1)
                    }, n.loadLevelJsonByLevel = function (t, e) {
                        void 0 === e && (e = !0);
                        var n = this.getJsonKey(t);
                        this.scene.cache.json.exists(n) || (e && (this.isRequesting = !0), this.scene.scene.get(o.SceneKeys.LOAD_SCENE).load.json(n, "assets/json/" + n + ".json"))
                    }, n.getJsonKey = function (t) {
                        var e = 100 * Math.floor(t / 100) + 1,
                            n = e + 99;
                        return "levels-" + (1e4 + e).toString().substring(1) + "-" + (1e4 + n).toString().substring(1)
                    }, n.ready = function () {
                        var t = new p.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.play = function () {}, n.levelFail = function () {}, n.levelComplete = function () {}, n.levelLoading = function () {}, n.quit = function () {
                        var t = new f.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.update = function () {}, e
                }(d.default);
            e.default = v
        },
        466: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(198),
                r = n(597),
                s = n(603),
                o = n(324),
                l = n(325),
                c = function (t) {
                    function e(e) {
                        var n, i = (n = t.call(this, e) || this).scene,
                            a = i.fieldManager,
                            r = i.unitManager,
                            s = i.uiManager,
                            o = i.spineManager,
                            l = i.tutorialManager,
                            c = i.effectManger;
                        return n.scene.accessibilityManager.stop(), a.hidePlacementSquares(), o.sortSpineContainerByName(), c.stopRewardCurveAnimation(), r.savePlayerUnits(), r.setReadyAllUnits(), r.runChildUpdateGroups(!0), r.disableDragOnPlayerUnits(), s.showUIForPlayingState(), !1 !== n.scene.isBannerAdShowed || l.isRunning() || (n.scene.isBannerAdShowed = !0, n.scene.ads.showBannerAdAsync().catch((function (t) {}))), n.scene.audio.setMusicVolume(.04, 1e3), n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.ready = function () {
                        var t = new l.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.play = function () {}, n.levelFail = function () {
                        var t = new s.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.levelComplete = function () {
                        var t = new r.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.levelLoading = function () {}, n.quit = function () {
                        var t = new o.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.update = function () {
                        var t = this.scene,
                            e = t.uiManager,
                            n = t.spineManager,
                            i = e.getCurrentEnemyHp() <= 0,
                            a = e.getCurrentPlayerHp() <= 0;
                        i ? this.scene.gameOver("win") : !a || i ? n.update(!1) : this.scene.gameOver("lose")
                    }, e
                }(a.default);
            e.default = c
        },
        324: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(198),
                r = n(323),
                s = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene.stopManager(), n.scene.audio.setMusicVolume(0, 3e3), n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.ready = function () {}, n.play = function () {}, n.levelComplete = function () {}, n.levelFail = function () {}, n.levelLoading = function () {
                        var t = new r.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.quit = function () {}, n.update = function () {}, e
                }(a.default);
            e.default = s
        },
        325: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(24),
                r = n.n(a),
                s = n(52),
                o = n.n(s),
                l = n(196),
                c = n(601),
                u = n(322),
                h = n(108),
                d = n(198),
                f = n(323),
                p = n(466),
                g = n(324),
                v = function (t) {
                    function e(e) {
                        var n, i, a = (i = t.call(this, e) || this).scene,
                            s = a.uiManager,
                            o = a.unitManager,
                            l = a.coinManager,
                            u = a.spineManager,
                            d = a.levelManager,
                            f = a.tutorialManager,
                            p = a.difficultyManager;
                        i.scene.initManager(), i.scene.startManager(), (i.scene.world.getScreenRatio() <= .58 || i.scene.gameMode === h.default.BATTLE) && !f.isRunning() ? (i.scene.isBannerAdShowed = !0, i.scene.ads.showBannerAdAsync().catch((function (t) {}))) : i.scene.isBannerAdShowed = !1;
                        var g = o.getPlayerUnits(),
                            v = o.getEnemyUnits();
                        u.addSpines(r()(n = []).call(n, v, g)), o.enableDragOnPlayerUnits(), o.runChildUpdateGroups(!0);
                        d.getCurrentLevelId();
                        var m = d.getModifierLevel(),
                            E = d.getPlayerLevel();
                        return l.setUnitModifier(E), l.setAttackModifier(m), p.updateCustomUnitModifierByLevel(E), p.updateCustomAttackModifierByLevel(m), i.scene.storage.dispatch((0, c.checkOfflineReward)()), s.closeLoadingScreen(), i.scene.gameMode === h.default.BATTLE ? (o.hideAllUnits(), i.scene.time.delayedCall(450, (function () {
                            s.showChallengeSplashScreen(), s.showUIForReadyState(), i.scene.updateUI()
                        }))) : (i.scene.audio.setMusicVolume(.4, 3e3), s.showUIForReadyState(), i.scene.updateUI()), f.showTutorial(), i.logLevelStart(), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.logLevelStart = function () {
                        var t = this.scene,
                            e = t.battle,
                            n = t.storage,
                            i = t.levelManager,
                            a = this.scene.gameMode === h.default.BATTLE,
                            r = this.scene.isContextChallenge(),
                            s = i.getCurrentLevelId();
                        if (a && r) {
                            var c, d = e.getOpponentInfo(),
                                f = n.getState(),
                                p = (0, u.getContext)(f).entryPointData || {},
                                g = p.playerId,
                                v = p.opponentId,
                                m = void 0 === v ? l.SampleOpponent.playerId : v;
                            if (o()(c = [m, g]).call(c, null == d ? void 0 : d.playerId) > -1) return void this.scene.analytics.levelStart(s, "CHALLENGE")
                        }
                        this.scene.analytics.levelStart(s, this.scene.gameMode)
                    }, n.ready = function () {}, n.play = function () {
                        var t = new p.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.levelFail = function () {}, n.levelComplete = function () {}, n.levelLoading = function () {
                        if (this.scene.levelManager.isInLevelBuilderLevel()) {
                            var t = new f.default(this.scene);
                            this.scene.stateManager.changeStateTo(t)
                        }
                    }, n.quit = function () {
                        var t = new g.default(this.scene);
                        this.scene.stateManager.changeStateTo(t)
                    }, n.update = function () {
                        this.scene.spineManager.update(!0)
                    }, e
                }(d.default);
            e.default = v
        },
        327: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return s
                }
            });
            var i = n(0),
                a = n(38),
                r = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0, n, i) || this).setOrigin(0, 0), a
                    }
                    return (0, i.default)(e, t), e
                }(Phaser.GameObjects.Zone),
                s = function (t) {
                    function e() {
                        var e;
                        return (e = t.call(this, {
                            visible: !1
                        }) || this).unsubscribeList = void 0, e.gameZone = void 0, e.background = void 0, e.handleOpenScene = function () {
                            e.logPageviewOnOpen(), e.logEventOpen()
                        }, e.removeStateChange = function () {
                            e.unsubscribeList.forEach((function (t) {
                                return t()
                            }))
                        }, e
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.create = function () {
                        this.events.on("wake", this.handleOpenScene), this.events.on("resume", this.handleOpenScene), this.events.on("create", this.handleOpenScene), this.scaleGame(), this.createGameZone()
                    }, n.scaleGame = function () {
                        var t = this.getCamera("main"),
                            e = this.world.getZoomRatio(),
                            n = this.world.getWorldSize(),
                            i = n.width,
                            a = n.height;
                        t.setZoom(e), t.centerOn(i / 2, a / 2)
                    }, n.createGameZone = function () {
                        var t = this.world.getWorldSize(),
                            e = t.width,
                            n = t.height;
                        this.gameZone = new r(this, e, n)
                    }, n.getCamera = function (t) {
                        return "main" === t ? this.cameras.main : this.cameras.getCamera(t)
                    }, n.createMask = function (t) {
                        void 0 === t && (t = 1), this.getCamera("main").setBackgroundColor("rgba(0, 0, 0, " + t + ")")
                    }, n.fontSize = function (t) {
                        return t / 1
                    }, n.createBackground = function (t, e, n, i) {
                        this.background ? (this.background.setTexture(t), e && this.background.setFrame(e)) : this.background = this.make.image({
                            key: t,
                            frame: e
                        }), this.background.setName(t);
                        var a = this.gameZone,
                            r = a.displayWidth,
                            s = a.displayHeight;
                        this.background.setDisplaySize(r, s), GameCore.Utils.Valid.isNumber(n) && this.background.setAlpha(n), GameCore.Utils.Valid.isNumber(i) && this.background.setTint(i), Phaser.Display.Align.In.Center(this.background, this.gameZone)
                    }, n.handleStateChange = function (t) {
                        var e = this;
                        this.unsubscribeList = [], t.forEach((function (t) {
                            var n = t.selector,
                                i = t.callback,
                                a = e.storage.watch(n, i);
                            e.unsubscribeList.push(a)
                        })), this.events.once("sleep", this.removeStateChange), this.events.once("destroy", this.removeStateChange), this.events.once("shutdown", this.removeStateChange)
                    }, n.logPageviewOnOpen = function () {
                        this.analytics.pageview(this.scene.key)
                    }, n.logEventOpen = function () {
                        this.analytics.event(a.AnalyticsEvents.SCREEN_OPEN, {
                            screen_name: this.getSceneName()
                        })
                    }, n.getSceneName = function () {
                        return GameCore.Utils.String.toUpperCamelCase(this.scene.key.toLowerCase())
                    }, e
                }(Phaser.Scene)
        },
        150: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return fs
                }
            });
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(24),
                l = n.n(o),
                c = n(108),
                u = n(3),
                h = n(2),
                d = n(25),
                f = h.default.GAMEPLAY,
                p = f.KEY,
                g = f.FRAME,
                v = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).arrowStart = void 0, n.arrowEnd = void 0, n.arrowMiddle = void 0, n.expandTween = void 0, n.name = "AdjustableArrow", n.addArrowStart(), n.addArrowEnd(), n.addArrowMiddle(), n.setDepth(d.default.EFFECT), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.addArrowStart = function () {
                        this.arrowStart = this.scene.make.image({
                            key: p,
                            frame: g.GUIDE_ARROW_START,
                            origin: {
                                x: 0,
                                y: .5
                            }
                        }), this.arrowStart.setWorldSize(20, 26), this.add(this.arrowStart)
                    }, n.addArrowEnd = function () {
                        this.arrowEnd = this.scene.make.image({
                            key: p,
                            frame: g.GUIDE_ARROW_END,
                            origin: {
                                x: 1,
                                y: .5
                            }
                        }), this.arrowEnd.setWorldSize(4, 13), this.add(this.arrowEnd)
                    }, n.addArrowMiddle = function () {
                        this.arrowMiddle = this.scene.make.image({
                            key: p,
                            frame: g.GUIDE_ARROW_MIDDLE,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.arrowMiddle.setWorldSize(1, 13), this.add(this.arrowMiddle)
                    }, n.changeArrowLength = function (t) {
                        var e = t - this.arrowStart.width - this.arrowEnd.width;
                        this.arrowMiddle.setWorldSize(e, this.arrowMiddle.height), this.arrowEnd.setPosition(-e / 2, 0), this.arrowStart.setPosition(e / 2, 0)
                    }, n.runArrowExpandTween = function (t, e, n) {
                        var i = this,
                            a = n - this.arrowStart.width - this.arrowEnd.width;
                        this.arrowEnd.setPosition(-a / 2, 0), this.arrowStart.setPosition(-a / 2, 0), this.arrowMiddle.setWorldSize(0, this.arrowMiddle.height), this.expandTween = this.scene.tweens.addCounter({
                            from: 0,
                            to: 100,
                            duration: t,
                            completeDelay: e,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onUpdate: function (t) {
                                var e = t.getValue(),
                                    n = a * e / 100;
                                i.arrowMiddle.setWorldSize(n, i.arrowMiddle.height);
                                var r = -a / 2 + n / 2;
                                i.arrowMiddle.setPosition(r, 0);
                                var s = -a / 2 + n;
                                i.arrowStart.setPosition(s, 0)
                            },
                            onComplete: function () {
                                i.setAlpha(0)
                            },
                            onStop: function () {
                                i.setAlpha(0)
                            }
                        })
                    }, n.killExpandTween = function () {
                        var t;
                        null == (t = this.expandTween) || t.stop()
                    }, e
                }(Phaser.GameObjects.Container),
                m = v,
                E = h.default.GAMEPLAY,
                y = E.KEY,
                A = E.FRAME,
                T = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).hand = void 0, n.arrow = void 0, n.toGlobalX = 0, n.toGlobalY = 0, n.name = "DragTutorialHand", n.addHand(), n.addArrow(), n.bringToTop(n.hand), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.addHand = function () {
                        this.hand = this.scene.make.image({
                            key: y,
                            frame: A.GUIDE_HAND,
                            origin: {
                                x: 0,
                                y: 0
                            }
                        }), this.hand.setWorldSize(65.5, 55.5), this.add(this.hand)
                    }, n.addArrow = function () {
                        this.arrow = new m(this.scene), this.arrow.setAlpha(0)
                    }, n.setTarget = function (t, e) {
                        this.toGlobalX = t, this.toGlobalY = e
                    }, n.playAnimation = function (t, e) {
                        var n, i, a = this;
                        void 0 === t && (t = 0), void 0 === e && (e = 800);
                        var r = 1 / this.scene.world.getPixelRatio();
                        this.hand.angle = 0;
                        var s = this.toGlobalX - this.x,
                            o = this.toGlobalY - this.y,
                            l = this.x + s / 2,
                            c = this.y + o / 2,
                            u = .8 * Math.sqrt(s * s + o * o);
                        this.arrow.setPosition(l, c), this.arrow.rotation = Math.atan2(o, s), this.arrow.setAlpha(0), this.arrow.killExpandTween(), this.hand.setPosition(0, 0), this.hand.setAlpha(1), null == (n = this.scene) || n.tweens.add({
                            delay: t,
                            targets: this.arrow,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onStart: function () {
                                a.arrow.runArrowExpandTween(1200, 200, u)
                            },
                            props: {
                                alpha: {
                                    start: 0,
                                    value: .5,
                                    duration: 200
                                }
                            }
                        }), null == (i = this.scene) || i.tweens.add({
                            delay: t,
                            targets: [this.hand],
                            ease: Phaser.Math.Easing.Cubic.Out,
                            props: {
                                alpha: {
                                    start: 0,
                                    value: 1,
                                    duration: 200
                                },
                                x: {
                                    from: 0,
                                    to: s,
                                    duration: 1200
                                },
                                y: {
                                    from: 0,
                                    to: o,
                                    duration: 1200
                                }
                            },
                            onComplete: function () {
                                var n;
                                null == (n = a.scene) || n.tweens.add({
                                    targets: [a.hand],
                                    delay: 200,
                                    duration: 200,
                                    completeDelay: 200,
                                    ease: Phaser.Math.Easing.Cubic.Out,
                                    props: {
                                        alpha: 0
                                    },
                                    onComplete: function () {
                                        a.hand.x = 0, a.hand.y = 0, a.hand.scale = r, a.playAnimation(t, e)
                                    }
                                })
                            }
                        })
                    }, n.stopAnimation = function () {
                        this.scene.tweens.killTweensOf(this.hand), this.scene.tweens.killTweensOf(this.arrow)
                    }, n.kill = function () {
                        this.arrow.kill(), t.prototype.kill.call(this)
                    }, n.revive = function () {
                        this.arrow.revive(), t.prototype.revive.call(this)
                    }, n.destroy = function (e) {
                        this.arrow.destroy(e), t.prototype.destroy.call(this, e)
                    }, n.preDestroy = function () {
                        this.scene.tweens.killTweensOf(this.hand), this.scene.tweens.killTweensOf(this.arrow)
                    }, e
                }(Phaser.GameObjects.Container),
                S = T,
                M = {
                    STATUS: {
                        READY: "ready",
                        RUNNING: "running",
                        STOPPED: "stopped"
                    }
                },
                w = M.STATUS,
                x = function () {
                    function t(t) {
                        this.state = void 0, this.scene = void 0, this.scene = t
                    }
                    var e = t.prototype;
                    return e.init = function () {
                        this.setState(w.READY)
                    }, e.start = function () {
                        this.isRunning() || this.setState(w.RUNNING)
                    }, e.stop = function () {
                        this.isRunning() && this.setState(w.STOPPED)
                    }, e.setState = function (t) {
                        this.state = t
                    }, e.isReady = function () {
                        return this.state === w.READY
                    }, e.isRunning = function () {
                        return this.state === w.RUNNING
                    }, e.isStopped = function () {
                        return this.state === w.STOPPED
                    }, t
                }(),
                C = x,
                I = GameCore.Configs.Gameplay.HintWaitTime,
                b = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.hand = void 0, n.autoTimeEvent = void 0, n.isDragging = !1, n.handleAutomaticallyHint = function () {
                            var t = n.scene.unitManager.getSameCoupleUnits();
                            t ? (n.hand.stopAnimation(), n.hand.revive(), n.hand.setPosition(t.unit1.x, t.unit1.y), n.hand.setTarget(t.unit2.x, t.unit2.y), n.hand.playAnimation(500)) : n.startAutoHint()
                        }, n.handlePlayerDragging = function () {
                            n.isDragging || (n.isDragging = !0, n.stopAutoHint())
                        }, n.handlePlayerEndDrag = function () {
                            n.isDragging = !1, n.startAutoHint()
                        }, n.handlePlayerInteract = function () {
                            n.stopAutoHint(), n.isDragging || n.startAutoHint()
                        }, n.scene = e, n.createHand(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        t.prototype.init.call(this)
                    }, n.start = function () {
                        this.isRunning() || (t.prototype.start.call(this), this.listenEvent(), this.startAutoHint())
                    }, n.stop = function () {
                        this.isRunning() && (t.prototype.stop.call(this), this.isDragging = !1, this.stopListenEvent(), this.stopAutoHint())
                    }, n.createHand = function () {
                        this.hand = new S(this.scene), this.hand.kill(), this.hand.setDepth(d.default.PRIORITY)
                    }, n.startAutoHint = function () {
                        this.autoTimeEvent = this.scene.time.delayedCall(I, this.handleAutomaticallyHint)
                    }, n.listenEvent = function () {
                        this.scene.input.on(Phaser.Input.Events.POINTER_DOWN, this.handlePlayerInteract), this.scene.input.on(Phaser.Input.Events.DRAG_START, this.handlePlayerDragging), this.scene.input.on(Phaser.Input.Events.DRAG_END, this.handlePlayerEndDrag)
                    }, n.stopListenEvent = function () {
                        this.scene.input.off(Phaser.Input.Events.POINTER_DOWN, this.handlePlayerInteract), this.scene.input.off(Phaser.Input.Events.DRAG_START, this.handlePlayerDragging), this.scene.input.off(Phaser.Input.Events.DRAG_END, this.handlePlayerEndDrag)
                    }, n.stopAutoHint = function () {
                        var t;
                        this.hand.kill(), this.hand.stopAnimation(), null == (t = this.autoTimeEvent) || t.remove()
                    }, e
                }(C),
                R = b,
                P = n(18),
                _ = P.SPRITES_ANIMATION.ALIEN[1].ATTACK,
                k = _.KEY,
                L = _.TEXTURE,
                D = _.FRAME_RATE,
                O = _.START,
                N = _.END,
                U = _.PREFIX,
                B = _.ZERO_PAD,
                F = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: D,
                            frames: e.generateFrameNames(L, {
                                prefix: U,
                                start: O,
                                end: N,
                                zeroPad: B
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, k, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                G = F,
                H = P.SPRITES_ANIMATION.ALIEN[1].DIE,
                V = H.KEY,
                Y = H.TEXTURE,
                W = H.FRAME_RATE,
                K = H.START,
                z = H.END,
                X = H.PREFIX,
                j = H.ZERO_PAD,
                q = function (t) {
                    function e(e) {
                        var n = {
                            repeat: 0,
                            frameRate: W,
                            frames: e.generateFrameNames(Y, {
                                prefix: X,
                                start: K,
                                end: z,
                                zeroPad: j
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, V, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                Z = q,
                Q = P.SPRITES_ANIMATION.ALIEN[1].IDLE,
                J = Q.KEY,
                $ = Q.TEXTURE,
                tt = Q.FRAME_RATE,
                et = Q.START,
                nt = Q.END,
                it = Q.PREFIX,
                at = Q.ZERO_PAD,
                rt = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: tt,
                            frames: e.generateFrameNames($, {
                                prefix: it,
                                start: et,
                                end: nt,
                                zeroPad: at
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, J, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                st = rt,
                ot = P.SPRITES_ANIMATION.ALIEN[1].RUN,
                lt = ot.KEY,
                ct = ot.TEXTURE,
                ut = ot.FRAME_RATE,
                ht = ot.START,
                dt = ot.END,
                ft = ot.PREFIX,
                pt = ot.ZERO_PAD,
                gt = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: ut,
                            frames: e.generateFrameNames(ct, {
                                prefix: ft,
                                start: ht,
                                end: dt,
                                zeroPad: pt
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, lt, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                vt = gt,
                mt = P.SPRITES_ANIMATION.MELEE[1].ATTACK,
                Et = mt.KEY,
                yt = mt.TEXTURE,
                At = mt.FRAME_RATE,
                Tt = mt.START,
                St = mt.END,
                Mt = mt.PREFIX,
                wt = mt.ZERO_PAD,
                xt = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: At,
                            frames: e.generateFrameNames(yt, {
                                prefix: Mt,
                                start: Tt,
                                end: St,
                                zeroPad: wt
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, Et, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                Ct = xt,
                It = P.SPRITES_ANIMATION.MELEE[1].DIE,
                bt = It.KEY,
                Rt = It.TEXTURE,
                Pt = It.FRAME_RATE,
                _t = It.START,
                kt = It.END,
                Lt = It.PREFIX,
                Dt = It.ZERO_PAD,
                Ot = function (t) {
                    function e(e) {
                        var n = {
                            repeat: 0,
                            frameRate: Pt,
                            frames: e.generateFrameNames(Rt, {
                                prefix: Lt,
                                start: _t,
                                end: kt,
                                zeroPad: Dt
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, bt, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                Nt = Ot,
                Ut = P.SPRITES_ANIMATION.MELEE[1].IDLE,
                Bt = Ut.KEY,
                Ft = Ut.TEXTURE,
                Gt = Ut.FRAME_RATE,
                Ht = Ut.START,
                Vt = Ut.END,
                Yt = Ut.PREFIX,
                Wt = Ut.ZERO_PAD,
                Kt = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: Gt,
                            frames: e.generateFrameNames(Ft, {
                                prefix: Yt,
                                start: Ht,
                                end: Vt,
                                zeroPad: Wt
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, Bt, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                zt = Kt,
                Xt = P.SPRITES_ANIMATION.MELEE[1].RUN,
                jt = Xt.KEY,
                qt = Xt.TEXTURE,
                Zt = Xt.FRAME_RATE,
                Qt = Xt.START,
                Jt = Xt.END,
                $t = Xt.PREFIX,
                te = Xt.ZERO_PAD,
                ee = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: Zt,
                            frames: e.generateFrameNames(qt, {
                                prefix: $t,
                                start: Qt,
                                end: Jt,
                                zeroPad: te
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, jt, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                ne = ee,
                ie = P.PROJECTILES_ANIMATION.GREEN_FIRE,
                ae = ie.KEY,
                re = ie.TEXTURE,
                se = ie.FRAME_RATE,
                oe = ie.START,
                le = ie.END,
                ce = ie.PREFIX,
                ue = ie.ZERO_PAD,
                he = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: se,
                            frames: e.generateFrameNames(re, {
                                prefix: ce,
                                start: oe,
                                end: le,
                                zeroPad: ue
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, ae, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                de = he,
                fe = P.SPRITES_ANIMATION.RANGED[1].ATTACK_ABOVE,
                pe = fe.KEY,
                ge = fe.TEXTURE,
                ve = fe.FRAME_RATE,
                me = fe.START,
                Ee = fe.END,
                ye = fe.PREFIX,
                Ae = fe.ZERO_PAD,
                Te = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: ve,
                            frames: e.generateFrameNames(ge, {
                                prefix: ye,
                                start: me,
                                end: Ee,
                                zeroPad: Ae
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, pe, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                Se = Te,
                Me = P.SPRITES_ANIMATION.RANGED[1].DIE,
                we = Me.KEY,
                xe = Me.TEXTURE,
                Ce = Me.FRAME_RATE,
                Ie = Me.START,
                be = Me.END,
                Re = Me.PREFIX,
                Pe = Me.ZERO_PAD,
                _e = function (t) {
                    function e(e) {
                        var n = {
                            repeat: 0,
                            frameRate: Ce,
                            frames: e.generateFrameNames(xe, {
                                prefix: Re,
                                start: Ie,
                                end: be,
                                zeroPad: Pe
                            }),
                            showOnStart: !0,
                            hideOnComplete: !1,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, we, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                ke = _e,
                Le = P.SPRITES_ANIMATION.RANGED[1].IDLE,
                De = Le.KEY,
                Oe = Le.TEXTURE,
                Ne = Le.FRAME_RATE,
                Ue = Le.START,
                Be = Le.END,
                Fe = Le.PREFIX,
                Ge = Le.ZERO_PAD,
                He = function (t) {
                    function e(e) {
                        var n = {
                            repeat: -1,
                            frameRate: Ne,
                            frames: e.generateFrameNames(Oe, {
                                prefix: Fe,
                                start: Ue,
                                end: Be,
                                zeroPad: Ge
                            }),
                            showOnStart: !0,
                            hideOnComplete: !0,
                            skipMissedFrames: !0
                        };
                        return t.call(this, e, De, n) || this
                    }
                    return (0, a.default)(e, t), e
                }(Phaser.Animations.Animation),
                Ve = He,
                Ye = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.scene = e, n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.addLevel11ProjectileAnimation = function () {
                        if (!this.scene.anims.exists(P.PROJECTILES_ANIMATION.GREEN_FIRE.KEY)) {
                            var t = new de(this.scene.anims);
                            this.scene.anims.add(P.PROJECTILES_ANIMATION.GREEN_FIRE.KEY, t)
                        }
                    }, n.addAlienAnimation = function () {
                        var t = P.SPRITES_ANIMATION.ALIEN[1],
                            e = t.ATTACK,
                            n = t.DIE,
                            i = t.IDLE;
                        t.RUN;
                        if (!this.scene.anims.exists(i.KEY)) {
                            var a = new st(this.scene.anims);
                            this.scene.anims.add(i.KEY, a)
                        }
                        if (!this.scene.anims.exists(e.KEY)) {
                            var r = new vt(this.scene.anims);
                            this.scene.anims.add(e.KEY, r)
                        }
                        if (!this.scene.anims.exists(i.KEY)) {
                            var s = new G(this.scene.anims);
                            this.scene.anims.add(i.KEY, s)
                        }
                        if (!this.scene.anims.exists(n.KEY)) {
                            var o = new Z(this.scene.anims);
                            this.scene.anims.add(n.KEY, o)
                        }
                    }, n.addMeleeLevel1Animation = function () {
                        var t = P.SPRITES_ANIMATION.MELEE[1],
                            e = t.ATTACK,
                            n = t.DIE,
                            i = t.IDLE,
                            a = t.RUN;
                        if (!this.scene.anims.exists(e.KEY)) {
                            var r = new Ct(this.scene.anims);
                            this.scene.anims.add(e.KEY, r)
                        }
                        if (!this.scene.anims.exists(n.KEY)) {
                            var s = new Nt(this.scene.anims);
                            this.scene.anims.add(n.KEY, s)
                        }
                        if (!this.scene.anims.exists(i.KEY)) {
                            var o = new zt(this.scene.anims);
                            this.scene.anims.add(i.KEY, o)
                        }
                        if (!this.scene.anims.exists(a.KEY)) {
                            var l = new ne(this.scene.anims);
                            this.scene.anims.add(a.KEY, l)
                        }
                    }, n.addRangedLevel1Animation = function () {
                        var t = P.SPRITES_ANIMATION.RANGED[1],
                            e = t.ATTACK_ABOVE,
                            n = t.DIE,
                            i = t.IDLE;
                        if (!this.scene.anims.exists(e.KEY)) {
                            var a = new Se(this.scene.anims);
                            this.scene.anims.add(e.KEY, a)
                        }
                        if (!this.scene.anims.exists(n.KEY)) {
                            var r = new ke(this.scene.anims);
                            this.scene.anims.add(n.KEY, r)
                        }
                        if (!this.scene.anims.exists(i.KEY)) {
                            var s = new Ve(this.scene.anims);
                            this.scene.anims.add(i.KEY, s)
                        }
                    }, n.checkIfAnimationIsAdded = function (t) {
                        return this.scene.anims.exists(t)
                    }, n.addMeleeUnitAnimationBasedOnLevel = function (t) {
                        if (1 === t) this.addMeleeLevel1Animation();
                        else this.addAlienAnimation()
                    }, n.addRangedUnitAnimationBasedOnLevel = function (t) {
                        if (1 === t) this.addRangedLevel1Animation();
                        else this.addAlienAnimation()
                    }, e
                }(C),
                We = Ye,
                Ke = n(74),
                ze = n(27),
                Xe = ze.default.MULTIPLY_REWARD_ROUND,
                je = ze.default.UNIT_COIN_SCALE,
                qe = ze.default.BASE_UNIT_COIN,
                Ze = ze.default.COINS_PER_ATTACK,
                Qe = ze.default.ATTACK_COIN_SCALE,
                Je = ze.default.MULTIPLY_REWARD_BATTLE,
                $e = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.unitModifier = void 0, n.currentUnitModifier = void 0, n.attackModifier = void 0, n.currentAttackModifier = void 0, n.totalCoinsByAttack = void 0, n.scene = e, n.initModifier(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.initModifier = function () {
                        this.unitModifier = new Ke.default(1), this.attackModifier = new Ke.default(1), this.currentUnitModifier = new Ke.default(1)
                    }, n.init = function () {
                        t.prototype.init.call(this), this.totalCoinsByAttack = new Ke.default(0)
                    }, n.getUnitPrice = function (t) {
                        var e = t || 0,
                            n = new Ke.default(qe),
                            i = n.clone();
                        return i.multiply(e), i.multiply(this.unitModifier), i.biggerThan(n) ? i : n
                    }, n.getAttackCoinByUnit = function (t, e) {
                        var n = .75 * (t.level - 1) + Ze,
                            i = this.attackModifier.clone();
                        i.multiply(n);
                        var a = e.currentHp,
                            r = t.attackPower;
                        return a < r && (i.multiply(a), i.divide(r)), i.biggerThan(new Ke.default(1)) ? i : new Ke.default(1)
                    }, n.setUnitModifier = function (t, e) {
                        if (void 0 === e && (e = 1), t <= 50) {
                            var n = Math.pow(je, t);
                            this.currentUnitModifier = new Ke.default(1), this.currentUnitModifier.multiply(n)
                        } else {
                            var i = Math.pow(je, 50),
                                a = Math.floor(t / 50),
                                r = t % 50;
                            this.currentUnitModifier = new Ke.default(1);
                            for (var s = 0; s < a; s++) this.currentUnitModifier.multiply(i);
                            var o = Math.pow(je, r);
                            this.currentUnitModifier.multiply(o)
                        }
                        this.currentUnitModifier.multiply(e), this.unitModifier = this.currentUnitModifier
                    }, n.getUnitModifier = function () {
                        return this.unitModifier
                    }, n.setAttackModifier = function (t, e) {
                        if (void 0 === e && (e = 1), t <= 50) {
                            var n = Math.pow(Qe, t);
                            this.currentAttackModifier = new Ke.default(1), this.currentAttackModifier.multiply(n)
                        } else {
                            var i = Math.pow(Qe, 50),
                                a = Math.floor(t / 50),
                                r = t % 50;
                            this.currentAttackModifier = new Ke.default(1);
                            for (var s = 0; s < a; s++) this.currentAttackModifier.multiply(i), this.currentAttackModifier.multiply(1.5);
                            var o = Math.pow(Qe, r);
                            this.currentAttackModifier.multiply(o)
                        }
                        this.currentAttackModifier.multiply(e), this.attackModifier = this.currentAttackModifier
                    }, n.getAttackModifier = function () {
                        return this.attackModifier
                    }, n.addCoinsByAttack = function (t) {
                        this.totalCoinsByAttack.add(t)
                    }, n.getTotalCoinsByAttack = function () {
                        return this.totalCoinsByAttack
                    }, n.getRewardCoinsByAttackCoins = function () {
                        var t = this.scene.gameMode,
                            e = this.totalCoinsByAttack.clone();
                        return e.multiply(Xe), t === c.default.BATTLE && e.multiply(Je), e
                    }, e
                }(C),
                tn = $e,
                en = n(189),
                nn = n.n(en),
                an = n(65),
                rn = n.n(an),
                sn = n(591),
                on = ze.default.UNIT_PRICE_CUSTOM_MODIFIER,
                ln = ze.default.ATTACK_CUSTOM_MODIFIER,
                cn = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.currentGameMode = void 0, n.unitLevelsUpdated = void 0, n.customUnitModifier = void 0, n.attackLevelsUpdated = void 0, n.customAttackModifier = void 0, n.scene = e, n.intData(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.intData = function () {
                        this.currentGameMode = c.default.NORMAL, this.unitLevelsUpdated = [!1], this.customUnitModifier = 0, this.attackLevelsUpdated = [!1], this.customAttackModifier = 0, localStorage.clear(), this.initDataToolDev()
                    }, n.init = function () {
                        var t = this.scene.levelManager;
                        (this.scene.gameMode !== this.currentGameMode || t.isInLevelBuilderLevel()) && (this.currentGameMode = this.scene.gameMode, this.unitLevelsUpdated = [!1], this.customUnitModifier = 0, this.attackLevelsUpdated = [!1], this.customAttackModifier = 0)
                    }, n.initDataToolDev = function () {
                        if (GameCore.Utils.Valid.isDebugger()) {
                            if (!(0, sn.getByKeyLocalStorage)("DevCustomUnitMod")) {
                                var t = {};
                                on.forEach((function (e) {
                                    t[e[0]] = e[1]
                                })), (0, sn.writeByKeyLocalStorage)("DevCustomUnitMod", t)
                            }
                            if (!(0, sn.getByKeyLocalStorage)("DevCustomAttackMod")) {
                                var e = {};
                                ln.forEach((function (t) {
                                    e[t[0]] = t[1]
                                })), (0, sn.writeByKeyLocalStorage)("DevCustomAttackMod", e)
                            }
                        }
                    }, n.addCustomUnitModifier = function (t) {
                        this.customUnitModifier += t
                    }, n.updateCustomUnitModifierByLevel = function (t) {
                        if (!this.updateCustomUnitModSuccessByDevTool(t)) {
                            for (var e = 0; e < on.length; e++) {
                                var n = on[e],
                                    i = n[0],
                                    a = n[1];
                                if (i > t) break;
                                this.unitLevelsUpdated[i] || (this.addCustomUnitModifier(a), this.unitLevelsUpdated[i] = !0)
                            }
                            this.scene.coinManager.setUnitModifier(t, this.customUnitModifier)
                        }
                    }, n.updateCustomUnitModSuccessByDevTool = function (t) {
                        if (!GameCore.Utils.Valid.isDebugger()) return !1;
                        var e = (0, sn.getByKeyLocalStorage)("DevCustomUnitMod");
                        if (!GameCore.Utils.Valid.isObject(e)) return !1;
                        for (var n = 0, i = 0, a = nn()(e); i < a.length; i++) {
                            var r = a[i],
                                s = r[0],
                                o = r[1],
                                l = rn()(s),
                                c = o;
                            if (l > t) break;
                            l === t && (n = c), this.unitLevelsUpdated[l] || (this.addCustomUnitModifier(c), this.unitLevelsUpdated[l] = !0)
                        }
                        var u = this.scene,
                            h = u.coinManager,
                            d = u.uiManager;
                        return h.setUnitModifier(t, this.customUnitModifier), d.setCurrentUnitModText(n, h.getUnitModifier()), !0
                    }, n.editCurrentLevelUnitMod = function (t) {
                        var e = this.scene.levelManager.getCurrentLevelId(),
                            n = (0, sn.getByKeyLocalStorage)("DevCustomUnitMod");
                        if (GameCore.Utils.Valid.isObject(n)) {
                            var i, a = n[e];
                            this.customUnitModifier = this.customUnitModifier - a + t, (0, sn.writeByKeyLocalStorage)("DevCustomUnitMod", ((i = {})[e] = t, i))
                        } else {
                            var r;
                            this.addCustomUnitModifier(t), this.unitLevelsUpdated[e] = !0, (0, sn.writeByKeyLocalStorage)("DevCustomUnitMod", ((r = {})[e] = t, r))
                        }
                        var s = this.scene.coinManager;
                        return s.setUnitModifier(e, this.customUnitModifier), s.getUnitModifier()
                    }, n.addCustomAttackModifier = function (t) {
                        this.customAttackModifier += t
                    }, n.updateCustomAttackModifierByLevel = function (t) {
                        if (!this.updateCustomAttackModSuccessByDevTool(t)) {
                            for (var e = 0; e < ln.length; e++) {
                                var n = ln[e],
                                    i = n[0],
                                    a = n[1];
                                if (i > t) break;
                                this.attackLevelsUpdated[i] || (this.addCustomAttackModifier(a), this.attackLevelsUpdated[i] = !0)
                            }
                            this.scene.coinManager.setAttackModifier(t, this.customAttackModifier)
                        }
                    }, n.updateCustomAttackModSuccessByDevTool = function (t) {
                        if (!GameCore.Utils.Valid.isDebugger()) return !1;
                        var e = (0, sn.getByKeyLocalStorage)("DevCustomAttackMod");
                        if (!GameCore.Utils.Valid.isObject(e)) return !1;
                        for (var n = 0, i = 0, a = nn()(e); i < a.length; i++) {
                            var r = a[i],
                                s = r[0],
                                o = r[1],
                                l = rn()(s),
                                c = o;
                            if (l > t) break;
                            l === t && (n = c), this.attackLevelsUpdated[l] || (this.addCustomAttackModifier(c), this.attackLevelsUpdated[l] = !0)
                        }
                        var u = this.scene,
                            h = u.coinManager,
                            d = u.uiManager;
                        return h.setAttackModifier(t, this.customAttackModifier), d.setCurrentAttackModText(n, h.getAttackModifier()), !0
                    }, n.editCurrentLevelAttackMod = function (t) {
                        var e = this.scene.levelManager.getCurrentLevelId(),
                            n = (0, sn.getByKeyLocalStorage)("DevCustomAttackMod");
                        if (GameCore.Utils.Valid.isObject(n)) {
                            var i, a = n[e];
                            this.customAttackModifier = this.customAttackModifier - a + t, (0, sn.writeByKeyLocalStorage)("DevCustomAttackMod", ((i = {})[e] = t, i))
                        } else {
                            var r;
                            this.addCustomAttackModifier(t), this.attackLevelsUpdated[e] = !0, (0, sn.writeByKeyLocalStorage)("DevCustomAttackMod", ((r = {})[e] = t, r))
                        }
                        var s = this.scene.coinManager;
                        return s.setAttackModifier(e, this.customAttackModifier), s.getAttackModifier()
                    }, e
                }(C),
                un = cn,
                hn = n(460),
                dn = n(461),
                fn = n(19),
                pn = n(40),
                gn = n(462),
                vn = n(463),
                mn = h.default.SPINE_EFFECTS.FX_MERGE,
                En = h.default.GAMEPLAY,
                yn = En.KEY,
                An = En.FRAME,
                Tn = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.textObjects = void 0, n.activeTextObjects = void 0, n.mergeEffect = void 0, n.curveAnimation = void 0, n.rewardUnitCurveAnimation = void 0, n.sample = void 0, n.starTail = void 0, n.fullTextTween = void 0, n.resultWinAnimation = void 0, n.resultLoseAnimation = void 0, n.sparkExplosive = void 0, n.runSparksExplosive = function (t, e) {
                            var i = n.scene;
                            n.sparkExplosive = new vn.default(i), n.sparkExplosive.setDepth(d.default.EFFECT), n.sparkExplosive.explode(100, t, e, 50)
                        }, n.scene = e, n.createMergeEffect(), n.createTextObjects(), n.createCurveAnimation(), n.createFullText(), n.createResultWinEffect(), n.createResultLoseEffect(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.stop = function () {
                        this.isRunning() && (t.prototype.stop.call(this), this.stopMergeEffect(), this.stopTextEffect(), this.resetFullFloatText())
                    }, n.playMergeEffect = function (t) {
                        var e = t.getWorldPosition(),
                            n = e.x,
                            i = e.y;
                        this.mergeEffect.setActive(!0), this.mergeEffect.setVisible(!0), this.mergeEffect.setPosition(n, i);
                        var a = this.mergeEffect.getAnimationList();
                        this.mergeEffect.play(a[0], !1, !1), this.scene.audio.playSound(pn.default.UNIT_MERGE, {
                            volume: .5
                        })
                    }, n.createMergeEffect = function () {
                        this.mergeEffect = this.scene.add.spine(0, 0, mn.KEY, "animation"), this.mergeEffect.setName("MergeEffect"), this.mergeEffect.setDepth(d.default.EFFECT), this.mergeEffect.setScale(.5, .5), this.mergeEffect.setActive(!1), this.mergeEffect.setVisible(!1)
                    }, n.stopMergeEffect = function () {
                        this.mergeEffect.setActive(!1), this.mergeEffect.setVisible(!1)
                    }, n.createTextObjects = function () {
                        this.textObjects = this.scene.add.group({
                            runChildUpdate: !1
                        }), this.activeTextObjects = this.scene.add.group({
                            runChildUpdate: !1
                        })
                    }, n.getTextEffectObject = function () {
                        var t = this.textObjects.getMatching("active", !1)[0];
                        return t || this.createTextEffect()
                    }, n.createTextEffect = function () {
                        var t = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18),
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        return t.setDepth(d.default.DMG_POPUP_NUMBER), this.textObjects.add(t), t
                    }, n.hideAllTextEffects = function () {
                        var t = this;
                        this.textObjects.getChildren().forEach((function (e) {
                            e instanceof Phaser.GameObjects.BitmapText && e.active && e.visible && (t.activeTextObjects.add(e), e.kill())
                        }))
                    }, n.showAllTextEffects = function () {
                        this.activeTextObjects.getChildren().forEach((function (t) {
                            t instanceof Phaser.GameObjects.BitmapText && t.revive()
                        })), this.activeTextObjects.clear()
                    }, n.stopTextEffect = function () {
                        var t = this;
                        this.textObjects.getChildren().forEach((function (e) {
                            e instanceof Phaser.GameObjects.Text && (e.kill(), e.setAlpha(1), t.scene.tweens.killTweensOf(e))
                        }))
                    }, n.createCurveAnimation = function () {
                        this.sample = this.scene.make.image({
                            key: yn,
                            frame: An.BLANK
                        }), this.sample.setVisible(!1);
                        var t = new gn.default(this.scene);
                        t.setDepth(d.default.EFFECT), this.starTail = t
                    }, n.runCurveAnimation = function (t, e, n, i) {
                        var a = this,
                            r = {
                                x: t,
                                y: e
                            },
                            s = {
                                x: n,
                                y: i
                            };
                        this.curveAnimation = new dn.default({
                            targets: [this.sample],
                            delay: this.scene.tweens.stagger(80, {}),
                            duration: 1e3,
                            curve: [
                                [r.x, r.y],
                                [r.x - Phaser.Math.RND.between(-100, 100), r.y + Phaser.Math.RND.between(-140, -100)],
                                [s.x, s.y]
                            ],
                            onComplete: function () {
                                a.runSparksExplosive(n, i)
                            },
                            onCurveUpdate: function (t) {
                                var e = t.x + Phaser.Math.RND.between(-16, 16),
                                    n = t.y + Phaser.Math.RND.between(-16, 16);
                                a.starTail.explode(1, e, n)
                            }
                        }), this.curveAnimation.play()
                    }, n.runCurveAnimationRewardUnit = function (t, e, n, i, a) {
                        var r = this,
                            s = {
                                x: t,
                                y: e
                            },
                            o = {
                                x: n.x,
                                y: n.y
                            },
                            l = a || 1;
                        this.rewardUnitCurveAnimation = new dn.default({
                            targets: [this.sample],
                            delay: this.scene.tweens.stagger(80, {}),
                            duration: 1e3,
                            curve: [
                                [s.x, s.y],
                                [s.x - Phaser.Math.RND.between(-100, 100), s.y + Phaser.Math.RND.between(-140, -100)],
                                [o.x, o.y]
                            ],
                            onComplete: function () {
                                r.runSparksExplosive(o.x, o.y);
                                var t = r.scene.unitManager;
                                "MELEE" === i && t.createPlayerMelee(n.rowId, n.colId, l), "RANGED" === i && t.createPlayerArcher(n.rowId, n.colId, l), r.scene.updateUI()
                            },
                            onStop: function () {
                                var t = r.scene.unitManager;
                                "MELEE" === i && t.createPlayerMelee(n.rowId, n.colId, l), "RANGED" === i && t.createPlayerArcher(n.rowId, n.colId, l), r.scene.updateUI()
                            },
                            onCurveUpdate: function (t) {
                                var e = t.x + Phaser.Math.RND.between(-16, 16),
                                    n = t.y + Phaser.Math.RND.between(-16, 16);
                                r.isRewardCurveAnimationRunning() && r.starTail.explode(1, e, n)
                            }
                        }), this.rewardUnitCurveAnimation.play()
                    }, n.createFullText = function () {
                        var t = this,
                            e = this.scene.add.container(0, 0);
                        e.setDepth(d.default.EFFECT);
                        var n = this.scene.make.image({
                            key: yn,
                            frame: An.PURPLE_EFFECT
                        });
                        n.setOrigin(.5, .5), n.setWorldSize(263.5, 79.5), e.add(n);
                        var i = this.scene.make.text({
                            text: "FULL",
                            style: {
                                fontSize: "25px",
                                color: "#FFFFFF",
                                fontFamily: fn.default.FONT_FAMILY
                            }
                        });
                        i.setHighQuality(), Phaser.Display.Align.In.Center(i, n, -3, -5), e.add(i), e.kill(), Phaser.Display.Align.In.Center(e, this.scene.gameZone, 0, 30), this.fullTextTween = new hn.default({
                            targets: [e],
                            onStart: function () {
                                e.revive()
                            },
                            onComplete: function () {
                                t.scene.tweens.add({
                                    targets: [e],
                                    duration: 300,
                                    delay: 200,
                                    alpha: 0
                                })
                            }
                        })
                    }, n.playFullFloatText = function () {
                        this.fullTextTween.play()
                    }, n.resetFullFloatText = function () {
                        this.fullTextTween.stop()
                    }, n.createResultWinEffect = function () {
                        var t = this,
                            e = this.scene.add.container(0, 0);
                        e.setDepth(d.default.EFFECT);
                        var n = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_WIN_GLOW
                        });
                        n.setWorldSize(276.5, 58.5), e.add(n);
                        var i = this.scene.make.text({
                            text: "WIN",
                            style: {
                                fontSize: "25px",
                                color: "#FFFFFF",
                                fontFamily: fn.default.FONT_FAMILY
                            }
                        });
                        i.setHighQuality(), Phaser.Display.Align.In.Center(i, n), e.add(i);
                        var a = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_WIN_SHAPE_ABOVE
                        });
                        a.setWorldSize(87.5, 18.5), e.add(a), Phaser.Display.Align.In.TopCenter(a, n, 0, 5);
                        var r = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_WIN_SHAPE_BELOW
                        });
                        r.setWorldSize(147, 23.5), e.add(r), Phaser.Display.Align.In.BottomCenter(r, n, 0, 8), e.kill(), Phaser.Display.Align.In.Center(e, this.scene.gameZone, 0, -80), this.resultWinAnimation = this.scene.tweens.add({
                            paused: !0,
                            targets: [e],
                            onActive: function () {
                                e.revive(), e.setAlpha(1), e.setScale(1), n.setAlpha(0), i.setAlpha(0), a.setAlpha(0), r.setAlpha(0), t.scene.add.tween({
                                    targets: [n, i],
                                    duration: 400,
                                    alpha: {
                                        start: 0,
                                        to: 1
                                    },
                                    ease: Phaser.Math.Easing.Quadratic.In
                                }), t.scene.add.tween({
                                    targets: [a, r],
                                    duration: 300,
                                    alpha: {
                                        start: 0,
                                        to: 1
                                    }
                                }), t.scene.add.tween({
                                    targets: [a],
                                    duration: 300,
                                    delay: 200,
                                    y: {
                                        start: -10,
                                        to: -25
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.add.tween({
                                    targets: [r],
                                    duration: 300,
                                    delay: 200,
                                    y: {
                                        start: 10,
                                        to: 25
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.add.tween({
                                    targets: [e],
                                    duration: 600,
                                    delay: 1e3,
                                    scale: {
                                        from: 1,
                                        to: 1.2
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.tweens.add({
                                    targets: [e],
                                    duration: 300,
                                    delay: 1300,
                                    alpha: 0
                                })
                            }
                        })
                    }, n.playResultWinAnimation = function () {
                        this.resultWinAnimation.play()
                    }, n.createResultLoseEffect = function () {
                        var t = this,
                            e = this.scene.add.container(0, 0);
                        e.setDepth(d.default.EFFECT);
                        var n = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_LOSE_GLOW
                        });
                        n.setWorldSize(253.5, 55), e.add(n);
                        var i = this.scene.make.text({
                            text: "LOSE",
                            style: {
                                fontSize: "25px",
                                color: "#FFFFFF",
                                fontFamily: fn.default.FONT_FAMILY
                            }
                        });
                        i.setHighQuality(), Phaser.Display.Align.In.Center(i, n), e.add(i);
                        var a = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_LOSE_SHAPE_ABOVE
                        });
                        a.setWorldSize(86, 22.5), e.add(a), Phaser.Display.Align.In.TopCenter(a, n, 0, 5);
                        var r = this.scene.make.image({
                            key: yn,
                            frame: An.EFFECT_LOSE_SHAPE_BELOW
                        });
                        r.setWorldSize(126.5, 25.5), e.add(r), Phaser.Display.Align.In.BottomCenter(r, n, 0, 8), e.kill(), Phaser.Display.Align.In.Center(e, this.scene.gameZone, 0, -80), this.resultLoseAnimation = this.scene.tweens.add({
                            paused: !0,
                            targets: [e],
                            onActive: function () {
                                e.revive(), e.setAlpha(1), e.setScale(1), n.setAlpha(0), i.setAlpha(0), a.setAlpha(0), r.setAlpha(0), t.scene.add.tween({
                                    targets: [n, i],
                                    duration: 400,
                                    alpha: {
                                        start: 0,
                                        to: 1
                                    },
                                    ease: Phaser.Math.Easing.Quadratic.In
                                }), t.scene.add.tween({
                                    targets: [a, r],
                                    duration: 300,
                                    alpha: {
                                        start: 0,
                                        to: 1
                                    }
                                }), t.scene.add.tween({
                                    targets: [a],
                                    duration: 300,
                                    delay: 200,
                                    y: {
                                        start: -10,
                                        to: -25
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.add.tween({
                                    targets: [r],
                                    duration: 300,
                                    delay: 200,
                                    y: {
                                        start: 10,
                                        to: 25
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.add.tween({
                                    targets: [e],
                                    duration: 600,
                                    delay: 1e3,
                                    scale: {
                                        from: 1,
                                        to: .8
                                    },
                                    ease: Phaser.Math.Easing.Cubic.InOut
                                }), t.scene.tweens.add({
                                    targets: [e],
                                    duration: 300,
                                    delay: 1300,
                                    alpha: 0
                                })
                            }
                        })
                    }, n.playResultLoseAnimation = function () {
                        this.resultLoseAnimation.play()
                    }, n.isRewardCurveAnimationRunning = function () {
                        return !!this.rewardUnitCurveAnimation && (!!this.rewardUnitCurveAnimation.tween && (this.rewardUnitCurveAnimation && this.rewardUnitCurveAnimation.tween.isPlaying()))
                    }, n.stopRewardCurveAnimation = function () {
                        var t, e;
                        this.isRewardCurveAnimationRunning() && (this.rewardUnitCurveAnimation.stop(), null == (t = this.starTail) || t.stop(), null == (e = this.sparkExplosive) || e.stop())
                    }, e
                }(C),
                Sn = Tn,
                Mn = n(83),
                wn = n.n(Mn),
                xn = n(56),
                Cn = n.n(xn),
                In = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i) || this).placementArea = void 0, r.areaRect = void 0, r.scene = void 0, r.rowId = void 0, r.colId = void 0, r.isTaken = void 0, r.scene = e, r.createAreaRect(a), r.createPlacementArea(a), r.addEventListener(), r.scene.add.existing((0, u.default)(r)), r.setDepth(d.default.FIELD_SQUARE), r
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createPlacementArea = function (t) {
                        this.placementArea = this.scene.add.zone(0, 0, t, t), this.add(this.placementArea)
                    }, n.createAreaRect = function (t) {
                        this.areaRect = this.scene.add.rectangle(0, 0, t, t, 16368767, 1), this.add(this.areaRect), this.areaRect.setDepth(d.default.FIELD_SQUARE_RECT)
                    }, n.updateAreaRect = function (t) {
                        this.areaRect.setFillStyle(t)
                    }, n.setSquarePosition = function (t, e) {
                        this.rowId = t, this.colId = e, this.isTaken = !1
                    }, n.setTaken = function (t) {
                        this.isTaken = t
                    }, n.addEventListener = function () {
                        this.placementArea.setInteractive({
                            useHandCursor: !0
                        }), this.placementArea.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, (function () {}))
                    }, e
                }(Phaser.GameObjects.Container),
                bn = In,
                Rn = [{
                    KEY: "background_tree",
                    BG_EXTENSION_COLOR: 8102725,
                    SQUARE_COLOR: 11452994,
                    SQUARE_HIGHT_LIGHT_COLOR: 9692964,
                    SQUARE_HIGHT_LIGHT_BORDER_COLOR: 14089889
                }, {
                    KEY: "background_desert",
                    BG_EXTENSION_COLOR: 16761714,
                    SQUARE_COLOR: 16368767,
                    SQUARE_HIGHT_LIGHT_COLOR: 16766227,
                    SQUARE_HIGHT_LIGHT_BORDER_COLOR: 16773290
                }, {
                    KEY: "background_ice",
                    BG_EXTENSION_COLOR: 15330021,
                    SQUARE_COLOR: 13952244,
                    SQUARE_HIGHT_LIGHT_COLOR: 6402815,
                    SQUARE_HIGHT_LIGHT_BORDER_COLOR: 16777215
                }, {
                    KEY: "background_crystal",
                    BG_EXTENSION_COLOR: 3224690,
                    SQUARE_COLOR: 5792413,
                    SQUARE_HIGHT_LIGHT_COLOR: 6195962,
                    SQUARE_HIGHT_LIGHT_BORDER_COLOR: 11848191
                }, {
                    KEY: "background_volcano",
                    BG_EXTENSION_COLOR: 13383207,
                    SQUARE_COLOR: 7886462,
                    SQUARE_HIGHT_LIGHT_COLOR: 12016072,
                    SQUARE_HIGHT_LIGHT_BORDER_COLOR: 15310583
                }],
                Pn = n(60),
                _n = M.STATUS,
                kn = Pn.default.LEVEL_PROGRESS,
                Ln = 30.5,
                Dn = 158,
                On = 30.5,
                Nn = -246,
                Un = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.fieldBackground = void 0, n.playerPlacementSquares = void 0, n.enemyPlacementSquares = void 0, n.firstHightLineZone = void 0, n.secondHightLineZone = void 0, n.fieldBackgroundExtension = void 0, n.scene = e, n.enemyPlacementSquares = [], n.playerPlacementSquares = [], n.createBattlefield(), n.createHightLineZone(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        t.prototype.init.call(this), this.updateField(), this.resetPlacementSquareStatus()
                    }, n.start = function () {
                        this.isRunning() || (this.showPlacementSquares(), this.setState(_n.RUNNING))
                    }, n.updateField = function () {
                        var t = this.getCurrentLevel(),
                            e = this.getBgData(t);
                        this.updateFieldBackground(e), this.updatePlacementSquares(e), this.updateHightLightSquares(e)
                    }, n.getCurrentLevel = function () {
                        var t = this.scene.levelManager.currentLevelData,
                            e = void 0 === t ? null : t,
                            n = e ? e.level_id : 1;
                        if (!e) {
                            var i = this.scene.player.getCustomData(kn);
                            i && (n = i > 0 ? i + 1 : 1)
                        }
                        return n
                    }, n.getBgData = function (t) {
                        var e = Math.floor(t / 10) % wn()(Rn).length,
                            n = Rn[e];
                        return this.scene.textures.exists(n.KEY) ? n : Rn[0]
                    }, n.updateFieldBackground = function (t) {
                        this.fieldBackground.setTexture(t.KEY), this.fieldBackgroundExtension.setFillStyle(t.BG_EXTENSION_COLOR)
                    }, n.updatePlacementSquares = function (t) {
                        this.playerPlacementSquares.forEach((function (e) {
                            e.updateAreaRect(t.SQUARE_COLOR)
                        })), this.enemyPlacementSquares.forEach((function (e) {
                            e.updateAreaRect(t.SQUARE_COLOR)
                        }))
                    }, n.updateHightLightSquares = function (t) {
                        this.firstHightLineZone.setFillStyle(t.SQUARE_HIGHT_LIGHT_COLOR), this.firstHightLineZone.setStrokeStyle(2, t.SQUARE_HIGHT_LIGHT_BORDER_COLOR), this.secondHightLineZone.setFillStyle(t.SQUARE_HIGHT_LIGHT_COLOR), this.secondHightLineZone.setStrokeStyle(2, t.SQUARE_HIGHT_LIGHT_BORDER_COLOR)
                    }, n.createHightLineZone = function () {
                        var t = this.fieldBackground,
                            e = t.displayWidth,
                            n = t.scale * this.scene.world.getPixelRatio(),
                            i = e - 2 * (Ln * n);
                        this.firstHightLineZone = this.scene.add.rectangle(0, 0, i / 5, i / 5, 16777215, 1), this.firstHightLineZone.setStrokeStyle(2, 16776960), this.firstHightLineZone.setDepth(d.default.FIELD_SQUARE_RECT), this.firstHightLineZone.kill(), this.secondHightLineZone = this.scene.add.rectangle(0, 0, i / 5, i / 5, 16777215, 1), this.secondHightLineZone.setStrokeStyle(2, 16776960), this.secondHightLineZone.setDepth(d.default.FIELD_SQUARE), this.secondHightLineZone.kill()
                    }, n.createBattlefield = function () {
                        var t = this.getCurrentLevel(),
                            e = this.getBgData(t);
                        this.createFieldBackground(e), this.createPlacementSquares(e)
                    }, n.createFieldBackground = function (t) {
                        this.createBackground(t.KEY), this.handleBackgroundTopOffset(), this.createBackgroundExtension(t.BG_EXTENSION_COLOR)
                    }, n.createBackground = function (t) {
                        var e = this.scene.gameZone.displayWidth;
                        this.fieldBackground = this.scene.make.image({
                            key: t
                        }), this.fieldBackground.setOrigin(0, 1), this.fieldBackground.setScale(e / this.fieldBackground.width), this.fieldBackground.setDepth(d.default.FIELD_BACKGROUND)
                    }, n.handleBackgroundTopOffset = function () {
                        var t = this.scene.gameZone.displayHeight,
                            e = 50 - (Dn - (this.fieldBackground.displayHeight - t));
                        e < 0 && (e = 0), this.fieldBackground.setPosition(0, t + e)
                    }, n.createBackgroundExtension = function (t) {
                        var e = this.scene.gameZone,
                            n = e.displayWidth,
                            i = e.displayHeight,
                            a = this.fieldBackground.getBottomLeft();
                        this.fieldBackgroundExtension = this.scene.add.rectangle(a.x, a.y, n, i, t), this.fieldBackgroundExtension.setOrigin(0, 0)
                    }, n.createPlacementSquares = function (t) {
                        this.createPlayerPlacementSquares(t.SQUARE_COLOR), this.createEnemyPlacementSquares(t.SQUARE_COLOR)
                    }, n.createEnemyPlacementSquares = function (t) {
                        var e = this.fieldBackground,
                            n = e.displayWidth,
                            i = e.scale * this.scene.world.getPixelRatio(),
                            a = Ln * i,
                            r = Dn * i,
                            s = n - 2 * a,
                            o = this.fieldBackground.getTopLeft();
                        o.x += a, o.y += r;
                        for (var l = 1, c = 0; c < 3; c++)
                            for (var u = 0; u < 5; u++) {
                                var h = new bn(this.scene, o.x + u * s / 5 + s / 10, o.y + c * s / 5 + s / 10, s / 5);
                                h.updateAreaRect(t), h.setSquarePosition(c + 1, u + 1), h.setAlpha(l), l = 1 === l ? 0 : 1, this.enemyPlacementSquares.push(h)
                            }
                    }, n.createPlayerPlacementSquares = function (t) {
                        var e = this.fieldBackground,
                            n = e.displayWidth,
                            i = e.scale * this.scene.world.getPixelRatio(),
                            a = On * i,
                            r = Nn * i,
                            s = n - 2 * a,
                            o = this.fieldBackground.getBottomLeft();
                        o.x += a, o.y += r;
                        for (var l = 1, c = 0; c < 3; c++)
                            for (var u = 0; u < 5; u++) {
                                var h = new bn(this.scene, o.x + u * s / 5 + s / 10, o.y - c * s / 5 - s / 10, s / 5);
                                h.updateAreaRect(t), h.setSquarePosition(3 - c, u + 1), h.setAlpha(l), l = 1 === l ? 0 : 1, this.playerPlacementSquares.push(h)
                            }
                    }, n.hidePlacementSquares = function () {
                        this.playerPlacementSquares.forEach((function (t) {
                            return t.kill()
                        })), this.enemyPlacementSquares.forEach((function (t) {
                            return t.kill()
                        }))
                    }, n.showPlacementSquares = function () {
                        this.playerPlacementSquares.forEach((function (t) {
                            return t.revive()
                        })), this.enemyPlacementSquares.forEach((function (t) {
                            return t.revive()
                        }))
                    }, n.getPlayerPlacementSquare = function (t, e) {
                        var n;
                        return Cn()(n = this.playerPlacementSquares).call(n, (function (n) {
                            return n.rowId === t && n.colId === e
                        }))[0]
                    }, n.getEnemyPlacementSquare = function (t, e) {
                        var n;
                        return Cn()(n = this.enemyPlacementSquares).call(n, (function (n) {
                            return n.rowId === t && n.colId === e
                        }))[0]
                    }, n.getSquareBasedOnPosition = function (t, e) {
                        for (var n = 0; n < this.playerPlacementSquares.length; n++) {
                            var i = this.playerPlacementSquares[n];
                            if (i.placementArea.getBounds().contains(t, e)) return i
                        }
                        return null
                    }, n.getSquareBasedOnIndex = function (t, e) {
                        for (var n = 0; n < this.playerPlacementSquares.length; n++) {
                            var i = this.playerPlacementSquares[n];
                            if (i.rowId === t && i.colId === e) return i
                        }
                        return null
                    }, n.tryGettingAvailablePlacement = function (t, e) {
                        var n = this.getSquareBasedOnIndex(t, e);
                        return n && !n.isTaken ? n : null
                    }, n.getAvailablePlacement = function () {
                        for (var t = null, e = 0; e < this.playerPlacementSquares.length; e++) {
                            var n = this.playerPlacementSquares[e];
                            if (!n.isTaken) return t = n
                        }
                        return t
                    }, n.resetPlacementSquareStatus = function () {
                        this.playerPlacementSquares.forEach((function (t) {
                            return t.isTaken = !1
                        }))
                    }, n.getRemainingAvailablePlacement = function () {
                        var t;
                        return Cn()(t = this.playerPlacementSquares).call(t, (function (t) {
                            return !t.isTaken
                        })).length
                    }, e
                }(C),
                Bn = Un,
                Fn = n(448),
                Gn = n.n(Fn),
                Hn = M.STATUS,
                Vn = ze.default.MELEE_UNIT_TYPE,
                Yn = ze.default.RANGED_UNIT_TYPE,
                Wn = Pn.default.LEVEL_PROGRESS,
                Kn = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.playerLevel = void 0, n.currentLevelId = void 0, n.currentLevelData = void 0, n.enemyData = void 0, n.playerData = void 0, n.scene = e, n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        var t = this.scene.gameMode;
                        this.enemyData = [], t === c.default.NORMAL && (this.updatePlayerLevel(), this.loadLevel()), t === c.default.BATTLE && (this.createBattleOpponentData(), this.setBattleOpponentLevel())
                    }, n.start = function () {
                        this.isRunning() || this.setState(Hn.RUNNING)
                    }, n.setCurrentLevelId = function (t) {
                        this.currentLevelId = t
                    }, n.updatePlayerLevel = function () {
                        var t = this.scene.player.getCustomData(Wn),
                            e = t && GameCore.Utils.Valid.isNumber(t) && t > 0;
                        this.playerLevel = e ? t : 0
                    }, n.loadLevel = function () {
                        try {
                            if (this.scene.game.cache.json.exists("level-builder-json")) return void this.loadLevelBuilderLevel();
                            this.setCurrentLevelId(this.playerLevel ? this.playerLevel + 1 : 1);
                            var t = this.playerLevel ? this.playerLevel : 0,
                                e = 100 * Math.floor(t / 100) + 1,
                                n = e + 99,
                                i = (1e4 + e).toString().substring(1),
                                a = (1e4 + n).toString().substring(1),
                                r = this.scene.cache.json.get("levels-" + i + "-" + a),
                                s = this.currentLevelId - e;
                            s >= r.levels.length && this.setCurrentLevelId(r.levels.length - 1), this.currentLevelData = r.levels[s], this.createEnemyData()
                        } catch (o) {}
                    }, n.createEnemyData = function () {
                        var t = this;
                        this.currentLevelData.enemy_row1.split("-").forEach((function (e, n) {
                            if ("0" !== e) {
                                var i = "m" === e.charAt(0) ? Vn : Yn,
                                    a = rn()(e.substring(1)),
                                    r = n + 1;
                                t.enemyData.push({
                                    type: i,
                                    level: a,
                                    positionRow: 1,
                                    positionColumn: r
                                })
                            }
                        })), this.currentLevelData.enemy_row2.split("-").forEach((function (e, n) {
                            if ("0" !== e) {
                                var i = "m" === e.charAt(0) ? Vn : Yn,
                                    a = rn()(e.substring(1)),
                                    r = n + 1;
                                t.enemyData.push({
                                    type: i,
                                    level: a,
                                    positionRow: 2,
                                    positionColumn: r
                                })
                            }
                        })), this.currentLevelData.enemy_row3.split("-").forEach((function (e, n) {
                            if ("0" !== e) {
                                var i = "m" === e.charAt(0) ? Vn : Yn,
                                    a = rn()(e.substring(1)),
                                    r = n + 1;
                                t.enemyData.push({
                                    type: i,
                                    level: a,
                                    positionRow: 3,
                                    positionColumn: r
                                })
                            }
                        }))
                    }, n.createBattleOpponentData = function () {
                        var t, e = this,
                            n = this.scene.game.battle.getOpponentInfo();
                        if (n) {
                            var i = n.unitData;
                            this.enemyData = [], Gn()(t = i.split("/")).call(t).forEach((function (t, n) {
                                t.split("-").forEach((function (t, i) {
                                    if ("0" !== t) {
                                        var a = "m" === t.charAt(0) ? Vn : Yn,
                                            r = rn()(t.substring(1)),
                                            s = n + 1,
                                            o = i + 1;
                                        e.enemyData.push({
                                            type: a,
                                            level: r,
                                            positionRow: s,
                                            positionColumn: o
                                        })
                                    }
                                }))
                            }))
                        }
                    }, n.setBattleOpponentLevel = function () {
                        var t = this.scene.game.battle.getOpponentInfo();
                        if (t) {
                            var e = t.playerLevel;
                            this.currentLevelId = e
                        } else this.currentLevelId = 1
                    }, n.loadLevelBuilderLevel = function () {
                        var t = this.scene.cache.json.get("level-builder-json");
                        this.currentLevelId = t.level_id;
                        try {
                            this.currentLevelData = t
                        } catch (e) {}
                        this.createData()
                    }, n.createData = function () {
                        this.createEnemyData(), this.createPlayerData()
                    }, n.createPlayerData = function () {
                        var t = this;
                        this.playerData = [];
                        var e = this.currentLevelData;
                        if (e) {
                            var n = new Ke.default(e.coins.baseValue, e.coins.suffix, !0);
                            this.scene.coin.receiveCoins(n.baseValue, n.suffix), e.player_row1.split("-").forEach((function (e, n) {
                                if ("0" !== e) {
                                    var i = "m" === e.charAt(0) ? Vn : Yn,
                                        a = rn()(e.substring(1)),
                                        r = n + 1;
                                    t.playerData.push({
                                        type: i,
                                        level: a,
                                        positionRow: 1,
                                        positionColumn: r
                                    })
                                }
                            })), e.player_row2.split("-").forEach((function (e, n) {
                                if ("0" !== e) {
                                    var i = "m" === e.charAt(0) ? Vn : Yn,
                                        a = rn()(e.substring(1)),
                                        r = n + 1;
                                    t.playerData.push({
                                        type: i,
                                        level: a,
                                        positionRow: 2,
                                        positionColumn: r
                                    })
                                }
                            })), e.player_row3.split("-").forEach((function (e, n) {
                                if ("0" !== e) {
                                    var i = "m" === e.charAt(0) ? Vn : Yn,
                                        a = rn()(e.substring(1)),
                                        r = n + 1;
                                    t.playerData.push({
                                        type: i,
                                        level: a,
                                        positionRow: 3,
                                        positionColumn: r
                                    })
                                }
                            }))
                        }
                    }, n.isInLevelBuilderLevel = function () {
                        return this.scene.gameMode === c.default.NORMAL && GameCore.Utils.Object.hasOwn(this.currentLevelData, "player_row1")
                    }, n.updateHighestCurrentLevel = function () {
                        this.isInLevelBuilderLevel() || this.playerLevel < this.currentLevelId && this.scene.player.setCustomData(Wn, this.currentLevelId)
                    }, n.getCurrentLevelId = function () {
                        return this.currentLevelId
                    }, n.getModifierLevel = function () {
                        var t = this.scene.gameMode;
                        if (t === c.default.NORMAL) return this.currentLevelId;
                        if (t === c.default.BATTLE) {
                            var e = this.scene.player.getCustomData(Wn);
                            return GameCore.Utils.Valid.isNumber(e) ? Math.min(this.currentLevelId, e + 1) : 1
                        }
                        throw new Error("Case not implemented.")
                    }, n.getPlayerLevel = function () {
                        if (this.isInLevelBuilderLevel()) return this.currentLevelId;
                        var t = this.scene.player.getCustomData(Wn);
                        return GameCore.Utils.Valid.isNumber(t) ? t + 1 : 1
                    }, n.loadAllLevels = function () {
                        var t = this;
                        this.scene.cache.json.get("levels").levels.forEach((function (e, n) {
                            t.currentLevelData = e, t.createEnemyData()
                        }))
                    }, e
                }(C),
                zn = Kn,
                Xn = n(320),
                jn = n.n(Xn),
                qn = {
                    FREE_COINS: {
                        ID: "free-coins"
                    }
                },
                Zn = n(592),
                Qn = function (t) {
                    function e(e) {
                        return t.call(this, e) || this
                    }
                    return (0, a.default)(e, t), e.prototype.createConfigOne = function (t, e, n) {
                        var i = this,
                            a = t / 300,
                            r = new Phaser.Math.Vector2(0, 0),
                            s = new Phaser.Math.Vector2(0, -t),
                            o = n ? -1 : 1,
                            l = Phaser.Math.RND.between(-90, 90),
                            c = (l + 90) / 180 * 180 * (l < 0 ? 1 : (300 - Math.abs(l)) / 300) * a,
                            u = Phaser.Math.RND.between(20, c + 20),
                            h = new Phaser.Math.Vector2(1, 0);
                        h.setAngle(l * Math.PI / 180);
                        var d = Phaser.Math.RND.between(-Math.abs(l) - 15, 15 - Math.abs(l)),
                            f = u * (100 - Math.abs(l)) / 100 * a,
                            p = Phaser.Math.RND.between(.2 * f, f),
                            g = new Phaser.Math.Vector2(1, 0);
                        g.setAngle(d * Math.PI / 180);
                        var v = o * h.x * u,
                            m = h.y * u,
                            E = o * g.x * p,
                            y = g.y * p - t,
                            A = new Phaser.Math.Vector2(v, m),
                            T = new Phaser.Math.Vector2(E, y),
                            S = new Phaser.Curves.CubicBezier(r, A, T, s),
                            M = Phaser.Math.RND.between(750 + 3 * u, 1e3 + 3 * u),
                            w = this.coinGroup.get(0, 0);
                        return w.revive(), w.setRotation(-e.rotation), w.setWorldSize(24, 22), e.add(w), {
                            from: 0,
                            to: 1,
                            duration: M,
                            ease: "Sine.In",
                            onUpdate: function (t) {
                                var e = S.getPointAt(t.getValue());
                                w.setPosition(e.x, e.y)
                            },
                            onComplete: function (t) {
                                if (w.kill(), !(t.totalProgress < 1) && (i.scene.audio.playSound(pn.default.DIAMONDS_EAT), !i.startsExplosiveSmallTimer || i.startsExplosiveSmallTimer.hasDispatched)) {
                                    i.startsExplosiveSmallTimer = i.scene.time.delayedCall(100, (function () {
                                        return null
                                    }));
                                    var e = w.getWorldPosition();
                                    i.startsExplosiveSmall.explode(10, e.x, e.y)
                                }
                            }
                        }
                    }, e
                }(Zn.default),
                Jn = Qn,
                $n = n(595),
                ti = n(341),
                ei = function (t) {
                    function e(e, n, i, a, r, s) {
                        var o;
                        return (o = t.call(this, e) || this).scene = void 0, o.id = void 0, o.isActive = void 0, o.isDisabled = void 0, o.zone = void 0, o.icon = void 0, o.parentName = void 0, o.activeItem = function () {
                            !0 !== o.isActive && (!0 !== o.isDisabled && (o.isActive = !0, o.icon.setTint(2927998), o.scene.powerManager.isStopped() || (o.scene.audio.playSound(pn.default.BUTTON_CLICK), o.activeLogic())))
                        }, o.deactivateItem = function () {
                            !1 !== o.isActive && (o.isActive = !1, o.icon.setTint(3487029), o.scene.powerManager.isStopped() || o.deactivateLogic())
                        }, o.handleOnClick = function () {
                            o.logItemEvent(), o.scene.powerManager.activeItem(o.id)
                        }, o.id = n, o.scene = e, o.createIcon(i, a, r, s), o.setSize(r, s), o.createInput(), o.setDepth(d.default.ITEM), o.scene.add.existing((0, u.default)(o)), o
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.enableItem = function () {
                        !1 !== this.isDisabled && (this.icon.setAlpha(1), this.isDisabled = !1)
                    }, n.disableItem = function () {
                        !0 !== this.isDisabled && (this.deactivateItem(), this.icon.setAlpha(.4), this.isDisabled = !0)
                    }, n.createIcon = function (t, e, n, i) {
                        this.icon = this.scene.make.image({
                            key: t,
                            frame: e
                        }, !1), this.icon.setWorldSize(n, i), this.add(this.icon)
                    }, n.createInput = function () {
                        var t = this.icon,
                            e = t.displayWidth,
                            n = t.displayHeight;
                        this.zone = this.scene.make.zone({
                            width: e,
                            height: n
                        }), this.add(this.zone), Phaser.Display.Align.In.Center(this.zone, this.icon), this.zone.setInteractive({
                            useHandCursor: !0
                        }), this.zone.on(Phaser.Input.Events.GAMEOBJECT_POINTER_UP, this.handleOnClick)
                    }, n.logItemEvent = function () {
                        var t = this.getParentName(),
                            e = this.name;
                        this.scene.analytics.event(ti.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: e,
                            screen_name: t
                        })
                    }, n.getParentName = function () {
                        if (this.parentName) return this.parentName;
                        for (var t = this.parentContainer; t;) {
                            if (t instanceof GameCore.Screen) {
                                var e = t;
                                return this.parentName = e.getScreenName(), this.parentName
                            }
                            t = t.parentContainer
                        }
                        return this.parentName = this.scene.getSceneName(), this.parentName
                    }, e
                }(Phaser.GameObjects.Container),
                ni = ei,
                ii = h.default.GAMEPLAY,
                ai = ii.KEY,
                ri = ii.FRAME,
                si = qn.FREE_COINS.ID,
                oi = GameCore.Configs.Gameplay.Powers.FreeCoins.duration,
                li = Pn.default.FREE_GOLD_LAST_USED,
                ci = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, si, ai, ri.DASHBOARD_FREE_GOLD, n, i) || this).scene = void 0, a.lastUsedTime = void 0, a.collectText = void 0, a.remainingTimeText = void 0, a.glowEffect = void 0, a.timer = void 0, a.moveTween = void 0, a.sparkleEffect = void 0, a.remainingTime = void 0, a.activeItem = function () {
                            !0 !== a.isActive && (!0 !== a.isDisabled && (a.isActive = !0, a.scene.powerManager.isStopped() || (a.scene.audio.playSound(pn.default.BUTTON_CLICK), a.activeLogic())))
                        }, a.deactivateItem = function () {
                            !1 !== a.isActive && (a.isActive = !1, a.scene.powerManager.isStopped() || a.deactivateLogic())
                        }, a.rewardCoins = function () {
                            var t = Date.now();
                            a.scene.player.setCustomData(li, t), a.lastUsedTime = t;
                            var e = a.scene,
                                n = e.unitManager,
                                i = e.coinManager,
                                r = e.uiManager,
                                s = n.getPlayerMeleeSpawnedUnitsCount(),
                                o = n.getPlayerRangedSpawnedUnitsCount(),
                                l = i.getUnitPrice(s),
                                c = i.getUnitPrice(o),
                                u = Math.floor(2 * Math.random() + 3),
                                h = c.biggerThan(l) ? c : l;
                            h.multiply(u);
                            var f = new Jn(a.scene),
                                p = r.coinBar,
                                g = p.x,
                                v = p.y;
                            f.setDepth(d.default.ON_TOP), f.explode(10, a.x, a.y, g, v).forEach((function (t) {
                                t.once(Phaser.Tweens.Events.TWEEN_COMPLETE, (function () {
                                    var t = h.clone();
                                    t.divide(10), a.scene.coin.plusCoins(t.baseValue, t.suffix), a.scene.updateUI()
                                }))
                            })), a.scene.time.delayedCall(600, (function () {
                                a.scene.audio.playSound(pn.default.COIN_INCREASE_REPEATEDLY_SOUND)
                            })), a.disableItem(), a.startCountdown()
                        }, a.scene = e, a.setName("FreeCoinsItem"), a.createGlowEffect(), a.createCollectText(), a.createRemainingTimeText(), a.createSparkleEffect(), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.playSound = function () {
                        this.scene.audio.playSound(pn.default.COIN_SPAWN_SOUND)
                    }, n.createRemainingTimeText = function () {
                        this.remainingTimeText = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(13),
                            origin: {
                                x: .5,
                                y: 1
                            }
                        }), this.remainingTimeText.setVisible(!1), this.add(this.remainingTimeText), this.bringToTop(this.remainingTimeText), Phaser.Display.Align.In.BottomCenter(this.remainingTimeText, this.icon, 0, -5)
                    }, n.createCollectText = function () {
                        this.collectText = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(13),
                            origin: {
                                x: .5,
                                y: 1
                            },
                            text: "Collect"
                        }), this.collectText.setVisible(!1), this.add(this.collectText), this.bringToTop(this.collectText), Phaser.Display.Align.In.BottomCenter(this.collectText, this.icon, 0, -5)
                    }, n.createGlowEffect = function () {
                        this.glowEffect = this.scene.add.image(0, 0, ai, ri.DASHBOARD_FREE_GOLD_GLOW), this.glowEffect.setOrigin(.5, .5), this.glowEffect.setVisible(!1), this.glowEffect.setWorldSize(107.5, 104.8), this.add(this.glowEffect), this.moveDown(this.glowEffect), this.moveUp(this.icon), Phaser.Display.Align.In.Center(this.glowEffect, this, 1, 0)
                    }, n.createSparkleEffect = function () {
                        this.sparkleEffect = new $n.default(this.scene), this.sparkleEffect.setDepth(d.default.ON_TOP)
                    }, n.enableItem = function () {
                        this.visible && !1 !== this.isDisabled && (this.isDisabled = !1, this.zone.setInteractive(), this.setAvailable(!0))
                    }, n.activeLogic = function () {
                        this.rewardCoins()
                    }, n.disableItem = function () {
                        !0 !== this.isDisabled && (this.zone.disableInteractive(), this.setAvailable(!1), this.isDisabled = !0)
                    }, n.deactivateLogic = function () {
                        this.stopTimer()
                    }, n.startCountdown = function () {
                        this.stopTimer(), this.initRemainingWaitTime(), 0 != this.remainingTime ? this.startTimer() : this.enableItem()
                    }, n.startTimer = function () {
                        var t = this;
                        this.setRemainingTime(this.remainingTime), this.disableItem(), this.timer = this.scene.time.addEvent({
                            delay: 1e3,
                            callback: function () {
                                t.remainingTime -= 1e3, t.remainingTime < 1e3 ? (t.enableItem(), t.stopTimer()) : (t.setRemainingTime(t.remainingTime), t.disableItem())
                            },
                            loop: !0
                        })
                    }, n.stopTimer = function () {
                        var t;
                        null == (t = this.timer) || t.remove()
                    }, n.initRemainingWaitTime = function () {
                        if (!this.lastUsedTime) {
                            var t = this.scene.player.getCustomData(li);
                            this.lastUsedTime = "number" === typeof t ? t : -1
                        }
                        if (this.lastUsedTime < 0) this.remainingTime = 0;
                        else {
                            var e = Date.now(),
                                n = oi - (e - this.lastUsedTime);
                            this.remainingTime = n > 0 ? n : 0
                        }
                    }, n.setAvailable = function (t) {
                        this.collectText.setVisible(t), this.remainingTimeText.setVisible(!t), this.glowEffect.setVisible(t), this.icon.setFrame(t ? ri.DASHBOARD_FREE_GOLD : ri.DASHBOARD_FREE_GOLD_OFF), t ? (this.setVisible(!0), this.runMoveTween()) : (this.stopMoveTween(), this.sparkleEffect.stop())
                    }, n.setRemainingTime = function (t) {
                        var e = Math.floor(t / 1e3),
                            n = Math.floor(e / 60),
                            i = e % 60,
                            a = i < 10 ? "0" + i : i.toString();
                        this.remainingTimeText.setText(n + ":" + a)
                    }, n.runMoveTween = function () {
                        var t = this;
                        this.stopMoveTween();
                        var e = this.x,
                            n = this.y;
                        this.moveTween = this.scene.tweens.add({
                            targets: [this],
                            duration: 1e3,
                            yoyo: !0,
                            repeat: -1,
                            ease: Phaser.Math.Easing.Sine.InOut,
                            props: {
                                y: "+=5"
                            },
                            onStop: function () {
                                t.setPosition(e, n)
                            }
                        })
                    }, n.stopMoveTween = function () {
                        var t, e;
                        null == (t = this.moveTween) || t.stop(), null == (e = this.moveTween) || e.remove()
                    }, n.setVisible = function (e) {
                        return e || this.sparkleEffect.stop(), e && this.remainingTime < 1e3 && this.sparkleEffect.run(1, this.x, this.y - 2.5, this.width, this.height + 5), t.prototype.setVisible.call(this, e)
                    }, e
                }(ni),
                ui = ci,
                hi = M.STATUS,
                di = GameCore.Configs.Gameplay.Powers.FreeCoins.enable,
                fi = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.freeCoinsItem = void 0, n.items = {}, n.itemActive = void 0, n.activeItem = function (t) {
                            n.isRunning() && n.items[t] && (n.deactivateItems(), n.itemActive = t, n.items[t].activeItem())
                        }, n.deactivateItem = function (t) {
                            n.items[t] && (n.itemActive = "", n.items[t].deactivateItem())
                        }, n.scene = e, n.createItems(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.setState(hi.READY), this.deactivateItems(), this.freeCoinsItem.startCountdown()
                    }, n.stop = function () {
                        this.isRunning() && (this.deactivateItems(), this.setState(hi.STOPPED))
                    }, n.deactivateItems = function () {
                        for (var t in this.items) this.deactivateItem(t)
                    }, n.createItems = function () {
                        this.createFreeCoinsButton()
                    }, n.createFreeCoinsButton = function () {
                        if (di) {
                            var t = this.scene.gameZone;
                            this.freeCoinsItem = new ui(this.scene, 47, 50), Phaser.Display.Align.In.TopRight(this.freeCoinsItem, t, -5, -45), this.items[qn.FREE_COINS.ID] = this.freeCoinsItem
                        }
                    }, n.getItems = function () {
                        return jn()(this.items)
                    }, e
                }(C),
                pi = fi,
                gi = n(114),
                vi = n.n(gi),
                mi = ze.default.UNIT_SIZE_SCALE,
                Ei = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.isDirtyDepth = void 0, n.spineUnits = [], n.spineContainer = void 0, n.scene = e, n.isDirtyDepth = !1, n.spineUnits = [], n.spineContainer = n.scene.add.spineContainer(0, 0), n.spineContainer.setDepth(d.default.MANAGER_BASE_DEPTH), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        t.prototype.init.call(this), this.spineUnits = [], this.spineContainer.removeAll()
                    }, n.update = function (t) {
                        var e = this;
                        this.isRunning() && (this.spineUnits.forEach((function (t) {
                            var n = t.getSpineDisplay();
                            if (n) {
                                n.depth !== t.depth && (n.setDepth(t.depth), e.isDirtyDepth = !0);
                                var i = t.getWorldPosition(),
                                    a = i.x,
                                    r = i.y;
                                n.setPosition(a, r + 25)
                            }
                        })), t && this.isDirtyDepth && this.sortSpineContainerByDepth())
                    }, n.sortSpineContainerByDepth = function () {
                        var t;
                        vi()(t = this.spineContainer).call(t, "depth", (function (t, e) {
                            return t.depth - e.depth
                        }))
                    }, n.sortSpineContainerByName = function () {
                        var t;
                        vi()(t = this.spineContainer).call(t, "name", (function (t, e) {
                            return t.name.localeCompare(e.name)
                        }))
                    }, n.sortSpineContainerByLevel = function () {
                        var t;
                        vi()(t = this.spineContainer).call(t, "level", (function (t, e) {
                            return t.level - e.level
                        }))
                    }, n.addSpines = function (t) {
                        var e = this;
                        this.isRunning() && t.forEach((function (t) {
                            if (!e.spineUnits.some((function (e) {
                                    return e === t
                                }))) {
                                var n = t.getSpineDisplay();
                                n && (n instanceof Phaser.GameObjects.Sprite || (n.level = t.level, t.display.setSpineScale(.5 * mi, .5 * mi), e.spineUnits.push(t), e.spineContainer.add(n)))
                            }
                        }))
                    }, n.removeSpine = function (t) {
                        var e, n = t.getSpineDisplay();
                        n && (this.spineUnits = Cn()(e = this.spineUnits).call(e, (function (e) {
                            return e !== t
                        })), this.spineContainer.remove(n, !1))
                    }, n.bringToTopOnDrag = function (t) {
                        var e = t.getSpineDisplay();
                        e && this.spineContainer.bringToTop(e)
                    }, n.hideAllSpines = function () {
                        this.spineContainer.setActive(!1), this.spineContainer.setVisible(!1)
                    }, n.showAllSpines = function () {
                        this.spineContainer.setActive(!0), this.spineContainer.setVisible(!0)
                    }, e
                }(C),
                yi = Ei,
                Ai = n(597),
                Ti = n(603),
                Si = n(323),
                Mi = n(466),
                wi = n(325),
                xi = function () {
                    function t(t) {
                        this.scene = void 0, this.currentState = void 0, this.scene = t
                    }
                    var e = t.prototype;
                    return e.init = function () {
                        this.currentState || (this.currentState = new Si.default(this.scene)), this.currentState.levelLoading()
                    }, e.changeStateTo = function (t) {
                        this.currentState = t
                    }, e.isInReadyState = function () {
                        return this.currentState instanceof wi.default
                    }, e.isInPlayingState = function () {
                        return this.currentState instanceof Mi.default
                    }, e.isInLevelLoadingState = function () {
                        return this.currentState instanceof Si.default
                    }, e.isInLevelFailState = function () {
                        return this.currentState instanceof Ti.default
                    }, e.isInLevelCompleteState = function () {
                        return this.currentState instanceof Ai.default
                    }, e.ready = function () {
                        this.currentState.ready()
                    }, e.play = function () {
                        this.currentState.play()
                    }, e.levelFail = function () {
                        this.currentState.levelFail()
                    }, e.levelComplete = function () {
                        this.currentState.levelComplete()
                    }, e.levelLoading = function () {
                        this.currentState.levelLoading()
                    }, e.quit = function () {
                        this.currentState.quit()
                    }, e.update = function () {
                        this.currentState.update()
                    }, t
                }(),
                Ci = xi,
                Ii = n(195),
                bi = n(115),
                Ri = n(57),
                Pi = n(32),
                _i = n(604),
                ki = n(613),
                Li = n(614),
                Di = n(615),
                Oi = n(617),
                Ni = n(618),
                Ui = n(620),
                Bi = n(621),
                Fi = n(624),
                Gi = n(626),
                Hi = n(602),
                Vi = n(586),
                Yi = n(344),
                Wi = n(66),
                Ki = {
                    targets: [],
                    repeat: 3,
                    duration: 33,
                    ease: Phaser.Math.Easing.Linear,
                    props: {
                        angle: 5
                    },
                    yoyo: !0
                },
                zi = function (t) {
                    function e(e) {
                        var n, i, a;
                        return (a = t.call(this, Ki, e) || this).targetAngle = void 0, a.shakeAmount = void 0, a.handleSwitchPosition = function () {
                            var t;
                            a.shakeAmount *= -.7, null == (t = a.tween) || t.updateTo("angle", a.targetAngle + a.shakeAmount)
                        }, null != (n = a.config) && n.props ? (a.targetAngle = a.config.targets[0].angle, a.shakeAmount = a.config.props.angle - a.targetAngle, null == (i = a.tween) || i.on(Phaser.Tweens.Events.TWEEN_REPEAT, a.handleSwitchPosition), a) : (0, u.default)(a)
                    }
                    return (0, a.default)(e, t), e
                }(Wi.default),
                Xi = zi,
                ji = n(92),
                qi = function (t) {
                    function e(e, n, i, a, r) {
                        var s;
                        return (s = t.call(this, e, n, i, a, r) || this).shakeAnim = void 0, s
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createShakeAnim = function () {
                        var t;
                        null == (t = this.shakeAnim) || t.remove(), this.shakeAnim = new Xi({
                            targets: [this],
                            repeat: 6,
                            duration: 50,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            props: {
                                angle: -20
                            }
                        })
                    }, n.runAnimation = function () {
                        this.createShakeAnim(), this.shakeAnim.play(), (0, ji.default)(50)
                    }, n.stopAnimation = function () {
                        this.shakeAnim && this.shakeAnim.remove(), this.angle = 0
                    }, e
                }(Ri.default),
                Zi = qi,
                Qi = {
                    targets: [],
                    yoyo: !0,
                    repeat: -1,
                    duration: 120,
                    ease: Phaser.Math.Easing.Circular.Out,
                    props: {
                        scale: {
                            from: 1,
                            to: 1.3
                        }
                    }
                },
                Ji = function (t) {
                    function e(e) {
                        return t.call(this, Qi, e) || this
                    }
                    return (0, a.default)(e, t), e
                }(Wi.default),
                $i = Ji,
                ta = n(467),
                ea = n(202),
                na = h.default.GAMEPLAY,
                ia = na.KEY,
                aa = na.FRAME,
                ra = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, ia, aa.DASHBOARD_START_BTN, 159, 63) || this).heartAnim = void 0, n.setName("StartFight"), n.createText(), n.runHeartAnimation(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createText = function () {
                        var t = new ea.default(this.scene, {
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(22)
                        });
                        t.setText("START FIGHT"), t.setDropShadow(0, 2.5, 0), this.add(t), Phaser.Display.Align.In.Center(t, this, 0, -6)
                    }, n.runHeartAnimation = function () {
                        var t;
                        null == (t = this.heartAnim) || t.remove(), this.heartAnim = new $i({
                            targets: [this],
                            duration: 180,
                            ease: Phaser.Math.Easing.Sine.InOut,
                            props: {
                                scale: {
                                    from: 1,
                                    to: .95
                                }
                            }
                        }), this.heartAnim.play()
                    }, n.setDisabled = function (e) {
                        var n;
                        (t.prototype.setDisabled.call(this, e), e) ? null == (n = this.heartAnim) || n.stop(): this.runHeartAnimation()
                    }, n.runUpAnimation = function () {
                        var t, e, n, i = this; - 1 !== this.scaleUp && (null == (t = this.upAnimation) || t.remove(), this.upAnimation = new ta.default({
                            targets: [this],
                            duration: 150,
                            props: {
                                scale: this.scaleUp
                            },
                            onStart: function () {
                                var t;
                                i.scene.input.enabled = !1, null == (t = i.heartAnim) || t.stop()
                            },
                            onUpdate: function () {
                                i.hitZone.scale = 1 / i.scale
                            }
                        }), null == (e = this.upAnimation) || null == (n = e.tween) || n.once(Phaser.Tweens.Events.TWEEN_COMPLETE, (function () {
                            i.scene.input.enabled = !0, i.runHeartAnimation()
                        })), this.upAnimation.play())
                    }, e
                }(Ri.default),
                sa = n(132),
                oa = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, {
                            size: 38
                        }) || this).handleLoadComplete = function (t) {
                            if (n.scene) {
                                var e = n.payload.id;
                                if (e && e === t) {
                                    var i = e,
                                        a = n.scene.textures.get(i);
                                    a && a.key === i ? n.setPhoto(a.key) : n.setPhoto(sa.default.AVATAR.KEY)
                                }
                            }
                        }, n.avtFrame.kill(), n
                    }
                    return (0, a.default)(e, t), e
                }(n(347).default),
                la = h.default.GAMEPLAY,
                ca = la.KEY,
                ua = la.FRAME,
                ha = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).bg = void 0, i.avatar = void 0, i.level = void 0, i.setName("PlayerCard"), i.createAvatar(), i.createFrame(n), i.updateSize(), i.createLevelText(), i.scene.add.existing((0, u.default)(i)), i
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateData = function (t) {
                        var e = t.playerId,
                            n = t.playerPhoto,
                            i = t.playerLevel;
                        this.level.setText("Lv. " + i), this.avatar.loadPhoto(e, n)
                    }, n.createFrame = function (t) {
                        var e = t ? ua.DASHBOARD_AVATAR_FRAME_BLUE : ua.DASHBOARD_AVATAR_FRAME_RED,
                            n = this.scene.make.image({
                                key: ca,
                                frame: e
                            });
                        n.setName("bg"), n.setWorldSize(35.5, 48.5), this.add(n), this.bg = n
                    }, n.updateSize = function () {
                        this.setSize(this.bg.displayWidth, this.bg.displayHeight)
                    }, n.createAvatar = function () {
                        var t = new oa(this.scene);
                        t.setName("avatar"), t.setPosition(0, -4), this.add(t), this.avatar = t
                    }, n.createLevelText = function () {
                        var t = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(8),
                            text: "Lv. 1",
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setPosition(0, 14), this.add(t), this.level = t
                    }, e
                }(Phaser.GameObjects.Container),
                da = h.default.GAMEPLAY,
                fa = da.KEY,
                pa = da.FRAME,
                ga = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).playerFrame = void 0, n.opponentFrame = void 0, n.VS = void 0, n.createPlayerFrame(), n.createOpponentFrame(), n.createVS(), n.setDepth(d.default.BUTTON), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createPlayerFrame = function () {
                        this.playerFrame = new ha(this.scene, !0), this.playerFrame.setName("playerFrame"), this.add(this.playerFrame), this.playerFrame.setPosition(28, 0)
                    }, n.createOpponentFrame = function () {
                        this.opponentFrame = new ha(this.scene, !1), this.opponentFrame.setName("opponentFrame"), this.add(this.opponentFrame), this.opponentFrame.setPosition(-28, 0)
                    }, n.createVS = function () {
                        this.VS = this.scene.make.image({
                            key: fa,
                            frame: pa.DASHBOARD_VS
                        }), this.VS.setWorldSize(17, 14), this.VS.setName("VS"), this.add(this.VS)
                    }, n.updateData = function (t, e) {
                        t && this.playerFrame.updateData(t), e && this.opponentFrame.updateData(e)
                    }, e
                }(Phaser.GameObjects.Container),
                va = h.default.GAMEPLAY,
                ma = va.KEY,
                Ea = va.FRAME,
                ya = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).bar = void 0, n.coinText = void 0, n.createBar(), n.createText(), n.createCoinIcon(), n.setDepth(d.default.BUTTON), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createBar = function () {
                        this.bar = this.scene.make.image({
                            key: ma,
                            frame: Ea.DASHBOARD_COINBAR_BG
                        }), this.bar.setWorldSize(75, 24.5), this.add(this.bar)
                    }, n.createCoinIcon = function () {
                        var t = this.scene.make.image({
                            key: ma,
                            frame: Ea.DASHBOARD_COINBAR_COIN
                        });
                        this.add(t), t.setWorldSize(30.5, 31.5), Phaser.Display.Align.In.RightCenter(t, this, 55, 0)
                    }, n.createText = function () {
                        this.coinText = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(17),
                            origin: {
                                x: .5,
                                y: 0
                            }
                        }), this.add(this.coinText), Phaser.Display.Align.In.Center(this.coinText, this.bar, -5, -10)
                    }, n.setCoins = function (t) {
                        this.coinText.setText("" + t.toString())
                    }, e
                }(Phaser.GameObjects.Container),
                Aa = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).text = void 0, n.createText(), n.setDepth(d.default.BUTTON), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createText = function () {
                        this.text = new ea.default(this.scene, {
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(20)
                        }), this.text.setText(""), this.text.setDropShadow(0, 1.5, 0), this.add(this.text)
                    }, n.setLevel = function (t) {
                        this.text.setText("LEVEL " + t)
                    }, e
                }(Phaser.GameObjects.Container),
                Ta = n(627),
                Sa = h.default.GAMEPLAY,
                Ma = Sa.KEY,
                wa = Sa.FRAME,
                xa = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, 0) || this).front = void 0, n.iconImage = void 0, n.updateHealthBar(), n.setFrameSize(94.5, 11.5), n.createIconImage(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateHealthBar = function () {
                        this.bg.setTexture(Ma), this.bg.setFrame(wa.DASHBOARD_HPBAR_BG), this.frame.setTexture(Ma), this.frame.setFrame(wa.DASHBOARD_HPBAR_RED), this.frame.setOrigin(1, .5), this.frame.setX(0);
                        var t = this.scene.make.image({
                            key: Ma,
                            frame: wa.DASHBOARD_HPBAR_FRONT
                        });
                        t.setOrigin(0, .5), t.setWorldSize(this.hpLength, this.hpHeight), t.setX(-this.hpLength / 2), this.add(t), this.front = t
                    }, n.createIconImage = function () {
                        this.iconImage = this.scene.add.image(0, 0, Ma, wa.DASHBOARD_HPBAR_RED_HEART), this.iconImage.setWorldSize(20, 19), this.iconImage.setX(-this.hpLength / 2 - this.iconImage.displayWidth / 2 + 8), this.iconImage.setAngle(90), this.add(this.iconImage)
                    }, n.setFrameSize = function (t, e) {
                        this.hpLength = t, this.hpHeight = e, this.bg.setWorldSize(this.hpLength, this.hpHeight), this.bg.setX(-this.hpLength / 2), this.front.setWorldSize(this.hpLength, this.hpHeight), this.front.setX(-this.hpLength / 2), this.updateFrameUI(), this.frame.setX((2 - this.hpLength) / 2)
                    }, n.updateFrameUI = function () {
                        this.frame.setWorldSize(this.currentHp / this.defaultHp * (2 - this.hpLength), this.hpHeight - 1)
                    }, e
                }(Ta.default),
                Ca = h.default.GAMEPLAY.FRAME,
                Ia = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateHealthBar = function () {
                        t.prototype.updateHealthBar.call(this), this.frame.setFrame(Ca.DASHBOARD_HPBAR_BLUE)
                    }, n.createIconImage = function () {
                        t.prototype.createIconImage.call(this), this.iconImage.setFrame(Ca.DASHBOARD_HPBAR_BLUE_HEART)
                    }, e
                }(xa),
                ba = Ia,
                Ra = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.playerHpBar = void 0, n.enemyHpBar = void 0, n.scene = e, n.setDepth(d.default.BUTTON), n.createPlayerHpBar(), n.createEnemyHpBar(), n.setSize(300, 200), n.init(), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.enemyHpBar.setInitHp(1), this.playerHpBar.setInitHp(1)
                    }, n.createPlayerHpBar = function () {
                        this.playerHpBar = new ba(this.scene), this.playerHpBar.setAngle(-90), this.playerHpBar.setPosition(175, 50), this.add(this.playerHpBar)
                    }, n.createEnemyHpBar = function () {
                        this.enemyHpBar = new xa(this.scene), this.enemyHpBar.setAngle(-90), this.enemyHpBar.setPosition(-175, -160), this.add(this.enemyHpBar)
                    }, n.updateCurrentHp = function () {
                        this.updateCurrentEnemyHp(), this.updateCurrentPlayerHp()
                    }, n.updateCurrentPlayerHp = function () {
                        var t = this.scene.unitManager.getTotalPlayerUnitsHp();
                        this.playerHpBar.setInitHp(t)
                    }, n.updatePlayerHpUIByMinus = function (t) {
                        this.playerHpBar.updateHpUIByMinus(t)
                    }, n.getCurrentPlayerHp = function () {
                        return this.playerHpBar.getCurrentHp()
                    }, n.updateCurrentEnemyHp = function () {
                        var t = this.scene.unitManager.getTotalEnemyUnitsHp();
                        this.enemyHpBar.setInitHp(t)
                    }, n.updateEnemyHpUIByMinus = function (t) {
                        this.enemyHpBar.updateHpUIByMinus(t)
                    }, n.getCurrentEnemyHp = function () {
                        return this.enemyHpBar.getCurrentHp()
                    }, e
                }(Phaser.GameObjects.Container),
                Pa = n(73),
                _a = n(38),
                ka = h.default.GAMEPLAY,
                La = ka.KEY,
                Da = ka.FRAME,
                Oa = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e) || this).isDisable = !1, a.block = void 0, a.adsBanner = void 0, a.unitImage = void 0, a.priceText = void 0, a.coinIcon = void 0, a.adsMode = !1, a.parentName = void 0, a.createBlock(), a.updateSize(), a.createUnitImage(n), a.createPriceText(i), a.createMiniCoinIcon(), a.createAdsBanner(), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateSize = function () {
                        var t = this.block,
                            e = t.displayWidth,
                            n = t.displayHeight;
                        this.setSize(e, n)
                    }, n.createBlock = function () {
                        this.block = this.scene.add.image(0, 0, La, Da.DASHBOARD_UNITBAR_BG), this.block.setDisplaySize(69.5, 76), this.add(this.block)
                    }, n.createAdsBanner = function () {
                        var t = this.scene.make.image({
                            key: La,
                            frame: Da.DASHBOARD_AD_ICON
                        });
                        t.setOrigin(1, 0), t.setDisplaySize(33, 33), t.setPosition(this.block.x + this.block.displayWidth / 2, this.block.y - this.block.displayHeight / 2), this.add(t), t.kill(), this.adsBanner = t
                    }, n.createUnitImage = function (t) {
                        if (this.unitImage = this.scene.add.image(0, 0, La), t === ze.default.MELEE_UNIT_TYPE) {
                            var e = Da.DASHBOARD_UNITBAR_DINO;
                            this.unitImage.setFrame(e), this.unitImage.setDisplaySize(49, 37.5)
                        } else {
                            var n = Da.DASHBOARD_UNITBAR_ARCHER;
                            this.unitImage.setFrame(n), this.unitImage.setDisplaySize(35, 43)
                        }
                        Phaser.Display.Align.In.Center(this.unitImage, this.block, 0, -10), this.add(this.unitImage)
                    }, n.createPriceText = function (t) {
                        this.priceText = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(15),
                            origin: {
                                x: .5,
                                y: 0
                            }
                        }), this.priceText.setText("" + t), Phaser.Display.Align.In.Center(this.priceText, this.block, 10, 20), this.add(this.priceText)
                    }, n.createMiniCoinIcon = function () {
                        var t = this.scene.make.image({
                            key: La,
                            frame: Da.DASHBOARD_MINI_COIN
                        });
                        this.add(t), t.setDisplaySize(12.5, 13.5), Phaser.Display.Align.In.Center(t, this, -22, 22), this.coinIcon = t
                    }, n.setImage = function (t) {
                        this.unitImage.setTexture(t)
                    }, n.setPrice = function (t) {
                        var e = t.toString();
                        this.priceText.setText("" + e)
                    }, n.setAdsMode = function (t) {
                        this.adsMode = t, this.adsBanner.setVisible(t), this.priceText.setVisible(!t), this.coinIcon.setVisible(!t), t ? Phaser.Display.Align.In.Center(this.unitImage, this.block, 0, 0) : Phaser.Display.Align.In.Center(this.unitImage, this.block, 0, -10)
                    }, n.setDisabled = function (t) {
                        t !== this.isDisable && (this.setAlpha(t ? .5 : 1), this.isDisable = t)
                    }, n.isDisabled = function () {
                        return this.isDisable
                    }, n.logButtonEvent = function () {
                        var t = this.getParentName(),
                            e = this.name;
                        this.scene.analytics.event(_a.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: e,
                            screen_name: t
                        })
                    }, n.getParentName = function () {
                        if (this.parentName) return this.parentName;
                        for (var t = this.parentContainer; t;) {
                            if (t instanceof GameCore.Screen) {
                                var e = t;
                                return this.parentName = e.getScreenName(), this.parentName
                            }
                            t = t.parentContainer
                        }
                        return this.parentName = this.scene.getSceneName(), this.parentName
                    }, (0, Pa.default)(e, [{
                        key: "onClick",
                        set: function (t) {
                            var e = this;
                            this.block.setInteractive({
                                useHandCursor: !0
                            }), this.block.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, (function () {
                                e.logButtonEvent(), t(), (0, ji.default)(50)
                            }))
                        }
                    }, {
                        key: "onceClick",
                        set: function (t) {
                            var e = this;
                            this.block.setInteractive({
                                useHandCursor: !0
                            }), this.block.once(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, (function () {
                                e.logButtonEvent(), t()
                            }))
                        }
                    }]), e
                }(Phaser.GameObjects.Container),
                Na = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.meleeBlock = void 0, n.rangedBlock = void 0, n.adChangeMeleeTimer = void 0, n.adChangeRangedTimer = void 0, n.buyMeleeUnit = function () {
                            var t = n.scene.effectManger;
                            n.checkIfFullBoard() && t.playFullFloatText(), t.isRewardCurveAnimationRunning() || n.meleeBlock.isDisable || n.scene.handleSpawnMelee()
                        }, n.buyRangedUnit = function () {
                            var t = n.scene.effectManger;
                            n.checkIfFullBoard() && t.playFullFloatText(), t.isRewardCurveAnimationRunning() || n.rangedBlock.isDisable || n.scene.handleSpawnRanged()
                        }, n.scene = e, n.createMeleeBlock(), n.createRangedBlock(), n.setDepth(d.default.BUTTON), n.scene.add.existing((0, u.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.setMeleePrice = function (t) {
                        this.meleeBlock.setPrice(t)
                    }, n.setRangedPrice = function (t) {
                        this.rangedBlock.setPrice(t)
                    }, n.createMeleeBlock = function () {
                        this.meleeBlock = new Oa(this.scene, ze.default.MELEE_UNIT_TYPE, 999), this.meleeBlock.setName("BuyMeleeUnit"), this.meleeBlock.setPosition(38, 0), this.add(this.meleeBlock), this.meleeBlock.onClick = this.buyMeleeUnit
                    }, n.createRangedBlock = function () {
                        this.rangedBlock = new Oa(this.scene, ze.default.RANGED_UNIT_TYPE, 999), this.meleeBlock.setName("BuyRangedUnit"), this.rangedBlock.setPosition(-38, 0), this.add(this.rangedBlock), this.rangedBlock.onClick = this.buyRangedUnit
                    }, n.setMeleeAdsMode = function (t) {
                        var e, n = this;
                        if (t && this.scene.tutorialManager.isRunning()) this.disableMeleeBlock();
                        else {
                            var i = this.adChangeMeleeTimer && this.adChangeMeleeTimer.getProgress() < 1,
                                a = this.meleeBlock.adsMode;
                            if (t) {
                                if (t === a) return;
                                if (this.disableMeleeBlock(), i) return;
                                this.adChangeMeleeTimer = this.scene.time.delayedCall(2e3, (function () {
                                    if (n.meleeBlock) {
                                        var e = n.delayedAdMeleePriceCheck();
                                        if (n.checkIfFullBoard() ? n.disableMeleeBlock() : n.enableMeleeBlock(), !e) return void n.meleeBlock.setAdsMode(!1);
                                        n.meleeBlock.setName("ViewAdMeleeUnit"), n.meleeBlock.setAdsMode(t)
                                    }
                                }))
                            } else null == (e = this.adChangeMeleeTimer) || e.destroy(), this.enableMeleeBlock(), this.meleeBlock.setName("BuyMeleeUnit"), this.meleeBlock.setAdsMode(t)
                        }
                    }, n.disableMeleeBlock = function () {
                        this.meleeBlock.setDisabled(!0)
                    }, n.enableMeleeBlock = function () {
                        this.meleeBlock.setDisabled(!1)
                    }, n.killMeleeBlock = function () {
                        this.meleeBlock.kill()
                    }, n.reviveMeleeBlock = function () {
                        this.meleeBlock.revive()
                    }, n.setRangedAdsMode = function (t) {
                        var e, n = this;
                        if (t && this.scene.tutorialManager.isRunning()) this.disableRangedBlock();
                        else {
                            var i = this.adChangeRangedTimer && this.adChangeRangedTimer.getProgress() < 1,
                                a = this.rangedBlock.adsMode;
                            if (t) {
                                if (t === a) return;
                                if (this.disableRangedBlock(), t && i) return;
                                this.adChangeRangedTimer = this.scene.time.delayedCall(2e3, (function () {
                                    if (n.rangedBlock) {
                                        var e = n.delayedAdRangedPriceCheck();
                                        if (n.checkIfFullBoard() ? n.disableRangedBlock() : n.enableRangedBlock(), !e) return void n.rangedBlock.setAdsMode(!1);
                                        n.rangedBlock.setName("ViewAdRangedUnit"), n.rangedBlock.setAdsMode(t)
                                    }
                                }))
                            } else null == (e = this.adChangeRangedTimer) || e.destroy(), this.enableRangedBlock(), this.rangedBlock.setName("BuyRangedUnit"), this.rangedBlock.setAdsMode(t)
                        }
                    }, n.checkIfFullBoard = function () {
                        return 0 === this.scene.fieldManager.getRemainingAvailablePlacement()
                    }, n.delayedAdMeleePriceCheck = function () {
                        var t = this.scene,
                            e = t.unitManager,
                            n = t.coinManager,
                            i = this.scene.coin.getCurrentCoins(),
                            a = e.getPlayerMeleeSpawnedUnitsCount(),
                            r = n.getUnitPrice(a),
                            s = i.toString(),
                            o = r.toString();
                        return r.biggerThan(i) && s !== o
                    }, n.delayedAdRangedPriceCheck = function () {
                        var t = this.scene,
                            e = t.unitManager,
                            n = t.coinManager,
                            i = this.scene.coin.getCurrentCoins(),
                            a = e.getPlayerRangedSpawnedUnitsCount(),
                            r = n.getUnitPrice(a),
                            s = i.toString(),
                            o = r.toString();
                        return r.biggerThan(i) && s !== o
                    }, n.disableRangedBlock = function () {
                        this.rangedBlock.setDisabled(!0)
                    }, n.enableRangedBlock = function () {
                        this.rangedBlock.setDisabled(!1)
                    }, n.killRangedBlock = function () {
                        this.rangedBlock.kill()
                    }, n.reviveRangedBlock = function () {
                        this.rangedBlock.revive()
                    }, n.disableUnitBlocks = function () {
                        this.meleeBlock.setDisabled(!0), this.rangedBlock.setDisabled(!0)
                    }, n.isAnyUnitBlockDisabled = function () {
                        return this.meleeBlock.isDisabled() || this.rangedBlock.isDisabled()
                    }, n.addOnceClickEventForMeleeBlock = function (t) {
                        this.meleeBlock.onceClick = t
                    }, n.addOnceClickEventForRangedBlock = function (t) {
                        this.rangedBlock.onceClick = t
                    }, n.getMeleeBlockConfig = function () {
                        var t = this.meleeBlock.getWorldPosition(),
                            e = t.x,
                            n = t.y,
                            i = this.meleeBlock,
                            a = i.width,
                            r = i.height;
                        return {
                            worldX: e,
                            worldY: n,
                            width: a * this.scaleX,
                            height: r * this.scaleY
                        }
                    }, n.getRangedBlockConfig = function () {
                        var t = this.rangedBlock.getWorldPosition(),
                            e = t.x,
                            n = t.y,
                            i = this.rangedBlock,
                            a = i.width,
                            r = i.height;
                        return {
                            worldX: e,
                            worldY: n,
                            width: a * this.scaleX,
                            height: r * this.scaleY
                        }
                    }, e
                }(Phaser.GameObjects.Container),
                Ua = h.default.GAMEPLAY,
                Ba = Ua.KEY,
                Fa = Ua.FRAME,
                Ga = GameCore.Configs.Gameplay,
                Ha = Ga.MaximumMeleeLevel,
                Va = Ga.MaximumRangedLevel,
                Ya = Ga.MaxLevel,
                Wa = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.coinBar = void 0, n.unitBar = void 0, n.levelBar = void 0, n.battleLevelBar = void 0, n.startButton = void 0, n.settingsButton = void 0, n.leaderboardButton = void 0, n.showUnitButton = void 0, n.totalHpBar = void 0, n.allUI = void 0, n.guideStateUI = void 0, n.battleReadyStateUI = void 0, n.normalReadyStateUI = void 0, n.levelLoadingStateUI = void 0, n.battlePlayingStateUI = void 0, n.normalPlayingStateUI = void 0, n.hideUIAnimation = void 0, n.loadMapInput = void 0, n.selectLevelButton = void 0, n.resetLevelButton = void 0, n.unitModifierInput = void 0, n.currentUnitModText = void 0, n.attackModifierInput = void 0, n.currentAttackModText = void 0, n.updateUIData = function () {
                            n.updateCoinBar(), n.updateUnitBarUI(), n.updateTotalHpBar(), n.updateUIPosition()
                        }, n.updateWhenReceivedCoin = function (t) {
                            var e = n.scene.tutorialManager;
                            n.setCoinBar(t), e.isRunning() ? e.reupdateGuideUI() : n.updateUnitBarUI()
                        }, n.handleStartLoadMapById = function () {
                            try {
                                n.loadMapInput.style.display = "none";
                                var t = document.getElementById("level-id");
                                if (!t) return;
                                var e = JSON.parse(t.value),
                                    i = rn()(e) > Ya ? Ya : rn()(e);
                                n.scene.selectLevel(i)
                            } catch (a) {}
                        }, n.handleEditUnitModifier = function () {
                            try {
                                n.unitModifierInput.style.display = "none";
                                var t = document.getElementById("unit-mod");
                                if (!t) return;
                                var e = JSON.parse(t.value),
                                    i = rn()(e),
                                    a = n.scene.difficultyManager.editCurrentLevelUnitMod(i);
                                n.setCurrentUnitModText(e, a), n.updateUIData()
                            } catch (r) {}
                        }, n.handleEditAttackModifier = function () {
                            try {
                                n.attackModifierInput.style.display = "none";
                                var t = document.getElementById("attack-mod");
                                if (!t) return;
                                var e = JSON.parse(t.value),
                                    i = rn()(e),
                                    a = n.scene.difficultyManager.editCurrentLevelAttackMod(i);
                                n.setCurrentAttackModText(e, a), n.updateUIData()
                            } catch (r) {}
                        }, n.handleShowLoadMapInput = function () {
                            n.loadMapInput.style.display = "flex"
                        }, n.handleShowModUnitInput = function () {
                            n.unitModifierInput.style.display = "flex"
                        }, n.handleShowModAttackInput = function () {
                            n.attackModifierInput.style.display = "flex"
                        }, n.startFight = function () {
                            if (!n.hideUIAnimation) {
                                var t, e = n.getPowerItems(),
                                    i = l()(t = [n.unitBar, n.startButton, n.showUnitButton, n.leaderboardButton, n.levelBar, n.battleLevelBar]).call(t, e);
                                n.hideUIAnimation = new bi.default({
                                    targets: i,
                                    duration: 300,
                                    onActive: function () {
                                        n.scene.input.enabled = !1
                                    },
                                    ease: Phaser.Math.Easing.Circular.Out,
                                    onComplete: function () {
                                        i.forEach((function (t) {
                                            return t.setAlpha(1)
                                        })), e.forEach((function (t) {
                                            return t.disableItem()
                                        })), n.scene.startRound(), n.scene.input.enabled = !0
                                    }
                                })
                            }
                            n.hideUIAnimation.play()
                        }, n.challengeFriends = (0, i.default)(s().mark((function t() {
                            var e, i, a, r, o, l, c, u, h;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = n.scene.game.globalScene, t.prev = 1, i = n.scene, a = i.player, r = i.facebook, o = i.battle, e.screen.open(Pi.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), n.scene.scene.pause(), t.next = 7, r.chooseAsync();
                                    case 7:
                                        if (!1 !== (l = t.sent)) {
                                            t.next = 10;
                                            break
                                        }
                                        throw new Error("User canceled");
                                    case 10:
                                        if (GameCore.Utils.Valid.isString(l)) {
                                            t.next = 12;
                                            break
                                        }
                                        throw new Error("No context found");
                                    case 12:
                                        return c = a.getPlayerId(), t.next = 15, r.getContextPlayers(c);
                                    case 15:
                                        if (!((u = t.sent).length < 1)) {
                                            t.next = 18;
                                            break
                                        }
                                        throw new Error("No players found");
                                    case 18:
                                        return h = u[0].playerId, t.next = 21, o.sendChallengeMessage(l, h);
                                    case 21:
                                        e.screen.open(Pi.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                            message: "This message has been sent to your opponent!",
                                            loading: !1,
                                            duration: 2e3
                                        }), t.next = 27;
                                        break;
                                    case 24:
                                        t.prev = 24, t.t0 = t.catch(1), e.screen.open(Pi.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                            message: "Has been an error sending the message!",
                                            loading: !1,
                                            duration: 1500
                                        });
                                    case 27:
                                        return t.prev = 27, e.screen.close(Pi.ScreenKeys.NOTIFY_SCREEN), n.scene.scene.resume(), t.finish(27);
                                    case 31:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [1, 24, 27, 31]
                            ])
                        }))), n.inviteFriends = (0, i.default)(s().mark((function t() {
                            var e, i, a, r, o, l, c, u;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = n.scene.game.globalScene, t.prev = 1, i = n.scene, a = i.player, r = i.facebook, e.screen.open(Pi.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), n.scene.scene.pause(), t.next = 7, (0, Yi.renderWideframesGameResult)();
                                    case 7:
                                        if (o = t.sent) {
                                            t.next = 10;
                                            break
                                        }
                                        throw new Error("Image share failed");
                                    case 10:
                                        return l = a.getPlayer(), c = l.name, u = l.playerId, t.next = 13, r.inviteAsync({
                                            image: o,
                                            cta: {
                                                default: "Revenge",
                                                localizations: {
                                                    vi_VN: "Tr\u1ea3 th\xf9"
                                                }
                                            },
                                            text: {
                                                default: c + " challenges you",
                                                localizations: {
                                                    vi_VN: c + " th\u1eed th\xe1ch b\u1ea1n trong tr\u1eadn \u0111\u1ea5u n\xe0y. Ch\u01a1i ngay!"
                                                }
                                            },
                                            template: "challenge",
                                            data: {
                                                type: Ii.CHALLENGE_FRIENDS_MESSAGE,
                                                playerId: u
                                            }
                                        });
                                    case 13:
                                        t.next = 18;
                                        break;
                                    case 15:
                                        t.prev = 15, t.t0 = t.catch(1), e.screen.open(Pi.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                            message: "Has been an error sending the message!",
                                            loading: !1,
                                            duration: 1500
                                        });
                                    case 18:
                                        return t.prev = 18, e.screen.close(Pi.ScreenKeys.NOTIFY_SCREEN), n.scene.scene.resume(), t.finish(18);
                                    case 22:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [1, 15, 18, 22]
                            ])
                        }))), n.showSettingsScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.SETTINGS_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.SETTINGS_SCREEN, Ui.default)), e instanceof Ui.default && e.recalculateLightPosition(), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function () {
                                n.scene.scene.resume()
                            })), t.open(Pi.ScreenKeys.SETTINGS_SCREEN)
                        }, n.showLeaderboardScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.LEADER_BOARD_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.LEADER_BOARD_SCREEN, Li.default)), e instanceof Li.default && e.recalculateLightPosition(), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function () {
                                n.scene.scene.resume()
                            })), t.open(Pi.ScreenKeys.LEADER_BOARD_SCREEN)
                        }, n.showBattleScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.BATTLE_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.BATTLE_SCREEN, _i.default)), e instanceof _i.default && e.recalculateLightPosition(), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function () {
                                n.scene.scene.resume()
                            })), t.open(Pi.ScreenKeys.BATTLE_SCREEN)
                        }, n.showUnitsScreen = function () {
                            n.showUnitButton.stopAnimation(), n.scene.effectManger.stopRewardCurveAnimation();
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.UNITS_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.UNITS_SCREEN, Gi.default)), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function () {
                                n.scene.scene.resume()
                            })), t.open(Pi.ScreenKeys.UNITS_SCREEN)
                        }, n.showUnitUnlockScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.UNIT_UNLOCK_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.UNIT_UNLOCK_SCREEN, Fi.default)), e instanceof Fi.default && e.recalculateLightPosition(), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function (t) {
                                t.off(GameCore.Screens.Events.OPEN), n.scene.unitManager.enableDragOnPlayerUnits(), n.scene.scene.resume()
                            })), t.open(Pi.ScreenKeys.UNIT_UNLOCK_SCREEN), n.scene.audio.playSound(pn.default.UNIT_UNLOCK)
                        }, n.showResultScreen = function (t, e, i) {
                            var a = n.scene.game.globalScene.screen,
                                r = a.get(Pi.ScreenKeys.RESULT_SCREEN);
                            r || (r = a.add(Pi.ScreenKeys.RESULT_SCREEN, Ni.default)), r.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), r.once(GameCore.Screens.Events.CLOSE, (function (t) {
                                t.off(GameCore.Screens.Events.OPEN), n.scene.scene.resume()
                            })), e === c.default.NORMAL || e === c.default.BATTLE ? a.open(Pi.ScreenKeys.RESULT_SCREEN, {
                                result: t,
                                coinRewarded: i,
                                mode: e
                            }) : a.open(Pi.ScreenKeys.RESULT_SCREEN, {
                                result: t,
                                coinRewarded: i,
                                mode: c.default.NORMAL
                            })
                        }, n.showOfflineScreen = function () {
                            var t = n.scene.storage.getState(),
                                e = (0, Hi.getOfflineRewardValue)(t);
                            if (!(e <= -1) && !(0, Hi.getOfflineRewardShow)(t)) {
                                var i = n.scene.game.globalScene.screen,
                                    a = i.get(Pi.ScreenKeys.OFFLINE_REWARD_SCREEN);
                                a || (a = i.add(Pi.ScreenKeys.OFFLINE_REWARD_SCREEN, Oi.default)), a instanceof Oi.default && a.recalculateLightPosition(), a.once(GameCore.Screens.Events.OPEN, (function () {
                                    n.scene.scene.pause()
                                })), a.once(GameCore.Screens.Events.CLOSE, (function () {
                                    n.scene.scene.resume()
                                })), i.open(Pi.ScreenKeys.OFFLINE_REWARD_SCREEN, {
                                    rewardValue: e
                                })
                            }
                        }, n.showLoadingScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.LOADING_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.LOADING_SCREEN, Di.default)), t.open(Pi.ScreenKeys.LOADING_SCREEN)
                        }, n.closeLoadingScreen = function () {
                            n.scene.game.globalScene.screen.close(Pi.ScreenKeys.LOADING_SCREEN)
                        }, n.showChallengeSplashScreen = function () {
                            var t = n.scene.game.globalScene.screen,
                                e = t.get(Pi.ScreenKeys.CHALLENGE_SPLASH_SCREEN);
                            e || (e = t.add(Pi.ScreenKeys.CHALLENGE_SPLASH_SCREEN, ki.default)), e.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), e.once(GameCore.Screens.Events.CLOSE, (function () {
                                n.scene.scene.resume(), n.scene.audio.setMusicVolume(.4, 2e3)
                            })), t.open(Pi.ScreenKeys.CHALLENGE_SPLASH_SCREEN)
                        }, n.showUnitRewardScreen = function (t) {
                            var e = n.scene.game.globalScene.screen;
                            n.scene.effectManger.stopRewardCurveAnimation();
                            var i = e.get(Pi.ScreenKeys.UNIT_REWARD_SCREEN);
                            i || (i = e.add(Pi.ScreenKeys.UNIT_REWARD_SCREEN, Bi.default)), i.once(GameCore.Screens.Events.OPEN, (function () {
                                n.scene.scene.pause()
                            })), i.once(GameCore.Screens.Events.CLOSE, (function (t) {
                                t.off(GameCore.Screens.Events.OPEN), n.scene.scene.resume()
                            })), e.open(Pi.ScreenKeys.UNIT_REWARD_SCREEN, {
                                unitType: t
                            })
                        }, n.scene = e, n.createCoinBar(), n.createUnitBar(), n.createLevelBar(), n.createBattleLevelBar(), n.createStartButton(), n.createShowUnitButton(), n.createSettingsButton(), n.createLeaderboardButton(), n.createTotalHpBar(), n.createDebug(), n.createUIGroups(), n.scene.coin.events.on(Vi.default.RECEIVED, n.updateWhenReceivedCoin), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        t.prototype.init.call(this);
                        var e = this.scene.gameMode;
                        e === c.default.NORMAL && this.reviveUIGroup(this.normalReadyStateUI), e === c.default.BATTLE && this.reviveUIGroup(this.battleReadyStateUI)
                    }, n.start = function () {
                        if (!this.isRunning()) {
                            t.prototype.start.call(this), this.updateUIData();
                            var e = this.scene,
                                n = e.gameMode;
                            0 === e.unitManager.playerUnits.getLength() && this.startButton.setDisabled(!0), n === c.default.BATTLE && this.startButton.setX(this.scene.gameZone.width / 2)
                        }
                    }, n.updateUIPosition = function () {
                        var t = this.scene,
                            e = t.gameZone,
                            n = t.fieldManager.fieldBackground,
                            i = n.y,
                            a = n.displayHeight,
                            r = n.scaleY,
                            s = this.scene.world.getPixelRatio(),
                            o = e.width / 2;
                        this.unitBar.x = o, this.totalHpBar.x = o, this.startButton.x = o;
                        var l = i - a / 2;
                        this.totalHpBar.y = l, this.unitBar.y = l + 270 * r * s, this.startButton.y = l + 200 * r * s
                    }, n.updateCoinBar = function () {
                        var t = this.scene.coin.getCurrentCoins();
                        t instanceof Ke.default && this.setCoinBar(t)
                    }, n.updateTotalHpBar = function () {
                        this.totalHpBar.setAlpha(1), this.totalHpBar.updateCurrentHp()
                    }, n.updateUnitBarUI = function () {
                        var t = this.scene,
                            e = t.unitManager,
                            n = t.coinManager,
                            i = this.scene.coin.getCurrentCoins();
                        if (i instanceof Ke.default) {
                            var a = e.getPlayerMeleeSpawnedUnitsCount(),
                                r = n.getUnitPrice(a);
                            this.unitBar.setMeleePrice(r);
                            var s = i.toString(),
                                o = r.toString();
                            this.unitBar.enableMeleeBlock();
                            var l = r.biggerThan(i) && s !== o;
                            this.unitBar.setMeleeAdsMode(l);
                            var c = e.getPlayerRangedSpawnedUnitsCount(),
                                u = n.getUnitPrice(c);
                            this.unitBar.setRangedPrice(u);
                            var h = u.toString();
                            this.unitBar.enableRangedBlock();
                            var d = u.biggerThan(i) && s !== h;
                            this.unitBar.setRangedAdsMode(d), this.handleLastSquareCase()
                        }
                    }, n.handleLastSquareCase = function () {
                        var t = this.scene,
                            e = t.fieldManager,
                            n = t.unitManager;
                        if (1 === e.getRemainingAvailablePlacement()) {
                            var i = n.getLowestLevelPlayerMeleeUnit(),
                                a = n.getLowestLevelPlayerRangedUnit();
                            i === Ha && a !== Va && this.unitBar.disableMeleeBlock(), a === Va && i !== Ha && this.unitBar.disableRangedBlock()
                        }
                    }, n.setTotalHpBar = function (t, e) {
                        e ? this.totalHpBar.updatePlayerHpUIByMinus(t) : this.totalHpBar.updateEnemyHpUIByMinus(t)
                    }, n.createDebug = function () {
                        GameCore.Utils.Valid.isDebugger() && (this.loadMapInput = this.createInput("input-level", "level-id", "load-level-id", "Load level", this.handleStartLoadMapById), this.unitModifierInput = this.createInput("input-level", "unit-mod", "edit-unit-mod", "Set Unit Price Modifier", this.handleEditUnitModifier), this.attackModifierInput = this.createInput("input-level", "attack-mod", "edit-attack-mod", "Set Attack Coin Modifier", this.handleEditAttackModifier), this.createResetLevelButton(), this.createSelectLevelButton(), this.createUnitModButton(), this.createAttackModButton())
                    }, n.createInput = function (t, e, n, i, a) {
                        var r = document.createElement("div");
                        r.id = t, r.style.height = "100vh", r.style.width = "calc(100vw - 100px)", r.style.padding = "50px", r.style.display = "flex", r.style.flexFlow = "column", r.style.position = "absolute", r.style.justifyContent = "center", r.style.backgroundColor = "#000000cc", r.innerHTML = "<input id=" + e + ' style="height: 50px;text-align: center;font-size: 30px;"></input><input type="button" id=' + n + " value=" + i + ' style="height:40px">', document.body.appendChild(r);
                        var s = document.getElementById(n);
                        return null == s || s.addEventListener("click", a), r.style.display = "none", r
                    }, n.setCurrentUnitModText = function (t, e) {
                        this.currentUnitModText.setText("C: " + 100 * t + "%\nT: " + e.toString() + "%")
                    }, n.setCurrentAttackModText = function (t, e) {
                        this.currentAttackModText.setText("C: " + t + "%\nT: " + e.toString() + "%")
                    }, n.createResetLevelButton = function () {
                        var t = new Ri.default(this.scene, Ba, Fa.TOOL_RESET, 40, 35);
                        t.setName("Reset");
                        var e = this.scene.gameZone;
                        Phaser.Display.Align.In.BottomRight(t, e, -50, -80), t.onClick = this.scene.resetLevel, this.resetLevelButton = t
                    }, n.createSelectLevelButton = function () {
                        var t = new Ri.default(this.scene, Ba, Fa.TOOL_EDIT, 40, 40);
                        t.setName("Select"), t.setAngle(90);
                        var e = this.scene.gameZone;
                        Phaser.Display.Align.In.BottomRight(t, e, 0, -80), t.onClick = this.handleShowLoadMapInput, this.selectLevelButton = t
                    }, n.createUnitModButton = function () {
                        var t = new Ri.default(this.scene, Ba, Fa.TOOL_UNIT, 40, 38.5);
                        t.setName("UnitMod");
                        var e = this.scene.gameZone;
                        Phaser.Display.Align.In.BottomLeft(t, e, 0, -150), t.onClick = this.handleShowModUnitInput;
                        var n = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18),
                            text: "0",
                            origin: {
                                x: 0,
                                y: .5
                            }
                        });
                        n.x = 20, t.add(n), this.currentUnitModText = n
                    }, n.createAttackModButton = function () {
                        var t = new Ri.default(this.scene, Ba, Fa.TOOL_ATTACK, 40, 40);
                        t.setName("UnitMod");
                        var e = this.scene.gameZone;
                        Phaser.Display.Align.In.BottomLeft(t, e, 0, -100), t.onClick = this.handleShowModAttackInput;
                        var n = this.scene.make.bitmapText({
                            font: fn.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18),
                            text: "0",
                            origin: {
                                x: 0,
                                y: .5
                            }
                        });
                        n.x = 20, t.add(n), this.currentAttackModText = n
                    }, n.createCoinBar = function () {
                        this.coinBar = new ya(this.scene), Phaser.Display.Align.In.TopRight(this.coinBar, this.scene.gameZone, -60, -25)
                    }, n.setCoinBar = function (t) {
                        this.coinBar.setCoins(t)
                    }, n.createUnitBar = function () {
                        this.unitBar = new Na(this.scene)
                    }, n.isAnyUnitBlockDisabled = function () {
                        return this.unitBar.isAnyUnitBlockDisabled()
                    }, n.createLevelBar = function () {
                        var t = this.scene.gameZone;
                        this.levelBar = new Aa(this.scene), Phaser.Display.Align.In.TopCenter(this.levelBar, t, 0, -22)
                    }, n.createBattleLevelBar = function () {
                        var t = this.scene.gameZone;
                        this.battleLevelBar = new ga(this.scene), Phaser.Display.Align.In.TopCenter(this.battleLevelBar, t, 10, -27)
                    }, n.createStartButton = function () {
                        this.startButton = new ra(this.scene), this.startButton.onClick = this.startFight
                    }, n.createTotalHpBar = function () {
                        this.totalHpBar = new Ra(this.scene), this.totalHpBar.setAlpha(0)
                    }, n.getCurrentEnemyHp = function () {
                        return this.totalHpBar.getCurrentEnemyHp()
                    }, n.getCurrentPlayerHp = function () {
                        return this.totalHpBar.getCurrentPlayerHp()
                    }, n.createShowUnitButton = function () {
                        var t = this.scene.gameZone,
                            e = new Zi(this.scene, Ba, Fa.DASHBOARD_UNIT_LIST, 31.5, 36);
                        e.setName("ShowUnitList"), Phaser.Display.Align.In.TopLeft(e, t, -5, -45), e.onClick = this.showUnitsScreen, this.showUnitButton = e
                    }, n.getPowerItems = function () {
                        return this.scene.powerManager.getItems()
                    }, n.createUIGroups = function () {
                        this.createAllUIGroup(), this.createLevelLoadingUIGroup(), this.createReadyStateUIGroup(), this.createPlayingStateUIGroup(), this.createGuideUIGroup()
                    }, n.createAllUIGroup = function () {
                        var t, e = this.getPowerItems();
                        this.allUI = this.scene.add.group(l()(t = [this.unitBar, this.levelBar, this.battleLevelBar, this.coinBar, this.startButton, this.showUnitButton, this.totalHpBar, this.settingsButton, this.leaderboardButton]).call(t, e)), GameCore.Utils.Valid.isDebugger() && this.allUI.addMultiple([this.resetLevelButton, this.selectLevelButton]), this.allUI.setDepth(d.default.BUTTON)
                    }, n.createLevelLoadingUIGroup = function () {
                        var t, e = this.getPowerItems();
                        this.levelLoadingStateUI = this.scene.add.group(l()(t = [this.coinBar, this.showUnitButton, this.totalHpBar, this.settingsButton, this.leaderboardButton]).call(t, e)), this.levelLoadingStateUI.setDepth(d.default.BUTTON)
                    }, n.createReadyStateUIGroup = function () {
                        var t, e, n = this.getPowerItems();
                        this.normalReadyStateUI = this.scene.add.group(l()(t = [this.unitBar, this.levelBar, this.coinBar, this.startButton, this.showUnitButton, this.totalHpBar, this.settingsButton, this.leaderboardButton]).call(t, n)), GameCore.Utils.Valid.isDebugger() && this.normalReadyStateUI.addMultiple([this.resetLevelButton, this.selectLevelButton]), this.normalReadyStateUI.setDepth(d.default.BUTTON), this.battleReadyStateUI = this.scene.add.group(l()(e = [this.coinBar, this.startButton, this.battleLevelBar, this.showUnitButton, this.totalHpBar, this.settingsButton, this.leaderboardButton]).call(e, n)), this.battleReadyStateUI.setDepth(d.default.BUTTON)
                    }, n.createPlayingStateUIGroup = function () {
                        this.normalPlayingStateUI = this.scene.add.group([this.coinBar, this.totalHpBar, this.settingsButton]), this.normalPlayingStateUI.setDepth(d.default.BUTTON), this.battlePlayingStateUI = this.scene.add.group([this.coinBar, this.totalHpBar, this.settingsButton]), this.battlePlayingStateUI.setDepth(d.default.BUTTON)
                    }, n.createGuideUIGroup = function () {
                        this.guideStateUI = this.scene.add.group([this.unitBar, this.levelBar, this.coinBar, this.startButton, this.totalHpBar, this.settingsButton]), GameCore.Utils.Valid.isDebugger() && this.guideStateUI.addMultiple([this.resetLevelButton, this.selectLevelButton]), this.guideStateUI.setDepth(d.default.BUTTON)
                    }, n.disableUnitBlocks = function () {
                        this.unitBar.disableUnitBlocks()
                    }, n.enableStartButton = function () {
                        this.startButton.setDisabled(!1)
                    }, n.isStartButtonDisabled = function () {
                        return this.startButton.isDisabled()
                    }, n.createSettingsButton = function () {
                        var t = this.scene.gameZone,
                            e = new Ri.default(this.scene, Ba, Fa.DASHBOARD_SETTINGS_BTN, 32.5, 39);
                        e.setName("Settings"), Phaser.Display.Align.In.TopLeft(e, t, -5, -2), this.settingsButton = e, this.settingsButton.onClick = this.showSettingsScreen
                    }, n.createLeaderboardButton = function () {
                        var t = this.scene.gameZone,
                            e = new Ri.default(this.scene, Ba, Fa.DASHBOARD_LEADERBOARD_BTN, 33, 40.5);
                        e.setName("Leaderboards"), Phaser.Display.Align.In.TopLeft(e, t, -45, -2), this.leaderboardButton = e, this.leaderboardButton.onClick = this.showLeaderboardScreen
                    }, n.runUnitBtnAnim = function () {
                        this.showUnitButton.runAnimation()
                    }, n.getUnitBtnPos = function () {
                        return new Phaser.Math.Vector2(this.showUnitButton.x, this.showUnitButton.y)
                    }, n.showUIForLevelLoadingState = function () {
                        this.killUIGroup(this.allUI), this.reviveUIGroup(this.levelLoadingStateUI)
                    }, n.showUIForReadyState = function () {
                        var t = this.scene.gameMode,
                            e = this.scene.levelManager.getCurrentLevelId();
                        if (this.killUIGroup(this.allUI), t === c.default.NORMAL && (this.levelBar.setLevel(e), this.updateUnitBarUI(), this.killUIGroup(this.normalPlayingStateUI), this.reviveUIGroup(this.normalReadyStateUI)), t === c.default.BATTLE) {
                            var n = this.scene.battle.getPlayerInfo(),
                                i = this.scene.battle.getOpponentInfo();
                            n && i && this.battleLevelBar.updateData(n, i), this.killUIGroup(this.battlePlayingStateUI), this.reviveUIGroup(this.battleReadyStateUI)
                        }
                        this.updateUIData()
                    }, n.showUIForPlayingState = function () {
                        var t = this.scene.gameMode;
                        t === c.default.NORMAL && (this.killUIGroup(this.normalReadyStateUI), this.reviveUIGroup(this.normalPlayingStateUI)), t === c.default.BATTLE && (this.killUIGroup(this.battleReadyStateUI), this.reviveUIGroup(this.battlePlayingStateUI)), this.updateUIData()
                    }, n.showUIForGuide1 = function () {
                        this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.unitBar.kill()
                    }, n.showUIForGuide2 = function (t) {
                        1 === t ? (this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.startButton.kill(), this.updateCoinBar(), this.updateUnitBarUI(), this.unitBar.killMeleeBlock(), this.unitBar.setDepth(d.default.TUTORIAL_OBJECT)) : 2 === t ? (this.unitBar.reviveMeleeBlock(), this.unitBar.kill(), this.unitBar.setDepth(d.default.BUTTON)) : 3 === t && (this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.unitBar.kill(), this.startButton.revive())
                    }, n.showUIForGuidePrevent = function () {
                        this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.unitBar.kill()
                    }, n.showUIForGuide3 = function (t) {
                        if (1 === t) this.scene.accessibilityManager.stop(), this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.startButton.kill(), this.updateCoinBar(), this.updateUnitBarUI(), this.unitBar.killRangedBlock(), this.unitBar.setDepth(d.default.TUTORIAL_OBJECT);
                        else if (2 === t) {
                            this.scene.accessibilityManager.stop(), this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.startButton.kill(), this.showUnitButton.revive(), this.unitBar.reviveRangedBlock(), this.unitBar.kill(), this.unitBar.setDepth(d.default.BUTTON)
                        } else 3 === t && (this.killUIGroup(this.allUI), this.killUIGroup(this.guideStateUI), this.reviveUIGroup(this.guideStateUI), this.unitBar.kill(), this.startButton.revive(), this.showUnitButton.revive())
                    }, n.addOnceCallbackForMeleeBlock = function (t) {
                        this.unitBar.addOnceClickEventForMeleeBlock(t)
                    }, n.addOnceCallbackForRangedBlock = function (t) {
                        this.unitBar.addOnceClickEventForRangedBlock(t)
                    }, n.addOnceCallbackForStartBtn = function (t) {
                        this.startButton.setOnceCallback(t)
                    }, n.getMeleeBlockWorldPosition = function () {
                        var t = this.unitBar.getMeleeBlockConfig();
                        return {
                            x: t.worldX,
                            y: t.worldY
                        }
                    }, n.getMeleeBlockConfig = function () {
                        return this.unitBar.getMeleeBlockConfig()
                    }, n.getRangedBlockWorldPosition = function () {
                        var t = this.unitBar.getRangedBlockConfig();
                        return {
                            x: t.worldX,
                            y: t.worldY
                        }
                    }, n.getRangedBlockConfig = function () {
                        return this.unitBar.getRangedBlockConfig()
                    }, n.getStartBtnWorldPosition = function () {
                        return this.startButton.getWorldPosition()
                    }, n.killUIGroup = function (t) {
                        t.getChildren().forEach((function (t) {
                            t.setVisible(!1), t.setActive(!1)
                        }))
                    }, n.reviveUIGroup = function (t) {
                        t.getChildren().forEach((function (t) {
                            t.setVisible(!0), t.setActive(!0)
                        }))
                    }, e
                }(C),
                Ka = Wa,
                za = n(125),
                Xa = n.n(za),
                ja = n(107),
                qa = n.n(ja),
                Za = n(171),
                Qa = n.n(Za),
                Ja = n(47),
                $a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "NoUnitFound", i.message = e || "No Unit Found", i.payload = n, i
                    }
                    return (0, a.default)(e, t), e
                }((0, Ja.default)(Error)),
                tr = n(628),
                er = n(630),
                nr = n(203),
                ir = M.STATUS,
                ar = ze.default.MELEE_UNIT_TYPE,
                rr = ze.default.RANGED_UNIT_TYPE,
                sr = ze.default.ALIEN_UNIT_TYPE,
                or = GameCore.Configs.Gameplay,
                lr = or.MaximumMeleeLevel,
                cr = or.MaximumRangedLevel,
                ur = Pn.default.MELEE_UNLOCKED,
                hr = Pn.default.RANGED_UNLOCKED,
                dr = Pn.default.PLAYER_UNIT_DATA,
                fr = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.meleeSpawnPool = void 0, n.rangedSpawnPool = void 0, n.playerUnits = void 0, n.enemyUnits = void 0, n.rangedProjectiles = void 0, n.latestUnitMergePayload = void 0, n.scene = e, n.createFactories(), n.createUnitGroups(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        t.prototype.init.call(this), this.initSpawnPools(), this.emptyEnemyUnits(), this.emptyProjectiles()
                    }, n.start = function () {
                        this.isRunning() || (this.createEnemyUnits(), this.scene.levelManager.isInLevelBuilderLevel() ? (this.emptyPlayerUnits(), this.createPlayerUnitsLevelBuilder()) : (this.createPlayerUnitsNormal(), this.calculatePlayerTotalUnitsUsed()), this.setState(ir.RUNNING))
                    }, n.stop = function () {
                        this.isRunning() && (this.stopDieEffectOfAllUnits(), this.setReadyAllUnits(), this.hideAllUnits(), this.disableDragOnPlayerUnits(), this.runChildUpdateGroups(!1), this.setState(ir.STOPPED))
                    }, n.createFactories = function () {
                        this.meleeSpawnPool = new tr.default(this.scene), this.rangedSpawnPool = new er.default(this.scene)
                    }, n.createUnitGroups = function () {
                        this.enemyUnits = this.scene.add.group(), this.playerUnits = this.scene.add.group(), this.rangedProjectiles = this.scene.add.group()
                    }, n.runChildUpdateGroups = function (t) {
                        this.enemyUnits.runChildUpdate = t, this.playerUnits.runChildUpdate = t, this.rangedProjectiles.runChildUpdate = t
                    }, n.initSpawnPools = function () {
                        this.meleeSpawnPool.init(), this.rangedSpawnPool.init()
                    }, n.emptyEnemyUnits = function () {
                        var t = this;
                        this.enemyUnits.getChildren().forEach((function (e) {
                            if (e instanceof nr.default) {
                                e.handleRemoveFromScene();
                                var n = e.unitType;
                                n === ar && t.meleeSpawnPool.returnToPool(e), n === rr && t.rangedSpawnPool.returnToPool(e)
                            }
                        })), this.enemyUnits.clear(!0, !1)
                    }, n.emptyPlayerUnits = function () {
                        var t = this;
                        this.playerUnits.getChildren().forEach((function (e) {
                            if (e instanceof nr.default) {
                                e.handleRemoveFromScene();
                                var n = e.unitType;
                                n === ar && t.meleeSpawnPool.returnToPool(e), n === rr && t.rangedSpawnPool.returnToPool(e)
                            }
                        })), this.playerUnits.clear(!0, !1)
                    }, n.emptyProjectiles = function () {
                        this.rangedProjectiles.clear(!0, !0)
                    }, n.getPlayerUnits = function () {
                        return this.playerUnits.getChildren()
                    }, n.getEnemyUnits = function () {
                        return this.enemyUnits.getChildren()
                    }, n.getTotalPlayerUnitsHp = function () {
                        var t = 0;
                        return this.playerUnits.getChildren().forEach((function (e) {
                            e instanceof nr.default && (t += e.currentHp)
                        })), t
                    }, n.getTotalEnemyUnitsHp = function () {
                        var t = 0;
                        return this.enemyUnits.getChildren().forEach((function (e) {
                            e instanceof nr.default && (t += e.currentHp)
                        })), t
                    }, n.getPlayerMeleeSpawnedUnitsCount = function () {
                        return this.meleeSpawnPool.getPlayerSpawnedUnitsCount()
                    }, n.getPlayerRangedSpawnedUnitsCount = function () {
                        return this.rangedSpawnPool.getPlayerSpawnedUnitsCount()
                    }, n.createPlayerArcher = function (t, e, n) {
                        if (void 0 === n && (n = 1), this.isRunning()) {
                            var i = this.scene,
                                a = i.fieldManager,
                                r = i.spineManager,
                                s = 1 === a.getRemainingAvailablePlacement(),
                                o = this.checkIfBoardCanBeMerged(),
                                l = this.getLowestLevelPlayerRangedUnit(),
                                c = s && !o && l > n ? l : n,
                                u = this.createUnit({
                                    level: c,
                                    isPlayer: !0,
                                    unitType: rr
                                });
                            u.spawnUnitOnSquare(t, e, !0), r.addSpines([u]), this.resetAttackSpots(u), this.playerUnits.add(u)
                        }
                    }, n.createPlayerMelee = function (t, e, n) {
                        if (void 0 === n && (n = 1), this.isRunning()) {
                            var i = this.scene,
                                a = i.fieldManager,
                                r = i.spineManager,
                                s = 1 === a.getRemainingAvailablePlacement(),
                                o = this.checkIfBoardCanBeMerged(),
                                l = this.getLowestLevelPlayerMeleeUnit(),
                                c = s && !o && l > n ? l : n,
                                u = this.createUnit({
                                    level: c,
                                    isPlayer: !0,
                                    unitType: ar
                                });
                            u.spawnUnitOnSquare(t, e, !0), r.addSpines([u]), this.resetAttackSpots(u), this.playerUnits.add(u)
                        }
                    }, n.createEnemyUnits = function () {
                        var t = this;
                        this.scene.levelManager.enemyData.forEach((function (e) {
                            var n = t.createUnit({
                                level: e.level,
                                isPlayer: !1,
                                unitType: "melee" === e.type ? ar : rr
                            });
                            n.spawnUnitOnSquare(e.positionRow, e.positionColumn, !1), n.actions.prepare(), t.resetAttackSpots(n), t.enemyUnits.add(n)
                        }))
                    }, n.createPlayerUnitsNormal = function () {
                        0 === this.playerUnits.getLength() ? this.loadPlayerUnits() : this.reusePlayerUnits();
                        var t = this.scene.uiManager;
                        this.playerUnits.getLength() > 0 && t.enableStartButton()
                    }, n.createPlayerUnitsLevelBuilder = function () {
                        var t = this;
                        this.scene.levelManager.playerData.forEach((function (e) {
                            var n = t.createUnit({
                                level: e.level,
                                isPlayer: !0,
                                unitType: "melee" === e.type ? ar : rr
                            });
                            n.spawnUnitOnSquare(e.positionRow, e.positionColumn, !0), t.resetAttackSpots(n), t.playerUnits.add(n)
                        }))
                    }, n.stopDieEffectOfAllUnits = function () {
                        this.enemyUnits.getChildren().forEach((function (t) {
                            t instanceof nr.default && t.effectController.stopDieEffect()
                        })), this.playerUnits.getChildren().forEach((function (t) {
                            t instanceof nr.default && t.effectController.stopDieEffect()
                        }))
                    }, n.setReadyAllUnits = function () {
                        var t = this.playerUnits.getChildren();
                        vi()(t).call(t, (function (t, e) {
                            if (!(t instanceof nr.default) || !(e instanceof nr.default)) throw new $a;
                            var n = t.currentLocation,
                                i = n.rowId,
                                a = n.colId,
                                r = e.currentLocation,
                                s = r.rowId,
                                o = r.colId;
                            return i === s ? a - o : i - s
                        })), t.forEach((function (t) {
                            if (!(t instanceof nr.default)) throw new $a;
                            t.isDepthDirty = !0, t.actions.ready()
                        }));
                        var e = this.enemyUnits.getChildren();
                        vi()(e).call(e, (function (t, e) {
                            if (!(t instanceof nr.default) || !(e instanceof nr.default)) throw new $a;
                            var n = t.currentLocation,
                                i = n.rowId,
                                a = n.colId,
                                r = e.currentLocation,
                                s = r.rowId,
                                o = r.colId;
                            return i === s ? a - o : s - i
                        })), e.forEach((function (t) {
                            if (!(t instanceof nr.default)) throw new $a;
                            t.isDepthDirty = !0, t.actions.ready()
                        }))
                    }, n.getUnitBasedOnPosition = function (t, e) {
                        var n = null;
                        return this.playerUnits.getChildren().forEach((function (i) {
                            if (!(i instanceof nr.default)) throw new $a;
                            i.currentLocation.rowId === t && i.currentLocation.colId === e && (n = i)
                        })), n
                    }, n.mergeUnits = function (t, e) {
                        var n = this.scene.effectManger,
                            i = t.level + 1,
                            a = t.unitType,
                            r = e.currentLocation;
                        if (i > (a === ar ? lr : cr)) return !1;
                        var s = this.createUnit({
                            level: i,
                            unitType: a,
                            isPlayer: !0,
                            isMerged: !0
                        });
                        if (!s) return !1;
                        n.playMergeEffect(e), (0, ji.default)(50), t.handleRemoveFromScene(), e.handleRemoveFromScene(), a === ar && (this.meleeSpawnPool.returnToPool(t), this.meleeSpawnPool.returnToPool(e), this.playerUnits.remove(t, !0, !1), this.playerUnits.remove(e, !0, !1)), a === rr && (this.rangedSpawnPool.returnToPool(t), this.rangedSpawnPool.returnToPool(e), this.playerUnits.remove(t, !0, !1), this.playerUnits.remove(e, !0, !1)), this.latestUnitMergePayload = {
                            type: a,
                            level: i
                        }, s.spawnUnitOnSquare(r.rowId, r.colId, !0), this.playerUnits.add(s), this.resetAttackSpots(s);
                        var o = this.scene,
                            l = o.uiManager;
                        return o.spineManager.addSpines([s]), l.updateUIData(), this.savePlayerUnits(), this.checkIfNewUnitIsUnlocked(i, a) && (this.disableDragOnPlayerUnits(), this.scene.time.delayedCall(400, l.showUnitUnlockScreen)), !0
                    }, n.checkIfNewUnitIsUnlocked = function (t, e) {
                        if (e === ze.default.MELEE_UNIT_TYPE) {
                            var n = ur,
                                i = this.scene.player.getCustomData(n);
                            if (!i || "number" !== typeof i) return this.scene.player.setCustomData(n, t), !0;
                            if (t > i) return this.scene.player.setCustomData(n, t), !0
                        }
                        if (e === ze.default.RANGED_UNIT_TYPE) {
                            var a = hr,
                                r = this.scene.player.getCustomData(a);
                            if (!r || "number" !== typeof r) return this.scene.player.setCustomData(a, t), !0;
                            if (t > r) return this.scene.player.setCustomData(a, t), !0
                        }
                        return !1
                    }, n.reusePlayerUnits = function () {
                        var t = this;
                        this.playerUnits.getChildren().forEach((function (e) {
                            if (!(e instanceof nr.default)) throw new $a;
                            e.reuseUnitOnReady(), t.resetAttackSpots(e)
                        }))
                    }, n.loadPlayerUnits = function () {
                        var t = this,
                            e = this.scene.player.getCustomData(dr);
                        e && "string" === typeof e && e.split("/").forEach((function (e, n) {
                            e.split("-").forEach((function (e, i) {
                                if ("0" !== e) {
                                    var a = sr;
                                    if ("m" === e[0] ? a = ar : "r" === e[0] && (a = rr), a !== sr) {
                                        var r = t.createUnit({
                                            level: rn()(e.substring(1)),
                                            isPlayer: !0,
                                            unitType: "m" === e[0] ? ar : rr
                                        });
                                        r.spawnUnitOnSquare(n + 1, i + 1, !0), t.resetAttackSpots(r), t.playerUnits.add(r)
                                    }
                                }
                            }))
                        }))
                    }, n.checkIfBoardCanBeMerged = function () {
                        var t = this.playerUnits.getChildren(),
                            e = new(Xa()),
                            n = new(Xa());
                        t.forEach((function (t) {
                            if (t instanceof nr.default) {
                                var i = t.level;
                                switch (t.unitType) {
                                    case ar:
                                        var a = e.get(i);
                                        a ? e.set(i, a + 1) : e.set(i, 1);
                                        break;
                                    case rr:
                                        var r = n.get(i);
                                        r ? n.set(i, r + 1) : n.set(i, 1)
                                }
                            }
                        }));
                        var i = qa()(e, (function (t) {
                                return {
                                    key: t[0],
                                    value: t[1]
                                }
                            })).some((function (t) {
                                var e = t.key;
                                return t.value > 1 && e + 1 <= lr
                            })),
                            a = qa()(n, (function (t) {
                                return {
                                    key: t[0],
                                    value: t[1]
                                }
                            })).some((function (t) {
                                var e = t.key;
                                return t.value > 1 && e + 1 <= cr
                            }));
                        return i || a
                    }, n.createUnit = function (t) {
                        var e = t.id,
                            n = t.level,
                            i = t.unitType,
                            a = t.isPlayer,
                            r = t.isMerged;
                        switch (i) {
                            case ze.default.MELEE_UNIT_TYPE:
                                return e ? this.meleeSpawnPool.requestUnitById(e, a, r) : n ? this.meleeSpawnPool.requestUnitByLevel(n, a, r) : this.meleeSpawnPool.requestUnitByLevel(-1, a, r);
                            case ze.default.RANGED_UNIT_TYPE:
                                return e ? this.rangedSpawnPool.requestUnitById(e, a, r) : n ? this.rangedSpawnPool.requestUnitByLevel(n, a, r) : this.rangedSpawnPool.requestUnitByLevel(-1, a, r);
                            default:
                                return this.meleeSpawnPool.requestUnitByLevel(-1, a, r)
                        }
                    }, n.preparePlayerUnits = function () {
                        this.playerUnits.getChildren().forEach((function (t) {
                            if (!(t instanceof nr.default)) throw new $a;
                            t.actions.prepare()
                        }))
                    }, n.enableDragOnPlayerUnits = function () {
                        this.playerUnits.getChildren().forEach((function (t) {
                            t instanceof nr.default && t.startEventListener()
                        }))
                    }, n.disableDragOnPlayerUnits = function () {
                        this.playerUnits.getChildren().forEach((function (t) {
                            t instanceof nr.default && t.removeEventListener()
                        }))
                    }, n.serializePlayerUnitData = function () {
                        var t = this.playerUnits.getChildren();
                        vi()(t).call(t, (function (t, e) {
                            if (!(t instanceof nr.default) || !(e instanceof nr.default)) throw new $a;
                            var n = t.currentLocation,
                                i = n.rowId,
                                a = n.colId,
                                r = e.currentLocation,
                                s = r.rowId,
                                o = r.colId;
                            return i === s ? a - o : i - s
                        }));
                        for (var e = "", n = 0, i = 0; i < 3; i++) {
                            for (var a = "", r = 0; r < 5; r++) {
                                var s = n >= t.length ? null : t[n];
                                if (s instanceof nr.default) {
                                    var o = s.currentLocation,
                                        l = o.rowId,
                                        c = o.colId;
                                    if (l === i + 1 && c === r + 1) a += this.createUnitDataForSaving(s), n++;
                                    else a += "0"
                                } else a += "0";
                                4 !== r && (a += "-")
                            }
                            e += a, 2 !== i && (e += "/")
                        }
                        return e
                    }, n.createUnitDataForSaving = function (t) {
                        if (!t) return "0";
                        var e = t.unitType,
                            n = t.level;
                        return "" + (e === ar ? "m" : "r") + n
                    }, n.savePlayerUnits = function () {
                        this.scene.levelManager.isInLevelBuilderLevel() || this.scene.updateUnitData()
                    }, n.calculatePlayerTotalUnitsUsed = function () {
                        var t = this.playerUnits.getChildren(),
                            e = 0,
                            n = 0;
                        t.forEach((function (t) {
                            if (!(t instanceof nr.default)) throw new $a;
                            if (t.unitType === ar) {
                                var i = Math.pow(2, t.level - 1);
                                e += i
                            }
                            if (t.unitType === rr) {
                                var a = Math.pow(2, t.level - 1);
                                n += a
                            }
                        })), this.meleeSpawnPool.setSpawnedUnits(e), this.rangedSpawnPool.setSpawnedUnits(n)
                    }, n.getLowestLevelPlayerMeleeUnit = function () {
                        var t = this.playerUnits.getChildren(),
                            e = Cn()(t).call(t, (function (t) {
                                if (!(t instanceof nr.default)) throw new $a;
                                return t.unitType === ar
                            }));
                        return 0 === e.length ? 1 : Qa()(e).call(e, (function (t, e) {
                            if (!(e instanceof nr.default)) throw new $a;
                            return t && t instanceof nr.default ? e.level < t.level ? e : t : e
                        })).level
                    }, n.getLowestLevelPlayerRangedUnit = function () {
                        var t = this.playerUnits.getChildren(),
                            e = Cn()(t).call(t, (function (t) {
                                if (!(t instanceof nr.default)) throw new $a;
                                return t.unitType === rr
                            }));
                        return 0 === e.length ? 1 : Qa()(e).call(e, (function (t, e) {
                            if (!(e instanceof nr.default)) throw new $a;
                            return t && t instanceof nr.default ? e.level < t.level ? e : t : e
                        })).level
                    }, n.getUnitDataForUnlockingScreen = function () {
                        var t = this.latestUnitMergePayload,
                            e = t.level;
                        return t.type === ze.default.MELEE_UNIT_TYPE ? this.meleeSpawnPool.getUnitDataByLevel(e) : this.rangedSpawnPool.getUnitDataByLevel(e)
                    }, n.resetAttackSpots = function (t) {
                        t.attackController.resetAttackSpots()
                    }, n.hideAllUnits = function () {
                        this.enemyUnits.children.each((function (t) {
                            t instanceof nr.default && (t.kill(), t.uiController.killHpBar())
                        })), this.playerUnits.children.each((function (t) {
                            t instanceof nr.default && (t.kill(), t.uiController.killHpBar())
                        }))
                    }, n.hideAllProjectiles = function () {
                        this.rangedProjectiles.kill()
                    }, n.showAllProjectiles = function () {
                        this.rangedProjectiles.revive()
                    }, n.showAllAliveUnits = function () {
                        this.enemyUnits.children.each((function (t) {
                            t instanceof nr.default && (t.isKilled() || t.revive())
                        })), this.playerUnits.children.each((function (t) {
                            t instanceof nr.default && (t.isKilled() || t.revive())
                        }))
                    }, n.showAllHpBarUnits = function () {
                        this.enemyUnits.children.each((function (t) {
                            t instanceof nr.default && (t.isKilled() || t.uiController.reviveHpBar())
                        })), this.playerUnits.children.each((function (t) {
                            t instanceof nr.default && (t.isKilled() || t.uiController.reviveHpBar())
                        }))
                    }, n.getSameCoupleUnits = function () {
                        for (var t = new(Xa()), e = this.playerUnits.getChildren(), n = 0; n < e.length; n++) {
                            var i = e[n];
                            if (!(i instanceof nr.default)) throw new $a;
                            var a = i.level,
                                r = i.unitType;
                            if (!(r === ze.default.MELEE_UNIT_TYPE && a >= lr) && !(r === ze.default.RANGED_UNIT_TYPE && a >= cr)) {
                                var s = "" + a + r,
                                    o = t.get(s);
                                if (o) return {
                                    unit1: o,
                                    unit2: i
                                };
                                t.set(s, i)
                            }
                        }
                        return null
                    }, n.getFirstMeleeUnit = function () {
                        for (var t = this.playerUnits.getChildren(), e = 0; e < t.length; e++) {
                            var n = t[e];
                            if (!(n instanceof nr.default)) throw new $a;
                            if (n.unitType === ze.default.MELEE_UNIT_TYPE) return n
                        }
                        return null
                    }, n.getFirstRangedUnit = function () {
                        for (var t = this.playerUnits.getChildren(), e = 0; e < t.length; e++) {
                            var n = t[e];
                            if (!(n instanceof nr.default)) throw new $a;
                            if (n.unitType === ze.default.RANGED_UNIT_TYPE) return n
                        }
                        return null
                    }, e
                }(C),
                pr = fr,
                gr = (n(52), n(196), n(588), n(44), n(470)),
                vr = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "NewScoreIsBad", i.message = e || "The new score is bad", i.payload = n, i
                    }
                    return (0, a.default)(e, t), e
                }((0, Ja.default)(Error)),
                mr = (n(30), n(197)),
                Er = n(91),
                yr = n(465),
                Ar = ((0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).gameplay.mode
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).gameplay.status
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).gameplay.rescued
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).gameplay.startAt
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).gameplay.finishAt
                }], (function (t) {
                    return t
                })), n(110)),
                Tr = n(29),
                Sr = n(35),
                Mr = n.n(Sr),
                wr = n(113),
                xr = n.n(wr),
                Cr = n(172),
                Ir = n(319),
                br = GameCore.Configs,
                Rr = br.AppId,
                Pr = br.OtherHost,
                _r = br.LeadersBoard,
                kr = _r.UseMock,
                Lr = _r.LeaderboardId,
                Dr = (function () {
                    var t = (0, i.default)(s().mark((function t(e) {
                        var n, i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (n = {
                                            appId: Rr,
                                            resetScore: 0,
                                            numberOfLeaders: 15,
                                            timezone: "utc+0",
                                            sortOrder: "desc",
                                            statistics: "max",
                                            resettable: "manually",
                                            description: "no description"
                                        }, !kr) {
                                        t.next = 5;
                                        break
                                    }
                                    return t.next = 4, (0, Ir.sleepAsync)(1e3);
                                case 4:
                                    return t.abrupt("return", (0, Tr.default)({}, n, e, {
                                        _id: Lr,
                                        type: "app_leaderboard",
                                        description: "mockup_leaderboard",
                                        createdAt: new Date(Date.now()).toISOString(),
                                        updatedAt: new Date(Date.now()).toISOString()
                                    }));
                                case 5:
                                    return "leaderboards", t.next = 8, (0, Cr.post)("leaderboards", (0, Tr.default)({}, n, e), {}, Pr);
                                case 8:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 10:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, i.default)(s().mark((function t(e, n) {
                        var i, a, r, o, l, c, u, h, d, f, p, g;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (void 0 === n && (n = {}), i = [], !kr) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.next = 5, (0, Ir.sleepAsync)(1e3);
                                case 5:
                                    return l = (o = n).limit, c = void 0 === l ? 10 : l, u = o.offset, h = void 0 === u ? 0 : u, t.abrupt("return", Mr()(a = xr()(r = new Array(c)).call(r, null)).call(a, (function (t, e) {
                                        var n = (e + 1) * (h + 1);
                                        return {
                                            playerId: "player-0" + n,
                                            name: "MPlayer " + n,
                                            photo: "./assets/images/others/avatar.jpg",
                                            rank: n,
                                            score: Math.floor(1e5 / n + 1e4 * Math.random())
                                        }
                                    })));
                                case 7:
                                    return d = GameCore.Utils.String.params(n), f = "leaderboards/" + e + "/leaders", t.next = 11, (0, Cr.get)(f + "?" + d, {}, Pr);
                                case 11:
                                    if ((p = t.sent) && (null == p || !p.error)) {
                                        t.next = 14;
                                        break
                                    }
                                    throw new Error((null == p ? void 0 : p.error) || "Leaderboard not found");
                                case 14:
                                    if (!((g = (null == p ? void 0 : p.data) || []).length < 1)) {
                                        t.next = 17;
                                        break
                                    }
                                    return t.abrupt("return", i);
                                case 17:
                                    return i = g, t.abrupt("return", i);
                                case 19:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, i.default)(s().mark((function t(e, n, i) {
                        var a;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, (0, Cr.post)("leaderboards/" + e + "/players/" + n, {
                                        score: i
                                    }, {}, Pr);
                                case 2:
                                    return a = t.sent, t.abrupt("return", (null == a ? void 0 : a.data) || {});
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "CurrentTournamentScoreIsNotBest", i.message = e || "The new score is not best", i.payload = n, i
                    }(0, a.default)(e, t)
                }((0, Ja.default)(Error)), GameCore.Configs.Tournament.UseLeaderboard, function () {
                    var t = (0, i.default)(s().mark((function t() {
                        var e, n, i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, e = window.game.facebook, t.next = 4, e.getTournamentAsync();
                                case 4:
                                    return n = t.sent, i = JSON.parse(n.getPayload() || "{}"), t.abrupt("return", i.leaderboardId);
                                case 9:
                                    return t.prev = 9, t.t0 = t.catch(0), t.abrupt("return", null);
                                case 12:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 9]
                        ])
                    })))
                }(), function () {
                    var t = (0, i.default)(s().mark((function t() {
                        var e;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, e = window.game.facebook, t.next = 4, e.getTournamentAsync();
                                case 4:
                                    return t.abrupt("return", t.sent);
                                case 7:
                                    return t.prev = 7, t.t0 = t.catch(0), t.abrupt("return", null);
                                case 11:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 7]
                        ])
                    })))
                }(), n(321)),
                Or = (n(587), n(589), n(193)),
                Nr = (n(194), n(464), n(600), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).stats.data
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).stats.current
                }], (function (t) {
                    return t
                })), (0, Er.createSelector)([function (t) {
                    return (0, yr.getState)(t).stats.isRequesting
                }], (function (t) {
                    return t
                })), n(599), function (t, e) {
                    return {
                        type: Or.MATCH_STATS_DATA_UPDATE,
                        payload: {
                            playerId: t,
                            stats: e
                        }
                    }
                }),
                Ur = function (t) {
                    return {
                        type: Or.MATCH_STATS_CURRENT_UPDATE,
                        payload: {
                            stats: t
                        }
                    }
                },
                Br = function (t, e) {
                    return function (n) {
                        try {
                            var i = window.game.player,
                                a = i.getPlayerId();
                            (0, gr.setScoreAsync)(a, t, e).catch((function (t) {}));
                            var r = i.getPlayerData(),
                                s = r.score,
                                o = void 0 === s ? 0 : s,
                                l = r.level;
                            o < t && i.setScore(t);
                            var c = {
                                score: t,
                                level: l
                            };
                            n(Nr(a, c)), n(Ur(c))
                        } catch (u) {
                            if (u instanceof vr) return;
                            (0, Ar.sendException)(u)
                        }
                    }
                },
                Fr = n(173),
                Gr = n(622),
                Hr = "GuideOne",
                Vr = "GuideTwo",
                Yr = "GuidePrevent",
                Wr = "GuideThree",
                Kr = function () {
                    function t(t) {
                        var e = this;
                        this.manager = void 0, this.startGuide = function () {
                            var t = e.manager.scene.uiManager;
                            e.manager.scene.time.delayedCall(500, (function () {
                                e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                    step: 1
                                })
                            })), t.showUIForGuide1();
                            var n = t.getStartBtnWorldPosition();
                            e.showTapHand(n.x, n.y), t.addOnceCallbackForStartBtn(e.closeTutorial)
                        }, this.closeTutorial = function () {
                            e.manager.stopTutorial()
                        }, this.manager = t
                    }
                    var e = t.prototype;
                    return e.setup = function () {
                        this.startGuide()
                    }, e.showTapHand = function (t, e) {
                        var n = this.manager.tapHand;
                        n.setDepth(d.default.ON_TOP), n.setPosition(t + n.width / 2, e + n.height / 2), n.revive(), n.stopAnimation(), n.playAnimation(300)
                    }, t
                }(),
                zr = Kr,
                Xr = n(574),
                jr = function () {
                    function t(t) {
                        var e = this;
                        this.manager = void 0, this.currentStep = void 0, this.targetUnit1 = void 0, this.targetUnit2 = void 0, this.wrongUnit = void 0, this.startGuide = function () {
                            var t = e.manager.scene,
                                n = t.uiManager,
                                i = t.unitManager.getPlayerUnits(),
                                a = i.length,
                                r = !1;
                            if (i.forEach((function (t) {
                                    2 === t.level && (r = !0)
                                })), 2 === a && r) e.showStep3();
                            else if (a >= 3) e.handleOnClick();
                            else {
                                e.currentStep = 1, e.manager.scene.giveEnoughCoins("MELEE"), n.showUIForGuide3(1);
                                var s = n.getMeleeBlockConfig();
                                e.createHighlightItem(s), e.showTapHand(s.worldX, s.worldY), e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                    step: 6
                                }), n.addOnceCallbackForMeleeBlock(e.handleOnClick), e.manager.scene.input.setTopOnly(!0)
                            }
                        }, this.handleOnClick = function () {
                            var t = e.manager.scene,
                                n = t.uiManager,
                                i = t.unitManager;
                            e.currentStep = 2, e.manager.scene.input.setTopOnly(!1), e.manager.background.kill(), n.showUIForGuide3(2), e.manager.tapHand.stopAnimation(), e.manager.tapHand.kill(), e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                step: 7
                            });
                            var a = i.getSameCoupleUnits(),
                                r = i.getFirstRangedUnit();
                            a && r ? (e.targetUnit1 = a.unit2, e.targetUnit2 = a.unit1, e.wrongUnit = r, e.createHint()) : e.showStep3()
                        }, this.handleOnDragEnd = function () {
                            if (e.manager.hand.kill(), e.targetUnit1.removeOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, e.handleOnDragEnd), e.targetUnit2.removeOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, e.handleOnDragEnd), e.wrongUnit.removeOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, e.handleOnDragEnd), e.targetUnit1.isKilled() || e.targetUnit2.isKilled()) return e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                step: 8
                            }), void e.showStep3();
                            e.createHint()
                        }, this.closeTutorial = function () {
                            e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                step: 10
                            }), e.manager.scene.time.delayedCall(500, (function () {
                                e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_COMPLETE), e.manager.scene.storage.dispatch((0, Xr.incUserGuideDisplays)())
                            })), e.currentStep = 0, e.manager.stopTutorial()
                        }, this.manager = t, this.currentStep = 0
                    }
                    var e = t.prototype;
                    return e.setup = function () {
                        this.startGuide()
                    }, e.createHighlightItem = function (t) {
                        var e = t.worldX,
                            n = t.worldY,
                            i = t.width,
                            a = t.height;
                        this.manager.createMask(e - i / 2 - 20, n - a / 2 - 20, i + 40, a + 40)
                    }, e.createHint = function () {
                        var t = this.targetUnit1.getWorldPosition(),
                            e = t.x,
                            n = t.y,
                            i = this.targetUnit2.getWorldPosition(),
                            a = i.x,
                            r = i.y;
                        this.createHandAt(e, n, a, r), this.createEvents()
                    }, e.createEvents = function () {
                        this.targetUnit1.addOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, this.handleOnDragEnd), this.targetUnit2.addOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, this.handleOnDragEnd), this.wrongUnit.addOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, this.handleOnDragEnd)
                    }, e.createHandAt = function (t, e, n, i) {
                        this.manager.hand.setDepth(d.default.ON_TOP), this.manager.hand.setPosition(t, e), this.manager.hand.revive(), this.manager.hand.setTarget(n, i), this.manager.hand.stopAnimation(), this.manager.hand.playAnimation(300)
                    }, e.showStep3 = function () {
                        var t = this.manager.scene.uiManager;
                        this.currentStep = 3, t.showUIForGuide3(3);
                        var e = t.getStartBtnWorldPosition();
                        this.showTapHand(e.x, e.y), this.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                            step: 9
                        }), t.addOnceCallbackForStartBtn(this.closeTutorial)
                    }, e.showTapHand = function (t, e) {
                        var n = this.manager.tapHand;
                        n.setDepth(d.default.ON_TOP), n.setPosition(t + n.width / 2, e + n.height / 2), n.revive(), n.stopAnimation(), n.playAnimation(300)
                    }, e.reupdateUI = function () {
                        var t = this.manager.scene.uiManager;
                        0 !== this.currentStep && t.showUIForGuide3(this.currentStep)
                    }, t
                }(),
                qr = jr,
                Zr = function () {
                    function t(t) {
                        var e = this;
                        this.manager = void 0, this.currentStep = void 0, this.guideUnit = void 0, this.targetSquare = void 0, this.startGuide = function () {
                            var t = e.manager.scene,
                                n = t.uiManager;
                            if (2 !== t.unitManager.getPlayerUnits().length) {
                                e.currentStep = 1, e.manager.scene.giveEnoughCoins("RANGED"), n.showUIForGuide2(1);
                                var i = n.getRangedBlockConfig();
                                e.createHighlightItem(i), e.showTapHand(i.worldX, i.worldY), e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                    step: 2
                                }), n.addOnceCallbackForRangedBlock(e.handleOnClickRangedBlock), e.manager.scene.input.setTopOnly(!0)
                            } else e.showStep3()
                        }, this.handleOnClickRangedBlock = function () {
                            var t = e.manager.scene,
                                n = t.uiManager,
                                i = t.unitManager,
                                a = t.fieldManager;
                            e.currentStep = 2, e.manager.scene.input.setTopOnly(!1), e.manager.background.kill(), n.showUIForGuide2(2), e.manager.tapHand.stopAnimation(), e.manager.tapHand.kill(), e.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                                step: 3
                            });
                            var r = i.getFirstMeleeUnit(),
                                s = a.getSquareBasedOnIndex(1, 3);
                            if (!s || !r) throw new Error("Guide fail due to target square or unit null");
                            e.guideUnit = r, e.targetSquare = s, e.guideUnit.currentLocation !== e.targetSquare ? e.createHint() : e.showStep3()
                        }, this.handleOnDragEnd = function () {
                            var t = e.manager.scene.unitManager;
                            e.manager.hand.kill(), t.getPlayerUnits().forEach((function (t) {
                                t.removeOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, e.handleOnDragEnd)
                            }));
                            var n = e.guideUnit.getLastDragPos();
                            n && (n.y < 268 || n.y > 458 || n.x < 29 || n.x > 346) && e.guideUnit.dragUnitOnto(1, 3), e.showStep3()
                        }, this.closeTutorial = function () {
                            e.currentStep = 0, e.manager.stopTutorial()
                        }, this.manager = t, this.currentStep = 0
                    }
                    var e = t.prototype;
                    return e.setup = function () {
                        this.startGuide()
                    }, e.createHighlightItem = function (t) {
                        var e = t.worldX,
                            n = t.worldY,
                            i = t.width,
                            a = t.height;
                        this.manager.createMask(e - i / 2 - 20, n - a / 2 - 20, i + 40, a + 40)
                    }, e.showStep3 = function () {
                        var t = this.manager.scene.uiManager;
                        this.currentStep = 3, t.showUIForGuide2(3);
                        var e = t.getStartBtnWorldPosition();
                        this.showTapHand(e.x, e.y), this.manager.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_STEP, {
                            step: 4
                        }), t.addOnceCallbackForStartBtn(this.closeTutorial)
                    }, e.createHint = function () {
                        var t = this,
                            e = this.manager.scene.unitManager,
                            n = this.guideUnit.getWorldPosition(),
                            i = n.x,
                            a = n.y,
                            r = this.targetSquare.getWorldPosition(),
                            s = r.x,
                            o = r.y;
                        this.createHandAt(i, a, s, o), e.getPlayerUnits().forEach((function (e) {
                            e.addOnceEvent(Phaser.Input.Events.GAMEOBJECT_DRAG_END, t.handleOnDragEnd)
                        }))
                    }, e.createHandAt = function (t, e, n, i) {
                        this.manager.hand.setDepth(d.default.ON_TOP), this.manager.hand.setPosition(t, e), this.manager.hand.revive(), this.manager.hand.setTarget(n, i), this.manager.hand.stopAnimation(), this.manager.hand.playAnimation(300)
                    }, e.showTapHand = function (t, e) {
                        var n = this.manager.tapHand;
                        n.setDepth(d.default.ON_TOP), n.setPosition(t + n.width / 2, e + n.height / 2), n.revive(), n.stopAnimation(), n.playAnimation(300)
                    }, e.reupdateUI = function () {
                        var t = this.manager.scene.uiManager;
                        0 !== this.currentStep && t.showUIForGuide2(this.currentStep)
                    }, t
                }(),
                Qr = Zr,
                Jr = function () {
                    function t(t) {
                        var e = this;
                        this.manager = void 0, this.startGuide = function () {
                            var t = e.manager.scene.uiManager;
                            t.showUIForGuidePrevent();
                            var n = t.getStartBtnWorldPosition();
                            e.showTapHand(n.x, n.y), t.addOnceCallbackForStartBtn(e.closeTutorial)
                        }, this.closeTutorial = function () {
                            e.manager.stopTutorial()
                        }, this.manager = t
                    }
                    var e = t.prototype;
                    return e.setup = function () {
                        this.startGuide()
                    }, e.showTapHand = function (t, e) {
                        var n = this.manager.tapHand;
                        n.setDepth(d.default.ON_TOP), n.setPosition(t + n.width / 2, e + n.height / 2), n.revive(), n.stopAnimation(), n.playAnimation(300)
                    }, e.reupdateUI = function () {
                        this.manager.scene.uiManager.showUIForGuidePrevent()
                    }, t
                }(),
                $r = Jr,
                ts = M.STATUS,
                es = GameCore.Configs.Tutorial,
                ns = Pn.default.LEVEL_PROGRESS,
                is = h.default.DEFAULT,
                as = is.KEY,
                rs = is.FRAME,
                ss = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.tutorialId = void 0, n.lastTutorialId = void 0, n.isTutorialEnable = void 0, n.tutorialsDisplayed = void 0, n.isAnalyticFirstSent = !0, n.hand = void 0, n.tapHand = void 0, n.background = void 0, n.maskGraphics = void 0, n.tutOne = void 0, n.tutTwo = void 0, n.tutPrevent = void 0, n.tutThree = void 0, n.startTutorial = function (t) {
                            if (!n.isRunning()) return !1;
                            if (n.isNothingToDisplay()) return n.stop(), n.setTutorialEnable(!1), !1;
                            if (n.hasDisplayedEnough(t)) return !1;
                            switch (n.background.kill(), t) {
                                case Hr:
                                    n.tutOne = new zr((0, u.default)(n)), n.tutOne.setup();
                                    break;
                                case Vr:
                                    n.tutTwo = new Qr((0, u.default)(n)), n.tutTwo.setup();
                                    break;
                                case Yr:
                                    n.tutPrevent = new $r((0, u.default)(n)), n.tutPrevent.setup();
                                    break;
                                case Wr:
                                    n.tutThree = new qr((0, u.default)(n)), n.tutThree.setup();
                                    break;
                                default:
                                    return !1
                            }
                            return !!n.isRunning() && (n.tutorialId = t, n.lastTutorialId = t, n.tutorialsDisplayed.push(n.tutorialId), !0)
                        }, n.scene = e, n.createHand(), n.createTapHand(), n.createBackground(), n.initTutorialData(), n.checkIsValidForTutorial(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.getLastTutorialId = function () {
                        return this.lastTutorialId
                    }, n.setTutorialEnable = function (t) {
                        this.isTutorialEnable = t
                    }, n.initTutorialData = function () {
                        this.tutorialId = "", this.lastTutorialId = "", this.setTutorialEnable(!0), this.tutorialsDisplayed = []
                    }, n.init = function () {
                        this.hand.kill(), this.tapHand.kill(), this.background.kill(), this.setState(ts.READY)
                    }, n.start = function () {
                        this.isRunning() || this.isTutorialEnable && this.setState(ts.RUNNING)
                    }, n.stop = function () {
                        this.isRunning() && (this.checkIsValidForTutorial(), this.scene.tweens.killTweensOf([this.hand, this.tapHand, this.background]), this.setState(ts.STOPPED))
                    }, n.displayCount = function (t) {
                        var e;
                        return Cn()(e = this.tutorialsDisplayed).call(e, (function (e) {
                            return e === t
                        })).length
                    }, n.hasDisplayedEnough = function (t) {
                        if (!Object.prototype.hasOwnProperty.call(es.NumberOfTutorial, t)) return !0;
                        var e = es.NumberOfTutorial[t];
                        return !GameCore.Utils.Valid.isNumber(e) || -1 !== e && this.displayCount(t) >= e
                    }, n.isNothingToDisplay = function () {
                        var t, e = this;
                        return this.scene.levelManager.getCurrentLevelId() >= 3 || Cn()(t = wn()(es.NumberOfTutorial)).call(t, (function (t) {
                            return !e.hasDisplayedEnough(t)
                        })).length < 1
                    }, n.showTutorial = function () {
                        if (this.isRunning()) {
                            this.isAnalyticFirstSent && (this.scene.analytics.event(_a.AnalyticsEvents.TUTORIAL_BEGIN), this.isAnalyticFirstSent = !1);
                            var t = this.scene.unitManager,
                                e = this.scene.levelManager.getCurrentLevelId();
                            if (1 === e) {
                                if (1 === t.getPlayerUnits().length && !this.hasDisplayedEnough(Hr)) return void this.startTutorial(Hr);
                                if (!this.hasDisplayedEnough(Vr)) return void this.startTutorial(Vr);
                                this.startTutorial(Yr)
                            } else 2 === e && this.startTutorial(Wr)
                        }
                    }, n.reupdateGuideUI = function () {
                        "" !== this.tutorialId && (this.tutorialId === Vr ? this.tutTwo.reupdateUI() : this.tutorialId === Yr ? this.tutPrevent.reupdateUI() : this.tutorialId === Wr && this.tutThree.reupdateUI())
                    }, n.stopTutorial = function () {
                        this.tutorialId = "", this.hand.kill(), this.tapHand.kill(), this.background.kill()
                    }, n.checkIsValidForTutorial = function () {
                        var t = this.scene.player.getCustomData(ns),
                            e = GameCore.Utils.Valid.isNumber(t) ? t : 0,
                            n = this.scene.player.getPlayerIsNew() && e < 2;
                        this.setTutorialEnable(n)
                    }, n.createHand = function () {
                        this.hand = new S(this.scene), this.hand.kill(), this.hand.setDepth(d.default.PRIORITY)
                    }, n.createTapHand = function () {
                        this.tapHand = new Gr.default(this.scene), this.tapHand.kill(), this.tapHand.setDepth(d.default.PRIORITY)
                    }, n.createBackground = function () {
                        this.background = this.scene.make.image({
                            key: as,
                            frame: rs.BLANK
                        }), this.background.setInteractive({}), this.scene.input.setTopOnly(!1), this.background.setTint(0), this.background.setAlpha(.8), this.background.setDepth(d.default.PRIORITY);
                        var t = this.scene.gameZone,
                            e = t.displayWidth + 100,
                            n = t.displayHeight + 100;
                        this.background.setDisplaySize(e, n), Phaser.Display.Align.In.Center(this.background, this.scene.gameZone)
                    }, n.createMask = function (t, e, n, i, a) {
                        var r;
                        void 0 === a && (a = 10), null == (r = this.maskGraphics) || r.destroy(), this.maskGraphics = this.scene.make.graphics({
                            fillStyle: {
                                color: 16711680,
                                alpha: 1
                            }
                        }), this.maskGraphics.setName("MaskGraphics"), this.maskGraphics.fillRoundedRect(t, e, n, i, a), this.background.setActive(!0), this.background.setVisible(!0), this.background.clearMask(!0), this.background.setMask(this.maskGraphics.createGeometryMask()), this.background.mask.invertAlpha = !0, this.runShowMaskAnimation()
                    }, n.createMultiMask = function (t) {
                        var e, n = this;
                        null == (e = this.maskGraphics) || e.destroy(), this.maskGraphics = this.scene.make.graphics({
                            fillStyle: {
                                color: 16711680,
                                alpha: 1
                            }
                        }), this.maskGraphics.setName("MaskGraphics"), t.forEach((function (t) {
                            n.maskGraphics.fillRoundedRect(t.x, t.y, t.width, t.height, t.radius)
                        })), this.background.setVisible(!0), this.background.setActive(!0), this.background.clearMask(!0), this.background.setMask(this.maskGraphics.createGeometryMask()), this.background.mask.invertAlpha = !0, this.runShowMaskAnimation()
                    }, n.runShowMaskAnimation = function () {
                        var t = [this.background];
                        this.background.setAlpha(0), this.scene.tweens.killTweensOf(t), this.scene.tweens.add({
                            targets: t,
                            duration: 300,
                            ease: Phaser.Math.Easing.Quadratic.Out,
                            props: {
                                alpha: {
                                    from: 0,
                                    to: .8
                                }
                            }
                        })
                    }, e
                }(C),
                os = n(327),
                ls = n(455),
                cs = n(322),
                us = n(339),
                hs = Pn.default.LEVEL_PROGRESS,
                ds = function (t) {
                    function e() {
                        for (var e, n, a = arguments.length, r = new Array(a), o = 0; o < a; o++) r[o] = arguments[o];
                        return (n = t.call.apply(t, l()(e = [this]).call(e, r)) || this).uiManager = void 0, n.unitManager = void 0, n.coinManager = void 0, n.fieldManager = void 0, n.levelManager = void 0, n.powerManager = void 0, n.stateManager = void 0, n.spineManager = void 0, n.effectManger = void 0, n.tutorialManager = void 0, n.animationManager = void 0, n.difficultyManager = void 0, n.accessibilityManager = void 0, n.startButton = void 0, n.restartButton = void 0, n.gameMode = void 0, n.levelStartAt = void 0, n.levelEndAt = void 0, n.isBannerAdShowed = void 0, n.handlePauseScene = function () {
                            n.unitManager.hideAllUnits(), n.unitManager.hideAllProjectiles(), n.spineManager.hideAllSpines(), n.effectManger.hideAllTextEffects()
                        }, n.handleResumeScene = function () {
                            n.stateManager.isInLevelLoadingState() || n.unitManager.showAllAliveUnits(), n.stateManager.isInPlayingState() && n.unitManager.showAllHpBarUnits(), n.unitManager.showAllProjectiles(), n.spineManager.showAllSpines(), n.effectManger.showAllTextEffects()
                        }, n.handleSpawnRanged = function () {
                            if (n.stateManager.isInReadyState()) {
                                var t = n.coin.getCurrentCoins();
                                if (t instanceof Ke.default) {
                                    var e = n.unitManager.getPlayerRangedSpawnedUnitsCount(),
                                        i = n.coinManager.getUnitPrice(e),
                                        a = n.getBuyingUnitLevel();
                                    if (t.smallerThan(i)) {
                                        if (t.toString() !== i.toString()) return n.uiManager.showUnitRewardScreen("RANGED"), void n.audio.playSound(pn.default.BUTTON_CLICK);
                                        i = t
                                    }
                                    var r = n.fieldManager.getAvailablePlacement();
                                    r && (n.coin.minusCoins(i.baseValue, i.suffix), n.unitManager.createPlayerArcher(r.rowId, r.colId, a), 0 === n.fieldManager.getRemainingAvailablePlacement() && n.effectManger.playFullFloatText(), n.updateUI(), n.unitManager.savePlayerUnits(), n.audio.playSound(pn.default.BUTTON_CLICK))
                                }
                            }
                        }, n.handleSpawnMelee = function () {
                            if (n.stateManager.isInReadyState()) {
                                var t = n.unitManager.getPlayerMeleeSpawnedUnitsCount(),
                                    e = n.coinManager.getUnitPrice(t),
                                    i = n.getBuyingUnitLevel(),
                                    a = n.coin.getCurrentCoins();
                                if (a instanceof Ke.default) {
                                    if (a.smallerThan(e)) {
                                        if (a.toString() !== e.toString()) return n.uiManager.showUnitRewardScreen("MELEE"), void n.audio.playSound(pn.default.BUTTON_CLICK);
                                        e = a
                                    }
                                    var r = n.fieldManager.getAvailablePlacement();
                                    r && (n.coin.minusCoins(e.baseValue, e.suffix), n.unitManager.createPlayerMelee(r.rowId, r.colId, i), 0 === n.fieldManager.getRemainingAvailablePlacement() && n.effectManger.playFullFloatText(), n.updateUI(), n.unitManager.savePlayerUnits(), n.audio.playSound(pn.default.BUTTON_CLICK))
                                }
                            }
                        }, n.run = function () {
                            n.stateManager.init()
                        }, n.quit = function () {
                            n.stateManager.quit()
                        }, n.prepareRound = function () {
                            n.levelStartAt = Date.now(), n.gameMode === c.default.NORMAL && n.time.delayedCall(1e3, n.uiManager.showOfflineScreen), n.stateManager.ready()
                        }, n.restartScene = function () {
                            n.stateManager.init()
                        }, n.startRound = function () {
                            n.stateManager.play(), n.audio.playSound(pn.default.START_BATTLE)
                        }, n.replayRound = function () {
                            if (n.unitManager.hideAllUnits(), n.gameMode === c.default.BATTLE) {
                                var t = n.game.battle.getReplayOpponentId();
                                if (!t) return void n.stateManager.levelLoading();
                                n.game.battle.createBattle(t)
                            } else n.stateManager.ready()
                        }, n.nextRound = function () {
                            n.unitManager.hideAllUnits(), n.stateManager.levelLoading()
                        }, n.resetLevel = (0, i.default)(s().mark((function t() {
                            var e, i, a;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = new ls.default({}).toObject(), i = e.coins, a = e.gameData, t.next = 4, n.player.setMultiCustomData({
                                            coinBaseValue: i.baseValue,
                                            coinSuffixValue: i.suffix,
                                            playerUnitData: a.playerUnitData,
                                            playerLevelProgress: a.playerLevelProgress,
                                            meleeUnlockedUnitLevel: a.meleeUnlockedUnitLevel,
                                            rangedUnlockedUnitLevel: a.rangedUnlockedUnitLevel
                                        });
                                    case 4:
                                        n.coin.receiveCoins(i.baseValue, i.suffix), n.coinManager.initModifier(), n.difficultyManager.intData(), n.levelManager.setCurrentLevelId(1), n.tutorialManager.initTutorialData(), n.resetGameplay();
                                    case 10:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        }))), n.selectLevel = function (t) {
                            n.player.setCustomData(hs, t - 1), n.coinManager.initModifier(), n.difficultyManager.intData(), n.levelManager.setCurrentLevelId(t - 1), n.resetGameplay()
                        }, n.updateUnitData = (0, us.debounce)((function () {
                            n.player.setMultiCustomData({
                                playerUnitData: n.unitManager.serializePlayerUnitData()
                            })
                        }), 2e3), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.preload = function () {
                        this.events.on(Phaser.Scenes.Events.WAKE, this.run), this.events.on(Phaser.Scenes.Events.CREATE, this.run), this.events.on(Phaser.Scenes.Events.SLEEP, this.quit), this.events.on(Phaser.Scenes.Events.PAUSE, this.handlePauseScene), this.events.on(Phaser.Scenes.Events.RESUME, this.handleResumeScene)
                    }, n.create = function () {
                        t.prototype.create.call(this), this.createManager(), this.levelStartAt = 0, this.levelEndAt = 0, this.isBannerAdShowed = !1, this.facebook.attemptToAddShortcut()
                    }, n.createManager = function () {
                        this.coinManager = new tn(this), this.unitManager = new pr(this), this.levelManager = new zn(this), this.fieldManager = new Bn(this), this.powerManager = new pi(this), this.stateManager = new Ci(this), this.spineManager = new yi(this), this.effectManger = new Sn(this), this.tutorialManager = new ss(this), this.animationManager = new We(this), this.difficultyManager = new un(this), this.accessibilityManager = new R(this), this.uiManager = new Ka(this)
                    }, n.initManager = function () {
                        this.uiManager.init(), this.unitManager.init(), this.coinManager.init(), this.levelManager.init(), this.fieldManager.init(), this.spineManager.init(), this.effectManger.init(), this.powerManager.init(), this.tutorialManager.init(), this.difficultyManager.init(), this.accessibilityManager.init()
                    }, n.startManager = function () {
                        this.coinManager.start(), this.unitManager.start(), this.levelManager.start(), this.fieldManager.start(), this.effectManger.start(), this.powerManager.start(), this.tutorialManager.start(), this.difficultyManager.start(), this.accessibilityManager.start(), this.uiManager.start()
                    }, n.stopManager = function () {
                        this.uiManager.stop(), this.levelManager.stop(), this.coinManager.stop(), this.fieldManager.stop(), this.unitManager.stop(), this.spineManager.stop(), this.effectManger.stop(), this.powerManager.stop(), this.tutorialManager.stop(), this.difficultyManager.stop(), this.accessibilityManager.stop()
                    }, n.spawnUnit = function (t, e, n, i) {
                        if (void 0 === e && (e = !0), void 0 === n && (n = 1), void 0 === i && (i = !1), !this.stateManager.isInReadyState()) return !1;
                        var a, r = this.fieldManager.getAvailablePlacement();
                        if (!r) return !1;
                        if (i) {
                            var s = this.coin.getCurrentCoins();
                            if (!(s instanceof Ke.default)) return !1;
                            var o = 0;
                            o = "MELEE" === t ? this.unitManager.getPlayerMeleeSpawnedUnitsCount() : this.unitManager.getPlayerRangedSpawnedUnitsCount();
                            var l = this.coinManager.getUnitPrice(o);
                            if (s.smallerThan(l)) {
                                if (s.toString() !== l.toString()) return !1;
                                l = s
                            }
                            this.coin.minusCoins(l.baseValue, l.suffix)
                        }
                        return e ? (a = "MELEE" == t ? this.uiManager.getMeleeBlockWorldPosition() : this.uiManager.getRangedBlockWorldPosition(), this.effectManger.runCurveAnimationRewardUnit(a.x, a.y, r, t, n)) : "MELEE" == t ? this.unitManager.createPlayerMelee(r.rowId, r.colId, n) : this.unitManager.createPlayerArcher(r.rowId, r.colId, n), this.updateUI(), this.unitManager.savePlayerUnits(), !0
                    }, n.getBuyingUnitLevel = function () {
                        var t = this.levelManager.currentLevelId,
                            e = ze.default.BUYING_UNIT_LEVEL,
                            n = 1;
                        return e.forEach((function (e, i) {
                            e <= t && (n = i + 1)
                        })), n
                    }, n.giveEnoughCoins = function (t) {
                        var e, n = 0;
                        "MELEE" == t ? (n = this.unitManager.getPlayerMeleeSpawnedUnitsCount(), e = this.coinManager.getUnitPrice(n)) : (n = this.unitManager.getPlayerRangedSpawnedUnitsCount(), e = this.coinManager.getUnitPrice(n));
                        var i = this.coin.getCurrentCoins();
                        i instanceof Ke.default && i.smallerThan(e) && (e.subtract(i), this.coin.plusCoins(e.baseValue, e.suffix))
                    }, n.updateUI = function () {
                        this.uiManager.updateUIData(), 0 === this.fieldManager.getRemainingAvailablePlacement() && this.uiManager.disableUnitBlocks(), this.uiManager.isStartButtonDisabled() && this.uiManager.enableStartButton()
                    }, n.gameOver = function (t) {
                        this.unitManager.setReadyAllUnits(), this.levelEndAt = Date.now(), "win" === t ? this.stateManager.levelComplete() : this.stateManager.levelFail()
                    }, n.rewardLostCoin = function (t) {
                        var e = this.coinManager.getTotalCoinsByAttack();
                        e.multiply(t), this.coin.plusCoins(e.baseValue, e.suffix)
                    }, n.rewardWinCoin = function (t) {
                        var e = this.coinManager.getRewardCoinsByAttackCoins();
                        e.multiply(t), this.coin.plusCoins(e.baseValue, e.suffix)
                    }, n.updateLevelToLeaderboard = function (t) {
                        var e = this.storage.dispatch,
                            n = this.player.getCustomData("playerLevelProgress"),
                            i = this.player.getCustomData("playerUnitData");
                        e(Br(t, {
                            playerLevel: n,
                            playerUnitData: i
                        }))
                    }, n.update = function () {
                        this.stateManager.update()
                    }, n.resetGameplay = function () {
                        this.unitManager.initSpawnPools(), this.unitManager.emptyPlayerUnits(), this.uiManager.updateUIData(), this.stateManager.quit(), this.stateManager.levelLoading()
                    }, n.initGameMode = function () {
                        this.gameMode = c.default.NORMAL, this.battle.getStatus() === Fr.default.STARTED && (this.gameMode = c.default.BATTLE)
                    }, n.isChallengeMode = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, e = this.storage.getState(), (0, cs.getIsRequestingDetectGameMode)(e)) {
                                            t.next = 6;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 6:
                                        return t.t0 = this.storage, t.next = 9, (0, Dr.detectGameMode)();
                                    case 9:
                                        return t.t1 = t.sent, t.next = 12, t.t0.dispatch.call(t.t0, t.t1);
                                    case 12:
                                        return t.abrupt("return", this.isContextChallenge());
                                    case 15:
                                        t.prev = 15, t.t2 = t.catch(0);
                                    case 18:
                                        return t.abrupt("return", !1);
                                    case 19:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 15]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.isContextChallenge = function () {
                        try {
                            var t = this.storage.getState();
                            return (0, cs.getCurrentGameMode)(t) === mr.MATCH_MODE_CHALLENGE_FRIENDS
                        } catch (e) {
                            return !1
                        }
                    }, n.getPlayedTimeString = function () {
                        var t = (this.levelEndAt - this.levelStartAt) / 1e3;
                        return t < 60 ? "0 - 1m" : t < 180 ? "1m - 3m" : t < 300 ? "3m - 5m" : t < 600 ? "5m - 10m" : "> 10m"
                    }, e
                }(os.default),
                fs = ds
        },
        473: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return k
                }
            });
            var i = n(73),
                a = n(0),
                r = n(24),
                s = n.n(r),
                o = n(326),
                l = n(115),
                c = n(25),
                u = n(2),
                h = n(44),
                d = n(32),
                f = n(642),
                p = (0, n(91).createSelector)([function (t) {
                    return t.scene.currentSceneKey
                }], (function (t) {
                    return t
                })),
                g = n(327),
                v = n(3),
                m = n(19),
                E = u.default.DEFAULT,
                y = E.KEY,
                A = E.FRAME,
                T = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, 0, 0) || this).fps = 0, n.fpsString = "FPS: %1", n.fpsText = void 0, n.background = void 0, n.lastUpdate = void 0, n.update = function (t) {
                            if (!(t - n.lastUpdate < 800)) {
                                n.lastUpdate = t;
                                var e = Math.floor(n.scene.game.loop.actualFps);
                                n.setFps(e)
                            }
                        }, n.createFps(), n.setDepth(c.default.DEBUG), n.scene.add.existing((0, v.default)(n)), n.scene.events.on(Phaser.Scenes.Events.UPDATE, n.update), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.setFps = function (t) {
                        this.fps = t;
                        var e = Phaser.Utils.String.Format(this.fpsString, [t]);
                        this.fpsText.setText(e)
                    }, n.createFps = function () {
                        this.background = this.scene.make.image({
                            key: y,
                            frame: A.BLANK
                        }), this.background.setName("BG"), this.background.setTint(13801480), this.background.setWorldSize(65, 20), this.fpsText = this.scene.make.bitmapText({
                            size: this.scene.fontSize(14),
                            text: this.fpsString,
                            font: m.default.PRIMARY.KEY,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.fpsText.setName("FPS Meter"), Phaser.Display.Align.In.Center(this.fpsText, this.background, 5, -1), this.add([this.background, this.fpsText]), this.setFps(0)
                    }, e
                }(Phaser.GameObjects.Container),
                S = T,
                M = function (t) {
                    function e(e) {
                        var n;
                        if ((n = t.call(this, e, 0, 0) || this).performance = void 0, n.memory = 0, n.maxMemoryLimit = void 0, n.maxPercentThreshold = void 0, n.normalColor = 3459162, n.warningColor = 16768343, n.alarmColor = 15812200, n.memoryString = "Memory: %1MB / %2MB", n.memoryText = void 0, n.lastUpdate = void 0, n.update = function (t) {
                                if (!(t - n.lastUpdate < 1e3)) {
                                    n.lastUpdate = t;
                                    var e = n.performance.memory.usedJSHeapSize,
                                        i = 1048576 * n.maxMemoryLimit,
                                        a = Math.round(e / 1048576);
                                    n.setMemory(a), n.memoryText.setTint(n.normalColor), e > n.maxPercentThreshold / 100 * i && n.memoryText.setTint(n.warningColor), e > i && n.memoryText.setTint(n.alarmColor)
                                }
                            }, n.performance = window.performance, n.createMemory(), n.setDepth(c.default.DEBUG), n.scene.add.existing((0, v.default)(n)), !n.isSupport()) return n.memoryText.setText("Memory: not supported!"), (0, v.default)(n);
                        var i = n.performance.memory.jsHeapSizeLimit;
                        return n.maxPercentThreshold = 90, n.setMaxMemory(i / 1048576), n.scene.events.on(Phaser.Scenes.Events.UPDATE, n.update), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.isSupport = function () {
                        var t;
                        return this.performance && !(null == (t = this.performance) || !t.memory)
                    }, n.setMaxMemory = function (t) {
                        this.maxMemoryLimit = Math.round(t)
                    }, n.setMemory = function (t) {
                        this.memory = t;
                        var e = Phaser.Utils.String.Format(this.memoryString, [t, this.maxMemoryLimit]);
                        this.memoryText.setText(e)
                    }, n.createMemory = function () {
                        this.memoryText = this.scene.make.bitmapText({
                            size: this.scene.fontSize(14),
                            text: this.memoryString,
                            font: m.default.PRIMARY.KEY,
                            depth: 2e3
                        }), this.memoryText.setName("Memory Meter"), this.add(this.memoryText), this.setMemory(0)
                    }, e
                }(Phaser.GameObjects.Container),
                w = M,
                x = n(474),
                C = function (t) {
                    function e(e, n, i, a) {
                        return t.call(this, e, n, i, a) || this
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.open = function (e) {
                        t.prototype.open.call(this, e), this.addOneTimeCloseEvent()
                    }, n.addOneTimeCloseEvent = function () {
                        var t = this;
                        this.scene.input.once(Phaser.Input.Events.POINTER_DOWN, (function () {
                            t.scene.screen.close(t.name)
                        }))
                    }, n.close = function () {
                        t.prototype.close.call(this), this.scene.input.off(Phaser.Input.Events.POINTER_DOWN, void 0, this, !0)
                    }, e
                }(x.default),
                I = C,
                b = u.default.DEFAULT_8_BIT,
                R = b.KEY,
                P = b.FRAME,
                _ = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, s()(e = [this]).call(e, a)) || this).mask = void 0, n.fadeInAnim = void 0, n.fadeOutAnim = void 0, n.fpsMeter = void 0, n.memoryMeter = void 0, n.runScene = function (t) {
                            n.currentScene.run(t)
                        }, n.sleepScene = function (t) {
                            n.currentScene.sleep(t)
                        }, n.switchScene = function (t) {
                            n.currentScene.switch(t)
                        }, n.emitGameEventStartScene = function (t) {
                            var e = t.scene.key;
                            n.updateSceneState(), n.runMaskFadeOutAnimation(), n.updateActiveSceneKey(e), n.game.events.emit(Phaser.Scenes.Events.START, e)
                        }, n.emitGameEventSleepScene = function (t) {
                            var e = t.scene.scene.key;
                            e !== h.SceneKeys.LOAD_SCENE && (n.runMaskFadeInAnimation(), n.game.events.emit(Phaser.Scenes.Events.SLEEP, e))
                        }, n.emitGameEventWakeScene = function (t) {
                            var e = t.scene.scene.key;
                            e !== h.SceneKeys.LOAD_SCENE && (n.updateSceneState(), n.runMaskFadeOutAnimation(), n.updateActiveSceneKey(e), n.game.events.emit(Phaser.Scenes.Events.WAKE, e))
                        }, n.emitGameEventPauseScene = function (t) {
                            var e = t.scene.scene.key;
                            n.game.events.emit(Phaser.Scenes.Events.PAUSE, e)
                        }, n.emitGameEventResumeScene = function (t) {
                            var e = t.scene.key;
                            n.game.events.emit(Phaser.Scenes.Events.RESUME, e)
                        }, n.emitGameEventShutdownScene = function (t) {
                            var e = t.scene.scene.key;
                            n.game.events.emit(Phaser.Scenes.Events.SHUTDOWN, e)
                        }, n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.listenScenesEvents(), this.game.globalScene = this
                    }, n.setup = function () {
                        this.scaleGame(), this.addMask(), this.addNotifyScreen(), this.addCloseableNotifyScreen(), this.addFPS(), this.addMemory()
                    }, n.addNotifyScreen = function () {
                        this.screen.add(d.ScreenKeys.NOTIFY_SCREEN, x.default)
                    }, n.addCloseableNotifyScreen = function () {
                        this.screen.add(d.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, I)
                    }, n.addMask = function () {
                        this.mask = this.make.image({
                            key: R,
                            frame: P.BLANK
                        });
                        var t = this.gameZone,
                            e = t.width,
                            n = t.height;
                        this.mask.setAlpha(0), this.mask.setOrigin(0, 0), this.mask.setTint(0), this.mask.setWorldSize(e, n)
                    }, n.addFPS = function () {
                        GameCore.Configs.Statistics.ShowFPSInGame && (this.fpsMeter = new S(this), this.fpsMeter.setDepth(c.default.ON_TOP), Phaser.Display.Align.In.TopLeft(this.fpsMeter, this.gameZone, -20, -10))
                    }, n.addMemory = function () {
                        GameCore.Configs.Statistics.ShowMemoryInGame && (this.memoryMeter = new w(this), Phaser.Display.Align.In.TopLeft(this.memoryMeter, this.gameZone, -45, -3))
                    }, n.updateSceneState = function () {
                        this.setGlobalSceneOnTop()
                    }, n.setGlobalSceneOnTop = function () {
                        this.scene.bringToTop(this)
                    }, n.runMaskFadeInAnimation = function () {
                        var t, e;
                        this.mask && GameCore.Configs.EnableEffectSceneTransition && (null == (t = this.fadeInAnim) || t.remove(), null == (e = this.fadeOutAnim) || e.remove(), this.fadeInAnim = new o.default({
                            targets: [this.mask],
                            duration: 400,
                            ease: Phaser.Math.Easing.Cubic.In,
                            props: {
                                alpha: {
                                    start: 0,
                                    from: 0,
                                    to: .6
                                }
                            }
                        }), this.mask.setAlpha(0), this.fadeInAnim.play())
                    }, n.runMaskFadeOutAnimation = function () {
                        var t, e;
                        this.mask && GameCore.Configs.EnableEffectSceneTransition && (null == (t = this.fadeInAnim) || t.remove(), null == (e = this.fadeOutAnim) || e.remove(), this.fadeOutAnim = new l.default({
                            targets: [this.mask],
                            duration: 400,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            props: {
                                alpha: {
                                    start: .6,
                                    from: .6,
                                    to: 0
                                }
                            }
                        }), this.mask.setAlpha(1), this.fadeOutAnim.play())
                    }, n.listenScenesEvents = function () {
                        var t = this;
                        this.scene.manager.getScenes(!1).forEach((function (e) {
                            e.events.on(Phaser.Scenes.Events.CREATE, t.emitGameEventStartScene), e.events.on(Phaser.Scenes.Events.SLEEP, t.emitGameEventSleepScene), e.events.on(Phaser.Scenes.Events.WAKE, t.emitGameEventWakeScene), e.events.on(Phaser.Scenes.Events.PAUSE, t.emitGameEventPauseScene), e.events.on(Phaser.Scenes.Events.RESUME, t.emitGameEventResumeScene), e.events.on(Phaser.Scenes.Events.SHUTDOWN, t.emitGameEventShutdownScene)
                        })), this.events.on(h.SceneEvents.RUN, this.runScene), this.events.on(h.SceneEvents.SLEEP, this.sleepScene), this.events.on(h.SceneEvents.SWITCH, this.switchScene)
                    }, n.getActiveScene = function () {
                        return this.scene.manager.getScenes(!0)[0]
                    }, n.getCurrentScene = function () {
                        return this.currentScene
                    }, n.updateActiveSceneKey = function (t) {
                        t !== h.SceneKeys.GLOBAL_SCENE && this.storage.dispatch((0, f.updateActiveSceneKey)(t))
                    }, n.logEventOpen = function () {}, n.logPageviewOnOpen = function () {}, (0, i.default)(e, [{
                        key: "currentScene",
                        get: function () {
                            var t = this.storage.getState(),
                                e = p(t);
                            return (e ? this.scene.manager.getScene(e) : this.getActiveScene()).scene
                        }
                    }]), e
                }(g.default),
                k = _
        },
        474: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return f
                }
            });
            var i = n(0),
                a = n(726),
                r = n(200),
                s = n(19),
                o = n(2),
                l = n(32),
                c = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).payload = void 0, i.background = void 0, i.shadow = void 0, i.payload = n, i.createBackground(), i.createShadow(), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createBackground = function () {
                        var t = this.payload,
                            e = t.width,
                            n = t.height,
                            i = -e / 2,
                            a = -n / 2;
                        this.background = this.scene.add.graphics(), this.background.fillStyle(657688, 1), this.background.fillRect(i, a, e, n), this.background.lineStyle(2, 65794), this.background.strokeRect(i, a, e, n), this.add(this.background)
                    }, n.createShadow = function () {
                        var t = this.payload,
                            e = t.width,
                            n = t.height,
                            i = -e / 2,
                            a = -n / 2 + n;
                        this.shadow = this.scene.add.graphics(), this.shadow.fillStyle(397608, .8), this.shadow.fillRect(i, a, e, 5), this.add(this.shadow)
                    }, e
                }(Phaser.GameObjects.Container),
                u = o.default.DEFAULT_8_BIT,
                h = u.KEY,
                d = u.FRAME,
                f = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i, a) || this).board = void 0, r.notifyIcon = void 0, r.loadingIcon = void 0, r.titleText = void 0, r.messageText = void 0, r.openAnimation = void 0, r.closeTimerEvent = void 0, r.addBoard(), r.addNotifyIcon(), r.addLoadingIcon(), r.addTitleText(), r.addMessageText(), r.setDepth(l.ScreenDepth.PRIORITY), r.background.setAlpha(.8), r
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.open = function (e) {
                        var n, i = this;
                        t.prototype.open.call(this, e);
                        var a = this.getData(["title", "message", "duration", "loading"]),
                            r = a[0],
                            s = void 0 === r ? "" : r,
                            o = a[1],
                            l = void 0 === o ? "" : o,
                            c = a[2],
                            u = void 0 === c ? 0 : c,
                            h = a[3],
                            d = void 0 !== h && h;
                        this.setTitle(s), this.setMessage(l), this.showLoading(d), null == (n = this.closeTimerEvent) || n.remove(), u > 0 && (this.closeTimerEvent = this.scene.time.addEvent({
                            delay: u,
                            callback: function () {
                                i.visible && i.scene.screen.close(i.name)
                            }
                        })), this.runOpenAnimation()
                    }, n.addBoard = function () {
                        this.board = new c(this.scene, {
                            width: this.zone.width,
                            height: 300
                        }), Phaser.Display.Align.In.Center(this.board, this.zone), this.add(this.board)
                    }, n.addNotifyIcon = function () {
                        this.notifyIcon = this.scene.make.image({
                            key: h,
                            frame: d.ICON_ALERT
                        }), this.notifyIcon.setWorldSize(125.5, 106), this.add(this.notifyIcon), Phaser.Display.Align.In.Center(this.notifyIcon, this.zone, 0, -70)
                    }, n.addLoadingIcon = function () {
                        this.loadingIcon = new r.default(this.scene), this.add(this.loadingIcon), Phaser.Display.Align.In.Center(this.loadingIcon, this.zone, 0, -30)
                    }, n.addTitleText = function () {
                        this.titleText = this.scene.make.bitmapText({
                            size: this.scene.fontSize(26),
                            font: s.default.PRIMARY.KEY,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.titleText.setTint(11482972), this.titleText.setCenterAlign(), this.titleText.setMaxWidth(this.width), Phaser.Display.Align.In.Center(this.titleText, this.zone, 0, 10), this.add(this.titleText)
                    }, n.addMessageText = function () {
                        this.messageText = this.scene.make.bitmapText({
                            size: this.scene.fontSize(18),
                            font: s.default.PRIMARY.KEY,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.messageText.setCenterAlign(), Phaser.Display.Align.In.Center(this.messageText, this.zone, 0, 80), this.add(this.messageText)
                    }, n.setTitle = function (t) {
                        this.titleText.setText(t)
                    }, n.setMessage = function (t) {
                        this.messageText.setText(t)
                    }, n.showLoading = function (t) {
                        this.board.setVisible(!t), this.titleText.setVisible(!t), this.notifyIcon.setVisible(!t), this.loadingIcon.setVisible(t)
                    }, n.runOpenAnimation = function () {
                        var t, e;
                        null == (t = this.openAnimation) || t.stop(), null == (e = this.openAnimation) || e.remove(), this.openAnimation = new a.default({
                            targets: [this.notifyIcon],
                            props: {
                                scale: {
                                    getStart: function (t) {
                                        return t.scale - .3
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    }
                                }
                            }
                        }), this.openAnimation.play()
                    }, n.logPageviewOnOpen = function () {}, n.logPageviewOnClose = function () {}, e
                }(GameCore.Screen)
        },
        615: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = n(616),
                r = n(2),
                s = n(44),
                o = n(32),
                l = r.default.DEFAULT_8_BIT,
                c = l.KEY,
                u = l.FRAME,
                h = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i, a) || this).progressBar = void 0, r.background.setAlpha(.8), r.setDepth(o.ScreenDepth.SPLASH), r.createTitleIcon(), r.createProgressBar(), r.scene.game.scene.getScene(s.SceneKeys.LOAD_SCENE).load.on(Phaser.Loader.Events.PROGRESS, (function (t) {
                            r.progressBar.setProcess(t)
                        })), r
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.open = function (e) {
                        var n = this;
                        t.prototype.open.call(this, e), this.progressBar.setProcess(0, !0), this.scene.time.delayedCall(200, (function () {
                            n.progressBar.setProcess(.2)
                        }))
                    }, n.close = function () {
                        var e = this;
                        this.scene.scene.resume(s.SceneKeys.GAME_SCENE), this.scene.time.delayedCall(600, (function () {
                            e.progressBar.setProcess(1), t.prototype.close.call(e)
                        }))
                    }, n.createTitleIcon = function () {
                        var t = this.scene.make.image({
                            key: c,
                            frame: u.ICON_TITLE
                        });
                        t.setWorldSize(213.5, 157.5), Phaser.Display.Align.In.Center(t, this, 0, -150), this.add(t)
                    }, n.createProgressBar = function () {
                        this.progressBar = new a.default(this.scene, 450), this.progressBar.setScale(.6), Phaser.Display.Align.In.Center(this.progressBar, this), this.add(this.progressBar)
                    }, e
                }(GameCore.Screen);
            e.default = h
        },
        617: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return $
                }
            });
            var i = n(9),
                a = n(3),
                r = n(0),
                s = n(5),
                o = n.n(s),
                l = n(46),
                c = n.n(l),
                u = n(65),
                h = n.n(u),
                d = n(38),
                f = n(115),
                p = n(726),
                g = n(32),
                v = n(40),
                m = n(601),
                E = n(116),
                y = n(74),
                A = n(199),
                T = n(201),
                S = n(44),
                M = n(60),
                w = n(27),
                x = n(150),
                C = n(57),
                I = n(19),
                b = n(2),
                R = b.default.DEFAULT_8_BIT,
                P = R.KEY,
                _ = R.FRAME,
                k = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, P, _.OFFLINE_REWARD_GREEN_BTN, 128.5, 45.5) || this).createCoinIcon(), n.createText(), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createCoinIcon = function () {
                        var t = this.scene.make.image({
                            key: P,
                            frame: _.OFFLINE_REWARD_GOLD
                        });
                        t.setWorldSize(32.5, 30.5), t.setPosition(-35, 0), this.add(t)
                    }, n.createText = function () {
                        var t = this.scene.make.text({
                            text: "COLLECT",
                            style: {
                                fontSize: "15px",
                                stroke: "#000000",
                                strokeThickness: 2,
                                color: "#FFFFFF",
                                fixedWidth: 195,
                                align: "center",
                                fontFamily: I.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .65
                            }
                        });
                        t.setHighQuality(), t.setShadow(-8, 8, "#000000", 0, !0), Phaser.Display.Align.In.RightCenter(t, this.button, 0, 0), t.setPosition(15, 0), this.add(t)
                    }, e
                }(C.default),
                L = b.default.DEFAULT_8_BIT,
                D = L.KEY,
                O = L.FRAME,
                N = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).icon = void 0, n.text = void 0, n.createIcon(), n.createCoinText(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createIcon = function () {
                        var t = this.scene.make.image({
                            key: D,
                            frame: O.OFFLINE_REWARD_GOLDS
                        });
                        t.setWorldSize(55, 39.5), t.setPosition(50, 0), this.add(t), this.icon = t
                    }, n.createCoinText = function () {
                        var t = this.scene.make.text({
                            text: "+100 coins",
                            style: {
                                fontSize: "35px",
                                stroke: "#000000",
                                strokeThickness: 1,
                                color: "#F0DB0F",
                                fixedWidth: 455,
                                align: "center",
                                fontFamily: I.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), t.setShadow(-8, 8, "#000000", 0, !0), t.setPosition(-30, 0), this.add(t), this.text = t
                    }, n.setText = function (t) {
                        this.text.setText("+" + t)
                    }, e
                }(Phaser.GameObjects.Container),
                U = b.default.DEFAULT_8_BIT,
                B = U.KEY,
                F = U.FRAME,
                G = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).createRibbon(), n.createTitle(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createRibbon = function () {
                        var t = this.scene.make.image({
                            key: B,
                            frame: F.OFFLINE_REWARD_RIBBON
                        });
                        t.setWorldSize(247, 43.5), this.add(t)
                    }, n.createTitle = function () {
                        var t = this.scene.make.text({
                            text: "OFFLINE COINS REWARDS",
                            style: {
                                fontSize: "15px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2,
                                fixedWidth: 195,
                                align: "center",
                                fontFamily: I.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), t.setShadow(-8, 8, "#000000", 0, !0), t.setPosition(0, -4), this.add(t)
                    }, n.createUnderlineText = function () {
                        var t = this.scene.make.text({
                            text: "Get Free Coins!",
                            style: {
                                fontSize: "12px",
                                color: "#D5330F",
                                fixedWidth: 130,
                                align: "center",
                                fontFamily: I.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), t.setPosition(0, 5), this.add(t)
                    }, e
                }(Phaser.GameObjects.Container),
                H = n(471),
                V = b.default.DEFAULT_8_BIT,
                Y = V.KEY,
                W = V.FRAME,
                K = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).listParticle = [], n.backEffect = void 0, n.tween = void 0, n.backEffectTween = void 0, n.createBackEffect(), n.createTicketCoin(), n.createParticle(), n.createAnimation(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createBackEffect = function () {
                        var t = new H.default(this.scene, {
                            color: 234748,
                            width: {
                                min: 4,
                                max: 8
                            },
                            radius: {
                                min: 180,
                                max: 170
                            },
                            lineNumber: 18
                        });
                        t.setPosition(0, 110), this.add(t), this.backEffect = t
                    }, n.createTicketCoin = function () {
                        var t = this.scene.make.image({
                            key: Y,
                            frame: W.OFFLINE_REWARD_TICKET
                        });
                        t.setWorldSize(155.5, 124.5), t.setPosition(0, 110), this.add(t)
                    }, n.createParticle = function () {
                        var t = this.scene.make.image({
                            key: Y,
                            frame: W.OFFLINE_REWARD_PARTICLE_1
                        });
                        t.setWorldSize(23, 23), t.setPosition(-102, 100), this.add(t), this.listParticle.push(t), (t = this.scene.make.image({
                            key: Y,
                            frame: W.OFFLINE_REWARD_PARTICLE_1
                        })).setWorldSize(23, 23), t.setPosition(78, 156), this.add(t), this.listParticle.push(t), (t = this.scene.make.image({
                            key: Y,
                            frame: W.OFFLINE_REWARD_PARTICLE_2
                        })).setWorldSize(14.5, 15), t.setPosition(-90, 129), this.add(t), this.listParticle.push(t), (t = this.scene.make.image({
                            key: Y,
                            frame: W.OFFLINE_REWARD_PARTICLE_2
                        })).setWorldSize(14.5, 15), t.setPosition(100, 110), this.add(t), this.listParticle.push(t), this.listParticle.push(t)
                    }, n.createAnimation = function () {
                        var t = this.listParticle[0].scale;
                        this.tween = this.scene.add.tween({
                            paused: !0,
                            targets: this.listParticle,
                            duration: 800,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            repeat: -1,
                            yoyo: !0,
                            delay: this.scene.tweens.stagger(50, {
                                start: 50 * Math.random() + 50
                            }),
                            props: {
                                scale: {
                                    from: t,
                                    to: t * Phaser.Math.FloatBetween(.7, .9)
                                }
                            }
                        }), this.backEffectTween = this.scene.add.tween({
                            paused: !0,
                            targets: this.backEffect,
                            duration: 1e6,
                            ease: Phaser.Math.Easing.Linear,
                            repeat: -1,
                            props: {
                                rotation: {
                                    start: 0,
                                    to: 180
                                }
                            }
                        })
                    }, n.runAnimation = function () {
                        this.tween.resume(), this.backEffectTween.resume()
                    }, n.stopAnimation = function () {
                        this.tween.pause(), this.backEffectTween.pause()
                    }, e
                }(Phaser.GameObjects.Container),
                z = b.default.DEFAULT_8_BIT,
                X = z.KEY,
                j = z.FRAME,
                q = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, X, j.OFFLINE_REWARD_YELLOW_BTN, 128.5, 45.5) || this).createCoinIcon(), n.createText(), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createCoinIcon = function () {
                        var t = this.scene.make.image({
                            key: X,
                            frame: j.OFFLINE_REWARD_ADS
                        });
                        t.setWorldSize(32, 30), t.setPosition(-40, -3), this.add(t)
                    }, n.createText = function () {
                        var t = this.scene.make.text({
                            text: "X2 COINS",
                            style: {
                                fontSize: "15px",
                                stroke: "#000000",
                                strokeThickness: 2,
                                color: "#FFFFFF",
                                fixedWidth: 195,
                                align: "center",
                                fontFamily: I.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .65
                            }
                        });
                        t.setHighQuality(), t.setShadow(-8, 8, "#000000", 0, !0), Phaser.Display.Align.In.RightCenter(t, this.button, 0, 0), t.setPosition(15, 0), this.add(t)
                    }, e
                }(C.default),
                Z = GameCore.Configs.Network,
                Q = M.default.LEVEL_PROGRESS,
                J = M.default.PLAYER_UNIT_DATA,
                $ = function (t) {
                    function e(e, n, r, s) {
                        var l;
                        return (l = t.call(this, e, n, r, s) || this).rewardValue = void 0, l.closeBtn = void 0, l.collectButton = void 0, l.viewAdButton = void 0, l.coinIcon = void 0, l.contents = void 0, l.title = void 0, l.popup = void 0, l.popupFadeOutAnimation = void 0, l.showUpAnimation = void 0, l.contentShowUpAnimation = void 0, l.adsTimer = void 0, l.open = function (e) {
                            t.prototype.open.call((0, a.default)(l), e);
                            var n = l.getData("rewardValue");
                            l.setRewardValue(l.calculateRewardCoins(n)), l.runOpenAnimation(), l.scene.storage.dispatch((0, m.setOfflineRewardShow)())
                        }, l.handleClosePopup = function () {
                            l.runCloseAnimation(), l.rewardCoins(l.rewardValue)
                        }, l.handleShowRewardedVideoAd = (0, i.default)(o().mark((function t() {
                            var e, n, i, a, r;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, e = l.scene, n = e.audio, i = e.game, l.viewAdButton.setDisabled(!0), i.globalScene.screen.open(g.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading ads...",
                                            duration: 0,
                                            loading: !0
                                        }), n.pauseMusic(), t.next = 7, new(c())((function (t, e) {
                                            var n;
                                            null == (n = l.adsTimer) || n.remove(), l.adsTimer = l.scene.time.delayedCall(Z.Timeout, e), l.scene.ads.getAdStatus(GameCore.Ads.Types.REWARDED) === GameCore.Ads.Status.LOADING ? l.scene.ads.events.once(GameCore.Ads.Events.LOADED, t) : l.scene.ads.preloadRewardedVideoAsync().then(t).catch(e)
                                        }));
                                    case 7:
                                        return t.next = 9, l.scene.ads.showRewardedVideoAsync();
                                    case 9:
                                        l.scene.ads.preloadRewardedVideoAsync().catch((function (t) {})), i.globalScene.screen.close(g.ScreenKeys.NOTIFY_SCREEN), l.scene.audio.playSound(v.default.DAILY_REWARD), (a = l.rewardValue.clone()).multiply(2), l.rewardCoins(a), l.runCloseAnimation(), t.next = 26;
                                        break;
                                    case 18:
                                        if (t.prev = 18, t.t0 = t.catch(0), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code"))) {
                                            t.next = 25;
                                            break
                                        }
                                        if ("USER_INPUT" !== t.t0.code) {
                                            t.next = 25;
                                            break
                                        }
                                        return l.showNotifySkipAds(), t.abrupt("return");
                                    case 25:
                                        l.showNotifyNoAds();
                                    case 26:
                                        return t.prev = 26, null == (r = l.adsTimer) || r.destroy(), l.scene.audio.playMusic(), l.viewAdButton.setDisabled(!1), l.scene.game.globalScene.screen.close(g.ScreenKeys.NOTIFY_SCREEN), t.finish(26);
                                    case 32:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 18, 26, 32]
                            ])
                        }))), l.showNotifyNoAds = function (t) {
                            t && t.name !== g.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN || l.scene.game.globalScene.screen.open(g.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "No ads to display!",
                                duration: 1500,
                                loading: !1
                            })
                        }, l.showNotifySkipAds = function () {
                            l.scene.game.globalScene.screen.open(g.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "Sorry, No Rewards!\nYou have cancelled the ad!",
                                duration: 1500,
                                loading: !1
                            })
                        }, l.runCloseAnimation = function () {
                            l.runExitsAnimation(0, 200)
                        }, l.setName(n), l.setDepth(g.ScreenDepth.POPUP), l.background.setAlpha(.7), l.createPopup(), l.createTicketCoinIcon(), l.createCloseBtn(), l.createContents(), l.createTitle(), l.createCollectButton(), l.createViewAdsButton(), l
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createPopup = function () {
                        this.popup = new T.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 332,
                            height: 404.5,
                            rightEdge: 870778,
                            bottomRightCorner: 221341,
                            topInnerCornerStrokeWidth: 2,
                            rightInnerCornerStrokeWidth: 3,
                            lightY: -80
                        }), this.add(this.popup)
                    }, n.recalculateLightPosition = function () {
                        this.popup && this.popup.recalculateLightPosition()
                    }, n.createTicketCoinIcon = function () {
                        var t = new K(this.scene);
                        Phaser.Display.Align.In.TopCenter(t, this.popup, 0, -30), this.add(t), this.coinIcon = t
                    }, n.createCloseBtn = function () {
                        var t = new A.default(this.scene);
                        t.onClick = this.handleClosePopup, Phaser.Display.Align.In.TopRight(t, this.popup, 10, 10), this.popup.add(t), this.closeBtn = t
                    }, n.createContents = function () {
                        var t = new N(this.scene);
                        Phaser.Display.Align.In.Center(t, this.popup, 0, 60), this.add(t), this.contents = t
                    }, n.createTitle = function () {
                        var t = new G(this.scene);
                        Phaser.Display.Align.In.TopCenter(t, this.popup, 0, -10), this.add(t), this.title = t
                    }, n.createCollectButton = function () {
                        var t = new k(this.scene);
                        t.setName("Collect"), t.onClick = this.handleClosePopup, Phaser.Display.Align.In.BottomCenter(t, this.popup, -70, -20), this.add(t), this.collectButton = t
                    }, n.createViewAdsButton = function () {
                        var t = new q(this.scene);
                        t.setName("CollectX2"), t.onClick = this.handleShowRewardedVideoAd, Phaser.Display.Align.In.BottomCenter(t, this.popup, 70, -20), this.add(t), this.viewAdButton = t
                    }, n.logButtonEvent = function (t) {
                        var e = this.getScreenName();
                        this.scene.analytics.event(d.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: t,
                            screen_name: e
                        })
                    }, n.runOpenAnimation = function () {
                        this.runPopupEntrancesAnimation(), this.runPopupContentEntrancesAnimation(100, 400)
                    }, n.runPopupEntrancesAnimation = function () {
                        this.showUpAnimation || (this.showUpAnimation = new E.default({
                            targets: [this.popup, this.title]
                        })), this.showUpAnimation.play()
                    }, n.runPopupContentEntrancesAnimation = function (t, e) {
                        var n;
                        null == (n = this.contentShowUpAnimation) || n.remove(), this.coinIcon.runAnimation(), this.contentShowUpAnimation = new p.default({
                            targets: [this.coinIcon, this.collectButton, this.viewAdButton, this.contents],
                            duration: e,
                            delay: this.scene.tweens.stagger(100, {
                                start: t
                            }),
                            props: {
                                scale: {
                                    getStart: function (t) {
                                        return t.scale - .3
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    }
                                },
                                alpha: {
                                    start: 0,
                                    from: 0,
                                    to: 1
                                }
                            }
                        }), this.contentShowUpAnimation.play()
                    }, n.rewardCoins = function (t) {
                        var e = t;
                        this.scene.coin.plusCoins(e.baseValue, e.suffix);
                        var n = this.scene.scene.get(S.SceneKeys.GAME_SCENE);
                        n instanceof x.default && n.updateUI()
                    }, n.calculateRewardCoins = function (t) {
                        var e = new y.default(t),
                            n = new y.default(w.default.BASE_UNIT_COIN),
                            i = this.calculateRewardModifier();
                        return e.multiply(i), e.divide(60), e.smallerThan(n) && (e = n), e
                    }, n.calculateRewardModifier = function () {
                        var t = this.calculateLevelModifier(),
                            e = this.calculateUsedUnit();
                        return t.multiply(e), t.multiply(w.default.BASE_UNIT_COIN), t
                    }, n.calculateLevelModifier = function () {
                        var t = this.scene.player.getCustomData(Q);
                        t < 0 && (t = 0), t++;
                        var e = w.default.UNIT_COIN_SCALE;
                        if (t <= 50) {
                            var n = Math.pow(e, t),
                                i = new y.default(1);
                            return i.multiply(n), i
                        }
                        for (var a = Math.pow(e, 50), r = Math.floor(t / 50), s = t % 50, o = new y.default(1), l = 0; l < r; l++) o.multiply(a);
                        var c = Math.pow(e, s);
                        return o.multiply(c), o
                    }, n.calculateUsedUnit = function () {
                        var t = this.scene.player.getCustomData(J);
                        if (!t || "string" !== typeof t) return 1;
                        var e = t.split("/"),
                            n = 0,
                            i = 0;
                        return e.forEach((function (t) {
                            t.split("-").forEach((function (t) {
                                if ("0" !== t) {
                                    var e = t[0],
                                        a = h()(t.substring(1));
                                    "m" === e && (n += Math.pow(2, a - 1)), "r" === e && (i += Math.pow(2, a - 1))
                                }
                            }))
                        })), n > i ? n : i
                    }, n.runExitsAnimation = function (t, e) {
                        var n = this;
                        this.collectButton.setDisabled(!0), this.popupFadeOutAnimation || (this.popupFadeOutAnimation = new f.default({
                            targets: [this.background],
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    start: .7,
                                    from: .7,
                                    to: 0
                                }
                            },
                            onActive: function () {
                                n.coinIcon.kill(), n.contents.kill(), n.title.kill(), n.popup.kill(), n.collectButton.kill(), n.viewAdButton.kill()
                            },
                            onComplete: function () {
                                n.coinIcon.revive(), n.contents.revive(), n.title.revive(), n.popup.revive(), n.collectButton.revive(), n.viewAdButton.revive(), n.scene.screen.close(n.name), n.collectButton.setDisabled(!1), n.coinIcon.stopAnimation(), n.background.setAlpha(.7)
                            }
                        })), this.popupFadeOutAnimation.play()
                    }, n.setRewardValue = function (t) {
                        this.rewardValue = t, this.contents.setText(t.toString())
                    }, e
                }(GameCore.Screen)
        },
        620: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return L
                }
            });
            var i = n(9),
                a = n(0),
                r = n(35),
                s = n.n(r),
                o = n(5),
                l = n.n(o),
                c = n(201),
                u = n(73),
                h = n(38),
                d = n(92),
                f = n(19),
                p = n(2),
                g = p.default.DEFAULT,
                v = g.KEY,
                m = g.FRAME,
                E = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).icon = void 0, i.switch = void 0, i.hitZone = void 0, i.isSwitchOn = void 0, i.payload = void 0, i.parentName = void 0, i.payload = n, i.setName("SettingSwitch"), i.createHitZone(), i.createIcon(), i.createLabel(), i.createSwitch(), i
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.setSwitch = function (t) {
                        t ? (this.switch.setFrame(m.SETTINGS_SWITCH_ON), this.switch.setWorldSize(37.5, 22)) : (this.switch.setFrame(m.SETTINGS_SWITCH_OFF), this.switch.setWorldSize(37, 21.5)), this.isSwitchOn = t
                    }, n.createIcon = function () {
                        this.icon = this.scene.make.image({
                            key: this.payload.iconKey,
                            frame: this.payload.icon
                        }), this.icon.setWorldSize(this.payload.iconWidth, this.payload.iconHeight), this.add(this.icon), Phaser.Display.Align.In.LeftCenter(this.icon, this.hitZone, this.payload.iconLeftOffset)
                    }, n.createLabel = function () {
                        var t = this.scene.make.text({
                            text: this.payload.label,
                            style: {
                                fontSize: "15px",
                                color: "#FFFFFF",
                                fontFamily: f.default.FONT_FAMILY
                            }
                        });
                        t.setName("label"), t.setHighQuality(), this.add(t), Phaser.Display.Align.In.RightCenter(t, this.icon, this.payload.textSpacing)
                    }, n.createSwitch = function () {
                        this.switch = this.scene.make.image({
                            key: v
                        }), this.setSwitch(!1), Phaser.Display.Align.In.RightCenter(this.switch, this.hitZone), this.add(this.switch)
                    }, n.createHitZone = function () {
                        this.hitZone = this.scene.add.zone(0, 0, 150, 45), this.add(this.hitZone)
                    }, n.logButtonEvent = function (t) {
                        var e = this.getParentName(),
                            n = this.name;
                        this.scene.analytics.event(h.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: n,
                            value: t ? "on" : "off",
                            screen_name: e
                        })
                    }, n.getParentName = function () {
                        if (this.parentName) return this.parentName;
                        for (var t = this.parentContainer; t;) {
                            if (t instanceof GameCore.Screen) {
                                var e = t;
                                return this.parentName = e.getScreenName(), this.parentName
                            }
                            t = t.parentContainer
                        }
                        return this.parentName = this.scene.getSceneName(), this.parentName
                    }, n.setDisabled = function (t) {
                        var e, n;
                        t ? (null == (e = this.hitZone) || e.disableInteractive(), this.setAlpha(.5)) : (null == (n = this.hitZone) || n.setInteractive(), this.setAlpha(1))
                    }, (0, u.default)(e, [{
                        key: "onClick",
                        set: function (t) {
                            var e = this;
                            this.hitZone.removeAllListeners(), this.hitZone.setInteractive({
                                useHandCursor: !0
                            }), this.hitZone.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, (function () {
                                var n = !e.isSwitchOn;
                                e.logButtonEvent(n), e.setSwitch(n), t(n), (0, d.default)(50)
                            }))
                        }
                    }]), e
                }(Phaser.GameObjects.Container),
                y = n(173),
                A = n(344),
                T = n(116),
                S = n(115),
                M = n(726),
                w = n(199),
                x = n(32),
                C = n(40),
                I = p.default.DEFAULT,
                b = I.KEY,
                R = I.FRAME,
                P = p.default.DEFAULT_8_BIT,
                _ = P.KEY,
                k = P.FRAME,
                L = function (t) {
                    function e(e, n, a, r) {
                        var s;
                        return (s = t.call(this, e, n, a, r) || this).popup = void 0, s.sound = void 0, s.music = void 0, s.vibration = void 0, s.title = void 0, s.showUpAnimation = void 0, s.contentShowUpAnimation = void 0, s.fadeOutAnimation = void 0, s.handleChangeSound = function (t) {
                            s.scene.audio.playSound(C.default.TURN_SWITCH), s.scene.player.setSetting("sound", t)
                        }, s.handleChangeMusic = function (t) {
                            s.scene.audio.playSound(C.default.TURN_SWITCH), s.scene.player.setSetting("music", t), t ? s.scene.audio.playMusic() : s.scene.audio.pauseMusic()
                        }, s.handleChangeVibration = function (t) {
                            s.scene.audio.playSound(C.default.TURN_SWITCH), s.scene.player.setSetting("vibrate", t), (0, d.setVibrateEnabled)(t)
                        }, s.handleShareGame = function () {
                            (0, A.shareGame)()
                        }, s.handleClosePopup = function () {
                            s.runFadeOutAnimation()
                        }, s.handleChallengeFriends = (0, i.default)(l().mark((function t() {
                            var e, n, i, a, r, o, c;
                            return l().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, e = s.scene, n = e.player, i = e.battle, a = e.facebook, t.next = 4, a.chooseAsync();
                                    case 4:
                                        if (!1 !== t.sent) {
                                            t.next = 7;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 7:
                                        return r = n.getPlayerId(), t.next = 10, a.getContextPlayers(r);
                                    case 10:
                                        if (!((o = t.sent).length < 1)) {
                                            t.next = 13;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 13:
                                        return c = o[0].playerId, t.next = 16, i.createBattle(c);
                                    case 16:
                                        i.getStatus() === y.default.STARTED && s.scene.screen.close(x.ScreenKeys.SETTINGS_SCREEN), t.next = 22;
                                        break;
                                    case 19:
                                        t.prev = 19, t.t0 = t.catch(0);
                                    case 22:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 19]
                            ])
                        }))), s.scene = e, s.background.setAlpha(.7), s.setSize(s.scene.gameZone.displayWidth, s.scene.gameZone.displayHeight), s.createPopup(), s.createCloseButton(), s.createTitle(), s.createContent(), s
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.open = function () {
                        t.prototype.open.call(this), this.runOpenAnimation();
                        var e = !!this.scene.player.getPlayerSetting("sound");
                        this.sound.setSwitch(e);
                        var n = !!this.scene.player.getPlayerSetting("music");
                        if (this.music.setSwitch(n), (0, d.isSupportVibrateApi)()) {
                            var i = !!this.scene.player.getPlayerSetting("vibrate");
                            this.vibration.setSwitch(i)
                        }
                    }, n.createPopup = function () {
                        this.popup = new c.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 261.5,
                            height: 323,
                            rightEdge: 870778,
                            topInnerCornerStrokeWidth: 2,
                            rightInnerCornerStrokeWidth: 3,
                            lightY: -40
                        }), this.add(this.popup)
                    }, n.recalculateLightPosition = function () {
                        this.popup && this.popup.recalculateLightPosition()
                    }, n.createCloseButton = function () {
                        var t = new w.default(this.scene);
                        t.setName("button"), Phaser.Display.Align.In.TopRight(t, this.popup, 10, 10), this.popup.add(t), t.onClick = this.handleClosePopup
                    }, n.createTitle = function () {
                        var t = this.scene.make.text({
                            text: "Settings",
                            style: {
                                fontSize: "22px",
                                stroke: "#000000",
                                strokeThickness: 2,
                                color: "#FFFFFF",
                                fixedWidth: 325,
                                align: "center",
                                fontFamily: f.default.FONT_FAMILY
                            }
                        });
                        t.setName("title"), t.setHighQuality(), t.setShadow(-8, 8, "#000000", 0, !0), this.add(t), Phaser.Display.Align.In.TopCenter(t, this.popup, 0, -13);
                        var e = this.scene.make.image({
                            key: b,
                            frame: R.TITLE_LINE
                        });
                        e.setWorldSize(235, 23), this.popup.add(e), Phaser.Display.Align.In.BottomCenter(e, t, 0, 30), this.title = t
                    }, n.createContent = function () {
                        this.createSoundSetting(), this.createMusicSetting(), this.createVibrationSetting(), (0, d.isSupportVibrateApi)() || (this.vibration.setSwitch(!1), this.vibration.setDisabled(!0))
                    }, n.createSoundSetting = function () {
                        this.sound = new E(this.scene, {
                            iconKey: _,
                            icon: k.ICON_SOUND,
                            iconWidth: 26,
                            iconHeight: 24,
                            iconLeftOffset: 0,
                            textSpacing: 68,
                            label: "Sound Fx  "
                        }), this.sound.setName("SettingSound"), this.add(this.sound), Phaser.Display.Align.In.Center(this.sound, this.popup, 0, -55), this.sound.onClick = this.handleChangeSound;
                        var t = this.scene.make.graphics({});
                        t.fillStyle(16777215, .1), t.fillRect(-104.5, -.5, 209, 1), t.setPosition(0, -19.5), this.popup.add(t)
                    }, n.createMusicSetting = function () {
                        this.music = new E(this.scene, {
                            iconKey: _,
                            icon: k.ICON_MUSIC,
                            iconWidth: 20,
                            iconHeight: 20,
                            iconLeftOffset: 3,
                            textSpacing: 70,
                            label: "Music      "
                        }), this.music.setName("SettingMusic"), this.add(this.music), Phaser.Display.Align.In.Center(this.music, this.popup, 0, 15), this.music.onClick = this.handleChangeMusic;
                        var t = this.scene.make.graphics({});
                        t.fillStyle(16777215, .1), t.fillRect(-104.5, -.5, 209, 1), t.setPosition(0, 45.5), this.popup.add(t)
                    }, n.createVibrationSetting = function () {
                        this.vibration = new E(this.scene, {
                            iconKey: _,
                            icon: k.ICON_VIBRATION,
                            iconWidth: 30.5,
                            iconHeight: 27.5,
                            iconLeftOffset: 7,
                            textSpacing: 70,
                            label: "Vibration"
                        }), this.vibration.setName("SettingVibration"), this.add(this.vibration), Phaser.Display.Align.In.Center(this.vibration, this.popup, 0, 85), (0, d.isSupportVibrateApi)() && (this.vibration.onClick = this.handleChangeVibration)
                    }, n.runOpenAnimation = function () {
                        this.runPopupEntrancesAnimation(), this.runPopupContentEntrancesAnimation(100, 400)
                    }, n.runPopupEntrancesAnimation = function () {
                        this.showUpAnimation || (this.showUpAnimation = new T.default({
                            targets: [this.popup]
                        })), this.showUpAnimation.play()
                    }, n.runPopupContentEntrancesAnimation = function (t, e) {
                        var n;
                        null == (n = this.contentShowUpAnimation) || n.remove();
                        var i = [this.title, this.sound, this.music, this.vibration],
                            a = s()(i).call(i, (function (t) {
                                return t.alpha
                            }));
                        this.contentShowUpAnimation = new M.default({
                            targets: [this.title, this.sound, this.music, this.vibration],
                            duration: e,
                            delay: this.scene.tweens.stagger(100, {
                                start: t
                            }),
                            props: {
                                scale: {
                                    getStart: function (t) {
                                        return t.scale - .3
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    }
                                },
                                alpha: {
                                    getStart: function (t) {
                                        return t.setAlpha(0), 0
                                    },
                                    getEnd: function (t, e, n, i) {
                                        return a[i]
                                    }
                                }
                            }
                        }), this.contentShowUpAnimation.play()
                    }, n.runFadeOutAnimation = function () {
                        var t = this;
                        this.fadeOutAnimation || (this.fadeOutAnimation = new S.default({
                            targets: [this.background],
                            duration: 200,
                            props: {
                                alpha: {
                                    start: .7,
                                    from: .7,
                                    to: 0
                                }
                            },
                            onActive: function () {
                                t.popup.kill(), t.title.kill(), t.sound.kill(), t.music.kill(), t.vibration.kill()
                            },
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onComplete: function () {
                                t.background.setAlpha(.7), t.popup.revive(), t.title.revive(), t.sound.revive(), t.music.revive(), t.vibration.revive(), t.scene.screen.close(t.name)
                            }
                        })), this.fadeOutAnimation.play()
                    }, e
                }(GameCore.Screen)
        },
        604: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return Kt
                }
            });
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(3),
                l = n(196),
                c = n(346),
                u = n(57),
                h = n(199),
                d = n(200),
                f = n(201),
                p = n(19),
                g = n(2),
                v = n(32),
                m = n(173),
                E = n(107),
                y = n.n(E),
                A = n(111),
                T = n.n(A),
                S = n(118),
                M = n.n(S),
                w = n(320),
                x = n.n(w),
                C = n(114),
                I = n.n(C),
                b = n(56),
                R = n.n(b),
                P = n(707),
                _ = n.n(P),
                k = n(50),
                L = n.n(k),
                D = n(35),
                O = n.n(D),
                N = n(52),
                U = n.n(N),
                B = n(65),
                F = n.n(B),
                G = n(469),
                H = n(132),
                V = n(29),
                Y = n(460),
                W = n(116),
                K = n(347),
                z = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).message = void 0, n.scene = e, n.createText(), n.setWorldSize(80, 36.5), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createText = function () {
                        this.message = this.scene.make.text({
                            text: "WIN",
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "25px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 5,
                                fontStyle: "bold",
                                padding: {
                                    left: 10,
                                    right: 10
                                }
                            }
                        }), this.message.setHighQuality(), this.message.setShadow(0, 10, "#000000", 0, !0), this.add(this.message), Phaser.Display.Align.In.Center(this.message, this)
                    }, n.updateResult = function (t) {
                        var e = t ? "WIN" : "LOSE";
                        this.message.setText(e)
                    }, e
                }(Phaser.GameObjects.Container),
                X = g.default.DEFAULT_8_BIT,
                j = X.KEY,
                q = X.FRAME,
                Z = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).button = void 0, a.matchHistoryResult = void 0, a.avatar = void 0, a.rankIcon = void 0, a.rankText = void 0, a.username = void 0, a.score = void 0, a.scoreText = void 0, a.background = void 0, a.showPopUp = void 0, a.showItems = void 0, a.payload = void 0, a.handleChallengeFriend = (0, i.default)(s().mark((function t() {
                            var e, n;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = a.payload.playerId, n = a.scene.battle, t.next = 4, n.createBattle(e);
                                    case 4:
                                        n.getStatus() === m.default.STARTED && a.scene.screen.close(v.ScreenKeys.BATTLE_SCREEN);
                                    case 5:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        }))), a.createBackground(), a.updateSize(), a.createRank(), a.createAvatar(), a.createUsername(), a.createScore(), a.createButton(), a.createMatchHistoryResult(), n && a.updateInfo(n), a.scene.add.existing((0, o.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateInfo = function (t) {
                        this.payload = (0, V.default)({
                            scoreRight: !0,
                            isHighlight: !1,
                            isRevenge: t.isRevenge || !1,
                            isHistory: t.isHistory || !1,
                            isInAnimation: t.isInAnimation || !1
                        }, t), this.updateBackground(), this.updateAvatar(), this.updateRank(), this.updateButton(), this.updateUsername(), this.updateScore(), this.updateMatchHistoryResult()
                    }, n.updatePosition = function () {
                        this.payload.scoreRight ? Phaser.Display.Align.To.RightCenter(this.score, this.avatar, 120) : Phaser.Display.Align.To.RightCenter(this.score, this.avatar, 80)
                    }, n.createBackground = function () {
                        this.background = this.scene.make.image({
                            key: j,
                            frame: q.LEADERBOARD_BG_DARK
                        }), this.add(this.background), this.updateBackground()
                    }, n.updateBackground = function () {
                        var t = this.payload || {},
                            e = t.isHighlight,
                            n = void 0 !== e && e,
                            i = t.isHistory,
                            a = t.isRevenge;
                        i ? this.background.setFrame(a ? q.LEADERBOARD_BG_LOSE : q.LEADERBOARD_BG_WIN) : a ? this.background.setFrame(q.LEADERBOARD_BG_LOSE) : n ? (this.background.setFrame(q.LEADERBOARD_BG_LIGHT), this.background.setWorldSize(313.5, 41)) : (this.background.setFrame(q.LEADERBOARD_BG_DARK), this.background.setWorldSize(314.5, 42))
                    }, n.updateSize = function () {
                        var t = this.background,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createAvatar = function () {
                        this.avatar = new K.default(this.scene, {
                            size: 42,
                            loadDelay: 300
                        }), this.add(this.avatar), Phaser.Display.Align.In.LeftCenter(this.avatar, this.rankIcon, -40)
                    }, n.updateAvatar = function () {
                        var t = this.payload,
                            e = t.playerId,
                            n = t.photo;
                        this.avatar.loadPhoto(e, n)
                    }, n.createRank = function () {
                        this.createRankIcon(), this.createRankText()
                    }, n.updateRank = function () {
                        var t = this.payload,
                            e = t.isHistory,
                            n = t.isRevenge;
                        if (e || n) return this.rankIcon.kill(), void this.rankText.kill();
                        var i = this.payload.rank;
                        this.rankIcon.revive(), this.rankText.revive(), this.updateRankIcon(i), this.updateRankText(i)
                    }, n.updateButton = function () {
                        var t = this.payload,
                            e = t.isHighlight,
                            n = t.isHistory,
                            i = t.isInAnimation;
                        t.isRevenge && this.button.setName("Revenge"), n || e ? this.button.kill() : (this.button.revive(), this.button.setDisabled(i), this.button.alpha = 1)
                    }, n.enableButtonAfterAnimation = function () {
                        this.button.visible && this.button.setDisabled(!1)
                    }, n.updateMatchHistoryResult = function () {
                        var t = this.payload,
                            e = t.isHistory,
                            n = t.isRevenge;
                        e ? (this.matchHistoryResult.revive(), this.matchHistoryResult.updateResult(!n)) : this.matchHistoryResult.kill()
                    }, n.getRankIconFrame = function (t) {
                        var e = null;
                        switch (t) {
                            case 1:
                                e = q.LEADERBOARD_RANK_GOLD;
                                break;
                            case 2:
                                e = q.LEADERBOARD_RANK_SILVER;
                                break;
                            case 3:
                                e = q.LEADERBOARD_RANK_COPPER
                        }
                        return e
                    }, n.createRankIcon = function () {
                        this.rankIcon = this.scene.make.image({
                            key: j
                        }), this.updateRankIcon(1), this.kill(), this.add(this.rankIcon), Phaser.Display.Align.In.LeftCenter(this.rankIcon, this)
                    }, n.updateRankIcon = function (t) {
                        var e = this.getRankIconFrame(t);
                        e ? (this.rankIcon.revive(), this.rankIcon.setFrame(e), e == q.LEADERBOARD_RANK_GOLD && this.rankIcon.setWorldSize(39, 34.5), e == q.LEADERBOARD_RANK_SILVER && this.rankIcon.setWorldSize(32.5, 32), e == q.LEADERBOARD_RANK_COPPER && this.rankIcon.setWorldSize(27, 35.5)) : this.rankIcon.kill()
                    }, n.createRankText = function () {
                        this.rankText = this.scene.make.text({
                            text: "0",
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "16px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 3
                            }
                        }), this.rankText.setHighQuality(), this.rankText.kill(), this.add(this.rankText), Phaser.Display.Align.In.Center(this.rankText, this.rankIcon, 0, -1)
                    }, n.updateRankText = function (t) {
                        var e;
                        this.rankText.kill(), t > 3 && this.rankText.revive(), null == (e = this.rankText) || e.setText("" + t)
                    }, n.getShortName = function (t) {
                        var e = t.substring(0, 7);
                        return e.split(" ")[0] || e
                    }, n.createUsername = function () {
                        this.username = this.scene.make.text({
                            text: "Player",
                            style: {
                                fontFamily: p.default.SYSTEM_FAMILY_FONT,
                                fontSize: "16px",
                                fontStyle: "bold",
                                color: "#ffffff"
                            }
                        }), this.username.setHighQuality(), Phaser.Display.Align.In.LeftCenter(this.username, this.avatar, -53, -8), this.add(this.username)
                    }, n.updateUsername = function () {
                        this.payload.isHistory ? Phaser.Display.Align.In.LeftCenter(this.username, this.avatar, -48, 0) : Phaser.Display.Align.In.LeftCenter(this.username, this.avatar, -53, -8);
                        var t = this.payload.name;
                        this.username.setText(this.getShortName(t))
                    }, n.createScore = function () {
                        this.score = this.scene.add.container(), this.scoreText = this.scene.make.text({
                            text: "Level 99999",
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "14px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2
                            }
                        }), this.scoreText.setHighQuality(), this.score.add(this.scoreText), this.add(this.score), Phaser.Display.Align.In.BottomLeft(this.score, this.username, 0, -1)
                    }, n.updateScore = function () {
                        if (this.payload.isHistory) this.scoreText.kill();
                        else {
                            this.scoreText.revive();
                            var t = (this.payload || {}).score,
                                e = void 0 === t ? "0" : t;
                            this.scoreText.setText("Level " + e)
                        }
                    }, n.createButton = function () {
                        this.button = new u.default(this.scene, j, q.LEADERBOARD_BUTTON_GREEN, 80, 36.5), this.button.setName("ChallengeFriend");
                        var t = this.scene.make.image({
                            key: j,
                            frame: q.ICON_BATTLE
                        });
                        t.setWorldSize(23, 21), Phaser.Display.Align.In.Center(t, this.button, 0, -2), this.button.add(t), Phaser.Display.Align.In.RightCenter(this.button, this, -10), this.add(this.button), this.button.onClick = this.handleChallengeFriend
                    }, n.createMatchHistoryResult = function () {
                        this.matchHistoryResult = new z(this.scene), this.add(this.matchHistoryResult), Phaser.Display.Align.In.RightCenter(this.matchHistoryResult, this, 25)
                    }, n.runShowPopUpAnimation = function (t, e) {
                        this.scene.tweens.killTweensOf(this), this.showPopUp = new W.default({
                            targets: [this],
                            delay: t,
                            duration: e,
                            props: {
                                y: {
                                    start: this.y + 70,
                                    to: this.y
                                }
                            }
                        }), this.showPopUp.play()
                    }, n.runShowItemAnimation = function (t, e) {
                        var n = this,
                            i = this.getAll();
                        this.scene.tweens.killTweensOf(i), this.showItems = new Y.default({
                            targets: i,
                            duration: e,
                            delay: this.scene.tweens.stagger(50, {
                                start: t + 50
                            }),
                            props: {
                                scale: {
                                    duration: 1e3,
                                    getStart: function (t) {
                                        return .8 * t.scale
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    },
                                    ease: Phaser.Math.Easing.Elastic.Out,
                                    easeParams: [.1, .45]
                                }
                            },
                            onStart: function () {
                                n.showItems.baseScales = O()(i).call(i, (function (t) {
                                    return t.scale
                                }))
                            },
                            onStop: function () {
                                i.forEach((function (t, e) {
                                    t.scale = n.showItems.baseScales[e]
                                }))
                            }
                        }), this.showItems.play()
                    }, n.runShowUpAnimation = function (t, e) {
                        void 0 === t && (t = 0), void 0 === e && (e = 300);
                        var n = 100 * t;
                        this.runShowPopUpAnimation(n, e), this.runShowItemAnimation(n, e)
                    }, e
                }(Phaser.GameObjects.Container);

            function Q(t, e) {
                var n = "undefined" !== typeof T() && M()(t) || t["@@iterator"];
                if (n) return (n = n.call(t)).next.bind(n);
                if (Array.isArray(t) || (n = function (t, e) {
                        var n;
                        if (!t) return;
                        if ("string" === typeof t) return J(t, e);
                        var i = L()(n = Object.prototype.toString.call(t)).call(n, 8, -1);
                        "Object" === i && t.constructor && (i = t.constructor.name);
                        if ("Map" === i || "Set" === i) return y()(t);
                        if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return J(t, e)
                    }(t)) || e && t && "number" === typeof t.length) {
                    n && (t = n);
                    var i = 0;
                    return function () {
                        return i >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[i++]
                        }
                    }
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
            }

            function J(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var n = 0, i = new Array(e); n < e; n++) i[n] = t[n];
                return i
            }
            var $ = GameCore.Configs.LeadersBoard.Limit,
                tt = GameCore.Configs.Battle.RankingDevTest,
                et = function (t) {
                    function e(e) {
                        var n;
                        (n = t.call(this, e) || this).scene = void 0, n.currentPlayerId = void 0, n.scroller = void 0, n.scene = e;
                        var i = n.scene.player;
                        return n.currentPlayerId = i.getPlayerId(), n.createReuseScroller(), n.scene.add.existing((0, o.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createReuseScroller = function () {
                        this.scroller = new G.default(this.scene, {
                            classType: Z,
                            listConfigs: [],
                            width: 320,
                            height: 210,
                            padding: 10,
                            marginTop: 10,
                            marginBottom: 10
                        }), this.scroller.createMask(), this.scroller.setPosition(0, 10), this.add(this.scroller)
                    }, n.updateData = function (t) {
                        var e = x()(t) || [];
                        if (e.length < 1) {
                            var n = this.scene.screen.get(v.ScreenKeys.BATTLE_SCREEN);
                            return n.isSwitchable = !0, void n.board.showMessage(!0, "No matches available!")
                        }
                        var i = I()(e).call(e, (function (t, e) {
                                return +e.score - +t.score
                            })),
                            a = this.getLeaderDataForScroller(i);
                        this.scroller.updateConfig(a), this.showLeaders()
                    }, n.updateBattleRankingBoard = function (t) {
                        var e = this,
                            n = x()(t) || [];
                        if (n.length < 1) {
                            var i = this.scene.screen.get(v.ScreenKeys.BATTLE_SCREEN);
                            return i.isSwitchable = !0, void i.board.showMessage(!0, "No matches available!")
                        }
                        var a = R()(n).call(n, (function (t) {
                                return null !== t.name
                            })),
                            r = I()(a).call(a, (function (t, e) {
                                return +t.rank - +e.rank
                            })),
                            s = _()(r).call(r, (function (t) {
                                return t.playerId === e.currentPlayerId
                            }));
                        if (-1 !== s) {
                            var o = s,
                                l = r.length - s + 1,
                                c = [];
                            tt ? (o >= 2 && l >= 3 && (c = L()(r).call(r, s - 2, s + 4)), o < 2 && (c = r.length > 6 ? L()(r).call(r, 0, 6) : r), l < 3 && (c = r.length > l + 3 ? L()(r).call(r, -(l + 3)) : r)) : (o >= 9 && l >= 40 && (c = L()(r).call(r, s - 9, s + 41)), o < 9 && (c = r.length > 50 ? L()(r).call(r, 0, 50) : r), l < 40 && (c = r.length > l + 10 ? L()(r).call(r, -(l + 10)) : r));
                            var u = this.getLeaderDataForScroller(c);
                            u.forEach((function (t, e) {
                                t.rank = e + 1
                            })), this.scroller.updateConfig(u), this.showLeaders()
                        } else this.updateData(t)
                    }, n.getLeaderDataForScroller = function (t) {
                        for (var e, n = [], i = Q(t); !(e = i()).done;) {
                            var a = e.value;
                            if (n.length >= $) break;
                            var r = a.playerId,
                                s = a.photo,
                                o = a.score,
                                l = a.name,
                                c = a.rank;
                            if (r && l) {
                                var u = this.currentPlayerId === r,
                                    h = {
                                        playerId: r,
                                        photo: s || H.default.AVATAR.FILE,
                                        name: l,
                                        rank: c,
                                        score: o,
                                        scoreRight: !1,
                                        isRevenge: !1,
                                        isHighlight: u,
                                        isInAnimation: !0
                                    };
                                n.push(h)
                            }
                        }
                        return n
                    }, n.removeLeaders = function () {
                        this.scroller.updateConfig([])
                    }, n.getLeaders = function () {
                        return this.scroller.getChildren()
                    }, n.showLeaders = function () {
                        var t = this,
                            e = this.getLeaders();
                        if (e.length < 1) {
                            var n = this.scene.screen.get(v.ScreenKeys.BATTLE_SCREEN);
                            return n.isSwitchable = !0, void n.board.showMessage(!0, "No matches available!")
                        }
                        for (var i = Math.min(e.length, 6), a = 0; a < i; a++) {
                            var r = e[a];
                            r && (r.setVisible(!0), r.runShowUpAnimation(a, 300))
                        }
                        var s = 300 + 100 * i + 250;
                        this.scene.time.delayedCall(s, (function () {
                            t.scene.screen.get(v.ScreenKeys.BATTLE_SCREEN).isSwitchable = !0, e.forEach((function (t) {
                                t.enableButtonAfterAnimation()
                            }));
                            for (var n = t.scroller.getConfig(), i = [], a = 0; a < n.length; a++) {
                                var r = n[a],
                                    s = {
                                        playerId: r.playerId,
                                        photo: r.photo,
                                        name: r.name,
                                        rank: r.rank,
                                        score: r.score,
                                        scoreRight: r.scoreRight,
                                        isRevenge: r.isRevenge,
                                        isHighlight: r.isHighlight,
                                        isHistory: r.isHistory,
                                        isInAnimation: !1
                                    };
                                i.push(s)
                            }
                            t.scroller.updateConfig(i), t.scroller.setEnable(!0)
                        }))
                    }, n.updateRevengeMatches = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.getLostOpponentIds();
                                    case 2:
                                        e = t.sent, this.requestLostOpponentProfiles(e);
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getLostOpponentIds = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e, n, i, a, r;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.scene.battle.getMatchHistory();
                                    case 2:
                                        if (e = t.sent) {
                                            t.next = 5;
                                            break
                                        }
                                        return t.abrupt("return", []);
                                    case 5:
                                        if (n = this.currentPlayerId, !((i = R()(e).call(e, (function (t) {
                                                var e = t.whitePlayerId === n || t.blackPlayerId === n,
                                                    i = t.whitePlayerId === n ? 1 === t.blackPlayerLevel : 1 === t.whitePlayerLevel;
                                                return e && i
                                            }))).length < 1)) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.abrupt("return", []);
                                    case 9:
                                        if (this.recentMatchesTimeSort(i), a = O()(i).call(i, (function (t) {
                                                return t.whitePlayerId === n ? t.blackPlayerId : t.whitePlayerId
                                            })), !((r = R()(a).call(a, (function (t, e, n) {
                                                return U()(n).call(n, t) === e
                                            }))).length > 15)) {
                                            t.next = 14;
                                            break
                                        }
                                        return t.abrupt("return", L()(r).call(r, 0, 15));
                                    case 14:
                                        return t.abrupt("return", r);
                                    case 15:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.requestLostOpponentProfiles = function () {
                        var t = (0, i.default)(s().mark((function t(e) {
                            var n, i, a, r, o, l, c, u, h, d, f, p, g;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (n = this.scene.game.profile, i = GameCore.Configs.Battle.UseMock, 0 !== e.length) {
                                            t.next = 6;
                                            break
                                        }
                                        return this.scroller.updateConfig([]), this.showLeaders(), t.abrupt("return");
                                    case 6:
                                        return t.next = 8, n.requestProfiles(e);
                                    case 8:
                                        a = n.getProfiles(), r = [], o = Q(e);
                                    case 11:
                                        if ((l = o()).done) {
                                            t.next = 28;
                                            break
                                        }
                                        if (c = l.value, !i) {
                                            t.next = 17;
                                            break
                                        }
                                        return u = {
                                            playerId: c,
                                            photo: "./assets/images/others/avatar.png",
                                            name: "MPlayer",
                                            rank: F()(c) - 1e5 + 1,
                                            score: Math.floor(1e5 / F()(c)).toString(),
                                            scoreRight: !1,
                                            isRevenge: !0,
                                            isHighlight: !1,
                                            isInAnimation: !0
                                        }, r.push(u), t.abrupt("continue", 26);
                                    case 17:
                                        if (!(r.length >= $)) {
                                            t.next = 19;
                                            break
                                        }
                                        return t.abrupt("break", 28);
                                    case 19:
                                        if (a[c]) {
                                            t.next = 21;
                                            break
                                        }
                                        return t.abrupt("continue", 26);
                                    case 21:
                                        if (h = a[c], d = h.name, f = h.photo, p = h.score, d) {
                                            t.next = 24;
                                            break
                                        }
                                        return t.abrupt("continue", 26);
                                    case 24:
                                        g = {
                                            playerId: c,
                                            photo: f || H.default.AVATAR.FILE,
                                            name: d,
                                            rank: 0,
                                            score: "" + p,
                                            scoreRight: !1,
                                            isRevenge: !0,
                                            isHighlight: !1,
                                            isInAnimation: !0
                                        }, r.push(g);
                                    case 26:
                                        t.next = 11;
                                        break;
                                    case 28:
                                        this.scroller.updateConfig(r), this.showLeaders();
                                    case 30:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.updateRecentMatches = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.getRecentMatches();
                                    case 2:
                                        e = t.sent, this.getRecentMatchOpponents(e);
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getRecentMatches = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e, n, i;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.scene.battle.getMatchHistory();
                                    case 2:
                                        if (e = t.sent) {
                                            t.next = 5;
                                            break
                                        }
                                        return t.abrupt("return", []);
                                    case 5:
                                        if (n = this.currentPlayerId, i = R()(e).call(e, (function (t) {
                                                return t.whitePlayerId === n || t.blackPlayerId === n
                                            })), this.recentMatchesTimeSort(i), !(i.length > 15)) {
                                            t.next = 10;
                                            break
                                        }
                                        return t.abrupt("return", L()(i).call(i, 0, 15));
                                    case 10:
                                        return t.abrupt("return", i);
                                    case 11:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getRecentMatchOpponents = function () {
                        var t = (0, i.default)(s().mark((function t(e) {
                            var n, i, a, r, o, l, c, u, h, d, f, p, g, v, m, E, y, A, T = this;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (n = this.scene.game.profile, i = GameCore.Configs.Battle.UseMock, 0 !== e.length) {
                                            t.next = 6;
                                            break
                                        }
                                        return this.scroller.updateConfig([]), this.showLeaders(), t.abrupt("return");
                                    case 6:
                                        return a = O()(e).call(e, (function (t) {
                                            return t.whitePlayerId === T.currentPlayerId ? t.blackPlayerId : t.whitePlayerId
                                        })), r = R()(a).call(a, (function (t, e, n) {
                                            return U()(n).call(n, t) === e
                                        })), t.next = 10, n.requestProfiles(r);
                                    case 10:
                                        o = n.getProfiles(), l = [], c = Q(e);
                                    case 13:
                                        if ((u = c()).done) {
                                            t.next = 33;
                                            break
                                        }
                                        if (h = u.value, d = h.whitePlayerId === this.currentPlayerId ? h.blackPlayerId : h.whitePlayerId, f = h.whitePlayerId === this.currentPlayerId ? h.whitePlayerLevel : h.blackPlayerLevel, p = 2 === f, 0 !== f) {
                                            t.next = 20;
                                            break
                                        }
                                        return t.abrupt("continue", 31);
                                    case 20:
                                        if (!i) {
                                            t.next = 24;
                                            break
                                        }
                                        return g = {
                                            playerId: d,
                                            photo: "./assets/images/others/avatar.png",
                                            name: "MPlayer",
                                            rank: F()(d) - 1e5 + 1,
                                            score: Math.floor(1e5 / F()(d)).toString(),
                                            scoreRight: !1,
                                            isRevenge: p,
                                            isHighlight: !1,
                                            isHistory: !0,
                                            isInAnimation: !0
                                        }, l.push(g), t.abrupt("continue", 31);
                                    case 24:
                                        if (o[d]) {
                                            t.next = 26;
                                            break
                                        }
                                        return t.abrupt("continue", 31);
                                    case 26:
                                        if (v = o[d], m = v.name, E = v.photo, y = v.score, m) {
                                            t.next = 29;
                                            break
                                        }
                                        return t.abrupt("continue", 31);
                                    case 29:
                                        A = {
                                            playerId: d,
                                            photo: E || H.default.AVATAR.FILE,
                                            name: m,
                                            rank: 0,
                                            score: "" + y,
                                            scoreRight: !1,
                                            isRevenge: p,
                                            isHighlight: !1,
                                            isHistory: !0,
                                            isInAnimation: !0
                                        }, l.push(A);
                                    case 31:
                                        t.next = 13;
                                        break;
                                    case 33:
                                        this.scroller.updateConfig(l), this.showLeaders();
                                    case 35:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.recentMatchesTimeSort = function (t) {
                        I()(t).call(t, (function (t, e) {
                            var n = new Date(t.updatedAt.split("T")[0]),
                                i = new Date(e.updatedAt.split("T")[0]);
                            if (n.getTime() !== i.getTime()) return n.getTime() > i.getTime() ? -1 : 1;
                            var a = t.updatedAt.split("T")[1].substring(0, 8),
                                r = e.updatedAt.split("T")[1].substring(0, 8);
                            return 3600 * F()(a.split(":")[0]) + 60 * F()(a.split(":")[1]) + F()(a.split(":")[2]) > 3600 * F()(r.split(":")[0]) + 60 * F()(r.split(":")[1]) + F()(r.split(":")[2]) ? -1 : 1
                        }))
                    }, e
                }(Phaser.GameObjects.Container),
                nt = et,
                it = n(73),
                at = n(38),
                rt = n(92),
                st = g.default.DEFAULT_8_BIT,
                ot = st.KEY,
                lt = st.FRAME,
                ct = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).isSelected = void 0, i.text = void 0, i.line = void 0, i.hitZone = void 0, i.parentName = void 0, i.setName(n), i.createText(n), i.createLine(), i.createHitZone(), i
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.setSelected = function (t) {
                        this.isSelected !== t && (t ? (this.line.revive(), this.text.setTint(16777215)) : (this.line.kill(), this.text.setTint(6073850)), this.isSelected = t)
                    }, n.createText = function (t) {
                        var e = this.scene.make.text({
                            text: t,
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "14px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 1
                            }
                        });
                        e.setHighQuality(), e.setShadow(-1, 5, "#000000", 0, !0), Phaser.Display.Align.In.Center(e, this, 0, -2), this.add(e), this.text = e
                    }, n.createLine = function () {
                        var t = this.scene.make.image({
                            key: ot,
                            frame: lt.LEADERBOARD_TAB_LINE
                        });
                        t.setWorldSize(57, 3.5), Phaser.Display.Align.In.Center(t, this, 0, 12), this.add(t), this.line = t
                    }, n.createHitZone = function () {
                        this.hitZone = this.scene.add.zone(0, 0, 60, 20), this.hitZone.setSize(60, 20), this.add(this.hitZone)
                    }, n.logButtonEvent = function () {
                        var t = this.getParentName(),
                            e = this.name;
                        this.scene.analytics.event(at.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: e,
                            screen_name: t
                        })
                    }, n.getParentName = function () {
                        if (this.parentName) return this.parentName;
                        for (var t = this.parentContainer; t;) {
                            if (t instanceof GameCore.Screen) {
                                var e = t;
                                return this.parentName = e.getScreenName(), this.parentName
                            }
                            t = t.parentContainer
                        }
                        return this.parentName = this.scene.getSceneName(), this.parentName
                    }, (0, it.default)(e, [{
                        key: "onClick",
                        set: function (t) {
                            var e = this;
                            this.hitZone.removeAllListeners(), this.hitZone.setInteractive({
                                useHandCursor: !0
                            }), this.hitZone.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, (function () {
                                e.logButtonEvent(), t(), (0, rt.default)(50)
                            }))
                        }
                    }]), e
                }(Phaser.GameObjects.Container),
                ut = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.tabFriends = void 0, n.tabRevenge = void 0, n.tabRanking = void 0, n.tabHistory = void 0, n.currentlyActiveTab = void 0, n.scene = e, n.createTabFriends(), n.createTabRevenge(), n.createTabRanking(), n.createTabHistory(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.selectTabFriends = function () {
                        this.tabFriends.setSelected(!0), this.tabRevenge.setSelected(!1), this.tabRanking.setSelected(!1), this.tabHistory.setSelected(!1), this.currentlyActiveTab = this.tabFriends
                    }, n.selectTabRevenge = function () {
                        this.tabRevenge.setSelected(!0), this.tabFriends.setSelected(!1), this.tabRanking.setSelected(!1), this.tabHistory.setSelected(!1), this.currentlyActiveTab = this.tabRevenge
                    }, n.selectTabRanking = function () {
                        this.tabRanking.setSelected(!0), this.tabFriends.setSelected(!1), this.tabRevenge.setSelected(!1), this.tabHistory.setSelected(!1), this.currentlyActiveTab = this.tabRanking
                    }, n.selectTabHistory = function () {
                        this.tabHistory.setSelected(!0), this.tabFriends.setSelected(!1), this.tabRevenge.setSelected(!1), this.tabRanking.setSelected(!1), this.currentlyActiveTab = this.tabHistory
                    }, n.createTabFriends = function () {
                        this.tabFriends = new ct(this.scene, "Friends"), this.tabFriends.setName("FriendsTab"), Phaser.Display.Align.In.Center(this.tabFriends, this, -110), this.add(this.tabFriends)
                    }, n.createTabRevenge = function () {
                        this.tabRevenge = new ct(this.scene, "Revenge"), this.tabRevenge.setName("RevengeTab"), Phaser.Display.Align.In.Center(this.tabRevenge, this, -37), this.add(this.tabRevenge)
                    }, n.createTabRanking = function () {
                        this.tabRanking = new ct(this.scene, "Ranking"), this.tabRanking.setName("RankingTab"), Phaser.Display.Align.In.Center(this.tabRanking, this, 38), this.add(this.tabRanking)
                    }, n.createTabHistory = function () {
                        this.tabHistory = new ct(this.scene, "History"), this.tabHistory.setName("HistoryTab"), Phaser.Display.Align.In.Center(this.tabHistory, this, 110), this.add(this.tabHistory)
                    }, e
                }(Phaser.GameObjects.Container),
                ht = g.default.DEFAULT_8_BIT,
                dt = ht.KEY,
                ft = ht.FRAME,
                pt = g.default.DEFAULT,
                gt = pt.KEY,
                vt = pt.FRAME,
                mt = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scene = void 0, n.background = void 0, n.tabs = void 0, n.leaders = void 0, n.loading = void 0, n.message = void 0, n.challengeFriendsBtn = void 0, n.closeBtn = void 0, n.onClose = void 0, n.messageAnimation = void 0, n.handleOnCloseClick = function () {
                            n.onClose && n.onClose()
                        }, n.handleChallengeFriends = (0, i.default)(s().mark((function t() {
                            var e, i, a, r, o, c, u, h;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, e = n.scene, i = e.player, a = e.battle, r = e.facebook, t.next = 4, r.chooseAsync();
                                    case 4:
                                        if (!1 !== (o = t.sent)) {
                                            t.next = 7;
                                            break
                                        }
                                        throw new Error("User canceled");
                                    case 7:
                                        if (GameCore.Utils.Valid.isString(o)) {
                                            t.next = 9;
                                            break
                                        }
                                        throw new Error("No context found");
                                    case 9:
                                        return c = i.getPlayerId(), t.next = 12, r.getContextPlayers(c);
                                    case 12:
                                        return u = t.sent, h = l.SampleOpponent.playerId, u.length > 0 && (h = u[0].playerId), t.next = 17, a.createBattle(h);
                                    case 17:
                                        a.getStatus() === m.default.STARTED && n.scene.screen.close(v.ScreenKeys.BATTLE_SCREEN), t.next = 23;
                                        break;
                                    case 20:
                                        t.prev = 20, t.t0 = t.catch(0);
                                    case 23:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 20]
                            ])
                        }))), n.scene = e, n.createBackground(), n.createLoading(), n.createMessage(), n.createContents(), n.createCloseButton(), n.createAnimation(), n.updateSize(), n.scene.add.existing((0, o.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateSize = function () {
                        var t = this.background,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.showLoading = function (t) {
                        this.loading.setVisible(t), this.showMessage(!1)
                    }, n.showMessage = function (t, e) {
                        this.message.setVisible(t), e && (this.message.setText(e), this.messageAnimation.play())
                    }, n.createBackground = function () {
                        this.background = new f.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 332,
                            height: 404.5,
                            topInnerCornerStrokeWidth: 1,
                            rightInnerCornerStrokeWidth: 3,
                            lightY: -80
                        }), this.add(this.background), this.setSize(this.background.width, this.background.height)
                    }, n.recalculateLightPosition = function () {
                        this.background && this.background.recalculateLightPosition()
                    }, n.createLoading = function () {
                        this.loading = new d.default(this.scene), this.loading.setWorldSize(113, 113), this.add(this.loading), Phaser.Display.Align.In.Center(this.loading, this.background)
                    }, n.createMessage = function () {
                        this.message = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18),
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.add(this.message), Phaser.Display.Align.In.Center(this.message, this.background)
                    }, n.createContents = function () {
                        this.createLeaders(), this.createTitle(), this.createTabs(), this.createChallengeFriendsBtn()
                    }, n.createLeaders = function () {
                        this.leaders = new nt(this.scene), this.add(this.leaders), Phaser.Display.Align.In.Center(this.leaders, this.background, 0, 0)
                    }, n.createTitle = function () {
                        var t = this.scene.add.container(),
                            e = this.scene.make.image({
                                key: gt,
                                frame: vt.RIBBON_BLUE
                            });
                        e.setWorldSize(250, 75);
                        var n = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(25),
                            text: "Battle"
                        });
                        Phaser.Display.Align.In.Center(n, e, 0, -10), t.add([e, n]), Phaser.Display.Align.In.Center(t, this.background, 0, -175), this.add(t)
                    }, n.createTabs = function () {
                        var t = this.scene.add.container(),
                            e = this.scene.make.image({
                                key: dt,
                                frame: ft.LEADERBOARD_TAB_BG
                            });
                        e.setWorldSize(328, 29), this.tabs = new ut(this.scene), t.add([e, this.tabs]), Phaser.Display.Align.In.Center(t, this.background, 0, -120), this.add(t)
                    }, n.createCloseButton = function () {
                        this.closeBtn = new h.default(this.scene), Phaser.Display.Align.In.TopRight(this.closeBtn, this, 10, 10), this.add(this.closeBtn), this.closeBtn.onClick = this.handleOnCloseClick
                    }, n.createChallengeFriendsBtn = function () {
                        this.challengeFriendsBtn = new u.default(this.scene, dt, ft.BUTTON_GREEN, 144, 57), this.add(this.challengeFriendsBtn);
                        var t = this.scene.make.text({
                            text: "CHALLENGE\nFRIENDS",
                            style: {
                                align: "center",
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "17px",
                                stroke: "#000000",
                                strokeThickness: 1,
                                padding: {
                                    left: 10,
                                    right: 10
                                }
                            }
                        });
                        t.setHighQuality(), t.setOrigin(.5, .5), t.setShadow(-10, 4, "#000000", 1), this.challengeFriendsBtn.add(t), Phaser.Display.Align.In.Center(t, this.challengeFriendsBtn, 18, -3);
                        var e = this.scene.make.image({
                            key: dt,
                            frame: ft.ICON_BATTLE
                        });
                        e.setOrigin(.5, .5), e.setWorldSize(34.5, 31.5), this.challengeFriendsBtn.add(e), Phaser.Display.Align.In.Center(e, this.challengeFriendsBtn, -45, -3), Phaser.Display.Align.In.BottomCenter(this.challengeFriendsBtn, this.background, 0, -15), this.challengeFriendsBtn.onClick = this.handleChallengeFriends
                    }, n.createAnimation = function () {
                        this.messageAnimation = new c.default({
                            targets: [this.message],
                            duration: 60,
                            repeat: 2
                        })
                    }, e
                }(Phaser.GameObjects.Container),
                Et = n(91),
                yt = n(582),
                At = function (t) {
                    return t[yt.REDUCER_NAME]
                },
                Tt = ((0, Et.createSelector)([function (t) {
                    return At(t).leaderboardId
                }], (function (t) {
                    return t
                })), (0, Et.createSelector)([function (t) {
                    return At(t).limit
                }], (function (t) {
                    return t
                })), (0, Et.createSelector)([function (t) {
                    return At(t).offset
                }], (function (t) {
                    return t
                })), (0, Et.createSelector)([function (t) {
                    return At(t).leaders
                }], (function (t) {
                    return t
                }))),
                St = ((0, Et.createSelector)([function (t) {
                    return At(t).type
                }], (function (t) {
                    return t
                })), (0, Et.createSelector)([function (t) {
                    return At(t).isRequesting
                }], (function (t) {
                    return t
                }))),
                Mt = n(348),
                wt = n(113),
                xt = n.n(wt),
                Ct = n(319),
                It = n(110),
                bt = n(470),
                Rt = n(585);

            function Pt(t, e) {
                var n = "undefined" !== typeof T() && M()(t) || t["@@iterator"];
                if (n) return (n = n.call(t)).next.bind(n);
                if (Array.isArray(t) || (n = function (t, e) {
                        var n;
                        if (!t) return;
                        if ("string" === typeof t) return _t(t, e);
                        var i = L()(n = Object.prototype.toString.call(t)).call(n, 8, -1);
                        "Object" === i && t.constructor && (i = t.constructor.name);
                        if ("Map" === i || "Set" === i) return y()(t);
                        if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return _t(t, e)
                    }(t)) || e && t && "number" === typeof t.length) {
                    n && (t = n);
                    var i = 0;
                    return function () {
                        return i >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[i++]
                        }
                    }
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
            }

            function _t(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var n = 0, i = new Array(e); n < e; n++) i[n] = t[n];
                return i
            }
            var kt = GameCore.Configs.LeadersBoard,
                Lt = kt.UseMock,
                Dt = kt.Limit,
                Ot = function (t, e, n, a) {
                    return void 0 === n && (n = Dt), void 0 === a && (a = 0),
                        function () {
                            var r = (0, i.default)(s().mark((function i(r, o) {
                                var l, c, u, h, d, f, p, g, v, m, E, y, A, T, S, M, w, x, C;
                                return s().wrap((function (i) {
                                    for (;;) switch (i.prev = i.next) {
                                        case 0:
                                            if (i.prev = 0, l = window.game, c = l.player, l.profile, o(), u = c.getPlayerId(), r(Ut()), r({
                                                    type: Rt.LEADERBOARD_DATA_REQUEST,
                                                    payload: {
                                                        leaderboardId: t,
                                                        type: e,
                                                        limit: n,
                                                        offset: a
                                                    }
                                                }), !Lt) {
                                                i.next = 13;
                                                break
                                            }
                                            return i.next = 9, (0, Ct.sleepAsync)(1e3);
                                        case 9:
                                            return 145, f = O()(h = xt()(d = new Array(n)).call(d, null)).call(h, (function (t, e) {
                                                var n = (e + 1) * (a + 1);
                                                return {
                                                    playerId: 145 === e ? u : "0" + n,
                                                    name: 145 === e ? "Current Player" : "MPlayer " + n,
                                                    photo: "./assets/images/others/avatar.png",
                                                    rank: n,
                                                    score: Math.floor(1e5 / n)
                                                }
                                            })), r(Nt(f, e)), i.abrupt("return");
                                        case 13:
                                            if (p = [], e !== Mt.LEADERBOARD_TYPE_GLOBAL) {
                                                i.next = 20;
                                                break
                                            }
                                            return i.next = 17, (0, bt.getLeaderboardAsync)({
                                                limit: n,
                                                offset: a
                                            });
                                        case 17:
                                            p = i.sent, i.next = 28;
                                            break;
                                        case 20:
                                            if (e !== Mt.LEADERBOARD_TYPE_FRIEND) {
                                                i.next = 28;
                                                break
                                            }
                                            return (g = c.getConnectedPlayerIds(n, a)).push(u), v = GameCore.Utils.Array.unique(g), i.next = 26, (0, bt.getConnectedPlayerEntriesAsync)({
                                                playerIds: v,
                                                limit: v.length
                                            });
                                        case 26:
                                            p = i.sent, v.forEach((function (t) {
                                                var e = R()(p).call(p, (function (e) {
                                                    return e.playerId === t
                                                }));
                                                e && 0 !== e.length || p.push({
                                                    playerId: t,
                                                    score: 0
                                                })
                                            }));
                                        case 28:
                                            for (m = {}, E = Pt(p); !(y = E()).done;) A = y.value, T = A.playerId, S = A.score, M = A.rank, w = A.getPlayer(), x = w.getPhoto(), C = w.getName(), m[T] = {
                                                playerId: T,
                                                name: C,
                                                photo: x,
                                                score: S,
                                                rank: M
                                            };
                                            r(Nt(m, e)), i.next = 38;
                                            break;
                                        case 34:
                                            i.prev = 34, i.t0 = i.catch(0), r(Nt([], e)), (0, It.sendException)(i.t0);
                                        case 38:
                                        case "end":
                                            return i.stop()
                                    }
                                }), i, null, [
                                    [0, 34]
                                ])
                            })));
                            return function (t, e) {
                                return r.apply(this, arguments)
                            }
                        }()
                },
                Nt = function (t, e) {
                    return {
                        type: Rt.LEADERBOARD_DATA_UPDATE,
                        payload: {
                            leaders: t,
                            type: e
                        }
                    }
                },
                Ut = function () {
                    return {
                        type: Rt.LEADERBOARD_DATA_CLEAR,
                        payload: {}
                    }
                },
                Bt = n(40),
                Ft = n(115),
                Gt = GameCore.Configs.LeadersBoard,
                Ht = Gt.LeaderboardId,
                Vt = Gt.Limit,
                Yt = GameCore.Configs.Battle.RankingDevTest,
                Wt = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i, a) || this).scene = void 0, r.board = void 0, r.tabId = void 0, r.offset = void 0, r.isRequesting = void 0, r.isSwitchable = void 0, r.showPopupAnimation = void 0, r.fadeOutAnimation = void 0, r.handleSelectFriendTab = function () {
                            r.isRequesting || r.isSwitchable && (r.isSwitchable = !1, r.selectFriendTab())
                        }, r.handleSelectRevengeTab = function () {
                            r.isRequesting || r.isSwitchable && (r.isSwitchable = !1, r.selectRevengeTab())
                        }, r.handleSelectRankingTab = function () {
                            r.isRequesting || r.isSwitchable && (r.isSwitchable = !1, r.selectRankingTab())
                        }, r.handleSelectHistoryTab = function () {
                            r.isRequesting || r.isSwitchable && (r.isSwitchable = !1, r.selectHistoryTab())
                        }, r.handleCloseClick = function () {
                            r.runFadeOutAnimation()
                        }, r.scene = e, r.background.setAlpha(.7), r.createBoard(), r.registerEvent(), r
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.open = function () {
                        t.prototype.open.call(this), this.runPopupAnimation(), this.isRequesting = !1, this.isSwitchable = !1, this.selectFriendTab(!1)
                    }, n.close = function () {
                        t.prototype.close.call(this)
                    }, n.recalculateLightPosition = function () {
                        this.board && this.board.recalculateLightPosition()
                    }, n.selectFriendTab = function (t) {
                        void 0 === t && (t = !0), this.tabId = Mt.LEADERBOARD_TYPE_FRIEND, this.offset = 0, this.board.showLoading(!0), this.board.leaders.removeLeaders(), this.board.tabs.selectTabFriends(), this.scene.game.storage.dispatch(Ot(Ht, Mt.LEADERBOARD_TYPE_FRIEND, 2 * Vt, this.offset)), t && this.scene.audio.playSound(Bt.default.BUTTON_CLICK)
                    }, n.selectRevengeTab = function () {
                        this.tabId = Mt.LEADERBOARD_TYPE_GLOBAL, this.offset = 0, this.board.showLoading(!0), this.board.leaders.removeLeaders(), this.board.tabs.selectTabRevenge(), this.scene.game.storage.dispatch(Ot(Ht, Mt.LEADERBOARD_TYPE_FRIEND, 2 * Vt, this.offset)), this.scene.audio.playSound(Bt.default.BUTTON_CLICK)
                    }, n.selectRankingTab = function () {
                        var t = (0, i.default)(s().mark((function t() {
                            var e, n, i, a;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return this.tabId = Mt.LEADERBOARD_TYPE_GLOBAL, e = Yt ? 3 : Vt, n = this.scene.game.player.getPlayerId(), t.next = 5, (0, bt.getPlayerEntryAsync)(n);
                                    case 5:
                                        i = t.sent, a = i ? i.rank : 0, this.offset = a > e ? a - e : 0, this.board.showLoading(!0), this.board.leaders.removeLeaders(), this.board.tabs.selectTabRanking(), this.scene.game.storage.dispatch(Ot(Ht, Mt.LEADERBOARD_TYPE_GLOBAL, 3 * e, this.offset)), this.scene.audio.playSound(Bt.default.BUTTON_CLICK);
                                    case 14:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.selectHistoryTab = function () {
                        this.tabId = Mt.LEADERBOARD_TYPE_FRIEND, this.offset = 0, this.board.showLoading(!0), this.board.leaders.removeLeaders(), this.board.tabs.selectTabHistory(), this.scene.game.storage.dispatch(Ot(Ht, Mt.LEADERBOARD_TYPE_FRIEND, 2 * Vt, this.offset)), this.scene.audio.playSound(Bt.default.BUTTON_CLICK)
                    }, n.createBoard = function () {
                        this.board = new mt(this.scene), this.board.onClose = this.handleCloseClick, Phaser.Display.Align.In.Center(this.board, this, 0, -20), this.add(this.board), this.board.tabs.tabFriends.onClick = this.handleSelectFriendTab, this.board.tabs.tabRevenge.onClick = this.handleSelectRevengeTab, this.board.tabs.tabRanking.onClick = this.handleSelectRankingTab, this.board.tabs.tabHistory.onClick = this.handleSelectHistoryTab
                    }, n.registerEvent = function () {
                        var t = this,
                            e = [{
                                selector: St,
                                callback: function (e) {
                                    if (t.isRequesting = e, t.board.showLoading(e), !1 === e) {
                                        var n = t.board.tabs.currentlyActiveTab;
                                        if ("RevengeTab" === n.name) return void t.board.leaders.updateRevengeMatches();
                                        if ("HistoryTab" === n.name) return void t.board.leaders.updateRecentMatches();
                                        var i = t.scene.game.storage.getState(),
                                            a = Tt(i);
                                        if ("RankingTab" === n.name) return void t.board.leaders.updateBattleRankingBoard(a);
                                        t.board.leaders.updateData(a)
                                    }
                                }
                            }];
                        this.scene.handleStateChange(e)
                    }, n.runPopupAnimation = function () {
                        this.showPopupAnimation || (this.showPopupAnimation = new W.default({
                            targets: [this.board]
                        })), this.showPopupAnimation.play()
                    }, n.runFadeOutAnimation = function () {
                        var t = this;
                        this.fadeOutAnimation || (this.fadeOutAnimation = new Ft.default({
                            targets: [this.background],
                            duration: 200,
                            props: {
                                alpha: {
                                    start: .7,
                                    from: .7,
                                    to: 0
                                }
                            },
                            onActive: function () {
                                t.board.kill()
                            },
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onComplete: function () {
                                t.background.setAlpha(.7), t.board.revive(), t.scene.screen.close(v.ScreenKeys.BATTLE_SCREEN)
                            }
                        })), this.fadeOutAnimation.play()
                    }, e
                }(GameCore.Screen),
                Kt = Wt
        },
        613: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return C
                }
            });
            var i = n(0),
                a = n(326),
                r = n(115),
                s = n(44),
                o = n(32),
                l = n(3),
                c = n(19),
                u = n(132),
                h = n(2),
                d = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, {
                            size: 120
                        }) || this).handleLoadComplete = function (t) {
                            if (n.scene) {
                                var e = n.payload.id;
                                if (e && e === t) {
                                    var i = e,
                                        a = n.scene.textures.get(i);
                                    a && a.key === i ? n.setPhoto(a.key) : n.setPhoto(u.default.AVATAR.KEY)
                                }
                            }
                        }, n.avtFrame.kill(), n
                    }
                    return (0, i.default)(e, t), e
                }(n(347).default),
                f = h.default.DEFAULT_8_BIT,
                p = f.KEY,
                g = f.FRAME,
                v = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).bg = void 0, i.avatar = void 0, i.playerName = void 0, i.level = void 0, i.tween = void 0, i.setName("PlayerCard"), i.createAvatar(), i.createFrame(n), i.updateSize(), i.createNameText(), i.createLevelText(), i.createAnimation(), i.scene.add.existing((0, l.default)(i)), i
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.updateData = function (t) {
                        var e = t.playerId,
                            n = t.playerName,
                            i = t.playerPhoto,
                            a = t.playerLevel;
                        this.playerName.setText(n || "Player"), this.level.setText("Lv. " + a), this.avatar.loadPhoto(e, i || u.default.AVATAR.FILE)
                    }, n.createFrame = function (t) {
                        var e = t ? g.CHALLENGE_GRADE_BLUE : g.CHALLENGE_GRADE_RED,
                            n = this.scene.make.image({
                                key: p,
                                frame: e
                            });
                        n.setName("bg"), n.setWorldSize(119, 153.5), this.add(n), this.bg = n
                    }, n.updateSize = function () {
                        this.setSize(this.bg.displayWidth, this.bg.displayHeight)
                    }, n.createAvatar = function () {
                        var t = new d(this.scene);
                        t.setName("avatar"), t.setPosition(1, -18), this.add(t), this.avatar = t
                    }, n.createNameText = function () {
                        var t = this.scene.make.text({
                            text: "Player1",
                            style: {
                                fontSize: "13px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2,
                                fixedWidth: 169,
                                align: "center",
                                fontFamily: c.default.SYSTEM_FAMILY_FONT
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), t.setShadow(0, 8, "#000000", 0, !0), t.setPosition(0, 45), this.add(t), this.playerName = t
                    }, n.createLevelText = function () {
                        var t = this.scene.make.text({
                            text: "Lv. 1",
                            style: {
                                fontSize: "9px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2,
                                fixedWidth: 117,
                                align: "center",
                                fontFamily: c.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), t.setShadow(0, 8, "#000000", 0, !0), t.setPosition(0, 60), this.add(t), this.level = t
                    }, n.createAnimation = function () {
                        this.tween = this.scene.add.tween({
                            paused: !0,
                            targets: [this.avatar, this.playerName, this.level],
                            duration: 800,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            delay: this.scene.tweens.stagger(50, {
                                start: 50 * Math.random() + 50
                            }),
                            props: {
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            }
                        })
                    }, n.runAnimation = function (t) {
                        var e = this;
                        this.playerName.setAlpha(0), this.level.setAlpha(0), this.avatar.setAlpha(0), this.scene.time.delayedCall(t, (function () {
                            e.tween.play()
                        }))
                    }, e
                }(Phaser.GameObjects.Container),
                m = n(66),
                E = {
                    targets: [],
                    repeat: 3,
                    duration: 33,
                    ease: Phaser.Math.Easing.Expo.InOut,
                    props: {
                        y: 5
                    },
                    yoyo: !0
                },
                y = function (t) {
                    function e(e) {
                        var n, i, a;
                        return (a = t.call(this, E, e) || this).targetY = void 0, a.shakeAmount = void 0, a.handleSwitchPosition = function () {
                            var t;
                            a.shakeAmount *= .7, null == (t = a.tween) || t.updateTo("y", a.targetY + a.shakeAmount)
                        }, null != (n = a.config) && n.props ? (a.targetY = a.config.targets[0].y, a.shakeAmount = a.config.props.y - a.targetY, null == (i = a.tween) || i.on(Phaser.Tweens.Events.TWEEN_REPEAT, a.handleSwitchPosition), a) : (0, l.default)(a)
                    }
                    return (0, i.default)(e, t), e
                }(m.default),
                A = n(40),
                T = n(92),
                S = h.default.DEFAULT_8_BIT,
                M = S.KEY,
                w = S.FRAME,
                x = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).shape = void 0, n.glow = void 0, n.backEffect = void 0, n.energy = void 0, n.vs = void 0, n.fx1 = void 0, n.fx2 = void 0, n.mainTween = void 0, n.energyTween = void 0, n.fx1Tween = void 0, n.fx2Tween = void 0, n.glowTween1 = void 0, n.glowTween2 = void 0, n.onCompleteAnim = void 0, n.setName("VSComponent"), n.createShape(), n.createGlow(), n.createBackEffect(), n.createEnergy(), n.createVS(), n.createFx(), n.createAnimation(), n.scene.add.existing((0, l.default)(n)), n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createShape = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_SHAPE
                        });
                        t.setName("shape"), t.setWorldSize(204, 123.5), this.add(t), this.shape = t
                    }, n.createGlow = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_GLOW
                        });
                        t.setName("glow"), t.setWorldSize(518, 88.5), this.add(t), this.glow = t
                    }, n.createBackEffect = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_BACK_EFFECT
                        });
                        t.setName("backEffect"), t.setWorldSize(230, 230), this.add(t), this.backEffect = t
                    }, n.createEnergy = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_ICON_ENERGY
                        });
                        t.setName("energy"), t.setWorldSize(96, 106.5), t.setPosition(10, 5), this.add(t), this.energy = t
                    }, n.createVS = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_VS
                        });
                        t.setName("vs"), t.setWorldSize(40.5, 37.5), this.add(t), this.vs = t
                    }, n.createFx = function () {
                        var t = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_FX
                        });
                        t.setName("fx1"), t.setWorldSize(371.5, 59), t.setPosition(0, -31), this.add(t), this.fx1 = t;
                        var e = this.scene.make.image({
                            key: M,
                            frame: w.CHALLENGE_FX
                        });
                        e.setName("fx2"), e.setWorldSize(371.5, 59), e.setPosition(0, 26), this.add(e), this.fx2 = e
                    }, n.createAnimation = function () {
                        this.createMainTween(), this.createEnergyTween(), this.createFxTween(), this.createGlowTween()
                    }, n.createMainTween = function () {
                        var t = this,
                            e = this.vs.scale;
                        this.mainTween = this.scene.add.tween({
                            paused: !0,
                            targets: this.vs,
                            duration: 500,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onActive: function () {
                                t.vs.setTintFill(16777215), t.vs.setVisible(!0), t.vs.setAlpha(0), t.energyTween.resume()
                            },
                            props: {
                                scale: {
                                    from: 10 * e,
                                    to: e
                                },
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                t.scene.audio.playSound(A.default.THUNDER_SOUND), (0, T.default)(50), t.vs.clearTint(), t.fx1Tween.resume(), t.fx2Tween.resume(), t.glowTween1.resume()
                            }
                        })
                    }, n.createEnergyTween = function () {
                        var t = this,
                            e = this.energy,
                            n = e.x,
                            i = e.y;
                        this.energyTween = this.scene.add.tween({
                            paused: !0,
                            targets: this.energy,
                            duration: 500,
                            ease: Phaser.Math.Easing.Expo.In,
                            onActive: function () {
                                t.energy.setVisible(!0), t.energy.setAlpha(0)
                            },
                            props: {
                                x: {
                                    from: n + 50,
                                    to: n
                                },
                                y: {
                                    from: i - 50,
                                    to: i
                                },
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                new y({
                                    targets: [t],
                                    repeat: 5,
                                    duration: 60,
                                    props: {
                                        y: t.y + 5
                                    }
                                }).play()
                            }
                        })
                    }, n.createFxTween = function () {
                        var t = this,
                            e = this.fx1.x;
                        this.fx1Tween = this.scene.add.tween({
                            paused: !0,
                            targets: this.fx1,
                            duration: 500,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onActive: function () {
                                t.fx1.setVisible(!0)
                            },
                            props: {
                                x: {
                                    from: e - 100,
                                    to: e
                                },
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            }
                        });
                        var n = this.fx2.x;
                        this.fx2Tween = this.scene.add.tween({
                            paused: !0,
                            targets: this.fx2,
                            duration: 500,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onActive: function () {
                                t.fx2.setVisible(!0)
                            },
                            props: {
                                x: {
                                    from: n + 100,
                                    to: n
                                },
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            }
                        })
                    }, n.createGlowTween = function () {
                        var t = this;
                        this.glowTween1 = this.scene.add.tween({
                            paused: !0,
                            targets: [this.backEffect, this.glow],
                            duration: 500,
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onActive: function () {
                                t.backEffect.setVisible(!0), t.glow.setVisible(!0)
                            },
                            props: {
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                t.glowTween2.resume(), t.onCompleteAnim && t.onCompleteAnim()
                            }
                        }), this.glowTween2 = this.scene.add.tween({
                            paused: !0,
                            targets: this.backEffect,
                            duration: 1e6,
                            ease: Phaser.Math.Easing.Linear,
                            repeat: -1,
                            props: {
                                rotation: {
                                    start: 0,
                                    to: 180
                                }
                            }
                        })
                    }, n.runAnimation = function (t) {
                        var e = this;
                        this.vs.setVisible(!1), this.energy.setVisible(!1), this.fx1.setVisible(!1), this.fx2.setVisible(!1), this.glow.setVisible(!1), this.backEffect.setVisible(!1), this.scene.time.delayedCall(t, (function () {
                            e.mainTween.resume()
                        }))
                    }, n.stopAnimation = function () {
                        this.glowTween2.pause()
                    }, e
                }(Phaser.GameObjects.Container),
                C = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i, a) || this).playerFrame = void 0, r.opponentFrame = void 0, r.vsComponent = void 0, r.backgroundFadeInAnimation = void 0, r.bgFadeOutAnimation = void 0, r.fadeOutAnimation = void 0, r.background.setAlpha(.8), r.setDepth(o.ScreenDepth.SPLASH), r.createPlayerFrame(), r.createOpponentFrame(), r.createVsComponent(), r
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createPlayerFrame = function () {
                        this.playerFrame = new v(this.scene, !0), this.playerFrame.setName("playerFrame"), this.add(this.playerFrame), Phaser.Display.Align.In.Center(this.playerFrame, this, 0, 10 - this.playerFrame.height)
                    }, n.createOpponentFrame = function () {
                        this.opponentFrame = new v(this.scene, !1), this.opponentFrame.setName("opponentFrame"), this.add(this.opponentFrame), Phaser.Display.Align.In.Center(this.opponentFrame, this, 0, this.opponentFrame.height - 10)
                    }, n.createVsComponent = function () {
                        var t = this;
                        this.vsComponent = new x(this.scene), this.add(this.vsComponent), this.vsComponent.onCompleteAnim = function () {
                            t.scene.scene.resume(s.SceneKeys.GAME_SCENE), t.scene.time.delayedCall(1e3, (function () {
                                t.close()
                            }))
                        }
                    }, n.open = function () {
                        t.prototype.open.call(this), this.updateData(), this.runOpenAnimation()
                    }, n.close = function () {
                        this.setBlockInputOutsideEnabled(!1), this.visible && (this.vsComponent.stopAnimation(), this.runExitsAnimation(100, 1e3))
                    }, n.updateData = function () {
                        var t = this.scene.battle.getPlayerInfo();
                        t && this.playerFrame.updateData(t);
                        var e = this.scene.battle.getOpponentInfo();
                        e && this.opponentFrame.updateData(e)
                    }, n.runOpenAnimation = function () {
                        this.runBackgroundEntrancesAnimation(0, 200), this.runPopupContentEntrancesAnimation(500, 400)
                    }, n.runBackgroundEntrancesAnimation = function (t, e) {
                        this.backgroundFadeInAnimation || (this.backgroundFadeInAnimation = new a.default({
                            targets: [this.background],
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    start: 0,
                                    from: 0,
                                    to: .8
                                }
                            }
                        })), this.backgroundFadeInAnimation.play()
                    }, n.runPopupContentEntrancesAnimation = function (t, e) {
                        this.playerFrame.setAlpha(.8);
                        var n = this.playerFrame.scale;
                        this.scene.add.tween({
                            targets: [this.playerFrame],
                            props: {
                                scale: {
                                    start: n - .05,
                                    to: n,
                                    duration: 500
                                },
                                alpha: {
                                    start: .8,
                                    from: .8,
                                    to: 1,
                                    duration: e
                                }
                            },
                            ease: Phaser.Math.Easing.Expo.In
                        }), this.playerFrame.runAnimation(t), this.opponentFrame.setAlpha(.1), this.opponentFrame.setX(this.opponentFrame.x + 100), this.scene.add.tween({
                            targets: [this.opponentFrame],
                            props: {
                                alpha: {
                                    start: .1,
                                    from: .1,
                                    to: 1,
                                    duration: e
                                },
                                x: {
                                    start: this.opponentFrame.x,
                                    to: this.opponentFrame.x - 100,
                                    duration: e
                                }
                            },
                            ease: Phaser.Math.Easing.Expo.In
                        }), this.opponentFrame.runAnimation(t), this.vsComponent.runAnimation(1e3)
                    }, n.runExitsAnimation = function (t, e) {
                        var n = this;
                        this.fadeOutAnimation || (this.fadeOutAnimation = new r.default({
                            targets: [this.vsComponent, this.playerFrame, this.opponentFrame],
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    from: 1,
                                    to: 0
                                }
                            },
                            onComplete: function () {
                                n.scene.screen.close(n.name), n.vsComponent.setAlpha(1), n.playerFrame.setAlpha(1), n.opponentFrame.setAlpha(1), n.setVisible(!1)
                            }
                        }), this.bgFadeOutAnimation = new r.default({
                            targets: [this.background],
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    start: .8,
                                    from: .8,
                                    to: 0
                                }
                            }
                        })), this.fadeOutAnimation.play(), this.bgFadeOutAnimation.play()
                    }, e
                }(GameCore.Screen)
        },
        347: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(3),
                a = n(0),
                r = n(200),
                s = n(132),
                o = n(2).default.DEFAULT_8_BIT,
                l = o.KEY,
                c = o.FRAME,
                u = function (t) {
                    function e(e, n) {
                        var a;
                        (a = t.call(this, e) || this).payload = void 0, a.loading = void 0, a.photo = void 0, a.avtFrame = void 0, a.loadPhotoTimer = void 0, a.handleLoadPhotoAfterDelay = function (t, e) {
                            return function () {
                                var n = a.scene.textures.get(t);
                                n && n.key === t ? a.handleLoadComplete(t) : (a.scene.load.once("filecomplete-image-" + t, a.handleLoadComplete), a.scene.load.image(t, e), a.scene.load.start())
                            }
                        }, a.handleLoadComplete = function (t) {
                            if (a.scene) {
                                var e = a.payload.id;
                                if (e && e === t) {
                                    var n = e + "_bordered_100",
                                        i = a.scene.textures.get(n);
                                    if (i && i.key === n) a.setPhoto(i.key);
                                    else GameCore.Utils.Image.drawCircle({
                                        scene: a.scene,
                                        key: e,
                                        newKey: n
                                    }) ? a.setPhoto(n) : a.showLoading(!1)
                                }
                            }
                        }, a.handleLoadPhotoFailed = function (t) {
                            t.key === a.payload.id && a.setDefaultAvatar(t.key)
                        }, a.scene.add.existing((0, i.default)(a)), a.payload = n;
                        var r = a.payload.size;
                        return a.setSize(r, r), a.createLoading(), a.createPhoto(), a.createFrame(), a.addDefaultListeners(), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.loadPhoto = function (t, e) {
                        var n;
                        if (this.payload.id = t, this.payload.url = e, null == (n = this.loadPhotoTimer) || n.remove(), t && e) {
                            var i = this.scene.textures.get(t);
                            if (i && i.key === t) this.handleLoadComplete(t);
                            else {
                                this.showLoading(!0);
                                var a = (this.payload || {}).loadDelay,
                                    r = void 0 === a ? 0 : a;
                                this.loadPhotoTimer = this.scene.time.delayedCall(r, this.handleLoadPhotoAfterDelay(t, e))
                            }
                        } else this.setPhoto(s.default.AVATAR.KEY)
                    }, n.addDefaultListeners = function () {
                        var t = this;
                        this.scene.load.on(Phaser.Loader.Events.FILE_LOAD_ERROR, this.handleLoadPhotoFailed), this.on(Phaser.GameObjects.Events.DESTROY, (function () {
                            var e;
                            null == (e = t.loadPhotoTimer) || e.remove(), t.scene.load.off(Phaser.Loader.Events.FILE_LOAD_ERROR, t.handleLoadPhotoFailed)
                        }))
                    }, n.setDefaultAvatar = function (t) {
                        this.loadPhoto(t, s.default.AVATAR.FILE)
                    }, n.createLoading = function () {
                        this.loading = new r.default(this.scene), this.loading.setWorldSize(.75 * this.width, .75 * this.height), this.loading.setVisible(!1), this.add(this.loading)
                    }, n.createPhoto = function () {
                        this.photo = this.scene.make.image({
                            x: 0,
                            y: 0,
                            origin: {
                                x: .5,
                                y: .5
                            },
                            visible: !1
                        }), this.add(this.photo)
                    }, n.createFrame = function () {
                        this.avtFrame = this.scene.make.image({
                            key: l,
                            frame: c.LEADERBOARD_AVATAR
                        }), this.avtFrame.setWorldSize(34, 38), this.add(this.avtFrame)
                    }, n.showLoading = function (t) {
                        this.photo.setVisible(!t), this.loading.setVisible(t)
                    }, n.setPhoto = function (t) {
                        this.showLoading(!1), this.photo.setTexture(t), this.photo.setFrame(0);
                        var e = this.payload.size - 10;
                        this.photo.setWorldSize(e, e), Phaser.Display.Align.In.Center(this.photo, this.avtFrame, 0, -2)
                    }, e
                }(Phaser.GameObjects.Container);
            e.default = u
        },
        614: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return st
                }
            });
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(3),
                l = n(196),
                c = n(346),
                u = n(57),
                h = n(199),
                d = n(200),
                f = n(201),
                p = n(19),
                g = n(2),
                v = n(32),
                m = n(173),
                E = n(320),
                y = n.n(E),
                A = n(114),
                T = n.n(A),
                S = n(50),
                M = n.n(S),
                w = n(107),
                x = n.n(w),
                C = n(111),
                I = n.n(C),
                b = n(118),
                R = n.n(b),
                P = n(469),
                _ = n(132),
                k = n(29),
                L = n(35),
                D = n.n(L),
                O = n(460),
                N = n(116),
                U = n(347),
                B = g.default.DEFAULT_8_BIT,
                F = B.KEY,
                G = B.FRAME,
                H = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).avatar = void 0, a.rankIcon = void 0, a.rankText = void 0, a.username = void 0, a.score = void 0, a.scoreText = void 0, a.background = void 0, a.showPopUp = void 0, a.showItems = void 0, a.payload = void 0, a.handleChallengeFriend = (0, i.default)(s().mark((function t() {
                            var e, n;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = a.payload.playerId, n = a.scene.battle, a.updateBattleProfiles(), t.next = 5, n.createBattle(e);
                                    case 5:
                                        n.getStatus() === m.default.STARTED && a.scene.screen.close(v.ScreenKeys.LEADER_BOARD_SCREEN);
                                    case 6:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        }))), a.createBackground(), a.updateSize(), a.createRank(), a.createAvatar(), a.createUsername(), a.createScore(), n && a.updateInfo(n), a.scene.add.existing((0, o.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateInfo = function (t) {
                        this.payload = (0, k.default)({
                            extraData: "",
                            isHighlight: !1
                        }, t), this.updateBackground(), this.updateAvatar(), this.updateRank(), this.updateUsername(), this.updateScore()
                    }, n.createBackground = function () {
                        this.background = this.scene.make.image({
                            key: F,
                            frame: G.LEADERBOARD_BG_DARK
                        }), this.add(this.background), this.updateBackground()
                    }, n.updateBackground = function () {
                        var t = (this.payload || {}).isHighlight;
                        void 0 !== t && t ? (this.background.setFrame(G.LEADERBOARD_BG_LIGHT), this.background.setWorldSize(313.5, 41)) : (this.background.setFrame(G.LEADERBOARD_BG_DARK), this.background.setWorldSize(314.5, 42))
                    }, n.updateSize = function () {
                        var t = this.background,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createAvatar = function () {
                        this.avatar = new U.default(this.scene, {
                            size: 42,
                            loadDelay: 300
                        }), this.add(this.avatar), Phaser.Display.Align.In.LeftCenter(this.avatar, this.rankIcon, -40)
                    }, n.updateAvatar = function () {
                        var t = this.payload,
                            e = t.playerId,
                            n = t.photo;
                        this.avatar.loadPhoto(e, n)
                    }, n.createRank = function () {
                        this.createRankIcon(), this.createRankText()
                    }, n.updateRank = function () {
                        var t = (this.payload || {}).rank,
                            e = void 0 === t ? 99 : t;
                        this.updateRankIcon(e), this.updateRankText(e)
                    }, n.getRankIconFrame = function (t) {
                        var e = null;
                        switch (t) {
                            case 1:
                                e = G.LEADERBOARD_RANK_GOLD;
                                break;
                            case 2:
                                e = G.LEADERBOARD_RANK_SILVER;
                                break;
                            case 3:
                                e = G.LEADERBOARD_RANK_COPPER
                        }
                        return e
                    }, n.createRankIcon = function () {
                        this.rankIcon = this.scene.make.image({
                            key: F
                        }), this.updateRankIcon(1), this.kill(), this.add(this.rankIcon), Phaser.Display.Align.In.LeftCenter(this.rankIcon, this)
                    }, n.updateRankIcon = function (t) {
                        var e = this.getRankIconFrame(t);
                        e ? (this.rankIcon.revive(), this.rankIcon.setFrame(e), e == G.LEADERBOARD_RANK_GOLD && this.rankIcon.setWorldSize(39, 34.5), e == G.LEADERBOARD_RANK_SILVER && this.rankIcon.setWorldSize(32.5, 32), e == G.LEADERBOARD_RANK_COPPER && this.rankIcon.setWorldSize(27, 35.5)) : this.rankIcon.kill()
                    }, n.createRankText = function () {
                        this.rankText = this.scene.make.text({
                            text: "0",
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "16px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 3
                            }
                        }), this.rankText.setHighQuality(), this.rankText.kill(), this.add(this.rankText), Phaser.Display.Align.In.Center(this.rankText, this.rankIcon, 0, -1)
                    }, n.updateRankText = function (t) {
                        var e;
                        this.rankText.kill(), t > 3 && this.rankText.revive(), null == (e = this.rankText) || e.setText("" + t)
                    }, n.getShortName = function (t) {
                        var e = t.substring(0, 7);
                        return e.split(" ")[0] || e
                    }, n.createUsername = function () {
                        this.username = this.scene.make.text({
                            text: "Player",
                            style: {
                                fontFamily: p.default.SYSTEM_FAMILY_FONT,
                                fontSize: "16px",
                                fontStyle: "bold",
                                color: "#ffffff"
                            }
                        }), this.username.setHighQuality(), Phaser.Display.Align.In.LeftCenter(this.username, this.avatar, -53), this.add(this.username)
                    }, n.updateUsername = function () {
                        var t = this.payload.name;
                        this.username.setText(this.getShortName(t))
                    }, n.createScore = function () {
                        this.score = this.scene.add.container(), this.scoreText = this.scene.make.text({
                            text: "99999",
                            style: {
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "16px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2
                            }
                        }), this.scoreText.setOrigin(1, .5), this.scoreText.setHighQuality(), this.score.add(this.scoreText), this.add(this.score), Phaser.Display.Align.In.RightCenter(this.score, this, -10)
                    }, n.updateScore = function () {
                        var t = (this.payload || {}).score,
                            e = void 0 === t ? "0" : t;
                        this.scoreText.setText("" + e)
                    }, n.updateBattleProfiles = function () {
                        try {
                            var t = this.payload,
                                e = t.playerId,
                                n = t.name,
                                i = t.photo,
                                a = t.extraData,
                                r = this.scene,
                                s = r.battle,
                                o = r.player,
                                l = JSON.parse(a || "{}"),
                                c = {
                                    playerId: e,
                                    playerName: n,
                                    playerPhoto: i,
                                    playerLevel: l.playerLevel || 1,
                                    unitData: l.unitData || "0-0-m2-0-0/0-0-0-0-0/r1-0-0-0-0"
                                };
                            s.updateOpponentProfile(c);
                            var u = o.getPlayer(),
                                h = {
                                    playerId: u.playerId,
                                    playerName: u.name,
                                    playerPhoto: u.photo,
                                    playerLevel: o.getCustomData("playerLevelProgress") || 1,
                                    unitData: o.getCustomData("playerUnitData") || "0-0-m2-0-0/0-0-0-0-0/r1-0-0-0-0"
                                };
                            s.updatePlayerProfile(h)
                        } catch (d) {}
                    }, n.runShowPopUpAnimation = function (t, e) {
                        this.scene.tweens.killTweensOf(this), this.showPopUp = new N.default({
                            targets: [this],
                            delay: t,
                            duration: e,
                            props: {
                                y: {
                                    start: this.y + 70,
                                    to: this.y
                                }
                            }
                        }), this.showPopUp.play()
                    }, n.runShowItemAnimation = function (t, e) {
                        var n = this,
                            i = this.getAll();
                        this.scene.tweens.killTweensOf(i), this.showItems = new O.default({
                            targets: i,
                            duration: e,
                            delay: this.scene.tweens.stagger(50, {
                                start: t + 50
                            }),
                            props: {
                                scale: {
                                    duration: 1e3,
                                    getStart: function (t) {
                                        return .8 * t.scale
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    },
                                    ease: Phaser.Math.Easing.Elastic.Out,
                                    easeParams: [.1, .45]
                                }
                            },
                            onStart: function () {
                                n.showItems.baseScales = D()(i).call(i, (function (t) {
                                    return t.scale
                                }))
                            },
                            onStop: function () {
                                i.forEach((function (t, e) {
                                    t.scale = n.showItems.baseScales[e]
                                }))
                            }
                        }), this.showItems.play()
                    }, n.runShowUpAnimation = function (t, e) {
                        void 0 === t && (t = 0), void 0 === e && (e = 300);
                        var n = 100 * t;
                        this.runShowPopUpAnimation(n, e), this.runShowItemAnimation(n, e)
                    }, e
                }(Phaser.GameObjects.Container);

            function V(t, e) {
                var n = "undefined" !== typeof I() && R()(t) || t["@@iterator"];
                if (n) return (n = n.call(t)).next.bind(n);
                if (Array.isArray(t) || (n = function (t, e) {
                        var n;
                        if (!t) return;
                        if ("string" === typeof t) return Y(t, e);
                        var i = M()(n = Object.prototype.toString.call(t)).call(n, 8, -1);
                        "Object" === i && t.constructor && (i = t.constructor.name);
                        if ("Map" === i || "Set" === i) return x()(t);
                        if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Y(t, e)
                    }(t)) || e && t && "number" === typeof t.length) {
                    n && (t = n);
                    var i = 0;
                    return function () {
                        return i >= t.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: t[i++]
                        }
                    }
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
            }

            function Y(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var n = 0, i = new Array(e); n < e; n++) i[n] = t[n];
                return i
            }
            var W = GameCore.Configs.LeadersBoard.Limit,
                K = function (t) {
                    function e(e) {
                        var n;
                        (n = t.call(this, e) || this).currentPlayerId = void 0, n.isUpdating = void 0, n.scroller = void 0, n.scene = e;
                        var i = n.scene.player;
                        return n.currentPlayerId = i.getPlayerId(), n.isUpdating = !1, n.createReuseScroller(), n.scene.add.existing((0, o.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createReuseScroller = function () {
                        this.scroller = new P.default(this.scene, {
                            classType: H,
                            listConfigs: [],
                            width: 320,
                            height: 290,
                            padding: 10,
                            marginTop: 10,
                            marginBottom: 10
                        }), this.scroller.createMask(), this.scroller.setPosition(0, 0), this.add(this.scroller)
                    }, n.updateData = function (t) {
                        if (!this.isUpdating) {
                            this.isUpdating = !0;
                            var e = y()(t) || [];
                            if (e.length < 1) this.showLeaderboardIsEmpty();
                            else {
                                for (var n, i = [], a = V(T()(e).call(e, (function (t, e) {
                                        return +e.score - +t.score
                                    }))); !(n = a()).done;) {
                                    var r = n.value;
                                    if (i.length >= W) break;
                                    var s = r.playerId,
                                        o = r.photo,
                                        l = r.score,
                                        c = r.name,
                                        u = r.rank;
                                    if (s && c) {
                                        var h = this.currentPlayerId === s,
                                            d = {
                                                playerId: s,
                                                photo: o || _.default.AVATAR.FILE,
                                                name: c,
                                                rank: u,
                                                score: l,
                                                isHighlight: h
                                            };
                                        i.push(d)
                                    }
                                }
                                this.scroller.updateConfig(i), this.showLeaders()
                            }
                        }
                    }, n.removeLeaders = function () {
                        this.scroller.updateConfig([])
                    }, n.getLeaders = function () {
                        return this.scroller.getChildren()
                    }, n.showLeaders = function () {
                        for (var t = this, e = this.getLeaders(), n = Math.min(e.length, 6), i = 0; i < n; i++) {
                            var a = e[i];
                            a && (a.setVisible(!0), a.runShowUpAnimation(i, 300))
                        }
                        var r = 300 + 100 * n + 250;
                        this.scene.time.delayedCall(r, (function () {
                            var e = t.scene.screen.get(v.ScreenKeys.LEADER_BOARD_SCREEN);
                            t.isUpdating = !1, e.isSwitchable = !0, t.scroller.setEnable(!0)
                        }))
                    }, n.showLeaderboardIsEmpty = function () {
                        var t = this.scene.screen.get(v.ScreenKeys.LEADER_BOARD_SCREEN);
                        this.isUpdating = !1, t.isSwitchable = !0, t.board.showMessage(!0, "Leaderboard is empty!")
                    }, e
                }(Phaser.GameObjects.Container),
                z = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).createRankText(), n.createPhotoText(), n.createNameText(), n.createLevelText(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createRankText = function () {
                        var t = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(14),
                            text: "Rank",
                            origin: {
                                x: .2,
                                y: .5
                            }
                        });
                        this.add(t), Phaser.Display.Align.In.Center(t, this, -138)
                    }, n.createPhotoText = function () {
                        var t = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(14),
                            text: "Photo",
                            origin: {
                                x: .2,
                                y: .5
                            }
                        });
                        this.add(t), Phaser.Display.Align.In.Center(t, this, -94)
                    }, n.createNameText = function () {
                        var t = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(14),
                            text: "Name",
                            origin: {
                                x: .2,
                                y: .5
                            }
                        });
                        this.add(t), Phaser.Display.Align.In.Center(t, this, -45)
                    }, n.createLevelText = function () {
                        var t = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(14),
                            text: "Level",
                            origin: {
                                x: .2,
                                y: .5
                            }
                        });
                        this.add(t), Phaser.Display.Align.In.Center(t, this, 135)
                    }, e
                }(Phaser.GameObjects.Container),
                X = g.default.DEFAULT_8_BIT,
                j = X.KEY,
                q = X.FRAME,
                Z = g.default.DEFAULT,
                Q = Z.KEY,
                J = Z.FRAME,
                $ = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).background = void 0, n.header = void 0, n.leaders = void 0, n.loading = void 0, n.message = void 0, n.challengeFriendsBtn = void 0, n.messageAnimation = void 0, n.onClose = void 0, n.handleChallengeFriends = (0, i.default)(s().mark((function t() {
                            var e, i, a, r, o, c, u, h;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, e = n.scene, i = e.player, a = e.battle, r = e.facebook, t.next = 4, r.chooseAsync();
                                    case 4:
                                        if (!1 !== (o = t.sent)) {
                                            t.next = 7;
                                            break
                                        }
                                        throw new Error("User canceled");
                                    case 7:
                                        if (GameCore.Utils.Valid.isString(o)) {
                                            t.next = 9;
                                            break
                                        }
                                        throw new Error("No context found");
                                    case 9:
                                        return c = i.getPlayerId(), t.next = 12, r.getContextPlayers(c);
                                    case 12:
                                        return u = t.sent, h = l.SampleOpponent.playerId, u.length > 0 && (h = u[0].playerId), t.next = 17, a.createBattle(h);
                                    case 17:
                                        a.getStatus() === m.default.STARTED && n.scene.screen.close(v.ScreenKeys.LEADER_BOARD_SCREEN), t.next = 23;
                                        break;
                                    case 20:
                                        t.prev = 20, t.t0 = t.catch(0);
                                    case 23:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 20]
                            ])
                        }))), n.handleOnCloseClick = function () {
                            n.onClose && n.onClose()
                        }, n.setName("Board"), n.createBackground(), n.createLoading(), n.createMessage(), n.createContents(), n.createCloseButton(), n.createAnimation(), n.updateSize(), n.scene.add.existing((0, o.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateSize = function () {
                        var t = this.background,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.showLoading = function (t) {
                        this.loading.setVisible(t), this.showMessage(!1)
                    }, n.showMessage = function (t, e) {
                        this.message.setVisible(t), e && (this.message.setText(e), this.messageAnimation.play())
                    }, n.createBackground = function () {
                        this.background = new f.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 332,
                            height: 404.5,
                            topInnerCornerStrokeWidth: 1,
                            rightInnerCornerStrokeWidth: 3,
                            lightY: -80
                        }), this.add(this.background), this.setSize(this.background.width, this.background.height)
                    }, n.recalculateLightPosition = function () {
                        this.background && this.background.recalculateLightPosition()
                    }, n.createLoading = function () {
                        this.loading = new d.default(this.scene), this.loading.setTint(16777215), this.loading.setWorldSize(113, 113), this.add(this.loading), Phaser.Display.Align.In.Center(this.loading, this.background)
                    }, n.createMessage = function () {
                        this.message = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18),
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.message.setTint(16777215), this.add(this.message), Phaser.Display.Align.In.Center(this.message, this.background)
                    }, n.createContents = function () {
                        this.createLeaders(), this.createTitle(), this.createHeader()
                    }, n.createLeaders = function () {
                        this.leaders = new K(this.scene), this.add(this.leaders), Phaser.Display.Align.In.Center(this.leaders, this.background, 0, 30)
                    }, n.createTitle = function () {
                        var t = this.scene.add.container();
                        t.setName("title");
                        var e = this.scene.make.image({
                            key: Q,
                            frame: J.RIBBON_BLUE
                        });
                        e.setWorldSize(239, 67);
                        var n = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(22),
                            text: "Leaderboard"
                        });
                        Phaser.Display.Align.In.Center(n, e, 0, -10), t.add([e, n]), Phaser.Display.Align.In.TopCenter(t, this.background, 0, -25), this.add(t)
                    }, n.createHeader = function () {
                        var t = this.scene.add.container(),
                            e = this.scene.make.image({
                                key: j,
                                frame: q.LEADERBOARD_TAB_BG
                            });
                        e.setX(1), e.setWorldSize(329, 29), this.header = new z(this.scene), t.add([e, this.header]), this.add(t), Phaser.Display.Align.In.TopCenter(this.header, t), Phaser.Display.Align.In.Center(t, this.background, -1, -125)
                    }, n.createCloseButton = function () {
                        var t = new h.default(this.scene);
                        Phaser.Display.Align.In.TopRight(t, this, 10, 10), this.add(t), t.onClick = this.handleOnCloseClick
                    }, n.createChallengeFriendsBtn = function () {
                        this.challengeFriendsBtn = new u.default(this.scene, j, q.BUTTON_GREEN, 144, 57), this.add(this.challengeFriendsBtn);
                        var t = this.scene.make.text({
                            text: "CHALLENGE\nFRIENDS",
                            style: {
                                align: "center",
                                fontFamily: p.default.FONT_FAMILY,
                                fontSize: "17px",
                                stroke: "#000000",
                                strokeThickness: 1,
                                padding: {
                                    left: 10,
                                    right: 10
                                }
                            }
                        });
                        t.setHighQuality(), t.setOrigin(.5, .5), t.setShadow(-10, 4, "#000000", 1), this.challengeFriendsBtn.add(t), Phaser.Display.Align.In.Center(t, this.challengeFriendsBtn, 18, -3);
                        var e = this.scene.make.image({
                            key: j,
                            frame: q.ICON_BATTLE
                        });
                        e.setOrigin(.5, .5), e.setWorldSize(34.5, 31.5), this.challengeFriendsBtn.add(e), Phaser.Display.Align.In.Center(e, this.challengeFriendsBtn, -45, -3), Phaser.Display.Align.In.BottomCenter(this.challengeFriendsBtn, this.background, 0, -15), this.challengeFriendsBtn.onClick = this.handleChallengeFriends
                    }, n.createAnimation = function () {
                        this.messageAnimation = new c.default({
                            targets: [this.message],
                            duration: 60,
                            repeat: 2
                        })
                    }, e
                }(Phaser.GameObjects.Container),
                tt = n(348),
                et = n(115),
                nt = GameCore.Configs.LeadersBoard,
                it = nt.Name,
                at = nt.Limit,
                rt = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i, a) || this).scene = void 0, r.board = void 0, r.tabId = void 0, r.offset = void 0, r.isSwitchable = void 0, r.showPopupAnimation = void 0, r.fadeOutAnimation = void 0, r.handleCloseClick = function () {
                            r.runFadeOutAnimation()
                        }, r.scene = e, r.background.setAlpha(.7), r.setDepth(v.ScreenDepth.POPUP), r.createBoard(), r
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.open = function () {
                        t.prototype.open.call(this), this.runPopupAnimation(), this.isSwitchable = !1, this.selectWorldTab()
                    }, n.selectFriendTab = function () {
                        this.tabId = tt.LEADERBOARD_TYPE_FRIEND, this.offset = 0, this.board.showLoading(!0), this.board.header.kill(), this.board.leaders.removeLeaders(), this.fetchLeaderboardData("friends")
                    }, n.selectWorldTab = function () {
                        this.tabId = tt.LEADERBOARD_TYPE_GLOBAL, this.offset = 0, this.board.showLoading(!0), this.board.header.kill(), this.board.leaders.removeLeaders(), this.fetchLeaderboardData("world")
                    }, n.createBoard = function () {
                        this.board = new $(this.scene), this.board.onClose = this.handleCloseClick, Phaser.Display.Align.In.Center(this.board, this, 0, -20), this.add(this.board)
                    }, n.recalculateLightPosition = function () {
                        this.board && this.board.recalculateLightPosition()
                    }, n.fetchLeaderboardData = function () {
                        var t = (0, i.default)(s().mark((function t(e) {
                            var n, i, a;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 1, it) {
                                            t.next = 4;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 4:
                                        return t.next = 6, GameSDK.getLeaderboardAsync(it);
                                    case 6:
                                        if (n = t.sent, i = [], "world" !== e) {
                                            t.next = 14;
                                            break
                                        }
                                        return t.next = 11, n.getEntriesAsync(at, 0);
                                    case 11:
                                        i = t.sent, t.next = 17;
                                        break;
                                    case 14:
                                        return t.next = 16, n.getConnectedPlayerEntriesAsync(at, 0);
                                    case 16:
                                        i = t.sent;
                                    case 17:
                                        a = {}, i.forEach((function (t) {
                                            var e = t.playerId,
                                                n = t.score,
                                                i = t.rank,
                                                r = t.getPlayer(),
                                                s = r.getName(),
                                                o = r.getPhoto();
                                            a[e] = {
                                                playerId: e,
                                                name: s,
                                                photo: o,
                                                score: n,
                                                rank: i
                                            }
                                        })), this.board.leaders.updateData(a), t.next = 25;
                                        break;
                                    case 22:
                                        t.prev = 22, t.t0 = t.catch(1);
                                    case 25:
                                        return t.prev = 25, this.isSwitchable = !0, this.board.showLoading(!1), this.board.header.revive(), t.finish(25);
                                    case 30:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [1, 22, 25, 30]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.runPopupAnimation = function () {
                        this.showPopupAnimation || (this.showPopupAnimation = new N.default({
                            targets: [this.board]
                        })), this.showPopupAnimation.play()
                    }, n.runFadeOutAnimation = function () {
                        var t = this;
                        this.fadeOutAnimation || (this.fadeOutAnimation = new et.default({
                            targets: [this.background],
                            duration: 200,
                            props: {
                                alpha: {
                                    start: .7,
                                    from: .7,
                                    to: 0
                                }
                            },
                            onActive: function () {
                                t.board.kill()
                            },
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onComplete: function () {
                                t.background.setAlpha(.7), t.board.revive(), t.scene.screen.close(v.ScreenKeys.LEADER_BOARD_SCREEN)
                            }
                        })), this.fadeOutAnimation.play()
                    }, e
                }(GameCore.Screen),
                st = rt
        },
        618: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return et
                }
            });
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(46),
                l = n.n(o),
                c = n(56),
                u = n.n(c),
                h = n(326),
                d = n(57),
                f = n(202),
                p = n(19),
                g = n(2),
                v = n(44),
                m = n(32),
                E = n(40),
                y = n(3),
                A = g.default.GAMEPLAY,
                T = A.KEY,
                S = A.FRAME,
                M = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, T, S.DASHBOARD_COINBAR_COIN) || this).emitter = void 0, n.createEmitters(), n.setActive(!1), n.setVisible(!1), n.scene.add.existing((0, y.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: S.DASHBOARD_COINBAR_COIN,
                            gravityY: 160,
                            angle: {
                                min: -180,
                                max: 0
                            },
                            speed: {
                                min: 50,
                                max: 200
                            },
                            scale: {
                                min: .8 * t,
                                max: .8 * t
                            },
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.In
                            },
                            lifespan: 1500
                        })
                    }, n.explode = function (t, e, n) {
                        this.setActive(!0), this.setVisible(!0), this.emitter.explode(t, e, n)
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager),
                w = n(619),
                x = n(108),
                C = n(27),
                I = n(150),
                b = n(73),
                R = n(472),
                P = g.default.DEFAULT_8_BIT,
                _ = P.KEY,
                k = P.FRAME,
                L = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).continueButton = void 0, n.postAdContinueAnimation = void 0, n.replayButton = void 0, n.postAdReplayAnimation = void 0, n.returnButton = void 0, n.postAdReturnAnimation = void 0, n.openAnimation = void 0, n.mode = "NORMAL", n.setName("Footer"), n.createContinueButton(), n.createReplayButton(), n.createReturnButton(), n.scene.add.existing((0, y.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createContinueButton = function () {
                        this.continueButton = new R.default(this.scene, {
                            key: _,
                            frame: k.BLANK,
                            width: 148,
                            height: 50
                        }), this.continueButton.setName("Continue"), this.continueButton.button.setVisible(!1);
                        var t = this.scene.make.bitmapText({
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18)
                        });
                        t.setText("Continue"), t.setTint(15650560), t.setOrigin(.5, .5), this.continueButton.add(t), this.add(this.continueButton)
                    }, n.createReplayButton = function () {
                        this.replayButton = new d.default(this.scene, _, k.RESULT_SCREEN_GREEN_BUTTON, 129, 46), this.replayButton.setName("BattleReplay");
                        var t = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(15)
                        });
                        t.setText("REPLAY"), t.setDropShadow(-1, 1, 0), t.setPosition(15, -5), this.replayButton.add(t);
                        var e = this.scene.make.image({
                            key: _,
                            frame: k.ICON_REPLAY
                        });
                        e.setWorldSize(23.5, 27.5), e.setPosition(-40, -3), this.replayButton.add(e), this.replayButton.setX(-70), this.add(this.replayButton)
                    }, n.createReturnButton = function () {
                        this.returnButton = new d.default(this.scene, _, k.RESULT_SCREEN_YELLOW_BUTTON, 129, 46), this.returnButton.setName("BackToSinglePlay");
                        var t = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(15)
                        });
                        t.setText("      BACK TO\n SINGLEPLAY"), t.setDropShadow(-1, 1, 0), t.setPosition(15, -5), this.returnButton.add(t);
                        var e = this.scene.make.image({
                            key: _,
                            frame: k.ICON_BACK_TO
                        });
                        e.setWorldSize(28.5, 20.5), e.setPosition(-45, -2), this.returnButton.add(e), this.returnButton.setX(70), this.add(this.returnButton)
                    }, n.setMode = function (t) {
                        this.continueButton.setY(0), this.continueButton.setScale(1), this.replayButton.setPosition(-70, 0), this.replayButton.setScale(1), this.returnButton.setPosition(70, 0), this.returnButton.setScale(1), "BATTLE" === t ? (this.replayButton.revive(), this.returnButton.revive(), this.continueButton.kill()) : (this.replayButton.kill(), this.returnButton.kill(), this.continueButton.revive()), this.mode = t
                    }, n.runAnimation = function (t) {
                        var e, n, i = this;
                        "BATTLE" === this.mode && (null == (e = this.openAnimation) || e.stop(), null == (n = this.openAnimation) || n.remove(), this.returnButton.setAlpha(0), this.replayButton.setAlpha(0), this.openAnimation = new h.default({
                            targets: [this.replayButton, this.returnButton],
                            delay: t,
                            duration: 400,
                            props: {
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                i.returnButton.setAlpha(1), i.replayButton.setAlpha(1)
                            }
                        }), this.openAnimation.play())
                    }, n.runPostAnimation = function (t) {
                        var e = this;
                        if ("BATTLE" === this.mode) {
                            var n, i, a, r, s, o;
                            null == (n = this.openAnimation) || n.stop(), null == (i = this.openAnimation) || i.remove(), null == (a = this.postAdReplayAnimation) || a.stop(), null == (r = this.postAdReplayAnimation) || r.remove(), null == (s = this.postAdReturnAnimation) || s.stop(), null == (o = this.postAdReturnAnimation) || o.remove(), this.replayButton.setDisabled(!0), this.replayButton.setAlpha(1);
                            var l = this.replayButton.x;
                            this.postAdReplayAnimation = this.scene.tweens.add({
                                targets: this.replayButton,
                                duration: 500,
                                delay: t,
                                y: {
                                    from: 0,
                                    to: -70
                                },
                                x: {
                                    from: l,
                                    to: l - 15
                                },
                                scale: {
                                    from: this.replayButton.scale,
                                    to: 1.2 * this.replayButton.scale
                                },
                                ease: Phaser.Math.Easing.Quintic.Out,
                                onComplete: function () {
                                    e.replayButton.setDisabled(!1)
                                }
                            }), this.returnButton.setDisabled(!0), this.returnButton.setAlpha(1);
                            var c = this.returnButton.x;
                            this.postAdReturnAnimation = this.scene.tweens.add({
                                targets: this.returnButton,
                                duration: 500,
                                delay: t,
                                y: {
                                    from: 0,
                                    to: -70
                                },
                                x: {
                                    from: c,
                                    to: c + 15
                                },
                                scale: {
                                    from: this.returnButton.scale,
                                    to: 1.2 * this.returnButton.scale
                                },
                                ease: Phaser.Math.Easing.Quintic.Out,
                                onComplete: function () {
                                    e.returnButton.setDisabled(!1)
                                }
                            })
                        } else {
                            var u, h;
                            null == (u = this.postAdContinueAnimation) || u.stop(), null == (h = this.postAdContinueAnimation) || h.remove(), this.continueButton.setDisabled(!0), this.continueButton.setAlpha(1), this.postAdContinueAnimation = this.scene.tweens.add({
                                targets: this.continueButton,
                                duration: 500,
                                delay: t,
                                y: {
                                    from: 0,
                                    to: -70
                                },
                                scale: {
                                    from: this.continueButton.scale,
                                    to: 2 * this.continueButton.scale
                                },
                                ease: Phaser.Math.Easing.Quintic.Out,
                                onComplete: function () {
                                    e.continueButton.setDisabled(!1)
                                }
                            })
                        }
                    }, (0, b.default)(e, [{
                        key: "onClickContinueBtn",
                        set: function (t) {
                            this.continueButton.onClick = t
                        }
                    }, {
                        key: "onClickReplayBtn",
                        set: function (t) {
                            this.replayButton.onClick = t
                        }
                    }, {
                        key: "onClickReturnBtn",
                        set: function (t) {
                            this.returnButton.onClick = t
                        }
                    }]), e
                }(Phaser.GameObjects.Container),
                D = g.default.DEFAULT_8_BIT,
                O = D.KEY,
                N = D.FRAME,
                U = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this, e, 0, 0) || this).background = void 0, a.text = void 0, a.sliceStyle = void 0, a.rewardMultiplyValue = void 0, a.rewardMultiplyValue = n, a.sliceStyle = i, a.createSliceBg(), a.createGoldIcon(), a.createSliceContent(), a.scene.add.existing((0, y.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createSliceBg = function () {
                        this.background = this.scene.add.image(0, 0, O, 1 === this.sliceStyle ? N.WHEEL_SLICE_1 : N.WHEEL_SLICE_2), this.add(this.background), this.background.setOrigin(.5, .5), this.background.setWorldSize(63, 81.5), Phaser.Display.Align.In.Center(this.background, this)
                    }, n.createGoldIcon = function () {
                        var t = this.scene.add.image(0, 0, O, N.WHEEL_COIN_PREFIX + (this.rewardMultiplyValue + "x"));
                        switch (this.add(t), this.rewardMultiplyValue) {
                            case 2:
                                t.setWorldSize(23, 21);
                                break;
                            case 3:
                                t.setWorldSize(29.5, 21.5);
                                break;
                            case 4:
                                t.setWorldSize(35.5, 24.5);
                                break;
                            case 5:
                                t.setWorldSize(39.5, 29.5)
                        }
                        Phaser.Display.Align.In.Center(t, this, 0, -15)
                    }, n.createSliceContent = function () {
                        this.text = this.scene.make.bitmapText({
                            text: "x" + this.rewardMultiplyValue,
                            font: p.default.FONT_FAMILY,
                            size: 10
                        }), this.text.setDropShadow(-1, 1, 0, 1), this.add(this.text), Phaser.Display.Align.In.Center(this.text, this, 0, 5)
                    }, e
                }(Phaser.GameObjects.Container),
                B = g.default.DEFAULT_8_BIT,
                F = B.KEY,
                G = B.FRAME,
                H = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, 0, 0) || this).slices = void 0, n.spinningTween = void 0, n.rewardTween = void 0, n.scene = e, n.createWheelSlices(), n.scene.add.existing((0, y.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createWheelSlices = function () {
                        var t = this;
                        this.slices = [];
                        for (var e = 1; e < 9; e++) {
                            var n = 2,
                                i = 1;
                            1 === e ? n = 5 : e % 2 === 0 && (n = e < 5 ? 3 : 4, i = 2);
                            var a = new U(this.scene, n, i),
                                r = this.scene.add.image(0, 0, F, G.WHEEL_DECO);
                            r.setWorldSize(8, 8);
                            var s = a.background.displayHeight;
                            this.add(a), this.add(r);
                            var o = Phaser.Math.DegToRad(45 * (e - 1)),
                                l = Phaser.Math.DegToRad(45 * (e - .5) - .75);
                            Phaser.Display.Align.In.Center(a, this, s * Math.sin(o) / 2, -s * Math.cos(o) / 2), a.setRotation(o), this.slices.push(a), Phaser.Display.Align.In.Center(r, this, (s - 3) * Math.sin(l), -(s - 3) * Math.cos(l)), r.setRotation(Phaser.Math.DegToRad(45 * (e - .5) + 22.5))
                        }
                        this.list.forEach((function (e) {
                            e instanceof Phaser.GameObjects.Image && e.texture.key === F && t.bringToTop(e)
                        }))
                    }, n.startWheelSpinning = function () {
                        var t, e, n = this;
                        null == (t = this.spinningTween) || t.stop(), null == (e = this.spinningTween) || e.remove();
                        var i = this.scene.screen.get(m.ScreenKeys.RESULT_SCREEN);
                        i instanceof et && (this.spinningTween = this.scene.tweens.add({
                            targets: this,
                            rotation: {
                                from: Phaser.Math.DegToRad(0),
                                to: Phaser.Math.DegToRad(360)
                            },
                            ease: "Linear",
                            onUpdate: function () {
                                null == i || i.updateCoinText(n.getCurrentMultiplierResult())
                            },
                            duration: 2500,
                            repeat: -1
                        }))
                    }, n.stopWheelSpinning = function () {
                        var t;
                        null == (t = this.spinningTween) || t.pause()
                    }, n.startRewardTween = function (t) {
                        var e, n = this;
                        this.stopWheelSpinning(), null == (e = this.rewardTween) || e.stop();
                        var i = Phaser.Math.Between(0, 100) / 100,
                            a = this.rotation + 2 * Phaser.Math.PI2 + i * Phaser.Math.PI2,
                            r = this.scene.screen.get(m.ScreenKeys.RESULT_SCREEN);
                        this.rewardTween = this.scene.tweens.add({
                            targets: this,
                            rotation: {
                                from: this.rotation,
                                to: a
                            },
                            ease: "Sine.easeOut",
                            duration: 4e3,
                            onUpdate: function () {
                                null == r || r.updateCoinText(n.getCurrentMultiplierResult())
                            },
                            onComplete: function () {
                                t()
                            }
                        })
                    }, n.getCurrentMultiplierResult = function () {
                        var t = this.rotation < 0 ? this.rotation + Phaser.Math.PI2 : this.rotation,
                            e = Math.floor(Phaser.Math.RadToDeg(t) / 45 + .5);
                        return 8 === e && (e = 0), this.slices[e].rewardMultiplyValue
                    }, e
                }(Phaser.GameObjects.Container),
                V = g.default.DEFAULT_8_BIT,
                Y = V.KEY,
                W = V.FRAME,
                K = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, 0, 0) || this).wheelSlices = void 0, n.spinButton = void 0, n.wheelArrow = void 0, n.spinningTween = void 0, n.handleButtonClick = function () {
                            n.startWheelSpinning(), n.spinButton.setDisabled(!0), n.spinButton.setAlpha(1)
                        }, n.createWheelBackground(), n.createWheelSlices(), n.createWheelButton(), n.createWheelArrow(), n.scene.add.existing((0, y.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createWheelBackground = function () {
                        for (var t = 0; t < 4; t++) {
                            var e = this.scene.make.image({
                                    key: Y,
                                    frame: W.WHEEL_BG
                                }),
                                n = Phaser.Math.DegToRad(90 * t);
                            this.scene.add.existing(e), this.add(e), e.setOrigin(.5, .5), e.setWorldSize(131.5, 88.5), e.setRotation(n);
                            var i = e.height - 3;
                            Phaser.Display.Align.In.Center(e, this, Math.floor(i * Math.sin(n) / 2), Math.floor(-i * Math.cos(n) / 2)), this.setSize(2 * e.height, 2 * e.height)
                        }
                    }, n.createWheelArrow = function () {
                        this.wheelArrow = this.scene.make.image({
                            key: Y,
                            frame: W.WHEEL_ARROW
                        }), this.wheelArrow.setWorldSize(17.5, 26.5), this.wheelArrow.setFlipY(!0), this.add(this.wheelArrow), Phaser.Display.Align.In.Center(this.wheelArrow, this, 0, -25)
                    }, n.createWheelSlices = function () {
                        this.wheelSlices = new H(this.scene), this.add(this.wheelSlices), Phaser.Display.Align.In.Center(this.wheelSlices, this)
                    }, n.createWheelButton = function () {
                        this.spinButton = new d.default(this.scene, Y, W.WHEEL_BUTTON, 44.5, 48), this.add(this.spinButton), Phaser.Display.Align.In.Center(this.spinButton, this), this.spinButton.setInteractive({
                            useHandCursor: !0
                        });
                        var t = this.scene.make.bitmapText({
                            text: "SPIN!",
                            font: p.default.FONT_FAMILY,
                            size: 9
                        });
                        t.setOrigin(.5, .5), t.setDropShadow(-1, 0, 0, 1), this.spinButton.add(t), this.spinButton.setDisabled(!0), this.spinButton.setAlpha(1), Phaser.Display.Align.In.Center(t, this.spinButton, .5, -1.5)
                    }, n.startWheelSpinning = function () {
                        var t, e, n = this;
                        null == (t = this.spinningTween) || t.stop(), null == (e = this.spinningTween) || e.remove();
                        var i = this.scene.screen.get(m.ScreenKeys.RESULT_SCREEN);
                        i instanceof et && (this.spinningTween = this.scene.tweens.addCounter({
                            from: Phaser.Math.DegToRad(0),
                            to: Phaser.Math.DegToRad(360),
                            onUpdate: function (t) {
                                var e = t.getValue();
                                n.wheelArrow.setRotation(e);
                                var a = 25 * Math.sin(e),
                                    r = -25 * Math.cos(e);
                                n.wheelArrow.setPosition(a, r), null == i || i.updateCoinText(n.getCurrentMultiplierResult())
                            },
                            duration: 1250,
                            repeat: -1
                        }))
                    }, n.stopWheelSpinning = function () {
                        var t;
                        null == (t = this.spinningTween) || t.stop()
                    }, n.getCurrentMultiplierResult = function () {
                        var t = this.wheelArrow.rotation < 0 ? this.wheelArrow.rotation + Phaser.Math.PI2 : this.wheelArrow.rotation,
                            e = Math.floor(Phaser.Math.RadToDeg(t) / 45 + .5);
                        return 8 === e && (e = 0), this.wheelSlices.slices[e].rewardMultiplyValue
                    }, n.handleOnOpen = function () {
                        this.startWheelSpinning()
                    }, n.handleOnClose = function () {
                        this.stopWheelSpinning()
                    }, e
                }(Phaser.GameObjects.Container),
                z = g.default.DEFAULT_8_BIT,
                X = z.KEY,
                j = z.FRAME,
                q = g.default.DEFAULT_8_BIT,
                Z = q.KEY,
                Q = q.FRAME,
                J = GameCore.Configs.Network,
                $ = C.default.MULTIPLY_REWARD_BATTLE,
                tt = C.default.MULTIPLY_REWARD_ROUND,
                et = function (t) {
                    function e(e, n, a, r) {
                        var o;
                        return (o = t.call(this, e, n, a, r) || this).baseValue = void 0, o.rewardWheel = void 0, o.coinText = void 0, o.coinIcon = void 0, o.claimCoinText = void 0, o.resultText = void 0, o.levelCompletedText = void 0, o.ribbon = void 0, o.shineFx = void 0, o.collectButton = void 0, o.footerContainer = void 0, o.openAnimation = void 0, o.postAdCollectAnimation = void 0, o.fxSpinAnimation = void 0, o.fxScaleAnimation = void 0, o.coinTextAnimation = void 0, o.confettiAnimation = void 0, o.adsTimer = void 0, o.isRewardCollected = void 0, o.coinExplodeEffect = void 0, o.closeScreen = function () {
                            o.stopShineFxTween(), o.rewardWheel.stopWheelSpinning(), o.confettiAnimation.killAllParticles();
                            var t = o.getData("result");
                            if (!o.isRewardCollected) {
                                var e = o.scene.scene.get(v.SceneKeys.GAME_SCENE);
                                e instanceof I.default && "win" === t && e.rewardWinCoin(1)
                            }
                            o.scene.screen.close(o.name), o.scene.audio.playSound(E.default.NEXT_ROUND_EFFECT)
                        }, o.handleOnCollect = function () {
                            o.viewAdsReward()
                        }, o.viewAdsReward = (0, i.default)(s().mark((function t() {
                            var e, n;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, o.rewardWheel.stopWheelSpinning(), e = o.scene.audio, o.scene.screen.open(m.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            duration: 0,
                                            loading: !0
                                        }), e.pauseMusic(), t.next = 7, new(l())((function (t, e) {
                                            var n;
                                            null == (n = o.adsTimer) || n.remove(), o.adsTimer = o.scene.time.delayedCall(J.Timeout, e), o.scene.ads.getAdStatus(GameCore.Ads.Types.REWARDED) === GameCore.Ads.Status.LOADING ? o.scene.ads.events.once(GameCore.Ads.Events.LOADED, t) : o.scene.ads.preloadRewardedVideoAsync().then(t).catch(e)
                                        }));
                                    case 7:
                                        return t.next = 9, o.scene.ads.showRewardedVideoAsync();
                                    case 9:
                                        o.scene.ads.preloadRewardedVideoAsync().catch((function (t) {})), o.scene.screen.close(m.ScreenKeys.NOTIFY_SCREEN), o.handleLuckyReward(), t.next = 18;
                                        break;
                                    case 14:
                                        t.prev = 14, t.t0 = t.catch(0), o.handleFailedAdsReward();
                                    case 18:
                                        return t.prev = 18, null == (n = o.adsTimer) || n.destroy(), o.scene.audio.playMusic(), o.runPostAdAnimation(), o.scene.game.globalScene.screen.close(m.ScreenKeys.NOTIFY_SCREEN), t.finish(18);
                                    case 24:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 14, 18, 24]
                            ])
                        }))), o.handleFailedAdsReward = function () {
                            o.scene.screen.open(m.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                title: "Display Ads Failed",
                                message: "Unable to display ads. Please try again later.",
                                duration: 1500,
                                loading: !1
                            })
                        }, o.handleLuckyReward = function () {
                            o.onWheelEnding()
                        }, o.onWheelEnding = function () {
                            o.runCoinTextAnimation();
                            var t = o.rewardWheel.getCurrentMultiplierResult(),
                                e = o.getData("result"),
                                n = o.scene.scene.get(v.SceneKeys.GAME_SCENE);
                            "lose" === e ? n.rewardLostCoin(t) : "win" === e && n.rewardWinCoin(t), o.isRewardCollected = !0
                        }, o.handleClickContinueBtn = function () {
                            var t = o.scene.scene.get(v.SceneKeys.GAME_SCENE),
                                e = o.getData("result"),
                                n = o.getData("mode");
                            t.events.once(Phaser.Scenes.Events.RESUME, (function () {
                                t instanceof I.default && (n === x.default.NORMAL && "lose" === e ? t.replayRound() : t.nextRound())
                            })), o.closeScreen()
                        }, o.handleClickReplayBtn = function () {
                            var t = o.scene.scene.get(v.SceneKeys.GAME_SCENE);
                            t.events.once(Phaser.Scenes.Events.RESUME, (function () {
                                t instanceof I.default && t.replayRound()
                            })), o.closeScreen()
                        }, o.scene = e, o.background.setAlpha(.9), o.setDepth(m.ScreenDepth.SCREEN), o.createContent(), o.createEffect(), o
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createEffect = function () {
                        this.coinExplodeEffect = new M(this.scene), this.add(this.coinExplodeEffect), this.confettiAnimation = new w.default(this.scene), this.confettiAnimation.setDepth(m.ScreenDepth.SCREEN + 1)
                    }, n.open = function (e) {
                        t.prototype.open.call(this, e);
                        var n = this.getData("coinRewarded");
                        this.baseValue = n, this.updateScreen(), this.collectButton.setDisabled(!1), this.rewardWheel.handleOnOpen(), this.runOpenAnimation()
                    }, n.updateScreen = function () {
                        var t = this.baseValue.toString();
                        this.coinText.setText("+" + t), this.isRewardCollected = !1, this.coinIcon.setPosition(this.coinText.displayWidth / 2 + 10, this.coinIcon.y);
                        var e = this.getData("mode");
                        this.footerContainer.setMode(e);
                        var n = this.getData("result");
                        if ("lose" === n) this.resultText.setText("FAILED!"), this.ribbon.setFrame(Q.RESULT_SCREEN_RIBBON_LOSE), this.shineFx.setFrame(Q.RESULT_SCREEN_FX_LOSE), this.levelCompletedText.setText("");
                        else if ("win" === n) {
                            this.runConfetti(), this.resultText.setText("VICTORY!"), this.ribbon.setFrame(Q.RESULT_SCREEN_RIBBON_WIN), this.shineFx.setFrame(Q.RESULT_SCREEN_FX_WIN);
                            var i = tt;
                            if (this.scene instanceof I.default) this.scene.gameMode === x.default.BATTLE && (i = $);
                            this.levelCompletedText.setText("Level Completed Bonus x" + i)
                        }
                    }, n.runConfetti = function () {
                        var t = this.scene.gameZone,
                            e = t.displayWidth,
                            n = t.displayHeight;
                        this.confettiAnimation.run(0, n, e, .75 * n)
                    }, n.createContent = function () {
                        this.createCollectButton(), this.createFx(), this.createFooter(), this.createLevelCompleteText(), this.createGoldText(), this.createGoldIcon(), this.createEarnText(), this.createRibbon(), this.createRewardWheel()
                    }, n.createCollectButton = function () {
                        this.collectButton = new d.default(this.scene, Z, Q.RESULT_SCREEN_COLLECT_BUTTON, 162, 73), this.collectButton.setName("ClaimWithAds"), this.add(this.collectButton);
                        var t = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(25)
                        });
                        t.setText("CLAIM"), t.setDropShadow(-1, 1, 0), this.collectButton.add(t), Phaser.Display.Align.In.Center(t, this.collectButton, 20, -20);
                        var e = this.scene.make.image({
                            key: X,
                            frame: j.ICON_AD
                        });
                        e.setWorldSize(25.5, 27), this.collectButton.add(e), Phaser.Display.Align.In.Center(e, this.collectButton, -50, -12);
                        var n = this.scene.make.image({
                            key: Z,
                            frame: Q.RESULT_SCREEN_SINGLE_COIN_ICON
                        });
                        n.setWorldSize(16, 16), this.collectButton.add(n), Phaser.Display.Align.In.Center(n, this.collectButton, -15, 5), this.claimCoinText = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(17)
                        }), this.claimCoinText.setText("0"), this.claimCoinText.setTintText(14993153), this.claimCoinText.setDropShadow(-1.5, 1, 0), this.collectButton.add(this.claimCoinText), Phaser.Display.Align.In.Center(this.claimCoinText, this.collectButton, 22, 2), Phaser.Display.Align.In.Center(this.collectButton, this, 0, 190), this.collectButton.onClick = this.handleOnCollect
                    }, n.createFooter = function () {
                        this.footerContainer = new L(this.scene), this.add(this.footerContainer), this.footerContainer.onClickContinueBtn = this.handleClickContinueBtn, this.footerContainer.onClickReplayBtn = this.handleClickReplayBtn, this.footerContainer.onClickReturnBtn = this.handleClickContinueBtn, Phaser.Display.Align.In.Center(this.footerContainer, this.collectButton, 0, 70)
                    }, n.createLevelCompleteText = function () {
                        this.levelCompletedText = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18)
                        }), this.levelCompletedText.setTintText(15650560), this.levelCompletedText.setDropShadow(-1, 1, 0), this.add(this.levelCompletedText), Phaser.Display.Align.In.Center(this.levelCompletedText, this, 0, -80), this.levelCompletedText.setScale(this.collectButton.scaleX, this.collectButton.scaleY)
                    }, n.createGoldIcon = function () {
                        this.coinIcon = this.scene.make.image({
                            key: Z,
                            frame: Q.RESULT_SCREEN_GOLD_ICON
                        }), this.coinIcon.setWorldSize(55, 39.5), this.add(this.coinIcon), Phaser.Display.Align.In.Center(this.coinIcon, this, this.coinText.displayWidth / 2, -120)
                    }, n.createGoldText = function () {
                        this.coinText = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(32)
                        }), this.coinText.setDropShadow(-1, 1, 0), this.add(this.coinText), Phaser.Display.Align.In.Center(this.coinText, this, -20, -125)
                    }, n.createEarnText = function () {
                        var t = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(18)
                        });
                        t.setText("YOU EARNED"), t.setDropShadow(-2, 1, 0), this.add(t), Phaser.Display.Align.In.Center(t, this, 0, -180), t.setScale(this.collectButton.scaleX, this.collectButton.scaleY)
                    }, n.createFx = function () {
                        this.shineFx = this.scene.make.image({
                            key: Z,
                            frame: Q.RESULT_SCREEN_FX_WIN
                        }), this.add(this.shineFx), this.shineFx.setWorldSize(375, 407), Phaser.Display.Align.In.Center(this.shineFx, this, 0, -120)
                    }, n.createRibbon = function () {
                        this.ribbon = this.scene.make.image({
                            key: Z,
                            frame: Q.RESULT_SCREEN_RIBBON_WIN
                        }), this.add(this.ribbon), this.ribbon.setWorldSize(280, 50), Phaser.Display.Align.In.Center(this.ribbon, this, 2, -240), this.resultText = new f.default(this.scene, {
                            font: p.default.PRIMARY.KEY,
                            size: this.scene.fontSize(24)
                        }), this.resultText.setDropShadow(-1, 1, 0), this.add(this.resultText), Phaser.Display.Align.In.Center(this.resultText, this.ribbon, 3, -7)
                    }, n.createRewardWheel = function () {
                        this.rewardWheel = new K(this.scene), this.add(this.rewardWheel), Phaser.Display.Align.In.Center(this.rewardWheel, this, 0, 40)
                    }, n.runOpenAnimation = function () {
                        var t, e, n, i = this;
                        null == (t = this.openAnimation) || t.stop(), null == (e = this.openAnimation) || e.remove();
                        var a = u()(n = this.list).call(n, (function (t) {
                            return t !== i.background && t !== i.footerContainer
                        }));
                        this.openAnimation = new h.default({
                            targets: a,
                            delay: 0,
                            duration: 400,
                            props: {
                                alpha: {
                                    from: 0,
                                    to: 1
                                }
                            },
                            onComplete: function () {
                                i.runShineFxTween()
                            }
                        }), this.footerContainer.runAnimation(2500), this.openAnimation.play()
                    }, n.runShineFxTween = function () {
                        var t = this,
                            e = this.getData("result");
                        this.fxSpinAnimation = this.scene.tweens.add({
                            targets: this.shineFx,
                            duration: "win" === e ? 2e4 : 4e4,
                            ease: "Linear",
                            repeat: -1,
                            props: {
                                rotation: {
                                    from: Phaser.Math.DegToRad(0),
                                    to: Phaser.Math.DegToRad(360)
                                }
                            },
                            onStop: function () {
                                t.shineFx.rotation = Phaser.Math.DegToRad(0)
                            }
                        });
                        var n = this.shineFx.scaleX,
                            i = this.shineFx.scaleY;
                        this.fxScaleAnimation = this.scene.tweens.add({
                            targets: this.shineFx,
                            duration: 2e3,
                            ease: Phaser.Math.Easing.Quadratic.Out,
                            repeat: -1,
                            yoyo: !0,
                            props: {
                                scaleX: {
                                    from: n,
                                    to: 1.2 * n
                                },
                                scaleY: {
                                    from: i,
                                    to: 1.2 * i
                                }
                            },
                            onStop: function () {
                                t.shineFx.setScale(n, i)
                            }
                        })
                    }, n.stopShineFxTween = function () {
                        var t, e, n, i;
                        null == (t = this.fxSpinAnimation) || t.stop(), null == (e = this.fxSpinAnimation) || e.remove(), null == (n = this.fxScaleAnimation) || n.stop(), null == (i = this.fxScaleAnimation) || i.remove()
                    }, n.runPostAdAnimation = function () {
                        var t, e;
                        null == (t = this.postAdCollectAnimation) || t.stop(), null == (e = this.postAdCollectAnimation) || e.remove(), this.postAdCollectAnimation = this.scene.tweens.add({
                            targets: this.collectButton,
                            duration: 500,
                            alpha: {
                                from: .5,
                                to: 0
                            },
                            ease: Phaser.Math.Easing.Quadratic.In
                        }), this.footerContainer.runPostAnimation(500)
                    }, n.runCoinTextAnimation = function () {
                        var t, e, n = this;
                        null == (t = this.coinTextAnimation) || t.stop(), null == (e = this.coinTextAnimation) || e.remove();
                        var i = this.rewardWheel.getCurrentMultiplierResult(),
                            a = this.baseValue.clone(),
                            r = this.baseValue.clone();
                        r.multiply(i);
                        var s = r.clone();
                        s.subtract(a), s.divide(10);
                        var o = this.coinText.scaleX,
                            l = this.coinText.scaleY;
                        this.coinExplodeEffect.explode(12, this.coinIcon.x, this.coinIcon.y), this.coinTextAnimation = this.scene.tweens.addCounter({
                            from: 1,
                            to: 10,
                            duration: 150,
                            onRepeat: function () {
                                a.add(s), n.coinText.setText("+" + a.toString()), n.coinIcon.setPosition(n.coinText.displayWidth / 2 + 10, n.coinIcon.y)
                            },
                            onStart: function () {
                                n.scene.audio.playSound(E.default.COIN_INCREASE_REPEATEDLY_SOUND), n.coinText.setScale(1.1 * o, 1.1 * l), n.coinIcon.setPosition(n.coinText.displayWidth / 2 + 10, n.coinIcon.y), a.add(s), n.coinText.setText("+" + a.toString()), n.coinIcon.setPosition(n.coinText.displayWidth / 2 + 10, n.coinIcon.y)
                            },
                            onComplete: function () {
                                n.coinText.setScale(o, l), n.coinIcon.setPosition(n.coinText.displayWidth / 2 + 10, n.coinIcon.y)
                            },
                            onStop: function () {
                                n.coinText.setScale(o, l), n.coinIcon.setPosition(n.coinText.displayWidth / 2 + 10, n.coinIcon.y)
                            },
                            repeat: 9
                        })
                    }, n.updateCoinText = function (t) {
                        var e = this.baseValue.clone();
                        e.multiply(t), this.claimCoinText.setText("" + e.toString())
                    }, e
                }(GameCore.Screen)
        },
        621: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return rt
                }
            });
            var i = n(9),
                a = n(3),
                r = n(0),
                s = n(5),
                o = n.n(s),
                l = n(46),
                c = n.n(l),
                u = n(38),
                h = n(66),
                d = n(345),
                f = {
                    targets: [],
                    yoyo: !0,
                    repeat: -1,
                    duration: 600,
                    repeatDelay: 50,
                    ease: n.n(d)()(.55, .47, .43, .91),
                    easeParams: [0, .9],
                    props: {
                        scale: {
                            from: 1,
                            to: 1.2
                        }
                    }
                },
                p = function (t) {
                    function e(e) {
                        return t.call(this, f, e) || this
                    }
                    return (0, r.default)(e, t), e
                }(h.default),
                g = n(346),
                v = n(467),
                m = n(326),
                E = n(115),
                y = n(726),
                A = n(461),
                T = n(472),
                S = n(622),
                M = n(25),
                w = n(19),
                x = n(2),
                C = n(44),
                I = n(32),
                b = n(40),
                R = n(462),
                P = n(463),
                _ = n(623),
                k = n(60),
                L = n(27),
                D = n(92),
                O = n(150),
                N = x.default.DEFAULT_8_BIT,
                U = N.KEY,
                B = N.FRAME,
                F = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, U, B.UNIT_REWARD_PARTICLE) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: B.UNIT_REWARD_PARTICLE,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            timeScale: 1,
                            frequency: 100,
                            rotate: {
                                min: 0,
                                max: 90
                            },
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            scale: {
                                start: 1 * t,
                                end: 0,
                                ease: Phaser.Math.Easing.Expo.Out
                            },
                            lifespan: {
                                min: 3e3,
                                max: 4500
                            }
                        })
                    }, n.run = function (t, e, n, i, a, r) {
                        void 0 === r && (r = 100), this.stop(), this.reset(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.setFrequency(r), this.emitter.start()
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, n.reset = function () {
                        this.createEmitters()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager),
                G = x.default.DEFAULT_8_BIT,
                H = G.KEY,
                V = G.FRAME,
                Y = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, H, V.UNIT_REWARD_ELLIPSE_FX) || this).emitZone = void 0, n.emitter = void 0, n.createEmitZone(), n.createEmitters(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createEmitZone = function () {
                        this.emitZone = new Phaser.Geom.Rectangle
                    }, n.createEmitters = function () {
                        var t = 1 / this.scene.world.getPixelRatio();
                        this.emitter = this.createEmitter({
                            on: !1,
                            frame: V.UNIT_REWARD_ELLIPSE_FX,
                            emitZone: {
                                source: this.emitZone,
                                type: "random"
                            },
                            deathZone: {
                                source: this.emitZone,
                                type: "onLeave"
                            },
                            timeScale: 1,
                            frequency: 150,
                            speedY: {
                                min: -20,
                                max: -60
                            },
                            alpha: {
                                start: 1,
                                end: 0,
                                ease: Phaser.Math.Easing.Cubic.Out
                            },
                            scale: {
                                start: 1 * t,
                                end: 0,
                                ease: Phaser.Math.Easing.Cubic.Out
                            },
                            lifespan: {
                                min: 1500,
                                max: 2500
                            }
                        })
                    }, n.run = function (t, e, n, i, a) {
                        this.stop(), this.emitZone.setSize(i, a), this.emitZone.setPosition(e - i / 2, n - a / 2), this.emitter.setQuantity(t), this.emitter.start()
                    }, n.stop = function () {
                        var t, e;
                        null == (t = this.emitter) || t.killAll(), null == (e = this.emitter) || e.stop()
                    }, e
                }(Phaser.GameObjects.Particles.ParticleEmitterManager),
                W = x.default.DEFAULT_8_BIT,
                K = W.KEY,
                z = W.FRAME,
                X = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).giftAdIcon = void 0, n.particleTweens = [], n.bubbleTwinkleUp = void 0, n.iconAttentionAnimation = void 0, n.createGlow(), n.createFx(), n.createCurrencyIcon(), n.updateSize(), n.createEllipses(), n.createParticles(), n.scene.add.existing((0, a.default)(n)), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createGlow = function () {
                        var t = this.scene.make.image({
                            key: K,
                            frame: z.UNIT_REWARD_GLOW
                        });
                        t.setWorldSize(372.5, 372.5), this.add(t)
                    }, n.createFx = function () {
                        var t = this.scene.make.image({
                            key: K,
                            frame: z.UNIT_REWARD_FX
                        });
                        t.setWorldSize(375, 234.5), this.add(t)
                    }, n.createCurrencyIcon = function () {
                        this.giftAdIcon = this.scene.add.image(0, 0, K, z.UNIT_REWARD_GIFT_AD), this.giftAdIcon.setWorldSize(168.5, 168), this.giftAdIcon.setY(0), this.add(this.giftAdIcon)
                    }, n.updateSize = function () {
                        var t = this.giftAdIcon,
                            e = t.displayWidth,
                            n = t.displayHeight;
                        this.setSize(e, n)
                    }, n.createEllipses = function () {
                        this.bubbleTwinkleUp = new Y(this.scene), this.bubbleTwinkleUp.setScale(1.5), this.add(this.bubbleTwinkleUp)
                    }, n.createParticles = function () {
                        for (var t = 0; t < 4; t++) {
                            var e = new F(this.scene);
                            this.add(e), this.particleTweens.push(e)
                        }
                    }, n.runLogoAttentionAnimation = function (t) {
                        this.iconAttentionAnimation || (this.iconAttentionAnimation = new p({
                            targets: [this.giftAdIcon],
                            delay: t,
                            props: {
                                scale: "+=0.05"
                            }
                        })), this.iconAttentionAnimation.play();
                        var e = this.giftAdIcon,
                            n = e.x,
                            i = e.y,
                            a = e.width,
                            r = e.height;
                        this.bubbleTwinkleUp.run(1, n, i, a, r), this.particleTweens.forEach((function (t) {
                            var e = Phaser.Math.Between(1e3, 2e3);
                            t.run(1, 0, 0, a, r, e)
                        }))
                    }, n.stopAnimation = function () {
                        this.particleTweens.forEach((function (t) {
                            t.stop()
                        })), this.iconAttentionAnimation.stop()
                    }, e
                }(Phaser.GameObjects.Container),
                j = n(57),
                q = n(202),
                Z = x.default.DEFAULT_8_BIT,
                Q = Z.KEY,
                J = Z.FRAME,
                $ = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, Q, J.BUTTON_GREEN_LONG, 200, 64) || this).setName("ViewAd"), n.createIcon(), n.createViewText(), n
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.createIcon = function () {
                        var t = this.scene.add.image(0, 0, Q, J.ICON_AD);
                        t.setWorldSize(43.5, 45.5), Phaser.Display.Align.In.Center(t, this, -60, -5), this.add(t)
                    }, n.createViewText = function () {
                        var t = new q.default(this.scene, {
                            font: w.default.PRIMARY.KEY,
                            size: this.scene.fontSize(22)
                        });
                        t.setText("GET NOW!"), t.setDropShadow(-1.5, 1.5, 0), Phaser.Display.Align.In.Center(t, this, 25, -5), this.add(t)
                    }, e
                }(j.default),
                tt = GameCore.Configs.Network,
                et = x.default.DEFAULT_8_BIT,
                nt = et.KEY,
                it = et.FRAME,
                at = k.default.LEVEL_PROGRESS,
                rt = function (t) {
                    function e(e, n, r, s) {
                        var l;
                        return (l = t.call(this, e, n, r, s) || this).rewardValue = void 0, l.hand = void 0, l.viewAdButton = void 0, l.skipButton = void 0, l.giftIcon = void 0, l.giftIconWhite = void 0, l.currencyText = void 0, l.giftAdComponent = void 0, l.popupContents = void 0, l.cometTwinkle = void 0, l.starTwinkleUp = void 0, l.sparksExplosive = void 0, l.contentFadeOutAnimation = void 0, l.backgroundFadeInAnimation = void 0, l.contentShowUpAnimation = void 0, l.giftEntrancesAnimation = void 0, l.giftAttentionAnimation = void 0, l.giftShakeAnimation = void 0, l.giftOpenAnimation = void 0, l.adsTimer = void 0, l.open = function (e) {
                            t.prototype.open.call((0, a.default)(l), e), l.background.setAlpha(0), l.setRewardValue(e.unitType), l.runOpenAnimation(), l.handleShowRewardedVideoAd()
                        }, l.handleClosePopup = function () {
                            l.runCloseAnimation()
                        }, l.handleShowRewardedVideoAd = (0, i.default)(o().mark((function t() {
                            var e, n, i, a;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, e = l.scene, n = e.audio, i = e.game, l.viewAdButton.setDisabled(!0), i.globalScene.screen.open(I.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading ads...",
                                            duration: 0,
                                            loading: !0
                                        }), n.pauseMusic(), n.muteAll(), t.next = 8, new(c())((function (t, e) {
                                            var n;
                                            null == (n = l.adsTimer) || n.remove(), l.adsTimer = l.scene.time.delayedCall(tt.Timeout, e), l.scene.ads.getAdStatus(GameCore.Ads.Types.REWARDED) === GameCore.Ads.Status.LOADING ? l.scene.ads.events.once(GameCore.Ads.Events.LOADED, t) : l.scene.ads.preloadRewardedVideoAsync().then(t).catch(e)
                                        }));
                                    case 8:
                                        return t.next = 10, l.scene.ads.showRewardedVideoAsync();
                                    case 10:
                                        l.background.setAlpha(.8), l.scene.ads.preloadRewardedVideoAsync().catch((function (t) {})), i.globalScene.screen.close(I.ScreenKeys.NOTIFY_SCREEN), l.starTwinkleUp.stop(), l.scene.audio.playSound(b.default.DAILY_REWARD), l.popupContents.kill(), l.runTheGiftEntrancesAnimation(0, 1500), t.next = 29;
                                        break;
                                    case 19:
                                        if (t.prev = 19, t.t0 = t.catch(0), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code"))) {
                                            t.next = 27;
                                            break
                                        }
                                        if ("USER_INPUT" !== t.t0.code) {
                                            t.next = 27;
                                            break
                                        }
                                        return l.handleClosePopup(), l.showNotifySkipAds(), t.abrupt("return");
                                    case 27:
                                        l.handleClosePopup(), l.showNotifyNoAds();
                                    case 29:
                                        return t.prev = 29, null == (a = l.adsTimer) || a.destroy(), l.scene.audio.unmuteAll(), l.scene.audio.playMusic(), l.scene.game.globalScene.screen.close(I.ScreenKeys.NOTIFY_SCREEN), t.finish(29);
                                    case 35:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 19, 29, 35]
                            ])
                        }))), l.handleTheGiftClick = function () {
                            l.setTheGiftClickable(!1), l.logButtonEvent("OpenGift"), l.hand.stopAnimation(), l.hand.kill(), l.giftIconWhite.revive(), l.scene.tweens.killTweensOf(l.giftIcon), Phaser.Display.Align.In.Center(l.giftIconWhite, l.giftIcon), l.scene.audio.playSound(b.default.GIFT_CHARGE), (0, D.default)(50), l.runShakeTheGift(), l.runOpenTheGift()
                        }, l.showNotifyNoAds = function (t) {
                            t && t.name !== I.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN || l.scene.game.globalScene.screen.open(I.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "No ads to display!",
                                duration: 1500,
                                loading: !1
                            })
                        }, l.showNotifySkipAds = function () {
                            l.scene.game.globalScene.screen.open(I.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "Sorry, No Rewards!\nYou have cancelled the ad!",
                                duration: 1500,
                                loading: !1
                            })
                        }, l.runCloseAnimation = function () {
                            l.runExitsAnimation(0, 200)
                        }, l.setDepth(I.ScreenDepth.POPUP), l.background.setAlpha(0), l.createViewAdsButton(), l.createSkipButton(), l.createGiftAdIcon(), l.createCurrencyText(), l.createEffects(), l.createGiftIcon(), l.createHand(), l.createContentsGroup(), l
                    }(0, r.default)(e, t);
                    var n = e.prototype;
                    return n.setTheGiftClickable = function (t) {
                        t ? this.giftIcon.setInteractive() : this.giftIcon.disableInteractive()
                    }, n.logButtonEvent = function (t) {
                        var e = this.getScreenName();
                        this.scene.analytics.event(u.AnalyticsEvents.BUTTON_CLICK, {
                            button_name: t,
                            screen_name: e
                        })
                    }, n.runOpenAnimation = function () {
                        this.revive(), this.hand.stopAnimation(), this.hand.kill(), this.popupContents.revive(), this.starTwinkleUp.stop(), this.runPopupContentEntrancesAnimation(100, 400), this.runLogoAttentionAnimation(500)
                    }, n.runBackgroundEntrancesAnimation = function (t, e) {
                        this.backgroundFadeInAnimation || (this.backgroundFadeInAnimation = new m.default({
                            targets: [this.background],
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    start: 0,
                                    to: .8
                                }
                            }
                        })), this.backgroundFadeInAnimation.play()
                    }, n.runPopupContentEntrancesAnimation = function (t, e) {
                        var n;
                        null == (n = this.contentShowUpAnimation) || n.remove(), this.contentShowUpAnimation = new y.default({
                            targets: this.popupContents.getChildren(),
                            duration: e,
                            delay: this.scene.tweens.stagger(100, {
                                start: t
                            }),
                            props: {
                                scale: {
                                    getStart: function (t) {
                                        return t.scale - .3
                                    },
                                    getEnd: function (t) {
                                        return t.scale
                                    }
                                },
                                alpha: {
                                    start: 0,
                                    from: 0,
                                    to: 1
                                }
                            }
                        }), this.contentShowUpAnimation.play()
                    }, n.runLogoAttentionAnimation = function (t) {
                        var e = this.giftAdComponent,
                            n = e.x,
                            i = e.y,
                            a = e.width,
                            r = e.height;
                        this.starTwinkleUp.run(1, n, i, a, r), this.giftAdComponent.runLogoAttentionAnimation(t)
                    }, n.runTheGiftEntrancesAnimation = function (t, e) {
                        var n, i = this;
                        this.giftIcon.revive(), this.giftIcon.setAlpha(1), Phaser.Display.Align.In.TopRight(this.giftIcon, this.zone), null == (n = this.giftEntrancesAnimation) || n.remove();
                        var a = this.giftIcon,
                            r = a.x,
                            s = a.y,
                            o = this.currencyText,
                            l = {
                                x: r,
                                y: s
                            },
                            c = {
                                x: o.x,
                                y: o.y
                            },
                            u = 1 / this.scene.world.getPixelRatio();
                        this.giftEntrancesAnimation = new A.default({
                            targets: [this.giftIcon],
                            delay: t,
                            duration: e,
                            curve: [
                                [l.x, l.y],
                                [l.x - 80, l.y + 80],
                                [c.x, c.y]
                            ],
                            props: {
                                scale: {
                                    start: .5 * u,
                                    to: u
                                },
                                angle: {
                                    start: 20,
                                    to: 0
                                }
                            },
                            onCurveUpdate: function (t) {
                                var e = t.x + Phaser.Math.RND.between(-40, 40),
                                    n = t.y + Phaser.Math.RND.between(-40, 40);
                                i.cometTwinkle.explode(1, e, n)
                            },
                            onComplete: function () {
                                i.scene.audio.playSound(b.default.GIFT_REVEAL);
                                i.starTwinkleUp.setScale(1.5);
                                var t = i.giftIcon,
                                    e = t.x,
                                    n = t.y,
                                    a = t.width,
                                    r = t.height;
                                i.starTwinkleUp.run(1, e, n, a / 1.5, r / 1.5), i.moveTo(i.starTwinkleUp, i.length - 1), i.runTheGiftAttentionAnimation()
                            }
                        }), this.giftEntrancesAnimation.play()
                    }, n.runTheGiftAttentionAnimation = function () {
                        this.giftAttentionAnimation || (this.giftAttentionAnimation = new p({
                            targets: [this.giftIcon],
                            props: {
                                scale: "+=0.05"
                            }
                        })), this.hand.revive(), this.hand.playAnimation(), Phaser.Display.Align.In.Center(this.hand, this.giftIcon, 20, 20), this.setTheGiftClickable(!0), this.giftAttentionAnimation.play()
                    }, n.runShakeTheGift = function () {
                        this.giftShakeAnimation || (this.giftShakeAnimation = new g.default({
                            targets: [this.giftIcon, this.giftIconWhite],
                            duration: 22
                        })), this.giftShakeAnimation.play()
                    }, n.runOpenTheGift = function () {
                        var t = this;
                        if (!this.giftOpenAnimation) {
                            var e = 1 / this.scene.world.getPixelRatio();
                            this.giftOpenAnimation = new v.default({
                                targets: [this.giftIcon, this.giftIconWhite],
                                duration: 1500,
                                props: {
                                    alpha: 0,
                                    scale: e
                                },
                                onUpdate: function () {
                                    t.giftIconWhite.setAlpha(1)
                                },
                                onComplete: function () {
                                    t.giftShakeAnimation.stop(), t.giftIcon.kill(), t.giftIconWhite.kill(), t.sparksExplosive.explode(100, t.giftIcon.x, t.giftIcon.y, 230), t.scene.audio.playSound(b.default.GIFT_EXPLODE), t.rewardUnit(), t.scene.time.delayedCall(500, t.runCloseAnimation)
                                }
                            })
                        }
                        this.giftOpenAnimation.play()
                    }, n.rewardUnit = function () {
                        var t = this.scene.scene.get(C.SceneKeys.GAME_SCENE);
                        t instanceof O.default && t.spawnUnit(this.rewardValue, !0, this.getRewardedUnitLevel())
                    }, n.getRewardedUnitLevel = function () {
                        var t = this.scene.player.getCustomData(at),
                            e = GameCore.Utils.Valid.isNumber(t) ? t + 1 : 1,
                            n = L.default.BUYING_UNIT_LEVEL,
                            i = 1;
                        return n.forEach((function (t, n) {
                            t <= e && (i = n + 1)
                        })), i
                    }, n.runExitsAnimation = function (t, e) {
                        var n = this;
                        this.contentFadeOutAnimation || (this.contentFadeOutAnimation = new E.default({
                            targets: this.popupContents.getChildren(),
                            delay: t,
                            duration: e,
                            props: {
                                alpha: {
                                    start: .8,
                                    to: 0
                                }
                            },
                            onComplete: function () {
                                n.scene.screen.close(n.name), n.viewAdButton.setDisabled(!1), n.skipButton.setDisabled(!1)
                            }
                        })), this.contentFadeOutAnimation.play()
                    }, n.createHand = function () {
                        this.hand = new S.default(this.scene), this.add(this.hand)
                    }, n.createContentsGroup = function () {
                        this.popupContents = this.scene.make.group({}), this.popupContents.addMultiple([this.giftAdComponent, this.currencyText])
                    }, n.createCurrencyText = function () {
                        this.currencyText = this.scene.make.bitmapText({
                            size: this.scene.fontSize(22),
                            font: w.default.PRIMARY.KEY,
                            origin: {
                                x: .5,
                                y: .5
                            }
                        }), this.currencyText.setCenterAlign(), this.setRewardValue("MELEE"), this.add(this.currencyText)
                    }, n.setRewardValue = function (t) {
                        this.rewardValue = t, this.currencyText.setText("Watch a video to get free unit!"), Phaser.Display.Align.In.BottomCenter(this.currencyText, this.giftAdComponent, 0, 20)
                    }, n.createViewAdsButton = function () {
                        var t = this;
                        this.viewAdButton = new $(this.scene), this.viewAdButton.onClick = this.handleShowRewardedVideoAd, this.viewAdButton.onDown = function () {
                            t.skipButton.setDisabled(!0)
                        }, this.viewAdButton.onOut = function () {
                            t.skipButton.setDisabled(!1)
                        }, Phaser.Display.Align.In.Center(this.viewAdButton, this.zone, 0, 100), this.viewAdButton.kill()
                    }, n.createSkipButton = function () {
                        var t = this;
                        this.skipButton = new T.default(this.scene, {
                            key: nt,
                            frame: it.UNIT_REWARD_NO_THANKS_TEXT,
                            width: 123.5,
                            height: 18.5,
                            paddingZone: 50
                        }), this.skipButton.setName("NoThanks"), this.skipButton.onClick = this.handleClosePopup, this.skipButton.onDown = function () {
                            t.viewAdButton.setDisabled(!0)
                        }, this.skipButton.onOut = function () {
                            t.viewAdButton.setDisabled(!1)
                        }, Phaser.Display.Align.In.BottomCenter(this.skipButton, this.viewAdButton, 0, 80), this.skipButton.kill()
                    }, n.createGiftAdIcon = function () {
                        this.giftAdComponent = new X(this.scene), Phaser.Display.Align.In.Center(this.giftAdComponent, this.zone, 0, -80), this.add(this.giftAdComponent)
                    }, n.createGiftIcon = function () {
                        this.giftIconWhite = this.scene.make.image({
                            key: nt,
                            frame: it.UNIT_REWARD_GIFT_GLOW,
                            visible: !1
                        }), this.giftIconWhite.setWorldSize(168.5, 168), this.giftIconWhite.setDepth(M.default.PRIORITY), this.add(this.giftIconWhite), this.giftIcon = this.scene.make.image({
                            key: nt,
                            frame: it.UNIT_REWARD_GIFT,
                            visible: !1
                        }), this.giftIcon.setInteractive({
                            useHandCursor: !0
                        }), this.giftIcon.setWorldSize(168.5, 168), this.giftIcon.on(Phaser.Input.Events.GAMEOBJECT_POINTER_DOWN, this.handleTheGiftClick), this.setTheGiftClickable(!1), this.add(this.giftIcon)
                    }, n.createEffects = function () {
                        this.cometTwinkle = new R.default(this.scene), this.starTwinkleUp = new _.default(this.scene), this.sparksExplosive = new P.default(this.scene), this.add([this.cometTwinkle, this.starTwinkleUp, this.sparksExplosive])
                    }, e
                }(GameCore.Screen)
        },
        624: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return R
                }
            });
            var i = n(0),
                a = n(32),
                r = n(2),
                s = n(27),
                o = n(3),
                l = n(200),
                c = n(19),
                u = n(44),
                h = n(471),
                d = n(625),
                f = n(150),
                p = r.default.UNITS,
                g = p.KEY,
                v = (p.FRAME, r.default.DEFAULT_8_BIT),
                m = v.KEY,
                E = v.FRAME,
                y = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).glow = void 0, n.backEffect = void 0, n.bg = void 0, n.ribbon = void 0, n.healthContainer = void 0, n.healthText = void 0, n.atkContainer = void 0, n.atkText = void 0, n.unitName = void 0, n.unitFrame = void 0, n.particleTween = [], n.backEffectTween = void 0, n.exitTween = void 0, n.onExitComplete = void 0, n.loading = void 0, n.payload = void 0, n.handleWaitAddTexture = function (t, e) {
                            t === g && (n.scene.textures.off(Phaser.Textures.Events.ADD, n.handleWaitAddTexture), (n.visible || n.active) && n.setUnitFrame())
                        }, n.scene = e, n.setName("UnitCard"), n.createGlow(), n.createBackEffect(), n.createBg(), n.updateSize(), n.createRibbon(), n.createHealthContainer(), n.createAtkContainer(), n.createUnitName(), n.createUnitFrame(), n.createAnimation(), n.scene.add.existing((0, o.default)(n)), n
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createGlow = function () {
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_GLOW
                        });
                        t.setName("glow"), t.setWorldSize(340.5, 349.5), this.add(t), this.glow = t
                    }, n.createBackEffect = function () {
                        var t = new h.default(this.scene, {
                            color: 234748,
                            width: {
                                min: 4,
                                max: 8
                            },
                            radius: {
                                min: 180,
                                max: 170
                            },
                            lineNumber: 18
                        });
                        t.setName("backEffect"), t.setPosition(0, 0), this.add(t), this.backEffect = t
                    }, n.createBg = function () {
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_FRAME
                        });
                        t.setName("frame"), t.setWorldSize(207.5, 292), this.add(t), this.bg = t
                    }, n.createRibbon = function () {
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_BG
                        });
                        t.setName("ribbon"), t.setWorldSize(204, 34.5), this.add(t), Phaser.Display.Align.In.TopCenter(t, this, -1, -4), this.ribbon = t
                    }, n.updateSize = function () {
                        var t = this.bg,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createHealthContainer = function () {
                        this.healthContainer = this.scene.make.container({}), this.healthContainer.setName("healthContainer");
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_BG_1
                        });
                        t.setName("health-bg"), t.setWorldSize(79.5, 25), this.healthContainer.setSize(t.width, t.height);
                        var e = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_ICON_HEART
                        });
                        e.setName("health-icon"), e.setWorldSize(21.5, 19), Phaser.Display.Align.In.LeftCenter(e, t, -10);
                        var n = this.scene.make.text({
                            text: "0",
                            style: {
                                fontSize: "22px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2,
                                fixedWidth: 286,
                                align: "center",
                                fontFamily: c.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), n.setPosition(15, 0), this.healthText = n, this.healthContainer.add([t, e, n]), this.add(this.healthContainer), Phaser.Display.Align.In.TopLeft(this.healthContainer, this, -15, -8)
                    }, n.createAtkContainer = function () {
                        this.atkContainer = this.scene.make.container({}), this.atkContainer.setName("atkContainer");
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_BG_1
                        });
                        t.setName("atk-bg"), t.setWorldSize(79.5, 25), this.atkContainer.setSize(t.width, t.height);
                        var e = this.scene.make.image({
                            key: m,
                            frame: E.UNIT_UNLOCK_ICON_BATTLE
                        });
                        e.setName("atk-icon"), e.setWorldSize(20.5, 18), Phaser.Display.Align.In.LeftCenter(e, t, -10);
                        var n = this.scene.make.text({
                            text: "0",
                            style: {
                                fontSize: "22px",
                                color: "#ffffff",
                                stroke: "#000000",
                                strokeThickness: 2,
                                fixedWidth: 286,
                                align: "center",
                                fontFamily: c.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), n.setPosition(15, 0), this.atkText = n, this.atkContainer.add([t, e, n]), this.add(this.atkContainer), Phaser.Display.Align.In.TopRight(this.atkContainer, this.ribbon, -15, -4)
                    }, n.createUnitName = function () {
                        var t = this.scene.make.text({
                            text: "Abcdefghjklmnopx",
                            style: {
                                fontSize: "22px",
                                color: "#ffffff",
                                fixedWidth: 286,
                                align: "center",
                                fontFamily: c.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), this.unitName = t, this.add(t), Phaser.Display.Align.In.BottomCenter(t, this, 0, -21)
                    }, n.createUnitFrame = function () {
                        this.loading = new l.default(this.scene), this.loading.setY(-10), this.add(this.loading);
                        var t = this.scene.make.image({
                            key: m,
                            frame: E.BLANK
                        });
                        t.setName("unitFrame"), t.setWorldSize(200, 200), t.setY(-9), this.add(t), t.kill(), this.unitFrame = t
                    }, n.createAnimation = function () {
                        for (var t = 0; t < 4; t++) {
                            var e = new d.default(this.scene);
                            this.add(e), this.particleTween.push(e)
                        }
                        this.backEffectTween = this.scene.add.tween({
                            paused: !0,
                            targets: this.backEffect,
                            duration: 1e6,
                            ease: Phaser.Math.Easing.Linear,
                            repeat: -1,
                            props: {
                                rotation: {
                                    start: 0,
                                    to: 180
                                }
                            }
                        })
                    }, n.runAnimation = function () {
                        this.glow.revive(), this.backEffect.revive();
                        var t = this.width,
                            e = this.height;
                        this.particleTween.forEach((function (n) {
                            var i = Phaser.Math.Between(1e3, 2e3);
                            n.run(1, 0, 0, t / 2, e / 2.5, i)
                        })), this.backEffectTween.resume()
                    }, n.stopAnimation = function () {
                        this.particleTween.forEach((function (t) {
                            t.stop()
                        })), this.backEffectTween.pause()
                    }, n.runExitAnimation = function () {
                        this.glow.kill(), this.backEffect.kill(), this.createExitAnimation(), this.exitTween.play()
                    }, n.createExitAnimation = function () {
                        var t = this;
                        if (!this.exitTween) {
                            var e = this.scale,
                                n = this.x,
                                i = this.y,
                                a = n - 160.5,
                                r = i - 300,
                                s = this.scene.game.scene.getScene(u.SceneKeys.GAME_SCENE);
                            if (s instanceof f.default) {
                                var o = s.uiManager.getUnitBtnPos(),
                                    l = o.x,
                                    c = o.y,
                                    h = this.parentContainer.getLocalPoint(l, c);
                                a = h.x, r = h.y
                            }
                            this.exitTween = this.scene.add.tween({
                                paused: !0,
                                targets: this,
                                duration: 800,
                                ease: Phaser.Math.Easing.Cubic.Out,
                                props: {
                                    scale: {
                                        from: e,
                                        to: e / 10
                                    },
                                    x: {
                                        delay: 600,
                                        from: n,
                                        to: a
                                    },
                                    y: {
                                        delay: 600,
                                        from: i,
                                        to: r
                                    },
                                    alpha: {
                                        delay: 1300,
                                        duration: 200,
                                        from: 1,
                                        to: 0
                                    }
                                },
                                onComplete: function () {
                                    t.onExitComplete && t.onExitComplete(), t.setPosition(n, i), t.setScale(e), t.setAlpha(1)
                                }
                            })
                        }
                    }, n.updateInfo = function (t) {
                        this.payload = t;
                        var e = t.name,
                            n = t.health,
                            i = t.atk,
                            a = t.frame;
                        this.unitFrame.kill(), this.loading.revive(), this.unitName.setText(e);
                        var r = GameCore.Utils.Number.toAbbreviatedString(n);
                        this.healthText.setText(r);
                        var s = GameCore.Utils.Number.toAbbreviatedString(i);
                        this.atkText.setText(s), this.scene.textures.get(g).has(a) ? this.setUnitFrame() : this.scene.textures.on(Phaser.Textures.Events.ADD, this.handleWaitAddTexture), this.unitFrame.setFrame(a)
                    }, n.setUnitFrame = function () {
                        var t = this.payload.frame;
                        this.unitFrame.revive(), this.loading.kill(), this.unitFrame.setTexture(g, t), this.unitFrame.setWorldSize(200, 200)
                    }, e
                }(Phaser.GameObjects.Container),
                A = n(199),
                T = n(201),
                S = n(40),
                M = n(116),
                w = n(344),
                x = r.default.UNITS.FRAME,
                C = r.default.DEFAULT_8_BIT,
                I = C.KEY,
                b = C.FRAME,
                R = function (t) {
                    function e(e, n, i, r) {
                        var s;
                        return (s = t.call(this, e, n, i, r) || this).frameBg = void 0, s.popup = void 0, s.title = void 0, s.unitCard = void 0, s.closeBtn = void 0, s.isShowingAdBanner = void 0, s.showPopupAnimation = void 0, s.handleCloseScreen = function () {
                            s.unitCard.stopAnimation(), s.close()
                        }, s.handleShareUnit = function () {
                            var t = s.scene.scene.get(u.SceneKeys.GAME_SCENE);
                            if (t instanceof f.default) {
                                var e = t.unitManager.latestUnitMergePayload,
                                    n = e.type,
                                    i = e.level,
                                    a = t.unitManager.getUnitDataForUnlockingScreen(),
                                    r = {
                                        unitType: n,
                                        unitLevel: i,
                                        unitName: a.name,
                                        unitAtk: a.damage,
                                        unitHp: a.health
                                    };
                                (0, w.shareNewUnit)(r)
                            }
                        }, s.background.setAlpha(.9), s.setDepth(a.ScreenDepth.POPUP), s.createPopup(), s.createUnitCard(), s.createPopupTitle(), s.createPopupAnimation(), s
                    }(0, i.default)(e, t);
                    var n = e.prototype;
                    return n.createPopup = function () {
                        this.popup = this.scene.make.container({}), this.add(this.popup), this.popup.setName("popup");
                        var t = new T.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 307,
                            height: 386,
                            rightEdge: 292019,
                            topInnerCornerStrokeWidth: 2,
                            rightInnerCornerStrokeWidth: 3,
                            lightY: -80
                        });
                        t.setName("frame"), this.frameBg = t, this.popup.add(t);
                        var e = t.width,
                            n = t.height;
                        this.popup.setSize(e, n), this.createCloseButton();
                        var i = this.isShowingAdBanner ? -50 : 0;
                        Phaser.Display.Align.In.Center(this.popup, this, 0, i)
                    }, n.recalculateLightPosition = function () {
                        this.frameBg && this.frameBg.recalculateLightPosition()
                    }, n.createPopupTitle = function () {
                        var t = this.scene.make.container({});
                        t.setName("title");
                        var e = this.scene.make.image({
                            key: I,
                            frame: b.RIBBON_GREEN
                        });
                        e.setWorldSize(239, 65), t.add(e);
                        var n = this.scene.make.text({
                            text: "New Character",
                            style: {
                                fontSize: "23px",
                                color: "#FFFFFF",
                                fixedWidth: 299,
                                align: "center",
                                fontFamily: c.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), n.setPosition(0, -5), t.add(n), Phaser.Display.Align.In.TopCenter(t, this.popup, 0, -28), this.add(t), this.title = t
                    }, n.createUnitCard = function () {
                        this.unitCard = new y(this.scene), this.add(this.unitCard);
                        var t = this.isShowingAdBanner ? -25 : 25;
                        this.unitCard.setY(t)
                    }, n.updateInfo = function () {
                        var t = this.scene.scene.get(u.SceneKeys.GAME_SCENE);
                        if (t instanceof f.default) {
                            var e = t.unitManager;
                            if (e) {
                                var n = e.latestUnitMergePayload,
                                    i = n.level,
                                    a = n.type,
                                    r = e.getUnitDataForUnlockingScreen(),
                                    o = "";
                                if (a === s.default.MELEE_UNIT_TYPE && (o = x.UNLOCKED.MELEE[i]), a === s.default.RANGED_UNIT_TYPE && (o = x.UNLOCKED.RANGED[i]), "" !== o) {
                                    this.unitCard.updateInfo({
                                        frame: o,
                                        atk: r.damage,
                                        health: r.health,
                                        name: r.name
                                    });
                                    var l = this.isShowingAdBanner ? -50 : 0;
                                    this.popup.setY(l), Phaser.Display.Align.In.TopCenter(this.title, this.popup, 0, -28);
                                    var c = this.isShowingAdBanner ? -25 : 25;
                                    this.unitCard.setY(c)
                                }
                            }
                        }
                    }, n.createCloseButton = function () {
                        var t = new A.default(this.scene);
                        t.setName("Close"), this.popup.add(t), Phaser.Display.Align.In.TopRight(t, this.popup, 10, 10), t.onClick = this.handleCloseScreen, this.closeBtn = t
                    }, n.open = function () {
                        t.prototype.open.call(this);
                        var e = this.scene.scene.get(u.SceneKeys.GAME_SCENE);
                        this.isShowingAdBanner = !e || e.isBannerAdShowed, this.showPopupAnimation.play(), this.updateInfo(), this.popup.revive(), this.title.revive(), this.background.revive(), this.unitCard.runAnimation()
                    }, n.close = function () {
                        var e = this;
                        this.setBlockInputOutsideEnabled(!1), this.visible && (this.popup.kill(), this.title.kill(), this.background.kill(), this.unitCard.onExitComplete = function () {
                            e.scene.screen.close(e.name), e.scene.scene.resume(u.SceneKeys.GAME_SCENE);
                            var n = e.scene.game.scene.getScene(u.SceneKeys.GAME_SCENE);
                            n instanceof f.default && n.uiManager.runUnitBtnAnim(), e.scene.audio.playSound(S.default.COIN_SPAWN_SOUND), t.prototype.close.call(e)
                        }, this.unitCard.runExitAnimation(), this.scene.scene.resume(u.SceneKeys.GAME_SCENE))
                    }, n.createPopupAnimation = function () {
                        this.showPopupAnimation = new M.default({
                            targets: [this.popup, this.title, this.unitCard, this.closeBtn]
                        })
                    }, e
                }(GameCore.Screen)
        },
        626: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                default: function () {
                    return Mt
                }
            });
            var i = n(9),
                a = n(0),
                r = n(5),
                s = n.n(r),
                o = n(46),
                l = n.n(o),
                c = n(189),
                u = n.n(c),
                h = n(65),
                d = n.n(h),
                f = n(116),
                p = n(115),
                g = n(74),
                v = n(44),
                m = n(32),
                E = n(40),
                y = n(60),
                A = n(27),
                T = n(150),
                S = n(199),
                M = n(201),
                w = n(19),
                x = n(2),
                C = n(3),
                I = n(469),
                b = x.default.DEFAULT_8_BIT,
                R = b.KEY,
                P = b.FRAME,
                _ = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).numOfCols = void 0, i.colPadding = void 0, i.sliderBg = void 0, i.sliderBar = void 0, i.minSliderY = void 0, i.maxSliderY = void 0, i.numOfCols = n.numOfCols ? n.numOfCols : 2, i.colPadding = n.colPadding ? n.colPadding : 0, i.createSlider(), i.updateConfig(n.listConfigs), i
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createSlider = function () {
                        var t = this.scene.make.image({
                            key: R,
                            frame: P.UNIT_SCREEN_SLIDEBAR_BG
                        });
                        t.setName("sliderBg"), t.setWorldSize(6.5, 255), Phaser.Display.Align.In.RightCenter(t, this, -3, 5), this.add(t), this.sliderBg = t;
                        var e = this.scene.make.image({
                            key: R,
                            frame: P.UNIT_SCREEN_BAR
                        });
                        e.setName("sliderBar"), e.setWorldSize(3.5, 41.5), Phaser.Display.Align.In.TopCenter(e, this.sliderBg), this.add(e), this.sliderBar = e;
                        var n = this.sliderBg,
                            i = n.y,
                            a = n.displayHeight;
                        this.minSliderY = i - a / 2 + this.sliderBar.displayHeight / 2 + 1.5, this.maxSliderY = this.minSliderY + this.sliderBg.displayHeight - this.sliderBar.displayHeight - 1.5
                    }, n.createEvents = function () {
                        var e = this;
                        t.prototype.createEvents.call(this), this.scene.events.on(Phaser.Scenes.Events.UPDATE, (function () {
                            var t = e.value - e.marginTop;
                            e.value < -e.maxHeight ? t = -e.maxHeight : e.value > 0 && (t = 0);
                            var n = (t = -t) / (e.maxHeight + e.marginTop);
                            e.sliderBar.setY(e.minSliderY + n * (e.maxSliderY - e.minSliderY))
                        }))
                    }, n.updateMaxHeight = function () {
                        var t = Math.ceil(this.listConfigs.length / this.numOfCols);
                        return this.maxHeight = Math.max(t * (this.objHeight + this.padding) - this.padding + this.marginBottom - this.height, 0)
                    }, n.addObjectIndex = function (t, e) {
                        for (var n = t; n <= e; n++) {
                            var i = this.padding,
                                a = this.listConfigs;
                            if (n >= a.length) return;
                            var r = this.objects.getFirstDead(!0),
                                s = r.height,
                                o = Math.floor(n / this.numOfCols),
                                l = n % this.numOfCols,
                                c = s / 2,
                                u = (s + i) * o,
                                h = this.height / 2,
                                d = c + u + this.value - h,
                                f = r.width,
                                p = f / 2,
                                g = -(this.numOfCols * (f + this.colPadding) - this.colPadding) / 2 + p + (f + this.colPadding) * l;
                            r.updateInfo(a[n]), r.setPosition(g, d), r.setActive(!0), r.setVisible(!0), this.addAt(r), this.listObjects[n] = r
                        }
                    }, n.getEndObjectIndex = function () {
                        var t = this.objHeight,
                            e = this.padding,
                            n = this.listConfigs,
                            i = t + e;
                        return Math.min(this.numOfCols * Math.floor((this.height - this.value) / i) + (this.numOfCols - 1), n.length)
                    }, n.updateListConfigMember = function (t, e, n) {
                        for (var i = 0; i < this.listObjects.length; i++) {
                            var a = this.listConfigs[i],
                                r = a.unitType,
                                s = a.originData,
                                o = a.currentAdWatched;
                            if (r && s && void 0 !== o) {
                                var l = s.level;
                                if (l && r === t && l === e) {
                                    a.currentAdWatched = n;
                                    break
                                }
                            }
                        }
                    }, e
                }(I.default),
                k = n(29),
                L = n(35),
                D = n.n(L),
                O = n(38),
                N = n(200),
                U = n(108),
                B = n(57),
                F = n(202),
                G = x.default.DEFAULT_8_BIT,
                H = G.KEY,
                V = G.FRAME,
                Y = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e, H, V.UNIT_SCREEN_AD_BUTTON, 145, 41) || this).countText = void 0, n.adContainer = void 0, n.btnText = void 0, n.iconAd = void 0, n.iconCoin = void 0, n.createText(), n.createAdCount(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createText = function () {
                        var t = new F.default(this.scene, {
                            font: w.default.PRIMARY.KEY,
                            size: this.scene.fontSize(20)
                        });
                        t.setText("FREE"), t.setDropShadow(-1.5, 1.5, 0), t.setY(-7), this.add(t), this.btnText = t
                    }, n.createAdCount = function () {
                        var t = this.scene.make.container({}),
                            e = this.scene.make.image({
                                key: H,
                                frame: V.UNIT_SCREEN_AD_COUNT_BG
                            });
                        e.setWorldSize(68.5, 17.5), t.setSize(68.5, 17.5), t.add(e);
                        var n = this.scene.make.image({
                            key: H,
                            frame: V.UNIT_SCREEN_AD_ICON
                        });
                        n.setWorldSize(9, 7.5), n.setX(-25), t.add(n), this.iconAd = n;
                        var i = this.scene.make.image({
                            key: H,
                            frame: V.UNIT_SCREEN_COIN_ICON
                        });
                        i.setWorldSize(12, 11.5), i.setX(-25), t.add(i), this.iconCoin = i;
                        var a = this.scene.make.bitmapText({
                            font: w.default.PRIMARY.KEY,
                            size: this.scene.fontSize(10),
                            origin: {
                                x: .5,
                                y: .6
                            }
                        });
                        a.setText("0/999"), t.add(a), this.countText = a, Phaser.Display.Align.In.BottomCenter(t, this), this.add(t), this.adContainer = t
                    }, n.setCountText = function (t, e) {
                        0 === e ? this.countText.setText("" + t.toString()) : -1 === e ? this.countText.setText("") : this.countText.setText(t.toString() + "/" + e), 0 === e ? this.setMode("buy") : -1 === e ? this.setMode("notAvailable") : t >= e ? this.setMode("collect") : this.setMode("watch")
                    }, n.setMode = function (t) {
                        "watch" === t ? (this.adContainer.revive(), this.iconAd.revive(), this.iconCoin.kill(), this.btnText.setText("FREE")) : "collect" === t ? (this.adContainer.kill(), this.btnText.setText("COLLECT")) : "notAvailable" === t ? (this.adContainer.kill(), this.btnText.setText("UNAVAILABLE")) : (this.adContainer.revive(), this.iconAd.kill(), this.iconCoin.revive(), this.btnText.setText("BUY"))
                    }, e
                }(B.default),
                W = x.default.UNITS,
                K = W.KEY,
                z = W.FRAME,
                X = x.default.DEFAULT_8_BIT,
                j = X.KEY,
                q = X.FRAME,
                Z = GameCore.Configs.Gameplay,
                Q = Z.MaximumMeleeLevel,
                J = Z.MaximumRangedLevel,
                $ = A.default.MELEE_UNIT_TYPE,
                tt = A.default.RANGED_UNIT_TYPE,
                et = function (t) {
                    function e(e, n) {
                        var a;
                        return (a = t.call(this, e) || this).background = void 0, a.watchAdButton = void 0, a.titleText = void 0, a.lock = void 0, a.healthContainer = void 0, a.healthText = void 0, a.atkContainer = void 0, a.atkText = void 0, a.unitIcon = void 0, a.payload = void 0, a.loading = void 0, a.handleClickWatchAd = (0, i.default)(s().mark((function t() {
                            var e, n, i, r, o, l, c, u, h, d;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (e = a.payload, n = e.currentAdWatched, i = e.targetAdWatched, r = e.updateDataCallback, o = e.unitType, l = e.originData, c = e.showAdsCallback, u = e.collectCallback, h = l.level, !(n >= i)) {
                                            t.next = 12;
                                            break
                                        }
                                        if ((d = 0 === i) || a.scene.analytics.event(O.AnalyticsEvents.BUTTON_CLICK, {
                                                button_name: a.watchAdButton.name,
                                                unit: o + "-lv" + h,
                                                watchCount: n
                                            }), u(o, h, d)) {
                                            t.next = 8;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 8:
                                        return a.payload.currentAdWatched = 0, r(o, h, a.payload.currentAdWatched), a.updateAdButton(), t.abrupt("return");
                                    case 12:
                                        return a.scene.analytics.event(O.AnalyticsEvents.BUTTON_CLICK, {
                                            button_name: a.watchAdButton.name,
                                            unit: o + "-lv" + h,
                                            watchCount: n
                                        }), t.prev = 13, t.next = 16, c();
                                    case 16:
                                        if (t.sent) {
                                            t.next = 19;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 19:
                                        t.next = 24;
                                        break;
                                    case 21:
                                        return t.prev = 21, t.t0 = t.catch(13), t.abrupt("return");
                                    case 24:
                                        a.payload.currentAdWatched++, r(o, h, a.payload.currentAdWatched), a.updateAdButton();
                                    case 27:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [13, 21]
                            ])
                        }))), a.handleWaitAddTexture = function (t, e) {
                            if (t === K && (a.scene.textures.off(Phaser.Textures.Events.ADD, a.handleWaitAddTexture), a.visible || a.active)) {
                                var n = a.getUnitFrame();
                                "" !== n && a.setUnitFrame(n)
                            }
                        }, a.scene = e, a.createBackground(), a.createWatchAdButton(), a.updateSize(), a.createUnitIcon(), a.createTitleText(), a.createLock(), a.createHealthContainer(), a.createAtkContainer(), n && a.updateInfo(n), a.scene.add.existing((0, C.default)(a)), a
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateInfo = function (t) {
                        this.payload = (0, k.default)({
                            isUnlock: !1,
                            isCanBuy: !1,
                            coinNeed: new g.default(0)
                        }, t), this.updateFrame(), this.updateTitle(), this.updateAdButton(), this.updateLock(), this.updateUnitIcon(), this.updateHealthContainer(), this.updateAtkContainer()
                    }, n.runShowUpAnimation = function (t, e) {
                        void 0 === t && (t = 0), void 0 === e && (e = 300);
                        var n = 100 * t;
                        this.runShowPopUpAnimation(n, e), this.runShowItemAnimation(n, e)
                    }, n.runShowPopUpAnimation = function (t, e) {
                        this.scene.tweens.killTweensOf(this), new f.default({
                            targets: [this],
                            delay: t,
                            duration: e,
                            props: {
                                y: {
                                    start: this.y + 70,
                                    to: this.y
                                }
                            }
                        }).play()
                    }, n.runShowItemAnimation = function (t, e) {
                        var n = [this.background, this.watchAdButton, this.titleText, this.lock, this.healthContainer, this.atkContainer];
                        this.unitIcon.visible && this.unitIcon.active && n.push(this.unitIcon);
                        var i = D()(n).call(n, (function (t) {
                            return t.alpha
                        }));
                        n.forEach((function (t) {
                            return t.setAlpha(0)
                        }));
                        var a = D()(n).call(n, (function (t) {
                            return t.scale
                        }));
                        this.scene.tweens.killTweensOf(n), this.scene.add.tween({
                            targets: n,
                            duration: e,
                            delay: this.scene.tweens.stagger(50, {
                                start: t + 50
                            }),
                            props: {
                                scale: {
                                    duration: 1e3,
                                    getStart: function (t, e, n, i) {
                                        return .8 * a[i]
                                    },
                                    getEnd: function (t, e, n, i) {
                                        return a[i]
                                    },
                                    ease: Phaser.Math.Easing.Elastic.Out,
                                    easeParams: [.1, .45]
                                },
                                alpha: {
                                    duration: 500,
                                    getStart: function (t) {
                                        return t.setAlpha(0), 0
                                    },
                                    getEnd: function (t, e, n, a) {
                                        return i[a]
                                    },
                                    ease: Phaser.Math.Easing.Cubic.Out
                                }
                            },
                            onStop: function () {
                                n.forEach((function (t, e) {
                                    t.setScale(a[e])
                                }))
                            },
                            onComplete: function () {
                                n.forEach((function (t, e) {
                                    t.setScale(a[e])
                                }))
                            }
                        })
                    }, n.createBackground = function () {
                        this.background = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_FRAME_1
                        }), this.background.setWorldSize(145, 205), this.background.setY(-20.5), this.add(this.background)
                    }, n.createWatchAdButton = function () {
                        var t = new Y(this.scene);
                        t.onClick = this.handleClickWatchAd, this.add(t), Phaser.Display.Align.In.BottomCenter(t, this.background, 0, 41), this.watchAdButton = t
                    }, n.updateSize = function () {
                        var t = this.background,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n + 41)
                    }, n.createTitleText = function () {
                        var t = this.scene.make.text({
                            text: "Locked",
                            style: {
                                fontSize: "15px",
                                color: "#FFFFFF",
                                fixedWidth: 195,
                                align: "center",
                                fontFamily: w.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        t.setHighQuality(), this.add(t), this.titleText = t
                    }, n.createLock = function () {
                        var t = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_ICON_LOCK
                        });
                        t.setWorldSize(21, 28), this.add(t), this.lock = t
                    }, n.createHealthContainer = function () {
                        this.healthContainer = this.scene.make.container({});
                        var t = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_BG
                        });
                        t.setWorldSize(56.5, 18), this.add(t);
                        var e = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_ICON_HEART
                        });
                        e.setWorldSize(15, 13.5), Phaser.Display.Align.In.LeftCenter(e, t, -5);
                        var n = this.scene.make.text({
                            text: "0",
                            style: {
                                fontSize: "13px",
                                color: "#FFFFFF",
                                fixedWidth: 169,
                                align: "center",
                                fontFamily: w.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), n.setPosition(10, 0), this.healthText = n, this.healthContainer.add([t, e, n]), this.add(this.healthContainer), Phaser.Display.Align.In.TopLeft(this.healthContainer, this.background, -35, -12)
                    }, n.createAtkContainer = function () {
                        this.atkContainer = this.scene.make.container({});
                        var t = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_BG
                        });
                        this.add(t), t.setWorldSize(56.5, 18);
                        var e = this.scene.make.image({
                            key: j,
                            frame: q.UNIT_SCREEN_ICON_BATTLE
                        });
                        e.setWorldSize(14, 13), Phaser.Display.Align.In.LeftCenter(e, t, -5);
                        var n = this.scene.make.text({
                            text: "0",
                            style: {
                                fontSize: "13px",
                                color: "#FFFFFF",
                                fixedWidth: 169,
                                align: "center",
                                fontFamily: w.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), n.setPosition(10, 0), this.atkText = n, this.atkContainer.add([t, e, n]), this.add(this.atkContainer), Phaser.Display.Align.In.TopRight(this.atkContainer, this.background, -35, -12)
                    }, n.createUnitIcon = function () {
                        this.loading = new N.default(this.scene), this.loading.setY(-30), this.add(this.loading);
                        var t = this.scene.make.image({
                            key: j,
                            frame: q.BLANK
                        });
                        t.setWorldSize(142, 142), this.add(t), Phaser.Display.Align.In.Center(t, this.background, 0, -8), t.kill(), this.unitIcon = t
                    }, n.updateFrame = function () {
                        this.payload.isUnlock ? (this.background.setFrame(q.UNIT_SCREEN_FRAME_1), this.background.setWorldSize(145, 205)) : (this.background.setFrame(q.UNIT_SCREEN_FRAME_LOCKED), this.background.setWorldSize(145, 202.5))
                    }, n.updateTitle = function () {
                        if (this.payload.isUnlock) {
                            var t = this.payload.originData.name;
                            this.titleText.setText(t), this.titleText.setColor("#FFFFFF"), this.titleText.setPosition(0, 58)
                        } else {
                            var e;
                            this.isUnitComingSoon() ? (e = "Coming Soon", this.titleText.setPosition(12, 58)) : (e = "Locked", this.titleText.setPosition(15, 58)), this.titleText.setText(e), this.titleText.setColor("#9AACBF")
                        }
                    }, n.isUnitComingSoon = function () {
                        var t = this.payload,
                            e = t.originData,
                            n = t.unitType,
                            i = e.level;
                        switch (n) {
                            case $:
                                return i > Q;
                            case tt:
                                return i > J;
                            default:
                                return !0
                        }
                    }, n.updateAdButton = function () {
                        var t = this.payload,
                            e = t.isUnlock,
                            n = t.currentAdWatched,
                            i = t.targetAdWatched,
                            a = t.isUnitBoardFull,
                            r = t.coinNeed,
                            s = t.isCanBuy,
                            o = t.unitType,
                            l = t.originData.level,
                            c = !1,
                            u = this.scene.scene.get(v.SceneKeys.GAME_SCENE);
                        if (u instanceof T.default && (c = u.gameMode === U.default.BATTLE), this.watchAdButton.setDisabled(!1), e)
                            if (this.watchAdButton.setVisible(!0), 0 === i) {
                                var h = GameCore.Utils.String.toCamelCase(o);
                                this.watchAdButton.setName("Buy" + h + "Unit"), this.watchAdButton.disableLogEvent(!1), this.watchAdButton.setCountText(r, i), (!s || a || c) && this.watchAdButton.setDisabled(!0)
                            } else if (-1 === i) this.watchAdButton.setName("NotAvailable" + o + l + "Unit"), this.watchAdButton.disableLogEvent(!0), this.watchAdButton.setCountText(0, i), this.watchAdButton.setDisabled(!0);
                        else {
                            var d = "BuyUnitByRewardedVideo";
                            n >= i && (d = "CollectUnitByRewardedVideo"), this.watchAdButton.setName(d), this.watchAdButton.disableLogEvent(!0), this.watchAdButton.setCountText(n, i), n >= i && (a || c) && this.watchAdButton.setDisabled(!0)
                        } else this.watchAdButton.setVisible(!1)
                    }, n.updateLock = function () {
                        this.payload.isUnlock ? this.lock.setVisible(!1) : (this.isUnitComingSoon() ? this.lock.setPosition(-45, 53) : this.lock.setPosition(-30, 53), this.lock.setVisible(!0))
                    }, n.updateUnitIcon = function () {
                        var t = this.getUnitFrame();
                        "" !== t && (this.scene.textures.get(K).has(t) ? this.setUnitFrame(t) : this.scene.textures.on(Phaser.Textures.Events.ADD, this.handleWaitAddTexture))
                    }, n.getUnitFrame = function () {
                        var t = this.payload,
                            e = t.isUnlock,
                            n = t.unitType,
                            i = this.payload.originData.level,
                            a = "UNLOCKED";
                        e || (a = "LOCKED");
                        var r = "";
                        return n === A.default.MELEE_UNIT_TYPE && (r = z[a].MELEE[i]), n === A.default.RANGED_UNIT_TYPE && (r = z[a].RANGED[i]), r
                    }, n.setUnitFrame = function (t) {
                        this.unitIcon.revive(), this.loading.kill(), this.unitIcon.setTexture(K, t), this.unitIcon.setWorldSize(142, 142)
                    }, n.updateHealthContainer = function () {
                        var t = this.payload.originData.health,
                            e = GameCore.Utils.Number.toAbbreviatedString(t);
                        this.healthText.setText(e)
                    }, n.updateAtkContainer = function () {
                        var t = this.payload.originData.damage,
                            e = GameCore.Utils.Number.toAbbreviatedString(t);
                        this.atkText.setText(e)
                    }, e
                }(Phaser.GameObjects.Container),
                nt = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).scroller = void 0, n.createScroller(), n.scene.add.existing((0, C.default)(n)), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createScroller = function () {
                        this.scroller = new _(this.scene, {
                            classType: et,
                            listConfigs: [],
                            width: 322,
                            height: 265.5,
                            padding: 10,
                            marginTop: 10,
                            marginBottom: 10,
                            numOfCols: 2,
                            colPadding: 5
                        }), this.scroller.setName("scroller"), this.scroller.createMask(), this.scroller.setPosition(0, 40), this.add(this.scroller)
                    }, n.updateData = function (t) {
                        t.length < 1 || (this.scroller.updateConfig(t), this.runAnimations())
                    }, n.updateListConfigMember = function (t, e, n) {
                        this.scroller.updateListConfigMember(t, e, n)
                    }, n.runAnimations = function () {
                        var t = this,
                            e = this.scroller.getChildren();
                        if (e.length < 1) {
                            var n = this.scene.screen.get(m.ScreenKeys.UNITS_SCREEN);
                            if (!(n instanceof Mt)) return;
                            n.isSwitchable = !0
                        } else {
                            for (var i = Math.min(e.length, 3 * this.scroller.numOfCols), a = 0; a < i; a++) {
                                var r = e[a];
                                r && (r.setVisible(!0), r.runShowUpAnimation(a, 300))
                            }
                            var s = 300 + 100 * i + 250;
                            this.scene.time.delayedCall(s, (function () {
                                var e = t.scene.screen.get(m.ScreenKeys.UNITS_SCREEN);
                                e instanceof Mt && (e.isSwitchable = !0, t.scroller.setEnable(!0))
                            }))
                        }
                    }, e
                }(Phaser.GameObjects.Container),
                it = x.default.DEFAULT_8_BIT,
                at = it.KEY,
                rt = it.FRAME,
                st = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        return (r = t.call(this, e, n, i) || this).focusFrame = void 0, r.text = void 0, r.createText(a), r.createFocus(), r
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.createText = function (t) {
                        var e = this.scene.make.text({
                            text: t,
                            style: {
                                stroke: "#000000",
                                strokeThickness: 2,
                                fontSize: "13px",
                                color: "#FFFFFF",
                                fixedWidth: 169,
                                align: "center",
                                fontFamily: w.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        e.setHighQuality(), e.setShadow(0, 4, "#000000", 0, !0), this.add(e), this.text = e
                    }, n.createFocus = function () {
                        var t = this.scene.make.image({
                            key: at,
                            frame: rt.UNIT_SCREEN_TAB_FOCUS
                        });
                        t.setName("focus"), t.setWorldSize(57, 3.5), t.setVisible(!1), Phaser.Display.Align.In.Center(t, this, 0, this.button.height), t.setPosition(0, 13), this.add(t), this.focusFrame = t
                    }, n.turnOnFocus = function () {
                        this.focusFrame.setVisible(!0), this.text.setColor("#FFFFFF")
                    }, n.turnOffFocus = function () {
                        this.focusFrame.setVisible(!1), this.text.setColor("#72ABFA")
                    }, e
                }(B.default),
                ot = x.default.DEFAULT_8_BIT,
                lt = ot.KEY,
                ct = ot.FRAME,
                ut = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).ribbon = void 0, n.dinosaursBtn = void 0, n.warriorsBtn = void 0, n.createRibbon(), n.createDinosaursBtn(), n.createWarriorsBtn(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.selectTabDinosaurs = function () {
                        this.dinosaursBtn.turnOnFocus(), this.warriorsBtn.turnOffFocus()
                    }, n.selectTabWarriors = function () {
                        this.dinosaursBtn.turnOffFocus(), this.warriorsBtn.turnOnFocus()
                    }, n.createRibbon = function () {
                        var t = this.scene.make.image({
                            key: lt,
                            frame: ct.UNIT_SCREEN_TAB_BG
                        });
                        t.setWorldSize(329, 29), t.setName("ribbon"), Phaser.Display.Align.In.Center(t, this), this.add(t), this.ribbon = t
                    }, n.createDinosaursBtn = function () {
                        var t = new st(this.scene, lt, ct.BLANK, "Dinosaurs");
                        t.button.setWorldSize(85, 29), t.button.setVisible(!1), t.setName("DinosaursTab"), Phaser.Display.Align.In.Center(t, this.ribbon, -100, 0), this.add(t), this.dinosaursBtn = t
                    }, n.createWarriorsBtn = function () {
                        var t = new st(this.scene, lt, ct.BLANK, "Warriors");
                        t.button.setWorldSize(85, 29), t.button.setVisible(!1), t.setName("WarriorsTab"), Phaser.Display.Align.In.Center(t, this.ribbon, 0, 0), this.add(t), this.warriorsBtn = t
                    }, e
                }(Phaser.GameObjects.Container),
                ht = x.default.DEFAULT,
                dt = ht.KEY,
                ft = ht.FRAME,
                pt = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).popup = void 0, n.tabs = void 0, n.scrollerController = void 0, n.closeBtn = void 0, n.onClose = void 0, n.handleOnCloseClick = function () {
                            n.onClose && n.onClose()
                        }, n.createPopup(), n.createPopupContents(), n.updateSize(), n.createCloseButton(), n
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.updateSize = function () {
                        var t = this.popup,
                            e = t.width,
                            n = t.height;
                        this.setSize(e, n)
                    }, n.createPopup = function () {
                        this.popup = new M.default(this.scene, {
                            x: 0,
                            y: 0,
                            width: 332,
                            height: 399,
                            rightEdge: 283798,
                            bottomRightCorner: 215172,
                            bottomEdge: 76382,
                            mainTopColorGradient: 145525,
                            mainBotColorGradient: 145525,
                            topInnerCornerStrokeWidth: 1.3,
                            rightInnerCornerStrokeWidth: 3
                        }), this.popup.turnOffLight(), this.add(this.popup), Phaser.Display.Align.In.Center(this.popup, this)
                    }, n.recalculateLightPosition = function () {
                        this.popup && this.popup.recalculateLightPosition()
                    }, n.createPopupContents = function () {
                        this.createTitle(), this.createScrollerController(), this.createTabs()
                    }, n.createTitle = function () {
                        var t = this.scene.add.container();
                        t.setName("title");
                        var e = this.scene.make.image({
                            key: dt,
                            frame: ft.RIBBON_BLUE
                        });
                        e.setWorldSize(239, 67);
                        var n = this.scene.make.text({
                            text: "Character List",
                            style: {
                                fontSize: "21px",
                                color: "#FFFFFF",
                                fixedWidth: 286,
                                align: "center",
                                fontFamily: w.default.FONT_FAMILY
                            },
                            origin: {
                                x: .5,
                                y: .5
                            }
                        });
                        n.setHighQuality(), Phaser.Display.Align.In.Center(n, e, 0, -10), t.add([e, n]), this.add(t), Phaser.Display.Align.In.TopCenter(t, this.popup, 0, -28)
                    }, n.createTabs = function () {
                        this.tabs = new ut(this.scene), this.tabs.setName("tabs"), this.add(this.tabs), Phaser.Display.Align.In.TopCenter(this.tabs, this.popup, 0, -85)
                    }, n.createScrollerController = function () {
                        this.scrollerController = new nt(this.scene), this.add(this.scrollerController), Phaser.Display.Align.In.Center(this.scrollerController, this.popup)
                    }, n.createCloseButton = function () {
                        this.closeBtn = new S.default(this.scene), Phaser.Display.Align.In.TopRight(this.closeBtn, this, 10, 10), this.add(this.closeBtn), this.closeBtn.onClick = this.handleOnCloseClick
                    }, n.updateData = function (t) {
                        this.scrollerController.updateData(t)
                    }, n.updateListConfigMember = function (t, e, n) {
                        this.scrollerController.updateListConfigMember(t, e, n)
                    }, n.removeAllBlocks = function () {
                        this.scrollerController.updateData([])
                    }, e
                }(Phaser.GameObjects.Container),
                gt = y.default.MELEE_UNLOCKED,
                vt = y.default.RANGED_UNLOCKED,
                mt = y.default.UNIT_SCREEN_AD_WATCHED_COUNT,
                Et = A.default.AD_WATCH_REQUIREMENT,
                yt = GameCore.Configs.Network,
                At = GameCore.Configs.Gameplay,
                Tt = At.MaximumMeleeLevel,
                St = At.MaximumRangedLevel,
                Mt = function (t) {
                    function e(e, n, a, r) {
                        var o;
                        return (o = t.call(this, e, n, a, r) || this).unitPopup = void 0, o.isSwitchable = void 0, o.showPopupAnimation = void 0, o.fadeOutAnimation = void 0, o.adsTimer = void 0, o.isShowingAds = void 0, o.handleSelectDinosaursTab = function () {
                            o.isSwitchable && (o.isSwitchable = !1, o.selectDinosaursTab())
                        }, o.handleSelectWarriorsTab = function () {
                            o.isSwitchable && (o.isSwitchable = !1, o.selectWarriorsTab())
                        }, o.handleCloseScreen = function () {
                            o.runFadeOutAnimation()
                        }, o.updateListConfig = function (t, e, n) {
                            var i = {
                                MELEE: {},
                                RANGED: {}
                            };
                            try {
                                i = o.mergeAndGetAdWatchedCountConfig(t, e, n)
                            } catch (a) {}
                            o.scene.player.setCustomData(mt, i), o.unitPopup.updateListConfigMember(t, e, n)
                        }, o.handleShowRewardedVideoAd = (0, i.default)(s().mark((function t() {
                            var e, n, i, a, r;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (!o.isShowingAds) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return", !1);
                                    case 2:
                                        return e = !1, t.prev = 3, o.isShowingAds = !0, n = o.scene, i = n.audio, (a = n.game).globalScene.screen.open(m.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading ads...",
                                            duration: 0,
                                            loading: !0
                                        }), i.pauseMusic(), t.next = 10, new(l())((function (t, e) {
                                            var n;
                                            null == (n = o.adsTimer) || n.remove(), o.adsTimer = o.scene.time.delayedCall(yt.Timeout, e), o.scene.ads.getAdStatus(GameCore.Ads.Types.REWARDED) === GameCore.Ads.Status.LOADING ? o.scene.ads.events.once(GameCore.Ads.Events.LOADED, t) : o.scene.ads.preloadRewardedVideoAsync().then(t).catch(e)
                                        }));
                                    case 10:
                                        return t.next = 12, o.scene.ads.showRewardedVideoAsync();
                                    case 12:
                                        o.scene.ads.preloadRewardedVideoAsync().catch((function (t) {})), a.globalScene.screen.close(m.ScreenKeys.NOTIFY_SCREEN), o.scene.audio.playSound(E.default.DAILY_REWARD), e = !0, t.next = 23;
                                        break;
                                    case 18:
                                        t.prev = 18, t.t0 = t.catch(3), e = !1, t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code") ? "USER_INPUT" === t.t0.code && o.showNotifySkipAds() : o.showNotifyNoAds();
                                    case 23:
                                        return t.prev = 23, o.isShowingAds = !1, null == (r = o.adsTimer) || r.destroy(), o.scene.audio.playMusic(), o.scene.game.globalScene.screen.close(m.ScreenKeys.NOTIFY_SCREEN), t.finish(23);
                                    case 29:
                                        return t.abrupt("return", e);
                                    case 30:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [3, 18, 23, 29]
                            ])
                        }))), o.showNotifyNoAds = function (t) {
                            t && t.name !== m.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN || o.scene.game.globalScene.screen.open(m.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "No ads to display!",
                                duration: 1500,
                                loading: !1
                            })
                        }, o.showNotifySkipAds = function () {
                            o.scene.game.globalScene.screen.open(m.ScreenKeys.CLOSEABLE_NOTIFY_SCREEN, {
                                message: "Sorry, No Rewards!\nYou have cancelled the ad!",
                                duration: 1500,
                                loading: !1
                            })
                        }, o.handleCollectUnit = function (t, e, n) {
                            void 0 === n && (n = !1);
                            var i = o.scene.scene.get(v.SceneKeys.GAME_SCENE),
                                a = !1;
                            return i instanceof T.default && (a = t === A.default.MELEE_UNIT_TYPE ? i.spawnUnit("MELEE", !0, e, n) : i.spawnUnit("RANGED", !0, e, n)), o.handleCloseScreen(), a
                        }, o.background.setAlpha(.8), o.setDepth(m.ScreenDepth.POPUP), o.createUnitPopup(), o
                    }(0, a.default)(e, t);
                    var n = e.prototype;
                    return n.open = function () {
                        t.prototype.open.call(this), this.isShowingAds = !1, this.runPopupAnimation(), this.isSwitchable = !1, this.selectDinosaursTab()
                    }, n.selectDinosaursTab = function () {
                        this.unitPopup.tabs.selectTabDinosaurs(), this.unitPopup.removeAllBlocks();
                        var t = this.getDataOf(A.default.MELEE_UNIT_TYPE);
                        this.unitPopup.updateData(t)
                    }, n.selectWarriorsTab = function () {
                        this.unitPopup.tabs.selectTabWarriors(), this.unitPopup.removeAllBlocks();
                        var t = this.getDataOf(A.default.RANGED_UNIT_TYPE);
                        this.unitPopup.updateData(t)
                    }, n.recalculateLightPosition = function () {
                        this.unitPopup && this.unitPopup.recalculateLightPosition()
                    }, n.getDataOf = function (t) {
                        var e = this,
                            n = [],
                            i = this.scene.scene.get(v.SceneKeys.GAME_SCENE),
                            a = this.getAdWatchedCount(t),
                            r = !0,
                            s = 1,
                            o = !1;
                        if (i instanceof T.default && (r = !(i.fieldManager.getRemainingAvailablePlacement() > 0), s = i.getBuyingUnitLevel(), o = i.tutorialManager.isRunning()), t === A.default.MELEE_UNIT_TYPE) {
                            var l = this.scene.player.getCustomData(gt);
                            l && "number" === typeof l || (l = 1);
                            var c = this.scene.coin.getCurrentCoins(),
                                u = new g.default(0),
                                h = !0;
                            if (i instanceof T.default) {
                                var d = i.unitManager.getPlayerMeleeSpawnedUnitsCount();
                                u = i.coinManager.getUnitPrice(d)
                            }
                            if (c.smallerThan(u)) c.toString() !== u.toString() && (h = !1);
                            this.scene.cache.json.get("unitData").melee.forEach((function (t) {
                                n.push({
                                    originData: t,
                                    unitType: A.default.MELEE_UNIT_TYPE,
                                    isUnlock: t.level <= l,
                                    currentAdWatched: a[t.level - 1],
                                    targetAdWatched: !o && t.level >= s ? Et[t.level - 1] : -1,
                                    isUnitBoardFull: r,
                                    isCanBuy: 1 === t.level && h,
                                    coinNeed: u,
                                    updateDataCallback: e.updateListConfig,
                                    showAdsCallback: e.handleShowRewardedVideoAd,
                                    collectCallback: e.handleCollectUnit
                                })
                            }))
                        } else if (t === A.default.RANGED_UNIT_TYPE) {
                            var f = this.scene.player.getCustomData(vt);
                            f && "number" === typeof f || (f = 1);
                            var p = this.scene.coin.getCurrentCoins(),
                                m = new g.default(0),
                                E = !0;
                            if (i instanceof T.default) {
                                var y = i.unitManager.getPlayerRangedSpawnedUnitsCount();
                                m = i.coinManager.getUnitPrice(y)
                            }
                            if (p.smallerThan(m)) p.toString() !== m.toString() && (E = !1);
                            this.scene.cache.json.get("unitData").ranged.forEach((function (t) {
                                n.push({
                                    originData: t,
                                    unitType: A.default.RANGED_UNIT_TYPE,
                                    isUnlock: t.level <= f,
                                    currentAdWatched: a[t.level - 1],
                                    targetAdWatched: !o && t.level >= s ? Et[t.level - 1] : -1,
                                    isUnitBoardFull: r,
                                    isCanBuy: 1 === t.level && E,
                                    coinNeed: m,
                                    updateDataCallback: e.updateListConfig,
                                    showAdsCallback: e.handleShowRewardedVideoAd,
                                    collectCallback: e.handleCollectUnit
                                })
                            }))
                        }
                        return n
                    }, n.getAdWatchedCount = function (t) {
                        var e = this.scene.player.getCustomData(mt),
                            n = {},
                            i = 0;
                        if (t === A.default.MELEE_UNIT_TYPE) n = e.MELEE, i = Tt;
                        else {
                            if (t !== A.default.RANGED_UNIT_TYPE) {
                                for (var a = [], r = 0; r < i; r++) a.push(0);
                                return a
                            }
                            n = e.RANGED, i = St
                        }
                        for (var s = [], o = 0, l = u()(n); o < l.length; o++) {
                            var c = l[o],
                                h = c[0],
                                f = c[1],
                                p = d()(h);
                            if (p > i || p < 1) break;
                            s[p - 1] = f
                        }
                        return s.forEach((function (t, e) {
                            void 0 === t && (s[e] = 0)
                        })), s
                    }, n.createUnitPopup = function () {
                        this.unitPopup = new pt(this.scene), this.unitPopup.setName("UnitPopup"), this.unitPopup.onClose = this.handleCloseScreen, Phaser.Display.Align.In.Center(this.unitPopup, this, 0, -20), this.add(this.unitPopup), this.unitPopup.tabs.dinosaursBtn.onClick = this.handleSelectDinosaursTab, this.unitPopup.tabs.warriorsBtn.onClick = this.handleSelectWarriorsTab
                    }, n.runPopupAnimation = function () {
                        this.showPopupAnimation || (this.showPopupAnimation = new f.default({
                            targets: [this.unitPopup]
                        })), this.showPopupAnimation.play()
                    }, n.runFadeOutAnimation = function () {
                        var t = this;
                        this.fadeOutAnimation || (this.fadeOutAnimation = new p.default({
                            targets: [this.background],
                            duration: 200,
                            props: {
                                alpha: {
                                    start: .7,
                                    from: .7,
                                    to: 0
                                }
                            },
                            onActive: function () {
                                t.unitPopup.kill()
                            },
                            ease: Phaser.Math.Easing.Cubic.Out,
                            onComplete: function () {
                                t.background.setAlpha(.7), t.unitPopup.revive(), t.scene.screen.close(t.name)
                            }
                        })), this.fadeOutAnimation.play()
                    }, n.mergeAndGetAdWatchedCountConfig = function (t, e, n) {
                        if (void 0 === e || void 0 === n) return {
                            MELEE: {},
                            RANGED: {}
                        };
                        var i, a;
                        if (t === A.default.MELEE_UNIT_TYPE && e <= Tt && e > 0) return {
                            MELEE: (i = {}, i[e] = n, i),
                            RANGED: {}
                        };
                        if (t === A.default.RANGED_UNIT_TYPE) return {
                            MELEE: {},
                            RANGED: (a = {}, a[e] = n, a)
                        };
                        throw Error("Unknown type in Get Ad Watched Config: " + t)
                    }, e
                }(GameCore.Screen)
        },
        681: function (t, e, n) {
            "use strict";
            n.r(e);
            n(444);
            var i = n(107),
                a = n.n(i),
                r = n(50),
                s = n.n(r),
                o = function (t, e) {
                    return void 0 === e && (e = 1), a()({
                        length: Math.ceil(t.length / e)
                    }, (function (n, i) {
                        return s()(t).call(t, i * e, i * e + e)
                    }))
                },
                l = n(56),
                c = n.n(l),
                u = n(30),
                h = n.n(u),
                d = function (t, e) {
                    return c()(t).call(t, (function (t) {
                        return !h()(e).call(e, t)
                    }))
                },
                f = function (t) {
                    for (var e = t.length - 1; e > 0; e--) {
                        var n = Math.floor(Math.random() * (e + 1)),
                            i = [t[n], t[e]];
                        t[e] = i[0], t[n] = i[1]
                    }
                },
                p = n(52),
                g = n.n(p),
                v = function (t, e, n) {
                    return g()(n).call(n, t) === e && null !== t && void 0 !== t
                },
                m = function (t) {
                    return c()(t).call(t, v)
                },
                E = {
                    chunk: o,
                    difference: d,
                    shuffle: f,
                    unique: m
                },
                y = n(113),
                A = n.n(y),
                T = n(338),
                S = n.n(T),
                M = S()((function (t, e) {
                    if ("string" === typeof t) {
                        var n = e[t.toLowerCase()];
                        if ("string" === typeof n) return n
                    }
                    return "?"
                })),
                w = S()((function (t) {
                    for (var e = null, n = [], i = /:([A-Z0-9?]+)/gm; null !== (e = i.exec(t));) n.push(e[1]);
                    return n
                })),
                x = S()((function (t) {
                    for (var e = null, n = [], i = /([0-9]+[A-Z?]{1}|[A-Z?]{1})/gm; null !== (e = i.exec(t));) {
                        var a = e[0];
                        if (a.length >= 2) {
                            var r, o = a.length,
                                l = s()(a).call(a, 0, o - 1),
                                c = a[o - 1],
                                u = A()(r = new Array(+l)).call(r, c);
                            n.push.apply(n, u)
                        } else n.push(a)
                    }
                    return n
                })),
                C = function (t, e) {
                    var n = t,
                        i = GameCore.Utils.Object.invert(e),
                        a = {},
                        r = 0,
                        s = 0;
                    return w(n).forEach((function (t) {
                        r = 0, s++, a[s] || (a[s] = {}), x(t).forEach((function (t) {
                            r++, a[s][r] = M(t, i)
                        }))
                    })), a
                },
                I = S()((function (t, e) {
                    var n = e[t];
                    return "string" === typeof n ? "" + n.toUpperCase() : "?"
                })),
                b = function t(e, n, i) {
                    void 0 === i && (i = !1);
                    var a = "";
                    if (!GameCore.Utils.Valid.isObject(e)) return a;
                    var r = "",
                        o = 1;
                    for (var l in e)
                        if (GameCore.Utils.Object.hasOwn(e, l)) {
                            var c = e[l];
                            if (GameCore.Utils.Valid.isObject(c)) a += ":" + t(c, n, !0);
                            else if (GameCore.Utils.Valid.isString(c)) {
                                var u = I(c, n);
                                u === r ? (o++, a = s()(a).call(a, 0, -2)) : o = 1, a += "" + o + u, r = u
                            }
                        } return a = a.replace(/1([A-Z])/g, "$1")
                },
                R = function (t) {
                    try {
                        return atob(t)
                    } catch (e) {
                        return ""
                    }
                },
                P = {
                    decodeMap: C,
                    encodeMap: b,
                    hashToString: R,
                    stringToHash: function (t) {
                        try {
                            return btoa(t)
                        } catch (e) {
                            return ""
                        }
                    }
                },
                _ = function (t) {
                    try {
                        return JSON.parse(t)
                    } catch (e) {
                        return null
                    }
                },
                k = n(90),
                L = n.n(k),
                D = function (t) {
                    try {
                        return L()(t, null, 0)
                    } catch (e) {
                        return ""
                    }
                },
                O = function (t) {
                    return _(D(t))
                },
                N = {
                    clone: O,
                    decode: _,
                    encode: D
                },
                U = function (t) {
                    var e = "object" === typeof t || "function" === typeof t,
                        n = Array.isArray(t);
                    return null !== t && e && !n
                },
                B = function (t) {
                    return void 0 === t || null === t
                },
                F = function t(e) {
                    if (!U(e)) return e;
                    for (var n in e) {
                        B(e[n]) && delete e[n];
                        var i = e[n];
                        U(i) && (e[n] = t(i))
                    }
                    return e
                },
                G = function (t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e)
                },
                H = n(83),
                V = n.n(H),
                Y = function (t) {
                    var e = {};
                    return V()(t).forEach((function (n) {
                        if (G(t, n)) {
                            var i = t[n];
                            "string" === typeof i && (e[i] = n)
                        }
                    })), e
                },
                W = function (t, e) {
                    if (!Array.isArray(t)) return {};
                    var n = {};
                    return t.forEach((function (t) {
                        if (G(t, e)) {
                            var i = t[e];
                            "string" === typeof i && (n[i] = t)
                        }
                    })), n
                },
                K = {
                    clear: F,
                    hasOwn: G,
                    invert: Y,
                    keyBy: W
                },
                z = function (t) {
                    return t ? t[0].toUpperCase() + s()(t).call(t, 1) : t
                },
                X = function (t) {
                    var e = 0;
                    if (0 == t.length) return e;
                    for (var n = 0; n < t.length; n++) {
                        e = (e << 5) - e + t.charCodeAt(n), e &= e
                    }
                    return e
                },
                j = n(171),
                q = n.n(j),
                Z = function (t) {
                    var e;
                    return q()(e = V()(t)).call(e, (function (e, n) {
                        var i = t[n];
                        return void 0 !== i && e.push(n + "=" + i), e
                    }), []).join("&")
                },
                Q = function (t) {
                    void 0 === t && (t = "0x");
                    for (var e = t, n = 0; n < 6; n++) e += "0123456789ABCDEF" [Math.floor(16 * Math.random())];
                    return e
                },
                J = function (t, e) {
                    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*#%&!",
                        i = "",
                        a = t;
                    void 0 != e && (a -= e.length, i += e);
                    for (var r = 0; r < a; r++) {
                        var s = Math.floor(Math.random() * n.length);
                        i += n.charAt(s)
                    }
                    return i
                },
                $ = function (t) {
                    return t.normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[\u0111\u0110]/g, (function (t) {
                        return "\u0111" === t ? "d" : "D"
                    }))
                },
                tt = n(24),
                et = n.n(tt),
                nt = n(554),
                it = n.n(nt),
                at = function (t, e) {
                    var n, i = t.split(" "),
                        a = (i.length <= 1 ? et()(n = []).call(n, i) : [i[0], i.pop()]).join(" "),
                        r = it()(a).call(a, " ") || 0,
                        s = r >= 0 ? r : e;
                    return (a.length > e ? a.substring(0, s) : a).substring(0, e)
                },
                rt = n(489),
                st = n.n(rt),
                ot = {
                    capitalize: z,
                    hashCode: X,
                    params: Z,
                    toCamelCase: function (t) {
                        return t.replace(/^([a-z])|\s+([a-z])/g, (function (t, e) {
                            return e ? e.toUpperCase() : t.toLowerCase()
                        })).replace(/\s+/g, "")
                    },
                    toUpperCamelCase: function (t) {
                        return t.replace(/^([a-z])|\s+([a-z])/g, (function (t, e) {
                            return e ? e.toUpperCase() : t.toUpperCase()
                        })).replace(/\s+/g, "")
                    },
                    randomColor: Q,
                    random: J,
                    removeDiacritics: $,
                    getShortName: at,
                    generateObjectId: function (t) {
                        void 0 === t && (t = 16);
                        var e = function (e) {
                            return Math.floor(e).toString(t)
                        };
                        return e(Date.now() / 1e3) + st()(" ").call(" ", t).replace(/./g, (function () {
                            return e(Math.random() * t)
                        }))
                    }
                },
                lt = function (t) {
                    return "boolean" === typeof t
                },
                ct = function () {
                    return false
                },
                ut = function (t) {
                    return "function" === typeof t
                },
                ht = function (t) {
                    return "number" === typeof t && !isNaN(t)
                },
                dt = function (t) {
                    var e;
                    return g()(e = ["string", "number", "symbol"]).call(e, typeof t) > -1
                },
                ft = function (t) {
                    return "string" === typeof t
                },
                pt = n(46),
                gt = n.n(pt),
                vt = function (t, e, n) {
                    var i = n || {},
                        a = i.timeout,
                        r = void 0 === a ? 1e3 : a,
                        s = i.checkInterval,
                        o = void 0 === s ? 100 : s;
                    return new(gt())((function (n) {
                        var i = setInterval((function () {
                            ("function" === typeof t ? t() : t) === ("function" === typeof e ? e() : e) && (clearInterval(i), n(!0))
                        }), o);
                        r > 0 && setTimeout((function () {
                            clearInterval(i), n(!1)
                        }), r)
                    }))
                },
                mt = function (t) {
                    var e = t.scene,
                        n = t.key,
                        i = t.newKey,
                        a = e.textures.get(n).getSourceImage();
                    if (!a) return !1;
                    var r = Math.min(a.width, a.height);
                    i || e.textures.removeKey(n);
                    var s = e.textures.createCanvas(i || n, r, r),
                        o = s.context;
                    return o.beginPath(), o.arc(r / 2, r / 2, r / 2, 0, 2 * Math.PI, !1), o.clip(), s.draw((a.width - r) / 2, (a.height - r) / 2, a), !0
                },
                Et = function (t) {
                    var e = t.scene,
                        n = t.key,
                        i = t.newKey,
                        a = t.radius,
                        r = t.width,
                        s = t.height,
                        o = e.textures.get(n).getSourceImage();
                    if (!o) return !1;
                    r || (r = o.width), s || (s = o.height), i || e.textures.removeKey(n);
                    var l = e.textures.createCanvas(i || n, r, s),
                        c = l.context,
                        u = Math.min(r, s) / 100 * a / 2;
                    return c.beginPath(), c.moveTo(0 + u, 0), c.lineTo(0 + r - u, 0), c.quadraticCurveTo(0 + r, 0, 0 + r, 0 + u), c.lineTo(0 + r, 0 + s - u), c.quadraticCurveTo(0 + r, 0 + s, 0 + r - u, 0 + s), c.lineTo(0 + u, 0 + s), c.quadraticCurveTo(0, 0 + s, 0, 0 + s - u), c.lineTo(0, 0 + u), c.quadraticCurveTo(0, 0, 0 + u, 0), c.closePath(), c.clip(), l.draw(0, 0, o), !0
                },
                yt = ["", "K", "M", "B", "T", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN", "BO", "BP", "BQ", "BR"],
                At = function (t) {
                    if (g()(t).call(t, ".") < 0) return t;
                    for (var e = t.length - 1; e >= 0; e--) {
                        if ("." == t[e]) return t.substring(0, e);
                        if ("0" != t[e]) return t.substring(0, e + 1)
                    }
                    return t
                },
                Tt = function (t, e) {
                    var n = e || {},
                        i = n.fractionalDigits,
                        a = void 0 === i ? 0 : i,
                        r = n.startAbbreviate,
                        s = void 0 === r ? 1e3 : r,
                        o = n.abbreviateStep,
                        l = void 0 === o ? 3 : o,
                        c = n.maxLength,
                        u = void 0 === c ? -1 : c,
                        h = n.removeLastZero,
                        d = void 0 === h || h,
                        f = n.suffixes,
                        p = void 0 === f ? yt : f,
                        g = -1 === u ? 99999999 : u;
                    if (t >= s) {
                        var v = Math.floor(t / Math.pow(10, l)),
                            m = Math.floor((v.toString().length - 1) / l) + 1,
                            E = (t / Math.pow(Math.pow(10, l), m)).toFixed(a),
                            y = g - p[m].length,
                            A = E.substring(0, y);
                        return (d ? At(A) : A) + p[m]
                    }
                    var T = t.toFixed(a),
                        S = g - p[0].length,
                        M = T.substring(0, S);
                    return d ? At(M) : M + p[0]
                },
                St = {
                    Array: E,
                    Hash: P,
                    Json: N,
                    Object: K,
                    String: ot,
                    Valid: {
                        isBoolean: lt,
                        isDebugger: ct,
                        isFunction: ut,
                        isNumber: ht,
                        isObject: U,
                        isPropertyKey: dt,
                        isString: ft,
                        isValueChangeAsync: vt
                    },
                    Image: {
                        drawCircle: mt,
                        drawBorder: Et
                    },
                    Number: {
                        toAbbreviatedString: Tt,
                        padStart: function (t, e, n) {
                            void 0 === n && (n = "0");
                            for (var i = t.toString(), a = i.length, r = 0; r < e - a; r++) i = n + i;
                            return i
                        },
                        padEnd: function (t, e, n) {
                            void 0 === n && (n = "0");
                            for (var i = t.toString(), a = i.length, r = 0; r < e - a; r++) i += n;
                            return i
                        }
                    },
                    Device: {
                        isDesktop: function () {
                            var t = navigator.userAgent;
                            return /Windows|Mac OS/i.test(t) && !/like Mac OS/.test(t)
                        },
                        isMobile: function () {
                            var t = navigator.userAgent;
                            return /Android|iP[ao]d|iPhone/i.test(t)
                        },
                        isAndroid: function () {
                            return "ANDROID" === FBInstant.getPlatform()
                        },
                        isIOS: function () {
                            return "IOS" === FBInstant.getPlatform()
                        },
                        isMobileWeb: function () {
                            return "MOBILE_WEB" === FBInstant.getPlatform()
                        },
                        pixelRatio: function () {
                            return Math.round(window.devicePixelRatio) || 1
                        }
                    }
                },
                Mt = n(29),
                wt = n(149),
                xt = {
                    ENV: "production",
                    Ads: {
                        BannerHeight: {
                            Desktop: 50,
                            Mobile: 50
                        },
                        BannerAdOptions: [{
                            placementId: "R-A-1831893-19",
                            secondsReload: 60,
                            platform: "DESKTOP"
                        }, {
                            placementId: "R-A-1831893-20",
                            secondsReload: 60,
                            platform: "MOBILE"
                        }]
                    }
                },
                Ct = {
                    ENV: "production",
                    AppId: "195590",
                    LeadersBoard: {
                        Name: "GlobalLeaderboard",
                        LeaderboardId: null
                    },
                    Debugger: {
                        ShowConsole: !1,
                        ShowInspector: !1,
                        ShowMonitoring: !1
                    },
                    Statistics: {
                        Enable: !1,
                        ShowFPSInGame: !1,
                        ShowMemoryInGame: !1
                    },
                    Ads: {
                        Enabled: !0,
                        Mockup: {
                            Enable: !1
                        },
                        InterstitialAdOptions: {
                            secondsFirstTime: 120,
                            secondsBetweenAds: 120,
                            showWhenStartGame: !0
                        }
                    }
                },
                It = {
                    ENV: "development",
                    AppId: "527305895544198",
                    ApiHost: "https://fbig-singleplay-apps-dev.sunstudio.io",
                    ApiNotificationHost: "https://notifications.sunstudio.io",
                    OtherHost: "https://leaderboards-dev.sunstudio.io",
                    PlayerMock: {
                        id: "",
                        signature: ""
                    },
                    OpponentMock: {
                        id: "",
                        signature: ""
                    },
                    MatchMockFailRate: 5,
                    Gameplay: {
                        StartLevel: 1,
                        StartCoins: 6,
                        DelayFinishGame: 1700,
                        HintWaitTime: 5e3,
                        Powers: {
                            FreeCoins: {
                                enable: !0,
                                duration: 18e4
                            }
                        },
                        MaxLevel: 1598,
                        MaximumMeleeLevel: 11,
                        MaximumRangedLevel: 11,
                        CheaterIds: [],
                        ChallengeFriends: {
                            activePerLevel: 2,
                            maxActiveCount: 1
                        }
                    },
                    Tutorial: {
                        ForceUseTutorial: !1,
                        NumberOfTutorial: {
                            GuideOne: 1,
                            GuideTwo: 1,
                            GuidePrevent: -1,
                            GuideThree: 1
                        }
                    },
                    PlayerDataStore: "playerData",
                    Game: {
                        ForcePixelRatio: 0
                    },
                    Debugger: {
                        ShowInspector: !1,
                        ShowMonitoring: !1,
                        ShowConsole: !1,
                        Expanded: !1,
                        AutoRefresh: !0,
                        InspectorAutoUpdate: !0,
                        Opacity: .8
                    },
                    Statistics: {
                        Enable: !1,
                        DisplayMode: 0,
                        FPS: !0,
                        MS: !0,
                        MB: !0,
                        Opacity: .8,
                        ShowFPSInGame: !0,
                        ShowMemoryInGame: !1
                    },
                    ParticleEditor: {
                        Enable: !1,
                        Opacity: .8,
                        Expanded: !0
                    },
                    LevelBuilder: {
                        Enable: !1,
                        Opacity: .8,
                        Expanded: !1
                    },
                    OfflineReward: {
                        Enable: !0,
                        ValuePerMinute: 1,
                        MinimumTimeToActive: 36e5,
                        LevelScalingModifier: 1.12
                    },
                    Match: {
                        MaxRescueCount: 1,
                        RescueGamePopupTimeout: 15,
                        ContinueSingleMatchEnabled: !1,
                        SingleMatchStore: "singleMatch",
                        LocalSingleMatchDefault: {
                            _id: "12345678890",
                            status: "open",
                            playerId: "",
                            score: 0,
                            level: 1,
                            startedAt: 0,
                            updateAt: 0,
                            finishAt: 0,
                            data: {}
                        }
                    },
                    DailyRewards: {
                        MaxDays: 6,
                        MockTime: 0,
                        CheckInterrupt: !0
                    },
                    DailyTasks: {
                        Duration: 86400
                    },
                    Tournament: {
                        UseMock: !1,
                        ForcePlay: !1,
                        UseLeaderboard: !1,
                        TournamentContextIds: []
                    },
                    Battle: {
                        UseMock: !1,
                        RankingDevTest: !1
                    },
                    LeadersBoard: {
                        Name: null,
                        UseMock: !1,
                        Prefix: "leaderboards",
                        LeaderboardId: "62f5bc51b2198c615726a9a1",
                        Limit: 50
                    },
                    EnableEffectSceneTransition: !1,
                    Ads: {
                        Enabled: !0,
                        InterstitialPlacementId: "",
                        VideoRewardsPlacementId: "",
                        BannerPlacementId: "",
                        BannerReloadPeriod: 60,
                        BannerHeight: {
                            Desktop: 70,
                            Mobile: 50
                        },
                        Mockup: {
                            Enable: !1,
                            ErrorRate: 5,
                            GiphyApiKey: ""
                        },
                        InterstitialAdOptions: {
                            showWhenStartGame: !1,
                            secondsFirstTime: 120,
                            secondsBetweenAds: 120
                        },
                        BannerAdOptions: []
                    },
                    Network: {
                        MaximumRequest: 6,
                        Timeout: 15e3,
                        Retries: 3
                    },
                    Analytics: {
                        GoogleAnalytics: {
                            consoleLog: !1
                        }
                    },
                    Sentry: {
                        errorCodes: {
                            accepted: [],
                            ignored: ["USER_INPUT", "NETWORK_FAILURE"]
                        },
                        errorMessages: {
                            accepted: [],
                            ignored: ["Load image failed", "Request failed to be processed", "Failed to fetch", "reading 'renderList'", "reading 'skeletonData'"]
                        }
                    },
                    Performance: {
                        Enable: !1,
                        trackingSceneKeys: ["DASHBOARD_SCENE", "GAME_SCENE"],
                        minQuality: 1,
                        maxQuality: 2,
                        fpsThreshold: 48,
                        checkInterval: 2e3,
                        qualityAdjustStep: .1,
                        autoUpgradeQuality: !0,
                        onlyUpdateWhenSwitchScene: !0
                    },
                    Rollbar: {
                        Enable: !1,
                        UseMockup: !1,
                        FilterError: {
                            Codes: {
                                accepted: [],
                                ignored: ["USER_INPUT", "NETWORK_FAILURE"]
                            },
                            Messages: {
                                accepted: [],
                                ignored: ["Load image failed", "Request failed to be processed", "Failed to fetch", "reading 'renderList'", "reading 'skeletonData'"]
                            }
                        },
                        ListPlayerDevIds: []
                    },
                    UnitsConfig: {
                        MELEE: {
                            listLevelsUseSprite: []
                        },
                        RANGED: {
                            listLevelsUseSprite: []
                        }
                    }
                };
            It = (0, wt.merge)((0, Mt.default)({}, It), Ct);
            var bt = It = (0, wt.merge)((0, Mt.default)({}, It), xt),
                Rt = n(191),
                Pt = n.n(Rt),
                _t = function (t) {
                    return function (e) {
                        try {
                            var n = window.game,
                                i = e.module,
                                a = n.scene.getScenes(!0),
                                r = Pt()(a).call(a, (function (e) {
                                    return e.scene.key === t
                                }));
                            if (!r) return;
                            var s = i.default;
                            n.scene.remove(t), n.scene.add(t, s, !0), n.scene.bringToTop(n.globalScene)
                        } catch (l) {
                            var o;
                            null == (o = void 0) || o.invalidate()
                        }
                    }
                },
                kt = n(690),
                Lt = n.n(kt),
                Dt = n(692),
                Ot = n.n(Dt),
                Nt = n(694),
                Ut = n.n(Nt),
                Bt = n(339),
                Ft = !1,
                Gt = function t(e, n, i) {
                    n.forEach((function (n) {
                        if (n.name) {
                            var a = null;
                            if (a = i ? i.getByName(n.name) : e.children.getByName(n.name)) {
                                if ("Container" === n.type) {
                                    var r = a,
                                        s = n.getAll();
                                    if (t(e, s, r), r.freezeContainer) return
                                }
                                var o = Lt()(n),
                                    l = ["_events", "_sysEvents", "input", "localTransform", "list", "displayList", "frame"],
                                    u = c()(o).call(o, (function (t) {
                                        if ("string" !== typeof t) return !1;
                                        if (g()(l).call(l, t) >= 0) return !1;
                                        if (!a) return !1;
                                        var e = Ot()(n, t);
                                        return !(e instanceof Function) && (!(e instanceof Phaser.Scene) && (!(e instanceof Phaser.GameObjects.Group) && (!(e instanceof Phaser.GameObjects.GameObject) && e !== Ot()(a, t))))
                                    }));
                                u.length < 1 || u.forEach((function (t) {
                                    if (a) {
                                        var e = Ot()(n, t);
                                        Ot()(a, t), Ut()(a, t, e)
                                    }
                                }))
                            }
                        }
                    }))
                },
                Ht = function (t, e) {
                    return void 0 === e && (e = Ft),
                        function (n) {
                            try {
                                var i = window.game,
                                    a = n.module;
                                Ft = e;
                                var r = i.scene.getScenes(!0),
                                    s = Pt()(r).call(r, (function (e) {
                                        return e.scene.key === t
                                    }));
                                if (!s) return;
                                var o = a.default,
                                    l = t + "-draft";
                                i.scene.remove(l);
                                var c = i.scene.add(l, o);
                                c.events.once(Phaser.Scenes.Events.RENDER, (0, Bt.debounce)((function () {
                                    var t = c.children.getAll();
                                    Gt(s, t), i.scene.remove(l)
                                })), 50), i.scene.run(l), i.scene.bringToTop(s), i.scene.bringToTop(i.globalScene)
                            } catch (u) {}
                        }
                },
                Vt = {
                    Configs: bt,
                    Utils: St,
                    LiveUpdate: {
                        Scene: _t,
                        SceneObjects: Ht
                    }
                };
            window.GameCore = Vt;
            var Yt = n(110),
                Wt = n(340),
                Kt = n(9),
                zt = n(0),
                Xt = n(5),
                jt = n.n(Xt),
                qt = n(572),
                Zt = function () {
                    function t(t) {
                        this.game = void 0, this.game = t
                    }
                    var e = t.prototype;
                    return e.addKillRevive = function () {
                        var t = this;
                        [Phaser.GameObjects.RenderTexture, Phaser.GameObjects.Container, Phaser.GameObjects.Group, Phaser.GameObjects.Image, Phaser.GameObjects.Sprite, Phaser.GameObjects.Graphics, Phaser.GameObjects.Shape, Phaser.GameObjects.Text, Phaser.GameObjects.BitmapText, Phaser.GameObjects.Particles.ParticleEmitter, Phaser.GameObjects.Particles.ParticleEmitterManager].forEach((function (e) {
                            e.prototype.kill = t.kill, e.prototype.revive = t.revive
                        }))
                    }, e.addSetWorldSize = function () {
                        var t = this;
                        [Phaser.GameObjects.RenderTexture, Phaser.GameObjects.Image, Phaser.GameObjects.Sprite].forEach((function (e) {
                            e.prototype.setWorldSize = t.setWorldSize
                        }))
                    }, e.addSetWorldSizeForContainer = function () {
                        var t = this;
                        [Phaser.GameObjects.Container].forEach((function (e) {
                            e.prototype.setWorldSize = t.setWorldSizeForContainer
                        }))
                    }, e.addGetWorldPosition = function () {
                        var t = this;
                        [Phaser.GameObjects.RenderTexture, Phaser.GameObjects.Container, Phaser.GameObjects.Image, Phaser.GameObjects.Sprite, Phaser.GameObjects.Graphics, Phaser.GameObjects.Shape, Phaser.GameObjects.Text, Phaser.GameObjects.BitmapText].forEach((function (e) {
                            e.prototype.getWorldPosition = t.getWorldPosition
                        }))
                    }, e.addDrawDebugBox = function () {
                        var t = this;
                        [Phaser.GameObjects.RenderTexture, Phaser.GameObjects.Container, Phaser.GameObjects.Image, Phaser.GameObjects.Sprite, Phaser.GameObjects.Graphics, Phaser.GameObjects.Shape, Phaser.GameObjects.Text, Phaser.GameObjects.BitmapText, Phaser.GameObjects.Zone].forEach((function (e) {
                            e.prototype.drawDebugBox = t.drawDebugBox
                        }))
                    }, e.addHighQuality = function () {
                        var t = this;
                        [Phaser.GameObjects.Text].forEach((function (e) {
                            e.prototype.setHighQuality = t.setHighQuality
                        }))
                    }, e.kill = function () {
                        this.setActive(!1), this.setVisible(!1)
                    }, e.revive = function () {
                        this.setActive(!0), this.setVisible(!0)
                    }, e.setWorldSize = function (t, e) {
                        this.setSize(t, e), this.setDisplaySize(t, e)
                    }, e.setWorldSizeForContainer = function (t, e, n) {
                        void 0 === n && (n = 2), this.setSize(t * n, e * n), this.setDisplaySize(t, e)
                    }, e.getWorldPosition = function () {
                        var t = this.getWorldTransformMatrix().decomposeMatrix();
                        return {
                            x: t.translateX,
                            y: t.translateY
                        }
                    }, e.drawDebugBox = function (t, e) {
                        var n = this.x,
                            i = this.y,
                            a = this.width,
                            r = this.height,
                            s = this.depth,
                            o = this.originX,
                            l = this.originY,
                            c = this.scene.add.rectangle(n, i, a, r, t, e);
                        c.setName("Debug Box"), c.setDepth(s);
                        var u = GameCore.Utils.Valid.isNumber;
                        return u(o) && u(l) && c.setOrigin(o, l), c
                    }, e.setHighQuality = function () {
                        return this.renderer instanceof Phaser.Renderer.WebGL.WebGLRenderer ? this.setResolution(2 * this.scene.game.world.getZoomRatio()) : this
                    }, t
                }(),
                Qt = Zt,
                Jt = GameCore.Configs.Ads.Mockup.GiphyApiKey,
                $t = function () {
                    function t() {}
                    return t.loadBannerAdAsync = function (t, e) {
                        var n = this;
                        return new(gt())((function (i, a) {
                            window.yaContextCb = window.yaContextCb || [];
                            var r = document.getElementById("yandexAdContextScript");
                            r || ((r = document.createElement("script")).src = "", r.async = !0, document.head.appendChild(r));
                            var s = "yandex_rtb_wrapper_" + t,
                                o = "yandex_rtb_" + t,
                                l = document.getElementById(s);
                            if (!l) {
                                // (l = document.createElement("div")).id = s, document.body.appendChild(l), l.style.display = "block", l.style.position = "fixed", l.style.zIndex = "10000";
                                // var c = document.createElement("div");
                                // c.id = o, c.classList.add("yandex-adaptive"), c.style.display = "block", l.appendChild(c)
                            }
                            n.setBannerAdSize(t, e || {}), n.getAdContentAsync().then((function (t) {
                                var e = document.getElementById("mock-banner-ads");
                                e || ((e = document.createElement("img")).id = "mock-banner-ads", e.style.cssText = "height: 100%; width: 100%; background-color: white; position: absolute;", l.childNodes[0].appendChild(e)), e.src = t, i()
                            })).catch(a)
                        }))
                    }, t.setBannerAdSize = function (t, e) {
                        var n = e || {},
                            i = n.bannerHeight,
                            a = void 0 === i ? 50 : i,
                            r = n.bannerWidth,
                            s = void 0 === r ? 320 : r,
                            o = "yandex_rtb_wrapper_" + t,
                            l = "yandex_rtb_" + t,
                            c = document.getElementById(o),
                            u = document.getElementById(l);
                        if (c && u) {
                            var h = document.body.clientWidth;
                            c.style.top = "", c.style.bottom = "0px", c.style.left = (h - s) / 2 + "px", c.style.margin = "auto", c.style.height = a + "px", c.style.width = s + "px", u.style.height = a + "px", u.style.width = s + "px"
                        }
                    }, t.hideBannerAdAsync = function () {
                        return new(gt())((function (t) {
                            document.querySelectorAll('div[id^="yandex_rtb_wrapper_"]').forEach((function (t) {
                                var e = t;
                                e.style.bottom = "", e.style.top = "-" + e.style.height
                            })), t()
                        }))
                    }, t.getAdContentAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, n, i, a, r;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = "https://api.giphy.com/v1/gifs/trending?api_key=" + Jt + "&rate=pg&bundle=low_bandwidth", t.next = 3, fetch(e, {
                                            method: "GET"
                                        });
                                    case 3:
                                        return n = t.sent, t.next = 6, n.json();
                                    case 6:
                                        if (i = t.sent, GameCore.Utils.Valid.isObject(i)) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.abrupt("return", "");
                                    case 9:
                                        return a = i.data, r = Math.floor(Math.random() * a.length), t.abrupt("return", a[r].images.downsized.url);
                                    case 12:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), t
                }();
            $t.bannerAdOptions = {};
            var te, ee = {
                LOADED: "loaded",
                DISPLAYED: "displayed"
            };
            ! function (t) {
                t.IDLE = "idle", t.LOADING = "loading", t.FILLED = "filled", t.SHOWING = "showing"
            }(te || (te = {}));
            var ne, ie = te;
            ! function (t) {
                t.REWARDED = "rewarded", t.INTERSTITIAL = "interstitial"
            }(ne || (ne = {}));
            var ae = ne,
                re = n(47),
                se = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, n) || this).code = void 0, i.code = e, i.message = n, i
                    }
                    return (0, zt.default)(e, t), e
                }((0, re.default)(Error)),
                oe = function (t) {
                    this.type = void 0, this.status = void 0, this.type = t, this.status = ie.IDLE
                };
            GameCore.Ads = {
                Types: ae,
                Status: ie,
                Events: ee,
                AdError: se,
                AdInstance: oe
            };
            var le = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).events = void 0, n.enabled = void 0, n.config = void 0, n.lastAdShownTime = void 0, n.interstitial = void 0, n.rewardedVideo = void 0, n.reloadBannerAdIntervals = void 0, n.bannerAdSizeOptions = void 0, n.showingBannerAd = {}, n.updateSizeBannerAd = function () {
                            try {
                                var t = n.config.bannerAdOptions,
                                    e = n.getCorrectBannerAdSizeOption(n.bannerAdSizeOptions);
                                t.forEach((function (t) {
                                    n.showingBannerAd[t.placementId] && (GameCore.Configs.Ads.Mockup.Enable ? $t.setBannerAdSize(t.placementId, e) : GameSDK.setBannerAdSize(t.placementId, e))
                                }))
                            } catch (i) {}
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.events = new Phaser.Events.EventEmitter, this.lastAdShownTime = 0, this.addEventUpdateSizeBannerAd()
                    }, n.configure = function (t, e) {
                        this.enabled = e.enabled, this.config = e, this.setAdInstance(t)
                    }, n.setAdInstance = function (t) {
                        var e = this.config,
                            n = e.interstitialPID,
                            i = e.rewardedVideoPID;
                        this.interstitial = new t(ae.INTERSTITIAL, n), this.rewardedVideo = new t(ae.REWARDED, i)
                    }, n.preloadInterstitialAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.preloadAdAsync(ae.INTERSTITIAL);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.showInterstitialAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (this.canbeShowInterstitialAd()) {
                                            t.next = 2;
                                            break
                                        }
                                        throw new se("INTERSTITIAL_AD_CAN_NOT_SHOW", "Can't show interstitial ad");
                                    case 2:
                                        return t.next = 4, this.showAdAsync(ae.INTERSTITIAL);
                                    case 4:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.preloadRewardedVideoAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.preloadAdAsync(ae.REWARDED);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.showRewardedVideoAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, this.showAdAsync(ae.REWARDED);
                                    case 2:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.preloadAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (this.enabled) {
                                            t.next = 2;
                                            break
                                        }
                                        throw new se("ADS_NOT_ENABLED", "Ads is't enabled");
                                    case 2:
                                        if (null !== (n = this.getAdInstanceByType(e))) {
                                            t.next = 5;
                                            break
                                        }
                                        throw new se("AD_INSTANCE_NOT_INITIALTED", "The instance ads not yet initiated");
                                    case 5:
                                        return t.next = 7, n.loadAsync();
                                    case 7:
                                        this.events.emit(ee.LOADED, e);
                                    case 8:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.showAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (this.enabled) {
                                            t.next = 2;
                                            break
                                        }
                                        throw new se("ADS_NOT_ENABLED", "Ads is't enabled");
                                    case 2:
                                        if (null !== (n = this.getAdInstanceByType(e))) {
                                            t.next = 5;
                                            break
                                        }
                                        throw new se("AD_INSTANCE_NOT_INITIALTED", "The instance ads not yet initiated");
                                    case 5:
                                        return e === ae.INTERSTITIAL && (this.lastAdShownTime = window.performance.now() / 1e3), t.next = 8, n.showAsync();
                                    case 8:
                                        this.events.emit(ee.DISPLAYED, e);
                                    case 9:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.getAdStatus = function (t) {
                        var e = this.getAdInstanceByType(t);
                        return e ? e.getStatus() : null
                    }, n.getAdInstanceByType = function (t) {
                        switch (t) {
                            case ae.INTERSTITIAL:
                                return this.interstitial;
                            case ae.REWARDED:
                                return this.rewardedVideo;
                            default:
                                return null
                        }
                    }, n.canbeShowInterstitialAd = function () {
                        return this.canbeShowInterstitialAdByTime()
                    }, n.canbeShowInterstitialAdByTime = function () {
                        var t = window.performance.now() / 1e3,
                            e = this.config.interstitialAdOptions,
                            n = e.secondsFirstTime,
                            i = e.secondsBetweenAds,
                            a = Math.floor(t - this.lastAdShownTime);
                        return this.lastAdShownTime > 0 ? a > i : a > n
                    }, n.showBannerAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n, i, a, r = this;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return this.reloadBannerAdIntervals = this.reloadBannerAdIntervals || {}, n = this.config.bannerAdOptions, i = GameSDK.getPlatform(), a = "WEB" == i, n.forEach((function (t) {
                                            var n = t.platform;
                                            if ("ALL" == n || "DESKTOP" == n && a || "MOBILE" == n && !a) {
                                                r.bannerAdSizeOptions = e || {};
                                                var i = t.placementId,
                                                    s = t.secondsReload;
                                                if (i && "" != i) {
                                                    if (s > 0) {
                                                        if (r.reloadBannerAdIntervals[i]) return;
                                                        return r.loadBannerAdAsync(i), void(r.reloadBannerAdIntervals[i] = setInterval((function () {
                                                            r.loadBannerAdAsync(i)
                                                        }), 1e3 * s))
                                                    }
                                                    r.loadBannerAdAsync(i)
                                                }
                                            }
                                        })), t.abrupt("return");
                                    case 6:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.getCorrectBannerAdSizeOption = function (t) {
                        var e = this.game.canvas.offsetWidth,
                            n = t || {},
                            i = n.bannerWidth,
                            a = void 0 === i ? 0 : i,
                            r = n.bannerHeight,
                            s = void 0 === r ? 0 : r;
                        if (this.game.world) {
                            var o = this.game.world,
                                l = o.getZoomRatio(),
                                c = o.getPixelRatio();
                            a = a ? o.getPhysicPixels(a, l / c) : e, s = s ? o.getPhysicPixels(s, l / c) : 50
                        }
                        return {
                            bannerWidth: a,
                            bannerHeight: s
                        }
                    }, n.loadBannerAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n, i;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, n = GameCore.Configs.Ads, i = this.getCorrectBannerAdSizeOption(this.bannerAdSizeOptions), !n.Mockup.Enable) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.next = 7, $t.loadBannerAdAsync(e, i);
                                    case 7:
                                        t.next = 11;
                                        break;
                                    case 9:
                                        return t.next = 11, GameSDK.loadBannerAdAsync(e, i);
                                    case 11:
                                        this.showingBannerAd[e] = !0, t.next = 17;
                                        break;
                                    case 14:
                                        t.prev = 14, t.t0 = t.catch(0);
                                    case 17:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 14]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.addEventUpdateSizeBannerAd = function () {
                        window.addEventListener("resize", this.updateSizeBannerAd)
                    }, n.hideBannerAdAsync = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e = this;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (this.config.bannerAdOptions.forEach((function (t) {
                                                var n = t.placementId,
                                                    i = e.reloadBannerAdIntervals[n];
                                                i && (clearInterval(i), e.reloadBannerAdIntervals[n] = null), e.showingBannerAd[n] = !1
                                            })), t.prev = 2, !GameCore.Configs.Ads.Mockup.Enable) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.next = 7, $t.hideBannerAdAsync();
                                    case 7:
                                        t.next = 11;
                                        break;
                                    case 9:
                                        return t.next = 11, GameSDK.hideBannerAdAsync();
                                    case 11:
                                        t.next = 16;
                                        break;
                                    case 13:
                                        t.prev = 13, t.t0 = t.catch(2);
                                    case 16:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [2, 13]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getBannerHeight = function () {
                        var t = this.getCorrectBannerAdSizeOption(this.bannerAdSizeOptions);
                        if (this.game.world) {
                            var e = this.game.world,
                                n = e.getZoomRatio(),
                                i = e.getPixelRatio();
                            return this.game.world.getPhysicPixels(t.bannerHeight, i / n)
                        }
                        return 50
                    }, e
                }(Phaser.Plugins.BasePlugin),
                ce = le,
                ue = function () {
                    function t(t, e, n) {
                        this.name = void 0, this.color = void 0, this.selfLog = void 0, this.options = void 0, this.name = t, this.color = n || "#FFF", this.options = e, this.selfLog = !0
                    }
                    var e = t.prototype;
                    return e.event = function (t, e, n) {
                        this.processEvent(t, e, n), this.selfLog
                    }, e.pageview = function (t) {
                        var e = this.getPageByKey(t);
                        this.processPageView(e), this.selfLog
                    }, e.setTrafficSource = function (t) {
                        this.processTrafficSource(t), this.selfLog
                    }, e.levelStart = function (t, e) {
                        this.processLevelStart(t, e), this.selfLog
                    }, e.levelFail = function (t, e, n) {
                        this.processLevelFail(t, e, n), this.selfLog
                    }, e.levelRescue = function (t, e) {
                        this.processLevelRescue(t, e), this.selfLog
                    }, e.levelComplete = function (t, e, n) {
                        this.processLevelComplete(t, e, n), this.selfLog
                    }, e.showInterstitialAd = function (t) {
                        this.processShowInterstitialAd(t), this.selfLog
                    }, e.showRewardedVideoAd = function (t) {
                        this.processShowRewardedVideoAd(t), this.selfLog
                    }, e.receiveReward = function (t) {
                        this.processReceiveReward(t), this.selfLog
                    }, e.showAdFail = function (t, e, n) {
                        this.processShowAdFail(t, e, n), this.selfLog
                    }, e.getPageByKey = function (t) {
                        var e = t.replace(/_/g, "-");
                        return e = e.toLowerCase()
                    }, t
                }();
            GameCore.Analytics = {
                BaseAnalytics: ue
            };
            var he = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).analytics = void 0, n.pageview = function (t) {
                            n.isActive() && n.analytics.forEach((function (e) {
                                e.pageview(t)
                            }))
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.analytics = []
                    }, n.add = function (t) {
                        this.analytics.push(t)
                    }, n.setTrafficSource = function (t) {
                        this.isActive() && this.analytics.forEach((function (e) {
                            e.setTrafficSource(t)
                        }))
                    }, n.event = function (t, e, n) {
                        this.isActive() && this.analytics.forEach((function (i) {
                            i.event(t, e, n)
                        }))
                    }, n.levelStart = function (t, e) {
                        this.isActive() && this.analytics.forEach((function (n) {
                            n.levelStart(t, e)
                        }))
                    }, n.levelRescue = function (t, e) {
                        this.isActive() && this.analytics.forEach((function (n) {
                            n.levelRescue(t, e)
                        }))
                    }, n.levelFail = function (t, e, n) {
                        this.isActive() && this.analytics.forEach((function (i) {
                            i.levelFail(t, e, n)
                        }))
                    }, n.levelComplete = function (t, e, n) {
                        this.isActive() && this.analytics.forEach((function (i) {
                            i.levelComplete(t, e, n)
                        }))
                    }, n.showInterstitialAd = function (t) {
                        this.isActive() && this.analytics.forEach((function (e) {
                            e.showInterstitialAd(t)
                        }))
                    }, n.showRewardedVideoAd = function (t) {
                        this.isActive() && this.analytics.forEach((function (e) {
                            e.showRewardedVideoAd(t)
                        }))
                    }, n.receiveReward = function (t) {
                        this.isActive() && this.analytics.forEach((function (e) {
                            e.receiveReward(t)
                        }))
                    }, n.showAdFail = function (t, e, n) {
                        this.isActive() && this.analytics.forEach((function (i) {
                            i.showAdFail(t, e, n)
                        }))
                    }, n.isActive = function () {
                        return this.analytics.length >= 1
                    }, e
                }(Phaser.Plugins.BasePlugin),
                de = he,
                fe = {
                    BACKGROUND: {
                        KEY: "background",
                        FILE: "./assets/music/bg_music.mp3"
                    },
                    EFFECTS_FILES: {
                        "start-game-sound": "./assets/sounds/start-game-sound.mp3",
                        "next-round-effect": "./assets/sounds/next-round-effect.mp3",
                        "lose-sound": "./assets/sounds/lose-sound.mp3",
                        "thunder-sound": "./assets/sounds/thunder-sound.mp3",
                        "close-click": "./assets/sounds/close-click.mp3",
                        "button-click": "./assets/sounds/button-click.mp3",
                        "drag-unit-end": "./assets/sounds/drag-unit-end.mp3",
                        "drag-unit-start": "./assets/sounds/drag-unit-start.mp3",
                        "start-battle": "./assets/sounds/start-battle.mp3",
                        "melee-attack": "./assets/sounds/melee-attack.mp3",
                        "arrow-shoot": "./assets/sounds/arrow-shoot.mp3",
                        "win-battle": "./assets/sounds/win-battle.mp3",
                        "unit-damaged": "./assets/sounds/unit-damaged.mp3",
                        "unit-merge": "./assets/sounds/unit-merge.mp3",
                        "turn-switch": "./assets/sounds/turn-switch.mp3",
                        "unit-unlock": "./assets/sounds/unit-unlock.mp3",
                        "coin-spawn": "./assets/sounds/coin-spawn.mp3",
                        "coin-increase-repeatedly": "./assets/sounds/coin-increase-repeatedly.mp3",
                        "gift-charge": "./assets/sounds/gift-charge.mp3",
                        "gift-explode": "./assets/sounds/gift-explode.mp3",
                        "gift-reveal": "./assets/sounds/gift-reveal.mp3"
                    }
                },
                pe = n(125),
                ge = n.n(pe),
                ve = fe.EFFECTS_FILES,
                me = function () {
                    function t(t) {
                        var e = this;
                        this.game = void 0, this.audios = void 0, this.volume = void 0, this.isMusicEnabled = function () {
                            return !!e.game.player.getPlayerSetting("music")
                        }, this.isSoundEnabled = function () {
                            return !!e.game.player.getPlayerSetting("sound")
                        }, this.game = t, this.audios = new(ge())
                    }
                    var e = t.prototype;
                    return e.play = function (t, e) {
                        var n = this,
                            i = (0, Mt.default)({
                                volume: this.volume
                            }, e || {});
                        i.volume !== this.volume && (i.volume *= this.volume);
                        var a = this.audios.get(t);
                        a ? a.play(void 0, i) : (this.game.globalScene.load.audio(t, ve[t]), this.game.globalScene.load.on(Phaser.Loader.Events.FILE_KEY_COMPLETE + "audio-" + t, (function () {
                            var e = n.game.sound.add(t);
                            n.audios.set(t, e), e.play(void 0, i)
                        })), this.game.globalScene.load.start())
                    }, e.pause = function (t) {
                        var e = this.audios.get(t);
                        e && e.pause()
                    }, e.stop = function (t) {
                        var e = this.audios.get(t);
                        e && e.stop()
                    }, e.setVolume = function (t) {
                        this.volume = t
                    }, t
                }(),
                Ee = me,
                ye = function () {
                    function t(t, e, n) {
                        var i = this;
                        this.name = void 0, this.game = void 0, this.isSprite = void 0, this.audio = void 0, this.markers = void 0, this.volume = void 0, this.volumePerMs = void 0, this.targetVolume = void 0, this.handleIncreaseVolume = function (t, e) {
                            var n;
                            i.volume += i.volumePerMs * e, null == (n = i.audio) || n.setVolume(i.volume), (i.volumePerMs >= 0 && i.volume >= i.targetVolume || i.volumePerMs <= 0 && i.volume <= i.targetVolume) && (i.volume = i.targetVolume, i.game.globalScene.events.off(Phaser.Scenes.Events.UPDATE, i.handleIncreaseVolume))
                        }, this.isMusicEnabled = function () {
                            return !!i.game.player.getPlayerSetting("music")
                        }, this.isSoundEnabled = function () {
                            return !!i.game.player.getPlayerSetting("sound")
                        }, this.name = e, this.game = t, this.markers = {}, this.isSprite = n, this.volume = 0, this.isSprite || (this.audio = this.game.sound.add(this.name))
                    }
                    var e = t.prototype;
                    return e.play = function (t, e) {
                        var n, i, a, r = (0, Mt.default)({
                            volume: this.volume
                        }, e || {});
                        if (r.volume !== this.volume && (r.volume *= this.volume), !this.isSprite) return (null == (i = this.audio) ? void 0 : i.seek) > 0 ? void this.audio.resume() : void(null == (a = this.audio) || a.play(t, r));
                        this.createMaker(t), null == (n = this.markers[t]) || n.play(t, r)
                    }, e.pause = function (t) {
                        var e, n;
                        this.isSprite ? null == (e = this.markers[t]) || e.pause() : null == (n = this.audio) || n.pause()
                    }, e.stop = function (t) {
                        var e, n;
                        this.isSprite ? null == (e = this.markers[t]) || e.stop() : null == (n = this.audio) || n.stop()
                    }, e.setVolume = function (t, e) {
                        var n;
                        if (0 === e || t === this.volume) return this.game.globalScene.events.off(Phaser.Scenes.Events.UPDATE, this.handleIncreaseVolume), this.volume = t, void(null == (n = this.audio) || n.setVolume(t));
                        this.volumePerMs = (t - this.volume) / e, this.targetVolume = t, this.game.globalScene.events.off(Phaser.Scenes.Events.UPDATE, this.handleIncreaseVolume), this.game.globalScene.events.on(Phaser.Scenes.Events.UPDATE, this.handleIncreaseVolume)
                    }, e.createMaker = function (t) {
                        if (!this.markers[t]) try {
                            this.markers[t] = this.game.sound.addAudioSprite(this.name)
                        } catch (e) {}
                    }, t
                }(),
                Ae = ye,
                Te = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).soundManager = void 0, n.musicManager = void 0, n.isMuteAll = void 0, n.initMusic = function (t) {
                            n.musicManager = new Ae(n.game, t, !1), n.setMusicVolume(n.isMuteAll ? 0 : 1, 3e3)
                        }, n.initSound = function () {
                            n.soundManager = new Ee(n.game), n.setSoundVolume(n.isMuteAll ? 0 : 1)
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.playSound = function (t, e) {
                        try {
                            if (!this.soundManager || this.isMuteAll) return;
                            if (!this.soundManager.isSoundEnabled()) return;
                            this.soundManager.play(t, e)
                        } catch (n) {}
                    }, n.stopSound = function (t) {
                        try {
                            this.soundManager.stop(t)
                        } catch (e) {}
                    }, n.playMusic = function (t) {
                        void 0 === t && (t = {});
                        try {
                            if (!this.musicManager || this.isMuteAll) return;
                            if (!this.musicManager.isMusicEnabled()) return;
                            this.musicManager.play("", (0, Mt.default)({
                                loop: !0,
                                volume: .4
                            }, t))
                        } catch (e) {}
                    }, n.pauseMusic = function () {
                        try {
                            if (!this.musicManager) return;
                            this.musicManager.pause("")
                        } catch (t) {}
                    }, n.stopMusic = function () {
                        try {
                            if (!this.musicManager) return;
                            this.musicManager.stop("")
                        } catch (t) {}
                    }, n.setSoundVolume = function (t) {
                        try {
                            if (!this.soundManager) return;
                            this.soundManager.setVolume(t)
                        } catch (e) {}
                    }, n.setMusicVolume = function (t, e) {
                        void 0 === e && (e = 0);
                        try {
                            if (!this.musicManager) return;
                            this.musicManager.setVolume(t, e)
                        } catch (n) {}
                    }, n.muteAll = function () {
                        this.isMuteAll = !0, this.setMusicVolume(0), this.setSoundVolume(0)
                    }, n.unmuteAll = function (t) {
                        void 0 === t && (t = 1), this.isMuteAll = !1, this.setMusicVolume(t), this.setSoundVolume(t)
                    }, e
                }(Phaser.Plugins.BasePlugin),
                Se = Te,
                Me = n(73),
                we = "AUTH_TOKEN_REQUEST",
                xe = "AUTH_TOKEN_RECEIVED",
                Ce = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).payload = void 0, i.name = "RequestTokenFail", i.message = e || "Request token fail", i.payload = n || {}, i
                    }
                    return (0, zt.default)(e, t), e
                }((0, re.default)(Error)),
                Ie = n(91),
                be = (0, Ie.createSelector)([function (t) {
                    return t.auth.token
                }], (function (t) {
                    return t
                })),
                Re = (0, Ie.createSelector)([function (t) {
                    return t.auth.isRequesting
                }], (function (t) {
                    return t
                })),
                Pe = function (t) {
                    return {
                        type: xe,
                        payload: {
                            token: t
                        }
                    }
                },
                _e = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.requestToken = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = this.game.storage, t.next = 3, e.dispatch(function () {
                                            var t = (0, Kt.default)(jt().mark((function t(e, n) {
                                                var i, a, r, s;
                                                return jt().wrap((function (t) {
                                                    for (;;) switch (t.prev = t.next) {
                                                        case 0:
                                                            if (t.prev = 0, i = window.game.facebook, a = n(), r = be(a), !Re(a) && "" === r) {
                                                                t.next = 7;
                                                                break
                                                            }
                                                            return t.abrupt("return");
                                                        case 7:
                                                            return e({
                                                                type: we,
                                                                payload: {}
                                                            }), t.next = 10, i.getPlayerToken();
                                                        case 10:
                                                            s = t.sent, e(Pe(s)), t.next = 25;
                                                            break;
                                                        case 14:
                                                            if (t.prev = 14, t.t0 = t.catch(0), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "code"))) {
                                                                t.next = 19;
                                                                break
                                                            }
                                                            if ("PENDING_REQUEST" !== t.t0.code) {
                                                                t.next = 19;
                                                                break
                                                            }
                                                            return t.abrupt("return");
                                                        case 19:
                                                            if (e(Pe("")), !(t.t0 instanceof Object && GameCore.Utils.Object.hasOwn(t.t0, "message"))) {
                                                                t.next = 24;
                                                                break
                                                            }
                                                            if ("string" !== typeof t.t0.message) {
                                                                t.next = 24;
                                                                break
                                                            }
                                                            return (0, Yt.sendException)(new Error(t.t0.message)), t.abrupt("return");
                                                        case 24:
                                                            (0, Yt.sendException)(new Ce);
                                                        case 25:
                                                        case "end":
                                                            return t.stop()
                                                    }
                                                }), t, null, [
                                                    [0, 14]
                                                ])
                                            })));
                                            return function (e, n) {
                                                return t.apply(this, arguments)
                                            }
                                        }());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getToken = function () {
                        return be(this.state)
                    }, (0, Me.default)(e, [{
                        key: "state",
                        get: function () {
                            return this.game.storage.getState()
                        }
                    }]), e
                }(Phaser.Plugins.BasePlugin),
                ke = _e,
                Le = function (t, e) {
                    void 0 === e && (e = 1);
                    var n = new Image;
                    n.onload = function () {
                        var t, n;
                        t = this.width * e, n = this.height * e, Math.floor(n / 2), Math.floor(t / 2)
                    }, n.src = t
                },
                De = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).width = void 0, n.height = void 0, n.renderOptions = void 0, n.canvas = void 0, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.preload = function (t) {
                        var e = this,
                            n = V()(t);
                        n.length < 1 || (n.forEach((function (n) {
                            e.scene.load.image(n, t[n])
                        })), this.scene.load.start())
                    }, n.capture = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n, i, a;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = e.width, i = e.height, a = e.renderOptions, this.width = n, this.height = i, this.renderOptions = a, this.createCanvas(), t.next = 7, this.loadImages();
                                    case 7:
                                        return this.drawObjects(), t.abrupt("return", this.snapshotFrame());
                                    case 9:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.createCanvas = function () {
                        this.canvas || (this.canvas = this.game.textures.createCanvas("FrameCaptureCanvas")), this.canvas.clear(), this.canvas.setSize(this.width, this.height)
                    }, n.loadImages = function () {
                        var t = this;
                        return new(gt())((function (e, n) {
                            for (var i in t.renderOptions) {
                                var a = t.renderOptions[i],
                                    r = a.name,
                                    s = a.image;
                                if (s) t.scene.textures.get(r).key !== r && t.scene.load.image(r, s)
                            }
                            t.scene.load.on(Phaser.Loader.Events.COMPLETE, e), t.scene.load.on(Phaser.Loader.Events.FILE_LOAD_ERROR, (function () {
                                var t = new Error("Load image failed");
                                n(t)
                            })), t.scene.load.start()
                        }))
                    }, n.drawObjects = function () {
                        for (var t in this.renderOptions) {
                            var e = this.renderOptions[t];
                            switch (e.type) {
                                case "text":
                                    this.drawText(e);
                                    break;
                                case "image":
                                    this.drawImage(e)
                            }
                        }
                    }, n.drawText = function (t) {
                        var e = this.canvas.context,
                            n = t.x,
                            i = t.y,
                            a = t.font,
                            r = t.text,
                            s = t.fillStyle,
                            o = t.lineWidth,
                            l = t.textAlign;
                        e.font = a + ' nunito,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif', e.fillStyle = s || "#ffffff", o && (e.lineWidth = o), l && (e.textAlign = l), e.fillText(r, n, i)
                    }, n.drawImage = function (t) {
                        var e = this.canvas.context,
                            n = t.x,
                            i = t.y,
                            a = t.name,
                            r = t.frame,
                            s = t.width,
                            o = t.height,
                            l = t.fallbackWithImage,
                            c = this.scene.textures.get(a),
                            u = c.getSourceImage(r);
                        "__MISSING" === c.key && l && (u = (c = this.scene.textures.get(l)).getSourceImage()), e.drawImage(u, n, i, s, o)
                    }, n.snapshotFrame = function () {
                        var t = this.canvas.getCanvas().toDataURL("image/jpeg", .85);
                        return GameCore.Utils.Valid.isDebugger() && Le(t), t
                    }, e
                }(Phaser.Plugins.ScenePlugin),
                Oe = De,
                Ne = n(74),
                Ue = n(343),
                Be = n(574),
                Fe = n(456),
                Ge = n(60),
                He = Ge.default.COIN_BASE_VALUE,
                Ve = Ge.default.COIN_SUFFIX,
                Ye = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.incUserGuideDisplays = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = this.game.storage, t.next = 3, e.dispatch(Be.incUserGuideDisplays());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.receiveData = function (t, e) {
                        this.game.storage.dispatch(Be.playerReceived(t, e))
                    }, n.updateData = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = this.game.storage, t.next = 3, e.dispatch(Be.updatePlayerProfile());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.setScore = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = this.game.storage, t.next = 3, n.dispatch(Be.setPlayerScore(e));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.setSetting = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return i = this.game.storage, t.next = 3, i.dispatch(Be.updateSetting(e, n));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.setCustomData = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return i = this.game.storage, t.next = 3, i.dispatch(Be.setPlayerCustomData(e, n));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.setMultiCustomData = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = this.game.storage, t.next = 3, n.dispatch(Be.setMultiCustomData(e));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.requestConnectedPlayers = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = this.game.storage, t.next = 3, e.dispatch(Be.requestConnectedPlayers());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.updateConnectedPlayers = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = this.game.storage, t.next = 3, n.dispatch(Be.updateConnectedPlayers(e));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.setUserOld = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return e = this.game.storage, t.next = 3, e.dispatch(Be.setPlayerIsOld());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getPlayer = function () {
                        return Fe.getPlayer(this.state)
                    }, n.getPlayerId = function () {
                        return this.getPlayer().playerId
                    }, n.getPlayerASID = function () {
                        return Fe.getPlayerASID(this.state)
                    }, n.getPlayerData = function () {
                        return this.getPlayer().data
                    }, n.getPlayerSetting = function (t) {
                        var e = this.getPlayerSettings();
                        return "string" !== typeof t ? null : GameCore.Utils.Object.hasOwn(e, t) ? e[t] : GameCore.Utils.Object.hasOwn(Ue.defaultSettings, t) ? Ue.defaultSettings[t] : null
                    }, n.getPlayerSettings = function () {
                        return this.getPlayerData().settings
                    }, n.getPlayerIsNew = function () {
                        return this.getPlayer().isUserNew
                    }, n.getCoins = function () {
                        var t = this.getCustomData(He),
                            e = this.getCustomData(Ve);
                        return GameCore.Utils.Valid.isNumber(t) && GameCore.Utils.Valid.isNumber(e) ? new Ne.default(t, e, !0) : 0
                    }, n.getDiamond = function () {
                        var t = this.getCustomData("diamond");
                        return GameCore.Utils.Valid.isNumber(t) ? t : 0
                    }, n.getCustomData = function (t) {
                        var e = Fe.getPlayerCustomData(this.state);
                        return GameCore.Utils.Valid.isObject(e) && GameCore.Utils.Object.hasOwn(e, t) ? e[t] : null
                    }, n.getConnectedPlayers = function () {
                        return Fe.getConnectedPlayers(this.state)
                    }, n.getConnectedPlayerIds = function (t, e) {
                        return Fe.getConnectedPlayerIds(this.state, {
                            limit: t,
                            offset: e
                        })
                    }, (0, Me.default)(e, [{
                        key: "state",
                        get: function () {
                            return this.game.storage.getState()
                        }
                    }]), e
                }(Phaser.Plugins.BasePlugin),
                We = Ye,
                Ke = n(172),
                ze = GameCore.Configs.ApiHost,
                Xe = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e) {
                        var n, i;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = GameCore.Utils.String.params(e), t.next = 3, (0, Ke.get)("players?" + n, {}, ze);
                                case 3:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || []);
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                je = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e) {
                        var n;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, (0, Ke.get)("players/" + e, {}, ze);
                                case 2:
                                    return n = t.sent, t.abrupt("return", (null == n ? void 0 : n.data) || []);
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                qe = "PROFILES_DATA_UPDATE",
                Ze = (0, Ie.createSelector)([function (t) {
                    return t.profile.data
                }], (function (t) {
                    return t
                })),
                Qe = (0, Ie.createSelector)([function (t) {
                    return t.profile.profileIds
                }], (function (t) {
                    return t
                })),
                Je = function (t) {
                    return function () {
                        var e = (0, Kt.default)(jt().mark((function e(n, i) {
                            var a, r, s, o;
                            return jt().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        if (e.prev = 0, a = i(), r = Qe(a), !((s = GameCore.Utils.Array.difference(t, r)).length < 1)) {
                                            e.next = 6;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 6:
                                        return e.next = 8, Xe({
                                            playerIds: s
                                        });
                                    case 8:
                                        o = e.sent, n({
                                            type: qe,
                                            payload: {
                                                data: o
                                            }
                                        }), e.next = 15;
                                        break;
                                    case 12:
                                        e.prev = 12, e.t0 = e.catch(0), (0, Yt.sendException)(e.t0);
                                    case 15:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 12]
                            ])
                        })));
                        return function (t, n) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                $e = function (t) {
                    return function () {
                        var e = (0, Kt.default)(jt().mark((function e(n) {
                            var i;
                            return jt().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.prev = 0, e.next = 3, je(t);
                                    case 3:
                                        i = e.sent, n({
                                            type: qe,
                                            payload: {
                                                data: [i]
                                            }
                                        }), e.next = 10;
                                        break;
                                    case 7:
                                        e.prev = 7, e.t0 = e.catch(0), (0, Yt.sendException)(e.t0);
                                    case 10:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 7]
                            ])
                        })));
                        return function (t) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                tn = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.requestProfiles = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = this.game.storage, t.next = 3, n.dispatch(Je(e));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.requestProfile = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return n = this.game.storage, t.next = 3, n.dispatch($e(e));
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.getProfiles = function () {
                        return Ze(this.state)
                    }, (0, Me.default)(e, [{
                        key: "state",
                        get: function () {
                            return this.game.storage.getState()
                        }
                    }]), e
                }(Phaser.Plugins.BasePlugin),
                en = tn,
                nn = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, zt.default)(e, t), e.prototype.emit = function (e, n) {
                        return t.prototype.emit.call(this, e, n)
                    }, e
                }(Phaser.Events.EventEmitter),
                an = nn,
                rn = n(38),
                sn = function (t) {
                    function e(e, n, i, a) {
                        var r;
                        (r = t.call(this, e) || this).zone = void 0, r.background = void 0, r.setName(n), r.setVisible(!1);
                        var s = r.scene.world.getWorldSize(),
                            o = s.width,
                            l = s.height;
                        return r.setSize(i || o, a || l), r.addZone(), r.addBackground(), r
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.open = function (t) {
                        GameCore.Utils.Valid.isObject(t) && (this.setDataEnabled(), this.setData(t)), this.setBlockInputOutsideEnabled(!0), this.scene.screen.bringToTop(this.name), this.visible || (this.setVisible(!0), this.logPageviewOnOpen(), this.logEventOpen())
                    }, n.close = function () {
                        this.setBlockInputOutsideEnabled(!1), this.visible && (this.setVisible(!1), this.logPageviewOnClose())
                    }, n.setBlockInputOutsideEnabled = function (t) {
                        this.scene.input.setTopOnly(t)
                    }, n.addZone = function () {
                        this.zone = this.scene.add.zone(0, 0, this.width, this.height), this.zone.setInteractive({}), this.add(this.zone)
                    }, n.addBackground = function () {
                        var t = "screen-background";
                        if (!this.scene.textures.exists(t)) {
                            var e = this.width + 2,
                                n = this.height + 2,
                                i = this.scene.add.graphics();
                            i.fillStyle(0, 1), i.fillRect(0, 0, e, n), i.generateTexture(t, e, n), i.destroy()
                        }
                        this.background = this.scene.add.image(0, 0, t), this.add(this.background)
                    }, n.logPageviewOnOpen = function () {
                        this.scene.analytics.pageview(this.name)
                    }, n.logPageviewOnClose = function () {
                        this.scene.analytics.pageview(this.scene.scene.key)
                    }, n.logEventOpen = function () {
                        this.scene.analytics.event(rn.AnalyticsEvents.SCREEN_OPEN, {
                            screen_name: this.getScreenName()
                        })
                    }, n.getScreenName = function () {
                        return GameCore.Utils.String.toUpperCamelCase(this.name.toLowerCase())
                    }, e
                }(Phaser.GameObjects.Container),
                on = sn,
                ln = n(577);
            GameCore.Screen = on, GameCore.Screens = {
                Events: ln.default
            };
            var cn = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).events = void 0, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.boot = function () {
                        this.events = new an, this.registryScreenFactory()
                    }, n.get = function (t) {
                        var e = this.scene.children.getByName(t);
                        return null === e ? null : e
                    }, n.add = function (t, e, n, i) {
                        var a = this.get(t);
                        return a || (a = this.scene.add.screen(t, e, n, i), this.events.emit(GameCore.Screens.Events.CREATED, a), a)
                    }, n.open = function (t, e) {
                        var n = this.get(t);
                        return !!n && (n.open(e), n.emit(GameCore.Screens.Events.OPEN, n), this.events.emit(GameCore.Screens.Events.OPEN, n), !0)
                    }, n.close = function (t) {
                        var e = this.get(t);
                        return !!e && (e.close(), e.emit(GameCore.Screens.Events.CLOSE, e), this.events.emit(GameCore.Screens.Events.CLOSE, e), !0)
                    }, n.bringToTop = function (t) {
                        var e = this.scene.children.getByName(t);
                        e && this.scene.children.bringToTop(e)
                    }, n.registryScreenFactory = function () {
                        Phaser.GameObjects.GameObjectFactory.register("screen", this.createScreen)
                    }, n.createScreen = function (t, e, n, i) {
                        var a = new e(this.scene, t, n, i);
                        return Phaser.Display.Align.In.Center(a, this.scene.gameZone), this.existing(a), a
                    }, e
                }(Phaser.Plugins.ScenePlugin),
                un = cn,
                hn = n(578),
                dn = n.n(hn),
                fn = n(457),
                pn = n(698),
                gn = n(192),
                vn = n(84),
                mn = {
                    currentSceneKey: "",
                    prevSceneKey: ""
                };
            (0, vn.enableES5)();
            var En, yn, An, Tn, Sn, Mn, wn, xn = {
                    processed: !1,
                    contextId: "",
                    contextType: "SOLO",
                    entryPointData: {},
                    currentGameMode: "",
                    isRequestingDetectGameMode: !0
                },
                Cn = xn,
                In = {
                    data: {}
                },
                bn = {
                    token: "",
                    isRequesting: !1
                },
                Rn = (En = {}, En.auth = function (t, e) {
                    return void 0 === t && (t = bn), (0, vn.default)(t, (function (t) {
                        var n = e.payload;
                        if (n) {
                            var i = n.token;
                            switch (e.type) {
                                case we:
                                    t.isRequesting = !0;
                                    break;
                                case xe:
                                    t.token = i, t.isRequesting = !1
                            }
                        }
                    }))
                }, En),
                Pn = "UPDATE_COINS",
                _n = {
                    coinBaseValue: 0,
                    coinSuffixValue: 0
                },
                kn = (yn = {}, yn.coins = function (t, e) {
                    return void 0 === t && (t = _n), (0, vn.default)(t, (function (t) {
                        var n = e.type,
                            i = e.payload;
                        if (i) {
                            var a = i.coinBaseValue,
                                r = i.coinSuffixValue;
                            if (n === Pn) t.coinBaseValue = a, t.coinSuffixValue = r
                        }
                    }))
                }, yn),
                Ln = n(576),
                Dn = n(575),
                On = {
                    settings: (0, Mt.default)({}, Ue.defaultSettings),
                    userGuideDisplays: 0,
                    customFields: {
                        selectedLevel: 0,
                        playerUnitData: "",
                        playerLevelProgress: 0,
                        meleeUnlockedUnitLevel: 0,
                        rangedUnlockedUnitLevel: 0,
                        coinBaseValue: 0,
                        coinSuffixValue: 0,
                        freeCoinsLastUsedTime: 0,
                        offlineRewardLastCheck: 0,
                        unitScreenAdWatchedCount: {
                            MELEE: {},
                            RANGED: {}
                        }
                    }
                },
                Nn = On,
                Un = {
                    ASID: "",
                    playerId: "",
                    name: "",
                    photo: "",
                    locale: "",
                    connectedPlayers: {},
                    data: {
                        settings: Ue.defaultSettings,
                        customFields: Nn.customFields,
                        userGuideDisplays: 0
                    },
                    isUserNew: !0
                },
                Bn = ((An = {})[Ln.REDUCER_NAME] = function (t, e) {
                    return void 0 === t && (t = Un), (0, vn.default)(t, (function (n) {
                        var i = e.payload;
                        if (i) {
                            var a = i.name,
                                r = i.value,
                                s = i.data,
                                o = void 0 === s ? {} : s,
                                l = i.score,
                                c = i.connectedPlayers,
                                u = void 0 === c ? [] : c,
                                h = i.profile;
                            switch (e.type) {
                                case Dn.PLAYER_RECEIVED:
                                    var d = i.playerId,
                                        f = i.name,
                                        p = i.photo,
                                        g = i.locale,
                                        v = i.data;
                                    if (n.playerId = d, n.name = f, n.photo = p, n.locale = g, GameCore.Utils.Valid.isObject(v)) {
                                        var m = v;
                                        n.data = (0, wt.merge)(t.data, m)
                                    }
                                    break;
                                case Dn.PLAYER_PROFILE_UPDATE:
                                    var E = h.playerId,
                                        y = h.name,
                                        A = h.photo,
                                        T = h.locale,
                                        S = h.ASID;
                                    n.ASID = S, n.playerId = E, n.name = y, n.photo = A, n.locale = T;
                                    break;
                                case Dn.PLAYER_PROFILE_UPDATE:
                                    var M = h.playerId,
                                        w = h.name,
                                        x = h.photo,
                                        C = h.locale,
                                        I = h.ASID;
                                    n.ASID = I, n.playerId = M, n.name = w, n.photo = x, n.locale = C;
                                    break;
                                case Dn.PLAYER_SCORE_UPDATE:
                                    n.data.score = l;
                                    break;
                                case Dn.PLAYER_SETTING_UPDATE:
                                    if (!GameCore.Utils.Object.hasOwn(n.data.settings, a)) break;
                                    n.data.settings[a] = r;
                                    break;
                                case Dn.PLAYER_DATA_UPDATE:
                                    n.data = (0, wt.merge)(t.data, o);
                                    break;
                                case Dn.PLAYER_IS_USER_NEW_UPDATE:
                                    n.isUserNew = !1;
                                    break;
                                case Dn.PLAYER_CONNECTED_PLAYERS_UPDATE:
                                    if (u.length <= 0) break;
                                    var b = GameCore.Utils.Object.keyBy(u, "playerId");
                                    n.connectedPlayers = (0, wt.merge)(t.connectedPlayers, b)
                            }
                        }
                    }))
                }, An),
                Fn = {
                    data: {},
                    profileIds: []
                },
                Gn = ((Tn = {}).profile = function (t, e) {
                    return void 0 === t && (t = Fn), (0, vn.default)(t, (function (n) {
                        var i = e.payload;
                        if (i) {
                            var a = i.data,
                                r = void 0 === a ? [] : a;
                            if (e.type === qe) {
                                var s, o = GameCore.Utils.Object.keyBy(r, "playerId"),
                                    l = V()(o);
                                n.data = (0, wt.merge)((0, Mt.default)({}, t.data), o), n.profileIds = GameCore.Utils.Array.unique(et()(s = []).call(s, t.profileIds, l))
                            }
                        }
                    }))
                }, Tn),
                Hn = n(579),
                Vn = n(193),
                Yn = n(194),
                Wn = {
                    mode: "",
                    status: Yn.MATCH_STATUS_OPEN,
                    rescued: 0,
                    startAt: 0,
                    finishAt: 0
                },
                Kn = {
                    single: {
                        _id: "",
                        data: {
                            fen: ""
                        },
                        playerId: "",
                        status: Yn.MATCH_STATUS_OPEN
                    },
                    group: {
                        status: Yn.MATCH_STATUS_OPEN,
                        opponentInfo: {
                            playerId: "",
                            name: "",
                            photo: ""
                        }
                    },
                    challenge: {
                        _id: "",
                        status: Yn.MATCH_STATUS_OPEN,
                        whitePlayerId: "",
                        blackPlayerId: "",
                        opponentInfo: {
                            playerId: "",
                            name: "",
                            photo: ""
                        }
                    },
                    online: {
                        _id: "",
                        status: Yn.MATCH_STATUS_OPEN,
                        players: {}
                    },
                    updateAt: 0,
                    isRequesting: !1
                },
                zn = {
                    current: {
                        updateAt: 0
                    },
                    data: {
                        updateAt: 0
                    },
                    isRequesting: !1
                },
                Xn = ((Sn = {})[Hn.REDUCER_NAME] = (0, fn.combineReducers)({
                    gameplay: function (t, e) {
                        return void 0 === t && (t = Wn), (0, vn.default)(t, (function (n) {
                            var i = e.payload;
                            if (i) {
                                var a = i.mode,
                                    r = i.status;
                                switch (e.type) {
                                    case Vn.MATCH_GAMEPLAY_INITIALIZE:
                                        n.status = Yn.MATCH_STATUS_OPEN, n.mode = Wn.mode, n.rescued = Wn.rescued, n.startAt = Wn.startAt, n.finishAt = Wn.finishAt, n.opponentInfo = Wn.opponentInfo;
                                        break;
                                    case Vn.MATCH_GAMEPLAY_START:
                                        n.mode = a, n.status = Yn.MATCH_STATUS_ACTIVE, n.rescued = Wn.rescued, n.startAt = Date.now();
                                        break;
                                    case Vn.MATCH_GAMEPLAY_UPDATE:
                                        n.mode = "string" === typeof a ? a : t.mode, n.status = r || t.status;
                                        break;
                                    case Vn.MATCH_GAMEPLAY_FINISH:
                                        n.status = Yn.MATCH_STATUS_FINISHED, n.finishAt = Date.now();
                                        break;
                                    case Vn.MATCH_GAMEPLAY_RESCUE:
                                        n.rescued += 1
                                }
                            }
                        }))
                    },
                    match: function (t, e) {
                        return void 0 === t && (t = Kn), (0, vn.default)(t, (function (n) {
                            var i = e.payload;
                            if (i) {
                                var a = i.match,
                                    r = i.opponentInfo,
                                    s = i.players;
                                switch (e.type) {
                                    case Vn.MATCH_SINGLE_CREATE_REQUEST:
                                    case Vn.MATCH_SINGLE_DETAIL_REQUEST:
                                    case Vn.MATCH_CHALLENGE_JOIN_REQUEST:
                                    case Vn.MATCH_CHALLENGE_FINISH_REQUEST:
                                    case Vn.MATCH_ONLINE_CREATE_REQUEST:
                                        n.isRequesting = !0;
                                        break;
                                    case Vn.MATCH_SINGLE_MOVE_UPDATED:
                                        n.single = (0, Mt.default)({}, t.single, a), n.updateAt = Date.now();
                                        break;
                                    case Vn.MATCH_SINGLE_DATA_RECEIVED:
                                        n.isRequesting = !1, n.single = a || Kn.single;
                                        break;
                                    case Vn.MATCH_SINGLE_DATA_CLEAR:
                                        n.isRequesting = !1, n.single = Kn.single;
                                        break;
                                    case Vn.MATCH_CHALLENGE_CREATE_REQUEST:
                                    case Vn.MATCH_CHALLENGE_CONTINUE_REQUEST:
                                        n.isRequesting = !0, n.challenge.opponentInfo = r;
                                        break;
                                    case Vn.MATCH_CHALLENGE_DATA_RECEIVED:
                                        n.isRequesting = !1, n.challenge = (0, Mt.default)({}, a || Kn.challenge), n.challenge.opponentInfo = t.challenge.opponentInfo;
                                        break;
                                    case Vn.MATCH_CHALLENGE_DATA_CLEAR:
                                        n.isRequesting = !1, n.challenge = Kn.challenge;
                                        break;
                                    case Vn.MATCH_GROUP_CREATE_REQUEST:
                                        n.group.status = Yn.MATCH_STATUS_ACTIVE, r && (n.group.opponentInfo = r);
                                        break;
                                    case Vn.MATCH_GROUP_FINISH_REQUEST:
                                        n.group.status = Yn.MATCH_STATUS_FINISHED;
                                        break;
                                    case Vn.MATCH_ONLINE_DATA_CLEAR:
                                        n.online.status = Kn.online.status, n.online.players = Kn.online.players;
                                        break;
                                    case Vn.MATCH_ONLINE_DATA_RECEIVED:
                                        n.online.status = Yn.MATCH_STATUS_ACTIVE, n.online.players = s;
                                        break;
                                    case Vn.MATCH_ONLINE_FINISH_REQUEST:
                                        n.online.status = Yn.MATCH_STATUS_FINISHED
                                }
                            }
                        }))
                    },
                    stats: function (t, e) {
                        return void 0 === t && (t = zn), (0, vn.default)(t, (function (n) {
                            var i = e.payload;
                            if (i) {
                                var a = i.playerId,
                                    r = i.stats,
                                    s = i.match,
                                    o = i.current,
                                    l = i.players,
                                    c = i.leaders;
                                switch (e.type) {
                                    case Vn.MATCH_STATS_DATA_CLEAR:
                                        delete n.data[a], n.current = zn.current;
                                        break;
                                    case Vn.MATCH_STATS_CONTEXT_REQUEST:
                                        n.data = zn.data, n.isRequesting = !0;
                                        break;
                                    case Vn.MATCH_STATS_CONTEXT_RECEIVED:
                                        n.data = r, n.isRequesting = !1;
                                        break;
                                    case Vn.MATCH_STATS_DATA_UPDATE:
                                        n.data[a] = r;
                                        break;
                                    case Vn.MATCH_STATS_CURRENT_UPDATE:
                                        n.current = (0, wt.merge)((0, Mt.default)({}, t.current), r);
                                        break;
                                    case Vn.MATCH_ONLINE_DATA_RECEIVED:
                                        V()(l).forEach((function (t) {
                                            n.data[t] = {
                                                score: 0
                                            }
                                        }));
                                        break;
                                    case Vn.MATCH_ONLINE_STATS_UPDATE:
                                        c.forEach((function (t) {
                                            var e = t.playerId,
                                                i = t.score,
                                                a = t.rank;
                                            n.data[e] = {
                                                score: i,
                                                rank: a
                                            }
                                        }));
                                        break;
                                    case Vn.MATCH_CHALLENGE_DATA_RECEIVED:
                                        var u = s || {},
                                            h = u.blackPlayerId,
                                            d = u.blackPlayerScore,
                                            f = u.whitePlayerId,
                                            p = u.whitePlayerScore,
                                            g = u.whitePlayerLevel,
                                            v = u.blackPlayerLevel;
                                        if (!h || !f) break;
                                        o && (n.current = o), n.data[h] = {
                                            score: d,
                                            level: v
                                        }, n.data[f] = {
                                            score: p,
                                            level: g
                                        }
                                }
                            }
                        }))
                    }
                }), Sn),
                jn = n(580),
                qn = n(581),
                Zn = {
                    checked: !1,
                    valueReceived: -1,
                    hasShowReward: !1
                },
                Qn = ((Mn = {})[jn.REDUCER_NAME] = function (t, e) {
                    return void 0 === t && (t = Zn), (0, vn.default)(t, (function (t) {
                        var n = e.payload;
                        if (n) {
                            var i = n.value;
                            switch (e.type) {
                                case qn.OFFLINE_REWARD_CHECKING:
                                    t.checked = !0;
                                    break;
                                case qn.OFFLINE_REWARD_RECEIVED:
                                    t.valueReceived = i;
                                    break;
                                case qn.OFFLINE_REWARD_RECEIVED_SHOW:
                                    t.hasShowReward = !0
                            }
                        }
                    }))
                }, Mn),
                Jn = n(582),
                $n = n(320),
                ti = n.n($n),
                ei = n(114),
                ni = n.n(ei),
                ii = n(585),
                ai = {
                    leaderboardId: "",
                    type: "",
                    limit: 0,
                    offset: 0,
                    leaders: {},
                    isRequesting: !1
                },
                ri = ((wn = {})[Jn.REDUCER_NAME] = function (t, e) {
                    return void 0 === t && (t = ai), (0, vn.default)(t, (function (n) {
                        var i = e.payload;
                        if (i) {
                            var a = i.leaderboardId,
                                r = i.type,
                                s = i.limit,
                                o = i.offset,
                                l = i.leaders;
                            switch (e.type) {
                                case ii.LEADERBOARD_DATA_REQUEST:
                                    t.type !== r && 0 === o && (n.leaders = ai.leaders), n.isRequesting = !0, n.leaderboardId = a, n.type = r, n.limit = s, n.offset = o;
                                    break;
                                case ii.LEADERBOARD_DATA_UPDATE:
                                    if (n.isRequesting = !1, t.type !== r) break;
                                    var u = GameCore.Utils.Json.clone((0, Mt.default)({}, t.leaders, l)),
                                        h = ti()(u),
                                        d = c()(h).call(h, (function (t) {
                                            return !!t.name && !!t.photo
                                        }));
                                    ni()(d).call(d, (function (t, e) {
                                        return +e.score - +t.score
                                    })), d.forEach((function (e, i) {
                                        e.rank = i + 1, t.leaders[e.playerId] || (n.leaders[e.playerId] = e)
                                    }));
                                    break;
                                case ii.LEADERBOARD_DATA_CLEAR:
                                    n.isRequesting = !1, n.type = ai.type, n.limit = ai.limit, n.offset = ai.offset, n.leaders = ai.leaders, n.leaderboardId = ai.leaderboardId
                            }
                        }
                    }))
                }, wn),
                si = (0, fn.combineReducers)((0, Mt.default)({
                    scene: function (t, e) {
                        return void 0 === t && (t = mn), (0, vn.default)(t, (function (n) {
                            var i = e.payload;
                            if (i) {
                                var a = i.sceneKey;
                                if (e.type === gn.SCENE_KEY_UPDATE) n.currentSceneKey = a, n.prevSceneKey = t.currentSceneKey
                            }
                        }))
                    },
                    context: function (t, e) {
                        return void 0 === t && (t = xn), (0, vn.default)(t, (function (t) {
                            var n = e.payload;
                            if (n) {
                                var i = n.gameMode,
                                    a = n.contextId,
                                    r = n.contextType,
                                    s = n.entryPointData,
                                    o = n.isRequestingDetectGameMode;
                                switch (e.type) {
                                    case gn.CONTEXT_RECEIVED:
                                        t.contextId = a, t.contextType = r, t.entryPointData = s;
                                        break;
                                    case gn.CONTEXT_PROCESSED:
                                        t.contextId = a, t.contextType = r, t.processed = !0;
                                        break;
                                    case gn.CONTEXT_GAME_MODE_DETECTED:
                                        t.currentGameMode = i, t.isRequestingDetectGameMode = !1;
                                        break;
                                    case gn.CONTEXT_GAME_MODE_REQUESTED:
                                        t.isRequestingDetectGameMode = o
                                }
                            }
                        }))
                    },
                    messages: function (t, e) {
                        return void 0 === t && (t = In), (0, vn.default)(t, (function (n) {
                            var i = e.payload;
                            if (i) {
                                var a = i.opponentId;
                                if ("string" === typeof a) switch (e.type) {
                                    case gn.MESSAGES_SENT_UPDATE:
                                        t.data[a] ? n.data[a].sent = !0 : n.data[a] = {
                                            sent: !0
                                        };
                                        break;
                                    case gn.MESSAGES_SENT_REMOVE:
                                        t.data[a] ? n.data[a].sent = !1 : n.data[a] = {
                                            sent: !1
                                        }
                                }
                            }
                        }))
                    }
                }, Rn, kn, Bn, Gn, Qn, ri, Xn)),
                oi = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__,
                li = fn.compose,
                ci = function (t) {
                    oi && (li = oi({
                        trace: !0,
                        traceLimit: 25
                    }) || fn.compose);
                    var e = li((0, fn.applyMiddleware)(pn.default));
                    return (0, fn.createStore)(si, t, e)
                },
                ui = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).store = void 0, n.initiator = void 0, n.dispatch = function (t) {
                            return n.store.dispatch(t)
                        }, n.getState = function () {
                            return n.store.getState()
                        }, n.subscribe = function (t) {
                            return n.store.subscribe(t)
                        }, n.watch = function (t, e) {
                            var i = dn()((function () {
                                var e = n.getState();
                                return t(e)
                            }));
                            return n.subscribe(i((function (t) {
                                e(t)
                            })))
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.init = function () {
                        this.store = ci({})
                    }, n.setInitiator = function (t) {
                        this.initiator = t
                    }, n.syncStore = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return this.initiator.initContext(), t.next = 3, this.initiator.initPlayer();
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e
                }(Phaser.Plugins.BasePlugin),
                hi = ui,
                di = n(705),
                fi = n.n(di),
                pi = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, {
                            type: "webfont",
                            key: n.type
                        }) || this).payload = void 0, i.payload = n, i
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.load = function () {
                        var t;
                        switch (this.payload.type) {
                            case "google":
                                t = this.getGoogleFontConfig(this.payload);
                                break;
                            case "local":
                                t = this.getLocalFontConfig(this.payload)
                        }
                        fi().load(t)
                    }, n.getGoogleFontConfig = function (t) {
                        var e = this,
                            n = t.character,
                            i = t.fontName,
                            a = t.fontWeight;
                        return {
                            google: {
                                families: [i + ":" + (void 0 === a ? 400 : a)],
                                text: n
                            },
                            active: function () {
                                e.loader.nextFile(e, !0)
                            },
                            timeout: 15e3
                        }
                    }, n.getLocalFontConfig = function (t) {
                        var e = this,
                            n = t.fontName,
                            i = t.fontType,
                            a = document.createElement("style");
                        document.head.appendChild(a);
                        var r = a.sheet;
                        if (r) {
                            var s = '@font-face { font-family: "' + n + '"; src: url("assets/fonts/' + n + ("opentype" === i ? ".otf" : ".ttf") + '") format("' + i + '"); }';
                            r.insertRule(s, 0)
                        }
                        return {
                            custom: {
                                families: [n]
                            },
                            active: function () {
                                e.loader.nextFile(e, !0)
                            },
                            timeout: 15e3
                        }
                    }, e
                }(Phaser.Loader.File),
                gi = pi,
                vi = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, zt.default)(e, t), e.prototype.addFont = function (t) {
                        var e = new gi(this.scene.load, t);
                        this.scene.load.addFile(e)
                    }, e
                }(Phaser.Plugins.ScenePlugin),
                mi = vi,
                Ei = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).ratio = void 0, n.width = void 0, n.height = void 0, n.worldWidth = void 0, n.worldHeight = void 0, n.worldRatio = void 0, n.forcePixelRatio = void 0, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.configure = function (t) {
                        var e = t.width,
                            n = t.height,
                            i = t.ratio;
                        this.ratio = i, this.width = e, this.height = n, this.initWorldSize()
                    }, n.resize = function (t) {
                        var e = this;
                        t && t > 0 && (this.forcePixelRatio = t);
                        var n = this.getCanvasSizeFixedRatio(this.worldRatio),
                            i = n.width,
                            a = n.height;
                        this.resizeCanvas(i, a), this.game.scene.scenes.forEach((function (t) {
                            var n = t.cameras.main;
                            if (n) {
                                var i = e.getZoomRatio(),
                                    a = e.getWorldSize(),
                                    r = a.width,
                                    s = a.height;
                                n.setZoom(i), n.centerOn(r / 2, s / 2)
                            }
                        }))
                    }, n.resizeCanvas = function (t, e) {
                        this.game.canvas.width = t, this.game.canvas.height = e, this.game.scale.resize(t, e)
                    }, n.getWorldSize = function () {
                        return {
                            width: this.worldWidth,
                            height: this.worldHeight
                        }
                    }, n.initWorldSize = function () {
                        this.worldWidth = this.width, this.worldHeight = this.height, this.isScreenSmallerRatio(this.ratio) && (this.worldHeight = this.width / this.getScreenRatio()), this.worldRatio = this.worldWidth / this.worldHeight
                    }, n.getZoomRatio = function () {
                        var t = this.getWorldSize().width;
                        return this.getCanvasSizeFixedRatio(this.worldRatio).width / t
                    }, n.getPixelRatio = function () {
                        if (this.forcePixelRatio > 0) return this.forcePixelRatio;
                        if (GameCore.Utils.Device.isDesktop()) return 2;
                        var t = GameCore.Utils.Device.pixelRatio();
                        return t > 2 && (t = 2), t
                    }, n.getPhysicPixels = function (t, e) {
                        return t * e
                    }, n.getCanvasSizeFixedRatio = function (t) {
                        var e = this.getPixelRatio(),
                            n = this.getScreenWidth() * e,
                            i = this.getScreenHeight() * e;
                        return this.isScreenSmallerRatio(t) ? i = n / t : n = i * t, {
                            width: n,
                            height: i
                        }
                    }, n.getScreenRatio = function () {
                        return this.getScreenWidth() / this.getScreenHeight()
                    }, n.getScreenHeight = function () {
                        var t = document,
                            e = t.body,
                            n = t.documentElement,
                            i = e.clientHeight,
                            a = n.clientHeight;
                        return Math.max(a, i) || 0
                    }, n.getScreenWidth = function () {
                        var t = document,
                            e = t.body,
                            n = t.documentElement,
                            i = e.clientWidth,
                            a = n.clientWidth;
                        return Math.max(a, i) || 0
                    }, n.isScreenSmallerRatio = function (t) {
                        return this.getScreenWidth() / this.getScreenHeight() <= t
                    }, n.addEventResize = function () {
                        var t = this;
                        window.addEventListener("resize", (function () {
                            t.resize()
                        }))
                    }, e
                }(Phaser.Plugins.BasePlugin),
                yi = Ei,
                Ai = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, zt.default)(e, t), e.prototype.emit = function (e, n) {
                        return t.prototype.emit.call(this, e, n)
                    }, e
                }(Phaser.Events.EventEmitter),
                Ti = Ai,
                Si = n(586),
                Mi = function (t) {
                    return t.coins
                },
                wi = (0, Ie.createSelector)([function (t) {
                    return Mi(t).coinBaseValue
                }], (function (t) {
                    return t
                })),
                xi = (0, Ie.createSelector)([function (t) {
                    return Mi(t).coinSuffixValue
                }], (function (t) {
                    return t
                })),
                Ci = Ge.default.COIN_BASE_VALUE,
                Ii = Ge.default.COIN_SUFFIX,
                bi = function (t, e) {
                    return function () {
                        var n = (0, Kt.default)(jt().mark((function n(i) {
                            var a;
                            return jt().wrap((function (n) {
                                for (;;) switch (n.prev = n.next) {
                                    case 0:
                                        try {
                                            a = new Ne.default(t, e, !0), i(Ri(a.baseValue, a.suffix))
                                        } catch (r) {
                                            window.game.rollbar.sendException(r)
                                        }
                                        case 1:
                                        case "end":
                                            return n.stop()
                                }
                            }), n)
                        })));
                        return function (t) {
                            return n.apply(this, arguments)
                        }
                    }()
                },
                Ri = function (t, e) {
                    return {
                        type: Pn,
                        payload: {
                            coinBaseValue: t,
                            coinSuffixValue: e
                        }
                    }
                },
                Pi = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).events = void 0, n.currentCoins = void 0, n.updateCurrentCoins = (0, Bt.debounce)((function () {
                            var t, e, i = n.game.storage,
                                a = n.currentCoins,
                                r = a.baseValue,
                                s = a.suffix;
                            i.dispatch((t = r, e = s, function () {
                                var n = (0, Kt.default)(jt().mark((function n(i) {
                                    var a, r, s, o;
                                    return jt().wrap((function (n) {
                                        for (;;) switch (n.prev = n.next) {
                                            case 0:
                                                try {
                                                    r = new Ne.default(t, e, !0), s = r.suffix, o = r.baseValue, i(Ri(o, s)), window.game.player.setMultiCustomData(((a = {})[Ii] = s, a[Ci] = o, a))
                                                } catch (l) {
                                                    window.game.rollbar.sendException(l)
                                                }
                                                case 1:
                                                case "end":
                                                    return n.stop()
                                        }
                                    }), n)
                                })));
                                return function (t) {
                                    return n.apply(this, arguments)
                                }
                            }()))
                        }), 2e3), n.events = new Ti, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.getCurrentCoins = function () {
                        if (!this.currentCoins) {
                            var t = wi(this.state),
                                e = xi(this.state);
                            this.currentCoins = new Ne.default(t, e, !0)
                        }
                        return this.currentCoins
                    }, n.plusCoins = function (t, e) {
                        var n = new Ne.default(t, e, !0);
                        this.currentCoins.add(n), this.updateCurrentCoins()
                    }, n.minusCoins = function (t, e) {
                        var n = new Ne.default(t, e, !0);
                        this.currentCoins.subtract(n), this.updateCurrentCoins()
                    }, n.receiveCoins = function (t, e) {
                        this.game.storage.dispatch(bi(t, e)), this.currentCoins = new Ne.default(t, e, !0), this.events.emit(Si.default.RECEIVED, this.currentCoins)
                    }, (0, Me.default)(e, [{
                        key: "state",
                        get: function () {
                            return this.game.storage.getState()
                        }
                    }]), e
                }(Phaser.Plugins.BasePlugin),
                _i = Pi,
                ki = function () {
                    function t(t, e, n) {
                        this.contextId = void 0, this.contextType = void 0, this.entryPointData = void 0, this.contextId = t || Cn.contextId, this.contextType = e || Cn.contextType, this.entryPointData = n || Cn.entryPointData
                    }
                    return t.prototype.toObject = function () {
                        return {
                            contextId: this.contextId,
                            contextType: this.contextType,
                            entryPointData: this.entryPointData
                        }
                    }, t
                }(),
                Li = n(458),
                Di = n(342),
                Oi = n(321),
                Ni = {
                    COINS: "coins",
                    SETTINGS: "settings",
                    GAME_DATA: "gameData",
                    USER_GUIDE_DISPLAYS: "userGuideDisplays",
                    FREE_COINS_LAST_USED_TIME: "freeCoinsLastUsedTime",
                    OFFLINE_REWARD_LAST_CHECK: "offlineRewardLastCheck"
                },
                Ui = n(455),
                Bi = n(92),
                Fi = GameCore.Configs.Tutorial,
                Gi = GameCore.Configs.Gameplay.MaxLevel,
                Hi = function (t) {
                    var e = this;
                    this.game = void 0, this.initContext = function () {
                        var t = window.GameSDK.context.getID(),
                            n = window.GameSDK.context.getType(),
                            i = window.GameSDK.getEntryPointData(),
                            a = new ki(t, n, i).toObject(),
                            r = a.contextId,
                            s = a.contextType,
                            o = a.entryPointData;
                        e.game.storage.dispatch((0, Oi.contextReceived)(r, s, o))
                    }, this.initPlayer = (0, Kt.default)(jt().mark((function t() {
                        var n, i, a, r, s, o, l, c, u, h, d;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = e.game, i = n.player, a = n.storage, r = e.getPlayerInfo(), s = ti()(Ni), t.next = 5, FBInstant.player.getDataAsync(s);
                                case 5:
                                    o = t.sent, l = new Ui.default(o), (c = l.toObject()).userGuideDisplays > 0 && !Fi.ForceUseTutorial && i.setUserOld(), !0 === c.settings.music && window.game.audio.playMusic(), !0 === c.settings.vibrate && (0, Bi.setVibrateEnabled)(!0), c.gameData.playerLevelProgress && c.gameData.playerLevelProgress >= Gi && (c.gameData.playerLevelProgress = Gi - 1), u = c.coins, h = u.baseValue, d = u.suffix, a.dispatch(bi(h, d)), i.receiveData(r, l.convertToPlayerData());
                                case 15:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    }))), this.getPlayerInfo = function () {
                        try {
                            var t = window.GameSDK.player.getID(),
                                e = window.GameSDK.player.getName(),
                                n = window.GameSDK.player.getPhoto(),
                                i = window.GameSDK.getLocale();
                            if (!GameCore.Utils.Valid.isString(t)) throw new Li.default(null, {
                                playerId: t
                            });
                            return GameCore.Utils.Valid.isString(e) || (e = "You"), new Di.default(t, e, n, i).toObject()
                        } catch (a) {
                            return new Di.default("123", "You").toObject()
                        }
                    }, this.game = t
                },
                Vi = function (t) {
                    function e(e, n, i) {
                        var a;
                        return (a = t.call(this) || this).game = void 0, a.options = void 0, a.performance = void 0, a.isRunning = !1, a.checkTimer = void 0, a.fpsHistory = void 0, a.start = function () {
                            if (!a.isRunning) {
                                a.isRunning = !0;
                                var t = a.options.checkInterval;
                                a.checkTimer = t, a.fpsHistory = [], a.game.events.on(Phaser.Core.Events.POST_STEP, a.onPostStep)
                            }
                        }, a.stop = function () {
                            a.isRunning && (a.isRunning = !1, a.game.events.off(Phaser.Core.Events.POST_STEP, a.onPostStep), a.options.onlyUpdateWhenSwitchScene && a.checkFps())
                        }, a.onPostStep = function (t, e) {
                            if (a.checkTimer -= e, !(a.checkTimer > 0)) {
                                var n = a.options,
                                    i = n.checkInterval,
                                    r = n.onlyUpdateWhenSwitchScene;
                                a.checkTimer += i, a.fpsHistory.push(a.game.loop.actualFps), !1 === r && a.fpsHistory.length >= 5 && a.checkFps()
                            }
                        }, a.game = e, a.options = i, a.performance = n, a
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.checkFps = function () {
                        if (0 !== this.fpsHistory.length) {
                            var t = this.options.autoUpgradeQuality,
                                e = !1;
                            this.isLowFps() ? e = this.performance.downgradeGraphicsQuality() : t && this.isHighFps() && (e = this.performance.upgradeGraphicsQuality()), e && (this.fpsHistory = [])
                        }
                    }, n.getFpsMedian = function () {
                        return Phaser.Math.Median(this.fpsHistory)
                    }, n.isLowFps = function () {
                        return this.getFpsMedian() < this.options.fpsThreshold
                    }, n.isHighFps = function () {
                        return this.getFpsMedian() > 1.2 * this.options.fpsThreshold
                    }, e
                }(Phaser.Events.EventEmitter),
                Yi = Vi,
                Wi = ["pixelRatio", "minQuality", "maxQuality", "qualityAdjustStep", "trackingSceneKeys"],
                Ki = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).fpsTracker = void 0, n.pixelRatio = void 0, n.minQuality = void 0, n.maxQuality = void 0, n.qualityAdjustStep = void 0, n.trackingSceneKeys = [], n.trackingScene = function (t) {
                            var e;
                            if (h()(e = n.trackingSceneKeys).call(e, t)) {
                                var i = n.game.scene.getScene(t);
                                i.events.once(Phaser.Scenes.Events.UPDATE, n.fpsTracker.start), i.events.once(Phaser.Scenes.Events.SLEEP, n.fpsTracker.stop)
                            }
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.configure = function (t) {
                        var e = t.pixelRatio,
                            n = t.minQuality,
                            i = t.maxQuality,
                            a = t.qualityAdjustStep,
                            r = t.trackingSceneKeys,
                            s = (0, Wt.default)(t, Wi);
                        this.pixelRatio = e, this.minQuality = n, this.maxQuality = i, this.qualityAdjustStep = a, this.trackingSceneKeys = r, this.fpsTracker = new Yi(this.game, this, s)
                    }, n.active = function () {
                        this.game.events.on(Phaser.Scenes.Events.WAKE, this.trackingScene), this.game.events.on(Phaser.Scenes.Events.START, this.trackingScene)
                    }, n.downgradeGraphicsQuality = function () {
                        var t = this.pixelRatio;
                        if (t <= this.minQuality) return !1;
                        var e = +(t - this.qualityAdjustStep).toFixed(2);
                        return !(e < this.minQuality) && (this.pixelRatio = e, this.game.world.resize(this.pixelRatio), !0)
                    }, n.upgradeGraphicsQuality = function () {
                        var t = this.pixelRatio;
                        if (t >= this.maxQuality) return !1;
                        var e = +(t + this.qualityAdjustStep).toFixed(2);
                        return !(e > this.maxQuality) && (this.pixelRatio = e, this.game.world.resize(this.pixelRatio), !0)
                    }, e
                }(Phaser.Plugins.BasePlugin),
                zi = Ki,
                Xi = n(35),
                ji = n.n(Xi),
                qi = n(65),
                Zi = n.n(qi),
                Qi = n(132),
                Ji = n(44),
                $i = n(32),
                ta = n(197),
                ea = n(587),
                na = n(341),
                ia = GameCore.Configs.ApiHost,
                aa = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e) {
                        var n;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, "matches", t.next = 4, (0, Ke.post)("matches", {
                                        opponentPlayerId: e
                                    }, {}, ia);
                                case 4:
                                    if (n = t.sent) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 7:
                                    if (GameCore.Utils.Valid.isObject(n.data)) {
                                        t.next = 9;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 9:
                                    return t.abrupt("return", n.data);
                                case 12:
                                    return t.prev = 12, t.t0 = t.catch(0), t.abrupt("return", {});
                                case 16:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 12]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                ra = function () {
                    var t = (0, Kt.default)(jt().mark((function t() {
                        var e;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, "matches", t.next = 4, (0, Ke.get)("matches", {}, ia);
                                case 4:
                                    if (e = t.sent) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", []);
                                case 7:
                                    return t.abrupt("return", e.data);
                                case 10:
                                    return t.prev = 10, t.t0 = t.catch(0), t.abrupt("return", []);
                                case 14:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 10]
                        ])
                    })));
                    return function () {
                        return t.apply(this, arguments)
                    }
                }(),
                sa = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e) {
                        var n, i;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, n = "matches/" + e + "/join", t.next = 4, (0, Ke.post)(n, {}, {}, ia);
                                case 4:
                                    if (i = t.sent) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 7:
                                    if (GameCore.Utils.Valid.isObject(i.data)) {
                                        t.next = 9;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 9:
                                    return t.abrupt("return", i.data);
                                case 12:
                                    return t.prev = 12, t.t0 = t.catch(0), t.abrupt("return", {});
                                case 16:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 12]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                oa = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e) {
                        var n, i;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, n = "matches/" + e, t.next = 4, (0, Ke.get)(n, {}, ia);
                                case 4:
                                    if (i = t.sent) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 7:
                                    if (GameCore.Utils.Valid.isObject(i.data)) {
                                        t.next = 9;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 9:
                                    return t.abrupt("return", i.data);
                                case 12:
                                    return t.prev = 12, t.t0 = t.catch(0), t.abrupt("return", {});
                                case 16:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 12]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                la = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e, n) {
                        var i, a;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.prev = 0, i = "matches/" + e + "/finish", t.next = 4, (0, Ke.post)(i, {
                                        matchId: e,
                                        level: n
                                    }, {}, ia);
                                case 4:
                                    if (a = t.sent) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 7:
                                    if (GameCore.Utils.Valid.isObject(a.data)) {
                                        t.next = 9;
                                        break
                                    }
                                    return t.abrupt("return", {});
                                case 9:
                                    return t.abrupt("return", a.data);
                                case 12:
                                    return t.prev = 12, t.t0 = t.catch(0), t.abrupt("return", {});
                                case 16:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [0, 12]
                        ])
                    })));
                    return function (e, n) {
                        return t.apply(this, arguments)
                    }
                }(),
                ca = n(173),
                ua = GameCore.Configs.Gameplay,
                ha = ua.MaximumMeleeLevel,
                da = ua.MaximumRangedLevel,
                fa = GameCore.Configs.Gameplay.CheaterIds,
                pa = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).status = ca.default.IDLE, n.matchId = void 0, n.contextId = void 0, n.playerInfo = void 0, n.opponentInfo = void 0, n.replayOpponentId = void 0, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.sendChallengeMessage = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i, a, r;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, i = (0, Fe.getPlayerId)(this.state), t.next = 4, this.updateProfiles(i, n);
                                    case 4:
                                        return t.next = 6, aa(n);
                                    case 6:
                                        return a = t.sent, this.validateMatchData(a), r = a._id, t.next = 11, (0, ea.sendInviteMessage)({
                                            contextId: e,
                                            opponentId: n,
                                            matchId: r
                                        });
                                    case 11:
                                        t.next = 16;
                                        break;
                                    case 13:
                                        t.prev = 13, t.t0 = t.catch(0);
                                    case 16:
                                        return t.prev = 16, this.playerInfo = null, this.opponentInfo = null, t.finish(16);
                                    case 20:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 13, 16, 20]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.createBattle = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i, a, r, s, o, l, c;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (void 0 === n && (n = !0), i = this.game, a = i.facebook, r = i.globalScene, t.prev = 2, r.screen.open($i.ScreenKeys.NOTIFY_SCREEN, {
                                                message: "Loading....",
                                                loading: !0
                                            }), this.setStatus(ca.default.INITIALIZING), s = (0, Fe.getPlayerId)(this.state), e !== s) {
                                            t.next = 8;
                                            break
                                        }
                                        throw new Error("You can not challenge yourself");
                                    case 8:
                                        return o = null, t.next = 11, a.getContextPlayers("");
                                    case 11:
                                        if ((l = t.sent).length > 0 && (c = ji()(l).call(l, (function (t) {
                                                return t.playerId
                                            })), h()(c).call(c, e) && (o = FBInstant.context.getID())), o) {
                                            t.next = 17;
                                            break
                                        }
                                        return t.next = 16, a.createAsync(e);
                                    case 16:
                                        o = t.sent;
                                    case 17:
                                        if (this.validateContextId(o), "" === o || "string" !== typeof o) {
                                            t.next = 21;
                                            break
                                        }
                                        return t.next = 21, this.startBattle(o, e);
                                    case 21:
                                        n && this.game.scene.sleep(Ji.SceneKeys.GAME_SCENE), this.setStatus(ca.default.STARTED), n && this.game.scene.run(Ji.SceneKeys.GAME_SCENE), t.next = 30;
                                        break;
                                    case 26:
                                        t.prev = 26, t.t0 = t.catch(2), this.setStatus(ca.default.IDLE);
                                    case 30:
                                        return t.prev = 30, r.screen.close($i.ScreenKeys.NOTIFY_SCREEN), t.finish(30);
                                    case 33:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [2, 26, 30, 33]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.continueBattle = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i, a, r, s, o, l;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (i = this.game, a = i.globalScene, r = i.facebook, t.prev = 1, a.screen.open($i.ScreenKeys.NOTIFY_SCREEN, {
                                                message: "Loading..",
                                                loading: !0
                                            }), this.setStatus(ca.default.INITIALIZING), s = (0, Fe.getPlayerId)(this.state), n !== s) {
                                            t.next = 7;
                                            break
                                        }
                                        throw new Error("You can not challenge yourself");
                                    case 7:
                                        return t.next = 9, sa(e);
                                    case 9:
                                        if ("_id" in (o = t.sent) !== !1) {
                                            t.next = 14;
                                            break
                                        }
                                        return t.next = 13, oa(e);
                                    case 13:
                                        o = t.sent;
                                    case 14:
                                        if (this.validateMatchData(o, e), this.matchId = e, this.contextId = r.getContextID(), o.status !== Yn.MATCH_STATUS_FINISHED) {
                                            t.next = 23;
                                            break
                                        }
                                        return t.next = 20, aa(n);
                                    case 20:
                                        l = t.sent, this.validateMatchData(l), this.matchId = l._id;
                                    case 23:
                                        return t.next = 25, this.updateProfiles(s, n);
                                    case 25:
                                        this.setStatus(ca.default.STARTED), t.next = 32;
                                        break;
                                    case 28:
                                        t.prev = 28, t.t0 = t.catch(1), this.setStatus(ca.default.IDLE);
                                    case 32:
                                        return t.prev = 32, a.screen.close($i.ScreenKeys.NOTIFY_SCREEN), t.finish(32);
                                    case 35:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [1, 28, 32, 35]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.finishBattle = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e) {
                            var n, i, a, r;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 1, this.matchId) {
                                            t.next = 4;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 4:
                                        if ("win" !== e) {
                                            t.next = 11;
                                            break
                                        }
                                        return t.next = 7, la(this.matchId, 1);
                                    case 7:
                                        if (n = this.opponentInfo || {}, i = n.playerId, !this.contextId || !i) {
                                            t.next = 11;
                                            break
                                        }
                                        return t.next = 11, (0, ea.sendWinMessage)({
                                            matchId: this.matchId,
                                            contextId: this.contextId,
                                            opponentId: i
                                        });
                                    case 11:
                                        if ("lose" !== e) {
                                            t.next = 14;
                                            break
                                        }
                                        return t.next = 14, la(this.matchId, 2);
                                    case 14:
                                        this.logMatchEvent(na.AnalyticsEvents.MATCH_END), t.next = 20;
                                        break;
                                    case 17:
                                        t.prev = 17, t.t0 = t.catch(1);
                                    case 20:
                                        return t.prev = 20, this.matchId = null, this.contextId = null, this.playerInfo = null, a = this.opponentInfo || {}, r = a.playerId, this.replayOpponentId = r || this.replayOpponentId, this.opponentInfo = null, window.clientInformation.opponentIsCheater = !1, this.setStatus(ca.default.IDLE), t.finish(20);
                                    case 30:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [1, 17, 20, 30]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }(), n.getReplayOpponentId = function () {
                        return this.replayOpponentId
                    }, n.getPlayerInfo = function () {
                        return this.playerInfo
                    }, n.getOpponentInfo = function () {
                        return this.opponentInfo
                    }, n.logMatchEvent = function (t) {
                        var e = (this.opponentInfo || {}).playerLevel;
                        e && this.game.analytics.event(t, {
                            game_mode: GameCore.Utils.String.toUpperCamelCase(ta.MATCH_MODE_CHALLENGE_FRIENDS),
                            level: e,
                            level_name: "level_" + e
                        })
                    }, n.startBattle = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i, a;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, aa(n);
                                    case 3:
                                        i = t.sent, this.validateMatchData(i), a = i._id, this.matchId = a, this.contextId = e, this.logMatchEvent(na.AnalyticsEvents.MATCH_START), t.next = 14;
                                        break;
                                    case 11:
                                        t.prev = 11, t.t0 = t.catch(0);
                                    case 14:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 11]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.updateProfiles = function () {
                        var t = (0, Kt.default)(jt().mark((function t(e, n) {
                            var i, a, r, s, o, l, c, u, d, f;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, i = this.game.profile, t.next = 4, i.requestProfile(e);
                                    case 4:
                                        return t.next = 6, i.requestProfile(n);
                                    case 6:
                                        a = i.getProfiles(), r = a[e], this.validateProfileData(r), s = a[n] || {}, s = this.handleNewPlayerInvitation(s), this.validateProfileData(s), o = r.customFields || {}, l = o.playerUnitData, c = o.playerLevelProgress, this.updatePlayerProfile({
                                            playerId: e,
                                            playerName: r.name,
                                            playerPhoto: r.photo ? r.photo : Qi.default.AVATAR.FILE,
                                            playerLevel: c,
                                            unitData: l
                                        }), u = s.customFields || {}, d = u.playerUnitData, f = u.playerLevelProgress, this.updatePlayerProfile({
                                            playerId: n,
                                            playerName: s.name,
                                            playerPhoto: s.photo ? s.photo : Qi.default.AVATAR.FILE,
                                            playerLevel: f,
                                            unitData: d
                                        }), h()(fa).call(fa, n) && (window.clientInformation.opponentIsCheater = !0), t.next = 25;
                                        break;
                                    case 21:
                                        throw t.prev = 21, t.t0 = t.catch(0), new Error("Can not update profiles");
                                    case 25:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 21]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }(), n.updatePlayerProfile = function (t) {
                        this.playerInfo = t
                    }, n.updateOpponentProfile = function (t) {
                        this.opponentInfo = t
                    }, n.handleNewPlayerInvitation = function (t) {
                        var e = GameCore.Utils.Json.clone(t || {});
                        if (!e.customFields) {
                            for (var n = {
                                    MELEE: {},
                                    RANGED: {}
                                }, i = 1; i <= ha; i++) n.MELEE[i] = 0;
                            for (var a = 1; a <= da; a++) n.RANGED[a] = 0;
                            return e.customFields = {
                                playerUnitData: "0-0-m2-0-0/0-0-0-0-0/r1-0-0-0-0",
                                playerLevelProgress: 2
                            }, e
                        }
                        var r = e.customFields || {},
                            s = r.playerUnitData,
                            o = r.playerLevelProgress,
                            l = o && "number" === typeof o && o >= 2;
                        return l || (e.customFields.playerLevelProgress = 2), s && l || (e.customFields.playerUnitData = "0-0-m2-0-0/0-0-0-0-0/r1-0-0-0-0"), e
                    }, n.validateProfileData = function (t) {
                        if (!t) throw new Error("Profile is not found");
                        var e = t.customFields;
                        if (!e) throw new Error("Profile customFields is not found");
                        var n = e || {},
                            i = n.playerUnitData;
                        if ("number" !== typeof n.playerLevelProgress) throw new Error("Player level is not found");
                        if ("string" !== typeof i) throw new Error("Player unit data is not found");
                        this.validateUnitData(i)
                    }, n.validateUnitData = function (t) {
                        var e = t.split("/");
                        if (3 !== e.length) throw new Error("Unit data segment is not valid");
                        var n = [],
                            i = e[0].split("-");
                        if (5 !== i.length) throw new Error("Unit data row 1 is not valid");
                        n.push.apply(n, i);
                        var a = e[1].split("-");
                        if (5 !== a.length) throw new Error("Unit data row 2 is not valid");
                        n.push.apply(n, a);
                        var r = e[2].split("-");
                        if (5 !== r.length) throw new Error("Unit data row 3 is not valid");
                        if (n.push.apply(n, r), n.some((function (t) {
                                if ("0" === t[0]) return !1;
                                if ("r" !== t[0] && "m" !== t[0]) return !0;
                                var e = Zi()(t.substring(1));
                                return e < 1 || e > 11
                            }))) throw new Error("Unit type is not valid")
                    }, n.validateContextId = function (t) {
                        if (!1 === t) throw new Error("User canceled")
                    }, n.validateMatchData = function (t, e) {
                        if (!t) throw new Error("Match is not found");
                        if (!GameCore.Utils.Valid.isObject(t)) throw new Error("Match is not valid");
                        if ("_id" in t === !1) throw new Error("Match id is not valid");
                        if (e && e !== t._id) throw new Error("Match id is not matched");
                        if ("whitePlayerId" in t === !1) throw new Error("Match white player id is not valid");
                        if ("blackPlayerId" in t === !1) throw new Error("Match black player id is not valid")
                    }, n.getMatchHistory = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, n, i, a, r, s, o, l;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, ra();
                                    case 3:
                                        if (e = t.sent, !GameCore.Configs.Battle.UseMock) {
                                            t.next = 15;
                                            break
                                        }
                                        if (n = [], i = (0, Fe.getPlayerId)(this.state)) {
                                            t.next = 12;
                                            break
                                        }
                                        return t.abrupt("return", []);
                                    case 12:
                                        for (a = 0; a < 50; a++) l = {
                                            _id: "" + a,
                                            whitePlayerId: i,
                                            blackPlayerId: r = "" + (a + 1e5),
                                            winnerId: a % 2 === 0 ? i : r,
                                            whitePlayerScore: s = a % 2 === 0 ? 1 : 2,
                                            blackPlayerScore: o = a % 2 === 0 ? 2 : 1,
                                            whitePlayerLevel: s,
                                            blackPlayerLevel: o,
                                            status: "finished",
                                            updatedAt: "2022-07-13T07:07:00.524Z"
                                        }, n.push(l);
                                        return this.validateMatchHistory(n), t.abrupt("return", n);
                                    case 15:
                                        return this.validateMatchHistory(e), t.abrupt("return", e);
                                    case 19:
                                        return t.prev = 19, t.t0 = t.catch(0), t.abrupt("return", []);
                                    case 23:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 19]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.validateMatchHistory = function (t) {
                        if (!1 === Array.isArray(t)) throw new Error("Match history is invalid");
                        t.forEach((function (t) {
                            if (!1 === GameCore.Utils.Valid.isObject(t)) throw new Error("Match is not valid");
                            if ("_id" in t === !1) throw new Error("Match id is not valid");
                            if ("whitePlayerId" in t === !1) throw new Error("Match white player id is not valid");
                            if ("blackPlayerId" in t === !1) throw new Error("Match black player id is not valid");
                            if ("status" in t === !1) throw new Error("Match status is not valid");
                            if ("whitePlayerScore" in t === !1) throw new Error("Match white player score is not valid");
                            if ("blackPlayerScore" in t === !1) throw new Error("Match black player score is not valid");
                            if ("whitePlayerLevel" in t === !1) throw new Error("Match white player level is not valid");
                            if ("blackPlayerLevel" in t === !1) throw new Error("Match black player level is not valid");
                            if ("updatedAt" in t === !1) throw new Error("Match updated at is not valid")
                        }))
                    }, n.setStatus = function (t) {
                        this.status = t
                    }, n.getStatus = function () {
                        return this.status
                    }, (0, Me.default)(e, [{
                        key: "state",
                        get: function () {
                            return this.game.storage.getState()
                        }
                    }]), e
                }(Phaser.Plugins.BasePlugin),
                ga = pa,
                va = n(459),
                ma = n.n(va),
                Ea = ["player", "match"],
                ya = "null",
                Aa = GameCore.Configs.Rollbar,
                Ta = Aa.UseMockup,
                Sa = Aa.FilterError,
                Ma = Aa.ListPlayerDevIds,
                wa = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).enable = void 0, n.rollbar = void 0, n.events = [], n.beforeSend = function (t, e, i) {
                            Ta && n.showPopupError(i)
                        }, n.checkIgnore = function (t, e, i) {
                            try {
                                return !!n.isErrorIgnore(e)
                            } catch (a) {
                                return !1
                            }
                        }, n.showPopupError = function (t) {
                            var e, i, a, r, s, o = null == t || null == (e = t.body) || null == (i = e.trace) ? void 0 : i.exception;
                            o && n.events.push(o);
                            var l = (null == t || null == (a = t.body) || null == (r = a.trace) ? void 0 : r.frames) || [];
                            (s = n.events).push.apply(s, l);
                            var c = document.getElementById("popup-error");
                            c || ((c = document.createElement("div")).id = "popup-error", document.body.appendChild(c)), c.innerHTML = '<div style="color: #fff; display: flex; flex-flow: column; align-items: center; ">\n      <pre id="json" style="overflow: auto; background-color: rgb(195 112 97 / 80%); padding: 10px; max-height: 80vh; max-width: 90vw; border: 5px solid #545454;">' + L()(n.events, null, 2) + '</pre>\n      <button id="close" style="cursor: pointer; padding: 10px 20px; border-radius: 100px;">Close</button>\n      </div>', c.style = "top: 0px; z-index: 10000; width: 100vw; max-height: 100vh; position: absolute; display: flex; align-items: center; justify-content: center;";
                            var u = document.getElementById("close");
                            u && (u.onclick = n.closePopup)
                        }, n.closePopup = function () {
                            n.events = [{}];
                            var t = document.getElementById("popup-error");
                            null == t || t.remove()
                        }, n.isNoneErrorEvent = function (t) {
                            if (!t || 0 === t.length) return !1;
                            if (!t[0].message) return !1;
                            return "Non-Error promise rejection captured with keys: code, message" === t[0].message
                        }, n.isErrorIgnore = function (t) {
                            if (!t || 0 === t.length) return !1;
                            var e = !1,
                                i = t[0];
                            return i instanceof Object && (e = n.isIgnoreByCode(i) || n.isIgnoreByMessage(i)), e
                        }, n.isIgnoreByCode = function (t) {
                            if (GameCore.Utils.Object.hasOwn(t, "code")) {
                                var e = t.code,
                                    n = Sa.Codes,
                                    i = n.accepted,
                                    a = n.ignored;
                                if ("string" === typeof e) {
                                    if (g()(i).call(i, e) >= 0) return !1;
                                    if (g()(a).call(a, e) >= 0) return !0
                                }
                            } else if (GameCore.Utils.Object.hasOwn(t, "name")) {
                                var r = t.name,
                                    s = Sa.Codes,
                                    o = s.accepted,
                                    l = s.ignored;
                                if ("string" === typeof r) {
                                    if (g()(o).call(o, r) >= 0) return !1;
                                    if (g()(l).call(l, r) >= 0) return !0
                                }
                            }
                            return !1
                        }, n.isIgnoreByMessage = function (t) {
                            if (GameCore.Utils.Object.hasOwn(t, "message")) {
                                var e = t.message,
                                    n = Sa.Messages,
                                    i = n.accepted,
                                    a = n.ignored;
                                if ("string" === typeof e) {
                                    if (g()(i).call(i, e) >= 0) return !1;
                                    if (g()(a).call(a, e) >= 0) return !0
                                }
                            }
                            return !1
                        }, n.addExtraState = function () {
                            try {
                                if (!GameCore.Utils.Object.hasOwn(window, "game")) return;
                                if (!GameCore.Utils.Object.hasOwn(window.game, "storage")) return;
                                if (!GameCore.Utils.Object.hasOwn(window.game.storage, "getState")) return;
                                var t = (0, window.game.storage.getState)() || {},
                                    e = t.player,
                                    i = t.match,
                                    a = (0, Wt.default)(t, Ea);
                                n.rollbar.configure({
                                    payload: {
                                        player: e,
                                        match: i,
                                        other: a
                                    }
                                })
                            } catch (r) {}
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.setup = function () {
                        this.rollbar = new(ma())({
                            accessToken: ya,
                            checkIgnore: this.checkIgnore,
                            onSendCallback: this.beforeSend,
                            captureUncaught: !0,
                            scrubTelemetryInputs: !0,
                            captureUnhandledRejections: !0,
                            autoInstrument: {
                                dom: !1,
                                navigation: !1
                            },
                            payload: {
                                environment: "production",
                                client: {
                                    javascript: {
                                        code_version: "14"
                                    }
                                },
                                server: {
                                    root: "webpack:///./",
                                    branch: "master"
                                }
                            }
                        }), this.enable = !0, this.sendTestException()
                    }, n.configure = function (t) {
                        this.rollbar && this.rollbar.configure(t)
                    }, n.sendTestException = function () {
                        var t = this.game.facebook.getPlayerID();
                        h()(Ma).call(Ma, t) && this.rollbar.debug(new Error("Test rollbar"), {
                            playerID: t
                        })
                    }, n.sendException = function (t, e) {
                        t && this.enable && this.rollbar && (this.addExtraState(), this.rollbar.error(t, e))
                    }, e
                }(Phaser.Plugins.BasePlugin),
                xa = wa,
                Ca = 0,
                Ia = 0,
                ba = function () {
                    function t(t) {
                        this.game = void 0, this.progressFbTimeEvent = void 0, this.game = t
                    }
                    var e = t.prototype;
                    return e.loadingProgressFbBootScene = function () {
                        var t = this,
                            e = 100;
                        Ia = 30;
                        ! function n() {
                            e <= 0 ? clearTimeout(t.progressFbTimeEvent) : t.progressFbTimeEvent = setTimeout((function () {
                                t.game.facebook.setLoadingProgress(Math.round(Ia)), Ia += 30 / e, e--, n()
                            }), 50)
                        }()
                    }, e.finishLoadingProgressFbBootScene = function () {
                        clearTimeout(this.progressFbTimeEvent)
                    }, e.loadingProgressFbLoadScene = function () {
                        var t = this;
                        (!Ia || Ia < 30) && (Ia = 60), Ca = Ia;
                        ! function e() {
                            t.progressFbTimeEvent = setTimeout((function () {
                                t.game.facebook.setLoadingProgress(Math.round(Ia)), Ia += .1, e()
                            }), 50)
                        }()
                    }, e.onProgress = function (t) {
                        var e = 100 - Ia,
                            n = Math.round(t * e + Ia);
                        n > Ca && clearTimeout(this.progressFbTimeEvent), this.game.facebook.setLoadingProgress(n)
                    }, t
                }(),
                Ra = ba,
                Pa = n(322),
                _a = [rn.AnalyticsEvents.SCREEN_OPEN],
                ka = function (t) {
                    function e(e, n) {
                        var i;
                        (i = t.call(this, "GoogleAnalytics", (0, Mt.default)({}, n), "#E35335") || this).game = void 0, i.trackingId = void 0, i.currentPath = "/";
                        var a = n.trackingId;
                        i.game = e;
                        var r = (GameCore.Configs.Analytics.GoogleAnalytics || {}).consoleLog;
                        return i.selfLog = !!r, i.trackingId = a, i
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.processTrafficSource = function (t) {}, n.processEvent = function (t, e, n) {
                        if (!(g()(_a).call(_a, t) >= 0)) {
                            var i = this.formatEventName(t),
                                a = e ? (0, Mt.default)({}, e) : {};
                            a = n ? (0, Mt.default)({}, a, {
                                value: n
                            }) : a, a = (0, Mt.default)({}, a, {
                                page_path: this.currentPath,
                                send_to: "GA"
                            }), gtag("event", i, a)
                        }
                    }, n.processLevelStart = function (t, e) {
                        this.processEvent(rn.AnalyticsEvents.LEVEL_START, {
                            level: t,
                            level_name: "level_" + t,
                            game_mode: e
                        })
                    }, n.processLevelRescue = function (t, e) {
                        this.processEvent(rn.AnalyticsEvents.LEVEL_RESCUE, {
                            level: t,
                            level_name: "level_" + t,
                            game_mode: e
                        })
                    }, n.processLevelFail = function (t, e, n) {
                        this.processEvent(rn.AnalyticsEvents.LEVEL_END, {
                            success: !1,
                            level: t,
                            level_name: "level_" + t,
                            game_mode: e,
                            played_time: n
                        })
                    }, n.processLevelComplete = function (t, e, n) {
                        this.processEvent(rn.AnalyticsEvents.LEVEL_END, {
                            success: !0,
                            level: t,
                            level_name: "level_" + t,
                            game_mode: e,
                            played_time: n
                        })
                    }, n.processShowInterstitialAd = function (t) {
                        this.processEvent(rn.AnalyticsEvents.AD_SHOW, {
                            ad_type: "interstitial",
                            screen_name: "" + t
                        }), this.processEvent(rn.AnalyticsEvents.AD_IMPRESSION, {
                            ad_format: "Interstitial"
                        })
                    }, n.processShowRewardedVideoAd = function (t) {
                        this.processEvent(rn.AnalyticsEvents.AD_SHOW, {
                            ad_type: "rewarded_video",
                            screen_name: "" + t
                        }), this.processEvent(rn.AnalyticsEvents.AD_IMPRESSION, {
                            ad_format: "Rewarded"
                        })
                    }, n.processShowAdFail = function (t, e) {
                        var n = t === GameCore.Ads.Types.REWARDED ? "rewarded_video" : "interstitial";
                        this.processEvent(rn.AnalyticsEvents.AD_SHOW_FAILED, {
                            ad_type: n,
                            screen_name: "" + e
                        })
                    }, n.processPageView = function (t) {
                        var e = this.getGameplayMode(),
                            n = "/" + e + "/" + t;
                        this.currentPath = n, document.title = this.formatPageTitle(e, t), gtag("event", "page_view", {
                            page_path: this.currentPath,
                            send_to: ["GA", this.trackingId]
                        })
                    }, n.getGameplayMode = function () {
                        var t = this.game.storage.getState();
                        return (0, Pa.getCurrentGameMode)(t)
                    }, n.formatEventName = function (t) {
                        return t.toLowerCase().replace(/:/g, "_")
                    }, n.formatPageTitle = function (t, e) {
                        return this.toUpperCamelCaseWithSpace(t) + "::" + this.toUpperCamelCaseWithSpace(e)
                    }, n.toUpperCamelCaseWithSpace = function (t) {
                        var e = t.replace(/[-_\s.]+(.)?/g, (function (t, e) {
                            return e ? " " + e.toUpperCase() : ""
                        }));
                        return e.substr(0, 1).toUpperCase() + e.substr(1)
                    }, e
                }(GameCore.Analytics.BaseAnalytics),
                La = ka,
                Da = "UA-214409348-15",
                Oa = "G-TX3HFRNJDT",
                Na = GameCore.Configs.Gameplay.CheaterIds,
                Ua = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).startGame = (0, Kt.default)(jt().mark((function t() {
                            var e, i, a;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, n.auth.requestToken();
                                    case 3:
                                        return t.next = 5, n.storage.syncStore();
                                    case 5:
                                        e = n.player.getPlayer(), i = e.playerId, a = e.name, window.clientInformation || (window.clientInformation = {}), h()(Na).call(Na, i) && (window.clientInformation.playerIsCheater = !0), n.rollbar.configure({
                                            payload: {
                                                person: {
                                                    id: i,
                                                    name: a
                                                }
                                            }
                                        }), n.detectGameMode(), n.initAnalytics(), n.analytics.event(rn.AnalyticsEvents.LOAD_START), n.setTrafficSourceAnalytics(), n.scene.launch(Ji.SceneKeys.GLOBAL_SCENE), n.scene.start(Ji.SceneKeys.LOAD_SCENE), n.analytics.pageview(Ji.SceneKeys.LOAD_SCENE), t.next = 21;
                                        break;
                                    case 18:
                                        t.prev = 18, t.t0 = t.catch(0), (0, Yt.sendException)(t.t0);
                                    case 21:
                                        return t.prev = 21, n.facebook.progressLoading.finishLoadingProgressFbBootScene(), n.scene.sleep(Ji.SceneKeys.BOOT_SCENE), t.finish(21);
                                    case 25:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 18, 21, 25]
                            ])
                        }))), n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.create = function () {
                        this.facebook.progressLoading.loadingProgressFbBootScene(), this.startGame()
                    }, n.detectGameMode = function () {
                        this.storage.dispatch((0, Oi.detectGameMode)())
                    }, n.initAnalytics = function () {
                        var t = this.player.getPlayerId();
                        this.analytics.add(new La(this.game, {
                            userId: t,
                            trackingId: Da,
                            measuringId: Oa,
                            version: "14"
                        }))
                    }, n.setTrafficSourceAnalytics = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, t.next = 3, this.getPlayerFirstVisitEntryPoint();
                                    case 3:
                                        e = t.sent, this.analytics.setTrafficSource(e), t.next = 10;
                                        break;
                                    case 7:
                                        t.prev = 7, t.t0 = t.catch(0), (0, Yt.sendException)(t.t0);
                                    case 10:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this, [
                                [0, 7]
                            ])
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), n.getPlayerFirstVisitEntryPoint = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, n;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.next = 2, GameSDK.player.getDataAsync(["entry_point"]);
                                    case 2:
                                        if (e = t.sent, n = e.entry_point ? e.entry_point : null) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.next = 7, GameSDK.getEntryPointAsync();
                                    case 7:
                                        n = t.sent, GameSDK.player.setDataAsync({
                                            entry_point: n
                                        }).catch();
                                    case 9:
                                        return t.abrupt("return", n);
                                    case 10:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), e
                }(Phaser.Scene),
                Ba = Ua,
                Fa = n(150),
                Ga = GameCore.Configs.ApiNotificationHost,
                Ha = function () {
                    var t = (0, Kt.default)(jt().mark((function t(e, n) {
                        var i;
                        return jt().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, (0, Ke.post)("players/" + e, n, {}, Ga, 10);
                                case 2:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e, n) {
                        return t.apply(this, arguments)
                    }
                }(),
                Va = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "LoadResourceFail", i.message = e || "Load resource fail", i.payload = n, i
                    }
                    return (0, zt.default)(e, t), e
                }((0, re.default)(Error)),
                Ya = n(19),
                Wa = n(2),
                Ka = n(598),
                za = n(642),
                Xa = n(27),
                ja = n(473),
                qa = Xa.default.MELEE_UNIT_TYPE,
                Za = Xa.default.RANGED_UNIT_TYPE,
                Qa = Xa.default.ALIEN_UNIT_TYPE,
                Ja = Wa.default.UNITS_SPINES,
                $a = Ge.default.PLAYER_UNIT_DATA,
                tr = Ge.default.LEVEL_PROGRESS,
                er = GameCore.Configs.UnitsConfig,
                nr = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).requestingSpines = [], n.requestingSprites = [], n.isLazyLoadRequesting = void 0, n.handleFBInstantGameStarted = function () {
                            window.__fbGameReady = !0, n.player.updateData().then(n.processAfterUpdatePlayerProfile).catch((function (t) {
                                n.rollbar.sendException(t)
                            })), n.ads.preloadRewardedVideoAsync().catch((function () {})), n.player.requestConnectedPlayers(), setTimeout(n.subscribebot, 800)
                        }, n.processAfterUpdatePlayerProfile = function () {}, n.startGame = function () {
                            n.analytics.event(rn.AnalyticsEvents.APP_READY), n.storage.dispatch((0, za.updateActiveSceneKey)(Ji.SceneKeys.LOAD_SCENE)), n.storage.dispatch((0, Ka.processContextData)())
                        }, n.subscribebot = function () {
                            n.facebook.attemptToSubscribeBot()
                        }, n.handleLoadMusicCompleted = function () {
                            n.audio.initMusic(fe.BACKGROUND.KEY), n.audio.playMusic()
                        }, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.preload = function () {
                        var t = this;
                        this.facebook.progressLoading.loadingProgressFbLoadScene(), this.analytics.event(rn.AnalyticsEvents.SCREEN_OPEN, {
                            screen_name: "LoadScene"
                        }), this.load.on("progress", (function (e) {
                            t.facebook.progressLoading.onProgress(e)
                        })), this.load.on(Phaser.Loader.Events.FILE_LOAD_ERROR, (function (e) {
                            var n = new Va("Load resources at LoadScene failed.");
                            t.rollbar.sendException(n, {
                                file: e
                            })
                        }));
                        var e = this.getLevelJsonName();
                        this.load.on("filecomplete-json-" + e, (function () {
                            t.scene.wake(), t.loadEnemyUnits(e)
                        })), this.load.json(e, "assets/json/" + e + ".json"), this.loadDefaultUnits(), this.loadPlayerUnits(), this.load.json("unitData", "assets/json/unit-data.json"), this.load.bitmapFont(Ya.default.PRIMARY.KEY, Ya.default.PRIMARY.TEXTURE, Ya.default.PRIMARY.DATA), this.textStyler.addFont({
                            type: "local",
                            fontType: "truetype",
                            fontName: Ya.default.FONT_FAMILY
                        }), this.load.multiatlas({
                            key: Wa.default.DEFAULT_8_BIT.KEY,
                            atlasURL: Wa.default.DEFAULT_8_BIT.JSON,
                            path: Wa.default.DEFAULT_8_BIT.PATH
                        }), this.load.atlas({
                            key: Wa.default.DEFAULT.KEY,
                            atlasURL: Wa.default.DEFAULT.JSON,
                            textureURL: Wa.default.DEFAULT.TEXTURE
                        }), this.load.atlas({
                            key: Wa.default.GAMEPLAY.KEY,
                            atlasURL: Wa.default.GAMEPLAY.JSON,
                            textureURL: Wa.default.GAMEPLAY.TEXTURE
                        }), this.loadBackgroundByCurrentLevel(), this.load.multiatlas({
                            key: Wa.default.EFFECTS.KEY,
                            path: Wa.default.EFFECTS.PATH,
                            atlasURL: Wa.default.EFFECTS.JSON
                        }), this.load.spine(Wa.default.SPINE_EFFECTS.FX_MERGE.KEY, Wa.default.SPINE_EFFECTS.FX_MERGE.jsonPATH, Wa.default.SPINE_EFFECTS.FX_MERGE.atlasPATH)
                    }, n.create = function () {
                        this.audio.initSound(), this.analytics.event(rn.AnalyticsEvents.LOAD_COMPLETE), this.facebook.on("startgame", this.handleFBInstantGameStarted), this.facebook.gameStarted(), this.setupGlobalScene(), this.startGame()
                    }, n.updatePlayerProfileToNotificationService = function () {
                        try {
                            var t = this.player.getPlayer(),
                                e = t.playerId,
                                n = t.name,
                                i = t.photo,
                                a = t.locale,
                                r = t.ASID;
                            Ha(e, {
                                name: n,
                                photo: i,
                                locale: a,
                                ASID: r
                            })
                        } catch (s) {
                            this.rollbar.sendException(s)
                        }
                    }, n.sendNotificationForNewUser = function () {
                        try {
                            if (!this.player.getPlayerIsNew()) return;
                            var t = this.player.getPlayerASID();
                            if (!t) return;
                            this.facebook.sendNotificationAsync({
                                message: "Hi @[" + t + "] your friends are waiting to play with you, play now!",
                                delayTime: 3600
                            })
                        } catch (e) {
                            this.rollbar.sendException(e)
                        }
                    }, n.setupGlobalScene = function () {
                        var t = this.scene.get(Ji.SceneKeys.GLOBAL_SCENE);
                        t instanceof ja.default && t.setup()
                    }, n.loadBackgroundByCurrentLevel = function () {
                        var t = this.player.getCustomData(tr);
                        if ("number" !== typeof t || t < 0) this.loadAllBackgrounds();
                        else {
                            var e = Math.floor((t + 1) / 10) % 5;
                            this.load.image(Qi.default.BACKGROUND_TREE.KEY, Qi.default.BACKGROUND_TREE.FILE), 1 === e ? this.load.image(Qi.default.BACKGROUND_DESERT.KEY, Qi.default.BACKGROUND_DESERT.FILE) : 2 === e ? this.load.image(Qi.default.BACKGROUND_ICE.KEY, Qi.default.BACKGROUND_ICE.FILE) : 3 === e ? this.load.image(Qi.default.BACKGROUND_CRYSTAL.KEY, Qi.default.BACKGROUND_CRYSTAL.FILE) : 4 === e ? this.load.image(Qi.default.BACKGROUND_VOLCANO.KEY, Qi.default.BACKGROUND_VOLCANO.FILE) : this.loadAllBackgrounds()
                        }
                    }, n.getLevelJsonName = function () {
                        var t = this.player.getCustomData(tr),
                            e = t || 0,
                            n = 100 * Math.floor(e / 100) + 1,
                            i = n + 99;
                        return "levels-" + (1e4 + n).toString().substring(1) + "-" + (1e4 + i).toString().substring(1)
                    }, n.loadDefaultUnits = function () {
                        var t = this.getBuyingUnitLevel(),
                            e = "m1-r1-m" + t + "-r" + t + "-0/0-0-0-0-0/0-0-0-0-0";
                        this.loadUnits("spine", e)
                    }, n.getBuyingUnitLevel = function () {
                        var t = this.player.getCustomData(tr),
                            e = GameCore.Utils.Valid.isNumber(t) ? t + 1 : 1,
                            n = Xa.default.BUYING_UNIT_LEVEL,
                            i = 1;
                        return n.forEach((function (t, n) {
                            t <= e && (i = n + 1)
                        })), i
                    }, n.loadPlayerUnits = function () {
                        var t = this.player.getCustomData($a);
                        if (t && "string" === typeof t) {
                            var e = this.upgradePlayerUnits(t);
                            this.player.setCustomData($a, e), this.loadUnits("spine", e)
                        } else this.loadAllUnits()
                    }, n.upgradePlayerUnits = function (t) {
                        for (var e = this.getPlayerUnitList(t), n = this.getBuyingUnitLevel(), i = [], a = 0; a < 15; a++)
                            if (a >= e.length) i.push("0");
                            else {
                                var r = e[a],
                                    s = r[0];
                                if ("m" === s || "r" === s) Zi()(r.substring(1)) >= n ? i.push(r) : i.push("" + s + n);
                                else i.push("0")
                            } var o = this.removeRandomLowLevelUnit(i);
                        return this.serializePlayerUnitData(o)
                    }, n.removeRandomLowLevelUnit = function (t) {
                        if (Pt()(t).call(t, (function (t) {
                                return "0" === t
                            }))) return t;
                        var e = this.getBuyingUnitLevel(),
                            n = Pt()(t).call(t, (function (t) {
                                return "0" !== t && Zi()(t.substring(1)) <= e
                            }));
                        return n ? (t[g()(t).call(t, n)] = "0", t) : t
                    }, n.getPlayerUnitList = function (t) {
                        var e = t.split("/"),
                            n = [];
                        return e.forEach((function (t) {
                            t.split("-").forEach((function (t) {
                                n.push(t)
                            }))
                        })), n
                    }, n.serializePlayerUnitData = function (t) {
                        for (var e = "", n = 0, i = 0; i < 3; i++) {
                            for (var a = "", r = 0; r < 5; r++) a += t[n], n++, 4 !== r && (a += "-");
                            e += a, 2 !== i && (e += "/")
                        }
                        return e
                    }, n.loadEnemyUnits = function (t) {
                        var e = this.player.getCustomData(tr),
                            n = "number" === typeof e ? e : 0,
                            i = n - (100 * Math.floor(n / 100) + 1) + 1,
                            a = this.cache.json.get(t).levels[i],
                            r = a.enemy_row1 + "/" + a.enemy_row2 + "/" + a.enemy_row3;
                        this.loadUnits("spine", r)
                    }, n.loadUnits = function (t, e) {
                        var n = this,
                            i = e.split("/"),
                            a = [];
                        i.forEach((function (e) {
                            e.split("-").forEach((function (e) {
                                if ("0" !== e && !h()(a).call(a, e)) {
                                    var i = Qa;
                                    if ("m" === e[0] ? i = qa : "r" === e[0] && (i = Za), i !== Qa) {
                                        var r, s, o = Zi()(e.substring(1));
                                        if (i === qa)
                                            if (h()(r = er.MELEE.listLevelsUseSprite).call(r, o)) {
                                                if ("spine" === t) return
                                            } else if ("sprite" === t) return;
                                        if (i === Za)
                                            if (h()(s = er.RANGED.listLevelsUseSprite).call(s, o)) {
                                                if ("spine" === t) return
                                            } else if ("sprite" === t) return;
                                        a.push(e), n.loadUnit(t, o, i)
                                    }
                                }
                            }))
                        }))
                    }, n.loadUnit = function (t, e, n) {
                        var i = Ja.MELEE,
                            a = Ja.RANGED,
                            r = null;
                        switch (n) {
                            case qa:
                                e > 0 && e <= V()(i).length && (r = i[e]);
                                break;
                            case Za:
                                e > 0 && e <= V()(a).length && (r = a[e])
                        }
                        if (r) {
                            if ("spine" === t) {
                                var s;
                                if (h()(s = this.requestingSpines).call(s, r.KEY)) return;
                                this.requestingSpines.push(r.KEY), this.load.spine(r.KEY, r.jsonPATH, r.atlasPATH), this.isLazyLoadRequesting = !0
                            }
                            if ("sprite" === t) {
                                var o;
                                if (this.textures.exists(r.KEY)) return;
                                if (h()(o = this.requestingSprites).call(o, r.KEY)) return;
                                this.requestingSprites.push(r.KEY), this.load.multiatlas({
                                    key: r.KEY,
                                    atlasURL: r.JSON,
                                    path: r.PATH
                                }), this.isLazyLoadRequesting = !0
                            }
                        }
                    }, n.lazyLoadResource = function () {
                        var t = this;
                        this.isLazyLoadRequesting = !1, this.loadSounds(), this.loadAllUnits(), this.loadAvatarUnits(), this.loadAllBackgrounds(), this.isLazyLoadRequesting && (this.scene.wake(), this.load.once(Phaser.Loader.Events.COMPLETE, (function () {
                            t.scene.sleep()
                        })), this.load.start())
                    }, n.loadSounds = function () {
                        var t = Phaser.Loader.Events.FILE_KEY_COMPLETE;
                        this.cache.audio.exists(fe.BACKGROUND.KEY) || (this.load.once(t + "audio-" + fe.BACKGROUND.KEY, this.handleLoadMusicCompleted), this.load.audio(fe.BACKGROUND.KEY, fe.BACKGROUND.FILE), this.isLazyLoadRequesting = !0)
                    }, n.loadAllUnits = function () {
                        this.loadUnits("spine", "m1-m2-m3-m4-m5/m6-m7-m8-m9-m10/m11-r1-r2-r3-r4-r5"), this.loadUnits("spine", "r6-r7-r8-r9-r10/r11-0-0-0-0/0-0-0-0-0")
                    }, n.loadAvatarUnits = function () {
                        this.textures.exists(Wa.default.UNITS.KEY) || (this.load.multiatlas({
                            key: Wa.default.UNITS.KEY,
                            atlasURL: Wa.default.UNITS.JSON,
                            path: Wa.default.UNITS.PATH
                        }), this.isLazyLoadRequesting = !0)
                    }, n.loadAllBackgrounds = function () {
                        this.textures.exists(Qi.default.BACKGROUND_TREE.KEY) || (this.load.image(Qi.default.BACKGROUND_TREE.KEY, Qi.default.BACKGROUND_TREE.FILE), this.isLazyLoadRequesting = !0), this.textures.exists(Qi.default.BACKGROUND_DESERT.KEY) || (this.load.image(Qi.default.BACKGROUND_DESERT.KEY, Qi.default.BACKGROUND_DESERT.FILE), this.isLazyLoadRequesting = !0), this.textures.exists(Qi.default.BACKGROUND_ICE.KEY) || (this.load.image(Qi.default.BACKGROUND_ICE.KEY, Qi.default.BACKGROUND_ICE.FILE), this.isLazyLoadRequesting = !0), this.textures.exists(Qi.default.BACKGROUND_VOLCANO.KEY) || (this.load.image(Qi.default.BACKGROUND_VOLCANO.KEY, Qi.default.BACKGROUND_VOLCANO.FILE), this.isLazyLoadRequesting = !0), this.textures.exists(Qi.default.BACKGROUND_CRYSTAL.KEY) || (this.load.image(Qi.default.BACKGROUND_CRYSTAL.KEY, Qi.default.BACKGROUND_CRYSTAL.FILE), this.isLazyLoadRequesting = !0)
                    }, e
                }(Phaser.Scene),
                ir = nr,
                ar = function (t) {
                    function e() {
                        for (var e, n, i = arguments.length, a = new Array(i), r = 0; r < i; r++) a[r] = arguments[r];
                        return (n = t.call.apply(t, et()(e = [this]).call(e, a)) || this).Text = void 0, n.Texture = void 0, n.currentLocale = void 0, n.supportedLanguages = void 0, n.data = void 0, n.options = void 0, n
                    }(0, zt.default)(e, t);
                    var n = e.prototype;
                    return n.configure = function (t) {
                        this.applyOptions(t)
                    }, n.getCurrentLanguage = function () {
                        return this.currentLocale
                    }, n.switchLanguage = function (t) {
                        void 0 === t && (t = "en");
                        var e = this.getCorrectLocale(t);
                        this.currentLocale = e, this.Text = this.data[e].Text, this.Texture = this.data[e].Texture
                    }, n.getText = function (t) {
                        if ("object" == typeof t) {
                            var e = t.key,
                                n = t.variables,
                                i = void 0 === n ? [] : n,
                                a = t.locale,
                                r = void 0 === a ? this.currentLocale : a,
                                s = this.getCorrectLocale(r),
                                o = this.data[s].Text[e];
                            return this.replaceVariables(o, i)
                        }
                        return this.Text[t]
                    }, n.getTexture = function (t) {
                        if ("object" == typeof t) {
                            var e = t.key,
                                n = t.variables,
                                i = void 0 === n ? [] : n,
                                a = t.locale,
                                r = void 0 === a ? this.currentLocale : a,
                                s = this.getCorrectLocale(r),
                                o = this.data[s].Texture[e];
                            return this.replaceVariables(o, i)
                        }
                        return this.Texture[t]
                    }, n.isSupportLanguage = function (t) {
                        var e;
                        return g()(e = this.supportedLanguages).call(e, t) >= 0
                    }, n.applyOptions = function (t) {
                        this.options = (0, Mt.default)({}, t);
                        var e = t.data,
                            n = t.locale,
                            i = void 0 === n ? "en" : n,
                            a = t.upperCaseText,
                            r = void 0 !== a && a;
                        this.data = e, this.supportedLanguages = V()(e);
                        var s = this.getCorrectLocale(i);
                        if (this.currentLocale = s, this.Text = e[s].Text, this.Texture = e[s].Texture, r)
                            for (var o in this.Text) this.Text[o] = this.Text[o].toUpperCase()
                    }, n.replaceVariables = function (t, e) {
                        var n = e.length;
                        if (0 == n) return t;
                        var i = 0;
                        return t.replace(/{.*}/, (function () {
                            return String(e[Math.min(i++, n - 1)])
                        }))
                    }, n.getCorrectLocale = function (t) {
                        var e = t;
                        return this.isSupportLanguage(t) || (e = "en"), e
                    }, e
                }(Phaser.Plugins.BasePlugin),
                rr = {
                    en: JSON.parse('{"Text":{"empty_{X}":"empty_{X}"},"Texture":{"empty_2_{abc}":"empty_2_{abc}"}}')
                },
                sr = function (t) {
                    function e() {
                        return t.apply(this, arguments) || this
                    }
                    return (0, zt.default)(e, t), e.prototype.configure = function (e) {
                        t.prototype.configure.call(this, (0, Mt.default)({
                            data: rr,
                            locale: "en",
                            upperCaseText: !1
                        }, e))
                    }, e
                }(ar),
                or = sr,
                lr = n(643),
                cr = n(282),
                ur = n.n(cr),
                hr = n(111),
                dr = n.n(hr),
                fr = n(708),
                pr = n.n(fr),
                gr = n(535),
                vr = n.n(gr),
                mr = n(529),
                Er = n.n(mr),
                yr = n(494),
                Ar = n.n(yr),
                Tr = n(448),
                Sr = n.n(Tr),
                Mr = n(508),
                wr = n.n(Mr),
                xr = n(481),
                Cr = n.n(xr),
                Ir = n(709),
                br = n.n(Ir),
                Rr = n(485),
                Pr = n.n(Rr),
                _r = n(518),
                kr = n.n(_r),
                Lr = n(710),
                Dr = n.n(Lr),
                Or = n(318),
                Nr = n.n(Or),
                Ur = n(446),
                Br = n.n(Ur);
            window.SpinePlugin = function (t) {
                var e = {};

                function n(i) {
                    if (e[i]) return e[i].exports;
                    var a = e[i] = {
                        i: i,
                        l: !1,
                        exports: {}
                    };
                    return t[i].call(a.exports, a, a.exports, n), a.l = !0, a.exports
                }
                return n.m = t, n.c = e, n.d = function (t, e, i) {
                    n.o(t, e) || ur()(t, e, {
                        enumerable: !0,
                        get: i
                    })
                }, n.r = function (t) {
                    "undefined" != typeof dr() && pr() && ur()(t, pr(), {
                        value: "Module"
                    }), ur()(t, "__esModule", {
                        value: !0
                    })
                }, n.t = function (t, e) {
                    if (1 & e && (t = n(t)), 8 & e) return t;
                    if (4 & e && "object" == typeof t && t && t.__esModule) return t;
                    var i = Object.create(null);
                    if (n.r(i), ur()(i, "default", {
                            enumerable: !0,
                            value: t
                        }), 2 & e && "string" != typeof t)
                        for (var a in t) n.d(i, a, function (e) {
                            return t[e]
                        }.bind(null, a));
                    return i
                }, n.n = function (t) {
                    var e = t && t.__esModule ? function () {
                        return t.default
                    } : function () {
                        return t
                    };
                    return n.d(e, "a", e), e
                }, n.o = function (t, e) {
                    return Object.prototype.hasOwnProperty.call(t, e)
                }, n.p = "", n(n.s = 63)
            }([function (t, e) {
                function n(t, e, n) {
                    var i = n ? t[e] : vr()(t, e);
                    return !n && i.value && "object" == typeof i.value && (i = i.value), !(!i || ! function (t) {
                        return !!t.get && "function" == typeof t.get || !!t.set && "function" == typeof t.set
                    }(i)) && (void 0 === i.enumerable && (i.enumerable = !0), void 0 === i.configurable && (i.configurable = !0), i)
                }

                function i(t, e) {
                    var n = vr()(t, e);
                    return !!n && (n.value && "object" == typeof n.value && (n = n.value), !1 === n.configurable)
                }

                function a(t, e, a, r) {
                    for (var o in e)
                        if (e.hasOwnProperty(o)) {
                            var l = n(e, o, a);
                            if (!1 !== l) {
                                if (i((r || t).prototype, o)) {
                                    if (s.ignoreFinals) continue;
                                    throw new Error("cannot override final property '" + o + "', set Class.ignoreFinals = true to skip")
                                }
                                ur()(t.prototype, o, l)
                            } else t.prototype[o] = e[o]
                        }
                }

                function r(t, e) {
                    if (e) {
                        Array.isArray(e) || (e = [e]);
                        for (var n = 0; n < e.length; n++) a(t, e[n].prototype || e[n])
                    }
                }

                function s(t) {
                    var e, n;
                    if (t || (t = {}), t.initialize) {
                        if ("function" != typeof t.initialize) throw new Error("initialize must be a function");
                        e = t.initialize, delete t.initialize
                    } else if (t.Extends) {
                        var i = t.Extends;
                        e = function () {
                            i.apply(this, arguments)
                        }
                    } else e = function () {};
                    t.Extends ? (e.prototype = Object.create(t.Extends.prototype), e.prototype.constructor = e, n = t.Extends, delete t.Extends) : e.prototype.constructor = e;
                    var s = null;
                    return t.Mixins && (s = t.Mixins, delete t.Mixins), r(e, s), a(e, t, !0, n), e
                }
                s.extend = a, s.mixin = r, s.ignoreFinals = !1, t.exports = s
            }, function (t, e) {
                t.exports = function () {}
            }, function (t, e, n) {
                var i = n(0),
                    a = n(32),
                    r = new i({
                        initialize: function (t, e) {
                            this.x = 0, this.y = 0, "object" == typeof t ? (this.x = t.x || 0, this.y = t.y || 0) : (void 0 === e && (e = t), this.x = t || 0, this.y = e || 0)
                        },
                        clone: function () {
                            return new r(this.x, this.y)
                        },
                        copy: function (t) {
                            return this.x = t.x || 0, this.y = t.y || 0, this
                        },
                        setFromObject: function (t) {
                            return this.x = t.x || 0, this.y = t.y || 0, this
                        },
                        set: function (t, e) {
                            return void 0 === e && (e = t), this.x = t, this.y = e, this
                        },
                        setTo: function (t, e) {
                            return this.set(t, e)
                        },
                        setToPolar: function (t, e) {
                            return null == e && (e = 1), this.x = Math.cos(t) * e, this.y = Math.sin(t) * e, this
                        },
                        equals: function (t) {
                            return this.x === t.x && this.y === t.y
                        },
                        fuzzyEquals: function (t, e) {
                            return a(this.x, t.x, e) && a(this.y, t.y, e)
                        },
                        angle: function () {
                            var t = Math.atan2(this.y, this.x);
                            return t < 0 && (t += 2 * Math.PI), t
                        },
                        setAngle: function (t) {
                            return this.setToPolar(t, this.length())
                        },
                        add: function (t) {
                            return this.x += t.x, this.y += t.y, this
                        },
                        subtract: function (t) {
                            return this.x -= t.x, this.y -= t.y, this
                        },
                        multiply: function (t) {
                            return this.x *= t.x, this.y *= t.y, this
                        },
                        scale: function (t) {
                            return isFinite(t) ? (this.x *= t, this.y *= t) : (this.x = 0, this.y = 0), this
                        },
                        divide: function (t) {
                            return this.x /= t.x, this.y /= t.y, this
                        },
                        negate: function () {
                            return this.x = -this.x, this.y = -this.y, this
                        },
                        distance: function (t) {
                            var e = t.x - this.x,
                                n = t.y - this.y;
                            return Math.sqrt(e * e + n * n)
                        },
                        distanceSq: function (t) {
                            var e = t.x - this.x,
                                n = t.y - this.y;
                            return e * e + n * n
                        },
                        length: function () {
                            var t = this.x,
                                e = this.y;
                            return Math.sqrt(t * t + e * e)
                        },
                        setLength: function (t) {
                            return this.normalize().scale(t)
                        },
                        lengthSq: function () {
                            var t = this.x,
                                e = this.y;
                            return t * t + e * e
                        },
                        normalize: function () {
                            var t = this.x,
                                e = this.y,
                                n = t * t + e * e;
                            return n > 0 && (n = 1 / Math.sqrt(n), this.x = t * n, this.y = e * n), this
                        },
                        normalizeRightHand: function () {
                            var t = this.x;
                            return this.x = -1 * this.y, this.y = t, this
                        },
                        normalizeLeftHand: function () {
                            var t = this.x;
                            return this.x = this.y, this.y = -1 * t, this
                        },
                        dot: function (t) {
                            return this.x * t.x + this.y * t.y
                        },
                        cross: function (t) {
                            return this.x * t.y - this.y * t.x
                        },
                        lerp: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = this.x,
                                i = this.y;
                            return this.x = n + e * (t.x - n), this.y = i + e * (t.y - i), this
                        },
                        transformMat3: function (t) {
                            var e = this.x,
                                n = this.y,
                                i = t.val;
                            return this.x = i[0] * e + i[3] * n + i[6], this.y = i[1] * e + i[4] * n + i[7], this
                        },
                        transformMat4: function (t) {
                            var e = this.x,
                                n = this.y,
                                i = t.val;
                            return this.x = i[0] * e + i[4] * n + i[12], this.y = i[1] * e + i[5] * n + i[13], this
                        },
                        reset: function () {
                            return this.x = 0, this.y = 0, this
                        },
                        limit: function (t) {
                            var e = this.length();
                            return e && e > t && this.scale(t / e), this
                        },
                        reflect: function (t) {
                            return t = t.clone().normalize(), this.subtract(t.scale(2 * this.dot(t)))
                        },
                        mirror: function (t) {
                            return this.reflect(t).negate()
                        },
                        rotate: function (t) {
                            var e = Math.cos(t),
                                n = Math.sin(t);
                            return this.set(e * this.x - n * this.y, n * this.x + e * this.y)
                        }
                    });
                r.ZERO = new r, r.RIGHT = new r(1, 0), r.LEFT = new r(-1, 0), r.UP = new r(0, -1), r.DOWN = new r(0, 1), r.ONE = new r(1, 1), t.exports = r
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return Math.max(e, Math.min(n, t))
                }
            }, function (t, e) {
                var n = {
                    PI2: 2 * Math.PI,
                    TAU: .5 * Math.PI,
                    EPSILON: 1e-6,
                    DEG_TO_RAD: Math.PI / 180,
                    RAD_TO_DEG: 180 / Math.PI,
                    RND: null,
                    MIN_SAFE_INTEGER: Er() || -9007199254740991,
                    MAX_SAFE_INTEGER: Ar() || 9007199254740991
                };
                t.exports = n
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = t.length;
                    if (e < 0 || e > a || e >= n || n > a || e + n > a) {
                        if (i) throw new Error("Range Error: Values outside acceptable range");
                        return !1
                    }
                    return !0
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    var i = n - e;
                    return e + ((t - e) % i + i) % i
                }
            }, function (t, e) {
                t.exports = function (t) {
                    if ("object" != typeof t || t.nodeType || t === t.window) return !1;
                    try {
                        if (t.constructor && !{}.hasOwnProperty.call(t.constructor.prototype, "isPrototypeOf")) return !1
                    } catch (t) {
                        return !1
                    }
                    return !0
                }
            }, function (t, e, n) {
                var i = n(4);
                t.exports = function (t) {
                    return t > Math.PI && (t -= i.PI2), Math.abs(((t + i.TAU) % i.PI2 - i.PI2) % i.PI2)
                }
            }, function (t, e, n) {
                var i = n(4);
                t.exports = function (t) {
                    return t * i.RAD_TO_DEG
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (t && "number" != typeof t) {
                        if (t.hasOwnProperty(e)) return t[e];
                        if (-1 !== g()(e).call(e, ".")) {
                            for (var i = e.split("."), a = t, r = n, s = 0; s < i.length; s++) {
                                if (!a.hasOwnProperty(i[s])) {
                                    r = n;
                                    break
                                }
                                r = a[i[s]], a = a[i[s]]
                            }
                            return r
                        }
                        return n
                    }
                    return n
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    var i = typeof t;
                    return t && "number" !== i && "string" !== i && t.hasOwnProperty(e) && void 0 !== t[e] ? t[e] : n
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    if (!(e >= t.length)) {
                        for (var n = t.length - 1, i = t[e], a = e; a < n; a++) t[a] = t[a + 1];
                        return t.length = n, i
                    }
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(26),
                    r = new i({
                        initialize: function (t, e) {
                            void 0 === t && (t = 0), void 0 === e && (e = t), this.type = a.POINT, this.x = t, this.y = e
                        },
                        setTo: function (t, e) {
                            return void 0 === t && (t = 0), void 0 === e && (e = t), this.x = t, this.y = e, this
                        }
                    });
                t.exports = r
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t, e, n) {
                        this.x = 0, this.y = 0, this.z = 0, "object" == typeof t ? (this.x = t.x || 0, this.y = t.y || 0, this.z = t.z || 0) : (this.x = t || 0, this.y = e || 0, this.z = n || 0)
                    },
                    up: function () {
                        return this.x = 0, this.y = 1, this.z = 0, this
                    },
                    min: function (t) {
                        return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this
                    },
                    max: function (t) {
                        return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this
                    },
                    clone: function () {
                        return new i(this.x, this.y, this.z)
                    },
                    addVectors: function (t, e) {
                        return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this
                    },
                    crossVectors: function (t, e) {
                        var n = t.x,
                            i = t.y,
                            a = t.z,
                            r = e.x,
                            s = e.y,
                            o = e.z;
                        return this.x = i * o - a * s, this.y = a * r - n * o, this.z = n * s - i * r, this
                    },
                    equals: function (t) {
                        return this.x === t.x && this.y === t.y && this.z === t.z
                    },
                    copy: function (t) {
                        return this.x = t.x, this.y = t.y, this.z = t.z || 0, this
                    },
                    set: function (t, e, n) {
                        return "object" == typeof t ? (this.x = t.x || 0, this.y = t.y || 0, this.z = t.z || 0) : (this.x = t || 0, this.y = e || 0, this.z = n || 0), this
                    },
                    setFromMatrixPosition: function (t) {
                        return this.fromArray(t.val, 12)
                    },
                    setFromMatrixColumn: function (t, e) {
                        return this.fromArray(t.val, 4 * e)
                    },
                    fromArray: function (t, e) {
                        return void 0 === e && (e = 0), this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this
                    },
                    add: function (t) {
                        return this.x += t.x, this.y += t.y, this.z += t.z || 0, this
                    },
                    addScalar: function (t) {
                        return this.x += t, this.y += t, this.z += t, this
                    },
                    addScale: function (t, e) {
                        return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e || 0, this
                    },
                    subtract: function (t) {
                        return this.x -= t.x, this.y -= t.y, this.z -= t.z || 0, this
                    },
                    multiply: function (t) {
                        return this.x *= t.x, this.y *= t.y, this.z *= t.z || 1, this
                    },
                    scale: function (t) {
                        return isFinite(t) ? (this.x *= t, this.y *= t, this.z *= t) : (this.x = 0, this.y = 0, this.z = 0), this
                    },
                    divide: function (t) {
                        return this.x /= t.x, this.y /= t.y, this.z /= t.z || 1, this
                    },
                    negate: function () {
                        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this
                    },
                    distance: function (t) {
                        var e = t.x - this.x,
                            n = t.y - this.y,
                            i = t.z - this.z || 0;
                        return Math.sqrt(e * e + n * n + i * i)
                    },
                    distanceSq: function (t) {
                        var e = t.x - this.x,
                            n = t.y - this.y,
                            i = t.z - this.z || 0;
                        return e * e + n * n + i * i
                    },
                    length: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z;
                        return Math.sqrt(t * t + e * e + n * n)
                    },
                    lengthSq: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z;
                        return t * t + e * e + n * n
                    },
                    normalize: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z,
                            i = t * t + e * e + n * n;
                        return i > 0 && (i = 1 / Math.sqrt(i), this.x = t * i, this.y = e * i, this.z = n * i), this
                    },
                    dot: function (t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z
                    },
                    cross: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.x,
                            r = t.y,
                            s = t.z;
                        return this.x = n * s - i * r, this.y = i * a - e * s, this.z = e * r - n * a, this
                    },
                    lerp: function (t, e) {
                        void 0 === e && (e = 0);
                        var n = this.x,
                            i = this.y,
                            a = this.z;
                        return this.x = n + e * (t.x - n), this.y = i + e * (t.y - i), this.z = a + e * (t.z - a), this
                    },
                    applyMatrix3: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val;
                        return this.x = a[0] * e + a[3] * n + a[6] * i, this.y = a[1] * e + a[4] * n + a[7] * i, this.z = a[2] * e + a[5] * n + a[8] * i, this
                    },
                    applyMatrix4: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val,
                            r = 1 / (a[3] * e + a[7] * n + a[11] * i + a[15]);
                        return this.x = (a[0] * e + a[4] * n + a[8] * i + a[12]) * r, this.y = (a[1] * e + a[5] * n + a[9] * i + a[13]) * r, this.z = (a[2] * e + a[6] * n + a[10] * i + a[14]) * r, this
                    },
                    transformMat3: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val;
                        return this.x = e * a[0] + n * a[3] + i * a[6], this.y = e * a[1] + n * a[4] + i * a[7], this.z = e * a[2] + n * a[5] + i * a[8], this
                    },
                    transformMat4: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val;
                        return this.x = a[0] * e + a[4] * n + a[8] * i + a[12], this.y = a[1] * e + a[5] * n + a[9] * i + a[13], this.z = a[2] * e + a[6] * n + a[10] * i + a[14], this
                    },
                    transformCoordinates: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val,
                            r = e * a[0] + n * a[4] + i * a[8] + a[12],
                            s = e * a[1] + n * a[5] + i * a[9] + a[13],
                            o = e * a[2] + n * a[6] + i * a[10] + a[14],
                            l = e * a[3] + n * a[7] + i * a[11] + a[15];
                        return this.x = r / l, this.y = s / l, this.z = o / l, this
                    },
                    transformQuat: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.x,
                            r = t.y,
                            s = t.z,
                            o = t.w,
                            l = o * e + r * i - s * n,
                            c = o * n + s * e - a * i,
                            u = o * i + a * n - r * e,
                            h = -a * e - r * n - s * i;
                        return this.x = l * o + h * -a + c * -s - u * -r, this.y = c * o + h * -r + u * -a - l * -s, this.z = u * o + h * -s + l * -r - c * -a, this
                    },
                    project: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.val,
                            r = a[0],
                            s = a[1],
                            o = a[2],
                            l = a[3],
                            c = a[4],
                            u = a[5],
                            h = a[6],
                            d = a[7],
                            f = a[8],
                            p = a[9],
                            g = a[10],
                            v = a[11],
                            m = a[12],
                            E = a[13],
                            y = a[14],
                            A = 1 / (e * l + n * d + i * v + a[15]);
                        return this.x = (e * r + n * c + i * f + m) * A, this.y = (e * s + n * u + i * p + E) * A, this.z = (e * o + n * h + i * g + y) * A, this
                    },
                    projectViewMatrix: function (t, e) {
                        return this.applyMatrix4(t).applyMatrix4(e)
                    },
                    unprojectViewMatrix: function (t, e) {
                        return this.applyMatrix4(t).applyMatrix4(e)
                    },
                    unproject: function (t, e) {
                        var n = t.x,
                            i = t.y,
                            a = t.z,
                            r = t.w,
                            s = this.x - n,
                            o = r - this.y - 1 - i,
                            l = this.z;
                        return this.x = 2 * s / a - 1, this.y = 2 * o / r - 1, this.z = 2 * l - 1, this.project(e)
                    },
                    reset: function () {
                        return this.x = 0, this.y = 0, this.z = 0, this
                    }
                });
                i.ZERO = new i, i.RIGHT = new i(1, 0, 0), i.LEFT = new i(-1, 0, 0), i.UP = new i(0, -1, 0), i.DOWN = new i(0, 1, 0), i.FORWARD = new i(0, 0, 1), i.BACK = new i(0, 0, -1), i.ONE = new i(1, 1, 1), t.exports = i
            }, function (t, e) {
                t.exports = {
                    LOADER_IDLE: 0,
                    LOADER_LOADING: 1,
                    LOADER_PROCESSING: 2,
                    LOADER_COMPLETE: 3,
                    LOADER_SHUTDOWN: 4,
                    LOADER_DESTROYED: 5,
                    FILE_PENDING: 10,
                    FILE_LOADING: 11,
                    FILE_LOADED: 12,
                    FILE_FAILED: 13,
                    FILE_PROCESSING: 14,
                    FILE_ERRORED: 16,
                    FILE_COMPLETE: 17,
                    FILE_DESTROYED: 18,
                    FILE_POPULATED: 19
                }
            }, function (t, e, n) {
                var i = n(24),
                    a = n(57);
                t.exports = function (t, e) {
                    var n;
                    if (void 0 === e && (e = 90), !i(t)) return null;
                    if ("string" != typeof e && (e = (e % 360 + 360) % 360), 90 === e || -270 === e || "rotateLeft" === e) Sr()(n = t = a(t)).call(n);
                    else if (-90 === e || 270 === e || "rotateRight" === e) Sr()(t).call(t), t = a(t);
                    else if (180 === Math.abs(e) || "rotate180" === e) {
                        for (var r = 0; r < t.length; r++) {
                            var s;
                            Sr()(s = t[r]).call(s)
                        }
                        Sr()(t).call(t)
                    }
                    return t
                }
            }, function (t, e) {
                t.exports = {
                    SKIP_CHECK: -1,
                    NORMAL: 0,
                    ADD: 1,
                    MULTIPLY: 2,
                    SCREEN: 3,
                    OVERLAY: 4,
                    DARKEN: 5,
                    LIGHTEN: 6,
                    COLOR_DODGE: 7,
                    COLOR_BURN: 8,
                    HARD_LIGHT: 9,
                    SOFT_LIGHT: 10,
                    DIFFERENCE: 11,
                    EXCLUSION: 12,
                    HUE: 13,
                    SATURATION: 14,
                    COLOR: 15,
                    LUMINOSITY: 16,
                    ERASE: 17,
                    SOURCE_IN: 18,
                    SOURCE_OUT: 19,
                    SOURCE_ATOP: 20,
                    DESTINATION_OVER: 21,
                    DESTINATION_IN: 22,
                    DESTINATION_OUT: 23,
                    DESTINATION_ATOP: 24,
                    LIGHTER: 25,
                    COPY: 26,
                    XOR: 27
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return Math.random() * (e - t) + t
                }
            }, function (t, e, n) {
                var i = n(4);
                t.exports = function (t) {
                    return t * i.DEG_TO_RAD
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(14),
                    r = 1e-6,
                    s = new i({
                        initialize: function (t) {
                            this.val = new Float32Array(16), t ? this.copy(t) : this.identity()
                        },
                        clone: function () {
                            return new s(this)
                        },
                        set: function (t) {
                            return this.copy(t)
                        },
                        setValues: function (t, e, n, i, a, r, s, o, l, c, u, h, d, f, p, g) {
                            var v = this.val;
                            return v[0] = t, v[1] = e, v[2] = n, v[3] = i, v[4] = a, v[5] = r, v[6] = s, v[7] = o, v[8] = l, v[9] = c, v[10] = u, v[11] = h, v[12] = d, v[13] = f, v[14] = p, v[15] = g, this
                        },
                        copy: function (t) {
                            var e = t.val;
                            return this.setValues(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9], e[10], e[11], e[12], e[13], e[14], e[15])
                        },
                        fromArray: function (t) {
                            return this.setValues(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15])
                        },
                        zero: function () {
                            return this.setValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
                        },
                        transform: function (t, e, n) {
                            var i = o.fromQuat(n).val,
                                a = e.x,
                                r = e.y,
                                s = e.z;
                            return this.setValues(i[0] * a, i[1] * a, i[2] * a, 0, i[4] * r, i[5] * r, i[6] * r, 0, i[8] * s, i[9] * s, i[10] * s, 0, t.x, t.y, t.z, 1)
                        },
                        xyz: function (t, e, n) {
                            this.identity();
                            var i = this.val;
                            return i[12] = t, i[13] = e, i[14] = n, this
                        },
                        scaling: function (t, e, n) {
                            this.zero();
                            var i = this.val;
                            return i[0] = t, i[5] = e, i[10] = n, i[15] = 1, this
                        },
                        identity: function () {
                            return this.setValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
                        },
                        transpose: function () {
                            var t = this.val,
                                e = t[1],
                                n = t[2],
                                i = t[3],
                                a = t[6],
                                r = t[7],
                                s = t[11];
                            return t[1] = t[4], t[2] = t[8], t[3] = t[12], t[4] = e, t[6] = t[9], t[7] = t[13], t[8] = n, t[9] = a, t[11] = t[14], t[12] = i, t[13] = r, t[14] = s, this
                        },
                        getInverse: function (t) {
                            return this.copy(t), this.invert()
                        },
                        invert: function () {
                            var t = this.val,
                                e = t[0],
                                n = t[1],
                                i = t[2],
                                a = t[3],
                                r = t[4],
                                s = t[5],
                                o = t[6],
                                l = t[7],
                                c = t[8],
                                u = t[9],
                                h = t[10],
                                d = t[11],
                                f = t[12],
                                p = t[13],
                                g = t[14],
                                v = t[15],
                                m = e * s - n * r,
                                E = e * o - i * r,
                                y = e * l - a * r,
                                A = n * o - i * s,
                                T = n * l - a * s,
                                S = i * l - a * o,
                                M = c * p - u * f,
                                w = c * g - h * f,
                                x = c * v - d * f,
                                C = u * g - h * p,
                                I = u * v - d * p,
                                b = h * v - d * g,
                                R = m * b - E * I + y * C + A * x - T * w + S * M;
                            return R ? (R = 1 / R, this.setValues((s * b - o * I + l * C) * R, (i * I - n * b - a * C) * R, (p * S - g * T + v * A) * R, (h * T - u * S - d * A) * R, (o * x - r * b - l * w) * R, (e * b - i * x + a * w) * R, (g * y - f * S - v * E) * R, (c * S - h * y + d * E) * R, (r * I - s * x + l * M) * R, (n * x - e * I - a * M) * R, (f * T - p * y + v * m) * R, (u * y - c * T - d * m) * R, (s * w - r * C - o * M) * R, (e * C - n * w + i * M) * R, (p * E - f * A - g * m) * R, (c * A - u * E + h * m) * R)) : this
                        },
                        adjoint: function () {
                            var t = this.val,
                                e = t[0],
                                n = t[1],
                                i = t[2],
                                a = t[3],
                                r = t[4],
                                s = t[5],
                                o = t[6],
                                l = t[7],
                                c = t[8],
                                u = t[9],
                                h = t[10],
                                d = t[11],
                                f = t[12],
                                p = t[13],
                                g = t[14],
                                v = t[15];
                            return this.setValues(s * (h * v - d * g) - u * (o * v - l * g) + p * (o * d - l * h), -(n * (h * v - d * g) - u * (i * v - a * g) + p * (i * d - a * h)), n * (o * v - l * g) - s * (i * v - a * g) + p * (i * l - a * o), -(n * (o * d - l * h) - s * (i * d - a * h) + u * (i * l - a * o)), -(r * (h * v - d * g) - c * (o * v - l * g) + f * (o * d - l * h)), e * (h * v - d * g) - c * (i * v - a * g) + f * (i * d - a * h), -(e * (o * v - l * g) - r * (i * v - a * g) + f * (i * l - a * o)), e * (o * d - l * h) - r * (i * d - a * h) + c * (i * l - a * o), r * (u * v - d * p) - c * (s * v - l * p) + f * (s * d - l * u), -(e * (u * v - d * p) - c * (n * v - a * p) + f * (n * d - a * u)), e * (s * v - l * p) - r * (n * v - a * p) + f * (n * l - a * s), -(e * (s * d - l * u) - r * (n * d - a * u) + c * (n * l - a * s)), -(r * (u * g - h * p) - c * (s * g - o * p) + f * (s * h - o * u)), e * (u * g - h * p) - c * (n * g - i * p) + f * (n * h - i * u), -(e * (s * g - o * p) - r * (n * g - i * p) + f * (n * o - i * s)), e * (s * h - o * u) - r * (n * h - i * u) + c * (n * o - i * s))
                        },
                        determinant: function () {
                            var t = this.val,
                                e = t[0],
                                n = t[1],
                                i = t[2],
                                a = t[3],
                                r = t[4],
                                s = t[5],
                                o = t[6],
                                l = t[7],
                                c = t[8],
                                u = t[9],
                                h = t[10],
                                d = t[11],
                                f = t[12],
                                p = t[13],
                                g = t[14],
                                v = t[15];
                            return (e * s - n * r) * (h * v - d * g) - (e * o - i * r) * (u * v - d * p) + (e * l - a * r) * (u * g - h * p) + (n * o - i * s) * (c * v - d * f) - (n * l - a * s) * (c * g - h * f) + (i * l - a * o) * (c * p - u * f)
                        },
                        multiply: function (t) {
                            var e = this.val,
                                n = e[0],
                                i = e[1],
                                a = e[2],
                                r = e[3],
                                s = e[4],
                                o = e[5],
                                l = e[6],
                                c = e[7],
                                u = e[8],
                                h = e[9],
                                d = e[10],
                                f = e[11],
                                p = e[12],
                                g = e[13],
                                v = e[14],
                                m = e[15],
                                E = t.val,
                                y = E[0],
                                A = E[1],
                                T = E[2],
                                S = E[3];
                            return e[0] = y * n + A * s + T * u + S * p, e[1] = y * i + A * o + T * h + S * g, e[2] = y * a + A * l + T * d + S * v, e[3] = y * r + A * c + T * f + S * m, y = E[4], A = E[5], T = E[6], S = E[7], e[4] = y * n + A * s + T * u + S * p, e[5] = y * i + A * o + T * h + S * g, e[6] = y * a + A * l + T * d + S * v, e[7] = y * r + A * c + T * f + S * m, y = E[8], A = E[9], T = E[10], S = E[11], e[8] = y * n + A * s + T * u + S * p, e[9] = y * i + A * o + T * h + S * g, e[10] = y * a + A * l + T * d + S * v, e[11] = y * r + A * c + T * f + S * m, y = E[12], A = E[13], T = E[14], S = E[15], e[12] = y * n + A * s + T * u + S * p, e[13] = y * i + A * o + T * h + S * g, e[14] = y * a + A * l + T * d + S * v, e[15] = y * r + A * c + T * f + S * m, this
                        },
                        multiplyLocal: function (t) {
                            var e = this.val,
                                n = t.val;
                            return this.setValues(e[0] * n[0] + e[1] * n[4] + e[2] * n[8] + e[3] * n[12], e[0] * n[1] + e[1] * n[5] + e[2] * n[9] + e[3] * n[13], e[0] * n[2] + e[1] * n[6] + e[2] * n[10] + e[3] * n[14], e[0] * n[3] + e[1] * n[7] + e[2] * n[11] + e[3] * n[15], e[4] * n[0] + e[5] * n[4] + e[6] * n[8] + e[7] * n[12], e[4] * n[1] + e[5] * n[5] + e[6] * n[9] + e[7] * n[13], e[4] * n[2] + e[5] * n[6] + e[6] * n[10] + e[7] * n[14], e[4] * n[3] + e[5] * n[7] + e[6] * n[11] + e[7] * n[15], e[8] * n[0] + e[9] * n[4] + e[10] * n[8] + e[11] * n[12], e[8] * n[1] + e[9] * n[5] + e[10] * n[9] + e[11] * n[13], e[8] * n[2] + e[9] * n[6] + e[10] * n[10] + e[11] * n[14], e[8] * n[3] + e[9] * n[7] + e[10] * n[11] + e[11] * n[15], e[12] * n[0] + e[13] * n[4] + e[14] * n[8] + e[15] * n[12], e[12] * n[1] + e[13] * n[5] + e[14] * n[9] + e[15] * n[13], e[12] * n[2] + e[13] * n[6] + e[14] * n[10] + e[15] * n[14], e[12] * n[3] + e[13] * n[7] + e[14] * n[11] + e[15] * n[15])
                        },
                        premultiply: function (t) {
                            return this.multiplyMatrices(t, this)
                        },
                        multiplyMatrices: function (t, e) {
                            var n = t.val,
                                i = e.val,
                                a = n[0],
                                r = n[4],
                                s = n[8],
                                o = n[12],
                                l = n[1],
                                c = n[5],
                                u = n[9],
                                h = n[13],
                                d = n[2],
                                f = n[6],
                                p = n[10],
                                g = n[14],
                                v = n[3],
                                m = n[7],
                                E = n[11],
                                y = n[15],
                                A = i[0],
                                T = i[4],
                                S = i[8],
                                M = i[12],
                                w = i[1],
                                x = i[5],
                                C = i[9],
                                I = i[13],
                                b = i[2],
                                R = i[6],
                                P = i[10],
                                _ = i[14],
                                k = i[3],
                                L = i[7],
                                D = i[11],
                                O = i[15];
                            return this.setValues(a * A + r * w + s * b + o * k, l * A + c * w + u * b + h * k, d * A + f * w + p * b + g * k, v * A + m * w + E * b + y * k, a * T + r * x + s * R + o * L, l * T + c * x + u * R + h * L, d * T + f * x + p * R + g * L, v * T + m * x + E * R + y * L, a * S + r * C + s * P + o * D, l * S + c * C + u * P + h * D, d * S + f * C + p * P + g * D, v * S + m * C + E * P + y * D, a * M + r * I + s * _ + o * O, l * M + c * I + u * _ + h * O, d * M + f * I + p * _ + g * O, v * M + m * I + E * _ + y * O)
                        },
                        translate: function (t) {
                            return this.translateXYZ(t.x, t.y, t.z)
                        },
                        translateXYZ: function (t, e, n) {
                            var i = this.val;
                            return i[12] = i[0] * t + i[4] * e + i[8] * n + i[12], i[13] = i[1] * t + i[5] * e + i[9] * n + i[13], i[14] = i[2] * t + i[6] * e + i[10] * n + i[14], i[15] = i[3] * t + i[7] * e + i[11] * n + i[15], this
                        },
                        scale: function (t) {
                            return this.scaleXYZ(t.x, t.y, t.z)
                        },
                        scaleXYZ: function (t, e, n) {
                            var i = this.val;
                            return i[0] = i[0] * t, i[1] = i[1] * t, i[2] = i[2] * t, i[3] = i[3] * t, i[4] = i[4] * e, i[5] = i[5] * e, i[6] = i[6] * e, i[7] = i[7] * e, i[8] = i[8] * n, i[9] = i[9] * n, i[10] = i[10] * n, i[11] = i[11] * n, this
                        },
                        makeRotationAxis: function (t, e) {
                            var n = Math.cos(e),
                                i = Math.sin(e),
                                a = 1 - n,
                                r = t.x,
                                s = t.y,
                                o = t.z,
                                l = a * r,
                                c = a * s;
                            return this.setValues(l * r + n, l * s - i * o, l * o + i * s, 0, l * s + i * o, c * s + n, c * o - i * r, 0, l * o - i * s, c * o + i * r, a * o * o + n, 0, 0, 0, 0, 1)
                        },
                        rotate: function (t, e) {
                            var n = this.val,
                                i = e.x,
                                a = e.y,
                                s = e.z,
                                o = Math.sqrt(i * i + a * a + s * s);
                            if (Math.abs(o) < r) return this;
                            i *= o = 1 / o, a *= o, s *= o;
                            var l = Math.sin(t),
                                c = Math.cos(t),
                                u = 1 - c,
                                h = n[0],
                                d = n[1],
                                f = n[2],
                                p = n[3],
                                g = n[4],
                                v = n[5],
                                m = n[6],
                                E = n[7],
                                y = n[8],
                                A = n[9],
                                T = n[10],
                                S = n[11],
                                M = n[12],
                                w = n[13],
                                x = n[14],
                                C = n[15],
                                I = i * i * u + c,
                                b = a * i * u + s * l,
                                R = s * i * u - a * l,
                                P = i * a * u - s * l,
                                _ = a * a * u + c,
                                k = s * a * u + i * l,
                                L = i * s * u + a * l,
                                D = a * s * u - i * l,
                                O = s * s * u + c;
                            return this.setValues(h * I + g * b + y * R, d * I + v * b + A * R, f * I + m * b + T * R, p * I + E * b + S * R, h * P + g * _ + y * k, d * P + v * _ + A * k, f * P + m * _ + T * k, p * P + E * _ + S * k, h * L + g * D + y * O, d * L + v * D + A * O, f * L + m * D + T * O, p * L + E * D + S * O, M, w, x, C)
                        },
                        rotateX: function (t) {
                            var e = this.val,
                                n = Math.sin(t),
                                i = Math.cos(t),
                                a = e[4],
                                r = e[5],
                                s = e[6],
                                o = e[7],
                                l = e[8],
                                c = e[9],
                                u = e[10],
                                h = e[11];
                            return e[4] = a * i + l * n, e[5] = r * i + c * n, e[6] = s * i + u * n, e[7] = o * i + h * n, e[8] = l * i - a * n, e[9] = c * i - r * n, e[10] = u * i - s * n, e[11] = h * i - o * n, this
                        },
                        rotateY: function (t) {
                            var e = this.val,
                                n = Math.sin(t),
                                i = Math.cos(t),
                                a = e[0],
                                r = e[1],
                                s = e[2],
                                o = e[3],
                                l = e[8],
                                c = e[9],
                                u = e[10],
                                h = e[11];
                            return e[0] = a * i - l * n, e[1] = r * i - c * n, e[2] = s * i - u * n, e[3] = o * i - h * n, e[8] = a * n + l * i, e[9] = r * n + c * i, e[10] = s * n + u * i, e[11] = o * n + h * i, this
                        },
                        rotateZ: function (t) {
                            var e = this.val,
                                n = Math.sin(t),
                                i = Math.cos(t),
                                a = e[0],
                                r = e[1],
                                s = e[2],
                                o = e[3],
                                l = e[4],
                                c = e[5],
                                u = e[6],
                                h = e[7];
                            return e[0] = a * i + l * n, e[1] = r * i + c * n, e[2] = s * i + u * n, e[3] = o * i + h * n, e[4] = l * i - a * n, e[5] = c * i - r * n, e[6] = u * i - s * n, e[7] = h * i - o * n, this
                        },
                        fromRotationTranslation: function (t, e) {
                            var n = t.x,
                                i = t.y,
                                a = t.z,
                                r = t.w,
                                s = n + n,
                                o = i + i,
                                l = a + a,
                                c = n * s,
                                u = n * o,
                                h = n * l,
                                d = i * o,
                                f = i * l,
                                p = a * l,
                                g = r * s,
                                v = r * o,
                                m = r * l;
                            return this.setValues(1 - (d + p), u + m, h - v, 0, u - m, 1 - (c + p), f + g, 0, h + v, f - g, 1 - (c + d), 0, e.x, e.y, e.z, 1)
                        },
                        fromQuat: function (t) {
                            var e = t.x,
                                n = t.y,
                                i = t.z,
                                a = t.w,
                                r = e + e,
                                s = n + n,
                                o = i + i,
                                l = e * r,
                                c = e * s,
                                u = e * o,
                                h = n * s,
                                d = n * o,
                                f = i * o,
                                p = a * r,
                                g = a * s,
                                v = a * o;
                            return this.setValues(1 - (h + f), c + v, u - g, 0, c - v, 1 - (l + f), d + p, 0, u + g, d - p, 1 - (l + h), 0, 0, 0, 0, 1)
                        },
                        frustum: function (t, e, n, i, a, r) {
                            var s = 1 / (e - t),
                                o = 1 / (i - n),
                                l = 1 / (a - r);
                            return this.setValues(2 * a * s, 0, 0, 0, 0, 2 * a * o, 0, 0, (e + t) * s, (i + n) * o, (r + a) * l, -1, 0, 0, r * a * 2 * l, 0)
                        },
                        perspective: function (t, e, n, i) {
                            var a = 1 / Math.tan(t / 2),
                                r = 1 / (n - i);
                            return this.setValues(a / e, 0, 0, 0, 0, a, 0, 0, 0, 0, (i + n) * r, -1, 0, 0, 2 * i * n * r, 0)
                        },
                        perspectiveLH: function (t, e, n, i) {
                            return this.setValues(2 * n / t, 0, 0, 0, 0, 2 * n / e, 0, 0, 0, 0, -i / (n - i), 1, 0, 0, n * i / (n - i), 0)
                        },
                        ortho: function (t, e, n, i, a, r) {
                            var s = t - e,
                                o = n - i,
                                l = a - r;
                            return s = 0 === s ? s : 1 / s, o = 0 === o ? o : 1 / o, l = 0 === l ? l : 1 / l, this.setValues(-2 * s, 0, 0, 0, 0, -2 * o, 0, 0, 0, 0, 2 * l, 0, (t + e) * s, (i + n) * o, (r + a) * l, 1)
                        },
                        lookAtRH: function (t, e, n) {
                            var i = this.val;
                            return h.subVectors(t, e), 0 === h.getLengthSquared() && (h.z = 1), h.normalize(), c.crossVectors(n, h), 0 === c.getLengthSquared() && (1 === Math.abs(n.z) ? h.x += 1e-4 : h.z += 1e-4, h.normalize(), c.crossVectors(n, h)), c.normalize(), u.crossVectors(h, c), i[0] = c.x, i[1] = c.y, i[2] = c.z, i[4] = u.x, i[5] = u.y, i[6] = u.z, i[8] = h.x, i[9] = h.y, i[10] = h.z, this
                        },
                        lookAt: function (t, e, n) {
                            var i = t.x,
                                a = t.y,
                                s = t.z,
                                o = n.x,
                                l = n.y,
                                c = n.z,
                                u = e.x,
                                h = e.y,
                                d = e.z;
                            if (Math.abs(i - u) < r && Math.abs(a - h) < r && Math.abs(s - d) < r) return this.identity();
                            var f = i - u,
                                p = a - h,
                                g = s - d,
                                v = 1 / Math.sqrt(f * f + p * p + g * g),
                                m = l * (g *= v) - c * (p *= v),
                                E = c * (f *= v) - o * g,
                                y = o * p - l * f;
                            (v = Math.sqrt(m * m + E * E + y * y)) ? (m *= v = 1 / v, E *= v, y *= v) : (m = 0, E = 0, y = 0);
                            var A = p * y - g * E,
                                T = g * m - f * y,
                                S = f * E - p * m;
                            return (v = Math.sqrt(A * A + T * T + S * S)) ? (A *= v = 1 / v, T *= v, S *= v) : (A = 0, T = 0, S = 0), this.setValues(m, A, f, 0, E, T, p, 0, y, S, g, 0, -(m * i + E * a + y * s), -(A * i + T * a + S * s), -(f * i + p * a + g * s), 1)
                        },
                        yawPitchRoll: function (t, e, n) {
                            this.zero(), o.zero(), l.zero();
                            var i = this.val,
                                a = o.val,
                                r = l.val,
                                s = Math.sin(n),
                                c = Math.cos(n);
                            return i[10] = 1, i[15] = 1, i[0] = c, i[1] = s, i[4] = -s, i[5] = c, s = Math.sin(e), c = Math.cos(e), a[0] = 1, a[15] = 1, a[5] = c, a[10] = c, a[9] = -s, a[6] = s, s = Math.sin(t), c = Math.cos(t), r[5] = 1, r[15] = 1, r[0] = c, r[2] = -s, r[8] = s, r[10] = c, this.multiplyLocal(o), this.multiplyLocal(l), this
                        },
                        setWorldMatrix: function (t, e, n, i, a) {
                            return this.yawPitchRoll(t.y, t.x, t.z), o.scaling(n.x, n.y, n.z), l.xyz(e.x, e.y, e.z), this.multiplyLocal(o), this.multiplyLocal(l), i && this.multiplyLocal(i), a && this.multiplyLocal(a), this
                        },
                        multiplyToMat4: function (t, e) {
                            var n = this.val,
                                i = t.val,
                                a = n[0],
                                r = n[1],
                                s = n[2],
                                o = n[3],
                                l = n[4],
                                c = n[5],
                                u = n[6],
                                h = n[7],
                                d = n[8],
                                f = n[9],
                                p = n[10],
                                g = n[11],
                                v = n[12],
                                m = n[13],
                                E = n[14],
                                y = n[15],
                                A = i[0],
                                T = i[1],
                                S = i[2],
                                M = i[3],
                                w = i[4],
                                x = i[5],
                                C = i[6],
                                I = i[7],
                                b = i[8],
                                R = i[9],
                                P = i[10],
                                _ = i[11],
                                k = i[12],
                                L = i[13],
                                D = i[14],
                                O = i[15];
                            return e.setValues(A * a + T * l + S * d + M * v, T * r + T * c + S * f + M * m, S * s + T * u + S * p + M * E, M * o + T * h + S * g + M * y, w * a + x * l + C * d + I * v, w * r + x * c + C * f + I * m, w * s + x * u + C * p + I * E, w * o + x * h + C * g + I * y, b * a + R * l + P * d + _ * v, b * r + R * c + P * f + _ * m, b * s + R * u + P * p + _ * E, b * o + R * h + P * g + _ * y, k * a + L * l + D * d + O * v, k * r + L * c + D * f + O * m, k * s + L * u + D * p + O * E, k * o + L * h + D * g + O * y)
                        },
                        fromRotationXYTranslation: function (t, e, n) {
                            var i = e.x,
                                a = e.y,
                                r = e.z,
                                s = Math.sin(t.x),
                                o = Math.cos(t.x),
                                l = Math.sin(t.y),
                                c = Math.cos(t.y),
                                u = i,
                                h = a,
                                d = r,
                                f = -s,
                                p = 0 - f * l,
                                g = 0 - o * l,
                                v = f * c,
                                m = o * c;
                            return n || (u = c * i + l * r, h = p * i + o * a + v * r, d = g * i + s * a + m * r), this.setValues(c, p, g, 0, 0, o, s, 0, l, v, m, 0, u, h, d, 1)
                        },
                        getMaxScaleOnAxis: function () {
                            var t = this.val,
                                e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                                n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                                i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                            return Math.sqrt(Math.max(e, n, i))
                        }
                    }),
                    o = new s,
                    l = new s,
                    c = new a,
                    u = new a,
                    h = new a;
                t.exports = s
            }, function (t, e, n) {
                var i = n(0),
                    a = n(15),
                    r = n(205),
                    s = n(11),
                    o = n(216),
                    l = n(45),
                    c = n(217),
                    u = n(46),
                    h = new i({
                        initialize: function (t, e) {
                            this.loader = t, this.cache = s(e, "cache", !1), this.type = s(e, "type", !1), this.key = s(e, "key", !1);
                            var n = this.key;
                            if (t.prefix && "" !== t.prefix && (this.key = t.prefix + n), !this.type || !this.key) throw new Error("Invalid Loader." + this.type + " key");
                            var i = s(e, "url");
                            void 0 === i ? i = t.path + n + "." + s(e, "extension", "") : "string" != typeof i || i.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/) || (i = t.path + i), this.url = i, this.src = "", this.xhrSettings = u(s(e, "responseType", void 0)), s(e, "xhrSettings", !1) && (this.xhrSettings = l(this.xhrSettings, s(e, "xhrSettings", {}))), this.xhrLoader = null, this.state = "function" == typeof this.url ? a.FILE_POPULATED : a.FILE_PENDING, this.bytesTotal = 0, this.bytesLoaded = -1, this.percentComplete = -1, this.crossOrigin = void 0, this.data = void 0, this.config = s(e, "config", {}), this.multiFile, this.linkFile
                        },
                        setLink: function (t) {
                            this.linkFile = t, t.linkFile = this
                        },
                        resetXHR: function () {
                            this.xhrLoader && (this.xhrLoader.onload = void 0, this.xhrLoader.onerror = void 0, this.xhrLoader.onprogress = void 0)
                        },
                        load: function () {
                            var t;
                            this.state === a.FILE_POPULATED ? this.loader.nextFile(this, !0) : (this.state = a.FILE_LOADING, this.src = o(this, this.loader.baseURL), 0 === g()(t = this.src).call(t, "data:") || (this.xhrLoader = c(this, this.loader.xhr)))
                        },
                        onLoad: function (t, e) {
                            var n, i = t.responseURL && 0 === g()(n = t.responseURL).call(n, "file://") && 0 === e.target.status,
                                r = !(e.target && 200 !== e.target.status) || i;
                            4 === t.readyState && t.status >= 400 && t.status <= 599 && (r = !1), this.state = a.FILE_LOADED, this.resetXHR(), this.loader.nextFile(this, r)
                        },
                        onError: function () {
                            this.resetXHR(), this.loader.nextFile(this, !1)
                        },
                        onProgress: function (t) {
                            t.lengthComputable && (this.bytesLoaded = t.loaded, this.bytesTotal = t.total, this.percentComplete = Math.min(this.bytesLoaded / this.bytesTotal, 1), this.loader.emit(r.FILE_PROGRESS, this, this.percentComplete))
                        },
                        onProcess: function () {
                            this.state = a.FILE_PROCESSING, this.onProcessComplete()
                        },
                        onProcessComplete: function () {
                            this.state = a.FILE_COMPLETE, this.multiFile && this.multiFile.onFileComplete(this), this.loader.fileProcessComplete(this)
                        },
                        onProcessError: function () {
                            this.state = a.FILE_ERRORED, this.multiFile && this.multiFile.onFileFailed(this), this.loader.fileProcessComplete(this)
                        },
                        hasCacheConflict: function () {
                            return this.cache && this.cache.exists(this.key)
                        },
                        addToCache: function () {
                            this.cache && this.cache.add(this.key, this.data), this.pendingDestroy()
                        },
                        pendingDestroy: function (t) {
                            void 0 === t && (t = this.data);
                            var e = this.key,
                                n = this.type;
                            this.loader.emit(r.FILE_COMPLETE, e, n, t), this.loader.emit(r.FILE_KEY_COMPLETE + n + "-" + e, e, n, t), this.loader.flagForRemoval(this)
                        },
                        destroy: function () {
                            this.loader = null, this.cache = null, this.xhrSettings = null, this.multiFile = null, this.linkFile = null, this.data = null
                        }
                    });
                h.createObjectURL = function (t, e, n) {
                    if ("function" == typeof wr()) t.src = wr().createObjectURL(e);
                    else {
                        var i = new FileReader;
                        i.onload = function () {
                            t.removeAttribute("crossOrigin"), t.src = "data:" + (e.type || n) + ";base64," + i.result.split(",")[1]
                        }, i.onerror = t.onerror, i.readAsDataURL(e)
                    }
                }, h.revokeObjectURL = function (t) {
                    "function" == typeof wr() && wr().revokeObjectURL(t.src)
                }, t.exports = h
            }, function (t, e) {
                var n = {},
                    i = {
                        install: function (t) {
                            for (var e in n) t[e] = n[e]
                        },
                        register: function (t, e) {
                            n[t] = e
                        },
                        destroy: function () {
                            n = {}
                        }
                    };
                t.exports = i
            }, function (t, e, n) {
                var i = n(0),
                    a = n(4),
                    r = n(2),
                    s = new i({
                        initialize: function (t, e, n, i, a, r) {
                            void 0 === t && (t = 1), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 1), void 0 === a && (a = 0), void 0 === r && (r = 0), this.matrix = new Float32Array([t, e, n, i, a, r, 0, 0, 1]), this.decomposedMatrix = {
                                translateX: 0,
                                translateY: 0,
                                scaleX: 1,
                                scaleY: 1,
                                rotation: 0
                            }
                        },
                        a: {
                            get: function () {
                                return this.matrix[0]
                            },
                            set: function (t) {
                                this.matrix[0] = t
                            }
                        },
                        b: {
                            get: function () {
                                return this.matrix[1]
                            },
                            set: function (t) {
                                this.matrix[1] = t
                            }
                        },
                        c: {
                            get: function () {
                                return this.matrix[2]
                            },
                            set: function (t) {
                                this.matrix[2] = t
                            }
                        },
                        d: {
                            get: function () {
                                return this.matrix[3]
                            },
                            set: function (t) {
                                this.matrix[3] = t
                            }
                        },
                        e: {
                            get: function () {
                                return this.matrix[4]
                            },
                            set: function (t) {
                                this.matrix[4] = t
                            }
                        },
                        f: {
                            get: function () {
                                return this.matrix[5]
                            },
                            set: function (t) {
                                this.matrix[5] = t
                            }
                        },
                        tx: {
                            get: function () {
                                return this.matrix[4]
                            },
                            set: function (t) {
                                this.matrix[4] = t
                            }
                        },
                        ty: {
                            get: function () {
                                return this.matrix[5]
                            },
                            set: function (t) {
                                this.matrix[5] = t
                            }
                        },
                        rotation: {
                            get: function () {
                                return Math.acos(this.a / this.scaleX) * (Math.atan(-this.c / this.a) < 0 ? -1 : 1)
                            }
                        },
                        rotationNormalized: {
                            get: function () {
                                var t = this.matrix,
                                    e = t[0],
                                    n = t[1],
                                    i = t[2],
                                    r = t[3];
                                return e || n ? n > 0 ? Math.acos(e / this.scaleX) : -Math.acos(e / this.scaleX) : i || r ? a.TAU - (r > 0 ? Math.acos(-i / this.scaleY) : -Math.acos(i / this.scaleY)) : 0
                            }
                        },
                        scaleX: {
                            get: function () {
                                return Math.sqrt(this.a * this.a + this.b * this.b)
                            }
                        },
                        scaleY: {
                            get: function () {
                                return Math.sqrt(this.c * this.c + this.d * this.d)
                            }
                        },
                        loadIdentity: function () {
                            var t = this.matrix;
                            return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t[4] = 0, t[5] = 0, this
                        },
                        translate: function (t, e) {
                            var n = this.matrix;
                            return n[4] = n[0] * t + n[2] * e + n[4], n[5] = n[1] * t + n[3] * e + n[5], this
                        },
                        scale: function (t, e) {
                            var n = this.matrix;
                            return n[0] *= t, n[1] *= t, n[2] *= e, n[3] *= e, this
                        },
                        rotate: function (t) {
                            var e = Math.sin(t),
                                n = Math.cos(t),
                                i = this.matrix,
                                a = i[0],
                                r = i[1],
                                s = i[2],
                                o = i[3];
                            return i[0] = a * n + s * e, i[1] = r * n + o * e, i[2] = a * -e + s * n, i[3] = r * -e + o * n, this
                        },
                        multiply: function (t, e) {
                            var n = this.matrix,
                                i = t.matrix,
                                a = n[0],
                                r = n[1],
                                s = n[2],
                                o = n[3],
                                l = n[4],
                                c = n[5],
                                u = i[0],
                                h = i[1],
                                d = i[2],
                                f = i[3],
                                p = i[4],
                                g = i[5],
                                v = void 0 === e ? this : e;
                            return v.a = u * a + h * s, v.b = u * r + h * o, v.c = d * a + f * s, v.d = d * r + f * o, v.e = p * a + g * s + l, v.f = p * r + g * o + c, v
                        },
                        multiplyWithOffset: function (t, e, n) {
                            var i = this.matrix,
                                a = t.matrix,
                                r = i[0],
                                s = i[1],
                                o = i[2],
                                l = i[3],
                                c = e * r + n * o + i[4],
                                u = e * s + n * l + i[5],
                                h = a[0],
                                d = a[1],
                                f = a[2],
                                p = a[3],
                                g = a[4],
                                v = a[5];
                            return i[0] = h * r + d * o, i[1] = h * s + d * l, i[2] = f * r + p * o, i[3] = f * s + p * l, i[4] = g * r + v * o + c, i[5] = g * s + v * l + u, this
                        },
                        transform: function (t, e, n, i, a, r) {
                            var s = this.matrix,
                                o = s[0],
                                l = s[1],
                                c = s[2],
                                u = s[3],
                                h = s[4],
                                d = s[5];
                            return s[0] = t * o + e * c, s[1] = t * l + e * u, s[2] = n * o + i * c, s[3] = n * l + i * u, s[4] = a * o + r * c + h, s[5] = a * l + r * u + d, this
                        },
                        transformPoint: function (t, e, n) {
                            void 0 === n && (n = {
                                x: 0,
                                y: 0
                            });
                            var i = this.matrix,
                                a = i[0],
                                r = i[1],
                                s = i[2],
                                o = i[3],
                                l = i[4],
                                c = i[5];
                            return n.x = t * a + e * s + l, n.y = t * r + e * o + c, n
                        },
                        invert: function () {
                            var t = this.matrix,
                                e = t[0],
                                n = t[1],
                                i = t[2],
                                a = t[3],
                                r = t[4],
                                s = t[5],
                                o = e * a - n * i;
                            return t[0] = a / o, t[1] = -n / o, t[2] = -i / o, t[3] = e / o, t[4] = (i * s - a * r) / o, t[5] = -(e * s - n * r) / o, this
                        },
                        copyFrom: function (t) {
                            var e = this.matrix;
                            return e[0] = t.a, e[1] = t.b, e[2] = t.c, e[3] = t.d, e[4] = t.e, e[5] = t.f, this
                        },
                        copyFromArray: function (t) {
                            var e = this.matrix;
                            return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], this
                        },
                        copyToContext: function (t) {
                            var e = this.matrix;
                            return t.transform(e[0], e[1], e[2], e[3], e[4], e[5]), t
                        },
                        setToContext: function (t) {
                            var e = this.matrix;
                            return t.setTransform(e[0], e[1], e[2], e[3], e[4], e[5]), t
                        },
                        copyToArray: function (t) {
                            var e = this.matrix;
                            return void 0 === t ? t = [e[0], e[1], e[2], e[3], e[4], e[5]] : (t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5]), t
                        },
                        setTransform: function (t, e, n, i, a, r) {
                            var s = this.matrix;
                            return s[0] = t, s[1] = e, s[2] = n, s[3] = i, s[4] = a, s[5] = r, this
                        },
                        decomposeMatrix: function () {
                            var t = this.decomposedMatrix,
                                e = this.matrix,
                                n = e[0],
                                i = e[1],
                                a = e[2],
                                r = e[3],
                                s = n * r - i * a;
                            if (t.translateX = e[4], t.translateY = e[5], n || i) {
                                var o = Math.sqrt(n * n + i * i);
                                t.rotation = i > 0 ? Math.acos(n / o) : -Math.acos(n / o), t.scaleX = o, t.scaleY = s / o
                            } else if (a || r) {
                                var l = Math.sqrt(a * a + r * r);
                                t.rotation = .5 * Math.PI - (r > 0 ? Math.acos(-a / l) : -Math.acos(a / l)), t.scaleX = s / l, t.scaleY = l
                            } else t.rotation = 0, t.scaleX = 0, t.scaleY = 0;
                            return t
                        },
                        applyITRS: function (t, e, n, i, a) {
                            var r = this.matrix,
                                s = Math.sin(n),
                                o = Math.cos(n);
                            return r[4] = t, r[5] = e, r[0] = o * i, r[1] = s * i, r[2] = -s * a, r[3] = o * a, this
                        },
                        applyInverse: function (t, e, n) {
                            void 0 === n && (n = new r);
                            var i = this.matrix,
                                a = i[0],
                                s = i[1],
                                o = i[2],
                                l = i[3],
                                c = i[4],
                                u = i[5],
                                h = 1 / (a * l + o * -s);
                            return n.x = l * h * t + -o * h * e + (u * o - c * l) * h, n.y = a * h * e + -s * h * t + (-u * a + c * s) * h, n
                        },
                        getX: function (t, e) {
                            return t * this.a + e * this.c + this.e
                        },
                        getY: function (t, e) {
                            return t * this.b + e * this.d + this.f
                        },
                        getXRound: function (t, e, n) {
                            var i = this.getX(t, e);
                            return n && (i = Math.round(i)), i
                        },
                        getYRound: function (t, e, n) {
                            var i = this.getY(t, e);
                            return n && (i = Math.round(i)), i
                        },
                        getCSSMatrix: function () {
                            var t = this.matrix;
                            return "matrix(" + t[0] + "," + t[1] + "," + t[2] + "," + t[3] + "," + t[4] + "," + t[5] + ")"
                        },
                        destroy: function () {
                            this.matrix = null, this.decomposedMatrix = null
                        }
                    });
                t.exports = s
            }, function (t, e) {
                t.exports = function (t) {
                    if (!Array.isArray(t) || t.length < 2 || !Array.isArray(t[0])) return !1;
                    for (var e = t[0].length, n = 1; n < t.length; n++)
                        if (t[n].length !== e) return !1;
                    return !0
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(299),
                    r = n(61),
                    s = n(300),
                    o = n(26),
                    l = n(301),
                    c = n(306),
                    u = new i({
                        initialize: function (t, e, n, i) {
                            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.type = o.RECTANGLE, this.x = t, this.y = e, this.width = n, this.height = i
                        },
                        contains: function (t, e) {
                            return a(this, t, e)
                        },
                        getPoint: function (t, e) {
                            return r(this, t, e)
                        },
                        getPoints: function (t, e, n) {
                            return s(this, t, e, n)
                        },
                        getRandomPoint: function (t) {
                            return c(this, t)
                        },
                        setTo: function (t, e, n, i) {
                            return this.x = t, this.y = e, this.width = n, this.height = i, this
                        },
                        setEmpty: function () {
                            return this.setTo(0, 0, 0, 0)
                        },
                        setPosition: function (t, e) {
                            return void 0 === e && (e = t), this.x = t, this.y = e, this
                        },
                        setSize: function (t, e) {
                            return void 0 === e && (e = t), this.width = t, this.height = e, this
                        },
                        isEmpty: function () {
                            return this.width <= 0 || this.height <= 0
                        },
                        getLineA: function (t) {
                            return void 0 === t && (t = new l), t.setTo(this.x, this.y, this.right, this.y), t
                        },
                        getLineB: function (t) {
                            return void 0 === t && (t = new l), t.setTo(this.right, this.y, this.right, this.bottom), t
                        },
                        getLineC: function (t) {
                            return void 0 === t && (t = new l), t.setTo(this.right, this.bottom, this.x, this.bottom), t
                        },
                        getLineD: function (t) {
                            return void 0 === t && (t = new l), t.setTo(this.x, this.bottom, this.x, this.y), t
                        },
                        left: {
                            get: function () {
                                return this.x
                            },
                            set: function (t) {
                                t >= this.right ? this.width = 0 : this.width = this.right - t, this.x = t
                            }
                        },
                        right: {
                            get: function () {
                                return this.x + this.width
                            },
                            set: function (t) {
                                t <= this.x ? this.width = 0 : this.width = t - this.x
                            }
                        },
                        top: {
                            get: function () {
                                return this.y
                            },
                            set: function (t) {
                                t >= this.bottom ? this.height = 0 : this.height = this.bottom - t, this.y = t
                            }
                        },
                        bottom: {
                            get: function () {
                                return this.y + this.height
                            },
                            set: function (t) {
                                t <= this.y ? this.height = 0 : this.height = t - this.y
                            }
                        },
                        centerX: {
                            get: function () {
                                return this.x + this.width / 2
                            },
                            set: function (t) {
                                this.x = t - this.width / 2
                            }
                        },
                        centerY: {
                            get: function () {
                                return this.y + this.height / 2
                            },
                            set: function (t) {
                                this.y = t - this.height / 2
                            }
                        }
                    });
                t.exports = u
            }, function (t, e) {
                t.exports = {
                    CIRCLE: 0,
                    ELLIPSE: 1,
                    LINE: 2,
                    POINT: 3,
                    POLYGON: 4,
                    RECTANGLE: 5,
                    TRIANGLE: 6
                }
            }, function (t, e, n) {
                var i = n(7);
                t.exports = function t() {
                    var e, n, a, r, s, o, l = arguments[0] || {},
                        c = 1,
                        u = arguments.length,
                        h = !1;
                    for ("boolean" == typeof l && (h = l, l = arguments[1] || {}, c = 2), u === c && (l = this, --c); c < u; c++)
                        if (null != (e = arguments[c]))
                            for (n in e) a = l[n], l !== (r = e[n]) && (h && r && (i(r) || (s = Array.isArray(r))) ? (s ? (s = !1, o = a && Array.isArray(a) ? a : []) : o = a && i(a) ? a : {}, l[n] = t(h, o, r)) : void 0 !== r && (l[n] = r));
                    return l
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return Math.atan2(i - e, n - t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t %= 2 * Math.PI) >= 0 ? t : t + 2 * Math.PI
                }
            }, function (t, e, n) {
                var i = n(6);
                t.exports = function (t) {
                    return i(t, -Math.PI, Math.PI)
                }
            }, function (t, e, n) {
                var i = n(6);
                t.exports = function (t) {
                    return i(t, -180, 180)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return void 0 === n && (n = 1e-4), Math.abs(t - e) < n
                }
            }, function (t, e, n) {
                var i = n(34);
                t.exports = function (t, e) {
                    return i(t) / i(e) / i(t - e)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    if (0 === t) return 1;
                    for (var e = t; --t;) e *= t;
                    return e
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    var r = .5 * (i - e),
                        s = .5 * (a - n),
                        o = t * t;
                    return (2 * n - 2 * i + r + s) * (t * o) + (-3 * n + 3 * i - 2 * r - s) * o + r * t + n
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return (e - t) * n + t
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return t <= e ? 0 : t >= n ? 1 : (t = (t - e) / (n - e)) * t * (3 - 2 * t)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return (t = Math.max(0, Math.min(1, (t - e) / (n - e)))) * t * t * (t * (6 * t - 15) + 10)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = Math.cos(i),
                        r = Math.sin(i),
                        s = t.x - e,
                        o = t.y - n;
                    return t.x = s * a - o * r + e, t.y = s * r + o * a + n, t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t > 0 ? Math.ceil(t) : Math.floor(t)
                }
            }, function (t, e, n) {
                var i = n(2);
                t.exports = function (t, e, n, a, r, s, o, l) {
                    void 0 === l && (l = new i);
                    var c = Math.sin(r),
                        u = Math.cos(r),
                        h = u * s,
                        d = c * s,
                        f = -c * o,
                        p = u * o,
                        g = 1 / (h * p + f * -d);
                    return l.x = p * g * t + -f * g * e + (a * f - n * p) * g, l.y = h * g * e + -d * g * t + (-a * h + n * d) * g, l
                }
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t) {
                        this.val = new Float32Array(9), t ? this.copy(t) : this.identity()
                    },
                    clone: function () {
                        return new i(this)
                    },
                    set: function (t) {
                        return this.copy(t)
                    },
                    copy: function (t) {
                        var e = this.val,
                            n = t.val;
                        return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this
                    },
                    fromMat4: function (t) {
                        var e = t.val,
                            n = this.val;
                        return n[0] = e[0], n[1] = e[1], n[2] = e[2], n[3] = e[4], n[4] = e[5], n[5] = e[6], n[6] = e[8], n[7] = e[9], n[8] = e[10], this
                    },
                    fromArray: function (t) {
                        var e = this.val;
                        return e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[3], e[4] = t[4], e[5] = t[5], e[6] = t[6], e[7] = t[7], e[8] = t[8], this
                    },
                    identity: function () {
                        var t = this.val;
                        return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = 0, t[7] = 0, t[8] = 1, this
                    },
                    transpose: function () {
                        var t = this.val,
                            e = t[1],
                            n = t[2],
                            i = t[5];
                        return t[1] = t[3], t[2] = t[6], t[3] = e, t[5] = t[7], t[6] = n, t[7] = i, this
                    },
                    invert: function () {
                        var t = this.val,
                            e = t[0],
                            n = t[1],
                            i = t[2],
                            a = t[3],
                            r = t[4],
                            s = t[5],
                            o = t[6],
                            l = t[7],
                            c = t[8],
                            u = c * r - s * l,
                            h = -c * a + s * o,
                            d = l * a - r * o,
                            f = e * u + n * h + i * d;
                        return f ? (f = 1 / f, t[0] = u * f, t[1] = (-c * n + i * l) * f, t[2] = (s * n - i * r) * f, t[3] = h * f, t[4] = (c * e - i * o) * f, t[5] = (-s * e + i * a) * f, t[6] = d * f, t[7] = (-l * e + n * o) * f, t[8] = (r * e - n * a) * f, this) : null
                    },
                    adjoint: function () {
                        var t = this.val,
                            e = t[0],
                            n = t[1],
                            i = t[2],
                            a = t[3],
                            r = t[4],
                            s = t[5],
                            o = t[6],
                            l = t[7],
                            c = t[8];
                        return t[0] = r * c - s * l, t[1] = i * l - n * c, t[2] = n * s - i * r, t[3] = s * o - a * c, t[4] = e * c - i * o, t[5] = i * a - e * s, t[6] = a * l - r * o, t[7] = n * o - e * l, t[8] = e * r - n * a, this
                    },
                    determinant: function () {
                        var t = this.val,
                            e = t[0],
                            n = t[1],
                            i = t[2],
                            a = t[3],
                            r = t[4],
                            s = t[5],
                            o = t[6],
                            l = t[7],
                            c = t[8];
                        return e * (c * r - s * l) + n * (-c * a + s * o) + i * (l * a - r * o)
                    },
                    multiply: function (t) {
                        var e = this.val,
                            n = e[0],
                            i = e[1],
                            a = e[2],
                            r = e[3],
                            s = e[4],
                            o = e[5],
                            l = e[6],
                            c = e[7],
                            u = e[8],
                            h = t.val,
                            d = h[0],
                            f = h[1],
                            p = h[2],
                            g = h[3],
                            v = h[4],
                            m = h[5],
                            E = h[6],
                            y = h[7],
                            A = h[8];
                        return e[0] = d * n + f * r + p * l, e[1] = d * i + f * s + p * c, e[2] = d * a + f * o + p * u, e[3] = g * n + v * r + m * l, e[4] = g * i + v * s + m * c, e[5] = g * a + v * o + m * u, e[6] = E * n + y * r + A * l, e[7] = E * i + y * s + A * c, e[8] = E * a + y * o + A * u, this
                    },
                    translate: function (t) {
                        var e = this.val,
                            n = t.x,
                            i = t.y;
                        return e[6] = n * e[0] + i * e[3] + e[6], e[7] = n * e[1] + i * e[4] + e[7], e[8] = n * e[2] + i * e[5] + e[8], this
                    },
                    rotate: function (t) {
                        var e = this.val,
                            n = e[0],
                            i = e[1],
                            a = e[2],
                            r = e[3],
                            s = e[4],
                            o = e[5],
                            l = Math.sin(t),
                            c = Math.cos(t);
                        return e[0] = c * n + l * r, e[1] = c * i + l * s, e[2] = c * a + l * o, e[3] = c * r - l * n, e[4] = c * s - l * i, e[5] = c * o - l * a, this
                    },
                    scale: function (t) {
                        var e = this.val,
                            n = t.x,
                            i = t.y;
                        return e[0] = n * e[0], e[1] = n * e[1], e[2] = n * e[2], e[3] = i * e[3], e[4] = i * e[4], e[5] = i * e[5], this
                    },
                    fromQuat: function (t) {
                        var e = t.x,
                            n = t.y,
                            i = t.z,
                            a = t.w,
                            r = e + e,
                            s = n + n,
                            o = i + i,
                            l = e * r,
                            c = e * s,
                            u = e * o,
                            h = n * s,
                            d = n * o,
                            f = i * o,
                            p = a * r,
                            g = a * s,
                            v = a * o,
                            m = this.val;
                        return m[0] = 1 - (h + f), m[3] = c + v, m[6] = u - g, m[1] = c - v, m[4] = 1 - (l + f), m[7] = d + p, m[2] = u + g, m[5] = d - p, m[8] = 1 - (l + h), this
                    },
                    normalFromMat4: function (t) {
                        var e = t.val,
                            n = this.val,
                            i = e[0],
                            a = e[1],
                            r = e[2],
                            s = e[3],
                            o = e[4],
                            l = e[5],
                            c = e[6],
                            u = e[7],
                            h = e[8],
                            d = e[9],
                            f = e[10],
                            p = e[11],
                            g = e[12],
                            v = e[13],
                            m = e[14],
                            E = e[15],
                            y = i * l - a * o,
                            A = i * c - r * o,
                            T = i * u - s * o,
                            S = a * c - r * l,
                            M = a * u - s * l,
                            w = r * u - s * c,
                            x = h * v - d * g,
                            C = h * m - f * g,
                            I = h * E - p * g,
                            b = d * m - f * v,
                            R = d * E - p * v,
                            P = f * E - p * m,
                            _ = y * P - A * R + T * b + S * I - M * C + w * x;
                        return _ ? (_ = 1 / _, n[0] = (l * P - c * R + u * b) * _, n[1] = (c * I - o * P - u * C) * _, n[2] = (o * R - l * I + u * x) * _, n[3] = (r * R - a * P - s * b) * _, n[4] = (i * P - r * I + s * C) * _, n[5] = (a * I - i * R - s * x) * _, n[6] = (v * w - m * M + E * S) * _, n[7] = (m * T - g * w - E * A) * _, n[8] = (g * M - v * T + E * y) * _, this) : null
                    }
                });
                t.exports = i
            }, function (t, e, n) {
                var i = n(0),
                    a = n(42),
                    r = n(1),
                    s = n(14),
                    o = 1e-6,
                    l = new Int8Array([1, 2, 0]),
                    c = new Float32Array([0, 0, 0]),
                    u = new s(1, 0, 0),
                    h = new s(0, 1, 0),
                    d = new s,
                    f = new a,
                    p = new i({
                        initialize: function (t, e, n, i) {
                            this.onChangeCallback = r, this.set(t, e, n, i)
                        },
                        x: {
                            get: function () {
                                return this._x
                            },
                            set: function (t) {
                                this._x = t, this.onChangeCallback(this)
                            }
                        },
                        y: {
                            get: function () {
                                return this._y
                            },
                            set: function (t) {
                                this._y = t, this.onChangeCallback(this)
                            }
                        },
                        z: {
                            get: function () {
                                return this._z
                            },
                            set: function (t) {
                                this._z = t, this.onChangeCallback(this)
                            }
                        },
                        w: {
                            get: function () {
                                return this._w
                            },
                            set: function (t) {
                                this._w = t, this.onChangeCallback(this)
                            }
                        },
                        copy: function (t) {
                            return this.set(t)
                        },
                        set: function (t, e, n, i, a) {
                            return void 0 === a && (a = !0), "object" == typeof t ? (this._x = t.x || 0, this._y = t.y || 0, this._z = t.z || 0, this._w = t.w || 0) : (this._x = t || 0, this._y = e || 0, this._z = n || 0, this._w = i || 0), a && this.onChangeCallback(this), this
                        },
                        add: function (t) {
                            return this._x += t.x, this._y += t.y, this._z += t.z, this._w += t.w, this.onChangeCallback(this), this
                        },
                        subtract: function (t) {
                            return this._x -= t.x, this._y -= t.y, this._z -= t.z, this._w -= t.w, this.onChangeCallback(this), this
                        },
                        scale: function (t) {
                            return this._x *= t, this._y *= t, this._z *= t, this._w *= t, this.onChangeCallback(this), this
                        },
                        length: function () {
                            var t = this.x,
                                e = this.y,
                                n = this.z,
                                i = this.w;
                            return Math.sqrt(t * t + e * e + n * n + i * i)
                        },
                        lengthSq: function () {
                            var t = this.x,
                                e = this.y,
                                n = this.z,
                                i = this.w;
                            return t * t + e * e + n * n + i * i
                        },
                        normalize: function () {
                            var t = this.x,
                                e = this.y,
                                n = this.z,
                                i = this.w,
                                a = t * t + e * e + n * n + i * i;
                            return a > 0 && (a = 1 / Math.sqrt(a), this._x = t * a, this._y = e * a, this._z = n * a, this._w = i * a), this.onChangeCallback(this), this
                        },
                        dot: function (t) {
                            return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
                        },
                        lerp: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = this.x,
                                i = this.y,
                                a = this.z,
                                r = this.w;
                            return this.set(n + e * (t.x - n), i + e * (t.y - i), a + e * (t.z - a), r + e * (t.w - r))
                        },
                        rotationTo: function (t, e) {
                            var n = t.x * e.x + t.y * e.y + t.z * e.z;
                            return n < -.999999 ? (d.copy(u).cross(t).length() < o && d.copy(h).cross(t), d.normalize(), this.setAxisAngle(d, Math.PI)) : n > .999999 ? this.set(0, 0, 0, 1) : (d.copy(t).cross(e), this._x = d.x, this._y = d.y, this._z = d.z, this._w = 1 + n, this.normalize())
                        },
                        setAxes: function (t, e, n) {
                            var i = f.val;
                            return i[0] = e.x, i[3] = e.y, i[6] = e.z, i[1] = n.x, i[4] = n.y, i[7] = n.z, i[2] = -t.x, i[5] = -t.y, i[8] = -t.z, this.fromMat3(f).normalize()
                        },
                        identity: function () {
                            return this.set(0, 0, 0, 1)
                        },
                        setAxisAngle: function (t, e) {
                            e *= .5;
                            var n = Math.sin(e);
                            return this.set(n * t.x, n * t.y, n * t.z, Math.cos(e))
                        },
                        multiply: function (t) {
                            var e = this.x,
                                n = this.y,
                                i = this.z,
                                a = this.w,
                                r = t.x,
                                s = t.y,
                                o = t.z,
                                l = t.w;
                            return this.set(e * l + a * r + n * o - i * s, n * l + a * s + i * r - e * o, i * l + a * o + e * s - n * r, a * l - e * r - n * s - i * o)
                        },
                        slerp: function (t, e) {
                            var n = this.x,
                                i = this.y,
                                a = this.z,
                                r = this.w,
                                s = t.x,
                                l = t.y,
                                c = t.z,
                                u = t.w,
                                h = n * s + i * l + a * c + r * u;
                            h < 0 && (h = -h, s = -s, l = -l, c = -c, u = -u);
                            var d = 1 - e,
                                f = e;
                            if (1 - h > o) {
                                var p = Math.acos(h),
                                    g = Math.sin(p);
                                d = Math.sin((1 - e) * p) / g, f = Math.sin(e * p) / g
                            }
                            return this.set(d * n + f * s, d * i + f * l, d * a + f * c, d * r + f * u)
                        },
                        invert: function () {
                            var t = this.x,
                                e = this.y,
                                n = this.z,
                                i = this.w,
                                a = t * t + e * e + n * n + i * i,
                                r = a ? 1 / a : 0;
                            return this.set(-t * r, -e * r, -n * r, i * r)
                        },
                        conjugate: function () {
                            return this._x = -this.x, this._y = -this.y, this._z = -this.z, this.onChangeCallback(this), this
                        },
                        rotateX: function (t) {
                            t *= .5;
                            var e = this.x,
                                n = this.y,
                                i = this.z,
                                a = this.w,
                                r = Math.sin(t),
                                s = Math.cos(t);
                            return this.set(e * s + a * r, n * s + i * r, i * s - n * r, a * s - e * r)
                        },
                        rotateY: function (t) {
                            t *= .5;
                            var e = this.x,
                                n = this.y,
                                i = this.z,
                                a = this.w,
                                r = Math.sin(t),
                                s = Math.cos(t);
                            return this.set(e * s - i * r, n * s + a * r, i * s + e * r, a * s - n * r)
                        },
                        rotateZ: function (t) {
                            t *= .5;
                            var e = this.x,
                                n = this.y,
                                i = this.z,
                                a = this.w,
                                r = Math.sin(t),
                                s = Math.cos(t);
                            return this.set(e * s + n * r, n * s - e * r, i * s + a * r, a * s - i * r)
                        },
                        calculateW: function () {
                            var t = this.x,
                                e = this.y,
                                n = this.z;
                            return this.w = -Math.sqrt(1 - t * t - e * e - n * n), this
                        },
                        setFromEuler: function (t, e) {
                            var n = t.x / 2,
                                i = t.y / 2,
                                a = t.z / 2,
                                r = Math.cos(n),
                                s = Math.cos(i),
                                o = Math.cos(a),
                                l = Math.sin(n),
                                c = Math.sin(i),
                                u = Math.sin(a);
                            switch (t.order) {
                                case "XYZ":
                                    this.set(l * s * o + r * c * u, r * c * o - l * s * u, r * s * u + l * c * o, r * s * o - l * c * u, e);
                                    break;
                                case "YXZ":
                                    this.set(l * s * o + r * c * u, r * c * o - l * s * u, r * s * u - l * c * o, r * s * o + l * c * u, e);
                                    break;
                                case "ZXY":
                                    this.set(l * s * o - r * c * u, r * c * o + l * s * u, r * s * u + l * c * o, r * s * o - l * c * u, e);
                                    break;
                                case "ZYX":
                                    this.set(l * s * o - r * c * u, r * c * o + l * s * u, r * s * u - l * c * o, r * s * o + l * c * u, e);
                                    break;
                                case "YZX":
                                    this.set(l * s * o + r * c * u, r * c * o + l * s * u, r * s * u - l * c * o, r * s * o - l * c * u, e);
                                    break;
                                case "XZY":
                                    this.set(l * s * o - r * c * u, r * c * o - l * s * u, r * s * u + l * c * o, r * s * o + l * c * u, e)
                            }
                            return this
                        },
                        setFromRotationMatrix: function (t) {
                            var e, n = t.val,
                                i = n[0],
                                a = n[4],
                                r = n[8],
                                s = n[1],
                                o = n[5],
                                l = n[9],
                                c = n[2],
                                u = n[6],
                                h = n[10],
                                d = i + o + h;
                            return d > 0 ? (e = .5 / Math.sqrt(d + 1), this.set((u - l) * e, (r - c) * e, (s - a) * e, .25 / e)) : i > o && i > h ? (e = 2 * Math.sqrt(1 + i - o - h), this.set(.25 * e, (a + s) / e, (r + c) / e, (u - l) / e)) : o > h ? (e = 2 * Math.sqrt(1 + o - i - h), this.set((a + s) / e, .25 * e, (l + u) / e, (r - c) / e)) : (e = 2 * Math.sqrt(1 + h - i - o), this.set((r + c) / e, (l + u) / e, .25 * e, (s - a) / e)), this
                        },
                        fromMat3: function (t) {
                            var e, n = t.val,
                                i = n[0] + n[4] + n[8];
                            if (i > 0) e = Math.sqrt(i + 1), this.w = .5 * e, e = .5 / e, this._x = (n[7] - n[5]) * e, this._y = (n[2] - n[6]) * e, this._z = (n[3] - n[1]) * e;
                            else {
                                var a = 0;
                                n[4] > n[0] && (a = 1), n[8] > n[3 * a + a] && (a = 2);
                                var r = l[a],
                                    s = l[r];
                                e = Math.sqrt(n[3 * a + a] - n[3 * r + r] - n[3 * s + s] + 1), c[a] = .5 * e, e = .5 / e, c[r] = (n[3 * r + a] + n[3 * a + r]) * e, c[s] = (n[3 * s + a] + n[3 * a + s]) * e, this._x = c[0], this._y = c[1], this._z = c[2], this._w = (n[3 * s + r] - n[3 * r + s]) * e
                            }
                            return this.onChangeCallback(this), this
                        }
                    });
                t.exports = p
            }, function (t, e, n) {
                t.exports = {
                    ADDED_TO_SCENE: n(180),
                    BOOT: n(181),
                    CREATE: n(182),
                    DESTROY: n(183),
                    PAUSE: n(184),
                    POST_UPDATE: n(185),
                    PRE_RENDER: n(186),
                    PRE_UPDATE: n(187),
                    READY: n(188),
                    REMOVED_FROM_SCENE: n(189),
                    RENDER: n(190),
                    RESUME: n(191),
                    SHUTDOWN: n(192),
                    SLEEP: n(193),
                    START: n(194),
                    TRANSITION_COMPLETE: n(195),
                    TRANSITION_INIT: n(196),
                    TRANSITION_OUT: n(197),
                    TRANSITION_START: n(198),
                    TRANSITION_WAKE: n(199),
                    UPDATE: n(200),
                    WAKE: n(201)
                }
            }, function (t, e, n) {
                var i = n(27),
                    a = n(46);
                t.exports = function (t, e) {
                    var n = void 0 === t ? a() : i({}, t);
                    if (e)
                        for (var r in e) void 0 !== e[r] && (n[r] = e[r]);
                    return n
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a, r) {
                    return void 0 === t && (t = ""), void 0 === e && (e = !0), void 0 === n && (n = ""), void 0 === i && (i = ""), void 0 === a && (a = 0), void 0 === r && (r = !1), {
                        responseType: t,
                        async: e,
                        user: n,
                        password: i,
                        timeout: a,
                        headers: void 0,
                        header: void 0,
                        headerValue: void 0,
                        requestedWith: !1,
                        overrideMimeType: void 0,
                        withCredentials: r
                    }
                }
            }, function (t, e) {
                t.exports = {
                    width: 0,
                    height: 0,
                    displayWidth: {
                        get: function () {
                            return this.scaleX * this.width
                        },
                        set: function (t) {
                            this.scaleX = t / this.width
                        }
                    },
                    displayHeight: {
                        get: function () {
                            return this.scaleY * this.height
                        },
                        set: function (t) {
                            this.scaleY = t / this.height
                        }
                    },
                    setSize: function (t, e) {
                        return this.width = t, this.height = e, this
                    },
                    setDisplaySize: function (t, e) {
                        return this.displayWidth = t, this.displayHeight = e, this
                    }
                }
            }, function (t, e) {
                t.exports = {
                    _depth: 0,
                    depth: {
                        get: function () {
                            return this._depth
                        },
                        set: function (t) {
                            this.displayList && this.displayList.queueDepthSort(), this._depth = t
                        }
                    },
                    setDepth: function (t) {
                        return void 0 === t && (t = 0), this.depth = t, this
                    }
                }
            }, function (t, e) {
                t.exports = {
                    flipX: !1,
                    flipY: !1,
                    toggleFlipX: function () {
                        return this.flipX = !this.flipX, this
                    },
                    toggleFlipY: function () {
                        return this.flipY = !this.flipY, this
                    },
                    setFlipX: function (t) {
                        return this.flipX = t, this
                    },
                    setFlipY: function (t) {
                        return this.flipY = t, this
                    },
                    setFlip: function (t, e) {
                        return this.flipX = t, this.flipY = e, this
                    },
                    resetFlip: function () {
                        return this.flipX = !1, this.flipY = !1, this
                    }
                }
            }, function (t, e) {
                t.exports = {
                    scrollFactorX: 1,
                    scrollFactorY: 1,
                    setScrollFactor: function (t, e) {
                        return void 0 === e && (e = t), this.scrollFactorX = t, this.scrollFactorY = e, this
                    }
                }
            }, function (t, e, n) {
                var i = n(4),
                    a = n(23),
                    r = n(41),
                    s = n(30),
                    o = n(31),
                    l = n(2),
                    c = {
                        _scaleX: 1,
                        _scaleY: 1,
                        _rotation: 0,
                        x: 0,
                        y: 0,
                        z: 0,
                        w: 0,
                        scale: {
                            get: function () {
                                return (this._scaleX + this._scaleY) / 2
                            },
                            set: function (t) {
                                this._scaleX = t, this._scaleY = t, 0 === t ? this.renderFlags &= -5 : this.renderFlags |= 4
                            }
                        },
                        scaleX: {
                            get: function () {
                                return this._scaleX
                            },
                            set: function (t) {
                                this._scaleX = t, 0 === t ? this.renderFlags &= -5 : this.renderFlags |= 4
                            }
                        },
                        scaleY: {
                            get: function () {
                                return this._scaleY
                            },
                            set: function (t) {
                                this._scaleY = t, 0 === t ? this.renderFlags &= -5 : this.renderFlags |= 4
                            }
                        },
                        angle: {
                            get: function () {
                                return o(this._rotation * i.RAD_TO_DEG)
                            },
                            set: function (t) {
                                this.rotation = o(t) * i.DEG_TO_RAD
                            }
                        },
                        rotation: {
                            get: function () {
                                return this._rotation
                            },
                            set: function (t) {
                                this._rotation = s(t)
                            }
                        },
                        setPosition: function (t, e, n, i) {
                            return void 0 === t && (t = 0), void 0 === e && (e = t), void 0 === n && (n = 0), void 0 === i && (i = 0), this.x = t, this.y = e, this.z = n, this.w = i, this
                        },
                        copyPosition: function (t) {
                            return void 0 !== t.x && (this.x = t.x), void 0 !== t.y && (this.y = t.y), void 0 !== t.z && (this.z = t.z), void 0 !== t.w && (this.w = t.w), this
                        },
                        setRandomPosition: function (t, e, n, i) {
                            return void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = this.scene.sys.scale.width), void 0 === i && (i = this.scene.sys.scale.height), this.x = t + Math.random() * n, this.y = e + Math.random() * i, this
                        },
                        setRotation: function (t) {
                            return void 0 === t && (t = 0), this.rotation = t, this
                        },
                        setAngle: function (t) {
                            return void 0 === t && (t = 0), this.angle = t, this
                        },
                        setScale: function (t, e) {
                            return void 0 === t && (t = 1), void 0 === e && (e = t), this.scaleX = t, this.scaleY = e, this
                        },
                        setX: function (t) {
                            return void 0 === t && (t = 0), this.x = t, this
                        },
                        setY: function (t) {
                            return void 0 === t && (t = 0), this.y = t, this
                        },
                        setZ: function (t) {
                            return void 0 === t && (t = 0), this.z = t, this
                        },
                        setW: function (t) {
                            return void 0 === t && (t = 0), this.w = t, this
                        },
                        getLocalTransformMatrix: function (t) {
                            return void 0 === t && (t = new a), t.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY)
                        },
                        getWorldTransformMatrix: function (t, e) {
                            void 0 === t && (t = new a), void 0 === e && (e = new a);
                            var n = this.parentContainer;
                            if (!n) return this.getLocalTransformMatrix(t);
                            for (t.applyITRS(this.x, this.y, this._rotation, this._scaleX, this._scaleY); n;) e.applyITRS(n.x, n.y, n._rotation, n._scaleX, n._scaleY), e.multiply(t, t), n = n.parentContainer;
                            return t
                        },
                        getLocalPoint: function (t, e, n, i) {
                            n || (n = new l), i || (i = this.scene.sys.cameras.main);
                            var a = i.scrollX,
                                s = i.scrollY,
                                o = t + a * this.scrollFactorX - a,
                                c = e + s * this.scrollFactorY - s;
                            return this.parentContainer ? this.getWorldTransformMatrix().applyInverse(o, c, n) : r(o, c, this.x, this.y, this.rotation, this.scaleX, this.scaleY, n), this._originComponent && (n.x += this._displayOriginX, n.y += this._displayOriginY), n
                        },
                        getParentRotation: function () {
                            for (var t = 0, e = this.parentContainer; e;) t += e.rotation, e = e.parentContainer;
                            return t
                        }
                    };
                t.exports = c
            }, function (t, e) {
                t.exports = {
                    _visible: !0,
                    visible: {
                        get: function () {
                            return this._visible
                        },
                        set: function (t) {
                            t ? (this._visible = !0, this.renderFlags |= 1) : (this._visible = !1, this.renderFlags &= -2)
                        }
                    },
                    setVisible: function (t) {
                        return this.visible = t, this
                    }
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(54),
                    r = n(222),
                    s = n(229),
                    o = n(55),
                    l = n(44),
                    c = new i({
                        Extends: s,
                        initialize: function (t, e) {
                            s.call(this), this.scene = t, this.displayList = null, this.type = e, this.state = 0, this.parentContainer = null, this.name = "", this.active = !0, this.tabIndex = -1, this.data = null, this.renderFlags = 15, this.cameraFilter = 0, this.input = null, this.body = null, this.ignoreDestroy = !1, this.on(o.ADDED_TO_SCENE, this.addedToScene, this), this.on(o.REMOVED_FROM_SCENE, this.removedFromScene, this), t.sys.queueDepthSort()
                        },
                        setActive: function (t) {
                            return this.active = t, this
                        },
                        setName: function (t) {
                            return this.name = t, this
                        },
                        setState: function (t) {
                            return this.state = t, this
                        },
                        setDataEnabled: function () {
                            return this.data || (this.data = new r(this)), this
                        },
                        setData: function (t, e) {
                            return this.data || (this.data = new r(this)), this.data.set(t, e), this
                        },
                        incData: function (t, e) {
                            return this.data || (this.data = new r(this)), this.data.inc(t, e), this
                        },
                        toggleData: function (t) {
                            return this.data || (this.data = new r(this)), this.data.toggle(t), this
                        },
                        getData: function (t) {
                            return this.data || (this.data = new r(this)), this.data.get(t)
                        },
                        setInteractive: function (t, e, n) {
                            return this.scene.sys.input.enable(this, t, e, n), this
                        },
                        disableInteractive: function () {
                            return this.input && (this.input.enabled = !1), this
                        },
                        removeInteractive: function () {
                            return this.scene.sys.input.clear(this), this.input = void 0, this
                        },
                        addedToScene: function () {},
                        removedFromScene: function () {},
                        update: function () {},
                        toJSON: function () {
                            return a(this)
                        },
                        willRender: function (t) {
                            return !(c.RENDER_MASK !== this.renderFlags || 0 !== this.cameraFilter && this.cameraFilter & t.id)
                        },
                        getIndexList: function () {
                            for (var t = this, e = this.parentContainer, n = []; e && (n.unshift(e.getIndex(t)), t = e, e.parentContainer);) e = e.parentContainer;
                            return this.displayList ? n.unshift(this.displayList.getIndex(t)) : n.unshift(this.scene.sys.displayList.getIndex(t)), n
                        },
                        addToDisplayList: function (t) {
                            return void 0 === t && (t = this.scene.sys.displayList), this.displayList && this.displayList !== t && this.removeFromDisplayList(), t.exists(this) || (this.displayList = t, t.add(this, !0), t.queueDepthSort(), this.emit(o.ADDED_TO_SCENE, this, this.scene), t.events.emit(l.ADDED_TO_SCENE, this, this.scene)), this
                        },
                        addToUpdateList: function () {
                            return this.scene && this.preUpdate && this.scene.sys.updateList.add(this), this
                        },
                        removeFromDisplayList: function () {
                            var t = this.displayList || this.scene.sys.displayList;
                            return t.exists(this) && (t.remove(this, !0), t.queueDepthSort(), this.displayList = null, this.emit(o.REMOVED_FROM_SCENE, this, this.scene), t.events.emit(l.REMOVED_FROM_SCENE, this, this.scene)), this
                        },
                        removeFromUpdateList: function () {
                            return this.scene && this.preUpdate && this.scene.sys.updateList.remove(this), this
                        },
                        destroy: function () {
                            this.scene && !this.ignoreDestroy && (this.preDestroy && this.preDestroy.call(this), this.emit(o.DESTROY, this), this.removeAllListeners(), this.postPipelines && this.resetPostPipeline(!0), this.removeFromDisplayList(), this.removeFromUpdateList(), this.input && (this.scene.sys.input.clear(this), this.input = void 0), this.data && (this.data.destroy(), this.data = void 0), this.body && (this.body.destroy(), this.body = void 0), this.active = !1, this.visible = !1, this.scene = void 0, this.parentContainer = void 0)
                        }
                    });
                c.RENDER_MASK = 15, t.exports = c
            }, function (t, e) {
                t.exports = function (t) {
                    var e = {
                        name: t.name,
                        type: t.type,
                        x: t.x,
                        y: t.y,
                        depth: t.depth,
                        scale: {
                            x: t.scaleX,
                            y: t.scaleY
                        },
                        origin: {
                            x: t.originX,
                            y: t.originY
                        },
                        flipX: t.flipX,
                        flipY: t.flipY,
                        rotation: t.rotation,
                        alpha: t.alpha,
                        visible: t.visible,
                        blendMode: t.blendMode,
                        textureKey: "",
                        frameKey: "",
                        data: {}
                    };
                    return t.texture && (e.textureKey = t.texture.key, e.frameKey = t.frame.name), e
                }
            }, function (t, e, n) {
                t.exports = {
                    ADDED_TO_SCENE: n(230),
                    DESTROY: n(231),
                    REMOVED_FROM_SCENE: n(232),
                    VIDEO_COMPLETE: n(233),
                    VIDEO_CREATED: n(234),
                    VIDEO_ERROR: n(235),
                    VIDEO_LOOP: n(236),
                    VIDEO_PLAY: n(237),
                    VIDEO_SEEKED: n(238),
                    VIDEO_SEEKING: n(239),
                    VIDEO_STOP: n(240),
                    VIDEO_TIMEOUT: n(241),
                    VIDEO_UNLOCKED: n(242)
                }
            }, function (t, e, n) {
                var i = n(23),
                    a = new i,
                    r = new i,
                    s = new i,
                    o = {
                        camera: a,
                        sprite: r,
                        calc: s
                    };
                t.exports = function (t, e, n) {
                    var i = a,
                        l = r,
                        c = s;
                    return l.applyITRS(t.x, t.y, t.rotation, t.scaleX, t.scaleY), i.copyFrom(e.matrix), n ? (i.multiplyWithOffset(n, -e.scrollX * t.scrollFactorX, -e.scrollY * t.scrollFactorY), l.e = t.x, l.f = t.y) : (l.e -= e.scrollX * t.scrollFactorX, l.f -= e.scrollY * t.scrollFactorY), i.multiply(l, c), o
                }
            }, function (t, e) {
                t.exports = function (t) {
                    for (var e = t.length, n = t[0].length, i = new Array(n), a = 0; a < n; a++) {
                        i[a] = new Array(e);
                        for (var r = e - 1; r > -1; r--) i[a][r] = t[r][a]
                    }
                    return i
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    void 0 === e && (e = 1);
                    for (var n = null, i = 0; i < e; i++) n = t.shift(), t.push(n);
                    return n
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    void 0 === e && (e = 1);
                    for (var n = null, i = 0; i < e; i++) n = t.pop(), t.unshift(n);
                    return n
                }
            }, function (t, e) {
                t.exports = function (t) {
                    for (var e = t.length - 1; e > 0; e--) {
                        var n = Math.floor(Math.random() * (e + 1)),
                            i = t[e];
                        t[e] = t[n], t[n] = i
                    }
                    return t
                }
            }, function (t, e, n) {
                var i = n(62),
                    a = n(13);
                t.exports = function (t, e, n) {
                    if (void 0 === n && (n = new a), e <= 0 || e >= 1) return n.x = t.x, n.y = t.y, n;
                    var r = i(t) * e;
                    return e > .5 ? (r -= t.width + t.height) <= t.width ? (n.x = t.right - r, n.y = t.bottom) : (n.x = t.x, n.y = t.bottom - (r - t.width)) : r <= t.width ? (n.x = t.x + r, n.y = t.y) : (n.x = t.right, n.y = t.y + (r - t.width)), n
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 2 * (t.width + t.height)
                }
            }, function (t, e, n) {
                var i, a = n(64),
                    r = n(0),
                    s = n(10),
                    o = n(177),
                    l = n(178),
                    c = n(202),
                    u = n(203),
                    h = n(221),
                    d = n(254),
                    f = n(1),
                    p = new r({
                        Extends: l,
                        initialize: function (t, e, n) {
                            l.call(this, t, e, n);
                            var i = e.game;
                            this.isWebGL = 2 === i.config.renderType, this.cache = i.cache.addCustom("spine"), this.spineTextures = i.cache.addCustom("spineTextures"), this.json = i.cache.json, this.textures = i.textures, this.drawDebug = !1, this.gl, this.renderer, this.sceneRenderer, this.skeletonRenderer, this.skeletonDebugRenderer, this.plugin = c, this.temp1, this.temp2, this.isWebGL ? (this.runtime = c.webgl, this.renderer = i.renderer, this.gl = i.renderer.gl, this.getAtlas = this.getAtlasWebGL) : (this.runtime = c.canvas, this.renderer = i.renderer, this.getAtlas = this.getAtlasCanvas), this.renderer || (this.renderer = {
                                width: i.scale.width,
                                height: i.scale.height,
                                preRender: f,
                                postRender: f,
                                render: f,
                                destroy: f
                            }), e.registerFileType("spine", this.spineFileCallback, t), e.registerGameObject("spine", (function (t, e, i, a, r) {
                                var s = this.scene.sys[n],
                                    o = new h(this.scene, s, t, e, i, a, r);
                                return this.displayList.add(o), this.updateList.add(o), o
                            }), (function (t, e) {
                                void 0 === t && (t = {});
                                var i = s(t, "key", null),
                                    r = s(t, "animationName", null),
                                    o = s(t, "loop", !1),
                                    l = this.scene.sys[n],
                                    c = new h(this.scene, l, 0, 0, i, r, o);
                                void 0 !== e && (t.add = e), a(this.scene, c, t);
                                var u = s(t, "skinName", !1);
                                u && c.setSkinByName(u);
                                var d = s(t, "slotName", !1),
                                    f = s(t, "attachmentName", null);
                                return d && c.setAttachment(d, f), c.refresh()
                            })), e.registerGameObject("spineContainer", (function (t, e, i) {
                                var a = this.scene.sys[n],
                                    r = new d(this.scene, a, t, e, i);
                                return this.displayList.add(r), r
                            }), (function (t, e) {
                                void 0 === t && (t = {});
                                var i = s(t, "x", 0),
                                    r = s(t, "y", 0),
                                    o = s(t, "children", null),
                                    l = this.scene.sys[n],
                                    c = new d(this.scene, l, i, r, o);
                                return void 0 !== e && (t.add = e), a(this.scene, c, t), c
                            }))
                        },
                        boot: function () {
                            this.isWebGL ? (this.bootWebGL(), this.onResize(), this.game.scale.on(o, this.onResize, this)) : this.bootCanvas();
                            var t = this.systems.events;
                            t.once("shutdown", this.shutdown, this), t.once("destroy", this.destroy, this), this.game.events.once("destroy", this.gameDestroy, this)
                        },
                        bootCanvas: function () {
                            this.skeletonRenderer = new c.canvas.SkeletonRenderer(this.scene.sys.context)
                        },
                        bootWebGL: function () {
                            var t = function (t, e) {
                                if (t !== this.srcBlend || e !== this.dstBlend) {
                                    var n = this.context.gl;
                                    this.srcBlend = t, this.dstBlend = e, this.isDrawing && (this.flush(), n.blendFunc(this.srcBlend, this.dstBlend))
                                }
                            };
                            i || ((i = new c.webgl.SceneRenderer(this.renderer.canvas, this.gl, !0)).batcher.setBlendMode = t, i.shapes.setBlendMode = t), this.sceneRenderer = i, this.skeletonRenderer = i.skeletonRenderer, this.skeletonDebugRenderer = i.skeletonDebugRenderer, this.temp1 = new c.webgl.Vector3(0, 0, 0), this.temp2 = new c.webgl.Vector3(0, 0, 0)
                        },
                        getAtlasCanvas: function (t) {
                            var e = this.cache.get(t);
                            if (e) {
                                var n, i = this.spineTextures;
                                if (i.has(t)) n = i.get(t);
                                else {
                                    var a = this.textures;
                                    n = new c.TextureAtlas(e.data, (function (t) {
                                        return new c.canvas.CanvasTexture(a.get(e.prefix + t).getSourceImage())
                                    }))
                                }
                                return n
                            }
                        },
                        getAtlasWebGL: function (t) {
                            var e = this.cache.get(t);
                            if (e) {
                                var n, i = this.spineTextures;
                                if (i.has(t)) n = i.get(t);
                                else {
                                    var a = this.textures,
                                        r = this.sceneRenderer.context.gl;
                                    r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1), n = new c.TextureAtlas(e.data, (function (t) {
                                        return new c.webgl.GLTexture(r, a.get(e.prefix + t).getSourceImage(), !1)
                                    }))
                                }
                                return n
                            }
                        },
                        spineFileCallback: function (t, e, n, i, a, r) {
                            var s;
                            if (Array.isArray(t))
                                for (var o = 0; o < t.length; o++) s = new u(this, t[o]), this.addFile(s.files);
                            else s = new u(this, t, e, n, i, a, r), this.addFile(s.files);
                            return this
                        },
                        worldToLocal: function (t, e, n, i) {
                            var a = this.temp1,
                                r = this.temp2,
                                s = this.sceneRenderer.camera;
                            a.set(t + n.x, e - n.y, 0);
                            var o = s.viewportWidth,
                                l = s.viewportHeight;
                            return s.screenToWorld(a, o, l), i && null !== i.parent ? (i.parent.worldToLocal(r.set(a.x - n.x, a.y - n.y, 0)), new c.Vector2(r.x, r.y)) : i ? new c.Vector2(a.x - n.x, a.y - n.y) : new c.Vector2(a.x, a.y)
                        },
                        getVector2: function (t, e) {
                            return new c.Vector2(t, e)
                        },
                        getVector3: function (t, e, n) {
                            return new c.webgl.Vector3(t, e, n)
                        },
                        setDebugBones: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawBones = t, this
                        },
                        setDebugRegionAttachments: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawRegionAttachments = t, this
                        },
                        setDebugBoundingBoxes: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawBoundingBoxes = t, this
                        },
                        setDebugMeshHull: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawMeshHull = t, this
                        },
                        setDebugMeshTriangles: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawMeshTriangles = t, this
                        },
                        setDebugPaths: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawPaths = t, this
                        },
                        setDebugSkeletonXY: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawSkeletonXY = t, this
                        },
                        setDebugClipping: function (t) {
                            return void 0 === t && (t = !0), this.skeletonDebugRenderer.drawClipping = t, this
                        },
                        setEffect: function (t) {
                            return this.sceneRenderer.skeletonRenderer.vertexEffect = t, this
                        },
                        createSkeleton: function (t, e) {
                            var n = t,
                                i = t,
                                a = -1 !== g()(t).call(t, ".");
                            if (a) {
                                var r = t.split(".");
                                n = r.shift(), i = r.join(".")
                            }
                            var o = this.cache.get(n),
                                l = this.getAtlas(n);
                            if (!l) return null;
                            this.spineTextures.has(n) || this.spineTextures.add(n, l);
                            var u, h = o.preMultipliedAlpha,
                                d = new c.AtlasAttachmentLoader(l),
                                f = new c.SkeletonJson(d);
                            if (e) u = e;
                            else {
                                var p = this.json.get(n);
                                u = a ? s(p, i) : p
                            }
                            if (u) {
                                var v = f.readSkeletonData(u);
                                return {
                                    skeletonData: v,
                                    skeleton: new c.Skeleton(v),
                                    preMultipliedAlpha: h
                                }
                            }
                            return null
                        },
                        createAnimationState: function (t) {
                            var e = new c.AnimationStateData(t.data);
                            return {
                                stateData: e,
                                state: new c.AnimationState(e)
                            }
                        },
                        getBounds: function (t) {
                            var e = new c.Vector2,
                                n = new c.Vector2;
                            return t.getBounds(e, n, []), {
                                offset: e,
                                size: n
                            }
                        },
                        onResize: function () {
                            var t = this.renderer,
                                e = this.sceneRenderer,
                                n = t.width,
                                i = t.height;
                            e.camera.position.x = n / 2, e.camera.position.y = i / 2, e.camera.setViewport(n, i)
                        },
                        shutdown: function () {
                            this.systems.events.off("shutdown", this.shutdown, this), this.isWebGL && this.game.scale.off(o, this.onResize, this)
                        },
                        destroy: function () {
                            this.shutdown(), this.game = null, this.scene = null, this.systems = null, this.cache = null, this.spineTextures = null, this.json = null, this.textures = null, this.skeletonRenderer = null, this.gl = null
                        },
                        gameDestroy: function () {
                            this.pluginManager.removeGameObject("spine", !0, !0), this.pluginManager.removeGameObject("spineContainer", !0, !0), this.pluginManager = null, i && (i.dispose(), i = null), this.sceneRenderer = null
                        }
                    });
                p.SpineGameObject = h, p.SpineContainer = d, t.exports = p
            }, function (t, e, n) {
                var i = n(17),
                    a = n(65);
                t.exports = function (t, e, n) {
                    e.x = a(n, "x", 0), e.y = a(n, "y", 0), e.depth = a(n, "depth", 0), e.flipX = a(n, "flipX", !1), e.flipY = a(n, "flipY", !1);
                    var r = a(n, "scale", null);
                    "number" == typeof r ? e.setScale(r) : null !== r && (e.scaleX = a(r, "x", 1), e.scaleY = a(r, "y", 1));
                    var s = a(n, "scrollFactor", null);
                    "number" == typeof s ? e.setScrollFactor(s) : null !== s && (e.scrollFactorX = a(s, "x", 1), e.scrollFactorY = a(s, "y", 1)), e.rotation = a(n, "rotation", 0);
                    var o = a(n, "angle", null);
                    null !== o && (e.angle = o), e.alpha = a(n, "alpha", 1);
                    var l = a(n, "origin", null);
                    if ("number" == typeof l) e.setOrigin(l);
                    else if (null !== l) {
                        var c = a(l, "x", .5),
                            u = a(l, "y", .5);
                        e.setOrigin(c, u)
                    }
                    return e.blendMode = a(n, "blendMode", i.NORMAL), e.visible = a(n, "visible", !0), a(n, "add", !0) && t.sys.displayList.add(e), e.preUpdate && t.sys.updateList.add(e), e
                }
            }, function (t, e, n) {
                var i = n(66),
                    a = n(10);
                t.exports = function (t, e, n) {
                    var r = a(t, e, null);
                    if (null === r) return n;
                    if (Array.isArray(r)) return i.RND.pick(r);
                    if ("object" == typeof r) {
                        if (r.hasOwnProperty("randInt")) return i.RND.integerInRange(r.randInt[0], r.randInt[1]);
                        if (r.hasOwnProperty("randFloat")) return i.RND.realInRange(r.randFloat[0], r.randFloat[1])
                    } else if ("function" == typeof r) return r(e);
                    return r
                }
            }, function (t, e, n) {
                var i = n(4),
                    a = n(27),
                    r = {
                        Angle: n(67),
                        Distance: n(76),
                        Easing: n(84),
                        Fuzzy: n(129),
                        Interpolation: n(134),
                        Pow2: n(142),
                        Snap: n(146),
                        RandomDataGenerator: n(150),
                        Average: n(151),
                        Bernstein: n(33),
                        Between: n(152),
                        CatmullRom: n(35),
                        CeilTo: n(153),
                        Clamp: n(3),
                        DegToRad: n(19),
                        Difference: n(154),
                        Euler: n(155),
                        Factorial: n(34),
                        FloatBetween: n(18),
                        FloorTo: n(156),
                        FromPercent: n(157),
                        GetSpeed: n(158),
                        IsEven: n(159),
                        IsEvenStrict: n(160),
                        Linear: n(36),
                        MaxAdd: n(161),
                        Median: n(162),
                        MinSub: n(163),
                        Percent: n(164),
                        RadToDeg: n(9),
                        RandomXY: n(165),
                        RandomXYZ: n(166),
                        RandomXYZW: n(167),
                        Rotate: n(168),
                        RotateAround: n(39),
                        RotateAroundDistance: n(169),
                        RotateTo: n(170),
                        RoundAwayFromZero: n(40),
                        RoundTo: n(171),
                        SinCosTableGenerator: n(172),
                        SmootherStep: n(38),
                        SmoothStep: n(37),
                        ToXY: n(173),
                        TransformXY: n(41),
                        Within: n(174),
                        Wrap: n(6),
                        Vector2: n(2),
                        Vector3: n(14),
                        Vector4: n(175),
                        Matrix3: n(42),
                        Matrix4: n(20),
                        Quaternion: n(43),
                        RotateVec3: n(176)
                    };
                r = a(!1, r, i), t.exports = r
            }, function (t, e, n) {
                t.exports = {
                    Between: n(28),
                    BetweenPoints: n(68),
                    BetweenPointsY: n(69),
                    BetweenY: n(70),
                    CounterClockwise: n(8),
                    Normalize: n(29),
                    Random: n(71),
                    RandomDegrees: n(72),
                    Reverse: n(73),
                    RotateTo: n(74),
                    ShortestBetween: n(75),
                    Wrap: n(30),
                    WrapDegrees: n(31)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return Math.atan2(e.y - t.y, e.x - t.x)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return Math.atan2(e.x - t.x, e.y - t.y)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return Math.atan2(n - t, i - e)
                }
            }, function (t, e, n) {
                var i = n(18);
                t.exports = function () {
                    return i(-Math.PI, Math.PI)
                }
            }, function (t, e, n) {
                var i = n(18);
                t.exports = function () {
                    return i(-180, 180)
                }
            }, function (t, e, n) {
                var i = n(29);
                t.exports = function (t) {
                    return i(t + Math.PI)
                }
            }, function (t, e, n) {
                var i = n(4);
                t.exports = function (t, e, n) {
                    return void 0 === n && (n = .05), t === e || (Math.abs(e - t) <= n || Math.abs(e - t) >= i.PI2 - n ? t = e : (Math.abs(e - t) > Math.PI && (e < t ? e += i.PI2 : e -= i.PI2), e > t ? t += n : e < t && (t -= n))), t
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = e - t;
                    return 0 === n ? 0 : n - 360 * Math.floor((n - -180) / 360)
                }
            }, function (t, e, n) {
                t.exports = {
                    Between: n(77),
                    BetweenPoints: n(78),
                    BetweenPointsSquared: n(79),
                    Chebyshev: n(80),
                    Power: n(81),
                    Snake: n(82),
                    Squared: n(83)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = t - n,
                        r = e - i;
                    return Math.sqrt(a * a + r * r)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = t.x - e.x,
                        i = t.y - e.y;
                    return Math.sqrt(n * n + i * i)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = t.x - e.x,
                        i = t.y - e.y;
                    return n * n + i * i
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return Math.max(Math.abs(t - n), Math.abs(e - i))
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    return void 0 === a && (a = 2), Math.sqrt(Math.pow(n - t, a) + Math.pow(i - e, a))
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return Math.abs(t - n) + Math.abs(e - i)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = t - n,
                        r = e - i;
                    return a * a + r * r
                }
            }, function (t, e, n) {
                t.exports = {
                    Back: n(85),
                    Bounce: n(89),
                    Circular: n(93),
                    Cubic: n(97),
                    Elastic: n(101),
                    Expo: n(105),
                    Linear: n(109),
                    Quadratic: n(111),
                    Quartic: n(115),
                    Quintic: n(119),
                    Sine: n(123),
                    Stepped: n(127)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(86),
                    Out: n(87),
                    InOut: n(88)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1.70158), t * t * ((e + 1) * t - e)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1.70158), --t * t * ((e + 1) * t + e) + 1
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    void 0 === e && (e = 1.70158);
                    var n = 1.525 * e;
                    return (t *= 2) < 1 ? t * t * ((n + 1) * t - n) * .5 : .5 * ((t -= 2) * t * ((n + 1) * t + n) + 2)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(90),
                    Out: n(91),
                    InOut: n(92)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t = 1 - t) < 1 / 2.75 ? 1 - 7.5625 * t * t : t < 2 / 2.75 ? 1 - (7.5625 * (t -= 1.5 / 2.75) * t + .75) : t < 2.5 / 2.75 ? 1 - (7.5625 * (t -= 2.25 / 2.75) * t + .9375) : 1 - (7.5625 * (t -= 2.625 / 2.75) * t + .984375)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
                }
            }, function (t, e) {
                t.exports = function (t) {
                    var e = !1;
                    return t < .5 ? (t = 1 - 2 * t, e = !0) : t = 2 * t - 1, t < 1 / 2.75 ? t *= 7.5625 * t : t = t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375, e ? .5 * (1 - t) : .5 * t + .5
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(94),
                    Out: n(95),
                    InOut: n(96)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 1 - Math.sqrt(1 - t * t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return Math.sqrt(1 - --t * t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(98),
                    Out: n(99),
                    InOut: n(100)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t * t * t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return --t * t * t + 1
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(102),
                    Out: n(103),
                    InOut: n(104)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (void 0 === e && (e = .1), void 0 === n && (n = .1), 0 === t) return 0;
                    if (1 === t) return 1;
                    var i = n / 4;
                    return e < 1 ? e = 1 : i = n * Math.asin(1 / e) / (2 * Math.PI), -e * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / n)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (void 0 === e && (e = .1), void 0 === n && (n = .1), 0 === t) return 0;
                    if (1 === t) return 1;
                    var i = n / 4;
                    return e < 1 ? e = 1 : i = n * Math.asin(1 / e) / (2 * Math.PI), e * Math.pow(2, -10 * t) * Math.sin((t - i) * (2 * Math.PI) / n) + 1
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (void 0 === e && (e = .1), void 0 === n && (n = .1), 0 === t) return 0;
                    if (1 === t) return 1;
                    var i = n / 4;
                    return e < 1 ? e = 1 : i = n * Math.asin(1 / e) / (2 * Math.PI), (t *= 2) < 1 ? e * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / n) * -.5 : e * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - i) * (2 * Math.PI) / n) * .5 + 1
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(106),
                    Out: n(107),
                    InOut: n(108)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return Math.pow(2, 10 * (t - 1)) - .001
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 1 - Math.pow(2, -10 * t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? .5 * Math.pow(2, 10 * (t - 1)) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
                }
            }, function (t, e, n) {
                t.exports = n(110)
            }, function (t, e) {
                t.exports = function (t) {
                    return t
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(112),
                    Out: n(113),
                    InOut: n(114)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t * t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t * (2 - t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(116),
                    Out: n(117),
                    InOut: n(118)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t * t * t * t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 1 - --t * t * t * t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(120),
                    Out: n(121),
                    InOut: n(122)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t * t * t * t * t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return --t * t * t * t * t + 1
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2)
                }
            }, function (t, e, n) {
                t.exports = {
                    In: n(124),
                    Out: n(125),
                    InOut: n(126)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 0 === t ? 0 : 1 === t ? 1 : 1 - Math.cos(t * Math.PI / 2)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 0 === t ? 0 : 1 === t ? 1 : Math.sin(t * Math.PI / 2)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return 0 === t ? 0 : 1 === t ? 1 : .5 * (1 - Math.cos(Math.PI * t))
                }
            }, function (t, e, n) {
                t.exports = n(128)
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1), t <= 0 ? 0 : t >= 1 ? 1 : 1 / e * (1 + (e * t | 0))
                }
            }, function (t, e, n) {
                t.exports = {
                    Ceil: n(130),
                    Equal: n(32),
                    Floor: n(131),
                    GreaterThan: n(132),
                    LessThan: n(133)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1e-4), Math.ceil(t - e)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1e-4), Math.floor(t + e)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return void 0 === n && (n = 1e-4), t > e - n
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return void 0 === n && (n = 1e-4), t < e + n
                }
            }, function (t, e, n) {
                t.exports = {
                    Bezier: n(135),
                    CatmullRom: n(136),
                    CubicBezier: n(137),
                    Linear: n(138),
                    QuadraticBezier: n(139),
                    SmoothStep: n(140),
                    SmootherStep: n(141)
                }
            }, function (t, e, n) {
                var i = n(33);
                t.exports = function (t, e) {
                    for (var n = 0, a = t.length - 1, r = 0; r <= a; r++) n += Math.pow(1 - e, a - r) * Math.pow(e, r) * t[r] * i(a, r);
                    return n
                }
            }, function (t, e, n) {
                var i = n(35);
                t.exports = function (t, e) {
                    var n = t.length - 1,
                        a = n * e,
                        r = Math.floor(a);
                    return t[0] === t[n] ? (e < 0 && (r = Math.floor(a = n * (1 + e))), i(a - r, t[(r - 1 + n) % n], t[r], t[(r + 1) % n], t[(r + 2) % n])) : e < 0 ? t[0] - (i(-a, t[0], t[0], t[1], t[1]) - t[0]) : e > 1 ? t[n] - (i(a - n, t[n], t[n], t[n - 1], t[n - 1]) - t[n]) : i(a - r, t[r ? r - 1 : 0], t[r], t[n < r + 1 ? n : r + 1], t[n < r + 2 ? n : r + 2])
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    return function (t, e) {
                        var n = 1 - t;
                        return n * n * n * e
                    }(t, e) + function (t, e) {
                        var n = 1 - t;
                        return 3 * n * n * t * e
                    }(t, n) + function (t, e) {
                        return 3 * (1 - t) * t * t * e
                    }(t, i) + function (t, e) {
                        return t * t * t * e
                    }(t, a)
                }
            }, function (t, e, n) {
                var i = n(36);
                t.exports = function (t, e) {
                    var n = t.length - 1,
                        a = n * e,
                        r = Math.floor(a);
                    return e < 0 ? i(t[0], t[1], a) : e > 1 ? i(t[n], t[n - 1], n - a) : i(t[r], t[r + 1 > n ? n : r + 1], a - r)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return function (t, e) {
                        var n = 1 - t;
                        return n * n * e
                    }(t, e) + function (t, e) {
                        return 2 * (1 - t) * t * e
                    }(t, n) + function (t, e) {
                        return t * t * e
                    }(t, i)
                }
            }, function (t, e, n) {
                var i = n(37);
                t.exports = function (t, e, n) {
                    return e + (n - e) * i(t, 0, 1)
                }
            }, function (t, e, n) {
                var i = n(38);
                t.exports = function (t, e, n) {
                    return e + (n - e) * i(t, 0, 1)
                }
            }, function (t, e, n) {
                t.exports = {
                    GetNext: n(143),
                    IsSize: n(144),
                    IsValue: n(145)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    var e = Math.log(t) / .6931471805599453;
                    return 1 << Math.ceil(e)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return t > 0 && 0 == (t & t - 1) && e > 0 && 0 == (e & e - 1)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t > 0 && 0 == (t & t - 1)
                }
            }, function (t, e, n) {
                t.exports = {
                    Ceil: n(147),
                    Floor: n(148),
                    To: n(149)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return void 0 === n && (n = 0), 0 === e ? t : (t -= n, t = e * Math.ceil(t / e), i ? (n + t) / e : n + t)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return void 0 === n && (n = 0), 0 === e ? t : (t -= n, t = e * Math.floor(t / e), i ? (n + t) / e : n + t)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    return void 0 === n && (n = 0), 0 === e ? t : (t -= n, t = e * Math.round(t / e), i ? (n + t) / e : n + t)
                }
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t) {
                        void 0 === t && (t = [(Date.now() * Math.random()).toString()]), this.c = 1, this.s0 = 0, this.s1 = 0, this.s2 = 0, this.n = 0, this.signs = [-1, 1], t && this.init(t)
                    },
                    rnd: function () {
                        var t = 2091639 * this.s0 + 2.3283064365386963e-10 * this.c;
                        return this.c = 0 | t, this.s0 = this.s1, this.s1 = this.s2, this.s2 = t - this.c, this.s2
                    },
                    hash: function (t) {
                        var e, n = this.n;
                        t = t.toString();
                        for (var i = 0; i < t.length; i++) e = .02519603282416938 * (n += t.charCodeAt(i)), e -= n = e >>> 0, n = (e *= n) >>> 0, n += 4294967296 * (e -= n);
                        return this.n = n, 2.3283064365386963e-10 * (n >>> 0)
                    },
                    init: function (t) {
                        "string" == typeof t ? this.state(t) : this.sow(t)
                    },
                    sow: function (t) {
                        if (this.n = 4022871197, this.s0 = this.hash(" "), this.s1 = this.hash(" "), this.s2 = this.hash(" "), this.c = 1, t)
                            for (var e = 0; e < t.length && null != t[e]; e++) {
                                var n = t[e];
                                this.s0 -= this.hash(n), this.s0 += ~~(this.s0 < 0), this.s1 -= this.hash(n), this.s1 += ~~(this.s1 < 0), this.s2 -= this.hash(n), this.s2 += ~~(this.s2 < 0)
                            }
                    },
                    integer: function () {
                        return 4294967296 * this.rnd()
                    },
                    frac: function () {
                        return this.rnd() + 11102230246251565e-32 * (2097152 * this.rnd() | 0)
                    },
                    real: function () {
                        return this.integer() + this.frac()
                    },
                    integerInRange: function (t, e) {
                        return Math.floor(this.realInRange(0, e - t + 1) + t)
                    },
                    between: function (t, e) {
                        return Math.floor(this.realInRange(0, e - t + 1) + t)
                    },
                    realInRange: function (t, e) {
                        return this.frac() * (e - t) + t
                    },
                    normal: function () {
                        return 1 - 2 * this.frac()
                    },
                    uuid: function () {
                        var t = "",
                            e = "";
                        for (e = t = ""; t++ < 36; e += ~t % 5 | 3 * t & 4 ? (15 ^ t ? 8 ^ this.frac() * (20 ^ t ? 16 : 4) : 4).toString(16) : "-");
                        return e
                    },
                    pick: function (t) {
                        return t[this.integerInRange(0, t.length - 1)]
                    },
                    sign: function () {
                        return this.pick(this.signs)
                    },
                    weightedPick: function (t) {
                        return t[~~(Math.pow(this.frac(), 2) * (t.length - 1) + .5)]
                    },
                    timestamp: function (t, e) {
                        return this.realInRange(t || 9466848e5, e || 1577862e6)
                    },
                    angle: function () {
                        return this.integerInRange(-180, 180)
                    },
                    rotation: function () {
                        return this.realInRange(-3.1415926, 3.1415926)
                    },
                    state: function (t) {
                        return "string" == typeof t && t.match(/^!rnd/) && (t = t.split(","), this.c = Cr()(t[1]), this.s0 = Cr()(t[2]), this.s1 = Cr()(t[3]), this.s2 = Cr()(t[4])), ["!rnd", this.c, this.s0, this.s1, this.s2].join(",")
                    },
                    shuffle: function (t) {
                        for (var e = t.length - 1; e > 0; e--) {
                            var n = Math.floor(this.frac() * (e + 1)),
                                i = t[n];
                            t[n] = t[e], t[e] = i
                        }
                        return t
                    }
                });
                t.exports = i
            }, function (t, e) {
                t.exports = function (t) {
                    for (var e = 0, n = 0; n < t.length; n++) e += +t[n];
                    return e / t.length
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return Math.floor(Math.random() * (e - t + 1) + t)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    void 0 === e && (e = 0), void 0 === n && (n = 10);
                    var i = Math.pow(n, -e);
                    return Math.ceil(t * i) / i
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return Math.abs(t - e)
                }
            }, function (t, e, n) {
                var i = n(3),
                    a = n(0),
                    r = n(20),
                    s = n(1),
                    o = new r,
                    l = new a({
                        initialize: function t(e, n, i, a) {
                            void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), void 0 === a && (a = t.DefaultOrder), this._x = e, this._y = n, this._z = i, this._order = a, this.onChangeCallback = s
                        },
                        x: {
                            get: function () {
                                return this._x
                            },
                            set: function (t) {
                                this._x = t, this.onChangeCallback(this)
                            }
                        },
                        y: {
                            get: function () {
                                return this._y
                            },
                            set: function (t) {
                                this._y = t, this.onChangeCallback(this)
                            }
                        },
                        z: {
                            get: function () {
                                return this._z
                            },
                            set: function (t) {
                                this._z = t, this.onChangeCallback(this)
                            }
                        },
                        order: {
                            get: function () {
                                return this._order
                            },
                            set: function (t) {
                                this._order = t, this.onChangeCallback(this)
                            }
                        },
                        set: function (t, e, n, i) {
                            return void 0 === i && (i = this._order), this._x = t, this._y = e, this._z = n, this._order = i, this.onChangeCallback(this), this
                        },
                        copy: function (t) {
                            return this.set(t.x, t.y, t.z, t.order)
                        },
                        setFromQuaternion: function (t, e, n) {
                            return void 0 === e && (e = this._order), void 0 === n && (n = !1), o.fromQuat(t), this.setFromRotationMatrix(o, e, n)
                        },
                        setFromRotationMatrix: function (t, e, n) {
                            void 0 === e && (e = this._order), void 0 === n && (n = !1);
                            var a = t.val,
                                r = a[0],
                                s = a[4],
                                o = a[8],
                                l = a[1],
                                c = a[5],
                                u = a[9],
                                h = a[2],
                                d = a[6],
                                f = a[10],
                                p = 0,
                                g = 0,
                                v = 0,
                                m = .99999;
                            switch (e) {
                                case "XYZ":
                                    g = Math.asin(i(o, -1, 1)), Math.abs(o) < m ? (p = Math.atan2(-u, f), v = Math.atan2(-s, r)) : p = Math.atan2(d, c);
                                    break;
                                case "YXZ":
                                    p = Math.asin(-i(u, -1, 1)), Math.abs(u) < m ? (g = Math.atan2(o, f), v = Math.atan2(l, c)) : g = Math.atan2(-h, r);
                                    break;
                                case "ZXY":
                                    p = Math.asin(i(d, -1, 1)), Math.abs(d) < m ? (g = Math.atan2(-h, f), v = Math.atan2(-s, c)) : v = Math.atan2(l, r);
                                    break;
                                case "ZYX":
                                    g = Math.asin(-i(h, -1, 1)), Math.abs(h) < m ? (p = Math.atan2(d, f), v = Math.atan2(l, r)) : v = Math.atan2(-s, c);
                                    break;
                                case "YZX":
                                    v = Math.asin(i(l, -1, 1)), Math.abs(l) < m ? (p = Math.atan2(-u, c), g = Math.atan2(-h, r)) : g = Math.atan2(o, f);
                                    break;
                                case "XZY":
                                    v = Math.asin(-i(s, -1, 1)), Math.abs(s) < m ? (p = Math.atan2(d, c), g = Math.atan2(o, r)) : p = Math.atan2(-u, f)
                            }
                            return this._x = p, this._y = g, this._z = v, this._order = e, n && this.onChangeCallback(this), this
                        }
                    });
                l.RotationOrders = ["XYZ", "YXZ", "ZXY", "ZYX", "YZX", "XZY"], l.DefaultOrder = "XYZ", t.exports = l
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    void 0 === e && (e = 0), void 0 === n && (n = 10);
                    var i = Math.pow(n, -e);
                    return Math.floor(t * i) / i
                }
            }, function (t, e, n) {
                var i = n(3);
                t.exports = function (t, e, n) {
                    return (n - e) * (t = i(t, 0, 1)) + e
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return t / e / 1e3
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t == Cr()(t) ? !(t % 2) : void 0
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return t === Cr()(t) ? !(t % 2) : void 0
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return Math.min(t + e, n)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    var e = t.length;
                    if (0 === e) return 0;
                    ni()(t).call(t, (function (t, e) {
                        return t - e
                    }));
                    var n = Math.floor(e / 2);
                    return e % 2 == 0 ? (t[n] + t[n - 1]) / 2 : t[n]
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return Math.max(t - e, n)
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    void 0 === n && (n = e + 1);
                    var a = (t - e) / (n - e);
                    return a > 1 ? void 0 !== i ? (a = (i - t) / (i - n)) < 0 && (a = 0) : a = 1 : a < 0 && (a = 0), a
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    void 0 === e && (e = 1);
                    var n = 2 * Math.random() * Math.PI;
                    return t.x = Math.cos(n) * e, t.y = Math.sin(n) * e, t
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    void 0 === e && (e = 1);
                    var n = 2 * Math.random() * Math.PI,
                        i = 2 * Math.random() - 1,
                        a = Math.sqrt(1 - i * i) * e;
                    return t.x = Math.cos(n) * a, t.y = Math.sin(n) * a, t.z = i * e, t
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    return void 0 === e && (e = 1), t.x = (2 * Math.random() - 1) * e, t.y = (2 * Math.random() - 1) * e, t.z = (2 * Math.random() - 1) * e, t.w = (2 * Math.random() - 1) * e, t
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = t.x,
                        i = t.y;
                    return t.x = n * Math.cos(e) - i * Math.sin(e), t.y = n * Math.sin(e) + i * Math.cos(e), t
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    var r = i + Math.atan2(t.y - n, t.x - e);
                    return t.x = e + a * Math.cos(r), t.y = n + a * Math.sin(r), t
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    return t.x = e + a * Math.cos(i), t.y = n + a * Math.sin(i), t
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    void 0 === e && (e = 0), void 0 === n && (n = 10);
                    var i = Math.pow(n, -e);
                    return Math.round(t * i) / i
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === i && (i = 1), i *= Math.PI / t;
                    for (var a = [], r = [], s = 0; s < t; s++) e += (n -= e * i) * i, a[s] = n, r[s] = e;
                    return {
                        sin: r,
                        cos: a,
                        length: t
                    }
                }
            }, function (t, e, n) {
                var i = n(2);
                t.exports = function (t, e, n, a) {
                    void 0 === a && (a = new i);
                    var r = 0,
                        s = 0;
                    return t > 0 && t <= e * n && (r = t > e - 1 ? t - (s = Math.floor(t / e)) * e : t, a.set(r, s)), a
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return Math.abs(t - e) <= n
                }
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t, e, n, i) {
                        this.x = 0, this.y = 0, this.z = 0, this.w = 0, "object" == typeof t ? (this.x = t.x || 0, this.y = t.y || 0, this.z = t.z || 0, this.w = t.w || 0) : (this.x = t || 0, this.y = e || 0, this.z = n || 0, this.w = i || 0)
                    },
                    clone: function () {
                        return new i(this.x, this.y, this.z, this.w)
                    },
                    copy: function (t) {
                        return this.x = t.x, this.y = t.y, this.z = t.z || 0, this.w = t.w || 0, this
                    },
                    equals: function (t) {
                        return this.x === t.x && this.y === t.y && this.z === t.z && this.w === t.w
                    },
                    set: function (t, e, n, i) {
                        return "object" == typeof t ? (this.x = t.x || 0, this.y = t.y || 0, this.z = t.z || 0, this.w = t.w || 0) : (this.x = t || 0, this.y = e || 0, this.z = n || 0, this.w = i || 0), this
                    },
                    add: function (t) {
                        return this.x += t.x, this.y += t.y, this.z += t.z || 0, this.w += t.w || 0, this
                    },
                    subtract: function (t) {
                        return this.x -= t.x, this.y -= t.y, this.z -= t.z || 0, this.w -= t.w || 0, this
                    },
                    scale: function (t) {
                        return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this
                    },
                    length: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z,
                            i = this.w;
                        return Math.sqrt(t * t + e * e + n * n + i * i)
                    },
                    lengthSq: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z,
                            i = this.w;
                        return t * t + e * e + n * n + i * i
                    },
                    normalize: function () {
                        var t = this.x,
                            e = this.y,
                            n = this.z,
                            i = this.w,
                            a = t * t + e * e + n * n + i * i;
                        return a > 0 && (a = 1 / Math.sqrt(a), this.x = t * a, this.y = e * a, this.z = n * a, this.w = i * a), this
                    },
                    dot: function (t) {
                        return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
                    },
                    lerp: function (t, e) {
                        void 0 === e && (e = 0);
                        var n = this.x,
                            i = this.y,
                            a = this.z,
                            r = this.w;
                        return this.x = n + e * (t.x - n), this.y = i + e * (t.y - i), this.z = a + e * (t.z - a), this.w = r + e * (t.w - r), this
                    },
                    multiply: function (t) {
                        return this.x *= t.x, this.y *= t.y, this.z *= t.z || 1, this.w *= t.w || 1, this
                    },
                    divide: function (t) {
                        return this.x /= t.x, this.y /= t.y, this.z /= t.z || 1, this.w /= t.w || 1, this
                    },
                    distance: function (t) {
                        var e = t.x - this.x,
                            n = t.y - this.y,
                            i = t.z - this.z || 0,
                            a = t.w - this.w || 0;
                        return Math.sqrt(e * e + n * n + i * i + a * a)
                    },
                    distanceSq: function (t) {
                        var e = t.x - this.x,
                            n = t.y - this.y,
                            i = t.z - this.z || 0,
                            a = t.w - this.w || 0;
                        return e * e + n * n + i * i + a * a
                    },
                    negate: function () {
                        return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this
                    },
                    transformMat4: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = this.w,
                            r = t.val;
                        return this.x = r[0] * e + r[4] * n + r[8] * i + r[12] * a, this.y = r[1] * e + r[5] * n + r[9] * i + r[13] * a, this.z = r[2] * e + r[6] * n + r[10] * i + r[14] * a, this.w = r[3] * e + r[7] * n + r[11] * i + r[15] * a, this
                    },
                    transformQuat: function (t) {
                        var e = this.x,
                            n = this.y,
                            i = this.z,
                            a = t.x,
                            r = t.y,
                            s = t.z,
                            o = t.w,
                            l = o * e + r * i - s * n,
                            c = o * n + s * e - a * i,
                            u = o * i + a * n - r * e,
                            h = -a * e - r * n - s * i;
                        return this.x = l * o + h * -a + c * -s - u * -r, this.y = c * o + h * -r + u * -a - l * -s, this.z = u * o + h * -s + l * -r - c * -a, this
                    },
                    reset: function () {
                        return this.x = 0, this.y = 0, this.z = 0, this.w = 0, this
                    }
                });
                i.prototype.sub = i.prototype.subtract, i.prototype.mul = i.prototype.multiply, i.prototype.div = i.prototype.divide, i.prototype.dist = i.prototype.distance, i.prototype.distSq = i.prototype.distanceSq, i.prototype.len = i.prototype.length, i.prototype.lenSq = i.prototype.lengthSq, t.exports = i
            }, function (t, e, n) {
                var i = n(14),
                    a = n(20),
                    r = n(43),
                    s = new a,
                    o = new r,
                    l = new i;
                t.exports = function (t, e, n) {
                    return o.setAxisAngle(e, n), s.fromRotationTranslation(o, l.set(0, 0, 0)), t.transformMat4(s)
                }
            }, function (t, e) {
                t.exports = "resize"
            }, function (t, e, n) {
                var i = n(179),
                    a = n(0),
                    r = n(44),
                    s = new a({
                        Extends: i,
                        initialize: function (t, e, n) {
                            i.call(this, e), this.scene = t, this.systems = t.sys, this.pluginKey = n, t.sys.events.once(r.BOOT, this.boot, this)
                        },
                        boot: function () {},
                        destroy: function () {
                            this.pluginManager = null, this.game = null, this.scene = null, this.systems = null
                        }
                    });
                t.exports = s
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t) {
                        this.pluginManager = t, this.game = t.game
                    },
                    init: function () {},
                    start: function () {},
                    stop: function () {},
                    destroy: function () {
                        this.pluginManager = null, this.game = null, this.scene = null, this.systems = null
                    }
                });
                t.exports = i
            }, function (t, e) {
                t.exports = "addedtoscene"
            }, function (t, e) {
                t.exports = "boot"
            }, function (t, e) {
                t.exports = "create"
            }, function (t, e) {
                t.exports = "destroy"
            }, function (t, e) {
                t.exports = "pause"
            }, function (t, e) {
                t.exports = "postupdate"
            }, function (t, e) {
                t.exports = "prerender"
            }, function (t, e) {
                t.exports = "preupdate"
            }, function (t, e) {
                t.exports = "ready"
            }, function (t, e) {
                t.exports = "removedfromscene"
            }, function (t, e) {
                t.exports = "render"
            }, function (t, e) {
                t.exports = "resume"
            }, function (t, e) {
                t.exports = "shutdown"
            }, function (t, e) {
                t.exports = "sleep"
            }, function (t, e) {
                t.exports = "start"
            }, function (t, e) {
                t.exports = "transitioncomplete"
            }, function (t, e) {
                t.exports = "transitioninit"
            }, function (t, e) {
                t.exports = "transitionout"
            }, function (t, e) {
                t.exports = "transitionstart"
            }, function (t, e) {
                t.exports = "transitionwake"
            }, function (t, e) {
                t.exports = "update"
            }, function (t, e) {
                t.exports = "wake"
            }, function (t, e) {
                (function () {
                    var e, n, i, a = this && this.__extends || (e = function (t, n) {
                        return e = br() || {
                            __proto__: []
                        }
                        instanceof Array && function (t, e) {
                            t.__proto__ = e
                        } || function (t, e) {
                            for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n])
                        }, e(t, n)
                    }, function (t, n) {
                        function i() {
                            this.constructor = t
                        }
                        e(t, n), t.prototype = null === n ? Object.create(n) : (i.prototype = n.prototype, new i)
                    });
                    ! function (t) {
                        var e, n, i, r = function () {
                            function t(t, e, n) {
                                if (null == t) throw new Error("name cannot be null.");
                                if (null == e) throw new Error("timelines cannot be null.");
                                this.name = t, this.timelines = e, this.timelineIds = [];
                                for (var i = 0; i < e.length; i++) this.timelineIds[e[i].getPropertyId()] = !0;
                                this.duration = n
                            }
                            return t.prototype.hasTimeline = function (t) {
                                return 1 == this.timelineIds[t]
                            }, t.prototype.apply = function (t, e, n, i, a, r, s, o) {
                                if (null == t) throw new Error("skeleton cannot be null.");
                                i && 0 != this.duration && (n %= this.duration, e > 0 && (e %= this.duration));
                                for (var l = this.timelines, c = 0, u = l.length; c < u; c++) l[c].apply(t, e, n, a, r, s, o)
                            }, t.binarySearch = function (t, e, n) {
                                void 0 === n && (n = 1);
                                var i = 0,
                                    a = t.length / n - 2;
                                if (0 == a) return n;
                                for (var r = a >>> 1;;) {
                                    if (t[(r + 1) * n] <= e ? i = r + 1 : a = r, i == a) return (i + 1) * n;
                                    r = i + a >>> 1
                                }
                            }, t.linearSearch = function (t, e, n) {
                                for (var i = 0, a = t.length - n; i <= a; i += n)
                                    if (t[i] > e) return i;
                                return -1
                            }, t
                        }();
                        t.Animation = r,
                            function (t) {
                                t[t.setup = 0] = "setup", t[t.first = 1] = "first", t[t.replace = 2] = "replace", t[t.add = 3] = "add"
                            }(e = t.MixBlend || (t.MixBlend = {})),
                            function (t) {
                                t[t.mixIn = 0] = "mixIn", t[t.mixOut = 1] = "mixOut"
                            }(n = t.MixDirection || (t.MixDirection = {})),
                            function (t) {
                                t[t.rotate = 0] = "rotate", t[t.translate = 1] = "translate", t[t.scale = 2] = "scale", t[t.shear = 3] = "shear", t[t.attachment = 4] = "attachment", t[t.color = 5] = "color", t[t.deform = 6] = "deform", t[t.event = 7] = "event", t[t.drawOrder = 8] = "drawOrder", t[t.ikConstraint = 9] = "ikConstraint", t[t.transformConstraint = 10] = "transformConstraint", t[t.pathConstraintPosition = 11] = "pathConstraintPosition", t[t.pathConstraintSpacing = 12] = "pathConstraintSpacing", t[t.pathConstraintMix = 13] = "pathConstraintMix", t[t.twoColor = 14] = "twoColor"
                            }(i = t.TimelineType || (t.TimelineType = {}));
                        var s = function () {
                            function e(n) {
                                if (n <= 0) throw new Error("frameCount must be > 0: " + n);
                                this.curves = t.Utils.newFloatArray((n - 1) * e.BEZIER_SIZE)
                            }
                            return e.prototype.getFrameCount = function () {
                                return this.curves.length / e.BEZIER_SIZE + 1
                            }, e.prototype.setLinear = function (t) {
                                this.curves[t * e.BEZIER_SIZE] = e.LINEAR
                            }, e.prototype.setStepped = function (t) {
                                this.curves[t * e.BEZIER_SIZE] = e.STEPPED
                            }, e.prototype.getCurveType = function (t) {
                                var n = t * e.BEZIER_SIZE;
                                if (n == this.curves.length) return e.LINEAR;
                                var i = this.curves[n];
                                return i == e.LINEAR ? e.LINEAR : i == e.STEPPED ? e.STEPPED : e.BEZIER
                            }, e.prototype.setCurve = function (t, n, i, a, r) {
                                var s = .03 * (2 * -n + a),
                                    o = .03 * (2 * -i + r),
                                    l = .006 * (3 * (n - a) + 1),
                                    c = .006 * (3 * (i - r) + 1),
                                    u = 2 * s + l,
                                    h = 2 * o + c,
                                    d = .3 * n + s + .16666667 * l,
                                    f = .3 * i + o + .16666667 * c,
                                    p = t * e.BEZIER_SIZE,
                                    g = this.curves;
                                g[p++] = e.BEZIER;
                                for (var v = d, m = f, E = p + e.BEZIER_SIZE - 1; p < E; p += 2) g[p] = v, g[p + 1] = m, d += u, f += h, u += l, h += c, v += d, m += f
                            }, e.prototype.getCurvePercent = function (n, i) {
                                i = t.MathUtils.clamp(i, 0, 1);
                                var a = this.curves,
                                    r = n * e.BEZIER_SIZE,
                                    s = a[r];
                                if (s == e.LINEAR) return i;
                                if (s == e.STEPPED) return 0;
                                for (var o = 0, l = ++r, c = r + e.BEZIER_SIZE - 1; r < c; r += 2)
                                    if ((o = a[r]) >= i) {
                                        var u = void 0,
                                            h = void 0;
                                        return r == l ? (u = 0, h = 0) : (u = a[r - 2], h = a[r - 1]), h + (a[r + 1] - h) * (i - u) / (o - u)
                                    } var d = a[r - 1];
                                return d + (1 - d) * (i - o) / (1 - o)
                            }, e.LINEAR = 0, e.STEPPED = 1, e.BEZIER = 2, e.BEZIER_SIZE = 19, e
                        }();
                        t.CurveTimeline = s;
                        var o = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e << 1), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.rotate << 24) + this.boneIndex
                            }, s.prototype.setFrame = function (t, e, n) {
                                t <<= 1, this.frames[t] = e, this.frames[t + s.ROTATION] = n
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = this.frames,
                                    h = t.bones[this.boneIndex];
                                if (h.active)
                                    if (i < u[0]) switch (l) {
                                        case e.setup:
                                            return void(h.rotation = h.data.rotation);
                                        case e.first:
                                            var d = h.data.rotation - h.rotation;
                                            h.rotation += (d - 360 * (16384 - (16384.499999999996 - d / 360 | 0))) * o
                                    } else if (i >= u[u.length - s.ENTRIES]) {
                                        var f = u[u.length + s.PREV_ROTATION];
                                        switch (l) {
                                            case e.setup:
                                                h.rotation = h.data.rotation + f * o;
                                                break;
                                            case e.first:
                                            case e.replace:
                                                f += h.data.rotation - h.rotation, f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0));
                                            case e.add:
                                                h.rotation += f * o
                                        }
                                    } else {
                                        var p = r.binarySearch(u, i, s.ENTRIES),
                                            g = u[p + s.PREV_ROTATION],
                                            v = u[p],
                                            m = this.getCurvePercent((p >> 1) - 1, 1 - (i - v) / (u[p + s.PREV_TIME] - v)),
                                            E = u[p + s.ROTATION] - g;
                                        switch (E = g + (E - 360 * (16384 - (16384.499999999996 - E / 360 | 0))) * m, l) {
                                            case e.setup:
                                                h.rotation = h.data.rotation + (E - 360 * (16384 - (16384.499999999996 - E / 360 | 0))) * o;
                                                break;
                                            case e.first:
                                            case e.replace:
                                                E += h.data.rotation - h.rotation;
                                            case e.add:
                                                h.rotation += (E - 360 * (16384 - (16384.499999999996 - E / 360 | 0))) * o
                                        }
                                    }
                            }, s.ENTRIES = 2, s.PREV_TIME = -2, s.PREV_ROTATION = -1, s.ROTATION = 1, s
                        }(s);
                        t.RotateTimeline = o;
                        var l = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.translate << 24) + this.boneIndex
                            }, s.prototype.setFrame = function (t, e, n, i) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.X] = n, this.frames[t + s.Y] = i
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = this.frames,
                                    h = t.bones[this.boneIndex];
                                if (h.active)
                                    if (i < u[0]) switch (l) {
                                        case e.setup:
                                            return h.x = h.data.x, void(h.y = h.data.y);
                                        case e.first:
                                            h.x += (h.data.x - h.x) * o, h.y += (h.data.y - h.y) * o
                                    } else {
                                        var d = 0,
                                            f = 0;
                                        if (i >= u[u.length - s.ENTRIES]) d = u[u.length + s.PREV_X], f = u[u.length + s.PREV_Y];
                                        else {
                                            var p = r.binarySearch(u, i, s.ENTRIES);
                                            d = u[p + s.PREV_X], f = u[p + s.PREV_Y];
                                            var g = u[p],
                                                v = this.getCurvePercent(p / s.ENTRIES - 1, 1 - (i - g) / (u[p + s.PREV_TIME] - g));
                                            d += (u[p + s.X] - d) * v, f += (u[p + s.Y] - f) * v
                                        }
                                        switch (l) {
                                            case e.setup:
                                                h.x = h.data.x + d * o, h.y = h.data.y + f * o;
                                                break;
                                            case e.first:
                                            case e.replace:
                                                h.x += (h.data.x + d - h.x) * o, h.y += (h.data.y + f - h.y) * o;
                                                break;
                                            case e.add:
                                                h.x += d * o, h.y += f * o
                                        }
                                    }
                            }, s.ENTRIES = 3, s.PREV_TIME = -3, s.PREV_X = -2, s.PREV_Y = -1, s.X = 1, s.Y = 2, s
                        }(s);
                        t.TranslateTimeline = l;
                        var c = function (s) {
                            function o(t) {
                                return s.call(this, t) || this
                            }
                            return a(o, s), o.prototype.getPropertyId = function () {
                                return (i.scale << 24) + this.boneIndex
                            }, o.prototype.apply = function (i, a, s, l, c, u, h) {
                                var d = this.frames,
                                    f = i.bones[this.boneIndex];
                                if (f.active)
                                    if (s < d[0]) switch (u) {
                                        case e.setup:
                                            return f.scaleX = f.data.scaleX, void(f.scaleY = f.data.scaleY);
                                        case e.first:
                                            f.scaleX += (f.data.scaleX - f.scaleX) * c, f.scaleY += (f.data.scaleY - f.scaleY) * c
                                    } else {
                                        var p = 0,
                                            g = 0;
                                        if (s >= d[d.length - o.ENTRIES]) p = d[d.length + o.PREV_X] * f.data.scaleX, g = d[d.length + o.PREV_Y] * f.data.scaleY;
                                        else {
                                            var v = r.binarySearch(d, s, o.ENTRIES);
                                            p = d[v + o.PREV_X], g = d[v + o.PREV_Y];
                                            var m = d[v],
                                                E = this.getCurvePercent(v / o.ENTRIES - 1, 1 - (s - m) / (d[v + o.PREV_TIME] - m));
                                            p = (p + (d[v + o.X] - p) * E) * f.data.scaleX, g = (g + (d[v + o.Y] - g) * E) * f.data.scaleY
                                        }
                                        if (1 == c) u == e.add ? (f.scaleX += p - f.data.scaleX, f.scaleY += g - f.data.scaleY) : (f.scaleX = p, f.scaleY = g);
                                        else {
                                            var y = 0,
                                                A = 0;
                                            if (h == n.mixOut) switch (u) {
                                                case e.setup:
                                                    y = f.data.scaleX, A = f.data.scaleY, f.scaleX = y + (Math.abs(p) * t.MathUtils.signum(y) - y) * c, f.scaleY = A + (Math.abs(g) * t.MathUtils.signum(A) - A) * c;
                                                    break;
                                                case e.first:
                                                case e.replace:
                                                    y = f.scaleX, A = f.scaleY, f.scaleX = y + (Math.abs(p) * t.MathUtils.signum(y) - y) * c, f.scaleY = A + (Math.abs(g) * t.MathUtils.signum(A) - A) * c;
                                                    break;
                                                case e.add:
                                                    y = f.scaleX, A = f.scaleY, f.scaleX = y + (Math.abs(p) * t.MathUtils.signum(y) - f.data.scaleX) * c, f.scaleY = A + (Math.abs(g) * t.MathUtils.signum(A) - f.data.scaleY) * c
                                            } else switch (u) {
                                                case e.setup:
                                                    y = Math.abs(f.data.scaleX) * t.MathUtils.signum(p), A = Math.abs(f.data.scaleY) * t.MathUtils.signum(g), f.scaleX = y + (p - y) * c, f.scaleY = A + (g - A) * c;
                                                    break;
                                                case e.first:
                                                case e.replace:
                                                    y = Math.abs(f.scaleX) * t.MathUtils.signum(p), A = Math.abs(f.scaleY) * t.MathUtils.signum(g), f.scaleX = y + (p - y) * c, f.scaleY = A + (g - A) * c;
                                                    break;
                                                case e.add:
                                                    y = t.MathUtils.signum(p), A = t.MathUtils.signum(g), f.scaleX = Math.abs(f.scaleX) * y + (p - Math.abs(f.data.scaleX) * y) * c, f.scaleY = Math.abs(f.scaleY) * A + (g - Math.abs(f.data.scaleY) * A) * c
                                            }
                                        }
                                    }
                            }, o
                        }(l);
                        t.ScaleTimeline = c;
                        var u = function (t) {
                            function n(e) {
                                return t.call(this, e) || this
                            }
                            return a(n, t), n.prototype.getPropertyId = function () {
                                return (i.shear << 24) + this.boneIndex
                            }, n.prototype.apply = function (t, i, a, s, o, l, c) {
                                var u = this.frames,
                                    h = t.bones[this.boneIndex];
                                if (h.active)
                                    if (a < u[0]) switch (l) {
                                        case e.setup:
                                            return h.shearX = h.data.shearX, void(h.shearY = h.data.shearY);
                                        case e.first:
                                            h.shearX += (h.data.shearX - h.shearX) * o, h.shearY += (h.data.shearY - h.shearY) * o
                                    } else {
                                        var d = 0,
                                            f = 0;
                                        if (a >= u[u.length - n.ENTRIES]) d = u[u.length + n.PREV_X], f = u[u.length + n.PREV_Y];
                                        else {
                                            var p = r.binarySearch(u, a, n.ENTRIES);
                                            d = u[p + n.PREV_X], f = u[p + n.PREV_Y];
                                            var g = u[p],
                                                v = this.getCurvePercent(p / n.ENTRIES - 1, 1 - (a - g) / (u[p + n.PREV_TIME] - g));
                                            d += (u[p + n.X] - d) * v, f += (u[p + n.Y] - f) * v
                                        }
                                        switch (l) {
                                            case e.setup:
                                                h.shearX = h.data.shearX + d * o, h.shearY = h.data.shearY + f * o;
                                                break;
                                            case e.first:
                                            case e.replace:
                                                h.shearX += (h.data.shearX + d - h.shearX) * o, h.shearY += (h.data.shearY + f - h.shearY) * o;
                                                break;
                                            case e.add:
                                                h.shearX += d * o, h.shearY += f * o
                                        }
                                    }
                            }, n
                        }(l);
                        t.ShearTimeline = u;
                        var h = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.color << 24) + this.slotIndex
                            }, s.prototype.setFrame = function (t, e, n, i, a, r) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.R] = n, this.frames[t + s.G] = i, this.frames[t + s.B] = a, this.frames[t + s.A] = r
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = t.slots[this.slotIndex];
                                if (u.bone.active) {
                                    var h = this.frames;
                                    if (i < h[0]) switch (l) {
                                        case e.setup:
                                            return void u.color.setFromColor(u.data.color);
                                        case e.first:
                                            var d = u.color,
                                                f = u.data.color;
                                            d.add((f.r - d.r) * o, (f.g - d.g) * o, (f.b - d.b) * o, (f.a - d.a) * o)
                                    } else {
                                        var p = 0,
                                            g = 0,
                                            v = 0,
                                            m = 0;
                                        if (i >= h[h.length - s.ENTRIES]) {
                                            var E = h.length;
                                            p = h[E + s.PREV_R], g = h[E + s.PREV_G], v = h[E + s.PREV_B], m = h[E + s.PREV_A]
                                        } else {
                                            var y = r.binarySearch(h, i, s.ENTRIES);
                                            p = h[y + s.PREV_R], g = h[y + s.PREV_G], v = h[y + s.PREV_B], m = h[y + s.PREV_A];
                                            var A = h[y],
                                                T = this.getCurvePercent(y / s.ENTRIES - 1, 1 - (i - A) / (h[y + s.PREV_TIME] - A));
                                            p += (h[y + s.R] - p) * T, g += (h[y + s.G] - g) * T, v += (h[y + s.B] - v) * T, m += (h[y + s.A] - m) * T
                                        }
                                        1 == o ? u.color.set(p, g, v, m) : (d = u.color, l == e.setup && d.setFromColor(u.data.color), d.add((p - d.r) * o, (g - d.g) * o, (v - d.b) * o, (m - d.a) * o))
                                    }
                                }
                            }, s.ENTRIES = 5, s.PREV_TIME = -5, s.PREV_R = -4, s.PREV_G = -3, s.PREV_B = -2, s.PREV_A = -1, s.R = 1, s.G = 2, s.B = 3, s.A = 4, s
                        }(s);
                        t.ColorTimeline = h;
                        var d = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.twoColor << 24) + this.slotIndex
                            }, s.prototype.setFrame = function (t, e, n, i, a, r, o, l, c) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.R] = n, this.frames[t + s.G] = i, this.frames[t + s.B] = a, this.frames[t + s.A] = r, this.frames[t + s.R2] = o, this.frames[t + s.G2] = l, this.frames[t + s.B2] = c
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = t.slots[this.slotIndex];
                                if (u.bone.active) {
                                    var h = this.frames;
                                    if (i < h[0]) switch (l) {
                                        case e.setup:
                                            return u.color.setFromColor(u.data.color), void u.darkColor.setFromColor(u.data.darkColor);
                                        case e.first:
                                            var d = u.color,
                                                f = u.darkColor,
                                                p = u.data.color,
                                                g = u.data.darkColor;
                                            d.add((p.r - d.r) * o, (p.g - d.g) * o, (p.b - d.b) * o, (p.a - d.a) * o), f.add((g.r - f.r) * o, (g.g - f.g) * o, (g.b - f.b) * o, 0)
                                    } else {
                                        var v = 0,
                                            m = 0,
                                            E = 0,
                                            y = 0,
                                            A = 0,
                                            T = 0,
                                            S = 0;
                                        if (i >= h[h.length - s.ENTRIES]) {
                                            var M = h.length;
                                            v = h[M + s.PREV_R], m = h[M + s.PREV_G], E = h[M + s.PREV_B], y = h[M + s.PREV_A], A = h[M + s.PREV_R2], T = h[M + s.PREV_G2], S = h[M + s.PREV_B2]
                                        } else {
                                            var w = r.binarySearch(h, i, s.ENTRIES);
                                            v = h[w + s.PREV_R], m = h[w + s.PREV_G], E = h[w + s.PREV_B], y = h[w + s.PREV_A], A = h[w + s.PREV_R2], T = h[w + s.PREV_G2], S = h[w + s.PREV_B2];
                                            var x = h[w],
                                                C = this.getCurvePercent(w / s.ENTRIES - 1, 1 - (i - x) / (h[w + s.PREV_TIME] - x));
                                            v += (h[w + s.R] - v) * C, m += (h[w + s.G] - m) * C, E += (h[w + s.B] - E) * C, y += (h[w + s.A] - y) * C, A += (h[w + s.R2] - A) * C, T += (h[w + s.G2] - T) * C, S += (h[w + s.B2] - S) * C
                                        }
                                        1 == o ? (u.color.set(v, m, E, y), u.darkColor.set(A, T, S, 1)) : (d = u.color, f = u.darkColor, l == e.setup && (d.setFromColor(u.data.color), f.setFromColor(u.data.darkColor)), d.add((v - d.r) * o, (m - d.g) * o, (E - d.b) * o, (y - d.a) * o), f.add((A - f.r) * o, (T - f.g) * o, (S - f.b) * o, 0))
                                    }
                                }
                            }, s.ENTRIES = 8, s.PREV_TIME = -8, s.PREV_R = -7, s.PREV_G = -6, s.PREV_B = -5, s.PREV_A = -4, s.PREV_R2 = -3, s.PREV_G2 = -2, s.PREV_B2 = -1, s.R = 1, s.G = 2, s.B = 3, s.A = 4, s.R2 = 5, s.G2 = 6, s.B2 = 7, s
                        }(s);
                        t.TwoColorTimeline = d;
                        var f = function () {
                            function a(e) {
                                this.frames = t.Utils.newFloatArray(e), this.attachmentNames = new Array(e)
                            }
                            return a.prototype.getPropertyId = function () {
                                return (i.attachment << 24) + this.slotIndex
                            }, a.prototype.getFrameCount = function () {
                                return this.frames.length
                            }, a.prototype.setFrame = function (t, e, n) {
                                this.frames[t] = e, this.attachmentNames[t] = n
                            }, a.prototype.apply = function (t, i, a, s, o, l, c) {
                                var u = t.slots[this.slotIndex];
                                if (u.bone.active)
                                    if (c != n.mixOut) {
                                        var h = this.frames;
                                        if (a < h[0]) l != e.setup && l != e.first || this.setAttachment(t, u, u.data.attachmentName);
                                        else {
                                            var d;
                                            d = a >= h[h.length - 1] ? h.length - 1 : r.binarySearch(h, a, 1) - 1;
                                            var f = this.attachmentNames[d];
                                            t.slots[this.slotIndex].setAttachment(null == f ? null : t.getAttachment(this.slotIndex, f))
                                        }
                                    } else l == e.setup && this.setAttachment(t, u, u.data.attachmentName)
                            }, a.prototype.setAttachment = function (t, e, n) {
                                e.attachment = null == n ? null : t.getAttachment(this.slotIndex, n)
                            }, a
                        }();
                        t.AttachmentTimeline = f;
                        var p = null,
                            g = function (n) {
                                function s(e) {
                                    var i = n.call(this, e) || this;
                                    return i.frames = t.Utils.newFloatArray(e), i.frameVertices = new Array(e), null == p && (p = t.Utils.newFloatArray(64)), i
                                }
                                return a(s, n), s.prototype.getPropertyId = function () {
                                    return (i.deform << 27) + +this.attachment.id + this.slotIndex
                                }, s.prototype.setFrame = function (t, e, n) {
                                    this.frames[t] = e, this.frameVertices[t] = n
                                }, s.prototype.apply = function (n, i, a, s, o, l, c) {
                                    var u = n.slots[this.slotIndex];
                                    if (u.bone.active) {
                                        var h = u.getAttachment();
                                        if (h instanceof t.VertexAttachment && h.deformAttachment == this.attachment) {
                                            var d = u.deform;
                                            0 == d.length && (l = e.setup);
                                            var f = this.frameVertices,
                                                p = f[0].length,
                                                g = this.frames;
                                            if (a < g[0]) {
                                                var v = h;
                                                switch (l) {
                                                    case e.setup:
                                                        return void(d.length = 0);
                                                    case e.first:
                                                        if (1 == o) {
                                                            d.length = 0;
                                                            break
                                                        }
                                                        var m = t.Utils.setArraySize(d, p);
                                                        if (null == v.bones)
                                                            for (var E = v.vertices, y = 0; y < p; y++) m[y] += (E[y] - m[y]) * o;
                                                        else
                                                            for (o = 1 - o, y = 0; y < p; y++) m[y] *= o
                                                }
                                            } else {
                                                var A = t.Utils.setArraySize(d, p);
                                                if (a >= g[g.length - 1]) {
                                                    var T = f[g.length - 1];
                                                    if (1 == o)
                                                        if (l == e.add)
                                                            if (null == (v = h).bones) {
                                                                E = v.vertices;
                                                                for (var S = 0; S < p; S++) A[S] += T[S] - E[S]
                                                            } else
                                                                for (var M = 0; M < p; M++) A[M] += T[M];
                                                    else t.Utils.arrayCopy(T, 0, A, 0, p);
                                                    else switch (l) {
                                                        case e.setup:
                                                            var w = h;
                                                            if (null == w.bones) {
                                                                E = w.vertices;
                                                                for (var x = 0; x < p; x++) {
                                                                    var C = E[x];
                                                                    A[x] = C + (T[x] - C) * o
                                                                }
                                                            } else
                                                                for (var I = 0; I < p; I++) A[I] = T[I] * o;
                                                            break;
                                                        case e.first:
                                                        case e.replace:
                                                            for (var b = 0; b < p; b++) A[b] += (T[b] - A[b]) * o;
                                                            break;
                                                        case e.add:
                                                            if (null == (v = h).bones) {
                                                                E = v.vertices;
                                                                for (var R = 0; R < p; R++) A[R] += (T[R] - E[R]) * o
                                                            } else
                                                                for (var P = 0; P < p; P++) A[P] += T[P] * o
                                                    }
                                                } else {
                                                    var _ = r.binarySearch(g, a),
                                                        k = f[_ - 1],
                                                        L = f[_],
                                                        D = g[_],
                                                        O = this.getCurvePercent(_ - 1, 1 - (a - D) / (g[_ - 1] - D));
                                                    if (1 == o)
                                                        if (l == e.add)
                                                            if (null == (v = h).bones) {
                                                                E = v.vertices;
                                                                for (var N = 0; N < p; N++) {
                                                                    var U = k[N];
                                                                    A[N] += U + (L[N] - U) * O - E[N]
                                                                }
                                                            } else
                                                                for (var B = 0; B < p; B++) U = k[B], A[B] += U + (L[B] - U) * O;
                                                    else
                                                        for (var F = 0; F < p; F++) U = k[F], A[F] = U + (L[F] - U) * O;
                                                    else switch (l) {
                                                        case e.setup:
                                                            var G = h;
                                                            if (null == G.bones) {
                                                                E = G.vertices;
                                                                for (var H = 0; H < p; H++) U = k[H], C = E[H], A[H] = C + (U + (L[H] - U) * O - C) * o
                                                            } else
                                                                for (var V = 0; V < p; V++) U = k[V], A[V] = (U + (L[V] - U) * O) * o;
                                                            break;
                                                        case e.first:
                                                        case e.replace:
                                                            for (var Y = 0; Y < p; Y++) U = k[Y], A[Y] += (U + (L[Y] - U) * O - A[Y]) * o;
                                                            break;
                                                        case e.add:
                                                            if (null == (v = h).bones) {
                                                                E = v.vertices;
                                                                for (var W = 0; W < p; W++) U = k[W], A[W] += (U + (L[W] - U) * O - E[W]) * o
                                                            } else
                                                                for (var K = 0; K < p; K++) U = k[K], A[K] += (U + (L[K] - U) * O) * o
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, s
                            }(s);
                        t.DeformTimeline = g;
                        var v = function () {
                            function e(e) {
                                this.frames = t.Utils.newFloatArray(e), this.events = new Array(e)
                            }
                            return e.prototype.getPropertyId = function () {
                                return i.event << 24
                            }, e.prototype.getFrameCount = function () {
                                return this.frames.length
                            }, e.prototype.setFrame = function (t, e) {
                                this.frames[t] = e.time, this.events[t] = e
                            }, e.prototype.apply = function (t, e, n, i, a, s, o) {
                                if (null != i) {
                                    var l = this.frames,
                                        c = this.frames.length;
                                    if (e > n) this.apply(t, e, Number.MAX_VALUE, i, a, s, o), e = -1;
                                    else if (e >= l[c - 1]) return;
                                    if (!(n < l[0])) {
                                        var u = 0;
                                        if (e < l[0]) u = 0;
                                        else
                                            for (var h = l[u = r.binarySearch(l, e)]; u > 0 && l[u - 1] == h;) u--;
                                        for (; u < c && n >= l[u]; u++) i.push(this.events[u])
                                    }
                                }
                            }, e
                        }();
                        t.EventTimeline = v;
                        var m = function () {
                            function a(e) {
                                this.frames = t.Utils.newFloatArray(e), this.drawOrders = new Array(e)
                            }
                            return a.prototype.getPropertyId = function () {
                                return i.drawOrder << 24
                            }, a.prototype.getFrameCount = function () {
                                return this.frames.length
                            }, a.prototype.setFrame = function (t, e, n) {
                                this.frames[t] = e, this.drawOrders[t] = n
                            }, a.prototype.apply = function (i, a, s, o, l, c, u) {
                                var h = i.drawOrder,
                                    d = i.slots;
                                if (u != n.mixOut) {
                                    var f = this.frames;
                                    if (s < f[0]) c != e.setup && c != e.first || t.Utils.arrayCopy(i.slots, 0, i.drawOrder, 0, i.slots.length);
                                    else {
                                        var p;
                                        p = s >= f[f.length - 1] ? f.length - 1 : r.binarySearch(f, s) - 1;
                                        var g = this.drawOrders[p];
                                        if (null == g) t.Utils.arrayCopy(d, 0, h, 0, d.length);
                                        else
                                            for (var v = 0, m = g.length; v < m; v++) h[v] = d[g[v]]
                                    }
                                } else c == e.setup && t.Utils.arrayCopy(i.slots, 0, i.drawOrder, 0, i.slots.length)
                            }, a
                        }();
                        t.DrawOrderTimeline = m;
                        var E = function (s) {
                            function o(e) {
                                var n = s.call(this, e) || this;
                                return n.frames = t.Utils.newFloatArray(e * o.ENTRIES), n
                            }
                            return a(o, s), o.prototype.getPropertyId = function () {
                                return (i.ikConstraint << 24) + this.ikConstraintIndex
                            }, o.prototype.setFrame = function (t, e, n, i, a, r, s) {
                                t *= o.ENTRIES, this.frames[t] = e, this.frames[t + o.MIX] = n, this.frames[t + o.SOFTNESS] = i, this.frames[t + o.BEND_DIRECTION] = a, this.frames[t + o.COMPRESS] = r ? 1 : 0, this.frames[t + o.STRETCH] = s ? 1 : 0
                            }, o.prototype.apply = function (t, i, a, s, l, c, u) {
                                var h = this.frames,
                                    d = t.ikConstraints[this.ikConstraintIndex];
                                if (d.active)
                                    if (a < h[0]) switch (c) {
                                            case e.setup:
                                                return d.mix = d.data.mix, d.softness = d.data.softness, d.bendDirection = d.data.bendDirection, d.compress = d.data.compress, void(d.stretch = d.data.stretch);
                                            case e.first:
                                                d.mix += (d.data.mix - d.mix) * l, d.softness += (d.data.softness - d.softness) * l, d.bendDirection = d.data.bendDirection, d.compress = d.data.compress, d.stretch = d.data.stretch
                                        } else if (a >= h[h.length - o.ENTRIES]) c == e.setup ? (d.mix = d.data.mix + (h[h.length + o.PREV_MIX] - d.data.mix) * l, d.softness = d.data.softness + (h[h.length + o.PREV_SOFTNESS] - d.data.softness) * l, u == n.mixOut ? (d.bendDirection = d.data.bendDirection, d.compress = d.data.compress, d.stretch = d.data.stretch) : (d.bendDirection = h[h.length + o.PREV_BEND_DIRECTION], d.compress = 0 != h[h.length + o.PREV_COMPRESS], d.stretch = 0 != h[h.length + o.PREV_STRETCH])) : (d.mix += (h[h.length + o.PREV_MIX] - d.mix) * l, d.softness += (h[h.length + o.PREV_SOFTNESS] - d.softness) * l, u == n.mixIn && (d.bendDirection = h[h.length + o.PREV_BEND_DIRECTION], d.compress = 0 != h[h.length + o.PREV_COMPRESS], d.stretch = 0 != h[h.length + o.PREV_STRETCH]));
                                        else {
                                            var f = r.binarySearch(h, a, o.ENTRIES),
                                                p = h[f + o.PREV_MIX],
                                                g = h[f + o.PREV_SOFTNESS],
                                                v = h[f],
                                                m = this.getCurvePercent(f / o.ENTRIES - 1, 1 - (a - v) / (h[f + o.PREV_TIME] - v));
                                            c == e.setup ? (d.mix = d.data.mix + (p + (h[f + o.MIX] - p) * m - d.data.mix) * l, d.softness = d.data.softness + (g + (h[f + o.SOFTNESS] - g) * m - d.data.softness) * l, u == n.mixOut ? (d.bendDirection = d.data.bendDirection, d.compress = d.data.compress, d.stretch = d.data.stretch) : (d.bendDirection = h[f + o.PREV_BEND_DIRECTION], d.compress = 0 != h[f + o.PREV_COMPRESS], d.stretch = 0 != h[f + o.PREV_STRETCH])) : (d.mix += (p + (h[f + o.MIX] - p) * m - d.mix) * l, d.softness += (g + (h[f + o.SOFTNESS] - g) * m - d.softness) * l, u == n.mixIn && (d.bendDirection = h[f + o.PREV_BEND_DIRECTION], d.compress = 0 != h[f + o.PREV_COMPRESS], d.stretch = 0 != h[f + o.PREV_STRETCH]))
                                        }
                            }, o.ENTRIES = 6, o.PREV_TIME = -6, o.PREV_MIX = -5, o.PREV_SOFTNESS = -4, o.PREV_BEND_DIRECTION = -3, o.PREV_COMPRESS = -2, o.PREV_STRETCH = -1, o.MIX = 1, o.SOFTNESS = 2, o.BEND_DIRECTION = 3, o.COMPRESS = 4, o.STRETCH = 5, o
                        }(s);
                        t.IkConstraintTimeline = E;
                        var y = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.transformConstraint << 24) + this.transformConstraintIndex
                            }, s.prototype.setFrame = function (t, e, n, i, a, r) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.ROTATE] = n, this.frames[t + s.TRANSLATE] = i, this.frames[t + s.SCALE] = a, this.frames[t + s.SHEAR] = r
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = this.frames,
                                    h = t.transformConstraints[this.transformConstraintIndex];
                                if (h.active)
                                    if (i < u[0]) {
                                        var d = h.data;
                                        switch (l) {
                                            case e.setup:
                                                return h.rotateMix = d.rotateMix, h.translateMix = d.translateMix, h.scaleMix = d.scaleMix, void(h.shearMix = d.shearMix);
                                            case e.first:
                                                h.rotateMix += (d.rotateMix - h.rotateMix) * o, h.translateMix += (d.translateMix - h.translateMix) * o, h.scaleMix += (d.scaleMix - h.scaleMix) * o, h.shearMix += (d.shearMix - h.shearMix) * o
                                        }
                                    } else {
                                        var f = 0,
                                            p = 0,
                                            g = 0,
                                            v = 0;
                                        if (i >= u[u.length - s.ENTRIES]) {
                                            var m = u.length;
                                            f = u[m + s.PREV_ROTATE], p = u[m + s.PREV_TRANSLATE], g = u[m + s.PREV_SCALE], v = u[m + s.PREV_SHEAR]
                                        } else {
                                            var E = r.binarySearch(u, i, s.ENTRIES);
                                            f = u[E + s.PREV_ROTATE], p = u[E + s.PREV_TRANSLATE], g = u[E + s.PREV_SCALE], v = u[E + s.PREV_SHEAR];
                                            var y = u[E],
                                                A = this.getCurvePercent(E / s.ENTRIES - 1, 1 - (i - y) / (u[E + s.PREV_TIME] - y));
                                            f += (u[E + s.ROTATE] - f) * A, p += (u[E + s.TRANSLATE] - p) * A, g += (u[E + s.SCALE] - g) * A, v += (u[E + s.SHEAR] - v) * A
                                        }
                                        l == e.setup ? (d = h.data, h.rotateMix = d.rotateMix + (f - d.rotateMix) * o, h.translateMix = d.translateMix + (p - d.translateMix) * o, h.scaleMix = d.scaleMix + (g - d.scaleMix) * o, h.shearMix = d.shearMix + (v - d.shearMix) * o) : (h.rotateMix += (f - h.rotateMix) * o, h.translateMix += (p - h.translateMix) * o, h.scaleMix += (g - h.scaleMix) * o, h.shearMix += (v - h.shearMix) * o)
                                    }
                            }, s.ENTRIES = 5, s.PREV_TIME = -5, s.PREV_ROTATE = -4, s.PREV_TRANSLATE = -3, s.PREV_SCALE = -2, s.PREV_SHEAR = -1, s.ROTATE = 1, s.TRANSLATE = 2, s.SCALE = 3, s.SHEAR = 4, s
                        }(s);
                        t.TransformConstraintTimeline = y;
                        var A = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.pathConstraintPosition << 24) + this.pathConstraintIndex
                            }, s.prototype.setFrame = function (t, e, n) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.VALUE] = n
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = this.frames,
                                    h = t.pathConstraints[this.pathConstraintIndex];
                                if (h.active)
                                    if (i < u[0]) switch (l) {
                                        case e.setup:
                                            return void(h.position = h.data.position);
                                        case e.first:
                                            h.position += (h.data.position - h.position) * o
                                    } else {
                                        var d = 0;
                                        if (i >= u[u.length - s.ENTRIES]) d = u[u.length + s.PREV_VALUE];
                                        else {
                                            var f = r.binarySearch(u, i, s.ENTRIES);
                                            d = u[f + s.PREV_VALUE];
                                            var p = u[f],
                                                g = this.getCurvePercent(f / s.ENTRIES - 1, 1 - (i - p) / (u[f + s.PREV_TIME] - p));
                                            d += (u[f + s.VALUE] - d) * g
                                        }
                                        l == e.setup ? h.position = h.data.position + (d - h.data.position) * o : h.position += (d - h.position) * o
                                    }
                            }, s.ENTRIES = 2, s.PREV_TIME = -2, s.PREV_VALUE = -1, s.VALUE = 1, s
                        }(s);
                        t.PathConstraintPositionTimeline = A;
                        var T = function (t) {
                            function n(e) {
                                return t.call(this, e) || this
                            }
                            return a(n, t), n.prototype.getPropertyId = function () {
                                return (i.pathConstraintSpacing << 24) + this.pathConstraintIndex
                            }, n.prototype.apply = function (t, i, a, s, o, l, c) {
                                var u = this.frames,
                                    h = t.pathConstraints[this.pathConstraintIndex];
                                if (h.active)
                                    if (a < u[0]) switch (l) {
                                        case e.setup:
                                            return void(h.spacing = h.data.spacing);
                                        case e.first:
                                            h.spacing += (h.data.spacing - h.spacing) * o
                                    } else {
                                        var d = 0;
                                        if (a >= u[u.length - n.ENTRIES]) d = u[u.length + n.PREV_VALUE];
                                        else {
                                            var f = r.binarySearch(u, a, n.ENTRIES);
                                            d = u[f + n.PREV_VALUE];
                                            var p = u[f],
                                                g = this.getCurvePercent(f / n.ENTRIES - 1, 1 - (a - p) / (u[f + n.PREV_TIME] - p));
                                            d += (u[f + n.VALUE] - d) * g
                                        }
                                        l == e.setup ? h.spacing = h.data.spacing + (d - h.data.spacing) * o : h.spacing += (d - h.spacing) * o
                                    }
                            }, n
                        }(A);
                        t.PathConstraintSpacingTimeline = T;
                        var S = function (n) {
                            function s(e) {
                                var i = n.call(this, e) || this;
                                return i.frames = t.Utils.newFloatArray(e * s.ENTRIES), i
                            }
                            return a(s, n), s.prototype.getPropertyId = function () {
                                return (i.pathConstraintMix << 24) + this.pathConstraintIndex
                            }, s.prototype.setFrame = function (t, e, n, i) {
                                t *= s.ENTRIES, this.frames[t] = e, this.frames[t + s.ROTATE] = n, this.frames[t + s.TRANSLATE] = i
                            }, s.prototype.apply = function (t, n, i, a, o, l, c) {
                                var u = this.frames,
                                    h = t.pathConstraints[this.pathConstraintIndex];
                                if (h.active)
                                    if (i < u[0]) switch (l) {
                                        case e.setup:
                                            return h.rotateMix = h.data.rotateMix, void(h.translateMix = h.data.translateMix);
                                        case e.first:
                                            h.rotateMix += (h.data.rotateMix - h.rotateMix) * o, h.translateMix += (h.data.translateMix - h.translateMix) * o
                                    } else {
                                        var d = 0,
                                            f = 0;
                                        if (i >= u[u.length - s.ENTRIES]) d = u[u.length + s.PREV_ROTATE], f = u[u.length + s.PREV_TRANSLATE];
                                        else {
                                            var p = r.binarySearch(u, i, s.ENTRIES);
                                            d = u[p + s.PREV_ROTATE], f = u[p + s.PREV_TRANSLATE];
                                            var g = u[p],
                                                v = this.getCurvePercent(p / s.ENTRIES - 1, 1 - (i - g) / (u[p + s.PREV_TIME] - g));
                                            d += (u[p + s.ROTATE] - d) * v, f += (u[p + s.TRANSLATE] - f) * v
                                        }
                                        l == e.setup ? (h.rotateMix = h.data.rotateMix + (d - h.data.rotateMix) * o, h.translateMix = h.data.translateMix + (f - h.data.translateMix) * o) : (h.rotateMix += (d - h.rotateMix) * o, h.translateMix += (f - h.translateMix) * o)
                                    }
                            }, s.ENTRIES = 3, s.PREV_TIME = -3, s.PREV_ROTATE = -2, s.PREV_TRANSLATE = -1, s.ROTATE = 1, s.TRANSLATE = 2, s
                        }(s);
                        t.PathConstraintMixTimeline = S
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(e) {
                                this.tracks = new Array, this.timeScale = 1, this.unkeyedState = 0, this.events = new Array, this.listeners = new Array, this.queue = new a(this), this.propertyIDs = new t.IntSet, this.animationsChanged = !1, this.trackEntryPool = new t.Pool((function () {
                                    return new n
                                })), this.data = e
                            }
                            return e.prototype.update = function (t) {
                                t *= this.timeScale;
                                for (var e = this.tracks, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (null != a) {
                                        a.animationLast = a.nextAnimationLast, a.trackLast = a.nextTrackLast;
                                        var r = t * a.timeScale;
                                        if (a.delay > 0) {
                                            if (a.delay -= r, a.delay > 0) continue;
                                            r = -a.delay, a.delay = 0
                                        }
                                        var s = a.next;
                                        if (null != s) {
                                            var o = a.trackLast - s.delay;
                                            if (o >= 0) {
                                                for (s.delay = 0, s.trackTime += 0 == a.timeScale ? 0 : (o / a.timeScale + t) * s.timeScale, a.trackTime += r, this.setCurrent(n, s, !0); null != s.mixingFrom;) s.mixTime += t, s = s.mixingFrom;
                                                continue
                                            }
                                        } else if (a.trackLast >= a.trackEnd && null == a.mixingFrom) {
                                            e[n] = null, this.queue.end(a), this.disposeNext(a);
                                            continue
                                        }
                                        if (null != a.mixingFrom && this.updateMixingFrom(a, t)) {
                                            var l = a.mixingFrom;
                                            for (a.mixingFrom = null, null != l && (l.mixingTo = null); null != l;) this.queue.end(l), l = l.mixingFrom
                                        }
                                        a.trackTime += r
                                    }
                                }
                                this.queue.drain()
                            }, e.prototype.updateMixingFrom = function (t, e) {
                                var n = t.mixingFrom;
                                if (null == n) return !0;
                                var i = this.updateMixingFrom(n, e);
                                return n.animationLast = n.nextAnimationLast, n.trackLast = n.nextTrackLast, t.mixTime > 0 && t.mixTime >= t.mixDuration ? (0 != n.totalAlpha && 0 != t.mixDuration || (t.mixingFrom = n.mixingFrom, null != n.mixingFrom && (n.mixingFrom.mixingTo = t), t.interruptAlpha = n.interruptAlpha, this.queue.end(n)), i) : (n.trackTime += e * n.timeScale, t.mixTime += e, !1)
                            }, e.prototype.apply = function (n) {
                                if (null == n) throw new Error("skeleton cannot be null.");
                                this.animationsChanged && this._animationsChanged();
                                for (var i = this.events, a = this.tracks, r = !1, s = 0, o = a.length; s < o; s++) {
                                    var l = a[s];
                                    if (!(null == l || l.delay > 0)) {
                                        r = !0;
                                        var c = 0 == s ? t.MixBlend.first : l.mixBlend,
                                            u = l.alpha;
                                        null != l.mixingFrom ? u *= this.applyMixingFrom(l, n, c) : l.trackTime >= l.trackEnd && null == l.next && (u = 0);
                                        var h = l.animationLast,
                                            d = l.getAnimationTime(),
                                            f = l.animation.timelines.length,
                                            p = l.animation.timelines;
                                        if (0 == s && 1 == u || c == t.MixBlend.add)
                                            for (var g = 0; g < f; g++) {
                                                t.Utils.webkit602BugfixHelper(u, c);
                                                var v = p[g];
                                                v instanceof t.AttachmentTimeline ? this.applyAttachmentTimeline(v, n, d, c, !0) : v.apply(n, h, d, i, u, c, t.MixDirection.mixIn)
                                            } else {
                                                var m = l.timelineMode,
                                                    E = 0 == l.timelinesRotation.length;
                                                E && t.Utils.setArraySize(l.timelinesRotation, f << 1, null);
                                                var y = l.timelinesRotation;
                                                for (g = 0; g < f; g++) {
                                                    var A = p[g],
                                                        T = m[g] == e.SUBSEQUENT ? c : t.MixBlend.setup;
                                                    A instanceof t.RotateTimeline ? this.applyRotateTimeline(A, n, d, u, T, y, g << 1, E) : A instanceof t.AttachmentTimeline ? this.applyAttachmentTimeline(A, n, d, c, !0) : (t.Utils.webkit602BugfixHelper(u, c), A.apply(n, h, d, i, u, T, t.MixDirection.mixIn))
                                                }
                                            }
                                        this.queueEvents(l, d), i.length = 0, l.nextAnimationLast = d, l.nextTrackLast = l.trackTime
                                    }
                                }
                                for (var S = this.unkeyedState + e.SETUP, M = n.slots, w = 0, x = n.slots.length; w < x; w++) {
                                    var C = M[w];
                                    if (C.attachmentState == S) {
                                        var I = C.data.attachmentName;
                                        C.attachment = null == I ? null : n.getAttachment(C.data.index, I)
                                    }
                                }
                                return this.unkeyedState += 2, this.queue.drain(), r
                            }, e.prototype.applyMixingFrom = function (n, i, a) {
                                var r = n.mixingFrom;
                                null != r.mixingFrom && this.applyMixingFrom(r, i, a);
                                var s = 0;
                                0 == n.mixDuration ? (s = 1, a == t.MixBlend.first && (a = t.MixBlend.setup)) : ((s = n.mixTime / n.mixDuration) > 1 && (s = 1), a != t.MixBlend.first && (a = r.mixBlend));
                                var o = s < r.eventThreshold ? this.events : null,
                                    l = s < r.attachmentThreshold,
                                    c = s < r.drawOrderThreshold,
                                    u = r.animationLast,
                                    h = r.getAnimationTime(),
                                    d = r.animation.timelines.length,
                                    f = r.animation.timelines,
                                    p = r.alpha * n.interruptAlpha,
                                    g = p * (1 - s);
                                if (a == t.MixBlend.add)
                                    for (var v = 0; v < d; v++) f[v].apply(i, u, h, o, g, a, t.MixDirection.mixOut);
                                else {
                                    var m = r.timelineMode,
                                        E = r.timelineHoldMix,
                                        y = 0 == r.timelinesRotation.length;
                                    y && t.Utils.setArraySize(r.timelinesRotation, d << 1, null);
                                    var A = r.timelinesRotation;
                                    for (r.totalAlpha = 0, v = 0; v < d; v++) {
                                        var T = f[v],
                                            S = t.MixDirection.mixOut,
                                            M = void 0,
                                            w = 0;
                                        switch (m[v]) {
                                            case e.SUBSEQUENT:
                                                if (!c && T instanceof t.DrawOrderTimeline) continue;
                                                M = a, w = g;
                                                break;
                                            case e.FIRST:
                                                M = t.MixBlend.setup, w = g;
                                                break;
                                            case e.HOLD_SUBSEQUENT:
                                                M = a, w = p;
                                                break;
                                            case e.HOLD_FIRST:
                                                M = t.MixBlend.setup, w = p;
                                                break;
                                            default:
                                                M = t.MixBlend.setup;
                                                var x = E[v];
                                                w = p * Math.max(0, 1 - x.mixTime / x.mixDuration)
                                        }
                                        r.totalAlpha += w, T instanceof t.RotateTimeline ? this.applyRotateTimeline(T, i, h, w, M, A, v << 1, y) : T instanceof t.AttachmentTimeline ? this.applyAttachmentTimeline(T, i, h, M, l) : (t.Utils.webkit602BugfixHelper(w, a), c && T instanceof t.DrawOrderTimeline && M == t.MixBlend.setup && (S = t.MixDirection.mixIn), T.apply(i, u, h, o, w, M, S))
                                    }
                                }
                                return n.mixDuration > 0 && this.queueEvents(r, h), this.events.length = 0, r.nextAnimationLast = h, r.nextTrackLast = r.trackTime, s
                            }, e.prototype.applyAttachmentTimeline = function (n, i, a, r, s) {
                                var o = i.slots[n.slotIndex];
                                if (o.bone.active) {
                                    var l, c = n.frames;
                                    a < c[0] ? r != t.MixBlend.setup && r != t.MixBlend.first || this.setAttachment(i, o, o.data.attachmentName, s) : (l = a >= c[c.length - 1] ? c.length - 1 : t.Animation.binarySearch(c, a) - 1, this.setAttachment(i, o, n.attachmentNames[l], s)), o.attachmentState <= this.unkeyedState && (o.attachmentState = this.unkeyedState + e.SETUP)
                                }
                            }, e.prototype.setAttachment = function (t, n, i, a) {
                                n.attachment = null == i ? null : t.getAttachment(n.data.index, i), a && (n.attachmentState = this.unkeyedState + e.CURRENT)
                            }, e.prototype.applyRotateTimeline = function (e, n, i, a, r, s, o, l) {
                                if (l && (s[o] = 0), 1 != a) {
                                    var c = e,
                                        u = c.frames,
                                        h = n.bones[c.boneIndex];
                                    if (h.active) {
                                        var d = 0,
                                            f = 0;
                                        if (i < u[0]) switch (r) {
                                                case t.MixBlend.setup:
                                                    h.rotation = h.data.rotation;
                                                default:
                                                    return;
                                                case t.MixBlend.first:
                                                    d = h.rotation, f = h.data.rotation
                                            } else if (d = r == t.MixBlend.setup ? h.data.rotation : h.rotation, i >= u[u.length - t.RotateTimeline.ENTRIES]) f = h.data.rotation + u[u.length + t.RotateTimeline.PREV_ROTATION];
                                            else {
                                                var p = t.Animation.binarySearch(u, i, t.RotateTimeline.ENTRIES),
                                                    g = u[p + t.RotateTimeline.PREV_ROTATION],
                                                    v = u[p],
                                                    m = c.getCurvePercent((p >> 1) - 1, 1 - (i - v) / (u[p + t.RotateTimeline.PREV_TIME] - v));
                                                f = u[p + t.RotateTimeline.ROTATION] - g, f = g + (f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0))) * m + h.data.rotation, f -= 360 * (16384 - (16384.499999999996 - f / 360 | 0))
                                            } var E = 0,
                                            y = f - d;
                                        if (0 == (y -= 360 * (16384 - (16384.499999999996 - y / 360 | 0)))) E = s[o];
                                        else {
                                            var A = 0,
                                                T = 0;
                                            l ? (A = 0, T = y) : (A = s[o], T = s[o + 1]);
                                            var S = y > 0,
                                                M = A >= 0;
                                            t.MathUtils.signum(T) != t.MathUtils.signum(y) && Math.abs(T) <= 90 && (Math.abs(A) > 180 && (A += 360 * t.MathUtils.signum(A)), M = S), E = y + A - A % 360, M != S && (E += 360 * t.MathUtils.signum(A)), s[o] = E
                                        }
                                        s[o + 1] = y, d += E * a, h.rotation = d - 360 * (16384 - (16384.499999999996 - d / 360 | 0))
                                    }
                                } else e.apply(n, 0, i, null, 1, r, t.MixDirection.mixIn)
                            }, e.prototype.queueEvents = function (t, e) {
                                for (var n = t.animationStart, i = t.animationEnd, a = i - n, r = t.trackLast % a, s = this.events, o = 0, l = s.length; o < l; o++) {
                                    var c = s[o];
                                    if (c.time < r) break;
                                    c.time > i || this.queue.event(t, c)
                                }
                                for ((t.loop ? 0 == a || r > t.trackTime % a : e >= i && t.animationLast < i) && this.queue.complete(t); o < l; o++) s[o].time < n || this.queue.event(t, s[o])
                            }, e.prototype.clearTracks = function () {
                                var t = this.queue.drainDisabled;
                                this.queue.drainDisabled = !0;
                                for (var e = 0, n = this.tracks.length; e < n; e++) this.clearTrack(e);
                                this.tracks.length = 0, this.queue.drainDisabled = t, this.queue.drain()
                            }, e.prototype.clearTrack = function (t) {
                                if (!(t >= this.tracks.length)) {
                                    var e = this.tracks[t];
                                    if (null != e) {
                                        this.queue.end(e), this.disposeNext(e);
                                        for (var n = e;;) {
                                            var i = n.mixingFrom;
                                            if (null == i) break;
                                            this.queue.end(i), n.mixingFrom = null, n.mixingTo = null, n = i
                                        }
                                        this.tracks[e.trackIndex] = null, this.queue.drain()
                                    }
                                }
                            }, e.prototype.setCurrent = function (t, e, n) {
                                var i = this.expandToIndex(t);
                                this.tracks[t] = e, null != i && (n && this.queue.interrupt(i), e.mixingFrom = i, i.mixingTo = e, e.mixTime = 0, null != i.mixingFrom && i.mixDuration > 0 && (e.interruptAlpha *= Math.min(1, i.mixTime / i.mixDuration)), i.timelinesRotation.length = 0), this.queue.start(e)
                            }, e.prototype.setAnimation = function (t, e, n) {
                                var i = this.data.skeletonData.findAnimation(e);
                                if (null == i) throw new Error("Animation not found: " + e);
                                return this.setAnimationWith(t, i, n)
                            }, e.prototype.setAnimationWith = function (t, e, n) {
                                if (null == e) throw new Error("animation cannot be null.");
                                var i = !0,
                                    a = this.expandToIndex(t);
                                null != a && (-1 == a.nextTrackLast ? (this.tracks[t] = a.mixingFrom, this.queue.interrupt(a), this.queue.end(a), this.disposeNext(a), a = a.mixingFrom, i = !1) : this.disposeNext(a));
                                var r = this.trackEntry(t, e, n, a);
                                return this.setCurrent(t, r, i), this.queue.drain(), r
                            }, e.prototype.addAnimation = function (t, e, n, i) {
                                var a = this.data.skeletonData.findAnimation(e);
                                if (null == a) throw new Error("Animation not found: " + e);
                                return this.addAnimationWith(t, a, n, i)
                            }, e.prototype.addAnimationWith = function (t, e, n, i) {
                                if (null == e) throw new Error("animation cannot be null.");
                                var a = this.expandToIndex(t);
                                if (null != a)
                                    for (; null != a.next;) a = a.next;
                                var r = this.trackEntry(t, e, n, a);
                                if (null == a) this.setCurrent(t, r, !0), this.queue.drain();
                                else if (a.next = r, i <= 0) {
                                    var s = a.animationEnd - a.animationStart;
                                    0 != s ? (a.loop ? i += s * (1 + (a.trackTime / s | 0)) : i += Math.max(s, a.trackTime), i -= this.data.getMix(a.animation, e)) : i = a.trackTime
                                }
                                return r.delay = i, r
                            }, e.prototype.setEmptyAnimation = function (t, n) {
                                var i = this.setAnimationWith(t, e.emptyAnimation, !1);
                                return i.mixDuration = n, i.trackEnd = n, i
                            }, e.prototype.addEmptyAnimation = function (t, n, i) {
                                i <= 0 && (i -= n);
                                var a = this.addAnimationWith(t, e.emptyAnimation, !1, i);
                                return a.mixDuration = n, a.trackEnd = n, a
                            }, e.prototype.setEmptyAnimations = function (t) {
                                var e = this.queue.drainDisabled;
                                this.queue.drainDisabled = !0;
                                for (var n = 0, i = this.tracks.length; n < i; n++) {
                                    var a = this.tracks[n];
                                    null != a && this.setEmptyAnimation(a.trackIndex, t)
                                }
                                this.queue.drainDisabled = e, this.queue.drain()
                            }, e.prototype.expandToIndex = function (e) {
                                return e < this.tracks.length ? this.tracks[e] : (t.Utils.ensureArrayCapacity(this.tracks, e + 1, null), this.tracks.length = e + 1, null)
                            }, e.prototype.trackEntry = function (e, n, i, a) {
                                var r = this.trackEntryPool.obtain();
                                return r.trackIndex = e, r.animation = n, r.loop = i, r.holdPrevious = !1, r.eventThreshold = 0, r.attachmentThreshold = 0, r.drawOrderThreshold = 0, r.animationStart = 0, r.animationEnd = n.duration, r.animationLast = -1, r.nextAnimationLast = -1, r.delay = 0, r.trackTime = 0, r.trackLast = -1, r.nextTrackLast = -1, r.trackEnd = Number.MAX_VALUE, r.timeScale = 1, r.alpha = 1, r.interruptAlpha = 1, r.mixTime = 0, r.mixDuration = null == a ? 0 : this.data.getMix(a.animation, n), r.mixBlend = t.MixBlend.replace, r
                            }, e.prototype.disposeNext = function (t) {
                                for (var e = t.next; null != e;) this.queue.dispose(e), e = e.next;
                                t.next = null
                            }, e.prototype._animationsChanged = function () {
                                this.animationsChanged = !1, this.propertyIDs.clear();
                                for (var e = 0, n = this.tracks.length; e < n; e++) {
                                    var i = this.tracks[e];
                                    if (null != i) {
                                        for (; null != i.mixingFrom;) i = i.mixingFrom;
                                        do {
                                            null != i.mixingFrom && i.mixBlend == t.MixBlend.add || this.computeHold(i), i = i.mixingTo
                                        } while (null != i)
                                    }
                                }
                            }, e.prototype.computeHold = function (n) {
                                var i = n.mixingTo,
                                    a = n.animation.timelines,
                                    r = n.animation.timelines.length,
                                    s = t.Utils.setArraySize(n.timelineMode, r);
                                n.timelineHoldMix.length = 0;
                                var o = t.Utils.setArraySize(n.timelineHoldMix, r),
                                    l = this.propertyIDs;
                                if (null != i && i.holdPrevious)
                                    for (var c = 0; c < r; c++) s[c] = l.add(a[c].getPropertyId()) ? e.HOLD_FIRST : e.HOLD_SUBSEQUENT;
                                else t: for (c = 0; c < r; c++) {
                                    var u = a[c],
                                        h = u.getPropertyId();
                                    if (l.add(h))
                                        if (null == i || u instanceof t.AttachmentTimeline || u instanceof t.DrawOrderTimeline || u instanceof t.EventTimeline || !i.animation.hasTimeline(h)) s[c] = e.FIRST;
                                        else {
                                            for (var d = i.mixingTo; null != d; d = d.mixingTo)
                                                if (!d.animation.hasTimeline(h)) {
                                                    if (n.mixDuration > 0) {
                                                        s[c] = e.HOLD_MIX, o[c] = d;
                                                        continue t
                                                    }
                                                    break
                                                } s[c] = e.HOLD_FIRST
                                        }
                                    else s[c] = e.SUBSEQUENT
                                }
                            }, e.prototype.getCurrent = function (t) {
                                return t >= this.tracks.length ? null : this.tracks[t]
                            }, e.prototype.addListener = function (t) {
                                if (null == t) throw new Error("listener cannot be null.");
                                this.listeners.push(t)
                            }, e.prototype.removeListener = function (t) {
                                var e, n, i = g()(e = this.listeners).call(e, t);
                                i >= 0 && Pr()(n = this.listeners).call(n, i, 1)
                            }, e.prototype.clearListeners = function () {
                                this.listeners.length = 0
                            }, e.prototype.clearListenerNotifications = function () {
                                this.queue.clear()
                            }, e.emptyAnimation = new t.Animation("<empty>", [], 0), e.SUBSEQUENT = 0, e.FIRST = 1, e.HOLD_SUBSEQUENT = 2, e.HOLD_FIRST = 3, e.HOLD_MIX = 4, e.SETUP = 1, e.CURRENT = 2, e
                        }();
                        t.AnimationState = e;
                        var n = function () {
                            function e() {
                                this.mixBlend = t.MixBlend.replace, this.timelineMode = new Array, this.timelineHoldMix = new Array, this.timelinesRotation = new Array
                            }
                            return e.prototype.reset = function () {
                                this.next = null, this.mixingFrom = null, this.mixingTo = null, this.animation = null, this.listener = null, this.timelineMode.length = 0, this.timelineHoldMix.length = 0, this.timelinesRotation.length = 0
                            }, e.prototype.getAnimationTime = function () {
                                if (this.loop) {
                                    var t = this.animationEnd - this.animationStart;
                                    return 0 == t ? this.animationStart : this.trackTime % t + this.animationStart
                                }
                                return Math.min(this.trackTime + this.animationStart, this.animationEnd)
                            }, e.prototype.setAnimationLast = function (t) {
                                this.animationLast = t, this.nextAnimationLast = t
                            }, e.prototype.isComplete = function () {
                                return this.trackTime >= this.animationEnd - this.animationStart
                            }, e.prototype.resetRotationDirections = function () {
                                this.timelinesRotation.length = 0
                            }, e
                        }();
                        t.TrackEntry = n;
                        var i, a = function () {
                            function t(t) {
                                this.objects = [], this.drainDisabled = !1, this.animState = t
                            }
                            return t.prototype.start = function (t) {
                                this.objects.push(i.start), this.objects.push(t), this.animState.animationsChanged = !0
                            }, t.prototype.interrupt = function (t) {
                                this.objects.push(i.interrupt), this.objects.push(t)
                            }, t.prototype.end = function (t) {
                                this.objects.push(i.end), this.objects.push(t), this.animState.animationsChanged = !0
                            }, t.prototype.dispose = function (t) {
                                this.objects.push(i.dispose), this.objects.push(t)
                            }, t.prototype.complete = function (t) {
                                this.objects.push(i.complete), this.objects.push(t)
                            }, t.prototype.event = function (t, e) {
                                this.objects.push(i.event), this.objects.push(t), this.objects.push(e)
                            }, t.prototype.drain = function () {
                                if (!this.drainDisabled) {
                                    this.drainDisabled = !0;
                                    for (var t = this.objects, e = this.animState.listeners, n = 0; n < t.length; n += 2) {
                                        var a = t[n],
                                            r = t[n + 1];
                                        switch (a) {
                                            case i.start:
                                                null != r.listener && r.listener.start && r.listener.start(r);
                                                for (var s = 0; s < e.length; s++) e[s].start && e[s].start(r);
                                                break;
                                            case i.interrupt:
                                                for (null != r.listener && r.listener.interrupt && r.listener.interrupt(r), s = 0; s < e.length; s++) e[s].interrupt && e[s].interrupt(r);
                                                break;
                                            case i.end:
                                                for (null != r.listener && r.listener.end && r.listener.end(r), s = 0; s < e.length; s++) e[s].end && e[s].end(r);
                                            case i.dispose:
                                                for (null != r.listener && r.listener.dispose && r.listener.dispose(r), s = 0; s < e.length; s++) e[s].dispose && e[s].dispose(r);
                                                this.animState.trackEntryPool.free(r);
                                                break;
                                            case i.complete:
                                                for (null != r.listener && r.listener.complete && r.listener.complete(r), s = 0; s < e.length; s++) e[s].complete && e[s].complete(r);
                                                break;
                                            case i.event:
                                                var o = t[2 + n++];
                                                for (null != r.listener && r.listener.event && r.listener.event(r, o), s = 0; s < e.length; s++) e[s].event && e[s].event(r, o)
                                        }
                                    }
                                    this.clear(), this.drainDisabled = !1
                                }
                            }, t.prototype.clear = function () {
                                this.objects.length = 0
                            }, t
                        }();
                        t.EventQueue = a,
                            function (t) {
                                t[t.start = 0] = "start", t[t.interrupt = 1] = "interrupt", t[t.end = 2] = "end", t[t.dispose = 3] = "dispose", t[t.complete = 4] = "complete", t[t.event = 5] = "event"
                            }(i = t.EventType || (t.EventType = {}));
                        var r = function () {
                            function t() {}
                            return t.prototype.start = function (t) {}, t.prototype.interrupt = function (t) {}, t.prototype.end = function (t) {}, t.prototype.dispose = function (t) {}, t.prototype.complete = function (t) {}, t.prototype.event = function (t, e) {}, t
                        }();
                        t.AnimationStateAdapter = r
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function t(t) {
                                if (this.animationToMixTime = {}, this.defaultMix = 0, null == t) throw new Error("skeletonData cannot be null.");
                                this.skeletonData = t
                            }
                            return t.prototype.setMix = function (t, e, n) {
                                var i = this.skeletonData.findAnimation(t);
                                if (null == i) throw new Error("Animation not found: " + t);
                                var a = this.skeletonData.findAnimation(e);
                                if (null == a) throw new Error("Animation not found: " + e);
                                this.setMixWith(i, a, n)
                            }, t.prototype.setMixWith = function (t, e, n) {
                                if (null == t) throw new Error("from cannot be null.");
                                if (null == e) throw new Error("to cannot be null.");
                                var i = t.name + "." + e.name;
                                this.animationToMixTime[i] = n
                            }, t.prototype.getMix = function (t, e) {
                                var n = t.name + "." + e.name,
                                    i = this.animationToMixTime[n];
                                return void 0 === i ? this.defaultMix : i
                            }, t
                        }();
                        t.AnimationStateData = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t, e) {
                                void 0 === e && (e = ""), this.assets = {}, this.errors = {}, this.toLoad = 0, this.loaded = 0, this.rawDataUris = {}, this.textureLoader = t, this.pathPrefix = e
                            }
                            return e.prototype.downloadText = function (t, e, n) {
                                var i = new XMLHttpRequest;
                                i.overrideMimeType("text/html"), this.rawDataUris[t] && (t = this.rawDataUris[t]), i.open("GET", t, !0), i.onload = function () {
                                    200 == i.status ? e(i.responseText) : n(i.status, i.responseText)
                                }, i.onerror = function () {
                                    n(i.status, i.responseText)
                                }, i.send()
                            }, e.prototype.downloadBinary = function (t, e, n) {
                                var i = new XMLHttpRequest;
                                this.rawDataUris[t] && (t = this.rawDataUris[t]), i.open("GET", t, !0), i.responseType = "arraybuffer", i.onload = function () {
                                    200 == i.status ? e(new Uint8Array(i.response)) : n(i.status, i.responseText)
                                }, i.onerror = function () {
                                    n(i.status, i.responseText)
                                }, i.send()
                            }, e.prototype.setRawDataURI = function (t, e) {
                                this.rawDataUris[this.pathPrefix + t] = e
                            }, e.prototype.loadBinary = function (t, e, n) {
                                var i = this;
                                void 0 === e && (e = null), void 0 === n && (n = null), t = this.pathPrefix + t, this.toLoad++, this.downloadBinary(t, (function (n) {
                                    i.assets[t] = n, e && e(t, n), i.toLoad--, i.loaded++
                                }), (function (e, a) {
                                    i.errors[t] = "Couldn't load binary " + t + ": status " + status + ", " + a, n && n(t, "Couldn't load binary " + t + ": status " + status + ", " + a), i.toLoad--, i.loaded++
                                }))
                            }, e.prototype.loadText = function (t, e, n) {
                                var i = this;
                                void 0 === e && (e = null), void 0 === n && (n = null), t = this.pathPrefix + t, this.toLoad++, this.downloadText(t, (function (n) {
                                    i.assets[t] = n, e && e(t, n), i.toLoad--, i.loaded++
                                }), (function (e, a) {
                                    i.errors[t] = "Couldn't load text " + t + ": status " + status + ", " + a, n && n(t, "Couldn't load text " + t + ": status " + status + ", " + a), i.toLoad--, i.loaded++
                                }))
                            }, e.prototype.loadTexture = function (t, e, n) {
                                var i = this;
                                void 0 === e && (e = null), void 0 === n && (n = null);
                                var a = t = this.pathPrefix + t;
                                this.toLoad++;
                                var r = new Image;
                                r.crossOrigin = "anonymous", r.onload = function (n) {
                                    var s = i.textureLoader(r);
                                    i.assets[a] = s, i.toLoad--, i.loaded++, e && e(t, r)
                                }, r.onerror = function (e) {
                                    i.errors[t] = "Couldn't load image " + t, i.toLoad--, i.loaded++, n && n(t, "Couldn't load image " + t)
                                }, this.rawDataUris[t] && (t = this.rawDataUris[t]), r.src = t
                            }, e.prototype.loadTextureAtlas = function (e, n, i) {
                                var a = this;
                                void 0 === n && (n = null), void 0 === i && (i = null);
                                var r = it()(e).call(e, "/") >= 0 ? e.substring(0, it()(e).call(e, "/")) : "";
                                e = this.pathPrefix + e, this.toLoad++, this.downloadText(e, (function (s) {
                                    var o = {
                                            count: 0
                                        },
                                        l = new Array;
                                    try {
                                        new t.TextureAtlas(s, (function (e) {
                                            l.push("" == r ? e : r + "/" + e);
                                            var n = document.createElement("img");
                                            return n.width = 16, n.height = 16, new t.FakeTexture(n)
                                        }))
                                    } catch (t) {
                                        var c = t;
                                        return a.errors[e] = "Couldn't load texture atlas " + e + ": " + c.message, i && i(e, "Couldn't load texture atlas " + e + ": " + c.message), a.toLoad--, void a.loaded++
                                    }
                                    for (var u = function (c) {
                                            var u = !1;
                                            a.loadTexture(c, (function (c, h) {
                                                if (o.count++, o.count == l.length)
                                                    if (u) a.errors[e] = "Couldn't load texture atlas page " + c + "} of atlas " + e, i && i(e, "Couldn't load texture atlas page " + c + " of atlas " + e), a.toLoad--, a.loaded++;
                                                    else try {
                                                        var d = new t.TextureAtlas(s, (function (t) {
                                                            return a.get("" == r ? t : r + "/" + t)
                                                        }));
                                                        a.assets[e] = d, n && n(e, d), a.toLoad--, a.loaded++
                                                    } catch (t) {
                                                        var f = t;
                                                        a.errors[e] = "Couldn't load texture atlas " + e + ": " + f.message, i && i(e, "Couldn't load texture atlas " + e + ": " + f.message), a.toLoad--, a.loaded++
                                                    }
                                            }), (function (t, n) {
                                                u = !0, o.count++, o.count == l.length && (a.errors[e] = "Couldn't load texture atlas page " + t + "} of atlas " + e, i && i(e, "Couldn't load texture atlas page " + t + " of atlas " + e), a.toLoad--, a.loaded++)
                                            }))
                                        }, h = 0, d = l; h < d.length; h++) u(d[h])
                                }), (function (t, n) {
                                    a.errors[e] = "Couldn't load texture atlas " + e + ": status " + status + ", " + n, i && i(e, "Couldn't load texture atlas " + e + ": status " + status + ", " + n), a.toLoad--, a.loaded++
                                }))
                            }, e.prototype.get = function (t) {
                                return t = this.pathPrefix + t, this.assets[t]
                            }, e.prototype.remove = function (t) {
                                t = this.pathPrefix + t;
                                var e = this.assets[t];
                                e.dispose && e.dispose(), this.assets[t] = null
                            }, e.prototype.removeAll = function () {
                                for (var t in this.assets) {
                                    var e = this.assets[t];
                                    e.dispose && e.dispose()
                                }
                                this.assets = {}
                            }, e.prototype.isLoadingComplete = function () {
                                return 0 == this.toLoad
                            }, e.prototype.getToLoad = function () {
                                return this.toLoad
                            }, e.prototype.getLoaded = function () {
                                return this.loaded
                            }, e.prototype.dispose = function () {
                                this.removeAll()
                            }, e.prototype.hasErrors = function () {
                                return V()(this.errors).length > 0
                            }, e.prototype.getErrors = function () {
                                return this.errors
                            }, e
                        }();
                        t.AssetManager = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t) {
                                this.atlas = t
                            }
                            return e.prototype.newRegionAttachment = function (e, n, i) {
                                var a = this.atlas.findRegion(i);
                                if (null == a) throw new Error("Region not found in atlas: " + i + " (region attachment: " + n + ")");
                                a.renderObject = a;
                                var r = new t.RegionAttachment(n);
                                return r.setRegion(a), r
                            }, e.prototype.newMeshAttachment = function (e, n, i) {
                                var a = this.atlas.findRegion(i);
                                if (null == a) throw new Error("Region not found in atlas: " + i + " (mesh attachment: " + n + ")");
                                a.renderObject = a;
                                var r = new t.MeshAttachment(n);
                                return r.region = a, r
                            }, e.prototype.newBoundingBoxAttachment = function (e, n) {
                                return new t.BoundingBoxAttachment(n)
                            }, e.prototype.newPathAttachment = function (e, n) {
                                return new t.PathAttachment(n)
                            }, e.prototype.newPointAttachment = function (e, n) {
                                return new t.PointAttachment(n)
                            }, e.prototype.newClippingAttachment = function (e, n) {
                                return new t.ClippingAttachment(n)
                            }, e
                        }();
                        t.AtlasAttachmentLoader = e
                    }(i || (i = {})),
                    function (t) {
                        var e;
                        (e = t.BlendMode || (t.BlendMode = {}))[e.Normal = 0] = "Normal", e[e.Additive = 1] = "Additive", e[e.Multiply = 2] = "Multiply", e[e.Screen = 3] = "Screen"
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t, e, n) {
                                if (this.children = new Array, this.x = 0, this.y = 0, this.rotation = 0, this.scaleX = 0, this.scaleY = 0, this.shearX = 0, this.shearY = 0, this.ax = 0, this.ay = 0, this.arotation = 0, this.ascaleX = 0, this.ascaleY = 0, this.ashearX = 0, this.ashearY = 0, this.appliedValid = !1, this.a = 0, this.b = 0, this.c = 0, this.d = 0, this.worldY = 0, this.worldX = 0, this.sorted = !1, this.active = !1, null == t) throw new Error("data cannot be null.");
                                if (null == e) throw new Error("skeleton cannot be null.");
                                this.data = t, this.skeleton = e, this.parent = n, this.setToSetupPose()
                            }
                            return e.prototype.isActive = function () {
                                return this.active
                            }, e.prototype.update = function () {
                                this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
                            }, e.prototype.updateWorldTransform = function () {
                                this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY)
                            }, e.prototype.updateWorldTransformWith = function (e, n, i, a, r, s, o) {
                                this.ax = e, this.ay = n, this.arotation = i, this.ascaleX = a, this.ascaleY = r, this.ashearX = s, this.ashearY = o, this.appliedValid = !0;
                                var l = this.parent;
                                if (null == l) {
                                    var c = this.skeleton,
                                        u = i + 90 + o,
                                        h = c.scaleX,
                                        d = c.scaleY;
                                    return this.a = t.MathUtils.cosDeg(i + s) * a * h, this.b = t.MathUtils.cosDeg(u) * r * h, this.c = t.MathUtils.sinDeg(i + s) * a * d, this.d = t.MathUtils.sinDeg(u) * r * d, this.worldX = e * h + c.x, void(this.worldY = n * d + c.y)
                                }
                                var f = l.a,
                                    p = l.b,
                                    g = l.c,
                                    v = l.d;
                                switch (this.worldX = f * e + p * n + l.worldX, this.worldY = g * e + v * n + l.worldY, this.data.transformMode) {
                                    case t.TransformMode.Normal:
                                        u = i + 90 + o;
                                        var m = t.MathUtils.cosDeg(i + s) * a,
                                            E = t.MathUtils.cosDeg(u) * r,
                                            y = t.MathUtils.sinDeg(i + s) * a,
                                            A = t.MathUtils.sinDeg(u) * r;
                                        return this.a = f * m + p * y, this.b = f * E + p * A, this.c = g * m + v * y, void(this.d = g * E + v * A);
                                    case t.TransformMode.OnlyTranslation:
                                        u = i + 90 + o, this.a = t.MathUtils.cosDeg(i + s) * a, this.b = t.MathUtils.cosDeg(u) * r, this.c = t.MathUtils.sinDeg(i + s) * a, this.d = t.MathUtils.sinDeg(u) * r;
                                        break;
                                    case t.TransformMode.NoRotationOrReflection:
                                        var T = 0;
                                        (w = f * f + g * g) > 1e-4 ? (w = Math.abs(f * v - p * g) / w, f /= this.skeleton.scaleX, p = (g /= this.skeleton.scaleY) * w, v = f * w, T = Math.atan2(g, f) * t.MathUtils.radDeg) : (f = 0, g = 0, T = 90 - Math.atan2(v, p) * t.MathUtils.radDeg);
                                        var S = i + s - T,
                                            M = i + o - T + 90;
                                        m = t.MathUtils.cosDeg(S) * a, E = t.MathUtils.cosDeg(M) * r, y = t.MathUtils.sinDeg(S) * a, A = t.MathUtils.sinDeg(M) * r, this.a = f * m - p * y, this.b = f * E - p * A, this.c = g * m + v * y, this.d = g * E + v * A;
                                        break;
                                    case t.TransformMode.NoScale:
                                    case t.TransformMode.NoScaleOrReflection:
                                        var w, x = t.MathUtils.cosDeg(i),
                                            C = t.MathUtils.sinDeg(i),
                                            I = (f * x + p * C) / this.skeleton.scaleX,
                                            b = (g * x + v * C) / this.skeleton.scaleY;
                                        (w = Math.sqrt(I * I + b * b)) > 1e-5 && (w = 1 / w), I *= w, b *= w, w = Math.sqrt(I * I + b * b), this.data.transformMode == t.TransformMode.NoScale && f * v - p * g < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0) && (w = -w);
                                        var R = Math.PI / 2 + Math.atan2(b, I),
                                            P = Math.cos(R) * w,
                                            _ = Math.sin(R) * w;
                                        m = t.MathUtils.cosDeg(s) * a, E = t.MathUtils.cosDeg(90 + o) * r, y = t.MathUtils.sinDeg(s) * a, A = t.MathUtils.sinDeg(90 + o) * r, this.a = I * m + P * y, this.b = I * E + P * A, this.c = b * m + _ * y, this.d = b * E + _ * A
                                }
                                this.a *= this.skeleton.scaleX, this.b *= this.skeleton.scaleX, this.c *= this.skeleton.scaleY, this.d *= this.skeleton.scaleY
                            }, e.prototype.setToSetupPose = function () {
                                var t = this.data;
                                this.x = t.x, this.y = t.y, this.rotation = t.rotation, this.scaleX = t.scaleX, this.scaleY = t.scaleY, this.shearX = t.shearX, this.shearY = t.shearY
                            }, e.prototype.getWorldRotationX = function () {
                                return Math.atan2(this.c, this.a) * t.MathUtils.radDeg
                            }, e.prototype.getWorldRotationY = function () {
                                return Math.atan2(this.d, this.b) * t.MathUtils.radDeg
                            }, e.prototype.getWorldScaleX = function () {
                                return Math.sqrt(this.a * this.a + this.c * this.c)
                            }, e.prototype.getWorldScaleY = function () {
                                return Math.sqrt(this.b * this.b + this.d * this.d)
                            }, e.prototype.updateAppliedTransform = function () {
                                this.appliedValid = !0;
                                var e = this.parent;
                                if (null == e) return this.ax = this.worldX, this.ay = this.worldY, this.arotation = Math.atan2(this.c, this.a) * t.MathUtils.radDeg, this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c), this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d), this.ashearX = 0, void(this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * t.MathUtils.radDeg);
                                var n = e.a,
                                    i = e.b,
                                    a = e.c,
                                    r = e.d,
                                    s = 1 / (n * r - i * a),
                                    o = this.worldX - e.worldX,
                                    l = this.worldY - e.worldY;
                                this.ax = o * r * s - l * i * s, this.ay = l * n * s - o * a * s;
                                var c = s * r,
                                    u = s * n,
                                    h = s * i,
                                    d = s * a,
                                    f = c * this.a - h * this.c,
                                    p = c * this.b - h * this.d,
                                    g = u * this.c - d * this.a,
                                    v = u * this.d - d * this.b;
                                if (this.ashearX = 0, this.ascaleX = Math.sqrt(f * f + g * g), this.ascaleX > 1e-4) {
                                    var m = f * v - p * g;
                                    this.ascaleY = m / this.ascaleX, this.ashearY = Math.atan2(f * p + g * v, m) * t.MathUtils.radDeg, this.arotation = Math.atan2(g, f) * t.MathUtils.radDeg
                                } else this.ascaleX = 0, this.ascaleY = Math.sqrt(p * p + v * v), this.ashearY = 0, this.arotation = 90 - Math.atan2(v, p) * t.MathUtils.radDeg
                            }, e.prototype.worldToLocal = function (t) {
                                var e = this.a,
                                    n = this.b,
                                    i = this.c,
                                    a = this.d,
                                    r = 1 / (e * a - n * i),
                                    s = t.x - this.worldX,
                                    o = t.y - this.worldY;
                                return t.x = s * a * r - o * n * r, t.y = o * e * r - s * i * r, t
                            }, e.prototype.localToWorld = function (t) {
                                var e = t.x,
                                    n = t.y;
                                return t.x = e * this.a + n * this.b + this.worldX, t.y = e * this.c + n * this.d + this.worldY, t
                            }, e.prototype.worldToLocalRotation = function (e) {
                                var n = t.MathUtils.sinDeg(e),
                                    i = t.MathUtils.cosDeg(e);
                                return Math.atan2(this.a * n - this.c * i, this.d * i - this.b * n) * t.MathUtils.radDeg + this.rotation - this.shearX
                            }, e.prototype.localToWorldRotation = function (e) {
                                e -= this.rotation - this.shearX;
                                var n = t.MathUtils.sinDeg(e),
                                    i = t.MathUtils.cosDeg(e);
                                return Math.atan2(i * this.c + n * this.d, i * this.a + n * this.b) * t.MathUtils.radDeg
                            }, e.prototype.rotateWorld = function (e) {
                                var n = this.a,
                                    i = this.b,
                                    a = this.c,
                                    r = this.d,
                                    s = t.MathUtils.cosDeg(e),
                                    o = t.MathUtils.sinDeg(e);
                                this.a = s * n - o * a, this.b = s * i - o * r, this.c = o * n + s * a, this.d = o * i + s * r, this.appliedValid = !1
                            }, e
                        }();
                        t.Bone = e
                    }(i || (i = {})),
                    function (t) {
                        var e;
                        t.BoneData = function (n, i, a) {
                                if (this.x = 0, this.y = 0, this.rotation = 0, this.scaleX = 1, this.scaleY = 1, this.shearX = 0, this.shearY = 0, this.transformMode = e.Normal, this.skinRequired = !1, this.color = new t.Color, n < 0) throw new Error("index must be >= 0.");
                                if (null == i) throw new Error("name cannot be null.");
                                this.index = n, this.name = i, this.parent = a
                            },
                            function (t) {
                                t[t.Normal = 0] = "Normal", t[t.OnlyTranslation = 1] = "OnlyTranslation", t[t.NoRotationOrReflection = 2] = "NoRotationOrReflection", t[t.NoScale = 3] = "NoScale", t[t.NoScaleOrReflection = 4] = "NoScaleOrReflection"
                            }(e = t.TransformMode || (t.TransformMode = {}))
                    }(i || (i = {})),
                    function (t) {
                        t.ConstraintData = function (t, e, n) {
                            this.name = t, this.order = e, this.skinRequired = n
                        }
                    }(i || (i = {})),
                    function (t) {
                        t.Event = function (t, e) {
                            if (null == e) throw new Error("data cannot be null.");
                            this.time = t, this.data = e
                        }
                    }(i || (i = {})),
                    function (t) {
                        t.EventData = function (t) {
                            this.name = t
                        }
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t, e) {
                                if (this.bendDirection = 0, this.compress = !1, this.stretch = !1, this.mix = 1, this.softness = 0, this.active = !1, null == t) throw new Error("data cannot be null.");
                                if (null == e) throw new Error("skeleton cannot be null.");
                                this.data = t, this.mix = t.mix, this.softness = t.softness, this.bendDirection = t.bendDirection, this.compress = t.compress, this.stretch = t.stretch, this.bones = new Array;
                                for (var n = 0; n < t.bones.length; n++) this.bones.push(e.findBone(t.bones[n].name));
                                this.target = e.findBone(t.target.name)
                            }
                            return e.prototype.isActive = function () {
                                return this.active
                            }, e.prototype.apply = function () {
                                this.update()
                            }, e.prototype.update = function () {
                                var t = this.target,
                                    e = this.bones;
                                switch (e.length) {
                                    case 1:
                                        this.apply1(e[0], t.worldX, t.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
                                        break;
                                    case 2:
                                        this.apply2(e[0], e[1], t.worldX, t.worldY, this.bendDirection, this.stretch, this.softness, this.mix)
                                }
                            }, e.prototype.apply1 = function (e, n, i, a, r, s, o) {
                                e.appliedValid || e.updateAppliedTransform();
                                var l = e.parent,
                                    c = l.a,
                                    u = l.b,
                                    h = l.c,
                                    d = l.d,
                                    f = -e.ashearX - e.arotation,
                                    p = 0,
                                    g = 0;
                                switch (e.data.transformMode) {
                                    case t.TransformMode.OnlyTranslation:
                                        p = n - e.worldX, g = i - e.worldY;
                                        break;
                                    case t.TransformMode.NoRotationOrReflection:
                                        var v = Math.abs(c * d - u * h) / (c * c + h * h),
                                            m = c / e.skeleton.scaleX,
                                            E = h / e.skeleton.scaleY;
                                        u = -E * v * e.skeleton.scaleX, d = m * v * e.skeleton.scaleY, f += Math.atan2(E, m) * t.MathUtils.radDeg;
                                    default:
                                        var y = n - l.worldX,
                                            A = i - l.worldY,
                                            T = c * d - u * h;
                                        p = (y * d - A * u) / T - e.ax, g = (A * c - y * h) / T - e.ay
                                }
                                f += Math.atan2(g, p) * t.MathUtils.radDeg, e.ascaleX < 0 && (f += 180), f > 180 ? f -= 360 : f < -180 && (f += 360);
                                var S = e.ascaleX,
                                    M = e.ascaleY;
                                if (a || r) {
                                    switch (e.data.transformMode) {
                                        case t.TransformMode.NoScale:
                                        case t.TransformMode.NoScaleOrReflection:
                                            p = n - e.worldX, g = i - e.worldY
                                    }
                                    var w = e.data.length * S,
                                        x = Math.sqrt(p * p + g * g);
                                    (a && x < w || r && x > w && w > 1e-4) && (S *= v = (x / w - 1) * o + 1, s && (M *= v))
                                }
                                e.updateWorldTransformWith(e.ax, e.ay, e.arotation + f * o, S, M, e.ashearX, e.ashearY)
                            }, e.prototype.apply2 = function (e, n, i, a, r, s, o, l) {
                                if (0 != l) {
                                    e.appliedValid || e.updateAppliedTransform(), n.appliedValid || n.updateAppliedTransform();
                                    var c = e.ax,
                                        u = e.ay,
                                        h = e.ascaleX,
                                        d = h,
                                        f = e.ascaleY,
                                        p = n.ascaleX,
                                        g = 0,
                                        v = 0,
                                        m = 0;
                                    h < 0 ? (h = -h, g = 180, m = -1) : (g = 0, m = 1), f < 0 && (f = -f, m = -m), p < 0 ? (p = -p, v = 180) : v = 0;
                                    var E = n.ax,
                                        y = 0,
                                        A = 0,
                                        T = 0,
                                        S = e.a,
                                        M = e.b,
                                        w = e.c,
                                        x = e.d,
                                        C = Math.abs(h - f) <= 1e-4;
                                    C ? (A = S * E + M * (y = n.ay) + e.worldX, T = w * E + x * y + e.worldY) : (y = 0, A = S * E + e.worldX, T = w * E + e.worldY);
                                    var I = e.parent;
                                    S = I.a, M = I.b, w = I.c;
                                    var b, R, P = 1 / (S * (x = I.d) - M * w),
                                        _ = A - I.worldX,
                                        k = T - I.worldY,
                                        L = (_ * x - k * M) * P - c,
                                        D = (k * S - _ * w) * P - u,
                                        O = Math.sqrt(L * L + D * D),
                                        N = n.data.length * p;
                                    if (O < 1e-4) return this.apply1(e, i, a, !1, s, !1, l), void n.updateWorldTransformWith(E, y, 0, n.ascaleX, n.ascaleY, n.ashearX, n.ashearY);
                                    var U = ((_ = i - I.worldX) * x - (k = a - I.worldY) * M) * P - c,
                                        B = (k * S - _ * w) * P - u,
                                        F = U * U + B * B;
                                    if (0 != o) {
                                        o *= h * (p + 1) / 2;
                                        var G = Math.sqrt(F),
                                            H = G - O - N * h + o;
                                        if (H > 0) {
                                            var V = Math.min(1, H / (2 * o)) - 1;
                                            F = (U -= (V = (H - o * (1 - V * V)) / G) * U) * U + (B -= V * B) * B
                                        }
                                    }
                                    t: if (C) {
                                        var Y = (F - O * O - (N *= h) * N) / (2 * O * N);
                                        Y < -1 ? Y = -1 : Y > 1 && (Y = 1, s && (d *= (Math.sqrt(F) / (O + N) - 1) * l + 1)), R = Math.acos(Y) * r, S = O + N * Y, M = N * Math.sin(R), b = Math.atan2(B * S - U * M, U * S + B * M)
                                    } else {
                                        var W = (S = h * N) * S,
                                            K = (M = f * N) * M,
                                            z = Math.atan2(B, U),
                                            X = -2 * K * O,
                                            j = K - W;
                                        if ((x = X * X - 4 * j * (w = K * O * O + W * F - W * K)) >= 0) {
                                            var q = Math.sqrt(x);
                                            X < 0 && (q = -q);
                                            var Z = (q = -(X + q) / 2) / j,
                                                Q = w / q,
                                                J = Math.abs(Z) < Math.abs(Q) ? Z : Q;
                                            if (J * J <= F) {
                                                k = Math.sqrt(F - J * J) * r, b = z - Math.atan2(k, J), R = Math.atan2(k / f, (J - O) / h);
                                                break t
                                            }
                                        }
                                        var $ = t.MathUtils.PI,
                                            tt = O - S,
                                            et = tt * tt,
                                            nt = 0,
                                            it = 0,
                                            at = O + S,
                                            rt = at * at,
                                            st = 0;
                                        (w = -S * O / (W - K)) >= -1 && w <= 1 && (w = Math.acos(w), (x = (_ = S * Math.cos(w) + O) * _ + (k = M * Math.sin(w)) * k) < et && ($ = w, et = x, tt = _, nt = k), x > rt && (it = w, rt = x, at = _, st = k)), F <= (et + rt) / 2 ? (b = z - Math.atan2(nt * r, tt), R = $ * r) : (b = z - Math.atan2(st * r, at), R = it * r)
                                    }
                                    var ot = Math.atan2(y, E) * m,
                                        lt = e.arotation;
                                    (b = (b - ot) * t.MathUtils.radDeg + g - lt) > 180 ? b -= 360 : b < -180 && (b += 360), e.updateWorldTransformWith(c, u, lt + b * l, d, e.ascaleY, 0, 0), lt = n.arotation, (R = ((R + ot) * t.MathUtils.radDeg - n.ashearX) * m + v - lt) > 180 ? R -= 360 : R < -180 && (R += 360), n.updateWorldTransformWith(E, y, lt + R * l, n.ascaleX, n.ascaleY, n.ashearX, n.ashearY)
                                } else n.updateWorldTransform()
                            }, e
                        }();
                        t.IkConstraint = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function (t) {
                            function e(e) {
                                var n = t.call(this, e, 0, !1) || this;
                                return n.bones = new Array, n.bendDirection = 1, n.compress = !1, n.stretch = !1, n.uniform = !1, n.mix = 1, n.softness = 0, n
                            }
                            return a(e, t), e
                        }(t.ConstraintData);
                        t.IkConstraintData = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t, e) {
                                if (this.position = 0, this.spacing = 0, this.rotateMix = 0, this.translateMix = 0, this.spaces = new Array, this.positions = new Array, this.world = new Array, this.curves = new Array, this.lengths = new Array, this.segments = new Array, this.active = !1, null == t) throw new Error("data cannot be null.");
                                if (null == e) throw new Error("skeleton cannot be null.");
                                this.data = t, this.bones = new Array;
                                for (var n = 0, i = t.bones.length; n < i; n++) this.bones.push(e.findBone(t.bones[n].name));
                                this.target = e.findSlot(t.target.name), this.position = t.position, this.spacing = t.spacing, this.rotateMix = t.rotateMix, this.translateMix = t.translateMix
                            }
                            return e.prototype.isActive = function () {
                                return this.active
                            }, e.prototype.apply = function () {
                                this.update()
                            }, e.prototype.update = function () {
                                var n = this.target.getAttachment();
                                if (n instanceof t.PathAttachment) {
                                    var i = this.rotateMix,
                                        a = this.translateMix,
                                        r = i > 0;
                                    if (a > 0 || r) {
                                        var s = this.data,
                                            o = s.spacingMode == t.SpacingMode.Percent,
                                            l = s.rotateMode,
                                            c = l == t.RotateMode.Tangent,
                                            u = l == t.RotateMode.ChainScale,
                                            h = this.bones.length,
                                            d = c ? h : h + 1,
                                            f = this.bones,
                                            p = t.Utils.setArraySize(this.spaces, d),
                                            g = null,
                                            v = this.spacing;
                                        if (u || !o) {
                                            u && (g = t.Utils.setArraySize(this.lengths, h));
                                            for (var m = s.spacingMode == t.SpacingMode.Length, E = 0, y = d - 1; E < y;) {
                                                var A = (_ = f[E]).data.length;
                                                if (A < e.epsilon) u && (g[E] = 0), p[++E] = 0;
                                                else if (o) {
                                                    if (u) {
                                                        var T = A * _.a,
                                                            S = A * _.c,
                                                            M = Math.sqrt(T * T + S * S);
                                                        g[E] = M
                                                    }
                                                    p[++E] = v
                                                } else {
                                                    T = A * _.a, S = A * _.c;
                                                    var w = Math.sqrt(T * T + S * S);
                                                    u && (g[E] = w), p[++E] = (m ? A + v : v) * w / A
                                                }
                                            }
                                        } else
                                            for (E = 1; E < d; E++) p[E] = v;
                                        var x = this.computeWorldPositions(n, d, c, s.positionMode == t.PositionMode.Percent, o),
                                            C = x[0],
                                            I = x[1],
                                            b = s.offsetRotation,
                                            R = !1;
                                        0 == b ? R = l == t.RotateMode.Chain : (R = !1, b *= (P = this.target.bone).a * P.d - P.b * P.c > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad), E = 0;
                                        for (var P = 3; E < h; E++, P += 3) {
                                            var _;
                                            (_ = f[E]).worldX += (C - _.worldX) * a, _.worldY += (I - _.worldY) * a;
                                            var k = (T = x[P]) - C,
                                                L = (S = x[P + 1]) - I;
                                            if (u) {
                                                var D = g[E];
                                                if (0 != D) {
                                                    var O = (Math.sqrt(k * k + L * L) / D - 1) * i + 1;
                                                    _.a *= O, _.c *= O
                                                }
                                            }
                                            if (C = T, I = S, r) {
                                                var N = _.a,
                                                    U = _.b,
                                                    B = _.c,
                                                    F = _.d,
                                                    G = 0,
                                                    H = 0,
                                                    V = 0;
                                                if (G = c ? x[P - 1] : 0 == p[E + 1] ? x[P + 2] : Math.atan2(L, k), G -= Math.atan2(B, N), R) {
                                                    H = Math.cos(G), V = Math.sin(G);
                                                    var Y = _.data.length;
                                                    C += (Y * (H * N - V * B) - k) * i, I += (Y * (V * N + H * B) - L) * i
                                                } else G += b;
                                                G > t.MathUtils.PI ? G -= t.MathUtils.PI2 : G < -t.MathUtils.PI && (G += t.MathUtils.PI2), G *= i, H = Math.cos(G), V = Math.sin(G), _.a = H * N - V * B, _.b = H * U - V * F, _.c = V * N + H * B, _.d = V * U + H * F
                                            }
                                            _.appliedValid = !1
                                        }
                                    }
                                }
                            }, e.prototype.computeWorldPositions = function (n, i, a, r, s) {
                                var o = this.target,
                                    l = this.position,
                                    c = this.spaces,
                                    u = t.Utils.setArraySize(this.positions, 3 * i + 2),
                                    h = null,
                                    d = n.closed,
                                    f = n.worldVerticesLength,
                                    p = f / 6,
                                    g = e.NONE;
                                if (!n.constantSpeed) {
                                    var v = n.lengths,
                                        m = v[p -= d ? 1 : 2];
                                    if (r && (l *= m), s)
                                        for (var E = 1; E < i; E++) c[E] *= m;
                                    h = t.Utils.setArraySize(this.world, 8), E = 0;
                                    for (var y = 0, A = 0; E < i; E++, y += 3) {
                                        var T = l += K = c[E];
                                        if (d)(T %= m) < 0 && (T += m), A = 0;
                                        else {
                                            if (T < 0) {
                                                g != e.BEFORE && (g = e.BEFORE, n.computeWorldVertices(o, 2, 4, h, 0, 2)), this.addBeforePosition(T, h, 0, u, y);
                                                continue
                                            }
                                            if (T > m) {
                                                g != e.AFTER && (g = e.AFTER, n.computeWorldVertices(o, f - 6, 4, h, 0, 2)), this.addAfterPosition(T - m, h, 0, u, y);
                                                continue
                                            }
                                        }
                                        for (;; A++) {
                                            var S = v[A];
                                            if (!(T > S)) {
                                                0 == A ? T /= S : T = (T - (q = v[A - 1])) / (S - q);
                                                break
                                            }
                                        }
                                        A != g && (g = A, d && A == p ? (n.computeWorldVertices(o, f - 4, 4, h, 0, 2), n.computeWorldVertices(o, 0, 4, h, 4, 2)) : n.computeWorldVertices(o, 6 * A + 2, 8, h, 0, 2)), this.addCurvePosition(T, h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], u, y, a || E > 0 && 0 == K)
                                    }
                                    return u
                                }
                                d ? (f += 2, h = t.Utils.setArraySize(this.world, f), n.computeWorldVertices(o, 2, f - 4, h, 0, 2), n.computeWorldVertices(o, 0, 2, h, f - 4, 2), h[f - 2] = h[0], h[f - 1] = h[1]) : (p--, f -= 4, h = t.Utils.setArraySize(this.world, f), n.computeWorldVertices(o, 2, f, h, 0, 2));
                                for (var M = t.Utils.setArraySize(this.curves, p), w = 0, x = h[0], C = h[1], I = 0, b = 0, R = 0, P = 0, _ = 0, k = 0, L = 0, D = 0, O = 0, N = 0, U = 0, B = 0, F = 0, G = 0, H = (E = 0, 2); E < p; E++, H += 6) I = h[H], b = h[H + 1], R = h[H + 2], P = h[H + 3], U = 2 * (L = .1875 * (x - 2 * I + R)) + (O = .09375 * (3 * (I - R) - x + (_ = h[H + 4]))), B = 2 * (D = .1875 * (C - 2 * b + P)) + (N = .09375 * (3 * (b - P) - C + (k = h[H + 5]))), F = .75 * (I - x) + L + .16666667 * O, G = .75 * (b - C) + D + .16666667 * N, w += Math.sqrt(F * F + G * G), F += U, G += B, U += O, B += N, w += Math.sqrt(F * F + G * G), F += U, G += B, w += Math.sqrt(F * F + G * G), F += U + O, G += B + N, w += Math.sqrt(F * F + G * G), M[E] = w, x = _, C = k;
                                if (l *= r ? w : w / n.lengths[p - 1], s)
                                    for (E = 1; E < i; E++) c[E] *= w;
                                for (var V = this.segments, Y = 0, W = (E = 0, y = 0, A = 0, 0); E < i; E++, y += 3) {
                                    var K;
                                    if (T = l += K = c[E], d)(T %= w) < 0 && (T += w), A = 0;
                                    else {
                                        if (T < 0) {
                                            this.addBeforePosition(T, h, 0, u, y);
                                            continue
                                        }
                                        if (T > w) {
                                            this.addAfterPosition(T - w, h, f - 4, u, y);
                                            continue
                                        }
                                    }
                                    for (;; A++) {
                                        var z = M[A];
                                        if (!(T > z)) {
                                            0 == A ? T /= z : T = (T - (q = M[A - 1])) / (z - q);
                                            break
                                        }
                                    }
                                    if (A != g) {
                                        g = A;
                                        var X = 6 * A;
                                        for (x = h[X], C = h[X + 1], I = h[X + 2], b = h[X + 3], R = h[X + 4], P = h[X + 5], U = 2 * (L = .03 * (x - 2 * I + R)) + (O = .006 * (3 * (I - R) - x + (_ = h[X + 6]))), B = 2 * (D = .03 * (C - 2 * b + P)) + (N = .006 * (3 * (b - P) - C + (k = h[X + 7]))), F = .3 * (I - x) + L + .16666667 * O, G = .3 * (b - C) + D + .16666667 * N, Y = Math.sqrt(F * F + G * G), V[0] = Y, X = 1; X < 8; X++) F += U, G += B, U += O, B += N, Y += Math.sqrt(F * F + G * G), V[X] = Y;
                                        F += U, G += B, Y += Math.sqrt(F * F + G * G), V[8] = Y, F += U + O, G += B + N, Y += Math.sqrt(F * F + G * G), V[9] = Y, W = 0
                                    }
                                    for (T *= Y;; W++) {
                                        var j = V[W];
                                        if (!(T > j)) {
                                            var q;
                                            0 == W ? T /= j : T = W + (T - (q = V[W - 1])) / (j - q);
                                            break
                                        }
                                    }
                                    this.addCurvePosition(.1 * T, x, C, I, b, R, P, _, k, u, y, a || E > 0 && 0 == K)
                                }
                                return u
                            }, e.prototype.addBeforePosition = function (t, e, n, i, a) {
                                var r = e[n],
                                    s = e[n + 1],
                                    o = e[n + 2] - r,
                                    l = e[n + 3] - s,
                                    c = Math.atan2(l, o);
                                i[a] = r + t * Math.cos(c), i[a + 1] = s + t * Math.sin(c), i[a + 2] = c
                            }, e.prototype.addAfterPosition = function (t, e, n, i, a) {
                                var r = e[n + 2],
                                    s = e[n + 3],
                                    o = r - e[n],
                                    l = s - e[n + 1],
                                    c = Math.atan2(l, o);
                                i[a] = r + t * Math.cos(c), i[a + 1] = s + t * Math.sin(c), i[a + 2] = c
                            }, e.prototype.addCurvePosition = function (t, e, n, i, a, r, s, o, l, c, u, h) {
                                if (0 == t || isNaN(t)) return c[u] = e, c[u + 1] = n, void(c[u + 2] = Math.atan2(a - n, i - e));
                                var d = t * t,
                                    f = d * t,
                                    p = 1 - t,
                                    g = p * p,
                                    v = g * p,
                                    m = p * t,
                                    E = 3 * m,
                                    y = p * E,
                                    A = E * t,
                                    T = e * v + i * y + r * A + o * f,
                                    S = n * v + a * y + s * A + l * f;
                                c[u] = T, c[u + 1] = S, h && (c[u + 2] = t < .001 ? Math.atan2(a - n, i - e) : Math.atan2(S - (n * g + a * m * 2 + s * d), T - (e * g + i * m * 2 + r * d)))
                            }, e.NONE = -1, e.BEFORE = -2, e.AFTER = -3, e.epsilon = 1e-5, e
                        }();
                        t.PathConstraint = e
                    }(i || (i = {})),
                    function (t) {
                        var e, n, i, r = function (t) {
                            function e(e) {
                                var n = t.call(this, e, 0, !1) || this;
                                return n.bones = new Array, n
                            }
                            return a(e, t), e
                        }(t.ConstraintData);
                        t.PathConstraintData = r, (i = t.PositionMode || (t.PositionMode = {}))[i.Fixed = 0] = "Fixed", i[i.Percent = 1] = "Percent", (n = t.SpacingMode || (t.SpacingMode = {}))[n.Length = 0] = "Length", n[n.Fixed = 1] = "Fixed", n[n.Percent = 2] = "Percent", (e = t.RotateMode || (t.RotateMode = {}))[e.Tangent = 0] = "Tangent", e[e.Chain = 1] = "Chain", e[e.ChainScale = 2] = "ChainScale"
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                                function t(t) {
                                    this.toLoad = new Array, this.assets = {}, this.clientId = t
                                }
                                return t.prototype.loaded = function () {
                                    var t = 0;
                                    for (var e in this.assets) t++;
                                    return t
                                }, t
                            }(),
                            n = function () {
                                function t(t) {
                                    void 0 === t && (t = ""), this.clientAssets = {}, this.queuedAssets = {}, this.rawAssets = {}, this.errors = {}, this.pathPrefix = t
                                }
                                return t.prototype.queueAsset = function (t, n, i) {
                                    var a = this.clientAssets[t];
                                    return null == a && (a = new e(t), this.clientAssets[t] = a), null !== n && (a.textureLoader = n), a.toLoad.push(i), this.queuedAssets[i] !== i && (this.queuedAssets[i] = i, !0)
                                }, t.prototype.loadText = function (t, e) {
                                    var n = this;
                                    if (e = this.pathPrefix + e, this.queueAsset(t, null, e)) {
                                        var i = new XMLHttpRequest;
                                        i.overrideMimeType("text/html"), i.onreadystatechange = function () {
                                            i.readyState == XMLHttpRequest.DONE && (i.status >= 200 && i.status < 300 ? n.rawAssets[e] = i.responseText : n.errors[e] = "Couldn't load text " + e + ": status " + i.status + ", " + i.responseText)
                                        }, i.open("GET", e, !0), i.send()
                                    }
                                }, t.prototype.loadJson = function (t, e) {
                                    var n = this;
                                    if (e = this.pathPrefix + e, this.queueAsset(t, null, e)) {
                                        var i = new XMLHttpRequest;
                                        i.overrideMimeType("text/html"), i.onreadystatechange = function () {
                                            i.readyState == XMLHttpRequest.DONE && (i.status >= 200 && i.status < 300 ? n.rawAssets[e] = JSON.parse(i.responseText) : n.errors[e] = "Couldn't load text " + e + ": status " + i.status + ", " + i.responseText)
                                        }, i.open("GET", e, !0), i.send()
                                    }
                                }, t.prototype.loadTexture = function (t, e, n) {
                                    var i = this;
                                    if (n = this.pathPrefix + n, this.queueAsset(t, e, n))
                                        if ("undefined" != typeof window && "undefined" != typeof navigator && window.document || "undefined" == typeof importScripts) {
                                            var a = new Image;
                                            a.crossOrigin = "anonymous", a.onload = function (t) {
                                                i.rawAssets[n] = a
                                            }, a.onerror = function (t) {
                                                i.errors[n] = "Couldn't load image " + n
                                            }, a.src = n
                                        } else fetch(n, {
                                            mode: "cors"
                                        }).then((function (t) {
                                            return t.ok || (i.errors[n] = "Couldn't load image " + n), t.blob()
                                        })).then((function (t) {
                                            return createImageBitmap(t, {
                                                premultiplyAlpha: "none",
                                                colorSpaceConversion: "none"
                                            })
                                        })).then((function (t) {
                                            i.rawAssets[n] = t
                                        }))
                                }, t.prototype.get = function (t, e) {
                                    e = this.pathPrefix + e;
                                    var n = this.clientAssets[t];
                                    return null == n || n.assets[e]
                                }, t.prototype.updateClientAssets = function (t) {
                                    for (var e = !("undefined" != typeof window && "undefined" != typeof navigator && window.document) && "undefined" != typeof importScripts, n = 0; n < t.toLoad.length; n++) {
                                        var i = t.toLoad[n];
                                        if (null == t.assets[i]) {
                                            var a = this.rawAssets[i];
                                            if (null == a) continue;
                                            e ? a instanceof ImageBitmap ? t.assets[i] = t.textureLoader(a) : t.assets[i] = a : a instanceof HTMLImageElement ? t.assets[i] = t.textureLoader(a) : t.assets[i] = a
                                        }
                                    }
                                }, t.prototype.isLoadingComplete = function (t) {
                                    var e = this.clientAssets[t];
                                    return null == e || (this.updateClientAssets(e), e.toLoad.length == e.loaded())
                                }, t.prototype.dispose = function () {}, t.prototype.hasErrors = function () {
                                    return V()(this.errors).length > 0
                                }, t.prototype.getErrors = function () {
                                    return this.errors
                                }, t
                            }();
                        t.SharedAssetManager = n
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(e) {
                                if (this._updateCache = new Array, this.updateCacheReset = new Array, this.time = 0, this.scaleX = 1, this.scaleY = 1, this.x = 0, this.y = 0, null == e) throw new Error("data cannot be null.");
                                this.data = e, this.bones = new Array;
                                for (var n = 0; n < e.bones.length; n++) {
                                    var i = e.bones[n],
                                        a = void 0;
                                    if (null == i.parent) a = new t.Bone(i, this, null);
                                    else {
                                        var r = this.bones[i.parent.index];
                                        a = new t.Bone(i, this, r), r.children.push(a)
                                    }
                                    this.bones.push(a)
                                }
                                for (this.slots = new Array, this.drawOrder = new Array, n = 0; n < e.slots.length; n++) {
                                    var s = e.slots[n],
                                        o = (a = this.bones[s.boneData.index], new t.Slot(s, a));
                                    this.slots.push(o), this.drawOrder.push(o)
                                }
                                for (this.ikConstraints = new Array, n = 0; n < e.ikConstraints.length; n++) {
                                    var l = e.ikConstraints[n];
                                    this.ikConstraints.push(new t.IkConstraint(l, this))
                                }
                                for (this.transformConstraints = new Array, n = 0; n < e.transformConstraints.length; n++) {
                                    var c = e.transformConstraints[n];
                                    this.transformConstraints.push(new t.TransformConstraint(c, this))
                                }
                                for (this.pathConstraints = new Array, n = 0; n < e.pathConstraints.length; n++) {
                                    var u = e.pathConstraints[n];
                                    this.pathConstraints.push(new t.PathConstraint(u, this))
                                }
                                this.color = new t.Color(1, 1, 1, 1), this.updateCache()
                            }
                            return e.prototype.updateCache = function () {
                                this._updateCache.length = 0, this.updateCacheReset.length = 0;
                                for (var t = this.bones, e = 0, n = t.length; e < n; e++)(a = t[e]).sorted = a.data.skinRequired, a.active = !a.sorted;
                                if (null != this.skin) {
                                    var i = this.skin.bones;
                                    for (e = 0, n = this.skin.bones.length; e < n; e++) {
                                        var a = this.bones[i[e].index];
                                        do {
                                            a.sorted = !1, a.active = !0, a = a.parent
                                        } while (null != a)
                                    }
                                }
                                var r = this.ikConstraints,
                                    s = this.transformConstraints,
                                    o = this.pathConstraints,
                                    l = r.length,
                                    c = s.length,
                                    u = o.length,
                                    h = l + c + u;
                                t: for (e = 0; e < h; e++) {
                                    for (var d = 0; d < l; d++)
                                        if ((f = r[d]).data.order == e) {
                                            this.sortIkConstraint(f);
                                            continue t
                                        } for (d = 0; d < c; d++)
                                        if ((f = s[d]).data.order == e) {
                                            this.sortTransformConstraint(f);
                                            continue t
                                        } for (d = 0; d < u; d++) {
                                        var f;
                                        if ((f = o[d]).data.order == e) {
                                            this.sortPathConstraint(f);
                                            continue t
                                        }
                                    }
                                }
                                for (e = 0, n = t.length; e < n; e++) this.sortBone(t[e])
                            }, e.prototype.sortIkConstraint = function (e) {
                                if (e.active = e.target.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, !0)), e.active) {
                                    var n = e.target;
                                    this.sortBone(n);
                                    var i = e.bones,
                                        a = i[0];
                                    if (this.sortBone(a), i.length > 1) {
                                        var r, s = i[i.length - 1];
                                        g()(r = this._updateCache).call(r, s) > -1 || this.updateCacheReset.push(s)
                                    }
                                    this._updateCache.push(e), this.sortReset(a.children), i[i.length - 1].sorted = !0
                                }
                            }, e.prototype.sortPathConstraint = function (e) {
                                if (e.active = e.target.bone.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, !0)), e.active) {
                                    var n = e.target,
                                        i = n.data.index,
                                        a = n.bone;
                                    null != this.skin && this.sortPathConstraintAttachment(this.skin, i, a), null != this.data.defaultSkin && this.data.defaultSkin != this.skin && this.sortPathConstraintAttachment(this.data.defaultSkin, i, a);
                                    for (var r = 0, s = this.data.skins.length; r < s; r++) this.sortPathConstraintAttachment(this.data.skins[r], i, a);
                                    var o = n.getAttachment();
                                    o instanceof t.PathAttachment && this.sortPathConstraintAttachmentWith(o, a);
                                    var l = e.bones,
                                        c = l.length;
                                    for (r = 0; r < c; r++) this.sortBone(l[r]);
                                    for (this._updateCache.push(e), r = 0; r < c; r++) this.sortReset(l[r].children);
                                    for (r = 0; r < c; r++) l[r].sorted = !0
                                }
                            }, e.prototype.sortTransformConstraint = function (e) {
                                if (e.active = e.target.isActive() && (!e.data.skinRequired || null != this.skin && t.Utils.contains(this.skin.constraints, e.data, !0)), e.active) {
                                    this.sortBone(e.target);
                                    var n = e.bones,
                                        i = n.length;
                                    if (e.data.local)
                                        for (var a = 0; a < i; a++) {
                                            var r, s = n[a];
                                            this.sortBone(s.parent), g()(r = this._updateCache).call(r, s) > -1 || this.updateCacheReset.push(s)
                                        } else
                                            for (a = 0; a < i; a++) this.sortBone(n[a]);
                                    this._updateCache.push(e);
                                    for (var o = 0; o < i; o++) this.sortReset(n[o].children);
                                    for (o = 0; o < i; o++) n[o].sorted = !0
                                }
                            }, e.prototype.sortPathConstraintAttachment = function (t, e, n) {
                                var i = t.attachments[e];
                                if (i)
                                    for (var a in i) this.sortPathConstraintAttachmentWith(i[a], n)
                            }, e.prototype.sortPathConstraintAttachmentWith = function (e, n) {
                                if (e instanceof t.PathAttachment) {
                                    var i = e.bones;
                                    if (null == i) this.sortBone(n);
                                    else
                                        for (var a = this.bones, r = 0; r < i.length;)
                                            for (var s = i[r++], o = r + s; r < o; r++) {
                                                var l = i[r];
                                                this.sortBone(a[l])
                                            }
                                }
                            }, e.prototype.sortBone = function (t) {
                                if (!t.sorted) {
                                    var e = t.parent;
                                    null != e && this.sortBone(e), t.sorted = !0, this._updateCache.push(t)
                                }
                            }, e.prototype.sortReset = function (t) {
                                for (var e = 0, n = t.length; e < n; e++) {
                                    var i = t[e];
                                    i.active && (i.sorted && this.sortReset(i.children), i.sorted = !1)
                                }
                            }, e.prototype.updateWorldTransform = function () {
                                for (var t = this.updateCacheReset, e = 0, n = t.length; e < n; e++) {
                                    var i = t[e];
                                    i.ax = i.x, i.ay = i.y, i.arotation = i.rotation, i.ascaleX = i.scaleX, i.ascaleY = i.scaleY, i.ashearX = i.shearX, i.ashearY = i.shearY, i.appliedValid = !0
                                }
                                var a = this._updateCache;
                                for (e = 0, n = a.length; e < n; e++) a[e].update()
                            }, e.prototype.setToSetupPose = function () {
                                this.setBonesToSetupPose(), this.setSlotsToSetupPose()
                            }, e.prototype.setBonesToSetupPose = function () {
                                for (var t = this.bones, e = 0, n = t.length; e < n; e++) t[e].setToSetupPose();
                                var i = this.ikConstraints;
                                for (e = 0, n = i.length; e < n; e++)(o = i[e]).mix = o.data.mix, o.softness = o.data.softness, o.bendDirection = o.data.bendDirection, o.compress = o.data.compress, o.stretch = o.data.stretch;
                                var a = this.transformConstraints;
                                for (e = 0, n = a.length; e < n; e++) {
                                    var r = (o = a[e]).data;
                                    o.rotateMix = r.rotateMix, o.translateMix = r.translateMix, o.scaleMix = r.scaleMix, o.shearMix = r.shearMix
                                }
                                var s = this.pathConstraints;
                                for (e = 0, n = s.length; e < n; e++) {
                                    var o;
                                    r = (o = s[e]).data, o.position = r.position, o.spacing = r.spacing, o.rotateMix = r.rotateMix, o.translateMix = r.translateMix
                                }
                            }, e.prototype.setSlotsToSetupPose = function () {
                                var e = this.slots;
                                t.Utils.arrayCopy(e, 0, this.drawOrder, 0, e.length);
                                for (var n = 0, i = e.length; n < i; n++) e[n].setToSetupPose()
                            }, e.prototype.getRootBone = function () {
                                return 0 == this.bones.length ? null : this.bones[0]
                            }, e.prototype.findBone = function (t) {
                                if (null == t) throw new Error("boneName cannot be null.");
                                for (var e = this.bones, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.data.name == t) return a
                                }
                                return null
                            }, e.prototype.findBoneIndex = function (t) {
                                if (null == t) throw new Error("boneName cannot be null.");
                                for (var e = this.bones, n = 0, i = e.length; n < i; n++)
                                    if (e[n].data.name == t) return n;
                                return -1
                            }, e.prototype.findSlot = function (t) {
                                if (null == t) throw new Error("slotName cannot be null.");
                                for (var e = this.slots, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.data.name == t) return a
                                }
                                return null
                            }, e.prototype.findSlotIndex = function (t) {
                                if (null == t) throw new Error("slotName cannot be null.");
                                for (var e = this.slots, n = 0, i = e.length; n < i; n++)
                                    if (e[n].data.name == t) return n;
                                return -1
                            }, e.prototype.setSkinByName = function (t) {
                                var e = this.data.findSkin(t);
                                if (null == e) throw new Error("Skin not found: " + t);
                                this.setSkin(e)
                            }, e.prototype.setSkin = function (t) {
                                if (t != this.skin) {
                                    if (null != t)
                                        if (null != this.skin) t.attachAll(this, this.skin);
                                        else
                                            for (var e = this.slots, n = 0, i = e.length; n < i; n++) {
                                                var a = e[n],
                                                    r = a.data.attachmentName;
                                                if (null != r) {
                                                    var s = t.getAttachment(n, r);
                                                    null != s && a.setAttachment(s)
                                                }
                                            }
                                    this.skin = t, this.updateCache()
                                }
                            }, e.prototype.getAttachmentByName = function (t, e) {
                                return this.getAttachment(this.data.findSlotIndex(t), e)
                            }, e.prototype.getAttachment = function (t, e) {
                                if (null == e) throw new Error("attachmentName cannot be null.");
                                if (null != this.skin) {
                                    var n = this.skin.getAttachment(t, e);
                                    if (null != n) return n
                                }
                                return null != this.data.defaultSkin ? this.data.defaultSkin.getAttachment(t, e) : null
                            }, e.prototype.setAttachment = function (t, e) {
                                if (null == t) throw new Error("slotName cannot be null.");
                                for (var n = this.slots, i = 0, a = n.length; i < a; i++) {
                                    var r = n[i];
                                    if (r.data.name == t) {
                                        var s = null;
                                        if (null != e && null == (s = this.getAttachment(i, e))) throw new Error("Attachment not found: " + e + ", for slot: " + t);
                                        return void r.setAttachment(s)
                                    }
                                }
                                throw new Error("Slot not found: " + t)
                            }, e.prototype.findIkConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.ikConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.data.name == t) return a
                                }
                                return null
                            }, e.prototype.findTransformConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.transformConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.data.name == t) return a
                                }
                                return null
                            }, e.prototype.findPathConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.pathConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.data.name == t) return a
                                }
                                return null
                            }, e.prototype.getBounds = function (e, n, i) {
                                if (void 0 === i && (i = new Array(2)), null == e) throw new Error("offset cannot be null.");
                                if (null == n) throw new Error("size cannot be null.");
                                for (var a = this.drawOrder, r = Number.POSITIVE_INFINITY, s = Number.POSITIVE_INFINITY, o = Number.NEGATIVE_INFINITY, l = Number.NEGATIVE_INFINITY, c = 0, u = a.length; c < u; c++) {
                                    var h = a[c];
                                    if (h.bone.active) {
                                        var d = 0,
                                            f = null,
                                            p = h.getAttachment();
                                        if (p instanceof t.RegionAttachment) d = 8, f = t.Utils.setArraySize(i, d, 0), p.computeWorldVertices(h.bone, f, 0, 2);
                                        else if (p instanceof t.MeshAttachment) {
                                            var g = p;
                                            d = g.worldVerticesLength, f = t.Utils.setArraySize(i, d, 0), g.computeWorldVertices(h, 0, d, f, 0, 2)
                                        }
                                        if (null != f)
                                            for (var v = 0, m = f.length; v < m; v += 2) {
                                                var E = f[v],
                                                    y = f[v + 1];
                                                r = Math.min(r, E), s = Math.min(s, y), o = Math.max(o, E), l = Math.max(l, y)
                                            }
                                    }
                                }
                                e.set(r, s), n.set(o - r, l - s)
                            }, e.prototype.update = function (t) {
                                this.time += t
                            }, e
                        }();
                        t.Skeleton = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t) {
                                this.scale = 1, this.linkedMeshes = new Array, this.attachmentLoader = t
                            }
                            return e.prototype.readSkeletonData = function (i) {
                                var a = this.scale,
                                    r = new t.SkeletonData;
                                r.name = "";
                                var s = new n(i);
                                if (r.hash = s.readString(), r.version = s.readString(), "3.8.75" == r.version) throw new Error("Unsupported skeleton data, please export with a newer version of Spine.");
                                r.x = s.readFloat(), r.y = s.readFloat(), r.width = s.readFloat(), r.height = s.readFloat();
                                var o = s.readBoolean();
                                o && (r.fps = s.readFloat(), r.imagesPath = s.readString(), r.audioPath = s.readString());
                                var l = 0;
                                l = s.readInt(!0);
                                for (var c = 0; c < l; c++) s.strings.push(s.readString());
                                for (l = s.readInt(!0), c = 0; c < l; c++) {
                                    var u = s.readString(),
                                        h = 0 == c ? null : r.bones[s.readInt(!0)];
                                    (p = new t.BoneData(c, u, h)).rotation = s.readFloat(), p.x = s.readFloat() * a, p.y = s.readFloat() * a, p.scaleX = s.readFloat(), p.scaleY = s.readFloat(), p.shearX = s.readFloat(), p.shearY = s.readFloat(), p.length = s.readFloat() * a, p.transformMode = e.TransformModeValues[s.readInt(!0)], p.skinRequired = s.readBoolean(), o && t.Color.rgba8888ToColor(p.color, s.readInt32()), r.bones.push(p)
                                }
                                for (l = s.readInt(!0), c = 0; c < l; c++) {
                                    var d = s.readString(),
                                        f = r.bones[s.readInt(!0)],
                                        p = new t.SlotData(c, d, f);
                                    t.Color.rgba8888ToColor(p.color, s.readInt32());
                                    var g = s.readInt32(); - 1 != g && t.Color.rgb888ToColor(p.darkColor = new t.Color, g), p.attachmentName = s.readStringRef(), p.blendMode = e.BlendModeValues[s.readInt(!0)], r.slots.push(p)
                                }
                                l = s.readInt(!0), c = 0;
                                for (var v = void 0; c < l; c++) {
                                    (p = new t.IkConstraintData(s.readString())).order = s.readInt(!0), p.skinRequired = s.readBoolean(), v = s.readInt(!0);
                                    for (var m = 0; m < v; m++) p.bones.push(r.bones[s.readInt(!0)]);
                                    p.target = r.bones[s.readInt(!0)], p.mix = s.readFloat(), p.softness = s.readFloat() * a, p.bendDirection = s.readByte(), p.compress = s.readBoolean(), p.stretch = s.readBoolean(), p.uniform = s.readBoolean(), r.ikConstraints.push(p)
                                }
                                for (l = s.readInt(!0), c = 0, v = void 0; c < l; c++) {
                                    for ((p = new t.TransformConstraintData(s.readString())).order = s.readInt(!0), p.skinRequired = s.readBoolean(), v = s.readInt(!0), m = 0; m < v; m++) p.bones.push(r.bones[s.readInt(!0)]);
                                    p.target = r.bones[s.readInt(!0)], p.local = s.readBoolean(), p.relative = s.readBoolean(), p.offsetRotation = s.readFloat(), p.offsetX = s.readFloat() * a, p.offsetY = s.readFloat() * a, p.offsetScaleX = s.readFloat(), p.offsetScaleY = s.readFloat(), p.offsetShearY = s.readFloat(), p.rotateMix = s.readFloat(), p.translateMix = s.readFloat(), p.scaleMix = s.readFloat(), p.shearMix = s.readFloat(), r.transformConstraints.push(p)
                                }
                                for (l = s.readInt(!0), c = 0, v = void 0; c < l; c++) {
                                    for ((p = new t.PathConstraintData(s.readString())).order = s.readInt(!0), p.skinRequired = s.readBoolean(), v = s.readInt(!0), m = 0; m < v; m++) p.bones.push(r.bones[s.readInt(!0)]);
                                    p.target = r.slots[s.readInt(!0)], p.positionMode = e.PositionModeValues[s.readInt(!0)], p.spacingMode = e.SpacingModeValues[s.readInt(!0)], p.rotateMode = e.RotateModeValues[s.readInt(!0)], p.offsetRotation = s.readFloat(), p.position = s.readFloat(), p.positionMode == t.PositionMode.Fixed && (p.position *= a), p.spacing = s.readFloat(), p.spacingMode != t.SpacingMode.Length && p.spacingMode != t.SpacingMode.Fixed || (p.spacing *= a), p.rotateMix = s.readFloat(), p.translateMix = s.readFloat(), r.pathConstraints.push(p)
                                }
                                var E = this.readSkin(s, r, !0, o);
                                for (null != E && (r.defaultSkin = E, r.skins.push(E)), c = r.skins.length, t.Utils.setArraySize(r.skins, l = c + s.readInt(!0)); c < l; c++) r.skins[c] = this.readSkin(s, r, !1, o);
                                for (l = this.linkedMeshes.length, c = 0; c < l; c++) {
                                    var y = this.linkedMeshes[c],
                                        A = null == y.skin ? r.defaultSkin : r.findSkin(y.skin);
                                    if (null == A) throw new Error("Skin not found: " + y.skin);
                                    var T = A.getAttachment(y.slotIndex, y.parent);
                                    if (null == T) throw new Error("Parent mesh not found: " + y.parent);
                                    y.mesh.deformAttachment = y.inheritDeform ? T : y.mesh, y.mesh.setParentMesh(T), y.mesh.updateUVs()
                                }
                                for (this.linkedMeshes.length = 0, l = s.readInt(!0), c = 0; c < l; c++)(p = new t.EventData(s.readStringRef())).intValue = s.readInt(!1), p.floatValue = s.readFloat(), p.stringValue = s.readString(), p.audioPath = s.readString(), null != p.audioPath && (p.volume = s.readFloat(), p.balance = s.readFloat()), r.events.push(p);
                                for (l = s.readInt(!0), c = 0; c < l; c++) r.animations.push(this.readAnimation(s, s.readString(), r));
                                return r
                            }, e.prototype.readSkin = function (e, n, i, a) {
                                var r = null,
                                    s = 0;
                                if (i) {
                                    if (0 == (s = e.readInt(!0))) return null;
                                    r = new t.Skin("default")
                                } else {
                                    (r = new t.Skin(e.readStringRef())).bones.length = e.readInt(!0);
                                    for (var o = 0, l = r.bones.length; o < l; o++) r.bones[o] = n.bones[e.readInt(!0)];
                                    for (o = 0, l = e.readInt(!0); o < l; o++) r.constraints.push(n.ikConstraints[e.readInt(!0)]);
                                    for (o = 0, l = e.readInt(!0); o < l; o++) r.constraints.push(n.transformConstraints[e.readInt(!0)]);
                                    for (o = 0, l = e.readInt(!0); o < l; o++) r.constraints.push(n.pathConstraints[e.readInt(!0)]);
                                    s = e.readInt(!0)
                                }
                                for (o = 0; o < s; o++)
                                    for (var c = e.readInt(!0), u = 0, h = e.readInt(!0); u < h; u++) {
                                        var d = e.readStringRef(),
                                            f = this.readAttachment(e, n, r, c, d, a);
                                        null != f && r.setAttachment(c, d, f)
                                    }
                                return r
                            }, e.prototype.readAttachment = function (n, a, r, s, o, l) {
                                var c = this.scale,
                                    u = n.readStringRef();
                                null == u && (u = o);
                                var h = n.readByte();
                                switch (e.AttachmentTypeValues[h]) {
                                    case t.AttachmentType.Region:
                                        var d = n.readStringRef(),
                                            f = n.readFloat(),
                                            p = n.readFloat(),
                                            g = n.readFloat(),
                                            v = n.readFloat(),
                                            m = n.readFloat(),
                                            E = n.readFloat(),
                                            y = n.readFloat(),
                                            A = n.readInt32();
                                        null == d && (d = u);
                                        var T = this.attachmentLoader.newRegionAttachment(r, u, d);
                                        return null == T ? null : (T.path = d, T.x = p * c, T.y = g * c, T.scaleX = v, T.scaleY = m, T.rotation = f, T.width = E * c, T.height = y * c, t.Color.rgba8888ToColor(T.color, A), T.updateOffset(), T);
                                    case t.AttachmentType.BoundingBox:
                                        var S = n.readInt(!0),
                                            M = this.readVertices(n, S),
                                            w = (A = l ? n.readInt32() : 0, this.attachmentLoader.newBoundingBoxAttachment(r, u));
                                        return null == w ? null : (w.worldVerticesLength = S << 1, w.vertices = M.vertices, w.bones = M.bones, l && t.Color.rgba8888ToColor(w.color, A), w);
                                    case t.AttachmentType.Mesh:
                                        d = n.readStringRef(), A = n.readInt32(), S = n.readInt(!0);
                                        var x = this.readFloatArray(n, S << 1, 1),
                                            C = this.readShortArray(n),
                                            I = (M = this.readVertices(n, S), n.readInt(!0)),
                                            b = null;
                                        return E = 0, y = 0, l && (b = this.readShortArray(n), E = n.readFloat(), y = n.readFloat()), null == d && (d = u), null == (R = this.attachmentLoader.newMeshAttachment(r, u, d)) ? null : (R.path = d, t.Color.rgba8888ToColor(R.color, A), R.bones = M.bones, R.vertices = M.vertices, R.worldVerticesLength = S << 1, R.triangles = C, R.regionUVs = x, R.updateUVs(), R.hullLength = I << 1, l && (R.edges = b, R.width = E * c, R.height = y * c), R);
                                    case t.AttachmentType.LinkedMesh:
                                        d = n.readStringRef(), A = n.readInt32();
                                        var R, P = n.readStringRef(),
                                            _ = n.readStringRef(),
                                            k = n.readBoolean();
                                        return E = 0, y = 0, l && (E = n.readFloat(), y = n.readFloat()), null == d && (d = u), null == (R = this.attachmentLoader.newMeshAttachment(r, u, d)) ? null : (R.path = d, t.Color.rgba8888ToColor(R.color, A), l && (R.width = E * c, R.height = y * c), this.linkedMeshes.push(new i(R, P, s, _, k)), R);
                                    case t.AttachmentType.Path:
                                        for (var L = n.readBoolean(), D = n.readBoolean(), O = (S = n.readInt(!0), M = this.readVertices(n, S), t.Utils.newArray(S / 3, 0)), N = 0, U = O.length; N < U; N++) O[N] = n.readFloat() * c;
                                        return A = l ? n.readInt32() : 0, null == (d = this.attachmentLoader.newPathAttachment(r, u)) ? null : (d.closed = L, d.constantSpeed = D, d.worldVerticesLength = S << 1, d.vertices = M.vertices, d.bones = M.bones, d.lengths = O, l && t.Color.rgba8888ToColor(d.color, A), d);
                                    case t.AttachmentType.Point:
                                        f = n.readFloat(), p = n.readFloat(), g = n.readFloat(), A = l ? n.readInt32() : 0;
                                        var B = this.attachmentLoader.newPointAttachment(r, u);
                                        return null == B ? null : (B.x = p * c, B.y = g * c, B.rotation = f, l && t.Color.rgba8888ToColor(B.color, A), B);
                                    case t.AttachmentType.Clipping:
                                        var F = n.readInt(!0),
                                            G = (S = n.readInt(!0), M = this.readVertices(n, S), A = l ? n.readInt32() : 0, this.attachmentLoader.newClippingAttachment(r, u));
                                        return null == G ? null : (G.endSlot = a.slots[F], G.worldVerticesLength = S << 1, G.vertices = M.vertices, G.bones = M.bones, l && t.Color.rgba8888ToColor(G.color, A), G)
                                }
                                return null
                            }, e.prototype.readVertices = function (e, n) {
                                var i = n << 1,
                                    r = new a,
                                    s = this.scale;
                                if (!e.readBoolean()) return r.vertices = this.readFloatArray(e, i, s), r;
                                for (var o = new Array, l = new Array, c = 0; c < n; c++) {
                                    var u = e.readInt(!0);
                                    l.push(u);
                                    for (var h = 0; h < u; h++) l.push(e.readInt(!0)), o.push(e.readFloat() * s), o.push(e.readFloat() * s), o.push(e.readFloat())
                                }
                                return r.vertices = t.Utils.toFloatArray(o), r.bones = l, r
                            }, e.prototype.readFloatArray = function (t, e, n) {
                                var i = new Array(e);
                                if (1 == n)
                                    for (var a = 0; a < e; a++) i[a] = t.readFloat();
                                else
                                    for (a = 0; a < e; a++) i[a] = t.readFloat() * n;
                                return i
                            }, e.prototype.readShortArray = function (t) {
                                for (var e = t.readInt(!0), n = new Array(e), i = 0; i < e; i++) n[i] = t.readShort();
                                return n
                            }, e.prototype.readAnimation = function (n, i, a) {
                                for (var r = new Array, s = this.scale, o = 0, l = new t.Color, c = new t.Color, u = 0, h = n.readInt(!0); u < h; u++)
                                    for (var d = n.readInt(!0), f = 0, p = n.readInt(!0); f < p; f++) {
                                        var g = n.readByte(),
                                            v = n.readInt(!0);
                                        switch (g) {
                                            case e.SLOT_ATTACHMENT:
                                                (A = new t.AttachmentTimeline(v)).slotIndex = d;
                                                for (var m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readStringRef());
                                                r.push(A), o = Math.max(o, A.frames[v - 1]);
                                                break;
                                            case e.SLOT_COLOR:
                                                for ((A = new t.ColorTimeline(v)).slotIndex = d, m = 0; m < v; m++) {
                                                    var E = n.readFloat();
                                                    t.Color.rgba8888ToColor(l, n.readInt32()), A.setFrame(m, E, l.r, l.g, l.b, l.a), m < v - 1 && this.readCurve(n, m, A)
                                                }
                                                r.push(A), o = Math.max(o, A.frames[(v - 1) * t.ColorTimeline.ENTRIES]);
                                                break;
                                            case e.SLOT_TWO_COLOR:
                                                for ((A = new t.TwoColorTimeline(v)).slotIndex = d, m = 0; m < v; m++) E = n.readFloat(), t.Color.rgba8888ToColor(l, n.readInt32()), t.Color.rgb888ToColor(c, n.readInt32()), A.setFrame(m, E, l.r, l.g, l.b, l.a, c.r, c.g, c.b), m < v - 1 && this.readCurve(n, m, A);
                                                r.push(A), o = Math.max(o, A.frames[(v - 1) * t.TwoColorTimeline.ENTRIES])
                                        }
                                    }
                                for (u = 0, h = n.readInt(!0); u < h; u++) {
                                    var y = n.readInt(!0);
                                    for (f = 0, p = n.readInt(!0); f < p; f++) switch (g = n.readByte(), v = n.readInt(!0), g) {
                                        case e.BONE_ROTATE:
                                            for ((A = new t.RotateTimeline(v)).boneIndex = y, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat()), m < v - 1 && this.readCurve(n, m, A);
                                            r.push(A), o = Math.max(o, A.frames[(v - 1) * t.RotateTimeline.ENTRIES]);
                                            break;
                                        case e.BONE_TRANSLATE:
                                        case e.BONE_SCALE:
                                        case e.BONE_SHEAR:
                                            var A = void 0,
                                                T = 1;
                                            for (g == e.BONE_SCALE ? A = new t.ScaleTimeline(v) : g == e.BONE_SHEAR ? A = new t.ShearTimeline(v) : (A = new t.TranslateTimeline(v), T = s), A.boneIndex = y, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat() * T, n.readFloat() * T), m < v - 1 && this.readCurve(n, m, A);
                                            r.push(A), o = Math.max(o, A.frames[(v - 1) * t.TranslateTimeline.ENTRIES])
                                    }
                                }
                                for (u = 0, h = n.readInt(!0); u < h; u++) {
                                    var S = n.readInt(!0);
                                    for (v = n.readInt(!0), (A = new t.IkConstraintTimeline(v)).ikConstraintIndex = S, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat(), n.readFloat() * s, n.readByte(), n.readBoolean(), n.readBoolean()), m < v - 1 && this.readCurve(n, m, A);
                                    r.push(A), o = Math.max(o, A.frames[(v - 1) * t.IkConstraintTimeline.ENTRIES])
                                }
                                for (u = 0, h = n.readInt(!0); u < h; u++) {
                                    for (S = n.readInt(!0), v = n.readInt(!0), (A = new t.TransformConstraintTimeline(v)).transformConstraintIndex = S, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat(), n.readFloat(), n.readFloat(), n.readFloat()), m < v - 1 && this.readCurve(n, m, A);
                                    r.push(A), o = Math.max(o, A.frames[(v - 1) * t.TransformConstraintTimeline.ENTRIES])
                                }
                                for (u = 0, h = n.readInt(!0); u < h; u++) {
                                    S = n.readInt(!0);
                                    var M = a.pathConstraints[S];
                                    for (f = 0, p = n.readInt(!0); f < p; f++) switch (g = n.readByte(), v = n.readInt(!0), g) {
                                        case e.PATH_POSITION:
                                        case e.PATH_SPACING:
                                            for (A = void 0, T = 1, g == e.PATH_SPACING ? (A = new t.PathConstraintSpacingTimeline(v), M.spacingMode != t.SpacingMode.Length && M.spacingMode != t.SpacingMode.Fixed || (T = s)) : (A = new t.PathConstraintPositionTimeline(v), M.positionMode == t.PositionMode.Fixed && (T = s)), A.pathConstraintIndex = S, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat() * T), m < v - 1 && this.readCurve(n, m, A);
                                            r.push(A), o = Math.max(o, A.frames[(v - 1) * t.PathConstraintPositionTimeline.ENTRIES]);
                                            break;
                                        case e.PATH_MIX:
                                            for ((A = new t.PathConstraintMixTimeline(v)).pathConstraintIndex = S, m = 0; m < v; m++) A.setFrame(m, n.readFloat(), n.readFloat(), n.readFloat()), m < v - 1 && this.readCurve(n, m, A);
                                            r.push(A), o = Math.max(o, A.frames[(v - 1) * t.PathConstraintMixTimeline.ENTRIES])
                                    }
                                }
                                for (u = 0, h = n.readInt(!0); u < h; u++) {
                                    var w = a.skins[n.readInt(!0)];
                                    for (f = 0, p = n.readInt(!0); f < p; f++) {
                                        d = n.readInt(!0);
                                        for (var x = 0, C = n.readInt(!0); x < C; x++) {
                                            var I = w.getAttachment(d, n.readStringRef()),
                                                b = null != I.bones,
                                                R = I.vertices,
                                                P = b ? R.length / 3 * 2 : R.length;
                                            for (v = n.readInt(!0), (A = new t.DeformTimeline(v)).slotIndex = d, A.attachment = I, m = 0; m < v; m++) {
                                                E = n.readFloat();
                                                var _ = void 0,
                                                    k = n.readInt(!0);
                                                if (0 == k) _ = b ? t.Utils.newFloatArray(P) : R;
                                                else {
                                                    _ = t.Utils.newFloatArray(P);
                                                    var L = n.readInt(!0);
                                                    if (k += L, 1 == s)
                                                        for (var D = L; D < k; D++) _[D] = n.readFloat();
                                                    else
                                                        for (D = L; D < k; D++) _[D] = n.readFloat() * s;
                                                    if (!b) {
                                                        D = 0;
                                                        for (var O = _.length; D < O; D++) _[D] += R[D]
                                                    }
                                                }
                                                A.setFrame(m, E, _), m < v - 1 && this.readCurve(n, m, A)
                                            }
                                            r.push(A), o = Math.max(o, A.frames[v - 1])
                                        }
                                    }
                                }
                                var N = n.readInt(!0);
                                if (N > 0) {
                                    A = new t.DrawOrderTimeline(N);
                                    var U = a.slots.length;
                                    for (u = 0; u < N; u++) {
                                        E = n.readFloat();
                                        var B = n.readInt(!0),
                                            F = t.Utils.newArray(U, 0);
                                        for (f = U - 1; f >= 0; f--) F[f] = -1;
                                        var G = t.Utils.newArray(U - B, 0),
                                            H = 0,
                                            V = 0;
                                        for (f = 0; f < B; f++) {
                                            for (d = n.readInt(!0); H != d;) G[V++] = H++;
                                            F[H + n.readInt(!0)] = H++
                                        }
                                        for (; H < U;) G[V++] = H++;
                                        for (f = U - 1; f >= 0; f--) - 1 == F[f] && (F[f] = G[--V]);
                                        A.setFrame(u, E, F)
                                    }
                                    r.push(A), o = Math.max(o, A.frames[N - 1])
                                }
                                var Y = n.readInt(!0);
                                if (Y > 0) {
                                    for (A = new t.EventTimeline(Y), u = 0; u < Y; u++) {
                                        E = n.readFloat();
                                        var W = a.events[n.readInt(!0)],
                                            K = new t.Event(E, W);
                                        K.intValue = n.readInt(!1), K.floatValue = n.readFloat(), K.stringValue = n.readBoolean() ? n.readString() : W.stringValue, null != K.data.audioPath && (K.volume = n.readFloat(), K.balance = n.readFloat()), A.setFrame(u, K)
                                    }
                                    r.push(A), o = Math.max(o, A.frames[Y - 1])
                                }
                                return new t.Animation(i, r, o)
                            }, e.prototype.readCurve = function (t, n, i) {
                                switch (t.readByte()) {
                                    case e.CURVE_STEPPED:
                                        i.setStepped(n);
                                        break;
                                    case e.CURVE_BEZIER:
                                        this.setCurve(i, n, t.readFloat(), t.readFloat(), t.readFloat(), t.readFloat())
                                }
                            }, e.prototype.setCurve = function (t, e, n, i, a, r) {
                                t.setCurve(e, n, i, a, r)
                            }, e.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6], e.TransformModeValues = [t.TransformMode.Normal, t.TransformMode.OnlyTranslation, t.TransformMode.NoRotationOrReflection, t.TransformMode.NoScale, t.TransformMode.NoScaleOrReflection], e.PositionModeValues = [t.PositionMode.Fixed, t.PositionMode.Percent], e.SpacingModeValues = [t.SpacingMode.Length, t.SpacingMode.Fixed, t.SpacingMode.Percent], e.RotateModeValues = [t.RotateMode.Tangent, t.RotateMode.Chain, t.RotateMode.ChainScale], e.BlendModeValues = [t.BlendMode.Normal, t.BlendMode.Additive, t.BlendMode.Multiply, t.BlendMode.Screen], e.BONE_ROTATE = 0, e.BONE_TRANSLATE = 1, e.BONE_SCALE = 2, e.BONE_SHEAR = 3, e.SLOT_ATTACHMENT = 0, e.SLOT_COLOR = 1, e.SLOT_TWO_COLOR = 2, e.PATH_POSITION = 0, e.PATH_SPACING = 1, e.PATH_MIX = 2, e.CURVE_LINEAR = 0, e.CURVE_STEPPED = 1, e.CURVE_BEZIER = 2, e
                        }();
                        t.SkeletonBinary = e;
                        var n = function () {
                                function t(t, e, n, i) {
                                    void 0 === e && (e = new Array), void 0 === n && (n = 0), void 0 === i && (i = new DataView(t.buffer)), this.strings = e, this.index = n, this.buffer = i
                                }
                                return t.prototype.readByte = function () {
                                    return this.buffer.getInt8(this.index++)
                                }, t.prototype.readShort = function () {
                                    var t = this.buffer.getInt16(this.index);
                                    return this.index += 2, t
                                }, t.prototype.readInt32 = function () {
                                    var t = this.buffer.getInt32(this.index);
                                    return this.index += 4, t
                                }, t.prototype.readInt = function (t) {
                                    var e = this.readByte(),
                                        n = 127 & e;
                                    return 0 != (128 & e) && (n |= (127 & (e = this.readByte())) << 7, 0 != (128 & e) && (n |= (127 & (e = this.readByte())) << 14, 0 != (128 & e) && (n |= (127 & (e = this.readByte())) << 21, 0 != (128 & e) && (n |= (127 & (e = this.readByte())) << 28)))), t ? n : n >>> 1 ^ -(1 & n)
                                }, t.prototype.readStringRef = function () {
                                    var t = this.readInt(!0);
                                    return 0 == t ? null : this.strings[t - 1]
                                }, t.prototype.readString = function () {
                                    var t = this.readInt(!0);
                                    switch (t) {
                                        case 0:
                                            return null;
                                        case 1:
                                            return ""
                                    }
                                    t--;
                                    for (var e = "", n = 0; n < t;) {
                                        var i = this.readByte();
                                        switch (i >> 4) {
                                            case 12:
                                            case 13:
                                                e += String.fromCharCode((31 & i) << 6 | 63 & this.readByte()), n += 2;
                                                break;
                                            case 14:
                                                e += String.fromCharCode((15 & i) << 12 | (63 & this.readByte()) << 6 | 63 & this.readByte()), n += 3;
                                                break;
                                            default:
                                                e += String.fromCharCode(i), n++
                                        }
                                    }
                                    return e
                                }, t.prototype.readFloat = function () {
                                    var t = this.buffer.getFloat32(this.index);
                                    return this.index += 4, t
                                }, t.prototype.readBoolean = function () {
                                    return 0 != this.readByte()
                                }, t
                            }(),
                            i = function (t, e, n, i, a) {
                                this.mesh = t, this.skin = e, this.slotIndex = n, this.parent = i, this.inheritDeform = a
                            },
                            a = function (t, e) {
                                void 0 === t && (t = null), void 0 === e && (e = null), this.bones = t, this.vertices = e
                            }
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e() {
                                this.minX = 0, this.minY = 0, this.maxX = 0, this.maxY = 0, this.boundingBoxes = new Array, this.polygons = new Array, this.polygonPool = new t.Pool((function () {
                                    return t.Utils.newFloatArray(16)
                                }))
                            }
                            return e.prototype.update = function (e, n) {
                                if (null == e) throw new Error("skeleton cannot be null.");
                                var i = this.boundingBoxes,
                                    a = this.polygons,
                                    r = this.polygonPool,
                                    s = e.slots,
                                    o = s.length;
                                i.length = 0, r.freeAll(a), a.length = 0;
                                for (var l = 0; l < o; l++) {
                                    var c = s[l];
                                    if (c.bone.active) {
                                        var u = c.getAttachment();
                                        if (u instanceof t.BoundingBoxAttachment) {
                                            var h = u;
                                            i.push(h);
                                            var d = r.obtain();
                                            d.length != h.worldVerticesLength && (d = t.Utils.newFloatArray(h.worldVerticesLength)), a.push(d), h.computeWorldVertices(c, 0, h.worldVerticesLength, d, 0, 2)
                                        }
                                    }
                                }
                                n ? this.aabbCompute() : (this.minX = Number.POSITIVE_INFINITY, this.minY = Number.POSITIVE_INFINITY, this.maxX = Number.NEGATIVE_INFINITY, this.maxY = Number.NEGATIVE_INFINITY)
                            }, e.prototype.aabbCompute = function () {
                                for (var t = Number.POSITIVE_INFINITY, e = Number.POSITIVE_INFINITY, n = Number.NEGATIVE_INFINITY, i = Number.NEGATIVE_INFINITY, a = this.polygons, r = 0, s = a.length; r < s; r++)
                                    for (var o = a[r], l = o, c = 0, u = o.length; c < u; c += 2) {
                                        var h = l[c],
                                            d = l[c + 1];
                                        t = Math.min(t, h), e = Math.min(e, d), n = Math.max(n, h), i = Math.max(i, d)
                                    }
                                this.minX = t, this.minY = e, this.maxX = n, this.maxY = i
                            }, e.prototype.aabbContainsPoint = function (t, e) {
                                return t >= this.minX && t <= this.maxX && e >= this.minY && e <= this.maxY
                            }, e.prototype.aabbIntersectsSegment = function (t, e, n, i) {
                                var a = this.minX,
                                    r = this.minY,
                                    s = this.maxX,
                                    o = this.maxY;
                                if (t <= a && n <= a || e <= r && i <= r || t >= s && n >= s || e >= o && i >= o) return !1;
                                var l = (i - e) / (n - t),
                                    c = l * (a - t) + e;
                                if (c > r && c < o) return !0;
                                if ((c = l * (s - t) + e) > r && c < o) return !0;
                                var u = (r - e) / l + t;
                                return u > a && u < s || (u = (o - e) / l + t) > a && u < s
                            }, e.prototype.aabbIntersectsSkeleton = function (t) {
                                return this.minX < t.maxX && this.maxX > t.minX && this.minY < t.maxY && this.maxY > t.minY
                            }, e.prototype.containsPoint = function (t, e) {
                                for (var n = this.polygons, i = 0, a = n.length; i < a; i++)
                                    if (this.containsPointPolygon(n[i], t, e)) return this.boundingBoxes[i];
                                return null
                            }, e.prototype.containsPointPolygon = function (t, e, n) {
                                for (var i = t, a = t.length, r = a - 2, s = !1, o = 0; o < a; o += 2) {
                                    var l = i[o + 1],
                                        c = i[r + 1];
                                    if (l < n && c >= n || c < n && l >= n) {
                                        var u = i[o];
                                        u + (n - l) / (c - l) * (i[r] - u) < e && (s = !s)
                                    }
                                    r = o
                                }
                                return s
                            }, e.prototype.intersectsSegment = function (t, e, n, i) {
                                for (var a = this.polygons, r = 0, s = a.length; r < s; r++)
                                    if (this.intersectsSegmentPolygon(a[r], t, e, n, i)) return this.boundingBoxes[r];
                                return null
                            }, e.prototype.intersectsSegmentPolygon = function (t, e, n, i, a) {
                                for (var r = t, s = t.length, o = e - i, l = n - a, c = e * a - n * i, u = r[s - 2], h = r[s - 1], d = 0; d < s; d += 2) {
                                    var f = r[d],
                                        p = r[d + 1],
                                        g = u * p - h * f,
                                        v = u - f,
                                        m = h - p,
                                        E = o * m - l * v,
                                        y = (c * v - o * g) / E;
                                    if ((y >= u && y <= f || y >= f && y <= u) && (y >= e && y <= i || y >= i && y <= e)) {
                                        var A = (c * m - l * g) / E;
                                        if ((A >= h && A <= p || A >= p && A <= h) && (A >= n && A <= a || A >= a && A <= n)) return !0
                                    }
                                    u = f, h = p
                                }
                                return !1
                            }, e.prototype.getPolygon = function (t) {
                                var e;
                                if (null == t) throw new Error("boundingBox cannot be null.");
                                var n = g()(e = this.boundingBoxes).call(e, t);
                                return -1 == n ? null : this.polygons[n]
                            }, e.prototype.getWidth = function () {
                                return this.maxX - this.minX
                            }, e.prototype.getHeight = function () {
                                return this.maxY - this.minY
                            }, e
                        }();
                        t.SkeletonBounds = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e() {
                                this.triangulator = new t.Triangulator, this.clippingPolygon = new Array, this.clipOutput = new Array, this.clippedVertices = new Array, this.clippedTriangles = new Array, this.scratch = new Array
                            }
                            return e.prototype.clipStart = function (n, i) {
                                if (null != this.clipAttachment) return 0;
                                this.clipAttachment = i;
                                var a = i.worldVerticesLength,
                                    r = t.Utils.setArraySize(this.clippingPolygon, a);
                                i.computeWorldVertices(n, 0, a, r, 0, 2);
                                var s = this.clippingPolygon;
                                e.makeClockwise(s);
                                for (var o = this.clippingPolygons = this.triangulator.decompose(s, this.triangulator.triangulate(s)), l = 0, c = o.length; l < c; l++) {
                                    var u = o[l];
                                    e.makeClockwise(u), u.push(u[0]), u.push(u[1])
                                }
                                return o.length
                            }, e.prototype.clipEndWithSlot = function (t) {
                                null != this.clipAttachment && this.clipAttachment.endSlot == t.data && this.clipEnd()
                            }, e.prototype.clipEnd = function () {
                                null != this.clipAttachment && (this.clipAttachment = null, this.clippingPolygons = null, this.clippedVertices.length = 0, this.clippedTriangles.length = 0, this.clippingPolygon.length = 0)
                            }, e.prototype.isClipping = function () {
                                return null != this.clipAttachment
                            }, e.prototype.clipTriangles = function (e, n, i, a, r, s, o, l) {
                                var c = this.clipOutput,
                                    u = this.clippedVertices,
                                    h = this.clippedTriangles,
                                    d = this.clippingPolygons,
                                    f = this.clippingPolygons.length,
                                    p = l ? 12 : 8,
                                    g = 0;
                                u.length = 0, h.length = 0;
                                t: for (var v = 0; v < a; v += 3)
                                    for (var m = i[v] << 1, E = e[m], y = e[m + 1], A = r[m], T = r[m + 1], S = e[m = i[v + 1] << 1], M = e[m + 1], w = r[m], x = r[m + 1], C = e[m = i[v + 2] << 1], I = e[m + 1], b = r[m], R = r[m + 1], P = 0; P < f; P++) {
                                        var _ = u.length;
                                        if (!this.clip(E, y, S, M, C, I, d[P], c)) {
                                            (G = t.Utils.setArraySize(u, _ + 3 * p))[_] = E, G[_ + 1] = y, G[_ + 2] = s.r, G[_ + 3] = s.g, G[_ + 4] = s.b, G[_ + 5] = s.a, l ? (G[_ + 6] = A, G[_ + 7] = T, G[_ + 8] = o.r, G[_ + 9] = o.g, G[_ + 10] = o.b, G[_ + 11] = o.a, G[_ + 12] = S, G[_ + 13] = M, G[_ + 14] = s.r, G[_ + 15] = s.g, G[_ + 16] = s.b, G[_ + 17] = s.a, G[_ + 18] = w, G[_ + 19] = x, G[_ + 20] = o.r, G[_ + 21] = o.g, G[_ + 22] = o.b, G[_ + 23] = o.a, G[_ + 24] = C, G[_ + 25] = I, G[_ + 26] = s.r, G[_ + 27] = s.g, G[_ + 28] = s.b, G[_ + 29] = s.a, G[_ + 30] = b, G[_ + 31] = R, G[_ + 32] = o.r, G[_ + 33] = o.g, G[_ + 34] = o.b, G[_ + 35] = o.a) : (G[_ + 6] = A, G[_ + 7] = T, G[_ + 8] = S, G[_ + 9] = M, G[_ + 10] = s.r, G[_ + 11] = s.g, G[_ + 12] = s.b, G[_ + 13] = s.a, G[_ + 14] = w, G[_ + 15] = x, G[_ + 16] = C, G[_ + 17] = I, G[_ + 18] = s.r, G[_ + 19] = s.g, G[_ + 20] = s.b, G[_ + 21] = s.a, G[_ + 22] = b, G[_ + 23] = R), _ = h.length, (q = t.Utils.setArraySize(h, _ + 3))[_] = g, q[_ + 1] = g + 1, q[_ + 2] = g + 2, g += 3;
                                            continue t
                                        }
                                        var k = c.length;
                                        if (0 != k) {
                                            for (var L = M - I, D = C - S, O = E - C, N = I - y, U = 1 / (L * O + D * (y - I)), B = k >> 1, F = this.clipOutput, G = t.Utils.setArraySize(u, _ + B * p), H = 0; H < k; H += 2) {
                                                var V = F[H],
                                                    Y = F[H + 1];
                                                G[_] = V, G[_ + 1] = Y, G[_ + 2] = s.r, G[_ + 3] = s.g, G[_ + 4] = s.b, G[_ + 5] = s.a;
                                                var W = V - C,
                                                    K = Y - I,
                                                    z = (L * W + D * K) * U,
                                                    X = (N * W + O * K) * U,
                                                    j = 1 - z - X;
                                                G[_ + 6] = A * z + w * X + b * j, G[_ + 7] = T * z + x * X + R * j, l && (G[_ + 8] = o.r, G[_ + 9] = o.g, G[_ + 10] = o.b, G[_ + 11] = o.a), _ += p
                                            }
                                            _ = h.length;
                                            var q = t.Utils.setArraySize(h, _ + 3 * (B - 2));
                                            for (B--, H = 1; H < B; H++) q[_] = g, q[_ + 1] = g + H, q[_ + 2] = g + H + 1, _ += 3;
                                            g += B + 1
                                        }
                                    }
                            }, e.prototype.clip = function (t, e, n, i, a, r, s, o) {
                                var l = o,
                                    c = !1,
                                    u = null;
                                s.length % 4 >= 2 ? (u = o, o = this.scratch) : u = this.scratch, u.length = 0, u.push(t), u.push(e), u.push(n), u.push(i), u.push(a), u.push(r), u.push(t), u.push(e), o.length = 0;
                                for (var h = s, d = s.length - 4, f = 0;; f += 2) {
                                    for (var p = h[f], g = h[f + 1], v = h[f + 2], m = h[f + 3], E = p - v, y = g - m, A = u, T = u.length - 2, S = o.length, M = 0; M < T; M += 2) {
                                        var w = A[M],
                                            x = A[M + 1],
                                            C = A[M + 2],
                                            I = A[M + 3],
                                            b = E * (I - m) - y * (C - v) > 0;
                                        if (E * (x - m) - y * (w - v) > 0) {
                                            if (b) {
                                                o.push(C), o.push(I);
                                                continue
                                            }
                                            var R = (_ = I - x) * (v - p) - (k = C - w) * (m - g);
                                            if (Math.abs(R) > 1e-6) {
                                                var P = (k * (g - x) - _ * (p - w)) / R;
                                                o.push(p + (v - p) * P), o.push(g + (m - g) * P)
                                            } else o.push(p), o.push(g)
                                        } else if (b) {
                                            var _, k;
                                            R = (_ = I - x) * (v - p) - (k = C - w) * (m - g), Math.abs(R) > 1e-6 ? (P = (k * (g - x) - _ * (p - w)) / R, o.push(p + (v - p) * P), o.push(g + (m - g) * P)) : (o.push(p), o.push(g)), o.push(C), o.push(I)
                                        }
                                        c = !0
                                    }
                                    if (S == o.length) return l.length = 0, !0;
                                    if (o.push(o[0]), o.push(o[1]), f == d) break;
                                    var L = o;
                                    (o = u).length = 0, u = L
                                }
                                if (l != o) {
                                    l.length = 0, f = 0;
                                    for (var D = o.length - 2; f < D; f++) l[f] = o[f]
                                } else l.length = l.length - 2;
                                return c
                            }, e.makeClockwise = function (t) {
                                for (var e = t, n = t.length, i = e[n - 2] * e[1] - e[0] * e[n - 1], a = 0, r = 0, s = 0, o = 0, l = n - 3; o < l; o += 2) a = e[o], r = e[o + 1], s = e[o + 2], i += a * e[o + 3] - s * r;
                                if (!(i < 0)) {
                                    o = 0;
                                    var c = n - 2;
                                    for (l = n >> 1; o < l; o += 2) {
                                        var u = e[o],
                                            h = e[o + 1],
                                            d = c - o;
                                        e[o] = e[d], e[o + 1] = e[d + 1], e[d] = u, e[d + 1] = h
                                    }
                                }
                            }, e
                        }();
                        t.SkeletonClipping = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function t() {
                                this.bones = new Array, this.slots = new Array, this.skins = new Array, this.events = new Array, this.animations = new Array, this.ikConstraints = new Array, this.transformConstraints = new Array, this.pathConstraints = new Array, this.fps = 0
                            }
                            return t.prototype.findBone = function (t) {
                                if (null == t) throw new Error("boneName cannot be null.");
                                for (var e = this.bones, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findBoneIndex = function (t) {
                                if (null == t) throw new Error("boneName cannot be null.");
                                for (var e = this.bones, n = 0, i = e.length; n < i; n++)
                                    if (e[n].name == t) return n;
                                return -1
                            }, t.prototype.findSlot = function (t) {
                                if (null == t) throw new Error("slotName cannot be null.");
                                for (var e = this.slots, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findSlotIndex = function (t) {
                                if (null == t) throw new Error("slotName cannot be null.");
                                for (var e = this.slots, n = 0, i = e.length; n < i; n++)
                                    if (e[n].name == t) return n;
                                return -1
                            }, t.prototype.findSkin = function (t) {
                                if (null == t) throw new Error("skinName cannot be null.");
                                for (var e = this.skins, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findEvent = function (t) {
                                if (null == t) throw new Error("eventDataName cannot be null.");
                                for (var e = this.events, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findAnimation = function (t) {
                                if (null == t) throw new Error("animationName cannot be null.");
                                for (var e = this.animations, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findIkConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.ikConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findTransformConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.transformConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findPathConstraint = function (t) {
                                if (null == t) throw new Error("constraintName cannot be null.");
                                for (var e = this.pathConstraints, n = 0, i = e.length; n < i; n++) {
                                    var a = e[n];
                                    if (a.name == t) return a
                                }
                                return null
                            }, t.prototype.findPathConstraintIndex = function (t) {
                                if (null == t) throw new Error("pathConstraintName cannot be null.");
                                for (var e = this.pathConstraints, n = 0, i = e.length; n < i; n++)
                                    if (e[n].name == t) return n;
                                return -1
                            }, t
                        }();
                        t.SkeletonData = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t) {
                                this.scale = 1, this.linkedMeshes = new Array, this.attachmentLoader = t
                            }
                            return e.prototype.readSkeletonData = function (n) {
                                var i = this.scale,
                                    a = new t.SkeletonData,
                                    r = "string" == typeof n ? JSON.parse(n) : n,
                                    s = r.skeleton;
                                if (null != s) {
                                    if (a.hash = s.hash, a.version = s.spine, "3.8.75" == a.version) throw new Error("Unsupported skeleton data, please export with a newer version of Spine.");
                                    a.x = s.x, a.y = s.y, a.width = s.width, a.height = s.height, a.fps = s.fps, a.imagesPath = s.images
                                }
                                if (r.bones)
                                    for (var o = 0; o < r.bones.length; o++) {
                                        var l = r.bones[o],
                                            c = null,
                                            u = this.getValue(l, "parent", null);
                                        if (null != u && null == (c = a.findBone(u))) throw new Error("Parent bone not found: " + u);
                                        (p = new t.BoneData(a.bones.length, l.name, c)).length = this.getValue(l, "length", 0) * i, p.x = this.getValue(l, "x", 0) * i, p.y = this.getValue(l, "y", 0) * i, p.rotation = this.getValue(l, "rotation", 0), p.scaleX = this.getValue(l, "scaleX", 1), p.scaleY = this.getValue(l, "scaleY", 1), p.shearX = this.getValue(l, "shearX", 0), p.shearY = this.getValue(l, "shearY", 0), p.transformMode = e.transformModeFromString(this.getValue(l, "transform", "normal")), p.skinRequired = this.getValue(l, "skin", !1), a.bones.push(p)
                                    }
                                if (r.slots)
                                    for (o = 0; o < r.slots.length; o++) {
                                        var h = (C = r.slots[o]).name,
                                            d = C.bone,
                                            f = a.findBone(d);
                                        if (null == f) throw new Error("Slot bone not found: " + d);
                                        var p = new t.SlotData(a.slots.length, h, f),
                                            g = this.getValue(C, "color", null);
                                        null != g && p.color.setFromString(g);
                                        var v = this.getValue(C, "dark", null);
                                        null != v && (p.darkColor = new t.Color(1, 1, 1, 1), p.darkColor.setFromString(v)), p.attachmentName = this.getValue(C, "attachment", null), p.blendMode = e.blendModeFromString(this.getValue(C, "blend", "normal")), a.slots.push(p)
                                    }
                                if (r.ik)
                                    for (o = 0; o < r.ik.length; o++) {
                                        var m = r.ik[o];
                                        (p = new t.IkConstraintData(m.name)).order = this.getValue(m, "order", 0), p.skinRequired = this.getValue(m, "skin", !1);
                                        for (var E = 0; E < m.bones.length; E++) {
                                            if (d = m.bones[E], null == (M = a.findBone(d))) throw new Error("IK bone not found: " + d);
                                            p.bones.push(M)
                                        }
                                        var y = m.target;
                                        if (p.target = a.findBone(y), null == p.target) throw new Error("IK target bone not found: " + y);
                                        p.mix = this.getValue(m, "mix", 1), p.softness = this.getValue(m, "softness", 0) * i, p.bendDirection = this.getValue(m, "bendPositive", !0) ? 1 : -1, p.compress = this.getValue(m, "compress", !1), p.stretch = this.getValue(m, "stretch", !1), p.uniform = this.getValue(m, "uniform", !1), a.ikConstraints.push(p)
                                    }
                                if (r.transform)
                                    for (o = 0; o < r.transform.length; o++) {
                                        for (m = r.transform[o], (p = new t.TransformConstraintData(m.name)).order = this.getValue(m, "order", 0), p.skinRequired = this.getValue(m, "skin", !1), E = 0; E < m.bones.length; E++) {
                                            if (d = m.bones[E], null == (M = a.findBone(d))) throw new Error("Transform constraint bone not found: " + d);
                                            p.bones.push(M)
                                        }
                                        if (y = m.target, p.target = a.findBone(y), null == p.target) throw new Error("Transform constraint target bone not found: " + y);
                                        p.local = this.getValue(m, "local", !1), p.relative = this.getValue(m, "relative", !1), p.offsetRotation = this.getValue(m, "rotation", 0), p.offsetX = this.getValue(m, "x", 0) * i, p.offsetY = this.getValue(m, "y", 0) * i, p.offsetScaleX = this.getValue(m, "scaleX", 0), p.offsetScaleY = this.getValue(m, "scaleY", 0), p.offsetShearY = this.getValue(m, "shearY", 0), p.rotateMix = this.getValue(m, "rotateMix", 1), p.translateMix = this.getValue(m, "translateMix", 1), p.scaleMix = this.getValue(m, "scaleMix", 1), p.shearMix = this.getValue(m, "shearMix", 1), a.transformConstraints.push(p)
                                    }
                                if (r.path)
                                    for (o = 0; o < r.path.length; o++) {
                                        for (m = r.path[o], (p = new t.PathConstraintData(m.name)).order = this.getValue(m, "order", 0), p.skinRequired = this.getValue(m, "skin", !1), E = 0; E < m.bones.length; E++) {
                                            if (d = m.bones[E], null == (M = a.findBone(d))) throw new Error("Transform constraint bone not found: " + d);
                                            p.bones.push(M)
                                        }
                                        if (y = m.target, p.target = a.findSlot(y), null == p.target) throw new Error("Path target slot not found: " + y);
                                        p.positionMode = e.positionModeFromString(this.getValue(m, "positionMode", "percent")), p.spacingMode = e.spacingModeFromString(this.getValue(m, "spacingMode", "length")), p.rotateMode = e.rotateModeFromString(this.getValue(m, "rotateMode", "tangent")), p.offsetRotation = this.getValue(m, "rotation", 0), p.position = this.getValue(m, "position", 0), p.positionMode == t.PositionMode.Fixed && (p.position *= i), p.spacing = this.getValue(m, "spacing", 0), p.spacingMode != t.SpacingMode.Length && p.spacingMode != t.SpacingMode.Fixed || (p.spacing *= i), p.rotateMix = this.getValue(m, "rotateMix", 1), p.translateMix = this.getValue(m, "translateMix", 1), a.pathConstraints.push(p)
                                    }
                                if (r.skins)
                                    for (o = 0; o < r.skins.length; o++) {
                                        var A = r.skins[o],
                                            T = new t.Skin(A.name);
                                        if (A.bones)
                                            for (var S = 0; S < A.bones.length; S++) {
                                                var M;
                                                if (null == (M = a.findBone(A.bones[S]))) throw new Error("Skin bone not found: " + A.bones[o]);
                                                T.bones.push(M)
                                            }
                                        if (A.ik)
                                            for (S = 0; S < A.ik.length; S++) {
                                                if (null == (w = a.findIkConstraint(A.ik[S]))) throw new Error("Skin IK constraint not found: " + A.ik[o]);
                                                T.constraints.push(w)
                                            }
                                        if (A.transform)
                                            for (S = 0; S < A.transform.length; S++) {
                                                if (null == (w = a.findTransformConstraint(A.transform[S]))) throw new Error("Skin transform constraint not found: " + A.transform[o]);
                                                T.constraints.push(w)
                                            }
                                        if (A.path)
                                            for (S = 0; S < A.path.length; S++) {
                                                var w;
                                                if (null == (w = a.findPathConstraint(A.path[S]))) throw new Error("Skin path constraint not found: " + A.path[o]);
                                                T.constraints.push(w)
                                            }
                                        for (var h in A.attachments) {
                                            var x = a.findSlot(h);
                                            if (null == x) throw new Error("Slot not found: " + h);
                                            var C = A.attachments[h];
                                            for (var I in C) {
                                                var b = this.readAttachment(C[I], T, x.index, I, a);
                                                null != b && T.setAttachment(x.index, I, b)
                                            }
                                        }
                                        a.skins.push(T), "default" == T.name && (a.defaultSkin = T)
                                    }
                                o = 0;
                                for (var R = this.linkedMeshes.length; o < R; o++) {
                                    var P = this.linkedMeshes[o];
                                    if (null == (T = null == P.skin ? a.defaultSkin : a.findSkin(P.skin))) throw new Error("Skin not found: " + P.skin);
                                    var _ = T.getAttachment(P.slotIndex, P.parent);
                                    if (null == _) throw new Error("Parent mesh not found: " + P.parent);
                                    P.mesh.deformAttachment = P.inheritDeform ? _ : P.mesh, P.mesh.setParentMesh(_), P.mesh.updateUVs()
                                }
                                if (this.linkedMeshes.length = 0, r.events)
                                    for (var k in r.events) {
                                        var L = r.events[k];
                                        (p = new t.EventData(k)).intValue = this.getValue(L, "int", 0), p.floatValue = this.getValue(L, "float", 0), p.stringValue = this.getValue(L, "string", ""), p.audioPath = this.getValue(L, "audio", null), null != p.audioPath && (p.volume = this.getValue(L, "volume", 1), p.balance = this.getValue(L, "balance", 0)), a.events.push(p)
                                    }
                                if (r.animations)
                                    for (var D in r.animations) {
                                        var O = r.animations[D];
                                        this.readAnimation(O, D, a)
                                    }
                                return a
                            }, e.prototype.readAttachment = function (e, i, a, r, s) {
                                var o = this.scale;
                                switch (r = this.getValue(e, "name", r), this.getValue(e, "type", "region")) {
                                    case "region":
                                        var l = this.getValue(e, "path", r),
                                            c = this.attachmentLoader.newRegionAttachment(i, r, l);
                                        return null == c ? null : (c.path = l, c.x = this.getValue(e, "x", 0) * o, c.y = this.getValue(e, "y", 0) * o, c.scaleX = this.getValue(e, "scaleX", 1), c.scaleY = this.getValue(e, "scaleY", 1), c.rotation = this.getValue(e, "rotation", 0), c.width = e.width * o, c.height = e.height * o, null != (y = this.getValue(e, "color", null)) && c.color.setFromString(y), c.updateOffset(), c);
                                    case "boundingbox":
                                        var u = this.attachmentLoader.newBoundingBoxAttachment(i, r);
                                        return null == u ? null : (this.readVertices(e, u, e.vertexCount << 1), null != (y = this.getValue(e, "color", null)) && u.color.setFromString(y), u);
                                    case "mesh":
                                    case "linkedmesh":
                                        l = this.getValue(e, "path", r);
                                        var h = this.attachmentLoader.newMeshAttachment(i, r, l);
                                        if (null == h) return null;
                                        h.path = l, null != (y = this.getValue(e, "color", null)) && h.color.setFromString(y), h.width = this.getValue(e, "width", 0) * o, h.height = this.getValue(e, "height", 0) * o;
                                        var d = this.getValue(e, "parent", null);
                                        if (null != d) return this.linkedMeshes.push(new n(h, this.getValue(e, "skin", null), a, d, this.getValue(e, "deform", !0))), h;
                                        var f = e.uvs;
                                        return this.readVertices(e, h, f.length), h.triangles = e.triangles, h.regionUVs = f, h.updateUVs(), h.edges = this.getValue(e, "edges", null), h.hullLength = 2 * this.getValue(e, "hull", 0), h;
                                    case "path":
                                        if (null == (l = this.attachmentLoader.newPathAttachment(i, r))) return null;
                                        l.closed = this.getValue(e, "closed", !1), l.constantSpeed = this.getValue(e, "constantSpeed", !0);
                                        var p = e.vertexCount;
                                        this.readVertices(e, l, p << 1);
                                        for (var g = t.Utils.newArray(p / 3, 0), v = 0; v < e.lengths.length; v++) g[v] = e.lengths[v] * o;
                                        return l.lengths = g, null != (y = this.getValue(e, "color", null)) && l.color.setFromString(y), l;
                                    case "point":
                                        var m = this.attachmentLoader.newPointAttachment(i, r);
                                        return null == m ? null : (m.x = this.getValue(e, "x", 0) * o, m.y = this.getValue(e, "y", 0) * o, m.rotation = this.getValue(e, "rotation", 0), null != (y = this.getValue(e, "color", null)) && m.color.setFromString(y), m);
                                    case "clipping":
                                        var E = this.attachmentLoader.newClippingAttachment(i, r);
                                        if (null == E) return null;
                                        var y, A = this.getValue(e, "end", null);
                                        if (null != A) {
                                            var T = s.findSlot(A);
                                            if (null == T) throw new Error("Clipping end slot not found: " + A);
                                            E.endSlot = T
                                        }
                                        return p = e.vertexCount, this.readVertices(e, E, p << 1), null != (y = this.getValue(e, "color", null)) && E.color.setFromString(y), E
                                }
                                return null
                            }, e.prototype.readVertices = function (e, n, i) {
                                var a = this.scale;
                                n.worldVerticesLength = i;
                                var r = e.vertices;
                                if (i != r.length) {
                                    var s = new Array,
                                        o = new Array;
                                    for (h = 0, d = r.length; h < d;) {
                                        var l = r[h++];
                                        o.push(l);
                                        for (var c = h + 4 * l; h < c; h += 4) o.push(r[h]), s.push(r[h + 1] * a), s.push(r[h + 2] * a), s.push(r[h + 3])
                                    }
                                    n.bones = o, n.vertices = t.Utils.toFloatArray(s)
                                } else {
                                    var u = t.Utils.toFloatArray(r);
                                    if (1 != a)
                                        for (var h = 0, d = r.length; h < d; h++) u[h] *= a;
                                    n.vertices = u
                                }
                            }, e.prototype.readAnimation = function (e, n, i) {
                                var a = this.scale,
                                    r = new Array,
                                    s = 0;
                                if (e.slots)
                                    for (var o in e.slots) {
                                        var l = e.slots[o];
                                        if (-1 == ($ = i.findSlotIndex(o))) throw new Error("Slot not found: " + o);
                                        for (var c in l) {
                                            var u = l[c];
                                            if ("attachment" == c) {
                                                (T = new t.AttachmentTimeline(u.length)).slotIndex = $;
                                                for (var h = 0, d = 0; d < u.length; d++) {
                                                    var f = u[d];
                                                    T.setFrame(h++, this.getValue(f, "time", 0), f.name)
                                                }
                                                r.push(T), s = Math.max(s, T.frames[T.getFrameCount() - 1])
                                            } else if ("color" == c) {
                                                for ((T = new t.ColorTimeline(u.length)).slotIndex = $, h = 0, d = 0; d < u.length; d++) {
                                                    f = u[d];
                                                    var p = new t.Color;
                                                    p.setFromString(f.color), T.setFrame(h, this.getValue(f, "time", 0), p.r, p.g, p.b, p.a), this.readCurve(f, T, h), h++
                                                }
                                                r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.ColorTimeline.ENTRIES])
                                            } else {
                                                if ("twoColor" != c) throw new Error("Invalid timeline type for a slot: " + c + " (" + o + ")");
                                                for ((T = new t.TwoColorTimeline(u.length)).slotIndex = $, h = 0, d = 0; d < u.length; d++) {
                                                    f = u[d];
                                                    var v = new t.Color,
                                                        m = new t.Color;
                                                    v.setFromString(f.light), m.setFromString(f.dark), T.setFrame(h, this.getValue(f, "time", 0), v.r, v.g, v.b, v.a, m.r, m.g, m.b), this.readCurve(f, T, h), h++
                                                }
                                                r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.TwoColorTimeline.ENTRIES])
                                            }
                                        }
                                    }
                                if (e.bones)
                                    for (var E in e.bones) {
                                        var y = e.bones[E],
                                            A = i.findBoneIndex(E);
                                        if (-1 == A) throw new Error("Bone not found: " + E);
                                        for (var c in y)
                                            if (u = y[c], "rotate" === c) {
                                                for ((T = new t.RotateTimeline(u.length)).boneIndex = A, h = 0, d = 0; d < u.length; d++) f = u[d], T.setFrame(h, this.getValue(f, "time", 0), this.getValue(f, "angle", 0)), this.readCurve(f, T, h), h++;
                                                r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.RotateTimeline.ENTRIES])
                                            } else {
                                                if ("translate" !== c && "scale" !== c && "shear" !== c) throw new Error("Invalid timeline type for a bone: " + c + " (" + E + ")");
                                                var T = null,
                                                    S = 1,
                                                    M = 0;
                                                for ("scale" === c ? (T = new t.ScaleTimeline(u.length), M = 1) : "shear" === c ? T = new t.ShearTimeline(u.length) : (T = new t.TranslateTimeline(u.length), S = a), T.boneIndex = A, h = 0, d = 0; d < u.length; d++) {
                                                    f = u[d];
                                                    var w = this.getValue(f, "x", M),
                                                        x = this.getValue(f, "y", M);
                                                    T.setFrame(h, this.getValue(f, "time", 0), w * S, x * S), this.readCurve(f, T, h), h++
                                                }
                                                r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.TranslateTimeline.ENTRIES])
                                            }
                                    }
                                if (e.ik)
                                    for (var C in e.ik) {
                                        var I = e.ik[C],
                                            b = i.findIkConstraint(C);
                                        for ((T = new t.IkConstraintTimeline(I.length)).ikConstraintIndex = g()(R = i.ikConstraints).call(R, b), h = 0, d = 0; d < I.length; d++) {
                                            var R;
                                            f = I[d], T.setFrame(h, this.getValue(f, "time", 0), this.getValue(f, "mix", 1), this.getValue(f, "softness", 0) * a, this.getValue(f, "bendPositive", !0) ? 1 : -1, this.getValue(f, "compress", !1), this.getValue(f, "stretch", !1)), this.readCurve(f, T, h), h++
                                        }
                                        r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.IkConstraintTimeline.ENTRIES])
                                    }
                                if (e.transform)
                                    for (var C in e.transform) {
                                        for (I = e.transform[C], b = i.findTransformConstraint(C), (T = new t.TransformConstraintTimeline(I.length)).transformConstraintIndex = g()(P = i.transformConstraints).call(P, b), h = 0, d = 0; d < I.length; d++) {
                                            var P;
                                            f = I[d], T.setFrame(h, this.getValue(f, "time", 0), this.getValue(f, "rotateMix", 1), this.getValue(f, "translateMix", 1), this.getValue(f, "scaleMix", 1), this.getValue(f, "shearMix", 1)), this.readCurve(f, T, h), h++
                                        }
                                        r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.TransformConstraintTimeline.ENTRIES])
                                    }
                                if (e.path)
                                    for (var C in e.path) {
                                        I = e.path[C];
                                        var _ = i.findPathConstraintIndex(C);
                                        if (-1 == _) throw new Error("Path constraint not found: " + C);
                                        var k = i.pathConstraints[_];
                                        for (var c in I)
                                            if (u = I[c], "position" === c || "spacing" === c) {
                                                for (T = null, S = 1, "spacing" === c ? (T = new t.PathConstraintSpacingTimeline(u.length), k.spacingMode != t.SpacingMode.Length && k.spacingMode != t.SpacingMode.Fixed || (S = a)) : (T = new t.PathConstraintPositionTimeline(u.length), k.positionMode == t.PositionMode.Fixed && (S = a)), T.pathConstraintIndex = _, h = 0, d = 0; d < u.length; d++) f = u[d], T.setFrame(h, this.getValue(f, "time", 0), this.getValue(f, c, 0) * S), this.readCurve(f, T, h), h++;
                                                r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.PathConstraintPositionTimeline.ENTRIES])
                                            } else if ("mix" === c) {
                                            for ((T = new t.PathConstraintMixTimeline(u.length)).pathConstraintIndex = _, h = 0, d = 0; d < u.length; d++) f = u[d], T.setFrame(h, this.getValue(f, "time", 0), this.getValue(f, "rotateMix", 1), this.getValue(f, "translateMix", 1)), this.readCurve(f, T, h), h++;
                                            r.push(T), s = Math.max(s, T.frames[(T.getFrameCount() - 1) * t.PathConstraintMixTimeline.ENTRIES])
                                        }
                                    }
                                if (e.deform)
                                    for (var L in e.deform) {
                                        var D = e.deform[L],
                                            O = i.findSkin(L);
                                        if (null == O) throw new Error("Skin not found: " + L);
                                        for (var o in D) {
                                            if (l = D[o], -1 == ($ = i.findSlotIndex(o))) throw new Error("Slot not found: " + l.name);
                                            for (var c in l) {
                                                u = l[c];
                                                var N = O.getAttachment($, c);
                                                if (null == N) throw new Error("Deform attachment not found: " + u.name);
                                                var U = null != N.bones,
                                                    B = N.vertices,
                                                    F = U ? B.length / 3 * 2 : B.length;
                                                (T = new t.DeformTimeline(u.length)).slotIndex = $, T.attachment = N, h = 0;
                                                for (var G = 0; G < u.length; G++) {
                                                    f = u[G];
                                                    var H = void 0,
                                                        V = this.getValue(f, "vertices", null);
                                                    if (null == V) H = U ? t.Utils.newFloatArray(F) : B;
                                                    else {
                                                        H = t.Utils.newFloatArray(F);
                                                        var Y = this.getValue(f, "offset", 0);
                                                        if (t.Utils.arrayCopy(V, 0, H, Y, V.length), 1 != a)
                                                            for (var W = (d = Y) + V.length; d < W; d++) H[d] *= a;
                                                        if (!U)
                                                            for (d = 0; d < F; d++) H[d] += B[d]
                                                    }
                                                    T.setFrame(h, this.getValue(f, "time", 0), H), this.readCurve(f, T, h), h++
                                                }
                                                r.push(T), s = Math.max(s, T.frames[T.getFrameCount() - 1])
                                            }
                                        }
                                    }
                                var K = e.drawOrder;
                                if (null == K && (K = e.draworder), null != K) {
                                    T = new t.DrawOrderTimeline(K.length);
                                    var z = i.slots.length;
                                    for (h = 0, G = 0; G < K.length; G++) {
                                        var X = K[G],
                                            j = null,
                                            q = this.getValue(X, "offsets", null);
                                        if (null != q) {
                                            j = t.Utils.newArray(z, -1);
                                            var Z = t.Utils.newArray(z - q.length, 0),
                                                Q = 0,
                                                J = 0;
                                            for (d = 0; d < q.length; d++) {
                                                var $, tt = q[d];
                                                if (-1 == ($ = i.findSlotIndex(tt.slot))) throw new Error("Slot not found: " + tt.slot);
                                                for (; Q != $;) Z[J++] = Q++;
                                                j[Q + tt.offset] = Q++
                                            }
                                            for (; Q < z;) Z[J++] = Q++;
                                            for (d = z - 1; d >= 0; d--) - 1 == j[d] && (j[d] = Z[--J])
                                        }
                                        T.setFrame(h++, this.getValue(X, "time", 0), j)
                                    }
                                    r.push(T), s = Math.max(s, T.frames[T.getFrameCount() - 1])
                                }
                                if (e.events) {
                                    for (T = new t.EventTimeline(e.events.length), h = 0, d = 0; d < e.events.length; d++) {
                                        var et = e.events[d],
                                            nt = i.findEvent(et.name);
                                        if (null == nt) throw new Error("Event not found: " + et.name);
                                        var it = new t.Event(t.Utils.toSinglePrecision(this.getValue(et, "time", 0)), nt);
                                        it.intValue = this.getValue(et, "int", nt.intValue), it.floatValue = this.getValue(et, "float", nt.floatValue), it.stringValue = this.getValue(et, "string", nt.stringValue), null != it.data.audioPath && (it.volume = this.getValue(et, "volume", 1), it.balance = this.getValue(et, "balance", 0)), T.setFrame(h++, it)
                                    }
                                    r.push(T), s = Math.max(s, T.frames[T.getFrameCount() - 1])
                                }
                                if (isNaN(s)) throw new Error("Error while parsing animation, duration is NaN");
                                i.animations.push(new t.Animation(n, r, s))
                            }, e.prototype.readCurve = function (t, e, n) {
                                if (t.hasOwnProperty("curve"))
                                    if ("stepped" == t.curve) e.setStepped(n);
                                    else {
                                        var i = t.curve;
                                        e.setCurve(n, i, this.getValue(t, "c2", 0), this.getValue(t, "c3", 1), this.getValue(t, "c4", 1))
                                    }
                            }, e.prototype.getValue = function (t, e, n) {
                                return void 0 !== t[e] ? t[e] : n
                            }, e.blendModeFromString = function (e) {
                                if ("normal" == (e = e.toLowerCase())) return t.BlendMode.Normal;
                                if ("additive" == e) return t.BlendMode.Additive;
                                if ("multiply" == e) return t.BlendMode.Multiply;
                                if ("screen" == e) return t.BlendMode.Screen;
                                throw new Error("Unknown blend mode: " + e)
                            }, e.positionModeFromString = function (e) {
                                if ("fixed" == (e = e.toLowerCase())) return t.PositionMode.Fixed;
                                if ("percent" == e) return t.PositionMode.Percent;
                                throw new Error("Unknown position mode: " + e)
                            }, e.spacingModeFromString = function (e) {
                                if ("length" == (e = e.toLowerCase())) return t.SpacingMode.Length;
                                if ("fixed" == e) return t.SpacingMode.Fixed;
                                if ("percent" == e) return t.SpacingMode.Percent;
                                throw new Error("Unknown position mode: " + e)
                            }, e.rotateModeFromString = function (e) {
                                if ("tangent" == (e = e.toLowerCase())) return t.RotateMode.Tangent;
                                if ("chain" == e) return t.RotateMode.Chain;
                                if ("chainscale" == e) return t.RotateMode.ChainScale;
                                throw new Error("Unknown rotate mode: " + e)
                            }, e.transformModeFromString = function (e) {
                                if ("normal" == (e = e.toLowerCase())) return t.TransformMode.Normal;
                                if ("onlytranslation" == e) return t.TransformMode.OnlyTranslation;
                                if ("norotationorreflection" == e) return t.TransformMode.NoRotationOrReflection;
                                if ("noscale" == e) return t.TransformMode.NoScale;
                                if ("noscaleorreflection" == e) return t.TransformMode.NoScaleOrReflection;
                                throw new Error("Unknown transform mode: " + e)
                            }, e
                        }();
                        t.SkeletonJson = e;
                        var n = function (t, e, n, i, a) {
                            this.mesh = t, this.skin = e, this.slotIndex = n, this.parent = i, this.inheritDeform = a
                        }
                    }(i || (i = {})),
                    function (t) {
                        var e = function (t, e, n) {
                            this.slotIndex = t, this.name = e, this.attachment = n
                        };
                        t.SkinEntry = e;
                        var n = function () {
                            function n(t) {
                                if (this.attachments = new Array, this.bones = Array(), this.constraints = new Array, null == t) throw new Error("name cannot be null.");
                                this.name = t
                            }
                            return n.prototype.setAttachment = function (t, e, n) {
                                if (null == n) throw new Error("attachment cannot be null.");
                                var i = this.attachments;
                                t >= i.length && (i.length = t + 1), i[t] || (i[t] = {}), i[t][e] = n
                            }, n.prototype.addSkin = function (t) {
                                for (var e = 0; e < t.bones.length; e++) {
                                    for (var n = t.bones[e], i = !1, a = 0; a < this.bones.length; a++)
                                        if (this.bones[a] == n) {
                                            i = !0;
                                            break
                                        } i || this.bones.push(n)
                                }
                                for (e = 0; e < t.constraints.length; e++) {
                                    var r = t.constraints[e];
                                    for (i = !1, a = 0; a < this.constraints.length; a++)
                                        if (this.constraints[a] == r) {
                                            i = !0;
                                            break
                                        } i || this.constraints.push(r)
                                }
                                var s = t.getAttachments();
                                for (e = 0; e < s.length; e++) {
                                    var o = s[e];
                                    this.setAttachment(o.slotIndex, o.name, o.attachment)
                                }
                            }, n.prototype.copySkin = function (e) {
                                for (var n = 0; n < e.bones.length; n++) {
                                    for (var i = e.bones[n], a = !1, r = 0; r < this.bones.length; r++)
                                        if (this.bones[r] == i) {
                                            a = !0;
                                            break
                                        } a || this.bones.push(i)
                                }
                                for (n = 0; n < e.constraints.length; n++) {
                                    var s = e.constraints[n];
                                    for (a = !1, r = 0; r < this.constraints.length; r++)
                                        if (this.constraints[r] == s) {
                                            a = !0;
                                            break
                                        } a || this.constraints.push(s)
                                }
                                var o = e.getAttachments();
                                for (n = 0; n < o.length; n++) {
                                    var l = o[n];
                                    null != l.attachment && (l.attachment instanceof t.MeshAttachment ? (l.attachment = l.attachment.newLinkedMesh(), this.setAttachment(l.slotIndex, l.name, l.attachment)) : (l.attachment = l.attachment.copy(), this.setAttachment(l.slotIndex, l.name, l.attachment)))
                                }
                            }, n.prototype.getAttachment = function (t, e) {
                                var n = this.attachments[t];
                                return n ? n[e] : null
                            }, n.prototype.removeAttachment = function (t, e) {
                                var n = this.attachments[t];
                                n && (n[e] = null)
                            }, n.prototype.getAttachments = function () {
                                for (var t = new Array, n = 0; n < this.attachments.length; n++) {
                                    var i = this.attachments[n];
                                    if (i)
                                        for (var a in i) {
                                            var r = i[a];
                                            r && t.push(new e(n, a, r))
                                        }
                                }
                                return t
                            }, n.prototype.getAttachmentsForSlot = function (t, n) {
                                var i = this.attachments[t];
                                if (i)
                                    for (var a in i) {
                                        var r = i[a];
                                        r && n.push(new e(t, a, r))
                                    }
                            }, n.prototype.clear = function () {
                                this.attachments.length = 0, this.bones.length = 0, this.constraints.length = 0
                            }, n.prototype.attachAll = function (t, e) {
                                for (var n = 0, i = 0; i < t.slots.length; i++) {
                                    var a = t.slots[i],
                                        r = a.getAttachment();
                                    if (r && n < e.attachments.length) {
                                        var s = e.attachments[n];
                                        for (var o in s)
                                            if (r == s[o]) {
                                                var l = this.getAttachment(n, o);
                                                null != l && a.setAttachment(l);
                                                break
                                            }
                                    }
                                    n++
                                }
                            }, n
                        }();
                        t.Skin = n
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(e, n) {
                                if (this.deform = new Array, null == e) throw new Error("data cannot be null.");
                                if (null == n) throw new Error("bone cannot be null.");
                                this.data = e, this.bone = n, this.color = new t.Color, this.darkColor = null == e.darkColor ? null : new t.Color, this.setToSetupPose()
                            }
                            return e.prototype.getSkeleton = function () {
                                return this.bone.skeleton
                            }, e.prototype.getAttachment = function () {
                                return this.attachment
                            }, e.prototype.setAttachment = function (t) {
                                this.attachment != t && (this.attachment = t, this.attachmentTime = this.bone.skeleton.time, this.deform.length = 0)
                            }, e.prototype.setAttachmentTime = function (t) {
                                this.attachmentTime = this.bone.skeleton.time - t
                            }, e.prototype.getAttachmentTime = function () {
                                return this.bone.skeleton.time - this.attachmentTime
                            }, e.prototype.setToSetupPose = function () {
                                this.color.setFromColor(this.data.color), null != this.darkColor && this.darkColor.setFromColor(this.data.darkColor), null == this.data.attachmentName ? this.attachment = null : (this.attachment = null, this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName)))
                            }, e
                        }();
                        t.Slot = e
                    }(i || (i = {})),
                    function (t) {
                        t.SlotData = function (e, n, i) {
                            if (this.color = new t.Color(1, 1, 1, 1), e < 0) throw new Error("index must be >= 0.");
                            if (null == n) throw new Error("name cannot be null.");
                            if (null == i) throw new Error("boneData cannot be null.");
                            this.index = e, this.name = n, this.boneData = i
                        }
                    }(i || (i = {})),
                    function (t) {
                        var e, n, i = function () {
                            function t(t) {
                                this._image = t
                            }
                            return t.prototype.getImage = function () {
                                return this._image
                            }, t.filterFromString = function (t) {
                                switch (t.toLowerCase()) {
                                    case "nearest":
                                        return e.Nearest;
                                    case "linear":
                                        return e.Linear;
                                    case "mipmap":
                                        return e.MipMap;
                                    case "mipmapnearestnearest":
                                        return e.MipMapNearestNearest;
                                    case "mipmaplinearnearest":
                                        return e.MipMapLinearNearest;
                                    case "mipmapnearestlinear":
                                        return e.MipMapNearestLinear;
                                    case "mipmaplinearlinear":
                                        return e.MipMapLinearLinear;
                                    default:
                                        throw new Error("Unknown texture filter " + t)
                                }
                            }, t.wrapFromString = function (t) {
                                switch (t.toLowerCase()) {
                                    case "mirroredtepeat":
                                        return n.MirroredRepeat;
                                    case "clamptoedge":
                                        return n.ClampToEdge;
                                    case "repeat":
                                        return n.Repeat;
                                    default:
                                        throw new Error("Unknown texture wrap " + t)
                                }
                            }, t
                        }();
                        t.Texture = i,
                            function (t) {
                                t[t.Nearest = 9728] = "Nearest", t[t.Linear = 9729] = "Linear", t[t.MipMap = 9987] = "MipMap", t[t.MipMapNearestNearest = 9984] = "MipMapNearestNearest", t[t.MipMapLinearNearest = 9985] = "MipMapLinearNearest", t[t.MipMapNearestLinear = 9986] = "MipMapNearestLinear", t[t.MipMapLinearLinear = 9987] = "MipMapLinearLinear"
                            }(e = t.TextureFilter || (t.TextureFilter = {})),
                            function (t) {
                                t[t.MirroredRepeat = 33648] = "MirroredRepeat", t[t.ClampToEdge = 33071] = "ClampToEdge", t[t.Repeat = 10497] = "Repeat"
                            }(n = t.TextureWrap || (t.TextureWrap = {})), t.TextureRegion = function () {
                                this.u = 0, this.v = 0, this.u2 = 0, this.v2 = 0, this.width = 0, this.height = 0, this.rotate = !1, this.offsetX = 0, this.offsetY = 0, this.originalWidth = 0, this.originalHeight = 0
                            };
                        var r = function (t) {
                            function e() {
                                return null !== t && t.apply(this, arguments) || this
                            }
                            return a(e, t), e.prototype.setFilters = function (t, e) {}, e.prototype.setWraps = function (t, e) {}, e.prototype.dispose = function () {}, e
                        }(i);
                        t.FakeTexture = r
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(t, e) {
                                this.pages = new Array, this.regions = new Array, this.load(t, e)
                            }
                            return e.prototype.load = function (e, a) {
                                if (null == a) throw new Error("textureLoader cannot be null.");
                                for (var s = new n(e), o = new Array(4), l = null;;) {
                                    var c = s.readLine();
                                    if (null == c) break;
                                    if (0 == (c = kr()(c).call(c)).length) l = null;
                                    else if (l) {
                                        var u = new r;
                                        u.name = c, u.page = l;
                                        var h = s.readValue();
                                        "true" == h.toLocaleLowerCase() ? u.degrees = 90 : "false" == h.toLocaleLowerCase() ? u.degrees = 0 : u.degrees = Cr()(h), u.rotate = 90 == u.degrees, s.readTuple(o);
                                        var d = Zi()(o[0]),
                                            f = Zi()(o[1]);
                                        s.readTuple(o);
                                        var p = Zi()(o[0]),
                                            g = Zi()(o[1]);
                                        u.u = d / l.width, u.v = f / l.height, u.rotate ? (u.u2 = (d + g) / l.width, u.v2 = (f + p) / l.height) : (u.u2 = (d + p) / l.width, u.v2 = (f + g) / l.height), u.x = d, u.y = f, u.width = Math.abs(p), u.height = Math.abs(g), 4 == s.readTuple(o) && 4 == s.readTuple(o) && s.readTuple(o), u.originalWidth = Zi()(o[0]), u.originalHeight = Zi()(o[1]), s.readTuple(o), u.offsetX = Zi()(o[0]), u.offsetY = Zi()(o[1]), u.index = Zi()(s.readValue()), u.texture = l.texture, this.regions.push(u)
                                    } else {
                                        (l = new i).name = c, 2 == s.readTuple(o) && (l.width = Zi()(o[0]), l.height = Zi()(o[1]), s.readTuple(o)), s.readTuple(o), l.minFilter = t.Texture.filterFromString(o[0]), l.magFilter = t.Texture.filterFromString(o[1]);
                                        var v = s.readValue();
                                        l.uWrap = t.TextureWrap.ClampToEdge, l.vWrap = t.TextureWrap.ClampToEdge, "x" == v ? l.uWrap = t.TextureWrap.Repeat : "y" == v ? l.vWrap = t.TextureWrap.Repeat : "xy" == v && (l.uWrap = l.vWrap = t.TextureWrap.Repeat), l.texture = a(c), l.texture.setFilters(l.minFilter, l.magFilter), l.texture.setWraps(l.uWrap, l.vWrap), l.width = l.texture.getImage().width, l.height = l.texture.getImage().height, this.pages.push(l)
                                    }
                                }
                            }, e.prototype.findRegion = function (t) {
                                for (var e = 0; e < this.regions.length; e++)
                                    if (this.regions[e].name == t) return this.regions[e];
                                return null
                            }, e.prototype.dispose = function () {
                                for (var t = 0; t < this.pages.length; t++) this.pages[t].texture.dispose()
                            }, e
                        }();
                        t.TextureAtlas = e;
                        var n = function () {
                                function t(t) {
                                    this.index = 0, this.lines = t.split(/\r\n|\r|\n/)
                                }
                                return t.prototype.readLine = function () {
                                    return this.index >= this.lines.length ? null : this.lines[this.index++]
                                }, t.prototype.readValue = function () {
                                    var t, e = this.readLine(),
                                        n = g()(e).call(e, ":");
                                    if (-1 == n) throw new Error("Invalid line: " + e);
                                    return kr()(t = e.substring(n + 1)).call(t)
                                }, t.prototype.readTuple = function (t) {
                                    var e, n = this.readLine(),
                                        i = g()(n).call(n, ":");
                                    if (-1 == i) throw new Error("Invalid line: " + n);
                                    for (var a = 0, r = i + 1; a < 3; a++) {
                                        var s, o = g()(n).call(n, ",", r);
                                        if (-1 == o) break;
                                        t[a] = kr()(s = n.substr(r, o - r)).call(s), r = o + 1
                                    }
                                    return t[a] = kr()(e = n.substring(r)).call(e), a + 1
                                }, t
                            }(),
                            i = function () {};
                        t.TextureAtlasPage = i;
                        var r = function (t) {
                            function e() {
                                return null !== t && t.apply(this, arguments) || this
                            }
                            return a(e, t), e
                        }(t.TextureRegion);
                        t.TextureAtlasRegion = r
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e(e, n) {
                                if (this.rotateMix = 0, this.translateMix = 0, this.scaleMix = 0, this.shearMix = 0, this.temp = new t.Vector2, this.active = !1, null == e) throw new Error("data cannot be null.");
                                if (null == n) throw new Error("skeleton cannot be null.");
                                this.data = e, this.rotateMix = e.rotateMix, this.translateMix = e.translateMix, this.scaleMix = e.scaleMix, this.shearMix = e.shearMix, this.bones = new Array;
                                for (var i = 0; i < e.bones.length; i++) this.bones.push(n.findBone(e.bones[i].name));
                                this.target = n.findBone(e.target.name)
                            }
                            return e.prototype.isActive = function () {
                                return this.active
                            }, e.prototype.apply = function () {
                                this.update()
                            }, e.prototype.update = function () {
                                this.data.local ? this.data.relative ? this.applyRelativeLocal() : this.applyAbsoluteLocal() : this.data.relative ? this.applyRelativeWorld() : this.applyAbsoluteWorld()
                            }, e.prototype.applyAbsoluteWorld = function () {
                                for (var e = this.rotateMix, n = this.translateMix, i = this.scaleMix, a = this.shearMix, r = this.target, s = r.a, o = r.b, l = r.c, c = r.d, u = s * c - o * l > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad, h = this.data.offsetRotation * u, d = this.data.offsetShearY * u, f = this.bones, p = 0, g = f.length; p < g; p++) {
                                    var v = f[p],
                                        m = !1;
                                    if (0 != e) {
                                        var E = v.a,
                                            y = v.b,
                                            A = v.c,
                                            T = v.d;
                                        (I = Math.atan2(l, s) - Math.atan2(A, E) + h) > t.MathUtils.PI ? I -= t.MathUtils.PI2 : I < -t.MathUtils.PI && (I += t.MathUtils.PI2), I *= e;
                                        var S = Math.cos(I),
                                            M = Math.sin(I);
                                        v.a = S * E - M * A, v.b = S * y - M * T, v.c = M * E + S * A, v.d = M * y + S * T, m = !0
                                    }
                                    if (0 != n) {
                                        var w = this.temp;
                                        r.localToWorld(w.set(this.data.offsetX, this.data.offsetY)), v.worldX += (w.x - v.worldX) * n, v.worldY += (w.y - v.worldY) * n, m = !0
                                    }
                                    if (i > 0) {
                                        var x = Math.sqrt(v.a * v.a + v.c * v.c),
                                            C = Math.sqrt(s * s + l * l);
                                        x > 1e-5 && (x = (x + (C - x + this.data.offsetScaleX) * i) / x), v.a *= x, v.c *= x, x = Math.sqrt(v.b * v.b + v.d * v.d), C = Math.sqrt(o * o + c * c), x > 1e-5 && (x = (x + (C - x + this.data.offsetScaleY) * i) / x), v.b *= x, v.d *= x, m = !0
                                    }
                                    if (a > 0) {
                                        y = v.b, T = v.d;
                                        var I, b = Math.atan2(T, y);
                                        (I = Math.atan2(c, o) - Math.atan2(l, s) - (b - Math.atan2(v.c, v.a))) > t.MathUtils.PI ? I -= t.MathUtils.PI2 : I < -t.MathUtils.PI && (I += t.MathUtils.PI2), I = b + (I + d) * a, x = Math.sqrt(y * y + T * T), v.b = Math.cos(I) * x, v.d = Math.sin(I) * x, m = !0
                                    }
                                    m && (v.appliedValid = !1)
                                }
                            }, e.prototype.applyRelativeWorld = function () {
                                for (var e = this.rotateMix, n = this.translateMix, i = this.scaleMix, a = this.shearMix, r = this.target, s = r.a, o = r.b, l = r.c, c = r.d, u = s * c - o * l > 0 ? t.MathUtils.degRad : -t.MathUtils.degRad, h = this.data.offsetRotation * u, d = this.data.offsetShearY * u, f = this.bones, p = 0, g = f.length; p < g; p++) {
                                    var v, m = f[p],
                                        E = !1;
                                    if (0 != e) {
                                        var y = m.a,
                                            A = m.b,
                                            T = m.c,
                                            S = m.d;
                                        (v = Math.atan2(l, s) + h) > t.MathUtils.PI ? v -= t.MathUtils.PI2 : v < -t.MathUtils.PI && (v += t.MathUtils.PI2), v *= e;
                                        var M = Math.cos(v),
                                            w = Math.sin(v);
                                        m.a = M * y - w * T, m.b = M * A - w * S, m.c = w * y + M * T, m.d = w * A + M * S, E = !0
                                    }
                                    if (0 != n) {
                                        var x = this.temp;
                                        r.localToWorld(x.set(this.data.offsetX, this.data.offsetY)), m.worldX += x.x * n, m.worldY += x.y * n, E = !0
                                    }
                                    if (i > 0) {
                                        var C = (Math.sqrt(s * s + l * l) - 1 + this.data.offsetScaleX) * i + 1;
                                        m.a *= C, m.c *= C, C = (Math.sqrt(o * o + c * c) - 1 + this.data.offsetScaleY) * i + 1, m.b *= C, m.d *= C, E = !0
                                    }
                                    a > 0 && ((v = Math.atan2(c, o) - Math.atan2(l, s)) > t.MathUtils.PI ? v -= t.MathUtils.PI2 : v < -t.MathUtils.PI && (v += t.MathUtils.PI2), A = m.b, S = m.d, v = Math.atan2(S, A) + (v - t.MathUtils.PI / 2 + d) * a, C = Math.sqrt(A * A + S * S), m.b = Math.cos(v) * C, m.d = Math.sin(v) * C, E = !0), E && (m.appliedValid = !1)
                                }
                            }, e.prototype.applyAbsoluteLocal = function () {
                                var t = this.rotateMix,
                                    e = this.translateMix,
                                    n = this.scaleMix,
                                    i = this.shearMix,
                                    a = this.target;
                                a.appliedValid || a.updateAppliedTransform();
                                for (var r = this.bones, s = 0, o = r.length; s < o; s++) {
                                    var l = r[s];
                                    l.appliedValid || l.updateAppliedTransform();
                                    var c = l.arotation;
                                    if (0 != t) {
                                        var u = a.arotation - c + this.data.offsetRotation;
                                        c += (u -= 360 * (16384 - (16384.499999999996 - u / 360 | 0))) * t
                                    }
                                    var h = l.ax,
                                        d = l.ay;
                                    0 != e && (h += (a.ax - h + this.data.offsetX) * e, d += (a.ay - d + this.data.offsetY) * e);
                                    var f = l.ascaleX,
                                        p = l.ascaleY;
                                    0 != n && (f > 1e-5 && (f = (f + (a.ascaleX - f + this.data.offsetScaleX) * n) / f), p > 1e-5 && (p = (p + (a.ascaleY - p + this.data.offsetScaleY) * n) / p));
                                    var g = l.ashearY;
                                    0 != i && (u = a.ashearY - g + this.data.offsetShearY, u -= 360 * (16384 - (16384.499999999996 - u / 360 | 0)), l.shearY += u * i), l.updateWorldTransformWith(h, d, c, f, p, l.ashearX, g)
                                }
                            }, e.prototype.applyRelativeLocal = function () {
                                var t = this.rotateMix,
                                    e = this.translateMix,
                                    n = this.scaleMix,
                                    i = this.shearMix,
                                    a = this.target;
                                a.appliedValid || a.updateAppliedTransform();
                                for (var r = this.bones, s = 0, o = r.length; s < o; s++) {
                                    var l = r[s];
                                    l.appliedValid || l.updateAppliedTransform();
                                    var c = l.arotation;
                                    0 != t && (c += (a.arotation + this.data.offsetRotation) * t);
                                    var u = l.ax,
                                        h = l.ay;
                                    0 != e && (u += (a.ax + this.data.offsetX) * e, h += (a.ay + this.data.offsetY) * e);
                                    var d = l.ascaleX,
                                        f = l.ascaleY;
                                    0 != n && (d > 1e-5 && (d *= (a.ascaleX - 1 + this.data.offsetScaleX) * n + 1), f > 1e-5 && (f *= (a.ascaleY - 1 + this.data.offsetScaleY) * n + 1));
                                    var p = l.ashearY;
                                    0 != i && (p += (a.ashearY + this.data.offsetShearY) * i), l.updateWorldTransformWith(u, h, c, d, f, l.ashearX, p)
                                }
                            }, e
                        }();
                        t.TransformConstraint = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function (t) {
                            function e(e) {
                                var n = t.call(this, e, 0, !1) || this;
                                return n.bones = new Array, n.rotateMix = 0, n.translateMix = 0, n.scaleMix = 0, n.shearMix = 0, n.offsetRotation = 0, n.offsetX = 0, n.offsetY = 0, n.offsetScaleX = 0, n.offsetScaleY = 0, n.offsetShearY = 0, n.relative = !1, n.local = !1, n
                            }
                            return a(e, t), e
                        }(t.ConstraintData);
                        t.TransformConstraintData = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function e() {
                                this.convexPolygons = new Array, this.convexPolygonsIndices = new Array, this.indicesArray = new Array, this.isConcaveArray = new Array, this.triangles = new Array, this.polygonPool = new t.Pool((function () {
                                    return new Array
                                })), this.polygonIndicesPool = new t.Pool((function () {
                                    return new Array
                                }))
                            }
                            return e.prototype.triangulate = function (t) {
                                var n = t,
                                    i = t.length >> 1,
                                    a = this.indicesArray;
                                a.length = 0;
                                for (var r = 0; r < i; r++) a[r] = r;
                                var s = this.isConcaveArray;
                                s.length = 0, r = 0;
                                for (var o = i; r < o; ++r) s[r] = e.isConcave(r, i, n, a);
                                var l = this.triangles;
                                for (l.length = 0; i > 3;) {
                                    for (var c = i - 1, u = (r = 0, 1);;) {
                                        t: if (!s[r]) {
                                            for (var h = a[c] << 1, d = a[r] << 1, f = a[u] << 1, p = n[h], g = n[h + 1], v = n[d], m = n[d + 1], E = n[f], y = n[f + 1], A = (u + 1) % i; A != c; A = (A + 1) % i)
                                                if (s[A]) {
                                                    var T = a[A] << 1,
                                                        S = n[T],
                                                        M = n[T + 1];
                                                    if (e.positiveArea(E, y, p, g, S, M) && e.positiveArea(p, g, v, m, S, M) && e.positiveArea(v, m, E, y, S, M)) break t
                                                } break
                                        }if (0 == u) {
                                            do {
                                                if (!s[r]) break;
                                                r--
                                            } while (r > 0);
                                            break
                                        }
                                        c = r,
                                        r = u,
                                        u = (u + 1) % i
                                    }
                                    l.push(a[(i + r - 1) % i]), l.push(a[r]), l.push(a[(r + 1) % i]), Pr()(a).call(a, r, 1), Pr()(s).call(s, r, 1);
                                    var w = (--i + r - 1) % i,
                                        x = r == i ? 0 : r;
                                    s[w] = e.isConcave(w, i, n, a), s[x] = e.isConcave(x, i, n, a)
                                }
                                return 3 == i && (l.push(a[2]), l.push(a[0]), l.push(a[1])), l
                            }, e.prototype.decompose = function (t, n) {
                                var i = t,
                                    a = this.convexPolygons;
                                this.polygonPool.freeAll(a), a.length = 0;
                                var r = this.convexPolygonsIndices;
                                this.polygonIndicesPool.freeAll(r), r.length = 0;
                                var s = this.polygonIndicesPool.obtain();
                                s.length = 0;
                                var o = this.polygonPool.obtain();
                                o.length = 0;
                                for (var l = -1, c = 0, u = 0, h = n.length; u < h; u += 3) {
                                    var d = n[u] << 1,
                                        f = n[u + 1] << 1,
                                        p = n[u + 2] << 1,
                                        g = i[d],
                                        v = i[d + 1],
                                        m = i[f],
                                        E = i[f + 1],
                                        y = i[p],
                                        A = i[p + 1],
                                        T = !1;
                                    if (l == d) {
                                        var S = o.length - 4,
                                            M = e.winding(o[S], o[S + 1], o[S + 2], o[S + 3], y, A),
                                            w = e.winding(y, A, o[0], o[1], o[2], o[3]);
                                        M == c && w == c && (o.push(y), o.push(A), s.push(p), T = !0)
                                    }
                                    T || (o.length > 0 ? (a.push(o), r.push(s)) : (this.polygonPool.free(o), this.polygonIndicesPool.free(s)), (o = this.polygonPool.obtain()).length = 0, o.push(g), o.push(v), o.push(m), o.push(E), o.push(y), o.push(A), (s = this.polygonIndicesPool.obtain()).length = 0, s.push(d), s.push(f), s.push(p), c = e.winding(g, v, m, E, y, A), l = d)
                                }
                                for (o.length > 0 && (a.push(o), r.push(s)), u = 0, h = a.length; u < h; u++)
                                    if (0 != (s = r[u]).length)
                                        for (var x = s[0], C = s[s.length - 1], I = (o = a[u])[S = o.length - 4], b = o[S + 1], R = o[S + 2], P = o[S + 3], _ = o[0], k = o[1], L = o[2], D = o[3], O = e.winding(I, b, R, P, _, k), N = 0; N < h; N++)
                                            if (N != u) {
                                                var U = r[N];
                                                if (3 == U.length) {
                                                    var B = U[0],
                                                        F = U[1],
                                                        G = U[2],
                                                        H = a[N];
                                                    y = H[H.length - 2], A = H[H.length - 1], B == x && F == C && (M = e.winding(I, b, R, P, y, A), w = e.winding(y, A, _, k, L, D), M == O && w == O && (H.length = 0, U.length = 0, o.push(y), o.push(A), s.push(G), I = R, b = P, R = y, P = A, N = 0))
                                                }
                                            } for (u = a.length - 1; u >= 0; u--) 0 == (o = a[u]).length && (Pr()(a).call(a, u, 1), this.polygonPool.free(o), s = r[u], Pr()(r).call(r, u, 1), this.polygonIndicesPool.free(s));
                                return a
                            }, e.isConcave = function (t, e, n, i) {
                                var a = i[(e + t - 1) % e] << 1,
                                    r = i[t] << 1,
                                    s = i[(t + 1) % e] << 1;
                                return !this.positiveArea(n[a], n[a + 1], n[r], n[r + 1], n[s], n[s + 1])
                            }, e.positiveArea = function (t, e, n, i, a, r) {
                                return t * (r - i) + n * (e - r) + a * (i - e) >= 0
                            }, e.winding = function (t, e, n, i, a, r) {
                                var s = n - t,
                                    o = i - e;
                                return a * o - r * s + s * e - t * o >= 0 ? 1 : -1
                            }, e
                        }();
                        t.Triangulator = e
                    }(i || (i = {})),
                    function (t) {
                        var e = function () {
                            function t() {
                                this.array = new Array
                            }
                            return t.prototype.add = function (t) {
                                var e = this.contains(t);
                                return this.array[0 | t] = 0 | t, !e
                            }, t.prototype.contains = function (t) {
                                return null != this.array[0 | t]
                            }, t.prototype.remove = function (t) {
                                this.array[0 | t] = void 0
                            }, t.prototype.clear = function () {
                                this.array.length = 0
                            }, t
                        }();
                        t.IntSet = e;
                        var n = function () {
                            function t(t, e, n, i) {
                                void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.r = t, this.g = e, this.b = n, this.a = i
                            }
                            return t.prototype.set = function (t, e, n, i) {
                                return this.r = t, this.g = e, this.b = n, this.a = i, this.clamp(), this
                            }, t.prototype.setFromColor = function (t) {
                                return this.r = t.r, this.g = t.g, this.b = t.b, this.a = t.a, this
                            }, t.prototype.setFromString = function (t) {
                                return t = "#" == t.charAt(0) ? t.substr(1) : t, this.r = Zi()(t.substr(0, 2), 16) / 255, this.g = Zi()(t.substr(2, 2), 16) / 255, this.b = Zi()(t.substr(4, 2), 16) / 255, this.a = (8 != t.length ? 255 : Zi()(t.substr(6, 2), 16)) / 255, this
                            }, t.prototype.add = function (t, e, n, i) {
                                return this.r += t, this.g += e, this.b += n, this.a += i, this.clamp(), this
                            }, t.prototype.clamp = function () {
                                return this.r < 0 ? this.r = 0 : this.r > 1 && (this.r = 1), this.g < 0 ? this.g = 0 : this.g > 1 && (this.g = 1), this.b < 0 ? this.b = 0 : this.b > 1 && (this.b = 1), this.a < 0 ? this.a = 0 : this.a > 1 && (this.a = 1), this
                            }, t.rgba8888ToColor = function (t, e) {
                                t.r = ((4278190080 & e) >>> 24) / 255, t.g = ((16711680 & e) >>> 16) / 255, t.b = ((65280 & e) >>> 8) / 255, t.a = (255 & e) / 255
                            }, t.rgb888ToColor = function (t, e) {
                                t.r = ((16711680 & e) >>> 16) / 255, t.g = ((65280 & e) >>> 8) / 255, t.b = (255 & e) / 255
                            }, t.WHITE = new t(1, 1, 1, 1), t.RED = new t(1, 0, 0, 1), t.GREEN = new t(0, 1, 0, 1), t.BLUE = new t(0, 0, 1, 1), t.MAGENTA = new t(1, 0, 1, 1), t
                        }();
                        t.Color = n;
                        var i = function () {
                            function t() {}
                            return t.clamp = function (t, e, n) {
                                return t < e ? e : t > n ? n : t
                            }, t.cosDeg = function (e) {
                                return Math.cos(e * t.degRad)
                            }, t.sinDeg = function (e) {
                                return Math.sin(e * t.degRad)
                            }, t.signum = function (t) {
                                return t > 0 ? 1 : t < 0 ? -1 : 0
                            }, t.toInt = function (t) {
                                return t > 0 ? Math.floor(t) : Math.ceil(t)
                            }, t.cbrt = function (t) {
                                var e = Math.pow(Math.abs(t), 1 / 3);
                                return t < 0 ? -e : e
                            }, t.randomTriangular = function (e, n) {
                                return t.randomTriangularWith(e, n, .5 * (e + n))
                            }, t.randomTriangularWith = function (t, e, n) {
                                var i = Math.random(),
                                    a = e - t;
                                return i <= (n - t) / a ? t + Math.sqrt(i * a * (n - t)) : e - Math.sqrt((1 - i) * a * (e - n))
                            }, t.PI = 3.1415927, t.PI2 = 2 * t.PI, t.radiansToDegrees = 180 / t.PI, t.radDeg = t.radiansToDegrees, t.degreesToRadians = t.PI / 180, t.degRad = t.degreesToRadians, t
                        }();
                        t.MathUtils = i;
                        var r = function () {
                            function t() {}
                            return t.prototype.apply = function (t, e, n) {
                                return t + (e - t) * this.applyInternal(n)
                            }, t
                        }();
                        t.Interpolation = r;
                        var s = function (t) {
                            function e(e) {
                                var n = t.call(this) || this;
                                return n.power = 2, n.power = e, n
                            }
                            return a(e, t), e.prototype.applyInternal = function (t) {
                                return t <= .5 ? Math.pow(2 * t, this.power) / 2 : Math.pow(2 * (t - 1), this.power) / (this.power % 2 == 0 ? -2 : 2) + 1
                            }, e
                        }(r);
                        t.Pow = s;
                        var o = function (t) {
                            function e(e) {
                                return t.call(this, e) || this
                            }
                            return a(e, t), e.prototype.applyInternal = function (t) {
                                return Math.pow(t - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1
                            }, e
                        }(s);
                        t.PowOut = o;
                        var l = function () {
                            function t() {}
                            return t.arrayCopy = function (t, e, n, i, a) {
                                for (var r = e, s = i; r < e + a; r++, s++) n[s] = t[r]
                            }, t.setArraySize = function (t, e, n) {
                                void 0 === n && (n = 0);
                                var i = t.length;
                                if (i == e) return t;
                                if (t.length = e, i < e)
                                    for (var a = i; a < e; a++) t[a] = n;
                                return t
                            }, t.ensureArrayCapacity = function (e, n, i) {
                                return void 0 === i && (i = 0), e.length >= n ? e : t.setArraySize(e, n, i)
                            }, t.newArray = function (t, e) {
                                for (var n = new Array(t), i = 0; i < t; i++) n[i] = e;
                                return n
                            }, t.newFloatArray = function (e) {
                                if (t.SUPPORTS_TYPED_ARRAYS) return new Float32Array(e);
                                for (var n = new Array(e), i = 0; i < n.length; i++) n[i] = 0;
                                return n
                            }, t.newShortArray = function (e) {
                                if (t.SUPPORTS_TYPED_ARRAYS) return new Int16Array(e);
                                for (var n = new Array(e), i = 0; i < n.length; i++) n[i] = 0;
                                return n
                            }, t.toFloatArray = function (e) {
                                return t.SUPPORTS_TYPED_ARRAYS ? new Float32Array(e) : e
                            }, t.toSinglePrecision = function (e) {
                                return t.SUPPORTS_TYPED_ARRAYS ? Dr()(e) : e
                            }, t.webkit602BugfixHelper = function (t, e) {}, t.contains = function (t, e, n) {
                                void 0 === n && (n = !0);
                                for (var i = 0; i < t.length; i++)
                                    if (t[i] == e) return !0;
                                return !1
                            }, t.SUPPORTS_TYPED_ARRAYS = "undefined" != typeof Float32Array, t
                        }();
                        t.Utils = l;
                        var c = function () {
                            function t() {}
                            return t.logBones = function (t) {
                                for (var e = 0; e < t.bones.length; e++) t.bones[e]
                            }, t
                        }();
                        t.DebugUtils = c;
                        var u = function () {
                            function t(t) {
                                this.items = new Array, this.instantiator = t
                            }
                            return t.prototype.obtain = function () {
                                return this.items.length > 0 ? this.items.pop() : this.instantiator()
                            }, t.prototype.free = function (t) {
                                t.reset && t.reset(), this.items.push(t)
                            }, t.prototype.freeAll = function (t) {
                                for (var e = 0; e < t.length; e++) this.free(t[e])
                            }, t.prototype.clear = function () {
                                this.items.length = 0
                            }, t
                        }();
                        t.Pool = u;
                        var h = function () {
                            function t(t, e) {
                                void 0 === t && (t = 0), void 0 === e && (e = 0), this.x = t, this.y = e
                            }
                            return t.prototype.set = function (t, e) {
                                return this.x = t, this.y = e, this
                            }, t.prototype.length = function () {
                                var t = this.x,
                                    e = this.y;
                                return Math.sqrt(t * t + e * e)
                            }, t.prototype.normalize = function () {
                                var t = this.length();
                                return 0 != t && (this.x /= t, this.y /= t), this
                            }, t
                        }();
                        t.Vector2 = h;
                        var d = function () {
                            function t() {
                                this.maxDelta = .064, this.framesPerSecond = 0, this.delta = 0, this.totalTime = 0, this.lastTime = Date.now() / 1e3, this.frameCount = 0, this.frameTime = 0
                            }
                            return t.prototype.update = function () {
                                var t = Date.now() / 1e3;
                                this.delta = t - this.lastTime, this.frameTime += this.delta, this.totalTime += this.delta, this.delta > this.maxDelta && (this.delta = this.maxDelta), this.lastTime = t, this.frameCount++, this.frameTime > 1 && (this.framesPerSecond = this.frameCount / this.frameTime, this.frameTime = 0, this.frameCount = 0)
                            }, t
                        }();
                        t.TimeKeeper = d;
                        var f = function () {
                            function t(t) {
                                void 0 === t && (t = 32), this.addedValues = 0, this.lastValue = 0, this.mean = 0, this.dirty = !0, this.values = new Array(t)
                            }
                            return t.prototype.hasEnoughData = function () {
                                return this.addedValues >= Nr()(this).length
                            }, t.prototype.addValue = function (t) {
                                this.addedValues < Nr()(this).length && this.addedValues++, Nr()(this)[this.lastValue++] = t, this.lastValue > Nr()(this).length - 1 && (this.lastValue = 0), this.dirty = !0
                            }, t.prototype.getMean = function () {
                                if (this.hasEnoughData()) {
                                    if (this.dirty) {
                                        for (var t = 0, e = 0; e < Nr()(this).length; e++) t += Nr()(this)[e];
                                        this.mean = t / Nr()(this).length, this.dirty = !1
                                    }
                                    return this.mean
                                }
                                return 0
                            }, t
                        }();
                        t.WindowedMean = f
                    }(i || (i = {})), Dr() || (Math.fround = (n = new Float32Array(1), function (t) {
                            return n[0] = t, n[0]
                        })),
                        function (t) {
                            var e = function (t) {
                                if (null == t) throw new Error("name cannot be null.");
                                this.name = t
                            };
                            t.Attachment = e;
                            var n = function (e) {
                                function n(t) {
                                    var i = e.call(this, t) || this;
                                    return i.id = (65535 & n.nextID++) << 11, i.worldVerticesLength = 0, i.deformAttachment = i, i
                                }
                                return a(n, e), n.prototype.computeWorldVertices = function (t, e, n, i, a, r) {
                                    n = a + (n >> 1) * r;
                                    var s = t.bone.skeleton,
                                        o = t.deform,
                                        l = this.vertices,
                                        c = this.bones;
                                    if (null != c) {
                                        for (var u = 0, h = 0, d = 0; d < e; d += 2) u += (v = c[u]) + 1, h += v;
                                        var f = s.bones;
                                        if (0 == o.length)
                                            for (b = a, w = 3 * h; b < n; b += r) {
                                                var p = 0,
                                                    g = 0,
                                                    v = c[u++];
                                                for (v += u; u < v; u++, w += 3) {
                                                    A = f[c[u]], R = l[w], P = l[w + 1];
                                                    var m = l[w + 2];
                                                    p += (R * A.a + P * A.b + A.worldX) * m, g += (R * A.c + P * A.d + A.worldY) * m
                                                }
                                                i[b] = p, i[b + 1] = g
                                            } else
                                                for (var E = o, y = (b = a, w = 3 * h, h << 1); b < n; b += r) {
                                                    for (p = 0, g = 0, v = c[u++], v += u; u < v; u++, w += 3, y += 2) A = f[c[u]], R = l[w] + E[y], P = l[w + 1] + E[y + 1], m = l[w + 2], p += (R * A.a + P * A.b + A.worldX) * m, g += (R * A.c + P * A.d + A.worldY) * m;
                                                    i[b] = p, i[b + 1] = g
                                                }
                                    } else {
                                        o.length > 0 && (l = o);
                                        for (var A, T = (A = t.bone).worldX, S = A.worldY, M = A.a, w = A.b, x = A.c, C = A.d, I = e, b = a; b < n; I += 2, b += r) {
                                            var R = l[I],
                                                P = l[I + 1];
                                            i[b] = R * M + P * w + T, i[b + 1] = R * x + P * C + S
                                        }
                                    }
                                }, n.prototype.copyTo = function (e) {
                                    null != this.bones ? (e.bones = new Array(this.bones.length), t.Utils.arrayCopy(this.bones, 0, e.bones, 0, this.bones.length)) : e.bones = null, null != this.vertices ? (e.vertices = t.Utils.newFloatArray(this.vertices.length), t.Utils.arrayCopy(this.vertices, 0, e.vertices, 0, this.vertices.length)) : e.vertices = null, e.worldVerticesLength = this.worldVerticesLength, e.deformAttachment = this.deformAttachment
                                }, n.nextID = 0, n
                            }(e);
                            t.VertexAttachment = n
                        }(i || (i = {})),
                        function (t) {
                            var e;
                            (e = t.AttachmentType || (t.AttachmentType = {}))[e.Region = 0] = "Region", e[e.BoundingBox = 1] = "BoundingBox", e[e.Mesh = 2] = "Mesh", e[e.LinkedMesh = 3] = "LinkedMesh", e[e.Path = 4] = "Path", e[e.Point = 5] = "Point", e[e.Clipping = 6] = "Clipping"
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.color = new t.Color(1, 1, 1, 1), i
                                }
                                return a(n, e), n.prototype.copy = function () {
                                    var t = new n(this.name);
                                    return this.copyTo(t), t.color.setFromColor(this.color), t
                                }, n
                            }(t.VertexAttachment);
                            t.BoundingBoxAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.color = new t.Color(.2275, .2275, .8078, 1), i
                                }
                                return a(n, e), n.prototype.copy = function () {
                                    var t = new n(this.name);
                                    return this.copyTo(t), t.endSlot = this.endSlot, t.color.setFromColor(this.color), t
                                }, n
                            }(t.VertexAttachment);
                            t.ClippingAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.color = new t.Color(1, 1, 1, 1), i.tempColor = new t.Color(0, 0, 0, 0), i
                                }
                                return a(n, e), n.prototype.updateUVs = function () {
                                    var e = this.regionUVs;
                                    null != this.uvs && this.uvs.length == e.length || (this.uvs = t.Utils.newFloatArray(e.length));
                                    var n = this.uvs,
                                        i = this.uvs.length,
                                        a = this.region.u,
                                        r = this.region.v,
                                        s = 0,
                                        o = 0;
                                    if (this.region instanceof t.TextureAtlasRegion) {
                                        var l = this.region,
                                            c = l.texture.getImage().width,
                                            u = l.texture.getImage().height;
                                        switch (l.degrees) {
                                            case 90:
                                                a -= (l.originalHeight - l.offsetY - l.height) / c, r -= (l.originalWidth - l.offsetX - l.width) / u, s = l.originalHeight / c, o = l.originalWidth / u;
                                                for (var h = 0; h < i; h += 2) n[h] = a + e[h + 1] * s, n[h + 1] = r + (1 - e[h]) * o;
                                                return;
                                            case 180:
                                                for (a -= (l.originalWidth - l.offsetX - l.width) / c, r -= l.offsetY / u, s = l.originalWidth / c, o = l.originalHeight / u, h = 0; h < i; h += 2) n[h] = a + (1 - e[h]) * s, n[h + 1] = r + (1 - e[h + 1]) * o;
                                                return;
                                            case 270:
                                                for (a -= l.offsetY / c, r -= l.offsetX / u, s = l.originalHeight / c, o = l.originalWidth / u, h = 0; h < i; h += 2) n[h] = a + (1 - e[h + 1]) * s, n[h + 1] = r + e[h] * o;
                                                return
                                        }
                                        a -= l.offsetX / c, r -= (l.originalHeight - l.offsetY - l.height) / u, s = l.originalWidth / c, o = l.originalHeight / u
                                    } else null == this.region ? (a = r = 0, s = o = 1) : (s = this.region.u2 - a, o = this.region.v2 - r);
                                    for (h = 0; h < i; h += 2) n[h] = a + e[h] * s, n[h + 1] = r + e[h + 1] * o
                                }, n.prototype.getParentMesh = function () {
                                    return this.parentMesh
                                }, n.prototype.setParentMesh = function (t) {
                                    this.parentMesh = t, null != t && (this.bones = t.bones, this.vertices = t.vertices, this.worldVerticesLength = t.worldVerticesLength, this.regionUVs = t.regionUVs, this.triangles = t.triangles, this.hullLength = t.hullLength, this.worldVerticesLength = t.worldVerticesLength)
                                }, n.prototype.copy = function () {
                                    if (null != this.parentMesh) return this.newLinkedMesh();
                                    var e = new n(this.name);
                                    return e.region = this.region, e.path = this.path, e.color.setFromColor(this.color), this.copyTo(e), e.regionUVs = new Array(this.regionUVs.length), t.Utils.arrayCopy(this.regionUVs, 0, e.regionUVs, 0, this.regionUVs.length), e.uvs = new Array(this.uvs.length), t.Utils.arrayCopy(this.uvs, 0, e.uvs, 0, this.uvs.length), e.triangles = new Array(this.triangles.length), t.Utils.arrayCopy(this.triangles, 0, e.triangles, 0, this.triangles.length), e.hullLength = this.hullLength, null != this.edges && (e.edges = new Array(this.edges.length), t.Utils.arrayCopy(this.edges, 0, e.edges, 0, this.edges.length)), e.width = this.width, e.height = this.height, e
                                }, n.prototype.newLinkedMesh = function () {
                                    var t = new n(this.name);
                                    return t.region = this.region, t.path = this.path, t.color.setFromColor(this.color), t.deformAttachment = this.deformAttachment, t.setParentMesh(null != this.parentMesh ? this.parentMesh : this), t.updateUVs(), t
                                }, n
                            }(t.VertexAttachment);
                            t.MeshAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.closed = !1, i.constantSpeed = !1, i.color = new t.Color(1, 1, 1, 1), i
                                }
                                return a(n, e), n.prototype.copy = function () {
                                    var e = new n(this.name);
                                    return this.copyTo(e), e.lengths = new Array(this.lengths.length), t.Utils.arrayCopy(this.lengths, 0, e.lengths, 0, this.lengths.length), e.closed = closed, e.constantSpeed = this.constantSpeed, e.color.setFromColor(this.color), e
                                }, n
                            }(t.VertexAttachment);
                            t.PathAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.color = new t.Color(.38, .94, 0, 1), i
                                }
                                return a(n, e), n.prototype.computeWorldPosition = function (t, e) {
                                    return e.x = this.x * t.a + this.y * t.b + t.worldX, e.y = this.x * t.c + this.y * t.d + t.worldY, e
                                }, n.prototype.computeWorldRotation = function (e) {
                                    var n = t.MathUtils.cosDeg(this.rotation),
                                        i = t.MathUtils.sinDeg(this.rotation),
                                        a = n * e.a + i * e.b,
                                        r = n * e.c + i * e.d;
                                    return Math.atan2(r, a) * t.MathUtils.radDeg
                                }, n.prototype.copy = function () {
                                    var t = new n(this.name);
                                    return t.x = this.x, t.y = this.y, t.rotation = this.rotation, t.color.setFromColor(this.color), t
                                }, n
                            }(t.VertexAttachment);
                            t.PointAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function (e) {
                                function n(n) {
                                    var i = e.call(this, n) || this;
                                    return i.x = 0, i.y = 0, i.scaleX = 1, i.scaleY = 1, i.rotation = 0, i.width = 0, i.height = 0, i.color = new t.Color(1, 1, 1, 1), i.offset = t.Utils.newFloatArray(8), i.uvs = t.Utils.newFloatArray(8), i.tempColor = new t.Color(1, 1, 1, 1), i
                                }
                                return a(n, e), n.prototype.updateOffset = function () {
                                    var t = this.width / this.region.originalWidth * this.scaleX,
                                        e = this.height / this.region.originalHeight * this.scaleY,
                                        i = -this.width / 2 * this.scaleX + this.region.offsetX * t,
                                        a = -this.height / 2 * this.scaleY + this.region.offsetY * e,
                                        r = i + this.region.width * t,
                                        s = a + this.region.height * e,
                                        o = this.rotation * Math.PI / 180,
                                        l = Math.cos(o),
                                        c = Math.sin(o),
                                        u = i * l + this.x,
                                        h = i * c,
                                        d = a * l + this.y,
                                        f = a * c,
                                        p = r * l + this.x,
                                        g = r * c,
                                        v = s * l + this.y,
                                        m = s * c,
                                        E = this.offset;
                                    E[n.OX1] = u - f, E[n.OY1] = d + h, E[n.OX2] = u - m, E[n.OY2] = v + h, E[n.OX3] = p - m, E[n.OY3] = v + g, E[n.OX4] = p - f, E[n.OY4] = d + g
                                }, n.prototype.setRegion = function (t) {
                                    this.region = t;
                                    var e = this.uvs;
                                    t.rotate ? (e[2] = t.u, e[3] = t.v2, e[4] = t.u, e[5] = t.v, e[6] = t.u2, e[7] = t.v, e[0] = t.u2, e[1] = t.v2) : (e[0] = t.u, e[1] = t.v2, e[2] = t.u, e[3] = t.v, e[4] = t.u2, e[5] = t.v, e[6] = t.u2, e[7] = t.v2)
                                }, n.prototype.computeWorldVertices = function (t, e, i, a) {
                                    var r = this.offset,
                                        s = t.worldX,
                                        o = t.worldY,
                                        l = t.a,
                                        c = t.b,
                                        u = t.c,
                                        h = t.d,
                                        d = 0,
                                        f = 0;
                                    d = r[n.OX1], f = r[n.OY1], e[i] = d * l + f * c + s, e[i + 1] = d * u + f * h + o, i += a, d = r[n.OX2], f = r[n.OY2], e[i] = d * l + f * c + s, e[i + 1] = d * u + f * h + o, i += a, d = r[n.OX3], f = r[n.OY3], e[i] = d * l + f * c + s, e[i + 1] = d * u + f * h + o, i += a, d = r[n.OX4], f = r[n.OY4], e[i] = d * l + f * c + s, e[i + 1] = d * u + f * h + o
                                }, n.prototype.copy = function () {
                                    var e = new n(this.name);
                                    return e.region = this.region, e.rendererObject = this.rendererObject, e.path = this.path, e.x = this.x, e.y = this.y, e.scaleX = this.scaleX, e.scaleY = this.scaleY, e.rotation = this.rotation, e.width = this.width, e.height = this.height, t.Utils.arrayCopy(this.uvs, 0, e.uvs, 0, 8), t.Utils.arrayCopy(this.offset, 0, e.offset, 0, 8), e.color.setFromColor(this.color), e
                                }, n.OX1 = 0, n.OY1 = 1, n.OX2 = 2, n.OY2 = 3, n.OX3 = 4, n.OY3 = 5, n.OX4 = 6, n.OY4 = 7, n.X1 = 0, n.Y1 = 1, n.C1R = 2, n.C1G = 3, n.C1B = 4, n.C1A = 5, n.U1 = 6, n.V1 = 7, n.X2 = 8, n.Y2 = 9, n.C2R = 10, n.C2G = 11, n.C2B = 12, n.C2A = 13, n.U2 = 14, n.V2 = 15, n.X3 = 16, n.Y3 = 17, n.C3R = 18, n.C3G = 19, n.C3B = 20, n.C3A = 21, n.U3 = 22, n.V3 = 23, n.X4 = 24, n.Y4 = 25, n.C4R = 26, n.C4G = 27, n.C4B = 28, n.C4A = 29, n.U4 = 30, n.V4 = 31, n
                            }(t.Attachment);
                            t.RegionAttachment = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function () {
                                function e(t, e) {
                                    this.jitterX = 0, this.jitterY = 0, this.jitterX = t, this.jitterY = e
                                }
                                return e.prototype.begin = function (t) {}, e.prototype.transform = function (e, n, i, a) {
                                    e.x += t.MathUtils.randomTriangular(-this.jitterX, this.jitterY), e.y += t.MathUtils.randomTriangular(-this.jitterX, this.jitterY)
                                }, e.prototype.end = function () {}, e
                            }();
                            t.JitterEffect = e
                        }(i || (i = {})),
                        function (t) {
                            var e = function () {
                                function e(t) {
                                    this.centerX = 0, this.centerY = 0, this.radius = 0, this.angle = 0, this.worldX = 0, this.worldY = 0, this.radius = t
                                }
                                return e.prototype.begin = function (t) {
                                    this.worldX = t.x + this.centerX, this.worldY = t.y + this.centerY
                                }, e.prototype.transform = function (n, i, a, r) {
                                    var s = this.angle * t.MathUtils.degreesToRadians,
                                        o = n.x - this.worldX,
                                        l = n.y - this.worldY,
                                        c = Math.sqrt(o * o + l * l);
                                    if (c < this.radius) {
                                        var u = e.interpolation.apply(0, s, (this.radius - c) / this.radius),
                                            h = Math.cos(u),
                                            d = Math.sin(u);
                                        n.x = h * o - d * l + this.worldX, n.y = d * o + h * l + this.worldY
                                    }
                                }, e.prototype.end = function () {}, e.interpolation = new t.PowOut(2), e
                            }();
                            t.SwirlEffect = e
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.canvas || (t.canvas = {}), n = function (e) {
                                function n(n) {
                                    return void 0 === n && (n = ""), e.call(this, (function (e) {
                                        return new t.canvas.CanvasTexture(e)
                                    }), n) || this
                                }
                                return a(n, e), n
                            }(t.AssetManager), e.AssetManager = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.canvas || (t.canvas = {}), n = function (t) {
                                function e(e) {
                                    return t.call(this, e) || this
                                }
                                return a(e, t), e.prototype.setFilters = function (t, e) {}, e.prototype.setWraps = function (t, e) {}, e.prototype.dispose = function () {}, e
                            }(t.Texture), e.CanvasTexture = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.canvas || (t.canvas = {}), n = function () {
                                function e(e) {
                                    this.triangleRendering = !1, this.debugRendering = !1, this.vertices = t.Utils.newFloatArray(8192), this.tempColor = new t.Color, this.ctx = e
                                }
                                return e.prototype.draw = function (t) {
                                    this.triangleRendering ? this.drawTriangles(t) : this.drawImages(t)
                                }, e.prototype.drawImages = function (e) {
                                    var n = this.ctx,
                                        i = e.drawOrder;
                                    this.debugRendering && (n.strokeStyle = "green"), n.save();
                                    for (var a = 0, r = i.length; a < r; a++) {
                                        var s = i[a];
                                        if (s.bone.active) {
                                            var o = s.getAttachment(),
                                                l = null,
                                                c = null,
                                                u = null;
                                            if (o instanceof t.RegionAttachment) {
                                                u = (c = (l = o).region).texture.getImage();
                                                var h = s.bone.skeleton.color,
                                                    d = s.color,
                                                    f = l.color,
                                                    p = h.a * d.a * f.a,
                                                    g = this.tempColor;
                                                g.set(h.r * d.r * f.r, h.g * d.g * f.g, h.b * d.b * f.b, p);
                                                var v = o,
                                                    m = s.bone,
                                                    E = c.width,
                                                    y = c.height;
                                                n.save(), n.transform(m.a, m.c, m.b, m.d, m.worldX, m.worldY), n.translate(o.offset[0], o.offset[1]), n.rotate(o.rotation * Math.PI / 180);
                                                var A = v.width / E;
                                                if (n.scale(A * o.scaleX, A * o.scaleY), n.translate(E / 2, y / 2), o.region.rotate) {
                                                    var T = E;
                                                    E = y, y = T, n.rotate(-Math.PI / 2)
                                                }
                                                n.scale(1, -1), n.translate(-E / 2, -y / 2), 1 == g.r && 1 == g.g && 1 == g.b && 1 == g.a || (n.globalAlpha = g.a), n.drawImage(u, c.x, c.y, E, y, 0, 0, E, y), this.debugRendering && n.strokeRect(0, 0, E, y), n.restore()
                                            }
                                        }
                                    }
                                    n.restore()
                                }, e.prototype.drawTriangles = function (n) {
                                    for (var i = null, a = this.vertices, r = null, s = n.drawOrder, o = 0, l = s.length; o < l; o++) {
                                        var c = s[o],
                                            u = c.getAttachment(),
                                            h = null;
                                        if (u instanceof t.RegionAttachment) {
                                            var d = u;
                                            a = this.computeRegionVertices(c, d, !1), r = e.QUAD_TRIANGLES, h = d.region.texture.getImage()
                                        } else {
                                            if (!(u instanceof t.MeshAttachment)) continue;
                                            var f = u;
                                            a = this.computeMeshVertices(c, f, !1), r = f.triangles, h = f.region.renderObject.texture.getImage()
                                        }
                                        if (null != h) {
                                            var p = c.data.blendMode;
                                            p != i && (i = p);
                                            var g = c.bone.skeleton.color,
                                                v = c.color,
                                                m = u.color,
                                                E = g.a * v.a * m.a,
                                                y = this.tempColor;
                                            y.set(g.r * v.r * m.r, g.g * v.g * m.g, g.b * v.b * m.b, E);
                                            var A = this.ctx;
                                            1 == y.r && 1 == y.g && 1 == y.b && 1 == y.a || (A.globalAlpha = y.a);
                                            for (var T = 0; T < r.length; T += 3) {
                                                var S = 8 * r[T],
                                                    M = 8 * r[T + 1],
                                                    w = 8 * r[T + 2],
                                                    x = a[S],
                                                    C = a[S + 1],
                                                    I = a[S + 6],
                                                    b = a[S + 7],
                                                    R = a[M],
                                                    P = a[M + 1],
                                                    _ = a[M + 6],
                                                    k = a[M + 7],
                                                    L = a[w],
                                                    D = a[w + 1],
                                                    O = a[w + 6],
                                                    N = a[w + 7];
                                                this.drawTriangle(h, x, C, I, b, R, P, _, k, L, D, O, N), this.debugRendering && (A.strokeStyle = "green", A.beginPath(), A.moveTo(x, C), A.lineTo(R, P), A.lineTo(L, D), A.lineTo(x, C), A.stroke())
                                            }
                                        }
                                    }
                                    this.ctx.globalAlpha = 1
                                }, e.prototype.drawTriangle = function (t, e, n, i, a, r, s, o, l, c, u, h, d) {
                                    var f = this.ctx;
                                    i *= t.width, a *= t.height, o *= t.width, l *= t.height, h *= t.width, d *= t.height, f.beginPath(), f.moveTo(e, n), f.lineTo(r, s), f.lineTo(c, u), f.closePath();
                                    var p = 1 / ((o -= i) * (d -= a) - (h -= i) * (l -= a)),
                                        g = (d * (r -= e) - l * (c -= e)) * p,
                                        v = (d * (s -= n) - l * (u -= n)) * p,
                                        m = (o * c - h * r) * p,
                                        E = (o * u - h * s) * p,
                                        y = e - g * i - m * a,
                                        A = n - v * i - E * a;
                                    f.save(), f.transform(g, v, m, E, y, A), f.clip(), f.drawImage(t, 0, 0), f.restore()
                                }, e.prototype.computeRegionVertices = function (n, i, a) {
                                    var r = n.bone.skeleton.color,
                                        s = n.color,
                                        o = i.color,
                                        l = r.a * s.a * o.a,
                                        c = a ? l : 1,
                                        u = this.tempColor;
                                    u.set(r.r * s.r * o.r * c, r.g * s.g * o.g * c, r.b * s.b * o.b * c, l), i.computeWorldVertices(n.bone, this.vertices, 0, e.VERTEX_SIZE);
                                    var h = this.vertices,
                                        d = i.uvs;
                                    return h[t.RegionAttachment.C1R] = u.r, h[t.RegionAttachment.C1G] = u.g, h[t.RegionAttachment.C1B] = u.b, h[t.RegionAttachment.C1A] = u.a, h[t.RegionAttachment.U1] = d[0], h[t.RegionAttachment.V1] = d[1], h[t.RegionAttachment.C2R] = u.r, h[t.RegionAttachment.C2G] = u.g, h[t.RegionAttachment.C2B] = u.b, h[t.RegionAttachment.C2A] = u.a, h[t.RegionAttachment.U2] = d[2], h[t.RegionAttachment.V2] = d[3], h[t.RegionAttachment.C3R] = u.r, h[t.RegionAttachment.C3G] = u.g, h[t.RegionAttachment.C3B] = u.b, h[t.RegionAttachment.C3A] = u.a, h[t.RegionAttachment.U3] = d[4], h[t.RegionAttachment.V3] = d[5], h[t.RegionAttachment.C4R] = u.r, h[t.RegionAttachment.C4G] = u.g, h[t.RegionAttachment.C4B] = u.b, h[t.RegionAttachment.C4A] = u.a, h[t.RegionAttachment.U4] = d[6], h[t.RegionAttachment.V4] = d[7], h
                                }, e.prototype.computeMeshVertices = function (n, i, a) {
                                    var r = n.bone.skeleton.color,
                                        s = n.color,
                                        o = i.color,
                                        l = r.a * s.a * o.a,
                                        c = a ? l : 1,
                                        u = this.tempColor;
                                    u.set(r.r * s.r * o.r * c, r.g * s.g * o.g * c, r.b * s.b * o.b * c, l);
                                    var h = i.worldVerticesLength / 2;
                                    this.vertices.length < i.worldVerticesLength && (this.vertices = t.Utils.newFloatArray(i.worldVerticesLength));
                                    var d = this.vertices;
                                    i.computeWorldVertices(n, 0, i.worldVerticesLength, d, 0, e.VERTEX_SIZE);
                                    for (var f = i.uvs, p = 0, g = h, v = 0, m = 2; p < g; p++) d[m++] = u.r, d[m++] = u.g, d[m++] = u.b, d[m++] = u.a, d[m++] = f[v++], d[m++] = f[v++], m += 2;
                                    return d
                                }, e.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0], e.VERTEX_SIZE = 8, e
                            }(), e.SkeletonRenderer = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function (e) {
                                function n(n, i) {
                                    return void 0 === i && (i = ""), e.call(this, (function (e) {
                                        return new t.webgl.GLTexture(n, e)
                                    }), i) || this
                                }
                                return a(n, e), n
                            }(t.AssetManager), e.AssetManager = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function () {
                                function t(t, n) {
                                    this.position = new e.Vector3(0, 0, 0), this.direction = new e.Vector3(0, 0, -1), this.up = new e.Vector3(0, 1, 0), this.near = 0, this.far = 100, this.zoom = 1, this.viewportWidth = 0, this.viewportHeight = 0, this.projectionView = new e.Matrix4, this.inverseProjectionView = new e.Matrix4, this.projection = new e.Matrix4, this.view = new e.Matrix4, this.tmp = new e.Vector3, this.viewportWidth = t, this.viewportHeight = n, this.update()
                                }
                                return t.prototype.update = function () {
                                    var t = this.projection,
                                        e = this.view,
                                        n = this.projectionView,
                                        i = this.inverseProjectionView,
                                        a = this.zoom,
                                        r = this.viewportWidth,
                                        s = this.viewportHeight;
                                    t.ortho(a * (-r / 2), a * (r / 2), a * (-s / 2), a * (s / 2), this.near, this.far), e.lookAt(this.position, this.direction, this.up), n.set(Nr()(t)), n.multiply(e), i.set(Nr()(n)).invert()
                                }, t.prototype.screenToWorld = function (t, e, n) {
                                    var i = t.x,
                                        a = n - t.y - 1,
                                        r = this.tmp;
                                    return r.x = 2 * i / e - 1, r.y = 2 * a / n - 1, r.z = 2 * t.z - 1, r.project(this.inverseProjectionView), t.set(r.x, r.y, r.z), t
                                }, t.prototype.setViewport = function (t, e) {
                                    this.viewportWidth = t, this.viewportHeight = e
                                }, t
                            }(), e.OrthoCamera = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function (n) {
                                function i(t, i, a) {
                                    void 0 === a && (a = !1);
                                    var r = n.call(this, i) || this;
                                    return r.texture = null, r.boundUnit = 0, r.useMipMaps = !1, r.context = t instanceof e.ManagedWebGLRenderingContext ? t : new e.ManagedWebGLRenderingContext(t), r.useMipMaps = a, r.restore(), r.context.addRestorable(r), r
                                }
                                return a(i, n), i.prototype.setFilters = function (t, e) {
                                    var n = this.context.gl;
                                    this.bind(), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MIN_FILTER, t), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_MAG_FILTER, i.validateMagFilter(e))
                                }, i.validateMagFilter = function (e) {
                                    switch (e) {
                                        case t.TextureFilter.MipMap:
                                        case t.TextureFilter.MipMapLinearLinear:
                                        case t.TextureFilter.MipMapLinearNearest:
                                        case t.TextureFilter.MipMapNearestLinear:
                                        case t.TextureFilter.MipMapNearestNearest:
                                            return t.TextureFilter.Linear;
                                        default:
                                            return e
                                    }
                                }, i.prototype.setWraps = function (t, e) {
                                    var n = this.context.gl;
                                    this.bind(), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, t), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, e)
                                }, i.prototype.update = function (t) {
                                    var e = this.context.gl;
                                    this.texture || (this.texture = this.context.gl.createTexture()), this.bind(), i.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL && e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, this._image), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, e.LINEAR), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, t ? e.LINEAR_MIPMAP_LINEAR : e.LINEAR), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), t && e.generateMipmap(e.TEXTURE_2D)
                                }, i.prototype.restore = function () {
                                    this.texture = null, this.update(this.useMipMaps)
                                }, i.prototype.bind = function (t) {
                                    void 0 === t && (t = 0);
                                    var e = this.context.gl;
                                    this.boundUnit = t, e.activeTexture(e.TEXTURE0 + t), e.bindTexture(e.TEXTURE_2D, this.texture)
                                }, i.prototype.unbind = function () {
                                    var t = this.context.gl;
                                    t.activeTexture(t.TEXTURE0 + this.boundUnit), t.bindTexture(t.TEXTURE_2D, null)
                                }, i.prototype.dispose = function () {
                                    this.context.removeRestorable(this), this.context.gl.deleteTexture(this.texture)
                                }, i.DISABLE_UNPACK_PREMULTIPLIED_ALPHA_WEBGL = !1, i
                            }(t.Texture), e.GLTexture = n
                        }(i || (i = {})),
                        function (t) {
                            ! function (t) {
                                t.M00 = 0, t.M01 = 4, t.M02 = 8, t.M03 = 12, t.M10 = 1, t.M11 = 5, t.M12 = 9, t.M13 = 13, t.M20 = 2, t.M21 = 6, t.M22 = 10, t.M23 = 14, t.M30 = 3, t.M31 = 7, t.M32 = 11, t.M33 = 15;
                                var e = function () {
                                    function e() {
                                        this.temp = new Float32Array(16), this.values = new Float32Array(16);
                                        var e = Nr()(this);
                                        e[t.M00] = 1, e[t.M11] = 1, e[t.M22] = 1, e[t.M33] = 1
                                    }
                                    return e.prototype.set = function (t) {
                                        return Nr()(this).set(t), this
                                    }, e.prototype.transpose = function () {
                                        var e = this.temp,
                                            n = Nr()(this);
                                        return e[t.M00] = n[t.M00], e[t.M01] = n[t.M10], e[t.M02] = n[t.M20], e[t.M03] = n[t.M30], e[t.M10] = n[t.M01], e[t.M11] = n[t.M11], e[t.M12] = n[t.M21], e[t.M13] = n[t.M31], e[t.M20] = n[t.M02], e[t.M21] = n[t.M12], e[t.M22] = n[t.M22], e[t.M23] = n[t.M32], e[t.M30] = n[t.M03], e[t.M31] = n[t.M13], e[t.M32] = n[t.M23], e[t.M33] = n[t.M33], this.set(e)
                                    }, e.prototype.identity = function () {
                                        var e = Nr()(this);
                                        return e[t.M00] = 1, e[t.M01] = 0, e[t.M02] = 0, e[t.M03] = 0, e[t.M10] = 0, e[t.M11] = 1, e[t.M12] = 0, e[t.M13] = 0, e[t.M20] = 0, e[t.M21] = 0, e[t.M22] = 1, e[t.M23] = 0, e[t.M30] = 0, e[t.M31] = 0, e[t.M32] = 0, e[t.M33] = 1, this
                                    }, e.prototype.invert = function () {
                                        var e = Nr()(this),
                                            n = this.temp,
                                            i = e[t.M30] * e[t.M21] * e[t.M12] * e[t.M03] - e[t.M20] * e[t.M31] * e[t.M12] * e[t.M03] - e[t.M30] * e[t.M11] * e[t.M22] * e[t.M03] + e[t.M10] * e[t.M31] * e[t.M22] * e[t.M03] + e[t.M20] * e[t.M11] * e[t.M32] * e[t.M03] - e[t.M10] * e[t.M21] * e[t.M32] * e[t.M03] - e[t.M30] * e[t.M21] * e[t.M02] * e[t.M13] + e[t.M20] * e[t.M31] * e[t.M02] * e[t.M13] + e[t.M30] * e[t.M01] * e[t.M22] * e[t.M13] - e[t.M00] * e[t.M31] * e[t.M22] * e[t.M13] - e[t.M20] * e[t.M01] * e[t.M32] * e[t.M13] + e[t.M00] * e[t.M21] * e[t.M32] * e[t.M13] + e[t.M30] * e[t.M11] * e[t.M02] * e[t.M23] - e[t.M10] * e[t.M31] * e[t.M02] * e[t.M23] - e[t.M30] * e[t.M01] * e[t.M12] * e[t.M23] + e[t.M00] * e[t.M31] * e[t.M12] * e[t.M23] + e[t.M10] * e[t.M01] * e[t.M32] * e[t.M23] - e[t.M00] * e[t.M11] * e[t.M32] * e[t.M23] - e[t.M20] * e[t.M11] * e[t.M02] * e[t.M33] + e[t.M10] * e[t.M21] * e[t.M02] * e[t.M33] + e[t.M20] * e[t.M01] * e[t.M12] * e[t.M33] - e[t.M00] * e[t.M21] * e[t.M12] * e[t.M33] - e[t.M10] * e[t.M01] * e[t.M22] * e[t.M33] + e[t.M00] * e[t.M11] * e[t.M22] * e[t.M33];
                                        if (0 == i) throw new Error("non-invertible matrix");
                                        var a = 1 / i;
                                        return n[t.M00] = e[t.M12] * e[t.M23] * e[t.M31] - e[t.M13] * e[t.M22] * e[t.M31] + e[t.M13] * e[t.M21] * e[t.M32] - e[t.M11] * e[t.M23] * e[t.M32] - e[t.M12] * e[t.M21] * e[t.M33] + e[t.M11] * e[t.M22] * e[t.M33], n[t.M01] = e[t.M03] * e[t.M22] * e[t.M31] - e[t.M02] * e[t.M23] * e[t.M31] - e[t.M03] * e[t.M21] * e[t.M32] + e[t.M01] * e[t.M23] * e[t.M32] + e[t.M02] * e[t.M21] * e[t.M33] - e[t.M01] * e[t.M22] * e[t.M33], n[t.M02] = e[t.M02] * e[t.M13] * e[t.M31] - e[t.M03] * e[t.M12] * e[t.M31] + e[t.M03] * e[t.M11] * e[t.M32] - e[t.M01] * e[t.M13] * e[t.M32] - e[t.M02] * e[t.M11] * e[t.M33] + e[t.M01] * e[t.M12] * e[t.M33], n[t.M03] = e[t.M03] * e[t.M12] * e[t.M21] - e[t.M02] * e[t.M13] * e[t.M21] - e[t.M03] * e[t.M11] * e[t.M22] + e[t.M01] * e[t.M13] * e[t.M22] + e[t.M02] * e[t.M11] * e[t.M23] - e[t.M01] * e[t.M12] * e[t.M23], n[t.M10] = e[t.M13] * e[t.M22] * e[t.M30] - e[t.M12] * e[t.M23] * e[t.M30] - e[t.M13] * e[t.M20] * e[t.M32] + e[t.M10] * e[t.M23] * e[t.M32] + e[t.M12] * e[t.M20] * e[t.M33] - e[t.M10] * e[t.M22] * e[t.M33], n[t.M11] = e[t.M02] * e[t.M23] * e[t.M30] - e[t.M03] * e[t.M22] * e[t.M30] + e[t.M03] * e[t.M20] * e[t.M32] - e[t.M00] * e[t.M23] * e[t.M32] - e[t.M02] * e[t.M20] * e[t.M33] + e[t.M00] * e[t.M22] * e[t.M33], n[t.M12] = e[t.M03] * e[t.M12] * e[t.M30] - e[t.M02] * e[t.M13] * e[t.M30] - e[t.M03] * e[t.M10] * e[t.M32] + e[t.M00] * e[t.M13] * e[t.M32] + e[t.M02] * e[t.M10] * e[t.M33] - e[t.M00] * e[t.M12] * e[t.M33], n[t.M13] = e[t.M02] * e[t.M13] * e[t.M20] - e[t.M03] * e[t.M12] * e[t.M20] + e[t.M03] * e[t.M10] * e[t.M22] - e[t.M00] * e[t.M13] * e[t.M22] - e[t.M02] * e[t.M10] * e[t.M23] + e[t.M00] * e[t.M12] * e[t.M23], n[t.M20] = e[t.M11] * e[t.M23] * e[t.M30] - e[t.M13] * e[t.M21] * e[t.M30] + e[t.M13] * e[t.M20] * e[t.M31] - e[t.M10] * e[t.M23] * e[t.M31] - e[t.M11] * e[t.M20] * e[t.M33] + e[t.M10] * e[t.M21] * e[t.M33], n[t.M21] = e[t.M03] * e[t.M21] * e[t.M30] - e[t.M01] * e[t.M23] * e[t.M30] - e[t.M03] * e[t.M20] * e[t.M31] + e[t.M00] * e[t.M23] * e[t.M31] + e[t.M01] * e[t.M20] * e[t.M33] - e[t.M00] * e[t.M21] * e[t.M33], n[t.M22] = e[t.M01] * e[t.M13] * e[t.M30] - e[t.M03] * e[t.M11] * e[t.M30] + e[t.M03] * e[t.M10] * e[t.M31] - e[t.M00] * e[t.M13] * e[t.M31] - e[t.M01] * e[t.M10] * e[t.M33] + e[t.M00] * e[t.M11] * e[t.M33], n[t.M23] = e[t.M03] * e[t.M11] * e[t.M20] - e[t.M01] * e[t.M13] * e[t.M20] - e[t.M03] * e[t.M10] * e[t.M21] + e[t.M00] * e[t.M13] * e[t.M21] + e[t.M01] * e[t.M10] * e[t.M23] - e[t.M00] * e[t.M11] * e[t.M23], n[t.M30] = e[t.M12] * e[t.M21] * e[t.M30] - e[t.M11] * e[t.M22] * e[t.M30] - e[t.M12] * e[t.M20] * e[t.M31] + e[t.M10] * e[t.M22] * e[t.M31] + e[t.M11] * e[t.M20] * e[t.M32] - e[t.M10] * e[t.M21] * e[t.M32], n[t.M31] = e[t.M01] * e[t.M22] * e[t.M30] - e[t.M02] * e[t.M21] * e[t.M30] + e[t.M02] * e[t.M20] * e[t.M31] - e[t.M00] * e[t.M22] * e[t.M31] - e[t.M01] * e[t.M20] * e[t.M32] + e[t.M00] * e[t.M21] * e[t.M32], n[t.M32] = e[t.M02] * e[t.M11] * e[t.M30] - e[t.M01] * e[t.M12] * e[t.M30] - e[t.M02] * e[t.M10] * e[t.M31] + e[t.M00] * e[t.M12] * e[t.M31] + e[t.M01] * e[t.M10] * e[t.M32] - e[t.M00] * e[t.M11] * e[t.M32], n[t.M33] = e[t.M01] * e[t.M12] * e[t.M20] - e[t.M02] * e[t.M11] * e[t.M20] + e[t.M02] * e[t.M10] * e[t.M21] - e[t.M00] * e[t.M12] * e[t.M21] - e[t.M01] * e[t.M10] * e[t.M22] + e[t.M00] * e[t.M11] * e[t.M22], e[t.M00] = n[t.M00] * a, e[t.M01] = n[t.M01] * a, e[t.M02] = n[t.M02] * a, e[t.M03] = n[t.M03] * a, e[t.M10] = n[t.M10] * a, e[t.M11] = n[t.M11] * a, e[t.M12] = n[t.M12] * a, e[t.M13] = n[t.M13] * a, e[t.M20] = n[t.M20] * a, e[t.M21] = n[t.M21] * a, e[t.M22] = n[t.M22] * a, e[t.M23] = n[t.M23] * a, e[t.M30] = n[t.M30] * a, e[t.M31] = n[t.M31] * a, e[t.M32] = n[t.M32] * a, e[t.M33] = n[t.M33] * a, this
                                    }, e.prototype.determinant = function () {
                                        var e = Nr()(this);
                                        return e[t.M30] * e[t.M21] * e[t.M12] * e[t.M03] - e[t.M20] * e[t.M31] * e[t.M12] * e[t.M03] - e[t.M30] * e[t.M11] * e[t.M22] * e[t.M03] + e[t.M10] * e[t.M31] * e[t.M22] * e[t.M03] + e[t.M20] * e[t.M11] * e[t.M32] * e[t.M03] - e[t.M10] * e[t.M21] * e[t.M32] * e[t.M03] - e[t.M30] * e[t.M21] * e[t.M02] * e[t.M13] + e[t.M20] * e[t.M31] * e[t.M02] * e[t.M13] + e[t.M30] * e[t.M01] * e[t.M22] * e[t.M13] - e[t.M00] * e[t.M31] * e[t.M22] * e[t.M13] - e[t.M20] * e[t.M01] * e[t.M32] * e[t.M13] + e[t.M00] * e[t.M21] * e[t.M32] * e[t.M13] + e[t.M30] * e[t.M11] * e[t.M02] * e[t.M23] - e[t.M10] * e[t.M31] * e[t.M02] * e[t.M23] - e[t.M30] * e[t.M01] * e[t.M12] * e[t.M23] + e[t.M00] * e[t.M31] * e[t.M12] * e[t.M23] + e[t.M10] * e[t.M01] * e[t.M32] * e[t.M23] - e[t.M00] * e[t.M11] * e[t.M32] * e[t.M23] - e[t.M20] * e[t.M11] * e[t.M02] * e[t.M33] + e[t.M10] * e[t.M21] * e[t.M02] * e[t.M33] + e[t.M20] * e[t.M01] * e[t.M12] * e[t.M33] - e[t.M00] * e[t.M21] * e[t.M12] * e[t.M33] - e[t.M10] * e[t.M01] * e[t.M22] * e[t.M33] + e[t.M00] * e[t.M11] * e[t.M22] * e[t.M33]
                                    }, e.prototype.translate = function (e, n, i) {
                                        var a = Nr()(this);
                                        return a[t.M03] += e, a[t.M13] += n, a[t.M23] += i, this
                                    }, e.prototype.copy = function () {
                                        return (new e).set(Nr()(this))
                                    }, e.prototype.projection = function (e, n, i, a) {
                                        this.identity();
                                        var r = 1 / Math.tan(i * (Math.PI / 180) / 2),
                                            s = (n + e) / (e - n),
                                            o = 2 * n * e / (e - n),
                                            l = Nr()(this);
                                        return l[t.M00] = r / a, l[t.M10] = 0, l[t.M20] = 0, l[t.M30] = 0, l[t.M01] = 0, l[t.M11] = r, l[t.M21] = 0, l[t.M31] = 0, l[t.M02] = 0, l[t.M12] = 0, l[t.M22] = s, l[t.M32] = -1, l[t.M03] = 0, l[t.M13] = 0, l[t.M23] = o, l[t.M33] = 0, this
                                    }, e.prototype.ortho2d = function (t, e, n, i) {
                                        return this.ortho(t, t + n, e, e + i, 0, 1)
                                    }, e.prototype.ortho = function (e, n, i, a, r, s) {
                                        this.identity();
                                        var o = 2 / (n - e),
                                            l = 2 / (a - i),
                                            c = -2 / (s - r),
                                            u = -(n + e) / (n - e),
                                            h = -(a + i) / (a - i),
                                            d = -(s + r) / (s - r),
                                            f = Nr()(this);
                                        return f[t.M00] = o, f[t.M10] = 0, f[t.M20] = 0, f[t.M30] = 0, f[t.M01] = 0, f[t.M11] = l, f[t.M21] = 0, f[t.M31] = 0, f[t.M02] = 0, f[t.M12] = 0, f[t.M22] = c, f[t.M32] = 0, f[t.M03] = u, f[t.M13] = h, f[t.M23] = d, f[t.M33] = 1, this
                                    }, e.prototype.multiply = function (e) {
                                        var n = this.temp,
                                            i = Nr()(this),
                                            a = Nr()(e);
                                        return n[t.M00] = i[t.M00] * a[t.M00] + i[t.M01] * a[t.M10] + i[t.M02] * a[t.M20] + i[t.M03] * a[t.M30], n[t.M01] = i[t.M00] * a[t.M01] + i[t.M01] * a[t.M11] + i[t.M02] * a[t.M21] + i[t.M03] * a[t.M31], n[t.M02] = i[t.M00] * a[t.M02] + i[t.M01] * a[t.M12] + i[t.M02] * a[t.M22] + i[t.M03] * a[t.M32], n[t.M03] = i[t.M00] * a[t.M03] + i[t.M01] * a[t.M13] + i[t.M02] * a[t.M23] + i[t.M03] * a[t.M33], n[t.M10] = i[t.M10] * a[t.M00] + i[t.M11] * a[t.M10] + i[t.M12] * a[t.M20] + i[t.M13] * a[t.M30], n[t.M11] = i[t.M10] * a[t.M01] + i[t.M11] * a[t.M11] + i[t.M12] * a[t.M21] + i[t.M13] * a[t.M31], n[t.M12] = i[t.M10] * a[t.M02] + i[t.M11] * a[t.M12] + i[t.M12] * a[t.M22] + i[t.M13] * a[t.M32], n[t.M13] = i[t.M10] * a[t.M03] + i[t.M11] * a[t.M13] + i[t.M12] * a[t.M23] + i[t.M13] * a[t.M33], n[t.M20] = i[t.M20] * a[t.M00] + i[t.M21] * a[t.M10] + i[t.M22] * a[t.M20] + i[t.M23] * a[t.M30], n[t.M21] = i[t.M20] * a[t.M01] + i[t.M21] * a[t.M11] + i[t.M22] * a[t.M21] + i[t.M23] * a[t.M31], n[t.M22] = i[t.M20] * a[t.M02] + i[t.M21] * a[t.M12] + i[t.M22] * a[t.M22] + i[t.M23] * a[t.M32], n[t.M23] = i[t.M20] * a[t.M03] + i[t.M21] * a[t.M13] + i[t.M22] * a[t.M23] + i[t.M23] * a[t.M33], n[t.M30] = i[t.M30] * a[t.M00] + i[t.M31] * a[t.M10] + i[t.M32] * a[t.M20] + i[t.M33] * a[t.M30], n[t.M31] = i[t.M30] * a[t.M01] + i[t.M31] * a[t.M11] + i[t.M32] * a[t.M21] + i[t.M33] * a[t.M31], n[t.M32] = i[t.M30] * a[t.M02] + i[t.M31] * a[t.M12] + i[t.M32] * a[t.M22] + i[t.M33] * a[t.M32], n[t.M33] = i[t.M30] * a[t.M03] + i[t.M31] * a[t.M13] + i[t.M32] * a[t.M23] + i[t.M33] * a[t.M33], this.set(this.temp)
                                    }, e.prototype.multiplyLeft = function (e) {
                                        var n = this.temp,
                                            i = Nr()(this),
                                            a = Nr()(e);
                                        return n[t.M00] = a[t.M00] * i[t.M00] + a[t.M01] * i[t.M10] + a[t.M02] * i[t.M20] + a[t.M03] * i[t.M30], n[t.M01] = a[t.M00] * i[t.M01] + a[t.M01] * i[t.M11] + a[t.M02] * i[t.M21] + a[t.M03] * i[t.M31], n[t.M02] = a[t.M00] * i[t.M02] + a[t.M01] * i[t.M12] + a[t.M02] * i[t.M22] + a[t.M03] * i[t.M32], n[t.M03] = a[t.M00] * i[t.M03] + a[t.M01] * i[t.M13] + a[t.M02] * i[t.M23] + a[t.M03] * i[t.M33], n[t.M10] = a[t.M10] * i[t.M00] + a[t.M11] * i[t.M10] + a[t.M12] * i[t.M20] + a[t.M13] * i[t.M30], n[t.M11] = a[t.M10] * i[t.M01] + a[t.M11] * i[t.M11] + a[t.M12] * i[t.M21] + a[t.M13] * i[t.M31], n[t.M12] = a[t.M10] * i[t.M02] + a[t.M11] * i[t.M12] + a[t.M12] * i[t.M22] + a[t.M13] * i[t.M32], n[t.M13] = a[t.M10] * i[t.M03] + a[t.M11] * i[t.M13] + a[t.M12] * i[t.M23] + a[t.M13] * i[t.M33], n[t.M20] = a[t.M20] * i[t.M00] + a[t.M21] * i[t.M10] + a[t.M22] * i[t.M20] + a[t.M23] * i[t.M30], n[t.M21] = a[t.M20] * i[t.M01] + a[t.M21] * i[t.M11] + a[t.M22] * i[t.M21] + a[t.M23] * i[t.M31], n[t.M22] = a[t.M20] * i[t.M02] + a[t.M21] * i[t.M12] + a[t.M22] * i[t.M22] + a[t.M23] * i[t.M32], n[t.M23] = a[t.M20] * i[t.M03] + a[t.M21] * i[t.M13] + a[t.M22] * i[t.M23] + a[t.M23] * i[t.M33], n[t.M30] = a[t.M30] * i[t.M00] + a[t.M31] * i[t.M10] + a[t.M32] * i[t.M20] + a[t.M33] * i[t.M30], n[t.M31] = a[t.M30] * i[t.M01] + a[t.M31] * i[t.M11] + a[t.M32] * i[t.M21] + a[t.M33] * i[t.M31], n[t.M32] = a[t.M30] * i[t.M02] + a[t.M31] * i[t.M12] + a[t.M32] * i[t.M22] + a[t.M33] * i[t.M32], n[t.M33] = a[t.M30] * i[t.M03] + a[t.M31] * i[t.M13] + a[t.M32] * i[t.M23] + a[t.M33] * i[t.M33], this.set(this.temp)
                                    }, e.prototype.lookAt = function (n, i, a) {
                                        e.initTemps();
                                        var r = e.xAxis,
                                            s = e.yAxis,
                                            o = e.zAxis;
                                        o.setFrom(i).normalize(), r.setFrom(i).normalize(), r.cross(a).normalize(), s.setFrom(r).cross(o).normalize(), this.identity();
                                        var l = Nr()(this);
                                        return l[t.M00] = r.x, l[t.M01] = r.y, l[t.M02] = r.z, l[t.M10] = s.x, l[t.M11] = s.y, l[t.M12] = s.z, l[t.M20] = -o.x, l[t.M21] = -o.y, l[t.M22] = -o.z, e.tmpMatrix.identity(), Nr()(e.tmpMatrix)[t.M03] = -n.x, Nr()(e.tmpMatrix)[t.M13] = -n.y, Nr()(e.tmpMatrix)[t.M23] = -n.z, this.multiply(e.tmpMatrix), this
                                    }, e.initTemps = function () {
                                        null === e.xAxis && (e.xAxis = new t.Vector3), null === e.yAxis && (e.yAxis = new t.Vector3), null === e.zAxis && (e.zAxis = new t.Vector3)
                                    }, e.xAxis = null, e.yAxis = null, e.zAxis = null, e.tmpMatrix = new e, e
                                }();
                                t.Matrix4 = e
                            }(t.webgl || (t.webgl = {}))
                        }(i || (i = {})),
                        function (t) {
                            ! function (t) {
                                var e = function () {
                                    function e(e, n, i, a) {
                                        this.attributes = n, this.verticesLength = 0, this.dirtyVertices = !1, this.indicesLength = 0, this.dirtyIndices = !1, this.elementsPerVertex = 0, this.context = e instanceof t.ManagedWebGLRenderingContext ? e : new t.ManagedWebGLRenderingContext(e), this.elementsPerVertex = 0;
                                        for (var r = 0; r < n.length; r++) this.elementsPerVertex += n[r].numElements;
                                        this.vertices = new Float32Array(i * this.elementsPerVertex), this.indices = new Uint16Array(a), this.context.addRestorable(this)
                                    }
                                    return e.prototype.getAttributes = function () {
                                        return this.attributes
                                    }, e.prototype.maxVertices = function () {
                                        return this.vertices.length / this.elementsPerVertex
                                    }, e.prototype.numVertices = function () {
                                        return this.verticesLength / this.elementsPerVertex
                                    }, e.prototype.setVerticesLength = function (t) {
                                        this.dirtyVertices = !0, this.verticesLength = t
                                    }, e.prototype.getVertices = function () {
                                        return this.vertices
                                    }, e.prototype.maxIndices = function () {
                                        return this.indices.length
                                    }, e.prototype.numIndices = function () {
                                        return this.indicesLength
                                    }, e.prototype.setIndicesLength = function (t) {
                                        this.dirtyIndices = !0, this.indicesLength = t
                                    }, e.prototype.getIndices = function () {
                                        return this.indices
                                    }, e.prototype.getVertexSizeInFloats = function () {
                                        for (var t = 0, e = 0; e < this.attributes.length; e++) t += this.attributes[e].numElements;
                                        return t
                                    }, e.prototype.setVertices = function (t) {
                                        if (this.dirtyVertices = !0, t.length > this.vertices.length) throw Error("Mesh can't store more than " + this.maxVertices() + " vertices");
                                        this.vertices.set(t, 0), this.verticesLength = t.length
                                    }, e.prototype.setIndices = function (t) {
                                        if (this.dirtyIndices = !0, t.length > this.indices.length) throw Error("Mesh can't store more than " + this.maxIndices() + " indices");
                                        this.indices.set(t, 0), this.indicesLength = t.length
                                    }, e.prototype.draw = function (t, e) {
                                        this.drawWithOffset(t, e, 0, this.indicesLength > 0 ? this.indicesLength : this.verticesLength / this.elementsPerVertex)
                                    }, e.prototype.drawWithOffset = function (t, e, n, i) {
                                        var a = this.context.gl;
                                        (this.dirtyVertices || this.dirtyIndices) && this.update(), this.bind(t), this.indicesLength > 0 ? a.drawElements(e, i, a.UNSIGNED_SHORT, 2 * n) : a.drawArrays(e, n, i), this.unbind(t)
                                    }, e.prototype.bind = function (t) {
                                        var e = this.context.gl;
                                        e.bindBuffer(e.ARRAY_BUFFER, this.verticesBuffer);
                                        for (var n = 0, i = 0; i < this.attributes.length; i++) {
                                            var a = this.attributes[i],
                                                r = t.getAttributeLocation(a.name);
                                            e.enableVertexAttribArray(r), e.vertexAttribPointer(r, a.numElements, e.FLOAT, !1, 4 * this.elementsPerVertex, 4 * n), n += a.numElements
                                        }
                                        this.indicesLength > 0 && e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.indicesBuffer)
                                    }, e.prototype.unbind = function (t) {
                                        for (var e = this.context.gl, n = 0; n < this.attributes.length; n++) {
                                            var i = this.attributes[n],
                                                a = t.getAttributeLocation(i.name);
                                            e.disableVertexAttribArray(a)
                                        }
                                        e.bindBuffer(e.ARRAY_BUFFER, null), this.indicesLength > 0 && e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)
                                    }, e.prototype.update = function () {
                                        var t = this.context.gl;
                                        this.dirtyVertices && (this.verticesBuffer || (this.verticesBuffer = t.createBuffer()), t.bindBuffer(t.ARRAY_BUFFER, this.verticesBuffer), t.bufferData(t.ARRAY_BUFFER, this.vertices.subarray(0, this.verticesLength), t.DYNAMIC_DRAW), this.dirtyVertices = !1), this.dirtyIndices && (this.indicesBuffer || (this.indicesBuffer = t.createBuffer()), t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, this.indicesBuffer), t.bufferData(t.ELEMENT_ARRAY_BUFFER, this.indices.subarray(0, this.indicesLength), t.DYNAMIC_DRAW), this.dirtyIndices = !1)
                                    }, e.prototype.restore = function () {
                                        this.verticesBuffer = null, this.indicesBuffer = null, this.update()
                                    }, e.prototype.dispose = function () {
                                        this.context.removeRestorable(this);
                                        var t = this.context.gl;
                                        t.deleteBuffer(this.verticesBuffer), t.deleteBuffer(this.indicesBuffer)
                                    }, e
                                }();
                                t.Mesh = e;
                                var n = function (t, e, n) {
                                    this.name = t, this.type = e, this.numElements = n
                                };
                                t.VertexAttribute = n;
                                var i = function (e) {
                                    function n() {
                                        return e.call(this, t.Shader.POSITION, l.Float, 2) || this
                                    }
                                    return a(n, e), n
                                }(n);
                                t.Position2Attribute = i;
                                var r = function (e) {
                                    function n() {
                                        return e.call(this, t.Shader.POSITION, l.Float, 3) || this
                                    }
                                    return a(n, e), n
                                }(n);
                                t.Position3Attribute = r;
                                var s = function (e) {
                                    function n(n) {
                                        return void 0 === n && (n = 0), e.call(this, t.Shader.TEXCOORDS + (0 == n ? "" : n), l.Float, 2) || this
                                    }
                                    return a(n, e), n
                                }(n);
                                t.TexCoordAttribute = s;
                                var o = function (e) {
                                    function n() {
                                        return e.call(this, t.Shader.COLOR, l.Float, 4) || this
                                    }
                                    return a(n, e), n
                                }(n);
                                t.ColorAttribute = o;
                                var l, c = function (e) {
                                    function n() {
                                        return e.call(this, t.Shader.COLOR2, l.Float, 4) || this
                                    }
                                    return a(n, e), n
                                }(n);
                                t.Color2Attribute = c,
                                    function (t) {
                                        t[t.Float = 0] = "Float"
                                    }(l = t.VertexAttributeType || (t.VertexAttributeType = {}))
                            }(t.webgl || (t.webgl = {}))
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function () {
                                function t(t, n, i) {
                                    if (void 0 === n && (n = !0), void 0 === i && (i = 10920), this.isDrawing = !1, this.shader = null, this.lastTexture = null, this.verticesLength = 0, this.indicesLength = 0, i > 10920) throw new Error("Can't have more than 10920 triangles per batch: " + i);
                                    this.context = t instanceof e.ManagedWebGLRenderingContext ? t : new e.ManagedWebGLRenderingContext(t);
                                    var a = n ? [new e.Position2Attribute, new e.ColorAttribute, new e.TexCoordAttribute, new e.Color2Attribute] : [new e.Position2Attribute, new e.ColorAttribute, new e.TexCoordAttribute];
                                    this.mesh = new e.Mesh(t, a, i, 3 * i), this.srcBlend = this.context.gl.SRC_ALPHA, this.dstBlend = this.context.gl.ONE_MINUS_SRC_ALPHA
                                }
                                return t.prototype.begin = function (t) {
                                    var e = this.context.gl;
                                    if (this.isDrawing) throw new Error("PolygonBatch is already drawing. Call PolygonBatch.end() before calling PolygonBatch.begin()");
                                    this.drawCalls = 0, this.shader = t, this.lastTexture = null, this.isDrawing = !0, e.enable(e.BLEND), e.blendFunc(this.srcBlend, this.dstBlend)
                                }, t.prototype.setBlendMode = function (t, e) {
                                    var n = this.context.gl;
                                    this.srcBlend = t, this.dstBlend = e, this.isDrawing && (this.flush(), n.blendFunc(this.srcBlend, this.dstBlend))
                                }, t.prototype.draw = function (t, e, n) {
                                    t != this.lastTexture ? (this.flush(), this.lastTexture = t) : (this.verticesLength + e.length > this.mesh.getVertices().length || this.indicesLength + n.length > this.mesh.getIndices().length) && this.flush();
                                    var i = this.mesh.numVertices();
                                    this.mesh.getVertices().set(e, this.verticesLength), this.verticesLength += e.length, this.mesh.setVerticesLength(this.verticesLength);
                                    for (var a = this.mesh.getIndices(), r = this.indicesLength, s = 0; s < n.length; r++, s++) a[r] = n[s] + i;
                                    this.indicesLength += n.length, this.mesh.setIndicesLength(this.indicesLength)
                                }, t.prototype.flush = function () {
                                    var t = this.context.gl;
                                    0 != this.verticesLength && (this.lastTexture.bind(), this.mesh.draw(this.shader, t.TRIANGLES), this.verticesLength = 0, this.indicesLength = 0, this.mesh.setVerticesLength(0), this.mesh.setIndicesLength(0), this.drawCalls++)
                                }, t.prototype.end = function () {
                                    var t = this.context.gl;
                                    if (!this.isDrawing) throw new Error("PolygonBatch is not drawing. Call PolygonBatch.begin() before calling PolygonBatch.end()");
                                    (this.verticesLength > 0 || this.indicesLength > 0) && this.flush(), this.shader = null, this.lastTexture = null, this.isDrawing = !1, t.disable(t.BLEND)
                                }, t.prototype.getDrawCalls = function () {
                                    return this.drawCalls
                                }, t.prototype.dispose = function () {
                                    this.mesh.dispose()
                                }, t
                            }(), e.PolygonBatcher = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n, i;
                            e = t.webgl || (t.webgl = {}), i = function () {
                                    function i(n, i, a) {
                                        void 0 === a && (a = !0), this.twoColorTint = !1, this.activeRenderer = null, this.QUAD = [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], this.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0], this.WHITE = new t.Color(1, 1, 1, 1), this.canvas = n, this.context = i instanceof e.ManagedWebGLRenderingContext ? i : new e.ManagedWebGLRenderingContext(i), this.twoColorTint = a, this.camera = new e.OrthoCamera(n.width, n.height), this.batcherShader = a ? e.Shader.newTwoColoredTextured(this.context) : e.Shader.newColoredTextured(this.context), this.batcher = new e.PolygonBatcher(this.context, a), this.shapesShader = e.Shader.newColored(this.context), this.shapes = new e.ShapeRenderer(this.context), this.skeletonRenderer = new e.SkeletonRenderer(this.context, a), this.skeletonDebugRenderer = new e.SkeletonDebugRenderer(this.context)
                                    }
                                    return i.prototype.begin = function () {
                                        this.camera.update(), this.enableRenderer(this.batcher)
                                    }, i.prototype.drawSkeleton = function (t, e, n, i) {
                                        void 0 === e && (e = !1), void 0 === n && (n = -1), void 0 === i && (i = -1), this.enableRenderer(this.batcher), this.skeletonRenderer.premultipliedAlpha = e, this.skeletonRenderer.draw(this.batcher, t, n, i)
                                    }, i.prototype.drawSkeletonDebug = function (t, e, n) {
                                        void 0 === e && (e = !1), void 0 === n && (n = null), this.enableRenderer(this.shapes), this.skeletonDebugRenderer.premultipliedAlpha = e, this.skeletonDebugRenderer.draw(this.shapes, t, n)
                                    }, i.prototype.drawTexture = function (t, e, n, i, a, r) {
                                        void 0 === r && (r = null), this.enableRenderer(this.batcher), null === r && (r = this.WHITE);
                                        var s = this.QUAD,
                                            o = 0;
                                        s[o++] = e, s[o++] = n, s[o++] = r.r, s[o++] = r.g, s[o++] = r.b, s[o++] = r.a, s[o++] = 0, s[o++] = 1, this.twoColorTint && (s[o++] = 0, s[o++] = 0, s[o++] = 0, s[o++] = 0), s[o++] = e + i, s[o++] = n, s[o++] = r.r, s[o++] = r.g, s[o++] = r.b, s[o++] = r.a, s[o++] = 1, s[o++] = 1, this.twoColorTint && (s[o++] = 0, s[o++] = 0, s[o++] = 0, s[o++] = 0), s[o++] = e + i, s[o++] = n + a, s[o++] = r.r, s[o++] = r.g, s[o++] = r.b, s[o++] = r.a, s[o++] = 1, s[o++] = 0, this.twoColorTint && (s[o++] = 0, s[o++] = 0, s[o++] = 0, s[o++] = 0), s[o++] = e, s[o++] = n + a, s[o++] = r.r, s[o++] = r.g, s[o++] = r.b, s[o++] = r.a, s[o++] = 0, s[o++] = 0, this.twoColorTint && (s[o++] = 0, s[o++] = 0, s[o++] = 0, s[o++] = 0), this.batcher.draw(t, s, this.QUAD_TRIANGLES)
                                    }, i.prototype.drawTextureUV = function (t, e, n, i, a, r, s, o, l, c) {
                                        void 0 === c && (c = null), this.enableRenderer(this.batcher), null === c && (c = this.WHITE);
                                        var u = this.QUAD,
                                            h = 0;
                                        u[h++] = e, u[h++] = n, u[h++] = c.r, u[h++] = c.g, u[h++] = c.b, u[h++] = c.a, u[h++] = r, u[h++] = s, this.twoColorTint && (u[h++] = 0, u[h++] = 0, u[h++] = 0, u[h++] = 0), u[h++] = e + i, u[h++] = n, u[h++] = c.r, u[h++] = c.g, u[h++] = c.b, u[h++] = c.a, u[h++] = o, u[h++] = s, this.twoColorTint && (u[h++] = 0, u[h++] = 0, u[h++] = 0, u[h++] = 0), u[h++] = e + i, u[h++] = n + a, u[h++] = c.r, u[h++] = c.g, u[h++] = c.b, u[h++] = c.a, u[h++] = o, u[h++] = l, this.twoColorTint && (u[h++] = 0, u[h++] = 0, u[h++] = 0, u[h++] = 0), u[h++] = e, u[h++] = n + a, u[h++] = c.r, u[h++] = c.g, u[h++] = c.b, u[h++] = c.a, u[h++] = r, u[h++] = l, this.twoColorTint && (u[h++] = 0, u[h++] = 0, u[h++] = 0, u[h++] = 0), this.batcher.draw(t, u, this.QUAD_TRIANGLES)
                                    }, i.prototype.drawTextureRotated = function (e, n, i, a, r, s, o, l, c, u) {
                                        void 0 === c && (c = null), void 0 === u && (u = !1), this.enableRenderer(this.batcher), null === c && (c = this.WHITE);
                                        var h = this.QUAD,
                                            d = n + s,
                                            f = i + o,
                                            p = -s,
                                            g = -o,
                                            v = a - s,
                                            m = r - o,
                                            E = p,
                                            y = g,
                                            A = p,
                                            T = m,
                                            S = v,
                                            M = m,
                                            w = v,
                                            x = g,
                                            C = 0,
                                            I = 0,
                                            b = 0,
                                            R = 0,
                                            P = 0,
                                            _ = 0,
                                            k = 0,
                                            L = 0;
                                        if (0 != l) {
                                            var D = t.MathUtils.cosDeg(l),
                                                O = t.MathUtils.sinDeg(l);
                                            b = (P = D * S - O * M) + ((C = D * E - O * y) - (k = D * A - O * T)), R = (_ = O * S + D * M) + ((I = O * E + D * y) - (L = O * A + D * T))
                                        } else C = E, I = y, k = A, L = T, P = S, _ = M, b = w, R = x;
                                        C += d, I += f, b += d, R += f, P += d, _ += f, k += d, L += f;
                                        var N = 0;
                                        h[N++] = C, h[N++] = I, h[N++] = c.r, h[N++] = c.g, h[N++] = c.b, h[N++] = c.a, h[N++] = 0, h[N++] = 1, this.twoColorTint && (h[N++] = 0, h[N++] = 0, h[N++] = 0, h[N++] = 0), h[N++] = b, h[N++] = R, h[N++] = c.r, h[N++] = c.g, h[N++] = c.b, h[N++] = c.a, h[N++] = 1, h[N++] = 1, this.twoColorTint && (h[N++] = 0, h[N++] = 0, h[N++] = 0, h[N++] = 0), h[N++] = P, h[N++] = _, h[N++] = c.r, h[N++] = c.g, h[N++] = c.b, h[N++] = c.a, h[N++] = 1, h[N++] = 0, this.twoColorTint && (h[N++] = 0, h[N++] = 0, h[N++] = 0, h[N++] = 0), h[N++] = k, h[N++] = L, h[N++] = c.r, h[N++] = c.g, h[N++] = c.b, h[N++] = c.a, h[N++] = 0, h[N++] = 0, this.twoColorTint && (h[N++] = 0, h[N++] = 0, h[N++] = 0, h[N++] = 0), this.batcher.draw(e, h, this.QUAD_TRIANGLES)
                                    }, i.prototype.drawRegion = function (t, e, n, i, a, r, s) {
                                        void 0 === r && (r = null), void 0 === s && (s = !1), this.enableRenderer(this.batcher), null === r && (r = this.WHITE);
                                        var o = this.QUAD,
                                            l = 0;
                                        o[l++] = e, o[l++] = n, o[l++] = r.r, o[l++] = r.g, o[l++] = r.b, o[l++] = r.a, o[l++] = t.u, o[l++] = t.v2, this.twoColorTint && (o[l++] = 0, o[l++] = 0, o[l++] = 0, o[l++] = 0), o[l++] = e + i, o[l++] = n, o[l++] = r.r, o[l++] = r.g, o[l++] = r.b, o[l++] = r.a, o[l++] = t.u2, o[l++] = t.v2, this.twoColorTint && (o[l++] = 0, o[l++] = 0, o[l++] = 0, o[l++] = 0), o[l++] = e + i, o[l++] = n + a, o[l++] = r.r, o[l++] = r.g, o[l++] = r.b, o[l++] = r.a, o[l++] = t.u2, o[l++] = t.v, this.twoColorTint && (o[l++] = 0, o[l++] = 0, o[l++] = 0, o[l++] = 0), o[l++] = e, o[l++] = n + a, o[l++] = r.r, o[l++] = r.g, o[l++] = r.b, o[l++] = r.a, o[l++] = t.u, o[l++] = t.v, this.twoColorTint && (o[l++] = 0, o[l++] = 0, o[l++] = 0, o[l++] = 0), this.batcher.draw(t.texture, o, this.QUAD_TRIANGLES)
                                    }, i.prototype.line = function (t, e, n, i, a, r) {
                                        void 0 === a && (a = null), void 0 === r && (r = null), this.enableRenderer(this.shapes), this.shapes.line(t, e, n, i, a)
                                    }, i.prototype.triangle = function (t, e, n, i, a, r, s, o, l, c) {
                                        void 0 === o && (o = null), void 0 === l && (l = null), void 0 === c && (c = null), this.enableRenderer(this.shapes), this.shapes.triangle(t, e, n, i, a, r, s, o, l, c)
                                    }, i.prototype.quad = function (t, e, n, i, a, r, s, o, l, c, u, h, d) {
                                        void 0 === c && (c = null), void 0 === u && (u = null), void 0 === h && (h = null), void 0 === d && (d = null), this.enableRenderer(this.shapes), this.shapes.quad(t, e, n, i, a, r, s, o, l, c, u, h, d)
                                    }, i.prototype.rect = function (t, e, n, i, a, r) {
                                        void 0 === r && (r = null), this.enableRenderer(this.shapes), this.shapes.rect(t, e, n, i, a, r)
                                    }, i.prototype.rectLine = function (t, e, n, i, a, r, s) {
                                        void 0 === s && (s = null), this.enableRenderer(this.shapes), this.shapes.rectLine(t, e, n, i, a, r, s)
                                    }, i.prototype.polygon = function (t, e, n, i) {
                                        void 0 === i && (i = null), this.enableRenderer(this.shapes), this.shapes.polygon(t, e, n, i)
                                    }, i.prototype.circle = function (t, e, n, i, a, r) {
                                        void 0 === a && (a = null), void 0 === r && (r = 0), this.enableRenderer(this.shapes), this.shapes.circle(t, e, n, i, a, r)
                                    }, i.prototype.curve = function (t, e, n, i, a, r, s, o, l, c) {
                                        void 0 === c && (c = null), this.enableRenderer(this.shapes), this.shapes.curve(t, e, n, i, a, r, s, o, l, c)
                                    }, i.prototype.end = function () {
                                        this.activeRenderer === this.batcher ? this.batcher.end() : this.activeRenderer === this.shapes && this.shapes.end(), this.activeRenderer = null
                                    }, i.prototype.resize = function (t) {
                                        var e = this.canvas,
                                            i = e.clientWidth,
                                            a = e.clientHeight;
                                        if (e.width == i && e.height == a || (e.width = i, e.height = a), this.context.gl.viewport(0, 0, e.width, e.height), t === n.Stretch);
                                        else if (t === n.Expand) this.camera.setViewport(i, a);
                                        else if (t === n.Fit) {
                                            var r = e.width,
                                                s = e.height,
                                                o = this.camera.viewportWidth,
                                                l = this.camera.viewportHeight,
                                                c = l / o < s / r ? o / r : l / s;
                                            this.camera.viewportWidth = r * c, this.camera.viewportHeight = s * c
                                        }
                                        this.camera.update()
                                    }, i.prototype.enableRenderer = function (t) {
                                        this.activeRenderer !== t && (this.end(), t instanceof e.PolygonBatcher ? (this.batcherShader.bind(), this.batcherShader.setUniform4x4f(e.Shader.MVP_MATRIX, Nr()(this.camera.projectionView)), this.batcherShader.setUniformi("u_texture", 0), this.batcher.begin(this.batcherShader), this.activeRenderer = this.batcher) : t instanceof e.ShapeRenderer ? (this.shapesShader.bind(), this.shapesShader.setUniform4x4f(e.Shader.MVP_MATRIX, Nr()(this.camera.projectionView)), this.shapes.begin(this.shapesShader), this.activeRenderer = this.shapes) : this.activeRenderer = this.skeletonDebugRenderer)
                                    }, i.prototype.dispose = function () {
                                        this.batcher.dispose(), this.batcherShader.dispose(), this.shapes.dispose(), this.shapesShader.dispose(), this.skeletonDebugRenderer.dispose()
                                    }, i
                                }(), e.SceneRenderer = i,
                                function (t) {
                                    t[t.Stretch = 0] = "Stretch", t[t.Expand = 1] = "Expand", t[t.Fit = 2] = "Fit"
                                }(n = e.ResizeMode || (e.ResizeMode = {}))
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function () {
                                function t(t, n, i) {
                                    this.vertexShader = n, this.fragmentShader = i, this.vs = null, this.fs = null, this.program = null, this.tmp2x2 = new Float32Array(4), this.tmp3x3 = new Float32Array(9), this.tmp4x4 = new Float32Array(16), this.vsSource = n, this.fsSource = i, this.context = t instanceof e.ManagedWebGLRenderingContext ? t : new e.ManagedWebGLRenderingContext(t), this.context.addRestorable(this), this.compile()
                                }
                                return t.prototype.getProgram = function () {
                                    return this.program
                                }, t.prototype.getVertexShader = function () {
                                    return this.vertexShader
                                }, t.prototype.getFragmentShader = function () {
                                    return this.fragmentShader
                                }, t.prototype.getVertexShaderSource = function () {
                                    return this.vsSource
                                }, t.prototype.getFragmentSource = function () {
                                    return this.fsSource
                                }, t.prototype.compile = function () {
                                    var t = this.context.gl;
                                    try {
                                        this.vs = this.compileShader(t.VERTEX_SHADER, this.vertexShader), this.fs = this.compileShader(t.FRAGMENT_SHADER, this.fragmentShader), this.program = this.compileProgram(this.vs, this.fs)
                                    } catch (t) {
                                        throw this.dispose(), t
                                    }
                                }, t.prototype.compileShader = function (t, e) {
                                    var n = this.context.gl,
                                        i = n.createShader(t);
                                    if (n.shaderSource(i, e), n.compileShader(i), !n.getShaderParameter(i, n.COMPILE_STATUS)) {
                                        var a = "Couldn't compile shader: " + n.getShaderInfoLog(i);
                                        if (n.deleteShader(i), !n.isContextLost()) throw new Error(a)
                                    }
                                    return i
                                }, t.prototype.compileProgram = function (t, e) {
                                    var n = this.context.gl,
                                        i = n.createProgram();
                                    if (n.attachShader(i, t), n.attachShader(i, e), n.linkProgram(i), !n.getProgramParameter(i, n.LINK_STATUS)) {
                                        var a = "Couldn't compile shader program: " + n.getProgramInfoLog(i);
                                        if (n.deleteProgram(i), !n.isContextLost()) throw new Error(a)
                                    }
                                    return i
                                }, t.prototype.restore = function () {
                                    this.compile()
                                }, t.prototype.bind = function () {
                                    this.context.gl.useProgram(this.program)
                                }, t.prototype.unbind = function () {
                                    this.context.gl.useProgram(null)
                                }, t.prototype.setUniformi = function (t, e) {
                                    this.context.gl.uniform1i(this.getUniformLocation(t), e)
                                }, t.prototype.setUniformf = function (t, e) {
                                    this.context.gl.uniform1f(this.getUniformLocation(t), e)
                                }, t.prototype.setUniform2f = function (t, e, n) {
                                    this.context.gl.uniform2f(this.getUniformLocation(t), e, n)
                                }, t.prototype.setUniform3f = function (t, e, n, i) {
                                    this.context.gl.uniform3f(this.getUniformLocation(t), e, n, i)
                                }, t.prototype.setUniform4f = function (t, e, n, i, a) {
                                    this.context.gl.uniform4f(this.getUniformLocation(t), e, n, i, a)
                                }, t.prototype.setUniform2x2f = function (t, e) {
                                    var n = this.context.gl;
                                    this.tmp2x2.set(e), n.uniformMatrix2fv(this.getUniformLocation(t), !1, this.tmp2x2)
                                }, t.prototype.setUniform3x3f = function (t, e) {
                                    var n = this.context.gl;
                                    this.tmp3x3.set(e), n.uniformMatrix3fv(this.getUniformLocation(t), !1, this.tmp3x3)
                                }, t.prototype.setUniform4x4f = function (t, e) {
                                    var n = this.context.gl;
                                    this.tmp4x4.set(e), n.uniformMatrix4fv(this.getUniformLocation(t), !1, this.tmp4x4)
                                }, t.prototype.getUniformLocation = function (t) {
                                    var e = this.context.gl,
                                        n = e.getUniformLocation(this.program, t);
                                    if (!n && !e.isContextLost()) throw new Error("Couldn't find location for uniform " + t);
                                    return n
                                }, t.prototype.getAttributeLocation = function (t) {
                                    var e = this.context.gl,
                                        n = e.getAttribLocation(this.program, t);
                                    if (-1 == n && !e.isContextLost()) throw new Error("Couldn't find location for attribute " + t);
                                    return n
                                }, t.prototype.dispose = function () {
                                    this.context.removeRestorable(this);
                                    var t = this.context.gl;
                                    this.vs && (t.deleteShader(this.vs), this.vs = null), this.fs && (t.deleteShader(this.fs), this.fs = null), this.program && (t.deleteProgram(this.program), this.program = null)
                                }, t.newColoredTextured = function (e) {
                                    return new t(e, "\n\t\t\t\tattribute vec4 " + t.POSITION + ";\n\t\t\t\tattribute vec4 " + t.COLOR + ";\n\t\t\t\tattribute vec2 " + t.TEXCOORDS + ";\n\t\t\t\tuniform mat4 " + t.MVP_MATRIX + ";\n\t\t\t\tvarying vec4 v_color;\n\t\t\t\tvarying vec2 v_texCoords;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tv_color = " + t.COLOR + ";\n\t\t\t\t\tv_texCoords = " + t.TEXCOORDS + ";\n\t\t\t\t\tgl_Position = " + t.MVP_MATRIX + " * " + t.POSITION + ";\n\t\t\t\t}\n\t\t\t", "\n\t\t\t\t#ifdef GL_ES\n\t\t\t\t\t#define LOWP lowp\n\t\t\t\t\tprecision mediump float;\n\t\t\t\t#else\n\t\t\t\t\t#define LOWP\n\t\t\t\t#endif\n\t\t\t\tvarying LOWP vec4 v_color;\n\t\t\t\tvarying vec2 v_texCoords;\n\t\t\t\tuniform sampler2D u_texture;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tgl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n\t\t\t\t}\n\t\t\t")
                                }, t.newTwoColoredTextured = function (e) {
                                    return new t(e, "\n\t\t\t\tattribute vec4 " + t.POSITION + ";\n\t\t\t\tattribute vec4 " + t.COLOR + ";\n\t\t\t\tattribute vec4 " + t.COLOR2 + ";\n\t\t\t\tattribute vec2 " + t.TEXCOORDS + ";\n\t\t\t\tuniform mat4 " + t.MVP_MATRIX + ";\n\t\t\t\tvarying vec4 v_light;\n\t\t\t\tvarying vec4 v_dark;\n\t\t\t\tvarying vec2 v_texCoords;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tv_light = " + t.COLOR + ";\n\t\t\t\t\tv_dark = " + t.COLOR2 + ";\n\t\t\t\t\tv_texCoords = " + t.TEXCOORDS + ";\n\t\t\t\t\tgl_Position = " + t.MVP_MATRIX + " * " + t.POSITION + ";\n\t\t\t\t}\n\t\t\t", "\n\t\t\t\t#ifdef GL_ES\n\t\t\t\t\t#define LOWP lowp\n\t\t\t\t\tprecision mediump float;\n\t\t\t\t#else\n\t\t\t\t\t#define LOWP\n\t\t\t\t#endif\n\t\t\t\tvarying LOWP vec4 v_light;\n\t\t\t\tvarying LOWP vec4 v_dark;\n\t\t\t\tvarying vec2 v_texCoords;\n\t\t\t\tuniform sampler2D u_texture;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tvec4 texColor = texture2D(u_texture, v_texCoords);\n\t\t\t\t\tgl_FragColor.a = texColor.a * v_light.a;\n\t\t\t\t\tgl_FragColor.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n\t\t\t\t}\n\t\t\t")
                                }, t.newColored = function (e) {
                                    return new t(e, "\n\t\t\t\tattribute vec4 " + t.POSITION + ";\n\t\t\t\tattribute vec4 " + t.COLOR + ";\n\t\t\t\tuniform mat4 " + t.MVP_MATRIX + ";\n\t\t\t\tvarying vec4 v_color;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tv_color = " + t.COLOR + ";\n\t\t\t\t\tgl_Position = " + t.MVP_MATRIX + " * " + t.POSITION + ";\n\t\t\t\t}\n\t\t\t", "\n\t\t\t\t#ifdef GL_ES\n\t\t\t\t\t#define LOWP lowp\n\t\t\t\t\tprecision mediump float;\n\t\t\t\t#else\n\t\t\t\t\t#define LOWP\n\t\t\t\t#endif\n\t\t\t\tvarying LOWP vec4 v_color;\n\n\t\t\t\tvoid main () {\n\t\t\t\t\tgl_FragColor = v_color;\n\t\t\t\t}\n\t\t\t")
                                }, t.MVP_MATRIX = "u_projTrans", t.POSITION = "a_position", t.COLOR = "a_color", t.COLOR2 = "a_color2", t.TEXCOORDS = "a_texCoords", t.SAMPLER = "u_texture", t
                            }(), e.Shader = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n, i;
                            e = t.webgl || (t.webgl = {}), i = function () {
                                    function i(i, a) {
                                        if (void 0 === a && (a = 10920), this.isDrawing = !1, this.shapeType = n.Filled, this.color = new t.Color(1, 1, 1, 1), this.vertexIndex = 0, this.tmp = new t.Vector2, a > 10920) throw new Error("Can't have more than 10920 triangles per batch: " + a);
                                        this.context = i instanceof e.ManagedWebGLRenderingContext ? i : new e.ManagedWebGLRenderingContext(i), this.mesh = new e.Mesh(i, [new e.Position2Attribute, new e.ColorAttribute], a, 0), this.srcBlend = this.context.gl.SRC_ALPHA, this.dstBlend = this.context.gl.ONE_MINUS_SRC_ALPHA
                                    }
                                    return i.prototype.begin = function (t) {
                                        if (this.isDrawing) throw new Error("ShapeRenderer.begin() has already been called");
                                        this.shader = t, this.vertexIndex = 0, this.isDrawing = !0;
                                        var e = this.context.gl;
                                        e.enable(e.BLEND), e.blendFunc(this.srcBlend, this.dstBlend)
                                    }, i.prototype.setBlendMode = function (t, e) {
                                        var n = this.context.gl;
                                        this.srcBlend = t, this.dstBlend = e, this.isDrawing && (this.flush(), n.blendFunc(this.srcBlend, this.dstBlend))
                                    }, i.prototype.setColor = function (t) {
                                        this.color.setFromColor(t)
                                    }, i.prototype.setColorWith = function (t, e, n, i) {
                                        this.color.set(t, e, n, i)
                                    }, i.prototype.point = function (t, e, i) {
                                        void 0 === i && (i = null), this.check(n.Point, 1), null === i && (i = this.color), this.vertex(t, e, i)
                                    }, i.prototype.line = function (t, e, i, a, r) {
                                        void 0 === r && (r = null), this.check(n.Line, 2), this.mesh.getVertices(), this.vertexIndex, null === r && (r = this.color), this.vertex(t, e, r), this.vertex(i, a, r)
                                    }, i.prototype.triangle = function (t, e, i, a, r, s, o, l, c, u) {
                                        void 0 === l && (l = null), void 0 === c && (c = null), void 0 === u && (u = null), this.check(t ? n.Filled : n.Line, 3), this.mesh.getVertices(), this.vertexIndex, null === l && (l = this.color), null === c && (c = this.color), null === u && (u = this.color), t ? (this.vertex(e, i, l), this.vertex(a, r, c), this.vertex(s, o, u)) : (this.vertex(e, i, l), this.vertex(a, r, c), this.vertex(a, r, l), this.vertex(s, o, c), this.vertex(s, o, l), this.vertex(e, i, c))
                                    }, i.prototype.quad = function (t, e, i, a, r, s, o, l, c, u, h, d, f) {
                                        void 0 === u && (u = null), void 0 === h && (h = null), void 0 === d && (d = null), void 0 === f && (f = null), this.check(t ? n.Filled : n.Line, 3), this.mesh.getVertices(), this.vertexIndex, null === u && (u = this.color), null === h && (h = this.color), null === d && (d = this.color), null === f && (f = this.color), t ? (this.vertex(e, i, u), this.vertex(a, r, h), this.vertex(s, o, d), this.vertex(s, o, d), this.vertex(l, c, f), this.vertex(e, i, u)) : (this.vertex(e, i, u), this.vertex(a, r, h), this.vertex(a, r, h), this.vertex(s, o, d), this.vertex(s, o, d), this.vertex(l, c, f), this.vertex(l, c, f), this.vertex(e, i, u))
                                    }, i.prototype.rect = function (t, e, n, i, a, r) {
                                        void 0 === r && (r = null), this.quad(t, e, n, e + i, n, e + i, n + a, e, n + a, r, r, r, r)
                                    }, i.prototype.rectLine = function (t, e, i, a, r, s, o) {
                                        void 0 === o && (o = null), this.check(t ? n.Filled : n.Line, 8), null === o && (o = this.color);
                                        var l = this.tmp.set(r - i, e - a);
                                        l.normalize(), s *= .5;
                                        var c = l.x * s,
                                            u = l.y * s;
                                        t ? (this.vertex(e + c, i + u, o), this.vertex(e - c, i - u, o), this.vertex(a + c, r + u, o), this.vertex(a - c, r - u, o), this.vertex(a + c, r + u, o), this.vertex(e - c, i - u, o)) : (this.vertex(e + c, i + u, o), this.vertex(e - c, i - u, o), this.vertex(a + c, r + u, o), this.vertex(a - c, r - u, o), this.vertex(a + c, r + u, o), this.vertex(e + c, i + u, o), this.vertex(a - c, r - u, o), this.vertex(e - c, i - u, o))
                                    }, i.prototype.x = function (t, e, n) {
                                        this.line(t - n, e - n, t + n, e + n), this.line(t - n, e + n, t + n, e - n)
                                    }, i.prototype.polygon = function (t, e, i, a) {
                                        if (void 0 === a && (a = null), i < 3) throw new Error("Polygon must contain at least 3 vertices");
                                        this.check(n.Line, 2 * i), null === a && (a = this.color), this.mesh.getVertices(), this.vertexIndex, i <<= 1;
                                        for (var r = t[e <<= 1], s = t[e + 1], o = e + i, l = e, c = e + i - 2; l < c; l += 2) {
                                            var u = t[l],
                                                h = t[l + 1],
                                                d = 0,
                                                f = 0;
                                            l + 2 >= o ? (d = r, f = s) : (d = t[l + 2], f = t[l + 3]), this.vertex(u, h, a), this.vertex(d, f, a)
                                        }
                                    }, i.prototype.circle = function (e, i, a, r, s, o) {
                                        if (void 0 === s && (s = null), void 0 === o && (o = 0), 0 === o && (o = Math.max(1, 6 * t.MathUtils.cbrt(r) | 0)), o <= 0) throw new Error("segments must be > 0.");
                                        null === s && (s = this.color);
                                        var l = 2 * t.MathUtils.PI / o,
                                            c = Math.cos(l),
                                            u = Math.sin(l),
                                            h = r,
                                            d = 0;
                                        if (e) {
                                            for (this.check(n.Filled, 3 * o + 3), o--, p = 0; p < o; p++) {
                                                this.vertex(i, a, s), this.vertex(i + h, a + d, s);
                                                var f = h;
                                                h = c * h - u * d, d = u * f + c * d, this.vertex(i + h, a + d, s)
                                            }
                                            this.vertex(i, a, s), this.vertex(i + h, a + d, s)
                                        } else {
                                            this.check(n.Line, 2 * o + 2);
                                            for (var p = 0; p < o; p++) {
                                                this.vertex(i + h, a + d, s);
                                                var g = h;
                                                h = c * h - u * d, d = u * g + c * d, this.vertex(i + h, a + d, s)
                                            }
                                            this.vertex(i + h, a + d, s)
                                        }
                                        h = r, d = 0, this.vertex(i + h, a + d, s)
                                    }, i.prototype.curve = function (t, e, i, a, r, s, o, l, c, u) {
                                        void 0 === u && (u = null), this.check(n.Line, 2 * c + 2), null === u && (u = this.color);
                                        for (var h = 1 / c, d = h * h, f = h * h * h, p = 3 * h, g = 3 * d, v = 6 * d, m = 6 * f, E = t - 2 * i + r, y = e - 2 * a + s, A = 3 * (i - r) - t + o, T = 3 * (a - s) - e + l, S = t, M = e, w = (i - t) * p + E * g + A * f, x = (a - e) * p + y * g + T * f, C = E * v + A * m, I = y * v + T * m, b = A * m, R = T * m; c-- > 0;) this.vertex(S, M, u), S += w, M += x, w += C, x += I, C += b, I += R, this.vertex(S, M, u);
                                        this.vertex(S, M, u), this.vertex(o, l, u)
                                    }, i.prototype.vertex = function (t, e, n) {
                                        var i = this.vertexIndex,
                                            a = this.mesh.getVertices();
                                        a[i++] = t, a[i++] = e, a[i++] = n.r, a[i++] = n.g, a[i++] = n.b, a[i++] = n.a, this.vertexIndex = i
                                    }, i.prototype.end = function () {
                                        if (!this.isDrawing) throw new Error("ShapeRenderer.begin() has not been called");
                                        this.flush(), this.context.gl.disable(this.context.gl.BLEND), this.isDrawing = !1
                                    }, i.prototype.flush = function () {
                                        0 != this.vertexIndex && (this.mesh.setVerticesLength(this.vertexIndex), this.mesh.draw(this.shader, this.shapeType), this.vertexIndex = 0)
                                    }, i.prototype.check = function (t, e) {
                                        if (!this.isDrawing) throw new Error("ShapeRenderer.begin() has not been called");
                                        if (this.shapeType == t) {
                                            if (!(this.mesh.maxVertices() - this.mesh.numVertices() < e)) return;
                                            this.flush()
                                        } else this.flush(), this.shapeType = t
                                    }, i.prototype.dispose = function () {
                                        this.mesh.dispose()
                                    }, i
                                }(), e.ShapeRenderer = i,
                                function (t) {
                                    t[t.Point = 0] = "Point", t[t.Line = 1] = "Line", t[t.Filled = 4] = "Filled"
                                }(n = e.ShapeType || (e.ShapeType = {}))
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function () {
                                function n(n) {
                                    this.boneLineColor = new t.Color(1, 0, 0, 1), this.boneOriginColor = new t.Color(0, 1, 0, 1), this.attachmentLineColor = new t.Color(0, 0, 1, .5), this.triangleLineColor = new t.Color(1, .64, 0, .5), this.pathColor = (new t.Color).setFromString("FF7F00"), this.clipColor = new t.Color(.8, 0, 0, 2), this.aabbColor = new t.Color(0, 1, 0, .5), this.drawBones = !0, this.drawRegionAttachments = !0, this.drawBoundingBoxes = !0, this.drawMeshHull = !0, this.drawMeshTriangles = !0, this.drawPaths = !0, this.drawSkeletonXY = !1, this.drawClipping = !0, this.premultipliedAlpha = !1, this.scale = 1, this.boneWidth = 2, this.bounds = new t.SkeletonBounds, this.temp = new Array, this.vertices = t.Utils.newFloatArray(2048), this.context = n instanceof e.ManagedWebGLRenderingContext ? n : new e.ManagedWebGLRenderingContext(n)
                                }
                                return n.prototype.draw = function (e, i, a) {
                                    void 0 === a && (a = null);
                                    var r = i.x,
                                        s = i.y,
                                        o = this.context.gl,
                                        l = this.premultipliedAlpha ? o.ONE : o.SRC_ALPHA;
                                    e.setBlendMode(l, o.ONE_MINUS_SRC_ALPHA);
                                    var c = i.bones;
                                    if (this.drawBones) {
                                        e.setColor(this.boneLineColor);
                                        for (var u = 0, h = c.length; u < h; u++) {
                                            var d = c[u];
                                            if (!(a && g()(a).call(a, d.data.name) > -1) && null != d.parent) {
                                                var f = r + d.data.length * d.a + d.worldX,
                                                    p = s + d.data.length * d.c + d.worldY;
                                                e.rectLine(!0, r + d.worldX, s + d.worldY, f, p, this.boneWidth * this.scale)
                                            }
                                        }
                                        this.drawSkeletonXY && e.x(r, s, 4 * this.scale)
                                    }
                                    if (this.drawRegionAttachments)
                                        for (e.setColor(this.attachmentLineColor), u = 0, h = (Y = i.slots).length; u < h; u++)
                                            if ((K = (W = Y[u]).getAttachment()) instanceof t.RegionAttachment) {
                                                var v = K,
                                                    m = this.vertices;
                                                v.computeWorldVertices(W.bone, m, 0, 2), e.line(m[0], m[1], m[2], m[3]), e.line(m[2], m[3], m[4], m[5]), e.line(m[4], m[5], m[6], m[7]), e.line(m[6], m[7], m[0], m[1])
                                            } if (this.drawMeshHull || this.drawMeshTriangles)
                                        for (u = 0, h = (Y = i.slots).length; u < h; u++)
                                            if ((W = Y[u]).bone.active && (K = W.getAttachment()) instanceof t.MeshAttachment) {
                                                var E = K;
                                                m = this.vertices, E.computeWorldVertices(W, 0, E.worldVerticesLength, m, 0, 2);
                                                var y = E.triangles,
                                                    A = E.hullLength;
                                                if (this.drawMeshTriangles) {
                                                    e.setColor(this.triangleLineColor);
                                                    for (var T = 0, S = y.length; T < S; T += 3) {
                                                        var M = 2 * y[T],
                                                            w = 2 * y[T + 1],
                                                            x = 2 * y[T + 2];
                                                        e.triangle(!1, m[M], m[M + 1], m[w], m[w + 1], m[x], m[x + 1])
                                                    }
                                                }
                                                if (this.drawMeshHull && A > 0) {
                                                    e.setColor(this.attachmentLineColor);
                                                    var C = m[(A = 2 * (A >> 1)) - 2],
                                                        I = m[A - 1];
                                                    for (T = 0, S = A; T < S; T += 2) f = m[T], p = m[T + 1], e.line(f, p, C, I), C = f, I = p
                                                }
                                            } if (this.drawBoundingBoxes) {
                                        var b = this.bounds;
                                        b.update(i, !0), e.setColor(this.aabbColor), e.rect(!1, b.minX, b.minY, b.getWidth(), b.getHeight());
                                        var R = b.polygons,
                                            P = b.boundingBoxes;
                                        for (u = 0, h = R.length; u < h; u++) {
                                            var _ = R[u];
                                            e.setColor(P[u].color), e.polygon(_, 0, _.length)
                                        }
                                    }
                                    if (this.drawPaths)
                                        for (u = 0, h = (Y = i.slots).length; u < h; u++)
                                            if ((W = Y[u]).bone.active && (K = W.getAttachment()) instanceof t.PathAttachment) {
                                                var k = K,
                                                    L = (S = k.worldVerticesLength, this.temp = t.Utils.setArraySize(this.temp, S, 0));
                                                k.computeWorldVertices(W, 0, S, L, 0, 2);
                                                var D = this.pathColor,
                                                    O = L[2],
                                                    N = L[3],
                                                    U = 0,
                                                    B = 0;
                                                if (k.closed) {
                                                    e.setColor(D);
                                                    var F = L[0],
                                                        G = L[1],
                                                        H = L[S - 2],
                                                        V = L[S - 1];
                                                    U = L[S - 4], B = L[S - 3], e.curve(O, N, F, G, H, V, U, B, 32), e.setColor(n.LIGHT_GRAY), e.line(O, N, F, G), e.line(U, B, H, V)
                                                }
                                                for (S -= 4, T = 4; T < S; T += 6) F = L[T], G = L[T + 1], H = L[T + 2], V = L[T + 3], U = L[T + 4], B = L[T + 5], e.setColor(D), e.curve(O, N, F, G, H, V, U, B, 32), e.setColor(n.LIGHT_GRAY), e.line(O, N, F, G), e.line(U, B, H, V), O = U, N = B
                                            } if (this.drawBones)
                                        for (e.setColor(this.boneOriginColor), u = 0, h = c.length; u < h; u++) d = c[u], a && g()(a).call(a, d.data.name) > -1 || e.circle(!0, r + d.worldX, s + d.worldY, 3 * this.scale, n.GREEN, 8);
                                    if (this.drawClipping) {
                                        var Y = i.slots;
                                        for (e.setColor(this.clipColor), u = 0, h = Y.length; u < h; u++) {
                                            var W, K;
                                            if ((W = Y[u]).bone.active && (K = W.getAttachment()) instanceof t.ClippingAttachment) {
                                                var z = K;
                                                S = z.worldVerticesLength, L = this.temp = t.Utils.setArraySize(this.temp, S, 0), z.computeWorldVertices(W, 0, S, L, 0, 2);
                                                for (var X = 0, j = L.length; X < j; X += 2) f = L[X], p = L[X + 1], U = L[(X + 2) % L.length], B = L[(X + 3) % L.length], e.line(f, p, U, B)
                                            }
                                        }
                                    }
                                }, n.prototype.dispose = function () {}, n.LIGHT_GRAY = new t.Color(192 / 255, 192 / 255, 192 / 255, 1), n.GREEN = new t.Color(0, 1, 0, 1), n
                            }(), e.SkeletonDebugRenderer = n
                        }(i || (i = {})),
                        function (t) {
                            var e, n, i;
                            e = t.webgl || (t.webgl = {}), n = function (t, e, n) {
                                this.vertices = t, this.numVertices = e, this.numFloats = n
                            }, i = function () {
                                function i(e, i) {
                                    void 0 === i && (i = !0), this.premultipliedAlpha = !1, this.vertexEffect = null, this.tempColor = new t.Color, this.tempColor2 = new t.Color, this.vertexSize = 8, this.twoColorTint = !1, this.renderable = new n(null, 0, 0), this.clipper = new t.SkeletonClipping, this.temp = new t.Vector2, this.temp2 = new t.Vector2, this.temp3 = new t.Color, this.temp4 = new t.Color, this.twoColorTint = i, i && (this.vertexSize += 4), this.vertices = t.Utils.newFloatArray(1024 * this.vertexSize)
                                }
                                return i.prototype.draw = function (n, a, r, s) {
                                    void 0 === r && (r = -1), void 0 === s && (s = -1);
                                    var o = this.clipper,
                                        l = this.premultipliedAlpha,
                                        c = this.twoColorTint,
                                        u = null,
                                        h = this.temp,
                                        d = this.temp2,
                                        f = this.temp3,
                                        p = this.temp4,
                                        g = this.renderable,
                                        v = null,
                                        m = null,
                                        E = a.drawOrder,
                                        y = null,
                                        A = a.color,
                                        T = c ? 12 : 8,
                                        S = !1; - 1 == r && (S = !0);
                                    for (var M = 0, w = E.length; M < w; M++) {
                                        var x = o.isClipping() ? 2 : T,
                                            C = E[M];
                                        if (C.bone.active)
                                            if (r >= 0 && r == C.data.index && (S = !0), S) {
                                                s >= 0 && s == C.data.index && (S = !1);
                                                var I = C.getAttachment(),
                                                    b = null;
                                                if (I instanceof t.RegionAttachment) {
                                                    var R = I;
                                                    g.vertices = this.vertices, g.numVertices = 4, g.numFloats = x << 2, R.computeWorldVertices(C.bone, g.vertices, 0, x), m = i.QUAD_TRIANGLES, v = R.uvs, b = R.region.renderObject.texture, y = R.color
                                                } else {
                                                    if (!(I instanceof t.MeshAttachment)) {
                                                        if (I instanceof t.ClippingAttachment) {
                                                            var P = I;
                                                            o.clipStart(C, P);
                                                            continue
                                                        }
                                                        o.clipEndWithSlot(C);
                                                        continue
                                                    }
                                                    var _ = I;
                                                    g.vertices = this.vertices, g.numVertices = _.worldVerticesLength >> 1, g.numFloats = g.numVertices * x, g.numFloats > g.vertices.length && (g.vertices = this.vertices = t.Utils.newFloatArray(g.numFloats)), _.computeWorldVertices(C, 0, _.worldVerticesLength, g.vertices, 0, x), m = _.triangles, b = _.region.renderObject.texture, v = _.uvs, y = _.color
                                                }
                                                if (null != b) {
                                                    var k = C.color,
                                                        L = this.tempColor;
                                                    L.r = A.r * k.r * y.r, L.g = A.g * k.g * y.g, L.b = A.b * k.b * y.b, L.a = A.a * k.a * y.a, l && (L.r *= L.a, L.g *= L.a, L.b *= L.a);
                                                    var D = this.tempColor2;
                                                    null == C.darkColor ? D.set(0, 0, 0, 1) : (l ? (D.r = C.darkColor.r * L.a, D.g = C.darkColor.g * L.a, D.b = C.darkColor.b * L.a) : D.setFromColor(C.darkColor), D.a = l ? 1 : 0);
                                                    var O = C.data.blendMode;
                                                    if (O != u && (u = O, n.setBlendMode(e.WebGLBlendModeConverter.getSourceGLBlendMode(u, l), e.WebGLBlendModeConverter.getDestGLBlendMode(u))), o.isClipping()) {
                                                        o.clipTriangles(g.vertices, g.numFloats, m, m.length, v, L, D, c);
                                                        var N = new Float32Array(o.clippedVertices),
                                                            U = o.clippedTriangles;
                                                        if (null != this.vertexEffect) {
                                                            var B = this.vertexEffect,
                                                                F = N;
                                                            if (c) {
                                                                H = 0;
                                                                for (var G = N.length; H < G; H += T) h.x = F[H], h.y = F[H + 1], f.set(F[H + 2], F[H + 3], F[H + 4], F[H + 5]), d.x = F[H + 6], d.y = F[H + 7], p.set(F[H + 8], F[H + 9], F[H + 10], F[H + 11]), B.transform(h, d, f, p), F[H] = h.x, F[H + 1] = h.y, F[H + 2] = f.r, F[H + 3] = f.g, F[H + 4] = f.b, F[H + 5] = f.a, F[H + 6] = d.x, F[H + 7] = d.y, F[H + 8] = p.r, F[H + 9] = p.g, F[H + 10] = p.b, F[H + 11] = p.a
                                                            } else
                                                                for (var H = 0, V = N.length; H < V; H += T) h.x = F[H], h.y = F[H + 1], f.set(F[H + 2], F[H + 3], F[H + 4], F[H + 5]), d.x = F[H + 6], d.y = F[H + 7], p.set(0, 0, 0, 0), B.transform(h, d, f, p), F[H] = h.x, F[H + 1] = h.y, F[H + 2] = f.r, F[H + 3] = f.g, F[H + 4] = f.b, F[H + 5] = f.a, F[H + 6] = d.x, F[H + 7] = d.y
                                                        }
                                                        n.draw(b, N, U)
                                                    } else {
                                                        if (F = g.vertices, null != this.vertexEffect)
                                                            if (B = this.vertexEffect, c) {
                                                                H = 0, W = 0;
                                                                for (var Y = g.numFloats; H < Y; H += T, W += 2) h.x = F[H], h.y = F[H + 1], d.x = v[W], d.y = v[W + 1], f.setFromColor(L), p.setFromColor(D), B.transform(h, d, f, p), F[H] = h.x, F[H + 1] = h.y, F[H + 2] = f.r, F[H + 3] = f.g, F[H + 4] = f.b, F[H + 5] = f.a, F[H + 6] = d.x, F[H + 7] = d.y, F[H + 8] = p.r, F[H + 9] = p.g, F[H + 10] = p.b, F[H + 11] = p.a
                                                            } else {
                                                                H = 0;
                                                                for (var W = 0, K = g.numFloats; H < K; H += T, W += 2) h.x = F[H], h.y = F[H + 1], d.x = v[W], d.y = v[W + 1], f.setFromColor(L), p.set(0, 0, 0, 0), B.transform(h, d, f, p), F[H] = h.x, F[H + 1] = h.y, F[H + 2] = f.r, F[H + 3] = f.g, F[H + 4] = f.b, F[H + 5] = f.a, F[H + 6] = d.x, F[H + 7] = d.y
                                                            }
                                                        else if (c) {
                                                            H = 2, W = 0;
                                                            for (var z = g.numFloats; H < z; H += T, W += 2) F[H] = L.r, F[H + 1] = L.g, F[H + 2] = L.b, F[H + 3] = L.a, F[H + 4] = v[W], F[H + 5] = v[W + 1], F[H + 6] = D.r, F[H + 7] = D.g, F[H + 8] = D.b, F[H + 9] = D.a
                                                        } else {
                                                            H = 2, W = 0;
                                                            for (var X = g.numFloats; H < X; H += T, W += 2) F[H] = L.r, F[H + 1] = L.g, F[H + 2] = L.b, F[H + 3] = L.a, F[H + 4] = v[W], F[H + 5] = v[W + 1]
                                                        }
                                                        var j = g.vertices.subarray(0, g.numFloats);
                                                        n.draw(b, j, m)
                                                    }
                                                }
                                                o.clipEndWithSlot(C)
                                            } else o.clipEndWithSlot(C);
                                        else o.clipEndWithSlot(C)
                                    }
                                    o.clipEnd()
                                }, i.QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0], i
                            }(), e.SkeletonRenderer = i
                        }(i || (i = {})),
                        function (t) {
                            var e, n;
                            e = t.webgl || (t.webgl = {}), n = function () {
                                function t(t, e, n) {
                                    void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), this.x = 0, this.y = 0, this.z = 0, this.x = t, this.y = e, this.z = n
                                }
                                return t.prototype.setFrom = function (t) {
                                    return this.x = t.x, this.y = t.y, this.z = t.z, this
                                }, t.prototype.set = function (t, e, n) {
                                    return this.x = t, this.y = e, this.z = n, this
                                }, t.prototype.add = function (t) {
                                    return this.x += t.x, this.y += t.y, this.z += t.z, this
                                }, t.prototype.sub = function (t) {
                                    return this.x -= t.x, this.y -= t.y, this.z -= t.z, this
                                }, t.prototype.scale = function (t) {
                                    return this.x *= t, this.y *= t, this.z *= t, this
                                }, t.prototype.normalize = function () {
                                    var t = this.length();
                                    return 0 == t || (t = 1 / t, this.x *= t, this.y *= t, this.z *= t), this
                                }, t.prototype.cross = function (t) {
                                    return this.set(this.y * t.z - this.z * t.y, this.z * t.x - this.x * t.z, this.x * t.y - this.y * t.x)
                                }, t.prototype.multiply = function (t) {
                                    var n = Nr()(t);
                                    return this.set(this.x * n[e.M00] + this.y * n[e.M01] + this.z * n[e.M02] + n[e.M03], this.x * n[e.M10] + this.y * n[e.M11] + this.z * n[e.M12] + n[e.M13], this.x * n[e.M20] + this.y * n[e.M21] + this.z * n[e.M22] + n[e.M23])
                                }, t.prototype.project = function (t) {
                                    var n = Nr()(t),
                                        i = 1 / (this.x * n[e.M30] + this.y * n[e.M31] + this.z * n[e.M32] + n[e.M33]);
                                    return this.set((this.x * n[e.M00] + this.y * n[e.M01] + this.z * n[e.M02] + n[e.M03]) * i, (this.x * n[e.M10] + this.y * n[e.M11] + this.z * n[e.M12] + n[e.M13]) * i, (this.x * n[e.M20] + this.y * n[e.M21] + this.z * n[e.M22] + n[e.M23]) * i)
                                }, t.prototype.dot = function (t) {
                                    return this.x * t.x + this.y * t.y + this.z * t.z
                                }, t.prototype.length = function () {
                                    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
                                }, t.prototype.distance = function (t) {
                                    var e = t.x - this.x,
                                        n = t.y - this.y,
                                        i = t.z - this.z;
                                    return Math.sqrt(e * e + n * n + i * i)
                                }, t
                            }(), e.Vector3 = n
                        }(i || (i = {})),
                        function (t) {
                            ! function (e) {
                                var n = function () {
                                    function t(t, e) {
                                        void 0 === e && (e = {
                                            alpha: "true"
                                        }), this.restorables = new Array, t instanceof HTMLCanvasElement || t instanceof EventTarget ? this.setupCanvas(t, e) : (this.gl = t, this.canvas = this.gl.canvas)
                                    }
                                    return t.prototype.setupCanvas = function (t, e) {
                                        var n = this;
                                        this.gl = t.getContext("webgl2", e) || t.getContext("webgl", e), this.canvas = t, t.addEventListener("webglcontextlost", (function (t) {
                                            t && t.preventDefault()
                                        })), t.addEventListener("webglcontextrestored", (function (t) {
                                            for (var e = 0, i = n.restorables.length; e < i; e++) n.restorables[e].restore()
                                        }))
                                    }, t.prototype.addRestorable = function (t) {
                                        this.restorables.push(t)
                                    }, t.prototype.removeRestorable = function (t) {
                                        var e, n, i = g()(e = this.restorables).call(e, t);
                                        i > -1 && Pr()(n = this.restorables).call(n, i, 1)
                                    }, t
                                }();
                                e.ManagedWebGLRenderingContext = n;
                                var i = function () {
                                    function e() {}
                                    return e.getDestGLBlendMode = function (n) {
                                        switch (n) {
                                            case t.BlendMode.Normal:
                                                return e.ONE_MINUS_SRC_ALPHA;
                                            case t.BlendMode.Additive:
                                                return e.ONE;
                                            case t.BlendMode.Multiply:
                                            case t.BlendMode.Screen:
                                                return e.ONE_MINUS_SRC_ALPHA;
                                            default:
                                                throw new Error("Unknown blend mode: " + n)
                                        }
                                    }, e.getSourceGLBlendMode = function (n, i) {
                                        switch (void 0 === i && (i = !1), n) {
                                            case t.BlendMode.Normal:
                                            case t.BlendMode.Additive:
                                                return i ? e.ONE : e.SRC_ALPHA;
                                            case t.BlendMode.Multiply:
                                                return e.DST_COLOR;
                                            case t.BlendMode.Screen:
                                                return e.ONE;
                                            default:
                                                throw new Error("Unknown blend mode: " + n)
                                        }
                                    }, e.ZERO = 0, e.ONE = 1, e.SRC_COLOR = 768, e.ONE_MINUS_SRC_COLOR = 769, e.SRC_ALPHA = 770, e.ONE_MINUS_SRC_ALPHA = 771, e.DST_ALPHA = 772, e.ONE_MINUS_DST_ALPHA = 773, e.DST_COLOR = 774, e
                                }();
                                e.WebGLBlendModeConverter = i
                            }(t.webgl || (t.webgl = {}))
                        }(i || (i = {})), t.exports = i
                }).call(window)
            }, function (t, e, n) {
                var i = n(0),
                    a = n(11),
                    r = n(204),
                    s = n(7),
                    o = n(218),
                    l = n(219),
                    c = n(220),
                    u = new i({
                        Extends: l,
                        initialize: function (t, e, n, i, r, u, h) {
                            var d, f, p, g = [],
                                v = t.cacheManager.custom.spine;
                            if (s(e)) {
                                var m = e;
                                for (e = a(m, "key"), f = new o(t, {
                                        key: e,
                                        url: a(m, "jsonURL"),
                                        extension: a(m, "jsonExtension", "json"),
                                        xhrSettings: a(m, "jsonXhrSettings")
                                    }), i = a(m, "atlasURL"), r = a(m, "preMultipliedAlpha"), Array.isArray(i) || (i = [i]), d = 0; d < i.length; d++)(p = new c(t, {
                                    key: e + "!" + d,
                                    url: i[d],
                                    extension: a(m, "atlasExtension", "atlas"),
                                    xhrSettings: a(m, "atlasXhrSettings")
                                })).cache = v, g.push(p)
                            } else
                                for (f = new o(t, e, n, u), Array.isArray(i) || (i = [i]), d = 0; d < i.length; d++)(p = new c(t, e + "!" + d, i[d], h)).cache = v, g.push(p);
                            g.unshift(f), l.call(this, t, "spine", e, g), this.config.preMultipliedAlpha = r
                        },
                        onFileComplete: function (t) {
                            var e;
                            if (-1 !== g()(e = this.files).call(e, t) && (this.pending--, "text" === t.type)) {
                                for (var n = t.data.split("\n"), i = [], s = 0; s < n.length; s++) {
                                    var o = n[s];
                                    "" === kr()(o).call(o) && s < n.length - 1 && (o = n[s + 1], i.push(o))
                                }
                                var l = this.config,
                                    c = this.loader,
                                    u = c.baseURL,
                                    h = c.path,
                                    d = c.prefix,
                                    f = a(l, "baseURL", this.baseURL),
                                    p = a(l, "path", t.src.match(/^.*\//))[0],
                                    v = a(l, "prefix", this.prefix),
                                    m = a(l, "textureXhrSettings");
                                c.setBaseURL(f), c.setPath(p), c.setPrefix(v);
                                for (var E = 0; E < i.length; E++) {
                                    var y = i[E],
                                        A = new r(c, y, y, m);
                                    c.keyExists(A) || (this.addToMultiFile(A), c.addFile(A))
                                }
                                c.setBaseURL(u), c.setPath(h), c.setPrefix(d)
                            }
                        },
                        addToCache: function () {
                            if (this.isReadyToProcess()) {
                                var t;
                                this.files[0].addToCache();
                                for (var e = "", n = "", i = !!this.config.preMultipliedAlpha, a = this.loader.textureManager, r = 1; r < this.files.length; r++) {
                                    var s = this.files[r];
                                    if ("text" === s.type) e = s.key.replace(/![\d]$/, ""), t = s.cache, n = et()(n).call(n, s.data);
                                    else {
                                        var o, l = kr()(o = s.key).call(o),
                                            c = g()(l).call(l, "!"),
                                            u = l.substr(c + 1);
                                        a.exists(u) || a.addImage(u, s.data)
                                    }
                                    s.pendingDestroy()
                                }
                                t.add(e, {
                                    preMultipliedAlpha: i,
                                    data: n,
                                    prefix: this.prefix
                                }), this.complete = !0
                            }
                        }
                    });
                t.exports = u
            }, function (t, e, n) {
                var i = n(0),
                    a = n(15),
                    r = n(21),
                    s = n(22),
                    o = n(11),
                    l = n(7),
                    c = new i({
                        Extends: r,
                        initialize: function t(e, n, i, a, s) {
                            var c, u = "png";
                            if (l(n)) {
                                var h = n;
                                n = o(h, "key"), i = o(h, "url"), c = o(h, "normalMap"), a = o(h, "xhrSettings"), u = o(h, "extension", u), s = o(h, "frameConfig")
                            }
                            Array.isArray(i) && (c = i[1], i = i[0]);
                            var d = {
                                type: "image",
                                cache: e.textureManager,
                                extension: u,
                                responseType: "blob",
                                key: n,
                                url: i,
                                xhrSettings: a,
                                config: s
                            };
                            if (r.call(this, e, d), c) {
                                var f = new t(e, this.key, c, a, s);
                                f.type = "normalMap", this.setLink(f), e.addFile(f)
                            }
                        },
                        onProcess: function () {
                            this.state = a.FILE_PROCESSING, this.data = new Image, this.data.crossOrigin = this.crossOrigin;
                            var t = this;
                            this.data.onload = function () {
                                r.revokeObjectURL(t.data), t.onProcessComplete()
                            }, this.data.onerror = function () {
                                r.revokeObjectURL(t.data), t.onProcessError()
                            }, r.createObjectURL(this.data, this.xhrLoader.response, "image/png")
                        },
                        addToCache: function () {
                            var t, e = this.linkFile;
                            e && e.state === a.FILE_COMPLETE ? (t = "image" === this.type ? this.cache.addImage(this.key, this.data, e.data) : this.cache.addImage(e.key, e.data, this.data), this.pendingDestroy(t), e.pendingDestroy(t)) : e || (t = this.cache.addImage(this.key, this.data), this.pendingDestroy(t))
                        }
                    });
                s.register("image", (function (t, e, n) {
                    if (Array.isArray(t))
                        for (var i = 0; i < t.length; i++) this.addFile(new c(this, t[i]));
                    else this.addFile(new c(this, t, e, n));
                    return this
                })), t.exports = c
            }, function (t, e, n) {
                t.exports = {
                    ADD: n(206),
                    COMPLETE: n(207),
                    FILE_COMPLETE: n(208),
                    FILE_KEY_COMPLETE: n(209),
                    FILE_LOAD_ERROR: n(210),
                    FILE_LOAD: n(211),
                    FILE_PROGRESS: n(212),
                    POST_PROCESS: n(213),
                    PROGRESS: n(214),
                    START: n(215)
                }
            }, function (t, e) {
                t.exports = "addfile"
            }, function (t, e) {
                t.exports = "complete"
            }, function (t, e) {
                t.exports = "filecomplete"
            }, function (t, e) {
                t.exports = "filecomplete-"
            }, function (t, e) {
                t.exports = "loaderror"
            }, function (t, e) {
                t.exports = "load"
            }, function (t, e) {
                t.exports = "fileprogress"
            }, function (t, e) {
                t.exports = "postprocess"
            }, function (t, e) {
                t.exports = "progress"
            }, function (t, e) {
                t.exports = "start"
            }, function (t, e) {
                t.exports = function (t, e) {
                    return !!t.url && (t.url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/) ? t.url : e + t.url)
                }
            }, function (t, e, n) {
                var i = n(45);
                t.exports = function (t, e) {
                    var n = i(e, t.xhrSettings),
                        a = new XMLHttpRequest;
                    if (a.open("GET", t.src, n.async, n.user, n.password), a.responseType = t.xhrSettings.responseType, a.timeout = n.timeout, n.headers)
                        for (var r in n.headers) a.setRequestHeader(r, n.headers[r]);
                    return n.header && n.headerValue && a.setRequestHeader(n.header, n.headerValue), n.requestedWith && a.setRequestHeader("X-Requested-With", n.requestedWith), n.overrideMimeType && a.overrideMimeType(n.overrideMimeType), n.withCredentials && (a.withCredentials = !0), a.onload = t.onLoad.bind(t, a), a.onerror = t.onError.bind(t, a), a.onprogress = t.onProgress.bind(t), a.send(), a
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(15),
                    r = n(21),
                    s = n(22),
                    o = n(11),
                    l = n(10),
                    c = n(7),
                    u = new i({
                        Extends: r,
                        initialize: function (t, e, n, i, s) {
                            var u = "json";
                            if (c(e)) {
                                var h = e;
                                e = o(h, "key"), n = o(h, "url"), i = o(h, "xhrSettings"), u = o(h, "extension", u), s = o(h, "dataKey", s)
                            }
                            var d = {
                                type: "json",
                                cache: t.cacheManager.json,
                                extension: u,
                                responseType: "text",
                                key: e,
                                url: n,
                                xhrSettings: i,
                                config: s
                            };
                            r.call(this, t, d), c(n) && (this.data = s ? l(n, s) : n, this.state = a.FILE_POPULATED)
                        },
                        onProcess: function () {
                            if (this.state !== a.FILE_POPULATED) {
                                this.state = a.FILE_PROCESSING;
                                try {
                                    var t = JSON.parse(this.xhrLoader.responseText)
                                } catch (t) {
                                    throw this.onProcessError(), t
                                }
                                var e = this.config;
                                this.data = "string" == typeof e ? l(t, e, t) : t
                            }
                            this.onProcessComplete()
                        }
                    });
                s.register("json", (function (t, e, n, i) {
                    if (Array.isArray(t))
                        for (var a = 0; a < t.length; a++) this.addFile(new u(this, t[a]));
                    else this.addFile(new u(this, t, e, i, n));
                    return this
                })), t.exports = u
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t, e, n, i) {
                        var a = [];
                        i.forEach((function (t) {
                            t && a.push(t)
                        })), this.loader = t, this.type = e, this.key = n, this.multiKeyIndex = t.multiKeyIndex++, this.files = a, this.complete = !1, this.pending = a.length, this.failed = 0, this.config = {}, this.baseURL = t.baseURL, this.path = t.path, this.prefix = t.prefix;
                        for (var r = 0; r < a.length; r++) a[r].multiFile = this
                    },
                    isReadyToProcess: function () {
                        return 0 === this.pending && 0 === this.failed && !this.complete
                    },
                    addToMultiFile: function (t) {
                        return this.files.push(t), t.multiFile = this, this.pending++, this.complete = !1, this
                    },
                    onFileComplete: function (t) {
                        var e; - 1 !== g()(e = this.files).call(e, t) && this.pending--
                    },
                    onFileFailed: function (t) {
                        var e; - 1 !== g()(e = this.files).call(e, t) && this.failed++
                    }
                });
                t.exports = i
            }, function (t, e, n) {
                var i = n(0),
                    a = n(15),
                    r = n(21),
                    s = n(22),
                    o = n(11),
                    l = n(7),
                    c = new i({
                        Extends: r,
                        initialize: function (t, e, n, i) {
                            var a = "text",
                                s = "txt",
                                c = t.cacheManager.text;
                            if (l(e)) {
                                var u = e;
                                e = o(u, "key"), n = o(u, "url"), i = o(u, "xhrSettings"), s = o(u, "extension", s), a = o(u, "type", a), c = o(u, "cache", c)
                            }
                            var h = {
                                type: a,
                                cache: c,
                                extension: s,
                                responseType: "text",
                                key: e,
                                url: n,
                                xhrSettings: i
                            };
                            r.call(this, t, h)
                        },
                        onProcess: function () {
                            this.state = a.FILE_PROCESSING, this.data = this.xhrLoader.responseText, this.onProcessComplete()
                        }
                    });
                s.register("text", (function (t, e, n) {
                    if (Array.isArray(t))
                        for (var i = 0; i < t.length; i++) this.addFile(new c(this, t[i]));
                    else this.addFile(new c(this, t, e, n));
                    return this
                })), t.exports = c
            }, function (t, e, n) {
                var i = n(28),
                    a = n(3),
                    r = n(0),
                    s = n(47),
                    o = n(48),
                    l = n(49),
                    c = n(50),
                    u = n(51),
                    h = n(52),
                    d = n(8),
                    f = n(19),
                    p = n(53),
                    g = n(9),
                    v = n(243),
                    m = n(250),
                    E = new r({
                        Extends: p,
                        Mixins: [s, o, l, c, u, h, m],
                        initialize: function (t, e, n, i, a, r, s) {
                            p.call(this, t, "Spine"), this.plugin = e, this.skeleton = null, this.skeletonData = null, this.state = null, this.stateData = null, this.root = null, this.bounds = null, this.drawDebug = !1, this.timeScale = 1, this.displayOriginX = 0, this.displayOriginY = 0, this.preMultipliedAlpha = !1, this.blendMode = -1, this.setPosition(n, i), a && this.setSkeleton(a, r, s)
                        },
                        willRender: function (t, e) {
                            var n = !this.skeleton || !(15 !== this.renderFlags || 0 !== this.cameraFilter && this.cameraFilter & t.id);
                            if (!e && !n && this.parentContainer) {
                                var i = this.plugin,
                                    a = i.sceneRenderer;
                                i.gl && a.batcher.isDrawing && (a.end(), i.renderer.pipelines.rebind())
                            }
                            return n
                        },
                        setAlpha: function (t, e) {
                            if (void 0 === t && (t = 1), e) {
                                var n = this.findSlot(e);
                                n && (n.color.a = a(t, 0, 1))
                            } else this.alpha = t;
                            return this
                        },
                        alpha: {
                            get: function () {
                                return this.skeleton.color.a
                            },
                            set: function (t) {
                                var e = a(t, 0, 1);
                                this.skeleton && (this.skeleton.color.a = e), 0 === e ? this.renderFlags &= -3 : this.renderFlags |= 2
                            }
                        },
                        red: {
                            get: function () {
                                return this.skeleton.color.r
                            },
                            set: function (t) {
                                var e = a(t, 0, 1);
                                this.skeleton && (this.skeleton.color.r = e)
                            }
                        },
                        green: {
                            get: function () {
                                return this.skeleton.color.g
                            },
                            set: function (t) {
                                var e = a(t, 0, 1);
                                this.skeleton && (this.skeleton.color.g = e)
                            }
                        },
                        blue: {
                            get: function () {
                                return this.skeleton.color.b
                            },
                            set: function (t) {
                                var e = a(t, 0, 1);
                                this.skeleton && (this.skeleton.color.b = e)
                            }
                        },
                        setColor: function (t, e) {
                            void 0 === t && (t = 16777215);
                            var n = (t >> 16 & 255) / 255,
                                i = (t >> 8 & 255) / 255,
                                a = (255 & t) / 255,
                                r = t > 16777215 ? (t >>> 24) / 255 : null,
                                s = this.skeleton;
                            if (e) {
                                var o = this.findSlot(e);
                                o && (s = o)
                            }
                            return s.color.r = n, s.color.g = i, s.color.b = a, null !== r && (s.color.a = r), this
                        },
                        setSkeletonFromJSON: function (t, e, n, i) {
                            return this.setSkeleton(t, e, n, i)
                        },
                        setSkeleton: function (t, e, n, i) {
                            this.state && (this.state.clearListeners(), this.state.clearListenerNotifications());
                            var a = this.plugin.createSkeleton(t, i);
                            this.skeletonData = a.skeletonData, this.preMultipliedAlpha = a.preMultipliedAlpha;
                            var r = a.skeleton;
                            return r.setSkin(), r.setToSetupPose(), this.skeleton = r, a = this.plugin.createAnimationState(r), this.state && (this.state.clearListeners(), this.state.clearListenerNotifications()), this.state = a.state, this.stateData = a.stateData, this.state.addListener({
                                event: this.onEvent.bind(this),
                                complete: this.onComplete.bind(this),
                                start: this.onStart.bind(this),
                                end: this.onEnd.bind(this),
                                dispose: this.onDispose.bind(this),
                                interrupted: this.onInterrupted.bind(this)
                            }), e && this.setAnimation(0, e, n), this.root = this.getRootBone(), this.root && (this.root.rotation = g(d(this.rotation)) + 90), this.state.apply(r), r.updateCache(), this.updateSize()
                        },
                        onComplete: function (t) {
                            this.emit(v.COMPLETE, t)
                        },
                        onDispose: function (t) {
                            this.emit(v.DISPOSE, t)
                        },
                        onEnd: function (t) {
                            this.emit(v.END, t)
                        },
                        onEvent: function (t, e) {
                            this.emit(v.EVENT, t, e)
                        },
                        onInterrupted: function (t) {
                            this.emit(v.INTERRUPTED, t)
                        },
                        onStart: function (t) {
                            this.emit(v.START, t)
                        },
                        refresh: function () {
                            return this.root && (this.root.rotation = g(d(this.rotation)) + 90), this.updateSize(), this.skeleton.updateCache(), this
                        },
                        setSize: function (t, e, n, i) {
                            var a = this.skeleton;
                            return void 0 === t && (t = a.data.width), void 0 === e && (e = a.data.height), void 0 === n && (n = 0), void 0 === i && (i = 0), this.width = t, this.height = e, this.displayOriginX = a.x - n, this.displayOriginY = a.y - i, this
                        },
                        setOffset: function (t, e) {
                            var n = this.skeleton;
                            return void 0 === t && (t = 0), void 0 === e && (e = 0), this.displayOriginX = n.x - t, this.displayOriginY = n.y - e, this
                        },
                        updateSize: function () {
                            var t = this.skeleton,
                                e = this.plugin.renderer.height,
                                n = this.scaleX,
                                i = this.scaleY;
                            t.x = this.x, t.y = e - this.y, t.scaleX = 1, t.scaleY = 1, t.updateWorldTransform();
                            var a = this.getBounds();
                            return this.width = a.size.x, this.height = a.size.y, this.displayOriginX = this.x - a.offset.x, this.displayOriginY = this.y - (e - (this.height + a.offset.y)), t.scaleX = n, t.scaleY = i, t.updateWorldTransform(), this
                        },
                        scaleX: {
                            get: function () {
                                return this._scaleX
                            },
                            set: function (t) {
                                this._scaleX = t, this.refresh()
                            }
                        },
                        scaleY: {
                            get: function () {
                                return this._scaleY
                            },
                            set: function (t) {
                                this._scaleY = t, this.refresh()
                            }
                        },
                        getBoneList: function () {
                            var t = [],
                                e = this.skeletonData;
                            if (e)
                                for (var n = 0; n < e.bones.length; n++) t.push(e.bones[n].name);
                            return t
                        },
                        getSkinList: function () {
                            var t = [],
                                e = this.skeletonData;
                            if (e)
                                for (var n = 0; n < e.skins.length; n++) t.push(e.skins[n].name);
                            return t
                        },
                        getSlotList: function () {
                            for (var t = [], e = this.skeleton, n = 0; n < e.slots.length; n++) t.push(e.slots[n].data.name);
                            return t
                        },
                        getAnimationList: function () {
                            var t = [],
                                e = this.skeletonData;
                            if (e)
                                for (var n = 0; n < e.animations.length; n++) t.push(e.animations[n].name);
                            return t
                        },
                        getCurrentAnimation: function (t) {
                            void 0 === t && (t = 0);
                            var e = this.state.getCurrent(t);
                            if (e) return e.animation
                        },
                        play: function (t, e, n) {
                            return this.setAnimation(0, t, e, n), this
                        },
                        setAnimation: function (t, e, n, i) {
                            if (void 0 === n && (n = !1), void 0 === i && (i = !1), i && this.state) {
                                var a = this.state.getCurrent(t);
                                if (a && a.animation.name === e && !a.isComplete()) return
                            }
                            if (this.findAnimation(e)) return this.state.setAnimation(t, e, n)
                        },
                        addAnimation: function (t, e, n, i) {
                            return void 0 === n && (n = !1), void 0 === i && (i = 0), this.state.addAnimation(t, e, n, i)
                        },
                        setEmptyAnimation: function (t, e) {
                            return this.state.setEmptyAnimation(t, e)
                        },
                        clearTrack: function (t) {
                            return this.state.clearTrack(t), this
                        },
                        clearTracks: function () {
                            return this.state.clearTracks(), this
                        },
                        setSkinByName: function (t) {
                            var e = this.skeleton;
                            return e.setSkinByName(t), e.setSlotsToSetupPose(), this.state.apply(e), this
                        },
                        setSkin: function (t) {
                            var e = this.skeleton;
                            return e.setSkin(t), e.setSlotsToSetupPose(), this.state.apply(e), this
                        },
                        setMix: function (t, e, n) {
                            return this.stateData.setMix(t, e, n), this
                        },
                        getAttachment: function (t, e) {
                            return this.skeleton.getAttachment(t, e)
                        },
                        getAttachmentByName: function (t, e) {
                            return this.skeleton.getAttachmentByName(t, e)
                        },
                        setAttachment: function (t, e) {
                            if (Array.isArray(t) && Array.isArray(e) && t.length === e.length)
                                for (var n = 0; n < t.length; n++) this.skeleton.setAttachment(t[n], e[n]);
                            else this.skeleton.setAttachment(t, e);
                            return this
                        },
                        setToSetupPose: function () {
                            return this.skeleton.setToSetupPose(), this
                        },
                        setSlotsToSetupPose: function () {
                            return this.skeleton.setSlotsToSetupPose(), this
                        },
                        setBonesToSetupPose: function () {
                            return this.skeleton.setBonesToSetupPose(), this
                        },
                        getRootBone: function () {
                            return this.skeleton.getRootBone()
                        },
                        angleBoneToXY: function (t, e, n, r, s, o) {
                            void 0 === r && (r = 0), void 0 === s && (s = 0), void 0 === o && (o = 360);
                            var l = this.plugin.renderer.height,
                                c = d(i(t.worldX, l - t.worldY, e, n) + f(r));
                            return t.rotation = a(g(c), s, o), this
                        },
                        findBone: function (t) {
                            return this.skeleton.findBone(t)
                        },
                        findBoneIndex: function (t) {
                            return this.skeleton.findBoneIndex(t)
                        },
                        findSlot: function (t) {
                            return this.skeleton.findSlot(t)
                        },
                        findSlotIndex: function (t) {
                            return this.skeleton.findSlotIndex(t)
                        },
                        findSkin: function (t) {
                            return this.skeletonData.findSkin(t)
                        },
                        findEvent: function (t) {
                            return this.skeletonData.findEvent(t)
                        },
                        findAnimation: function (t) {
                            return this.skeletonData.findAnimation(t)
                        },
                        findIkConstraint: function (t) {
                            return this.skeletonData.findIkConstraint(t)
                        },
                        findTransformConstraint: function (t) {
                            return this.skeletonData.findTransformConstraint(t)
                        },
                        findPathConstraint: function (t) {
                            return this.skeletonData.findPathConstraint(t)
                        },
                        findPathConstraintIndex: function (t) {
                            return this.skeletonData.findPathConstraintIndex(t)
                        },
                        getBounds: function () {
                            return this.plugin.getBounds(this.skeleton)
                        },
                        preUpdate: function (t, e) {
                            var n = this.skeleton;
                            this.state.update(e / 1e3 * this.timeScale), this.state.apply(n)
                        },
                        preDestroy: function () {
                            this.state && (this.state.clearListeners(), this.state.clearListenerNotifications()), this.plugin = null, this.skeleton = null, this.skeletonData = null, this.state = null, this.stateData = null
                        }
                    });
                t.exports = E
            }, function (t, e, n) {
                var i = n(0),
                    a = n(223),
                    r = new i({
                        initialize: function (t, e) {
                            this.parent = t, this.events = e, e || (this.events = t.events ? t.events : t), this.list = {}, this.values = {}, this._frozen = !1, !t.hasOwnProperty("sys") && this.events && this.events.once(a.DESTROY, this.destroy, this)
                        },
                        get: function (t) {
                            var e = this.list;
                            if (Array.isArray(t)) {
                                for (var n = [], i = 0; i < t.length; i++) n.push(e[t[i]]);
                                return n
                            }
                            return e[t]
                        },
                        getAll: function () {
                            var t = {};
                            for (var e in this.list) this.list.hasOwnProperty(e) && (t[e] = this.list[e]);
                            return t
                        },
                        query: function (t) {
                            var e = {};
                            for (var n in this.list) this.list.hasOwnProperty(n) && n.match(t) && (e[n] = this.list[n]);
                            return e
                        },
                        set: function (t, e) {
                            if (this._frozen) return this;
                            if ("string" == typeof t) return this.setValue(t, e);
                            for (var n in t) this.setValue(n, t[n]);
                            return this
                        },
                        inc: function (t, e) {
                            if (this._frozen) return this;
                            void 0 === e && (e = 1);
                            var n = this.get(t);
                            return void 0 === n && (n = 0), this.set(t, n + e), this
                        },
                        toggle: function (t) {
                            return this._frozen || this.set(t, !this.get(t)), this
                        },
                        setValue: function (t, e) {
                            if (this._frozen) return this;
                            if (this.has(t)) Nr()(this)[t] = e;
                            else {
                                var n = this,
                                    i = this.list,
                                    r = this.events,
                                    s = this.parent;
                                ur()(Nr()(this), t, {
                                    enumerable: !0,
                                    configurable: !0,
                                    get: function () {
                                        return i[t]
                                    },
                                    set: function (e) {
                                        if (!n._frozen) {
                                            var o = i[t];
                                            i[t] = e, r.emit(a.CHANGE_DATA, s, t, e, o), r.emit(a.CHANGE_DATA_KEY + t, s, e, o)
                                        }
                                    }
                                }), i[t] = e, r.emit(a.SET_DATA, s, t, e)
                            }
                            return this
                        },
                        each: function (t, e) {
                            for (var n = [this.parent, null, void 0], i = 1; i < arguments.length; i++) n.push(arguments[i]);
                            for (var a in this.list) n[1] = a, n[2] = this.list[a], t.apply(e, n);
                            return this
                        },
                        merge: function (t, e) {
                            for (var n in void 0 === e && (e = !0), t) t.hasOwnProperty(n) && (e || !e && !this.has(n)) && this.setValue(n, t[n]);
                            return this
                        },
                        remove: function (t) {
                            if (this._frozen) return this;
                            if (!Array.isArray(t)) return this.removeValue(t);
                            for (var e = 0; e < t.length; e++) this.removeValue(t[e]);
                            return this
                        },
                        removeValue: function (t) {
                            if (this.has(t)) {
                                var e = this.list[t];
                                delete this.list[t], delete Nr()(this)[t], this.events.emit(a.REMOVE_DATA, this.parent, t, e)
                            }
                            return this
                        },
                        pop: function (t) {
                            var e = void 0;
                            return !this._frozen && this.has(t) && (e = this.list[t], delete this.list[t], delete Nr()(this)[t], this.events.emit(a.REMOVE_DATA, this.parent, t, e)), e
                        },
                        has: function (t) {
                            return this.list.hasOwnProperty(t)
                        },
                        setFreeze: function (t) {
                            return this._frozen = t, this
                        },
                        reset: function () {
                            for (var t in this.list) delete this.list[t], delete Nr()(this)[t];
                            return this._frozen = !1, this
                        },
                        destroy: function () {
                            this.reset(), this.events.off(a.CHANGE_DATA), this.events.off(a.SET_DATA), this.events.off(a.REMOVE_DATA), this.parent = null
                        },
                        freeze: {
                            get: function () {
                                return this._frozen
                            },
                            set: function (t) {
                                this._frozen = !!t
                            }
                        },
                        count: {
                            get: function () {
                                var t = 0;
                                for (var e in this.list) void 0 !== this.list[e] && t++;
                                return t
                            }
                        }
                    });
                t.exports = r
            }, function (t, e, n) {
                t.exports = {
                    CHANGE_DATA: n(224),
                    CHANGE_DATA_KEY: n(225),
                    DESTROY: n(226),
                    REMOVE_DATA: n(227),
                    SET_DATA: n(228)
                }
            }, function (t, e) {
                t.exports = "changedata"
            }, function (t, e) {
                t.exports = "changedata-"
            }, function (t, e) {
                t.exports = "destroy"
            }, function (t, e) {
                t.exports = "removedata"
            }, function (t, e) {
                t.exports = "setdata"
            }, function (t, e, n) {
                var i = Object.prototype.hasOwnProperty,
                    a = "~";

                function r() {}

                function o(t, e, n) {
                    this.fn = t, this.context = e, this.once = n || !1
                }

                function l(t, e, n, i, r) {
                    if ("function" != typeof n) throw new TypeError("The listener must be a function");
                    var s = new o(n, i || t, r),
                        l = a ? a + e : e;
                    return t._events[l] ? t._events[l].fn ? t._events[l] = [t._events[l], s] : t._events[l].push(s) : (t._events[l] = s, t._eventsCount++), t
                }

                function c(t, e) {
                    0 == --t._eventsCount ? t._events = new r : delete t._events[e]
                }

                function u() {
                    this._events = new r, this._eventsCount = 0
                }
                Object.create && (r.prototype = Object.create(null), (new r).__proto__ || (a = !1)), u.prototype.eventNames = function () {
                    var t, e, n = [];
                    if (0 === this._eventsCount) return n;
                    for (e in t = this._events) i.call(t, e) && n.push(a ? s()(e).call(e, 1) : e);
                    return Br() ? et()(n).call(n, Br()(t)) : n
                }, u.prototype.listeners = function (t) {
                    var e = a ? a + t : t,
                        n = this._events[e];
                    if (!n) return [];
                    if (n.fn) return [n.fn];
                    for (var i = 0, r = n.length, s = new Array(r); i < r; i++) s[i] = n[i].fn;
                    return s
                }, u.prototype.listenerCount = function (t) {
                    var e = a ? a + t : t,
                        n = this._events[e];
                    return n ? n.fn ? 1 : n.length : 0
                }, u.prototype.emit = function (t, e, n, i, r, s) {
                    var o = a ? a + t : t;
                    if (!this._events[o]) return !1;
                    var l, c, u = this._events[o],
                        h = arguments.length;
                    if (u.fn) {
                        switch (u.once && this.removeListener(t, u.fn, void 0, !0), h) {
                            case 1:
                                return u.fn.call(u.context), !0;
                            case 2:
                                return u.fn.call(u.context, e), !0;
                            case 3:
                                return u.fn.call(u.context, e, n), !0;
                            case 4:
                                return u.fn.call(u.context, e, n, i), !0;
                            case 5:
                                return u.fn.call(u.context, e, n, i, r), !0;
                            case 6:
                                return u.fn.call(u.context, e, n, i, r, s), !0
                        }
                        for (c = 1, l = new Array(h - 1); c < h; c++) l[c - 1] = arguments[c];
                        u.fn.apply(u.context, l)
                    } else {
                        var d, f = u.length;
                        for (c = 0; c < f; c++) switch (u[c].once && this.removeListener(t, u[c].fn, void 0, !0), h) {
                            case 1:
                                u[c].fn.call(u[c].context);
                                break;
                            case 2:
                                u[c].fn.call(u[c].context, e);
                                break;
                            case 3:
                                u[c].fn.call(u[c].context, e, n);
                                break;
                            case 4:
                                u[c].fn.call(u[c].context, e, n, i);
                                break;
                            default:
                                if (!l)
                                    for (d = 1, l = new Array(h - 1); d < h; d++) l[d - 1] = arguments[d];
                                u[c].fn.apply(u[c].context, l)
                        }
                    }
                    return !0
                }, u.prototype.on = function (t, e, n) {
                    return l(this, t, e, n, !1)
                }, u.prototype.once = function (t, e, n) {
                    return l(this, t, e, n, !0)
                }, u.prototype.removeListener = function (t, e, n, i) {
                    var r = a ? a + t : t;
                    if (!this._events[r]) return this;
                    if (!e) return c(this, r), this;
                    var s = this._events[r];
                    if (s.fn) s.fn !== e || i && !s.once || n && s.context !== n || c(this, r);
                    else {
                        for (var o = 0, l = [], u = s.length; o < u; o++)(s[o].fn !== e || i && !s[o].once || n && s[o].context !== n) && l.push(s[o]);
                        l.length ? this._events[r] = 1 === l.length ? l[0] : l : c(this, r)
                    }
                    return this
                }, u.prototype.removeAllListeners = function (t) {
                    var e;
                    return t ? (e = a ? a + t : t, this._events[e] && c(this, e)) : (this._events = new r, this._eventsCount = 0), this
                }, u.prototype.off = u.prototype.removeListener, u.prototype.addListener = u.prototype.on, u.prefixed = a, u.EventEmitter = u, t.exports = u
            }, function (t, e) {
                t.exports = "addedtoscene"
            }, function (t, e) {
                t.exports = "destroy"
            }, function (t, e) {
                t.exports = "removedfromscene"
            }, function (t, e) {
                t.exports = "complete"
            }, function (t, e) {
                t.exports = "created"
            }, function (t, e) {
                t.exports = "error"
            }, function (t, e) {
                t.exports = "loop"
            }, function (t, e) {
                t.exports = "play"
            }, function (t, e) {
                t.exports = "seeked"
            }, function (t, e) {
                t.exports = "seeking"
            }, function (t, e) {
                t.exports = "stop"
            }, function (t, e) {
                t.exports = "timeout"
            }, function (t, e) {
                t.exports = "unlocked"
            }, function (t, e, n) {
                t.exports = {
                    COMPLETE: n(244),
                    DISPOSE: n(245),
                    END: n(246),
                    EVENT: n(247),
                    INTERRUPTED: n(248),
                    START: n(249)
                }
            }, function (t, e) {
                t.exports = "complete"
            }, function (t, e) {
                t.exports = "dispose"
            }, function (t, e) {
                t.exports = "end"
            }, function (t, e) {
                t.exports = "event"
            }, function (t, e) {
                t.exports = "interrupted"
            }, function (t, e) {
                t.exports = "start"
            }, function (t, e, n) {
                var i = n(1),
                    a = n(1),
                    r = n(1);
                i = n(251), r = n(252), a = n(253), t.exports = {
                    renderWebGL: i,
                    renderCanvas: a,
                    renderDirect: r
                }
            }, function (t, e, n) {
                var i = n(3),
                    a = n(8),
                    r = n(56),
                    s = n(9),
                    o = n(6);
                t.exports = function (t, e, n, l, c) {
                    var u = e.plugin,
                        h = e.skeleton,
                        d = u.sceneRenderer;
                    t.newType && (t.pipelines.clear(), d.begin());
                    var f = e.scrollFactorX,
                        p = e.scrollFactorY,
                        g = h.color.a;
                    c && (e.scrollFactorX = c.scrollFactorX, e.scrollFactorY = c.scrollFactorY, h.color.a = i(g * c.alpha, 0, 1)), n.addToRenderList(e);
                    var v = r(e, n, l).calc,
                        m = t.height;
                    if (h.x = v.tx, h.y = m - v.ty, h.scaleX = v.scaleX, h.scaleY = v.scaleY, e.scaleX < 0 ? (h.scaleX *= -1, e.root.rotation = o(s(v.rotationNormalized) - 180, 0, 360)) : e.root.rotation = o(s(a(v.rotationNormalized)) + 90, 0, 360), e.scaleY < 0 && (h.scaleY *= -1, e.scaleX < 0 ? e.root.rotation -= 2 * s(v.rotationNormalized) : e.root.rotation += 2 * s(v.rotationNormalized)), h.updateWorldTransform(), d.drawSkeleton(h, e.preMultipliedAlpha), c && (e.scrollFactorX = f, e.scrollFactorY = p, h.color.a = g), u.drawDebug || e.drawDebug) {
                        var E = h.x,
                            y = h.y;
                        h.x = 0, h.y = 0, d.drawSkeletonDebug(h, e.preMultipliedAlpha), h.x = E, h.y = y
                    }
                    t.nextTypeMatch || (d.end(), t.pipelines.rebind())
                }
            }, function (t, e, n) {
                var i = n(3),
                    a = n(8),
                    r = n(56),
                    s = n(9),
                    o = n(6);
                t.exports = function (t, e, n, l, c) {
                    var u = e.plugin,
                        h = e.skeleton,
                        d = u.sceneRenderer;
                    t.pipelines.clear(), d.begin();
                    var f = e.scrollFactorX,
                        p = e.scrollFactorY,
                        g = h.color.a;
                    c && (e.scrollFactorX = c.scrollFactorX, e.scrollFactorY = c.scrollFactorY, h.color.a = i(g * c.alpha, 0, 1)), n.addToRenderList(e);
                    var v = r(e, n, l).calc,
                        m = t.height;
                    if (h.x = v.tx, h.y = m - v.ty, h.scaleX = v.scaleX, h.scaleY = v.scaleY, e.scaleX < 0 ? (h.scaleX *= -1, e.root.rotation = o(s(v.rotationNormalized) - 180, 0, 360)) : e.root.rotation = o(s(a(v.rotationNormalized)) + 90, 0, 360), e.scaleY < 0 && (h.scaleY *= -1, e.scaleX < 0 ? e.root.rotation -= 2 * s(v.rotationNormalized) : e.root.rotation += 2 * s(v.rotationNormalized)), h.updateWorldTransform(), d.drawSkeleton(h, e.preMultipliedAlpha), c && (e.scrollFactorX = f, e.scrollFactorY = p, h.color.a = g), u.drawDebug || e.drawDebug) {
                        var E = h.x,
                            y = h.y;
                        h.x = 0, h.y = 0, d.drawSkeletonDebug(h, e.preMultipliedAlpha), h.x = E, h.y = y
                    }
                    d.end(), t.pipelines.rebind()
                }
            }, function (t, e, n) {
                var i = n(8),
                    a = n(9),
                    r = n(6);
                t.exports = function (t, e, n, s) {
                    var o = t.currentContext,
                        l = e.plugin,
                        c = e.skeleton,
                        u = l.skeletonRenderer,
                        h = t._tempMatrix1,
                        d = t._tempMatrix2,
                        f = t._tempMatrix3;
                    n.addToRenderList(e), d.applyITRS(e.x, e.y, e.rotation, Math.abs(e.scaleX), Math.abs(e.scaleY)), h.copyFrom(n.matrix), s ? (h.multiplyWithOffset(s, -n.scrollX * e.scrollFactorX, -n.scrollY * e.scrollFactorY), d.e = e.x, d.f = e.y, h.multiply(d, f)) : (d.e -= n.scrollX * e.scrollFactorX, d.f -= n.scrollY * e.scrollFactorY, h.multiply(d, f)), c.x = f.tx, c.y = f.ty, c.scaleX = f.scaleX, c.scaleY = -1 * f.scaleY, e.scaleX < 0 ? (c.scaleX *= -1, e.root.rotation = a(f.rotationNormalized)) : e.root.rotation = r(a(i(f.rotationNormalized)) + 90, 0, 360), e.scaleY < 0 && (c.scaleY *= -1, e.scaleX < 0 ? e.root.rotation -= 2 * a(f.rotationNormalized) : e.root.rotation += 2 * a(f.rotationNormalized)), n.renderToTexture && (c.y = f.ty, c.scaleY *= -1), c.updateWorldTransform(), u.ctx = o, u.debugRendering = l.drawDebug || e.drawDebug, o.save(), u.draw(c), o.restore()
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(255),
                    r = n(347),
                    s = new i({
                        Extends: a,
                        Mixins: [r],
                        initialize: function (t, e, n, i, r) {
                            a.call(this, t, n, i, r), this.type = "Spine", this.plugin = e
                        },
                        preDestroy: function () {
                            this.removeAll(!!this.exclusive), this.localTransform.destroy(), this.tempTransformMatrix.destroy(), this.list = [], this._displayList = null, this.plugin = null
                        }
                    });
                t.exports = s
            }, function (t, e, n) {
                var i = n(256),
                    a = n(17),
                    r = n(0),
                    o = n(293),
                    l = n(55),
                    c = n(53),
                    u = n(25),
                    h = n(343),
                    d = n(346),
                    f = n(2),
                    p = new r({
                        Extends: c,
                        Mixins: [o.AlphaSingle, o.BlendMode, o.ComputedSize, o.Depth, o.Mask, o.Pipeline, o.Transform, o.Visible, h],
                        initialize: function (t, e, n, i) {
                            c.call(this, t, "Container"), this.list = [], this.exclusive = !0, this.maxSize = -1, this.position = 0, this.localTransform = new o.TransformMatrix, this.tempTransformMatrix = new o.TransformMatrix, this._sortKey = "", this._sysEvents = t.sys.events, this.scrollFactorX = 1, this.scrollFactorY = 1, this.initPipeline(), this.setPosition(e, n), this.clearAlpha(), this.setBlendMode(a.SKIP_CHECK), i && this.add(i)
                        },
                        originX: {
                            get: function () {
                                return .5
                            }
                        },
                        originY: {
                            get: function () {
                                return .5
                            }
                        },
                        displayOriginX: {
                            get: function () {
                                return .5 * this.width
                            }
                        },
                        displayOriginY: {
                            get: function () {
                                return .5 * this.height
                            }
                        },
                        setExclusive: function (t) {
                            return void 0 === t && (t = !0), this.exclusive = t, this
                        },
                        getBounds: function (t) {
                            if (void 0 === t && (t = new u), t.setTo(this.x, this.y, 0, 0), this.parentContainer) {
                                var e = this.parentContainer.getBoundsTransformMatrix().transformPoint(this.x, this.y);
                                t.setTo(e.x, e.y, 0, 0)
                            }
                            if (this.list.length > 0) {
                                var n = this.list,
                                    i = new u,
                                    a = !1;
                                t.setEmpty();
                                for (var r = 0; r < n.length; r++) {
                                    var s = n[r];
                                    s.getBounds && (s.getBounds(i), a ? d(i, t, t) : (t.setTo(i.x, i.y, i.width, i.height), a = !0))
                                }
                            }
                            return t
                        },
                        addHandler: function (t) {
                            t.once(l.DESTROY, this.remove, this), this.exclusive && (t.parentContainer && t.parentContainer.remove(t), t.removeFromDisplayList(), t.parentContainer = this)
                        },
                        removeHandler: function (t) {
                            t.off(l.DESTROY, this.remove), this.exclusive && (t.parentContainer = null, t.addToDisplayList())
                        },
                        pointToContainer: function (t, e) {
                            void 0 === e && (e = new f), this.parentContainer ? this.parentContainer.pointToContainer(t, e) : e = new f(t.x, t.y);
                            var n = this.tempTransformMatrix;
                            return n.applyITRS(this.x, this.y, this.rotation, this.scaleX, this.scaleY), n.invert(), n.transformPoint(t.x, t.y, e), e
                        },
                        getBoundsTransformMatrix: function () {
                            return this.getWorldTransformMatrix(this.tempTransformMatrix, this.localTransform)
                        },
                        add: function (t) {
                            return i.Add(this.list, t, this.maxSize, this.addHandler, this), this
                        },
                        addAt: function (t, e) {
                            return i.AddAt(this.list, t, e, this.maxSize, this.addHandler, this), this
                        },
                        getAt: function (t) {
                            return this.list[t]
                        },
                        getIndex: function (t) {
                            var e;
                            return g()(e = this.list).call(e, t)
                        },
                        sort: function (t, e) {
                            return t ? (void 0 === e && (e = function (e, n) {
                                return e[t] - n[t]
                            }), i.StableSort(this.list, e), this) : this
                        },
                        getByName: function (t) {
                            return i.GetFirst(this.list, "name", t)
                        },
                        getRandom: function (t, e) {
                            return i.GetRandom(this.list, t, e)
                        },
                        getFirst: function (t, e, n, a) {
                            return i.GetFirst(this.list, t, e, n, a)
                        },
                        getAll: function (t, e, n, a) {
                            return i.GetAll(this.list, t, e, n, a)
                        },
                        count: function (t, e, n, a) {
                            return i.CountAllMatching(this.list, t, e, n, a)
                        },
                        swap: function (t, e) {
                            return i.Swap(this.list, t, e), this
                        },
                        moveTo: function (t, e) {
                            return i.MoveTo(this.list, t, e), this
                        },
                        remove: function (t, e) {
                            var n = i.Remove(this.list, t, this.removeHandler, this);
                            if (e && n) {
                                Array.isArray(n) || (n = [n]);
                                for (var a = 0; a < n.length; a++) n[a].destroy()
                            }
                            return this
                        },
                        removeAt: function (t, e) {
                            var n = i.RemoveAt(this.list, t, this.removeHandler, this);
                            return e && n && n.destroy(), this
                        },
                        removeBetween: function (t, e, n) {
                            var a = i.RemoveBetween(this.list, t, e, this.removeHandler, this);
                            if (n)
                                for (var r = 0; r < a.length; r++) a[r].destroy();
                            return this
                        },
                        removeAll: function (t) {
                            var e = i.RemoveBetween(this.list, 0, this.list.length, this.removeHandler, this);
                            if (t)
                                for (var n = 0; n < e.length; n++) e[n].destroy();
                            return this
                        },
                        bringToTop: function (t) {
                            return i.BringToTop(this.list, t), this
                        },
                        sendToBack: function (t) {
                            return i.SendToBack(this.list, t), this
                        },
                        moveUp: function (t) {
                            return i.MoveUp(this.list, t), this
                        },
                        moveDown: function (t) {
                            return i.MoveDown(this.list, t), this
                        },
                        reverse: function () {
                            var t;
                            return Sr()(t = this.list).call(t), this
                        },
                        shuffle: function () {
                            return i.Shuffle(this.list), this
                        },
                        replace: function (t, e, n) {
                            return i.Replace(this.list, t, e) && (this.addHandler(e), this.removeHandler(t), n && t.destroy()), this
                        },
                        exists: function (t) {
                            var e;
                            return g()(e = this.list).call(e, t) > -1
                        },
                        setAll: function (t, e, n, a) {
                            return i.SetAll(this.list, t, e, n, a), this
                        },
                        each: function (t, e) {
                            var n, i, a = [null],
                                r = s()(n = this.list).call(n),
                                o = r.length;
                            for (i = 2; i < arguments.length; i++) a.push(arguments[i]);
                            for (i = 0; i < o; i++) a[0] = r[i], t.apply(e, a);
                            return this
                        },
                        iterate: function (t, e) {
                            var n, i = [null];
                            for (n = 2; n < arguments.length; n++) i.push(arguments[n]);
                            for (n = 0; n < this.list.length; n++) i[0] = this.list[n], t.apply(e, i);
                            return this
                        },
                        setScrollFactor: function (t, e, n) {
                            return void 0 === e && (e = t), void 0 === n && (n = !1), this.scrollFactorX = t, this.scrollFactorY = e, n && (i.SetAll(this.list, "scrollFactorX", t), i.SetAll(this.list, "scrollFactorY", e)), this
                        },
                        length: {
                            get: function () {
                                return this.list.length
                            }
                        },
                        first: {
                            get: function () {
                                return this.position = 0, this.list.length > 0 ? this.list[0] : null
                            }
                        },
                        last: {
                            get: function () {
                                return this.list.length > 0 ? (this.position = this.list.length - 1, this.list[this.position]) : null
                            }
                        },
                        next: {
                            get: function () {
                                return this.position < this.list.length ? (this.position++, this.list[this.position]) : null
                            }
                        },
                        previous: {
                            get: function () {
                                return this.position > 0 ? (this.position--, this.list[this.position]) : null
                            }
                        },
                        preDestroy: function () {
                            this.removeAll(!!this.exclusive), this.localTransform.destroy(), this.tempTransformMatrix.destroy(), this.list = []
                        }
                    });
                t.exports = p
            }, function (t, e, n) {
                t.exports = {
                    Matrix: n(257),
                    Add: n(266),
                    AddAt: n(267),
                    BringToTop: n(268),
                    CountAllMatching: n(269),
                    Each: n(270),
                    EachInRange: n(271),
                    FindClosestInSorted: n(272),
                    GetAll: n(273),
                    GetFirst: n(274),
                    GetRandom: n(275),
                    MoveDown: n(276),
                    MoveTo: n(277),
                    MoveUp: n(278),
                    NumberArray: n(279),
                    NumberArrayStep: n(280),
                    QuickSelect: n(281),
                    Range: n(282),
                    Remove: n(283),
                    RemoveAt: n(284),
                    RemoveBetween: n(285),
                    RemoveRandomElement: n(286),
                    Replace: n(287),
                    RotateLeft: n(58),
                    RotateRight: n(59),
                    SafeRange: n(5),
                    SendToBack: n(288),
                    SetAll: n(289),
                    Shuffle: n(60),
                    SortByDigits: n(290),
                    SpliceOne: n(12),
                    StableSort: n(291),
                    Swap: n(292)
                }
            }, function (t, e, n) {
                t.exports = {
                    CheckMatrix: n(24),
                    MatrixToString: n(258),
                    ReverseColumns: n(260),
                    ReverseRows: n(261),
                    Rotate180: n(262),
                    RotateLeft: n(263),
                    RotateMatrix: n(16),
                    RotateRight: n(264),
                    Translate: n(265),
                    TransposeMatrix: n(57)
                }
            }, function (t, e, n) {
                var i = n(259),
                    a = n(24);
                t.exports = function (t) {
                    var e = "";
                    if (!a(t)) return e;
                    for (var n = 0; n < t.length; n++) {
                        for (var r = 0; r < t[n].length; r++) {
                            var s = t[n][r].toString();
                            e += "undefined" !== s ? i(s, 2) : "?", r < t[n].length - 1 && (e += " |")
                        }
                        if (n < t.length - 1) {
                            e += "\n";
                            for (var o = 0; o < t[n].length; o++) e += "---", o < t[n].length - 1 && (e += "+");
                            e += "\n"
                        }
                    }
                    return e
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    void 0 === e && (e = 0), void 0 === n && (n = " "), void 0 === i && (i = 3);
                    var a = 0;
                    if (e + 1 >= (t = t.toString()).length) switch (i) {
                        case 1:
                            t = new Array(e + 1 - t.length).join(n) + t;
                            break;
                        case 3:
                            var r = Math.ceil((a = e - t.length) / 2);
                            t = new Array(a - r + 1).join(n) + t + new Array(r + 1).join(n);
                            break;
                        default:
                            t += new Array(e + 1 - t.length).join(n)
                    }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return Sr()(t).call(t)
                }
            }, function (t, e) {
                t.exports = function (t) {
                    for (var e = 0; e < t.length; e++) {
                        var n;
                        Sr()(n = t[e]).call(n)
                    }
                    return t
                }
            }, function (t, e, n) {
                var i = n(16);
                t.exports = function (t) {
                    return i(t, 180)
                }
            }, function (t, e, n) {
                var i = n(16);
                t.exports = function (t) {
                    return i(t, 90)
                }
            }, function (t, e, n) {
                var i = n(16);
                t.exports = function (t) {
                    return i(t, -90)
                }
            }, function (t, e, n) {
                var i = n(58),
                    a = n(59);
                t.exports = function (t, e, n) {
                    if (void 0 === e && (e = 0), void 0 === n && (n = 0), 0 !== n && (n < 0 ? i(t, Math.abs(n)) : a(t, n)), 0 !== e)
                        for (var r = 0; r < t.length; r++) {
                            var s = t[r];
                            e < 0 ? i(s, Math.abs(e)) : a(s, e)
                        }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a) {
                    if (void 0 === a && (a = t), n > 0) {
                        var r = n - t.length;
                        if (r <= 0) return null
                    }
                    if (!Array.isArray(e)) return -1 === g()(t).call(t, e) ? (t.push(e), i && i.call(a, e), e) : null;
                    for (var s = e.length - 1; s >= 0;) - 1 !== g()(t).call(t, e[s]) && Pr()(e).call(e, s, 1), s--;
                    if (0 === (s = e.length)) return null;
                    n > 0 && s > r && (Pr()(e).call(e, r), s = r);
                    for (var o = 0; o < s; o++) {
                        var l = e[o];
                        t.push(l), i && i.call(a, l)
                    }
                    return e
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i, a, r) {
                    if (void 0 === n && (n = 0), void 0 === r && (r = t), i > 0) {
                        var s = i - t.length;
                        if (s <= 0) return null
                    }
                    if (!Array.isArray(e)) return -1 === g()(t).call(t, e) ? (Pr()(t).call(t, n, 0, e), a && a.call(r, e), e) : null;
                    for (var o = e.length - 1; o >= 0;) - 1 !== g()(t).call(t, e[o]) && e.pop(), o--;
                    if (0 === (o = e.length)) return null;
                    i > 0 && o > s && (Pr()(e).call(e, s), o = s);
                    for (var l = o - 1; l >= 0; l--) {
                        var c = e[l];
                        Pr()(t).call(t, n, 0, c), a && a.call(r, c)
                    }
                    return e
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = g()(t).call(t, e);
                    return -1 !== n && n < t.length && (Pr()(t).call(t, n, 1), t.push(e)), e
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    void 0 === a && (a = 0), void 0 === r && (r = t.length);
                    var s = 0;
                    if (i(t, a, r))
                        for (var o = a; o < r; o++) t[o][e] === n && s++;
                    return s
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    var i, a = [null];
                    for (i = 3; i < arguments.length; i++) a.push(arguments[i]);
                    for (i = 0; i < t.length; i++) a[0] = t[i], e.apply(n, a);
                    return t
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    if (void 0 === a && (a = 0), void 0 === r && (r = t.length), i(t, a, r)) {
                        var s, o = [null];
                        for (s = 5; s < arguments.length; s++) o.push(arguments[s]);
                        for (s = a; s < r; s++) o[0] = t[s], e.apply(n, o)
                    }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (!e.length) return NaN;
                    if (1 === e.length) return e[0];
                    var i, a, r = 1;
                    if (n) {
                        if (t < e[0][n]) return e[0];
                        for (; e[r][n] < t;) r++
                    } else
                        for (; e[r] < t;) r++;
                    return r > e.length && (r = e.length), n ? (i = e[r - 1][n], (a = e[r][n]) - t <= t - i ? e[r] : e[r - 1]) : (i = e[r - 1], (a = e[r]) - t <= t - i ? a : i)
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    void 0 === a && (a = 0), void 0 === r && (r = t.length);
                    var s = [];
                    if (i(t, a, r))
                        for (var o = a; o < r; o++) {
                            var l = t[o];
                            (!e || e && void 0 === n && l.hasOwnProperty(e) || e && void 0 !== n && l[e] === n) && s.push(l)
                        }
                    return s
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    if (void 0 === a && (a = 0), void 0 === r && (r = t.length), i(t, a, r))
                        for (var s = a; s < r; s++) {
                            var o = t[s];
                            if (!e || e && void 0 === n && o.hasOwnProperty(e) || e && void 0 !== n && o[e] === n) return o
                        }
                    return null
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    void 0 === e && (e = 0), void 0 === n && (n = t.length);
                    var i = e + Math.floor(Math.random() * n);
                    return void 0 === t[i] ? null : t[i]
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = g()(t).call(t, e);
                    if (n > 0) {
                        var i = t[n - 1],
                            a = g()(t).call(t, i);
                        t[n] = i, t[a] = e
                    }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    var i = g()(t).call(t, e);
                    if (-1 === i || n < 0 || n >= t.length) throw new Error("Supplied index out of bounds");
                    return i !== n && (Pr()(t).call(t, i, 1), Pr()(t).call(t, n, 0, e)), e
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = g()(t).call(t, e);
                    if (-1 !== n && n < t.length - 1) {
                        var i = t[n + 1],
                            a = g()(t).call(t, i);
                        t[n] = i, t[a] = e
                    }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a, r = [],
                        s = !1;
                    if ((n || i) && (s = !0, n || (n = ""), i || (i = "")), e < t)
                        for (a = t; a >= e; a--) s ? r.push(n + a.toString() + i) : r.push(a);
                    else
                        for (a = t; a <= e; a++) s ? r.push(n + a.toString() + i) : r.push(a);
                    return r
                }
            }, function (t, e, n) {
                var i = n(40);
                t.exports = function (t, e, n) {
                    void 0 === t && (t = 0), void 0 === e && (e = null), void 0 === n && (n = 1), null === e && (e = t, t = 0);
                    for (var a = [], r = Math.max(i((e - t) / (n || 1)), 0), s = 0; s < r; s++) a.push(t), t += n;
                    return a
                }
            }, function (t, e) {
                function n(t, e, n) {
                    var i = t[e];
                    t[e] = t[n], t[n] = i
                }

                function i(t, e) {
                    return t < e ? -1 : t > e ? 1 : 0
                }
                t.exports = function t(e, a, r, s, o) {
                    for (void 0 === r && (r = 0), void 0 === s && (s = e.length - 1), void 0 === o && (o = i); s > r;) {
                        if (s - r > 600) {
                            var l = s - r + 1,
                                c = a - r + 1,
                                u = Math.log(l),
                                h = .5 * Math.exp(2 * u / 3),
                                d = .5 * Math.sqrt(u * h * (l - h) / l) * (c - l / 2 < 0 ? -1 : 1);
                            t(e, a, Math.max(r, Math.floor(a - c * h / l + d)), Math.min(s, Math.floor(a + (l - c) * h / l + d)), o)
                        }
                        var f = e[a],
                            p = r,
                            g = s;
                        for (n(e, r, a), o(e[s], f) > 0 && n(e, r, s); p < g;) {
                            for (n(e, p, g), p++, g--; o(e[p], f) < 0;) p++;
                            for (; o(e[g], f) > 0;) g--
                        }
                        0 === o(e[r], f) ? n(e, r, g) : n(e, ++g, s), g <= a && (r = g + 1), a <= g && (s = g - 1)
                    }
                }
            }, function (t, e, n) {
                var i = n(10),
                    a = n(60),
                    r = function (t, e, n) {
                        for (var i = [], a = 0; a < t.length; a++)
                            for (var r = 0; r < e.length; r++)
                                for (var s = 0; s < n; s++) i.push({
                                    a: t[a],
                                    b: e[r]
                                });
                        return i
                    };
                t.exports = function (t, e, n) {
                    var s = i(n, "max", 0),
                        o = i(n, "qty", 1),
                        l = i(n, "random", !1),
                        c = i(n, "randomB", !1),
                        u = i(n, "repeat", 0),
                        h = i(n, "yoyo", !1),
                        d = [];
                    if (c && a(e), -1 === u)
                        if (0 === s) u = 0;
                        else {
                            var f = t.length * e.length * o;
                            h && (f *= 2), u = Math.ceil(s / f)
                        } for (var p = 0; p <= u; p++) {
                        var g = r(t, e, o);
                        l && a(g), d = et()(d).call(d, g), h && (Sr()(g).call(g), d = et()(d).call(d, g))
                    }
                    return s && Pr()(d).call(d, s), d
                }
            }, function (t, e, n) {
                var i = n(12);
                t.exports = function (t, e, n, a) {
                    var r;
                    if (void 0 === a && (a = t), !Array.isArray(e)) return -1 !== (r = g()(t).call(t, e)) ? (i(t, r), n && n.call(a, e), e) : null;
                    for (var s = e.length - 1, o = []; s >= 0;) {
                        var l = e[s]; - 1 !== (r = g()(t).call(t, l)) && (i(t, r), o.push(l), n && n.call(a, l)), s--
                    }
                    return o
                }
            }, function (t, e, n) {
                var i = n(12);
                t.exports = function (t, e, n, a) {
                    if (void 0 === a && (a = t), e < 0 || e > t.length - 1) throw new Error("Index out of bounds");
                    var r = i(t, e);
                    return n && n.call(a, r), r
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    if (void 0 === e && (e = 0), void 0 === n && (n = t.length), void 0 === r && (r = t), i(t, e, n)) {
                        var s = n - e,
                            o = Pr()(t).call(t, e, s);
                        if (a)
                            for (var l = 0; l < o.length; l++) {
                                var c = o[l];
                                a.call(r, c)
                            }
                        return o
                    }
                    return []
                }
            }, function (t, e, n) {
                var i = n(12);
                t.exports = function (t, e, n) {
                    void 0 === e && (e = 0), void 0 === n && (n = t.length);
                    var a = e + Math.floor(Math.random() * n);
                    return i(t, a)
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    var i = g()(t).call(t, e),
                        a = g()(t).call(t, n);
                    return -1 !== i && -1 === a && (t[i] = n, !0)
                }
            }, function (t, e) {
                t.exports = function (t, e) {
                    var n = g()(t).call(t, e);
                    return -1 !== n && n > 0 && (Pr()(t).call(t, n, 1), t.unshift(e)), e
                }
            }, function (t, e, n) {
                var i = n(5);
                t.exports = function (t, e, n, a, r) {
                    if (void 0 === a && (a = 0), void 0 === r && (r = t.length), i(t, a, r))
                        for (var s = a; s < r; s++) {
                            var o = t[s];
                            o.hasOwnProperty(e) && (o[e] = n)
                        }
                    return t
                }
            }, function (t, e) {
                t.exports = function (t) {
                    var e = /\D/g;
                    return ni()(t).call(t, (function (t, n) {
                        return Zi()(t.replace(e, ""), 10) - Zi()(n.replace(e, ""), 10)
                    })), t
                }
            }, function (t, e) {
                function n(t, e) {
                    return String(t).localeCompare(e)
                }

                function i(t, e, n, i) {
                    var a, r, s, o, l, c = t.length,
                        u = 0,
                        h = 2 * n;
                    for (a = 0; a < c; a += h)
                        for (s = (r = a + n) + n, r > c && (r = c), s > c && (s = c), o = a, l = r;;)
                            if (o < r && l < s) e(t[o], t[l]) <= 0 ? i[u++] = t[o++] : i[u++] = t[l++];
                            else if (o < r) i[u++] = t[o++];
                    else {
                        if (!(l < s)) break;
                        i[u++] = t[l++]
                    }
                }
                t.exports = function (t, e) {
                    void 0 === e && (e = n);
                    var a = function (t, e) {
                        var n = t.length;
                        if (n <= 1) return t;
                        for (var a = new Array(n), r = 1; r < n; r *= 2) {
                            i(t, e, r, a);
                            var s = t;
                            t = a, a = s
                        }
                        return t
                    }(t, e);
                    return a !== t && i(a, null, t.length, t), t
                }
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    if (e !== n) {
                        var i = g()(t).call(t, e),
                            a = g()(t).call(t, n);
                        if (i < 0 || a < 0) throw new Error("Supplied items must be elements of the same array");
                        return t[i] = n, t[a] = e, t
                    }
                }
            }, function (t, e, n) {
                t.exports = {
                    Alpha: n(294),
                    AlphaSingle: n(295),
                    BlendMode: n(296),
                    ComputedSize: n(47),
                    Crop: n(297),
                    Depth: n(48),
                    Flip: n(49),
                    GetBounds: n(298),
                    Mask: n(307),
                    Origin: n(332),
                    PathFollower: n(333),
                    Pipeline: n(336),
                    ScrollFactor: n(50),
                    Size: n(339),
                    Texture: n(340),
                    TextureCrop: n(341),
                    Tint: n(342),
                    ToJSON: n(54),
                    Transform: n(51),
                    TransformMatrix: n(23),
                    Visible: n(52)
                }
            }, function (t, e, n) {
                var i = n(3),
                    a = {
                        _alpha: 1,
                        _alphaTL: 1,
                        _alphaTR: 1,
                        _alphaBL: 1,
                        _alphaBR: 1,
                        clearAlpha: function () {
                            return this.setAlpha(1)
                        },
                        setAlpha: function (t, e, n, a) {
                            return void 0 === t && (t = 1), void 0 === e ? this.alpha = t : (this._alphaTL = i(t, 0, 1), this._alphaTR = i(e, 0, 1), this._alphaBL = i(n, 0, 1), this._alphaBR = i(a, 0, 1)), this
                        },
                        alpha: {
                            get: function () {
                                return this._alpha
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alpha = e, this._alphaTL = e, this._alphaTR = e, this._alphaBL = e, this._alphaBR = e, 0 === e ? this.renderFlags &= -3 : this.renderFlags |= 2
                            }
                        },
                        alphaTopLeft: {
                            get: function () {
                                return this._alphaTL
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alphaTL = e, 0 !== e && (this.renderFlags |= 2)
                            }
                        },
                        alphaTopRight: {
                            get: function () {
                                return this._alphaTR
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alphaTR = e, 0 !== e && (this.renderFlags |= 2)
                            }
                        },
                        alphaBottomLeft: {
                            get: function () {
                                return this._alphaBL
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alphaBL = e, 0 !== e && (this.renderFlags |= 2)
                            }
                        },
                        alphaBottomRight: {
                            get: function () {
                                return this._alphaBR
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alphaBR = e, 0 !== e && (this.renderFlags |= 2)
                            }
                        }
                    };
                t.exports = a
            }, function (t, e, n) {
                var i = n(3),
                    a = {
                        _alpha: 1,
                        clearAlpha: function () {
                            return this.setAlpha(1)
                        },
                        setAlpha: function (t) {
                            return void 0 === t && (t = 1), this.alpha = t, this
                        },
                        alpha: {
                            get: function () {
                                return this._alpha
                            },
                            set: function (t) {
                                var e = i(t, 0, 1);
                                this._alpha = e, 0 === e ? this.renderFlags &= -3 : this.renderFlags |= 2
                            }
                        }
                    };
                t.exports = a
            }, function (t, e, n) {
                var i = n(17),
                    a = {
                        _blendMode: i.NORMAL,
                        blendMode: {
                            get: function () {
                                return this._blendMode
                            },
                            set: function (t) {
                                "string" == typeof t && (t = i[t]), (t |= 0) >= -1 && (this._blendMode = t)
                            }
                        },
                        setBlendMode: function (t) {
                            return this.blendMode = t, this
                        }
                    };
                t.exports = a
            }, function (t, e) {
                t.exports = {
                    texture: null,
                    frame: null,
                    isCropped: !1,
                    setCrop: function (t, e, n, i) {
                        if (void 0 === t) this.isCropped = !1;
                        else if (this.frame) {
                            if ("number" == typeof t) this.frame.setCropUVs(this._crop, t, e, n, i, this.flipX, this.flipY);
                            else {
                                var a = t;
                                this.frame.setCropUVs(this._crop, a.x, a.y, a.width, a.height, this.flipX, this.flipY)
                            }
                            this.isCropped = !0
                        }
                        return this
                    },
                    resetCropObject: function () {
                        return {
                            u0: 0,
                            v0: 0,
                            u1: 0,
                            v1: 0,
                            width: 0,
                            height: 0,
                            x: 0,
                            y: 0,
                            flipX: !1,
                            flipY: !1,
                            cx: 0,
                            cy: 0,
                            cw: 0,
                            ch: 0
                        }
                    }
                }
            }, function (t, e, n) {
                var i = n(25),
                    a = n(39),
                    r = n(2),
                    s = {
                        prepareBoundsOutput: function (t, e) {
                            return void 0 === e && (e = !1), 0 !== this.rotation && a(t, this.x, this.y, this.rotation), e && this.parentContainer && this.parentContainer.getBoundsTransformMatrix().transformPoint(t.x, t.y, t), t
                        },
                        getCenter: function (t) {
                            return void 0 === t && (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth / 2, t.y = this.y - this.displayHeight * this.originY + this.displayHeight / 2, t
                        },
                        getTopLeft: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX, t.y = this.y - this.displayHeight * this.originY, this.prepareBoundsOutput(t, e)
                        },
                        getTopCenter: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth / 2, t.y = this.y - this.displayHeight * this.originY, this.prepareBoundsOutput(t, e)
                        },
                        getTopRight: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth, t.y = this.y - this.displayHeight * this.originY, this.prepareBoundsOutput(t, e)
                        },
                        getLeftCenter: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX, t.y = this.y - this.displayHeight * this.originY + this.displayHeight / 2, this.prepareBoundsOutput(t, e)
                        },
                        getRightCenter: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth, t.y = this.y - this.displayHeight * this.originY + this.displayHeight / 2, this.prepareBoundsOutput(t, e)
                        },
                        getBottomLeft: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX, t.y = this.y - this.displayHeight * this.originY + this.displayHeight, this.prepareBoundsOutput(t, e)
                        },
                        getBottomCenter: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth / 2, t.y = this.y - this.displayHeight * this.originY + this.displayHeight, this.prepareBoundsOutput(t, e)
                        },
                        getBottomRight: function (t, e) {
                            return t || (t = new r), t.x = this.x - this.displayWidth * this.originX + this.displayWidth, t.y = this.y - this.displayHeight * this.originY + this.displayHeight, this.prepareBoundsOutput(t, e)
                        },
                        getBounds: function (t) {
                            var e, n, a, r, s, o, l, c;
                            if (void 0 === t && (t = new i), this.parentContainer) {
                                var u = this.parentContainer.getBoundsTransformMatrix();
                                this.getTopLeft(t), u.transformPoint(t.x, t.y, t), e = t.x, n = t.y, this.getTopRight(t), u.transformPoint(t.x, t.y, t), a = t.x, r = t.y, this.getBottomLeft(t), u.transformPoint(t.x, t.y, t), s = t.x, o = t.y, this.getBottomRight(t), u.transformPoint(t.x, t.y, t), l = t.x, c = t.y
                            } else this.getTopLeft(t), e = t.x, n = t.y, this.getTopRight(t), a = t.x, r = t.y, this.getBottomLeft(t), s = t.x, o = t.y, this.getBottomRight(t), l = t.x, c = t.y;
                            return t.x = Math.min(e, a, s, l), t.y = Math.min(n, r, o, c), t.width = Math.max(e, a, s, l) - t.x, t.height = Math.max(n, r, o, c) - t.y, t
                        }
                    };
                t.exports = s
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return !(t.width <= 0 || t.height <= 0) && t.x <= e && t.x + t.width >= e && t.y <= n && t.y + t.height >= n
                }
            }, function (t, e, n) {
                var i = n(61),
                    a = n(62);
                t.exports = function (t, e, n, r) {
                    void 0 === r && (r = []), !e && n > 0 && (e = a(t) / n);
                    for (var s = 0; s < e; s++) {
                        var o = s / e;
                        r.push(i(t, o))
                    }
                    return r
                }
            }, function (t, e, n) {
                var i = n(0),
                    a = n(302),
                    r = n(303),
                    s = n(26),
                    o = n(305),
                    l = n(2),
                    c = new i({
                        initialize: function (t, e, n, i) {
                            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.type = s.LINE, this.x1 = t, this.y1 = e, this.x2 = n, this.y2 = i
                        },
                        getPoint: function (t, e) {
                            return a(this, t, e)
                        },
                        getPoints: function (t, e, n) {
                            return r(this, t, e, n)
                        },
                        getRandomPoint: function (t) {
                            return o(this, t)
                        },
                        setTo: function (t, e, n, i) {
                            return void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.x1 = t, this.y1 = e, this.x2 = n, this.y2 = i, this
                        },
                        getPointA: function (t) {
                            return void 0 === t && (t = new l), t.set(this.x1, this.y1), t
                        },
                        getPointB: function (t) {
                            return void 0 === t && (t = new l), t.set(this.x2, this.y2), t
                        },
                        left: {
                            get: function () {
                                return Math.min(this.x1, this.x2)
                            },
                            set: function (t) {
                                this.x1 <= this.x2 ? this.x1 = t : this.x2 = t
                            }
                        },
                        right: {
                            get: function () {
                                return Math.max(this.x1, this.x2)
                            },
                            set: function (t) {
                                this.x1 > this.x2 ? this.x1 = t : this.x2 = t
                            }
                        },
                        top: {
                            get: function () {
                                return Math.min(this.y1, this.y2)
                            },
                            set: function (t) {
                                this.y1 <= this.y2 ? this.y1 = t : this.y2 = t
                            }
                        },
                        bottom: {
                            get: function () {
                                return Math.max(this.y1, this.y2)
                            },
                            set: function (t) {
                                this.y1 > this.y2 ? this.y1 = t : this.y2 = t
                            }
                        }
                    });
                t.exports = c
            }, function (t, e, n) {
                var i = n(13);
                t.exports = function (t, e, n) {
                    return void 0 === n && (n = new i), n.x = t.x1 + (t.x2 - t.x1) * e, n.y = t.y1 + (t.y2 - t.y1) * e, n
                }
            }, function (t, e, n) {
                var i = n(304),
                    a = n(13);
                t.exports = function (t, e, n, r) {
                    void 0 === r && (r = []), !e && n > 0 && (e = i(t) / n);
                    for (var s = t.x1, o = t.y1, l = t.x2, c = t.y2, u = 0; u < e; u++) {
                        var h = u / e,
                            d = s + (l - s) * h,
                            f = o + (c - o) * h;
                        r.push(new a(d, f))
                    }
                    return r
                }
            }, function (t, e) {
                t.exports = function (t) {
                    return Math.sqrt((t.x2 - t.x1) * (t.x2 - t.x1) + (t.y2 - t.y1) * (t.y2 - t.y1))
                }
            }, function (t, e, n) {
                var i = n(13);
                t.exports = function (t, e) {
                    void 0 === e && (e = new i);
                    var n = Math.random();
                    return e.x = t.x1 + n * (t.x2 - t.x1), e.y = t.y1 + n * (t.y2 - t.y1), e
                }
            }, function (t, e, n) {
                var i = n(13);
                t.exports = function (t, e) {
                    return void 0 === e && (e = new i), e.x = t.x + Math.random() * t.width, e.y = t.y + Math.random() * t.height, e
                }
            }, function (t, e, n) {
                var i = n(308),
                    a = n(331),
                    r = {
                        mask: null,
                        setMask: function (t) {
                            return this.mask = t, this
                        },
                        clearMask: function (t) {
                            return void 0 === t && (t = !1), t && this.mask && this.mask.destroy(), this.mask = null, this
                        },
                        createBitmapMask: function (t) {
                            return void 0 === t && (this.texture || this.shader) && (t = this), new i(this.scene, t)
                        },
                        createGeometryMask: function (t) {
                            return void 0 === t && "Graphics" === this.type && (t = this), new a(this.scene, t)
                        }
                    };
                t.exports = r
            }, function (t, e, n) {
                var i = n(0),
                    a = n(309),
                    r = n(326),
                    s = new i({
                        initialize: function (t, e) {
                            var n = t.sys.renderer;
                            this.renderer = n, this.bitmapMask = e, this.maskTexture = null, this.mainTexture = null, this.dirty = !0, this.mainFramebuffer = null, this.maskFramebuffer = null, this.invertAlpha = !1, this.isStencil = !1, this.createMask(), t.sys.game.events.on(a.CONTEXT_RESTORED, this.createMask, this), n && n.on(r.RESIZE, this.createMask, this)
                        },
                        createMask: function () {
                            var t = this.renderer;
                            if (t && t.gl) {
                                this.mainTexture && this.clearMask();
                                var e = t.width,
                                    n = t.height,
                                    i = 0 == (e & e - 1) && 0 == (n & n - 1),
                                    a = t.gl,
                                    r = i ? a.REPEAT : a.CLAMP_TO_EDGE,
                                    s = a.LINEAR;
                                this.mainTexture = t.createTexture2D(0, s, s, r, r, a.RGBA, null, e, n), this.maskTexture = t.createTexture2D(0, s, s, r, r, a.RGBA, null, e, n), this.mainFramebuffer = t.createFramebuffer(e, n, this.mainTexture, !0), this.maskFramebuffer = t.createFramebuffer(e, n, this.maskTexture, !0)
                            }
                        },
                        clearMask: function () {
                            var t = this.renderer;
                            t && t.gl && this.mainTexture && (t.deleteTexture(this.mainTexture), t.deleteTexture(this.maskTexture), t.deleteFramebuffer(this.mainFramebuffer), t.deleteFramebuffer(this.maskFramebuffer), this.mainTexture = null, this.maskTexture = null, this.mainFramebuffer = null, this.maskFramebuffer = null)
                        },
                        setBitmap: function (t) {
                            this.bitmapMask = t
                        },
                        preRenderWebGL: function (t, e, n) {
                            t.pipelines.BITMAPMASK_PIPELINE.beginMask(this, e, n)
                        },
                        postRenderWebGL: function (t, e) {
                            t.pipelines.BITMAPMASK_PIPELINE.endMask(this, e)
                        },
                        preRenderCanvas: function () {},
                        postRenderCanvas: function () {},
                        destroy: function () {
                            this.clearMask(), this.renderer && this.renderer.off(r.RESIZE, this.createMask, this), this.bitmapMask = null, this.prevFramebuffer = null, this.renderer = null
                        }
                    });
                t.exports = s
            }, function (t, e, n) {
                t.exports = {
                    BLUR: n(310),
                    BOOT: n(311),
                    CONTEXT_LOST: n(312),
                    CONTEXT_RESTORED: n(313),
                    DESTROY: n(314),
                    FOCUS: n(315),
                    HIDDEN: n(316),
                    PAUSE: n(317),
                    POST_RENDER: n(318),
                    POST_STEP: n(319),
                    PRE_RENDER: n(320),
                    PRE_STEP: n(321),
                    READY: n(322),
                    RESUME: n(323),
                    STEP: n(324),
                    VISIBLE: n(325)
                }
            }, function (t, e) {
                t.exports = "blur"
            }, function (t, e) {
                t.exports = "boot"
            }, function (t, e) {
                t.exports = "contextlost"
            }, function (t, e) {
                t.exports = "contextrestored"
            }, function (t, e) {
                t.exports = "destroy"
            }, function (t, e) {
                t.exports = "focus"
            }, function (t, e) {
                t.exports = "hidden"
            }, function (t, e) {
                t.exports = "pause"
            }, function (t, e) {
                t.exports = "postrender"
            }, function (t, e) {
                t.exports = "poststep"
            }, function (t, e) {
                t.exports = "prerender"
            }, function (t, e) {
                t.exports = "prestep"
            }, function (t, e) {
                t.exports = "ready"
            }, function (t, e) {
                t.exports = "resume"
            }, function (t, e) {
                t.exports = "step"
            }, function (t, e) {
                t.exports = "visible"
            }, function (t, e, n) {
                t.exports = {
                    POST_RENDER: n(327),
                    PRE_RENDER: n(328),
                    RENDER: n(329),
                    RESIZE: n(330)
                }
            }, function (t, e) {
                t.exports = "postrender"
            }, function (t, e) {
                t.exports = "prerender"
            }, function (t, e) {
                t.exports = "render"
            }, function (t, e) {
                t.exports = "resize"
            }, function (t, e, n) {
                var i = new(n(0))({
                    initialize: function (t, e) {
                        this.geometryMask = e, this.invertAlpha = !1, this.isStencil = !0, this.level = 0
                    },
                    setShape: function (t) {
                        return this.geometryMask = t, this
                    },
                    setInvertAlpha: function (t) {
                        return void 0 === t && (t = !0), this.invertAlpha = t, this
                    },
                    preRenderWebGL: function (t, e, n) {
                        var i = t.gl;
                        t.flush(), 0 === t.maskStack.length && (i.enable(i.STENCIL_TEST), i.clear(i.STENCIL_BUFFER_BIT), t.maskCount = 0), t.currentCameraMask.mask !== this && (t.currentMask.mask = this), t.maskStack.push({
                            mask: this,
                            camera: n
                        }), this.applyStencil(t, n, !0), t.maskCount++
                    },
                    applyStencil: function (t, e, n) {
                        var i = t.gl,
                            a = this.geometryMask,
                            r = t.maskCount;
                        i.colorMask(!1, !1, !1, !1), n ? (i.stencilFunc(i.EQUAL, r, 255), i.stencilOp(i.KEEP, i.KEEP, i.INCR)) : (i.stencilFunc(i.EQUAL, r + 1, 255), i.stencilOp(i.KEEP, i.KEEP, i.DECR)), a.renderWebGL(t, a, e), t.flush(), i.colorMask(!0, !0, !0, !0), i.stencilOp(i.KEEP, i.KEEP, i.KEEP), n ? this.invertAlpha ? i.stencilFunc(i.NOTEQUAL, r + 1, 255) : i.stencilFunc(i.EQUAL, r + 1, 255) : this.invertAlpha ? i.stencilFunc(i.NOTEQUAL, r, 255) : i.stencilFunc(i.EQUAL, r, 255)
                    },
                    postRenderWebGL: function (t) {
                        var e = t.gl;
                        t.maskStack.pop(), t.maskCount--, t.flush();
                        var n = t.currentMask;
                        if (0 === t.maskStack.length) n.mask = null, e.disable(e.STENCIL_TEST);
                        else {
                            var i = t.maskStack[t.maskStack.length - 1];
                            i.mask.applyStencil(t, i.camera, !1), t.currentCameraMask.mask !== i.mask ? (n.mask = i.mask, n.camera = i.camera) : n.mask = null
                        }
                    },
                    preRenderCanvas: function (t, e, n) {
                        var i = this.geometryMask;
                        t.currentContext.save(), i.renderCanvas(t, i, n, null, null, !0), t.currentContext.clip()
                    },
                    postRenderCanvas: function (t) {
                        t.currentContext.restore()
                    },
                    destroy: function () {
                        this.geometryMask = null
                    }
                });
                t.exports = i
            }, function (t, e) {
                t.exports = {
                    _originComponent: !0,
                    originX: .5,
                    originY: .5,
                    _displayOriginX: 0,
                    _displayOriginY: 0,
                    displayOriginX: {
                        get: function () {
                            return this._displayOriginX
                        },
                        set: function (t) {
                            this._displayOriginX = t, this.originX = t / this.width
                        }
                    },
                    displayOriginY: {
                        get: function () {
                            return this._displayOriginY
                        },
                        set: function (t) {
                            this._displayOriginY = t, this.originY = t / this.height
                        }
                    },
                    setOrigin: function (t, e) {
                        return void 0 === t && (t = .5), void 0 === e && (e = t), this.originX = t, this.originY = e, this.updateDisplayOrigin()
                    },
                    setOriginFromFrame: function () {
                        return this.frame && this.frame.customPivot ? (this.originX = this.frame.pivotX, this.originY = this.frame.pivotY, this.updateDisplayOrigin()) : this.setOrigin()
                    },
                    setDisplayOrigin: function (t, e) {
                        return void 0 === t && (t = 0), void 0 === e && (e = t), this.displayOriginX = t, this.displayOriginY = e, this
                    },
                    updateDisplayOrigin: function () {
                        return this._displayOriginX = this.originX * this.width, this._displayOriginY = this.originY * this.height, this
                    }
                }
            }, function (t, e, n) {
                var i = n(19),
                    a = n(334),
                    r = n(10),
                    s = n(335),
                    o = n(2),
                    l = {
                        path: null,
                        rotateToPath: !1,
                        pathRotationOffset: 0,
                        pathOffset: null,
                        pathVector: null,
                        pathDelta: null,
                        pathTween: null,
                        pathConfig: null,
                        _prevDirection: s.PLAYING_FORWARD,
                        setPath: function (t, e) {
                            void 0 === e && (e = this.pathConfig);
                            var n = this.pathTween;
                            return n && n.isPlaying() && n.stop(), this.path = t, e && this.startFollow(e), this
                        },
                        setRotateToPath: function (t, e) {
                            return void 0 === e && (e = 0), this.rotateToPath = t, this.pathRotationOffset = e, this
                        },
                        isFollowing: function () {
                            var t = this.pathTween;
                            return t && t.isPlaying()
                        },
                        startFollow: function (t, e) {
                            void 0 === t && (t = {}), void 0 === e && (e = 0);
                            var n = this.pathTween;
                            n && n.isPlaying() && n.stop(), "number" == typeof t && (t = {
                                duration: t
                            }), t.from = r(t, "from", 0), t.to = r(t, "to", 1);
                            var l = a(t, "positionOnPath", !1);
                            this.rotateToPath = a(t, "rotateToPath", !1), this.pathRotationOffset = r(t, "rotationOffset", 0);
                            var c = r(t, "startAt", e);
                            if (c && (t.onStart = function (t) {
                                    var e = t.data[0];
                                    e.progress = c, e.elapsed = e.duration * c;
                                    var n = e.ease(e.progress);
                                    e.current = e.start + (e.end - e.start) * n, e.target[e.key] = e.current
                                }), this.pathOffset || (this.pathOffset = new o(this.x, this.y)), this.pathVector || (this.pathVector = new o), this.pathDelta || (this.pathDelta = new o), this.pathDelta.reset(), this.pathTween = this.scene.sys.tweens.addCounter(t), this.path.getStartPoint(this.pathOffset), l && (this.x = this.pathOffset.x, this.y = this.pathOffset.y), this.pathOffset.x = this.x - this.pathOffset.x, this.pathOffset.y = this.y - this.pathOffset.y, this._prevDirection = s.PLAYING_FORWARD, this.rotateToPath) {
                                var u = this.path.getPoint(.1);
                                this.rotation = Math.atan2(u.y - this.y, u.x - this.x) + i(this.pathRotationOffset)
                            }
                            return this.pathConfig = t, this
                        },
                        pauseFollow: function () {
                            var t = this.pathTween;
                            return t && t.isPlaying() && t.pause(), this
                        },
                        resumeFollow: function () {
                            var t = this.pathTween;
                            return t && t.isPaused() && t.resume(), this
                        },
                        stopFollow: function () {
                            var t = this.pathTween;
                            return t && t.isPlaying() && t.stop(), this
                        },
                        pathUpdate: function () {
                            var t = this.pathTween;
                            if (t) {
                                var e = t.data[0],
                                    n = this.pathDelta,
                                    a = this.pathVector;
                                if (n.copy(a).negate(), e.state === s.COMPLETE) return this.path.getPoint(1, a), n.add(a), a.add(this.pathOffset), void this.setPosition(a.x, a.y);
                                if (e.state !== s.PLAYING_FORWARD && e.state !== s.PLAYING_BACKWARD) return;
                                this.path.getPoint(t.getValue(), a), n.add(a), a.add(this.pathOffset);
                                var r = this.x,
                                    o = this.y;
                                this.setPosition(a.x, a.y);
                                var l = this.x - r,
                                    c = this.y - o;
                                if (0 === l && 0 === c) return;
                                if (e.state !== this._prevDirection) return void(this._prevDirection = e.state);
                                this.rotateToPath && (this.rotation = Math.atan2(c, l) + i(this.pathRotationOffset))
                            }
                        }
                    };
                t.exports = l
            }, function (t, e) {
                t.exports = function (t, e, n) {
                    return t && t.hasOwnProperty(e) ? t[e] : n
                }
            }, function (t, e) {
                t.exports = {
                    CREATED: 0,
                    INIT: 1,
                    DELAY: 2,
                    OFFSET_DELAY: 3,
                    PENDING_RENDER: 4,
                    PLAYING_FORWARD: 5,
                    PLAYING_BACKWARD: 6,
                    HOLD_DELAY: 7,
                    REPEAT_DELAY: 8,
                    COMPLETE: 9,
                    PENDING_ADD: 20,
                    PAUSED: 21,
                    LOOP_DELAY: 22,
                    ACTIVE: 23,
                    COMPLETE_DELAY: 24,
                    PENDING_REMOVE: 25,
                    REMOVED: 26
                }
            }, function (t, e, n) {
                var i = n(337),
                    a = n(338),
                    r = n(12),
                    s = {
                        defaultPipeline: null,
                        pipeline: null,
                        hasPostPipeline: !1,
                        postPipelines: null,
                        pipelineData: null,
                        initPipeline: function (t) {
                            void 0 === t && (t = a.MULTI_PIPELINE);
                            var e = this.scene.sys.renderer;
                            if (!e) return !1;
                            var n = e.pipelines;
                            if (this.postPipelines = [], this.pipelineData = {}, n) {
                                var i = n.get(t);
                                if (i) return this.defaultPipeline = i, this.pipeline = i, !0
                            }
                            return !1
                        },
                        setPipeline: function (t, e, n) {
                            var a = this.scene.sys.renderer;
                            if (!a) return this;
                            var r = a.pipelines;
                            if (r) {
                                var s = r.get(t);
                                s && (this.pipeline = s), e && (this.pipelineData = n ? i(e) : e)
                            }
                            return this
                        },
                        setPostPipeline: function (t, e, n) {
                            var a = this.scene.sys.renderer;
                            if (!a) return this;
                            var r = a.pipelines;
                            if (r) {
                                Array.isArray(t) || (t = [t]);
                                for (var s = 0; s < t.length; s++) {
                                    var o = r.getPostPipeline(t[s], this);
                                    o && this.postPipelines.push(o)
                                }
                                e && (this.pipelineData = n ? i(e) : e)
                            }
                            return this.hasPostPipeline = this.postPipelines.length > 0, this
                        },
                        setPipelineData: function (t, e) {
                            var n = this.pipelineData;
                            return void 0 === e ? delete n[t] : n[t] = e, this
                        },
                        getPostPipeline: function (t) {
                            for (var e = this.postPipelines, n = [], i = 0; i < e.length; i++) {
                                var a = e[i];
                                ("string" == typeof t && a.name === t || a instanceof t) && n.push(a)
                            }
                            return 1 === n.length ? n[0] : n
                        },
                        resetPipeline: function (t, e) {
                            return void 0 === t && (t = !1), void 0 === e && (e = !1), this.pipeline = this.defaultPipeline, t && (this.postPipelines = [], this.hasPostPipeline = !1), e && (this.pipelineData = {}), null !== this.pipeline
                        },
                        resetPostPipeline: function (t) {
                            void 0 === t && (t = !1);
                            for (var e = this.postPipelines, n = 0; n < e.length; n++) e[n].destroy();
                            this.postPipelines = [], this.hasPostPipeline = !1, t && (this.pipelineData = {})
                        },
                        removePostPipeline: function (t) {
                            for (var e = this.postPipelines, n = e.length - 1; n >= 0; n--) {
                                var i = e[n];
                                ("string" == typeof t && i.name === t || "string" != typeof t && i instanceof t) && (i.destroy(), r(e, n))
                            }
                            return this.hasPostPipeline = this.postPipelines.length > 0, this
                        },
                        getPipelineName: function () {
                            return this.pipeline.name
                        }
                    };
                t.exports = s
            }, function (t, e) {
                t.exports = function t(e) {
                    var n, i, a;
                    if ("object" != typeof e || null === e) return e;
                    for (a in n = Array.isArray(e) ? [] : {}, e) i = e[a], n[a] = t(i);
                    return n
                }
            }, function (t, e) {
                t.exports = {
                    BITMAPMASK_PIPELINE: "BitmapMaskPipeline",
                    LIGHT_PIPELINE: "Light2D",
                    POINTLIGHT_PIPELINE: "PointLightPipeline",
                    SINGLE_PIPELINE: "SinglePipeline",
                    MULTI_PIPELINE: "MultiPipeline",
                    ROPE_PIPELINE: "RopePipeline",
                    GRAPHICS_PIPELINE: "GraphicsPipeline",
                    POSTFX_PIPELINE: "PostFXPipeline",
                    UTILITY_PIPELINE: "UtilityPipeline"
                }
            }, function (t, e) {
                var n = {
                    _sizeComponent: !0,
                    width: 0,
                    height: 0,
                    displayWidth: {
                        get: function () {
                            return Math.abs(this.scaleX * this.frame.realWidth)
                        },
                        set: function (t) {
                            this.scaleX = t / this.frame.realWidth
                        }
                    },
                    displayHeight: {
                        get: function () {
                            return Math.abs(this.scaleY * this.frame.realHeight)
                        },
                        set: function (t) {
                            this.scaleY = t / this.frame.realHeight
                        }
                    },
                    setSizeToFrame: function (t) {
                        return void 0 === t && (t = this.frame), this.width = t.realWidth, this.height = t.realHeight, this
                    },
                    setSize: function (t, e) {
                        return this.width = t, this.height = e, this
                    },
                    setDisplaySize: function (t, e) {
                        return this.displayWidth = t, this.displayHeight = e, this
                    }
                };
                t.exports = n
            }, function (t, e) {
                t.exports = {
                    texture: null,
                    frame: null,
                    isCropped: !1,
                    setTexture: function (t, e) {
                        return this.texture = this.scene.sys.textures.get(t), this.setFrame(e)
                    },
                    setFrame: function (t, e, n) {
                        return void 0 === e && (e = !0), void 0 === n && (n = !0), this.frame = this.texture.get(t), this.frame.cutWidth && this.frame.cutHeight ? this.renderFlags |= 8 : this.renderFlags &= -9, this._sizeComponent && e && this.setSizeToFrame(), this._originComponent && n && (this.frame.customPivot ? this.setOrigin(this.frame.pivotX, this.frame.pivotY) : this.updateDisplayOrigin()), this
                    }
                }
            }, function (t, e) {
                t.exports = {
                    texture: null,
                    frame: null,
                    isCropped: !1,
                    setCrop: function (t, e, n, i) {
                        if (void 0 === t) this.isCropped = !1;
                        else if (this.frame) {
                            if ("number" == typeof t) this.frame.setCropUVs(this._crop, t, e, n, i, this.flipX, this.flipY);
                            else {
                                var a = t;
                                this.frame.setCropUVs(this._crop, a.x, a.y, a.width, a.height, this.flipX, this.flipY)
                            }
                            this.isCropped = !0
                        }
                        return this
                    },
                    setTexture: function (t, e) {
                        return this.texture = this.scene.sys.textures.get(t), this.setFrame(e)
                    },
                    setFrame: function (t, e, n) {
                        return void 0 === e && (e = !0), void 0 === n && (n = !0), this.frame = this.texture.get(t), this.frame.cutWidth && this.frame.cutHeight ? this.renderFlags |= 8 : this.renderFlags &= -9, this._sizeComponent && e && this.setSizeToFrame(), this._originComponent && n && (this.frame.customPivot ? this.setOrigin(this.frame.pivotX, this.frame.pivotY) : this.updateDisplayOrigin()), this.isCropped && this.frame.updateCropUVs(this._crop, this.flipX, this.flipY), this
                    },
                    resetCropObject: function () {
                        return {
                            u0: 0,
                            v0: 0,
                            u1: 0,
                            v1: 0,
                            width: 0,
                            height: 0,
                            x: 0,
                            y: 0,
                            flipX: !1,
                            flipY: !1,
                            cx: 0,
                            cy: 0,
                            cw: 0,
                            ch: 0
                        }
                    }
                }
            }, function (t, e) {
                t.exports = {
                    tintTopLeft: 16777215,
                    tintTopRight: 16777215,
                    tintBottomLeft: 16777215,
                    tintBottomRight: 16777215,
                    tintFill: !1,
                    clearTint: function () {
                        return this.setTint(16777215), this
                    },
                    setTint: function (t, e, n, i) {
                        return void 0 === t && (t = 16777215), void 0 === e && (e = t, n = t, i = t), this.tintTopLeft = t, this.tintTopRight = e, this.tintBottomLeft = n, this.tintBottomRight = i, this.tintFill = !1, this
                    },
                    setTintFill: function (t, e, n, i) {
                        return this.setTint(t, e, n, i), this.tintFill = !0, this
                    },
                    tint: {
                        set: function (t) {
                            this.setTint(t, t, t, t)
                        }
                    },
                    isTinted: {
                        get: function () {
                            var t = 16777215;
                            return this.tintFill || this.tintTopLeft !== t || this.tintTopRight !== t || this.tintBottomLeft !== t || this.tintBottomRight !== t
                        }
                    }
                }
            }, function (t, e, n) {
                var i = n(1),
                    a = n(1);
                i = n(344), a = n(345), t.exports = {
                    renderWebGL: i,
                    renderCanvas: a
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = e.list,
                        r = a.length;
                    if (0 !== r) {
                        n.addToRenderList(e);
                        var s = e.localTransform;
                        i ? (s.loadIdentity(), s.multiply(i), s.translate(e.x, e.y), s.rotate(e.rotation), s.scale(e.scaleX, e.scaleY)) : s.applyITRS(e.x, e.y, e.rotation, e.scaleX, e.scaleY), t.pipelines.preBatch(e);
                        var o = -1 !== e.blendMode;
                        o || t.setBlendMode(0);
                        for (var l = e.alpha, c = e.scrollFactorX, u = e.scrollFactorY, h = 0; h < r; h++) {
                            var d = a[h];
                            if (d.willRender(n)) {
                                var f, p, g, v;
                                if (void 0 !== d.alphaTopLeft) f = d.alphaTopLeft, p = d.alphaTopRight, g = d.alphaBottomLeft, v = d.alphaBottomRight;
                                else {
                                    var m = d.alpha;
                                    f = m, p = m, g = m, v = m
                                }
                                var E = d.scrollFactorX,
                                    y = d.scrollFactorY;
                                o || d.blendMode === t.currentBlendMode || t.setBlendMode(d.blendMode);
                                var A = d.mask;
                                A && A.preRenderWebGL(t, d, n);
                                var T = d.type;
                                T !== t.currentType && (t.newType = !0, t.currentType = T), t.nextTypeMatch = h < r - 1 && a[h + 1].type === t.currentType, d.setScrollFactor(E * c, y * u), d.setAlpha(f * l, p * l, g * l, v * l), d.renderWebGL(t, d, n, s), d.setAlpha(f, p, g, v), d.setScrollFactor(E, y), A && A.postRenderWebGL(t, n), t.newType = !1
                            }
                        }
                        t.pipelines.postBatch(e)
                    }
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = e.list;
                    if (0 !== a.length) {
                        n.addToRenderList(e);
                        var r = e.localTransform;
                        i ? (r.loadIdentity(), r.multiply(i), r.translate(e.x, e.y), r.rotate(e.rotation), r.scale(e.scaleX, e.scaleY)) : r.applyITRS(e.x, e.y, e.rotation, e.scaleX, e.scaleY);
                        var s = -1 !== e.blendMode;
                        s || t.setBlendMode(0);
                        var o = e._alpha,
                            l = e.scrollFactorX,
                            c = e.scrollFactorY;
                        e.mask && e.mask.preRenderCanvas(t, null, n);
                        for (var u = 0; u < a.length; u++) {
                            var h = a[u];
                            if (h.willRender(n)) {
                                var d = h.alpha,
                                    f = h.scrollFactorX,
                                    p = h.scrollFactorY;
                                s || h.blendMode === t.currentBlendMode || t.setBlendMode(h.blendMode), h.setScrollFactor(f * l, p * c), h.setAlpha(d * o), h.renderCanvas(t, h, n, r), h.setAlpha(d), h.setScrollFactor(f, p)
                            }
                        }
                        e.mask && e.mask.postRenderCanvas(t)
                    }
                }
            }, function (t, e, n) {
                var i = n(25);
                t.exports = function (t, e, n) {
                    void 0 === n && (n = new i);
                    var a = Math.min(t.x, e.x),
                        r = Math.min(t.y, e.y),
                        s = Math.max(t.right, e.right) - a,
                        o = Math.max(t.bottom, e.bottom) - r;
                    return n.setTo(a, r, s, o)
                }
            }, function (t, e, n) {
                var i = n(1),
                    a = n(1);
                i = n(348), a = n(349), t.exports = {
                    renderWebGL: i,
                    renderCanvas: a
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = e.plugin.sceneRenderer,
                        r = e.list;
                    if (0 !== r.length) {
                        n.addToRenderList(e);
                        var s = e.localTransform;
                        i ? (s.loadIdentity(), s.multiply(i), s.translate(e.x, e.y), s.rotate(e.rotation), s.scale(e.scaleX, e.scaleY)) : s.applyITRS(e.x, e.y, e.rotation, e.scaleX, e.scaleY), t.newType && (t.pipelines.clear(), a.begin());
                        var o = t.nextTypeMatch;
                        t.nextTypeMatch = !0, t.newType = !1;
                        for (var l = 0; l < r.length; l++) {
                            var c = r[l];
                            if (c.willRender(n, e)) {
                                var u = c.mask;
                                u && (a.end(), t.pipelines.rebind(), u.preRenderWebGL(t, c, n), t.pipelines.clear(), a.begin()), c.renderWebGL(t, c, n, s, e), u && (a.end(), t.pipelines.rebind(), u.postRenderWebGL(t, n), t.pipelines.clear(), a.begin())
                            }
                        }
                        t.nextTypeMatch = o, o || (a.end(), t.pipelines.rebind())
                    } else a.batcher.isDrawing && t.finalType && (a.end(), t.pipelines.rebind())
                }
            }, function (t, e) {
                t.exports = function (t, e, n, i) {
                    var a = e.list;
                    if (0 !== a.length) {
                        n.addToRenderList(e);
                        var r = e.localTransform;
                        i ? (r.loadIdentity(), r.multiply(i), r.translate(e.x, e.y), r.rotate(e.rotation), r.scale(e.scaleX, e.scaleY)) : r.applyITRS(e.x, e.y, e.rotation, e.scaleX, e.scaleY);
                        var s = -1 !== e.blendMode;
                        s || t.setBlendMode(0);
                        var o = e._alpha,
                            l = e.scrollFactorX,
                            c = e.scrollFactorY;
                        e.mask && e.mask.preRenderCanvas(t, null, n);
                        for (var u = 0; u < a.length; u++) {
                            var h = a[u];
                            if (h.willRender(n)) {
                                var d = h.alpha,
                                    f = h.scrollFactorX,
                                    p = h.scrollFactorY;
                                s || h.blendMode === t.currentBlendMode || t.setBlendMode(h.blendMode), h.setScrollFactor(f * l, p * c), h.setAlpha(d * o), h.renderCanvas(t, h, n, r), h.setAlpha(d), h.setScrollFactor(f, p)
                            }
                        }
                        e.mask && e.mask.postRenderCanvas(t)
                    }
                }
            }]);
            var Fr = ["Enable"],
                Gr = function (t) {
                    function e(e) {
                        var n;
                        return (n = t.call(this, e) || this).handleShowAdWhenStartGame = (0, Kt.default)(jt().mark((function t() {
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (GameCore.Configs.Ads.InterstitialAdOptions.showWhenStartGame) {
                                            t.next = 3;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 3:
                                        return t.prev = 3, t.next = 6, n.ads.preloadInterstitialAdAsync();
                                    case 6:
                                        return t.next = 8, n.ads.showInterstitialAdAsync();
                                    case 8:
                                        t.next = 13;
                                        break;
                                    case 10:
                                        t.prev = 10, t.t0 = t.catch(3);
                                    case 13:
                                        return t.prev = 13, n.ads.preloadInterstitialAdAsync().catch((function () {})), t.finish(13);
                                    case 16:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [3, 10, 13, 16]
                            ])
                        }))), n
                    }(0, zt.default)(e, t);
                    var i = e.prototype;
                    return i.boot = function () {
                        var e = (0, Kt.default)(jt().mark((function e() {
                            return jt().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return t.prototype.boot.call(this), this.addExtraGameObjectMethods(), this.addExtraFBInstantFunctions(), this.addPlugins(), e.next = 6, this.addDevPlugins();
                                    case 6:
                                        this.addScenes(), this.addDevScenes(), this.initAds().then(this.handleShowAdWhenStartGame), this.initWorld(), this.initStorage(), this.initLanguage(), this.initUtils(), this.initRollbar(), this.initConsole(), this.initDebugger(), this.initStatistics(), this.initParticleEditor(), this.initLevelBuilder(), this.initAdaptivePerformance();
                                    case 20:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, this)
                        })));
                        return function () {
                            return e.apply(this, arguments)
                        }
                    }(), i.start = function () {
                        t.prototype.start.call(this)
                    }, i.addExtraGameObjectMethods = function () {
                        var t = new Qt(this);
                        t.addKillRevive(), t.addDrawDebugBox(), t.addSetWorldSize(), t.addSetWorldSizeForContainer(), t.addGetWorldPosition(), t.addHighQuality()
                    }, i.addExtraFBInstantFunctions = function () {
                        var t = new qt.default(this.facebook);
                        this.facebook.getLocale = t.getLocale, this.facebook.shareAsync = t.shareAsync, this.facebook.inviteAsync = t.inviteAsync, this.facebook.switchAsync = t.switchAsync, this.facebook.chooseAsync = t.chooseAsync, this.facebook.createAsync = t.createAsync, this.facebook.sendMessage = t.sendMessage, this.facebook.isSupportAPI = t.isSupportAPI, this.facebook.getContextID = t.getContextID, this.facebook.getPlayerToken = t.getPlayerToken, this.facebook.matchPlayerAsync = t.matchPlayerAsync, this.facebook.getContextPlayers = t.getContextPlayers, this.facebook.setLoadingProgress = t.setLoadingProgress, this.facebook.attemptToAddShortcut = t.attemptToAddShortcut, this.facebook.attemptToSubscribeBot = t.attemptToSubscribeBot, this.facebook.postSessionScoreAsync = t.postSessionScoreAsync, this.facebook.getRewardedVideoAsync = t.getRewardedVideoAsync, this.facebook.getInterstitialAdAsync = t.getInterstitialAdAsync, this.facebook.sendNotificationAsync = t.sendNotificationAsync, t.injectTournament(), this.facebook.progressLoading = new Ra(this)
                    }, i.addPlugins = function () {
                        this.plugins.install("Storage", hi, !0, "storage"), this.plugins.install("Rollbar", xa, !0, "rollbar"), this.plugins.install("AdsManager", ce, !0, "ads"), this.plugins.install("AuthManager", ke, !0, "auth"), this.plugins.install("CoinManager", _i, !0, "coin"), this.plugins.install("AudioManager", Se, !0, "audio"), this.plugins.install("WorldManager", yi, !0, "world"), this.plugins.install("BattleManager", ga, !0, "battle"), this.plugins.install("PlayerManager", We, !0, "player"), this.plugins.install("ProfileManager", en, !0, "profile"), this.plugins.install("LanguageManager", or, !0, "lang"), this.plugins.install("AnalyticsManager", de, !0, "analytics"), this.plugins.install("AdaptivePerformance", zi, !0, "performance"), this.plugins.installScenePlugin("textStyler", mi, "textStyler"), this.plugins.installScenePlugin("ScreenManager", un, "screen"), this.plugins.installScenePlugin("FrameCapture", Oe, "frameCapture"), window.SpinePlugin && this.plugins.installScenePlugin("SpinePlugin", SpinePlugin, "spine"), this.storage = this.plugins.get("Storage"), this.rollbar = this.plugins.get("Rollbar"), this.ads = this.plugins.get("AdsManager"), this.auth = this.plugins.get("AuthManager"), this.audio = this.plugins.get("AudioManager"), this.world = this.plugins.get("WorldManager"), this.battle = this.plugins.get("BattleManager"), this.player = this.plugins.get("PlayerManager"), this.lang = this.plugins.get("LanguageManager"), this.profile = this.plugins.get("ProfileManager"), this.analytics = this.plugins.get("AnalyticsManager"), this.performance = this.plugins.get("AdaptivePerformance")
                    }, i.addDevPlugins = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, i, a, r, s;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (GameCore.Utils.Valid.isDebugger()) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 2:
                                        return t.next = 4, Promise.all([n.e(7), n.e(716)]).then(n.bind(n, 713));
                                    case 4:
                                        return e = t.sent.default, t.next = 7, Promise.all([n.e(498), n.e(739), n.e(227)]).then(n.bind(n, 714));
                                    case 7:
                                        return i = t.sent.default, t.next = 10, n.e(315).then(n.bind(n, 715));
                                    case 10:
                                        return a = t.sent.default, t.next = 13, Promise.all([n.e(498), n.e(516)]).then(n.bind(n, 716));
                                    case 13:
                                        return r = t.sent.default, t.next = 16, Promise.all([n.e(498), n.e(576)]).then(n.bind(n, 718));
                                    case 16:
                                        s = t.sent.default, this.plugins.install("Console", e, !0, "console"), this.plugins.install("Debugger", i, !0, "debugger"), this.plugins.install("Statistics", a, !0, "statistics"), this.plugins.install("ParticleEditor", r, !0, "particle-editor"), this.plugins.install("LevelBuilder", s, !0, "level-builder"), this.eruda = this.plugins.get("Console"), this.debugger = this.plugins.get("Debugger"), this.statistics = this.plugins.get("Statistics"), this.levelBuilder = this.plugins.get("LevelBuilder"), this.particleEditor = this.plugins.get("ParticleEditor");
                                    case 27:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), i.addScenes = function () {
                        this.scene.add(Ji.SceneKeys.BOOT_SCENE, Ba, !0), this.scene.add(Ji.SceneKeys.LOAD_SCENE, ir, !1), this.scene.add(Ji.SceneKeys.GAME_SCENE, Fa.default, !1), this.scene.add(Ji.SceneKeys.GLOBAL_SCENE, ja.default, !1)
                    }, i.addDevScenes = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, i, a;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (GameCore.Utils.Valid.isDebugger()) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 2:
                                        return t.next = 4, n.e(817).then(n.bind(n, 719));
                                    case 4:
                                        return e = t.sent.default, t.next = 7, n.e(947).then(n.bind(n, 720));
                                    case 7:
                                        return i = t.sent.default, t.next = 10, n.e(851).then(n.bind(n, 721));
                                    case 10:
                                        a = t.sent.default, this.scene.add(Ji.SceneKeys.TEST_SCENE, e, !1), this.scene.add(Ji.SceneKeys.ANIMATIONS_SCENE, i, !1), this.scene.add(Ji.SceneKeys.LEVEL_BUILDER_SCENE, a, !1);
                                    case 14:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), i.initAds = function () {
                        var t = (0, Kt.default)(jt().mark((function t() {
                            var e, i, a, r, s, o;
                            return jt().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (e = GameCore.Configs.Ads, lr.default.setGame(this), i = lr.default, !e.Mockup.Enable) {
                                            t.next = 8;
                                            break
                                        }
                                        return t.next = 6, n.e(658).then(n.bind(n, 722));
                                    case 6:
                                        a = t.sent.default, i = a;
                                    case 8:
                                        r = (0, Mt.default)({}, e.InterstitialAdOptions), s = GameSDK.getPlatform(), o = GameSDK.getLocale(), "WEB" === s && "ru" === o && (r.secondsFirstTime = 60, r.secondsBetweenAds = 60), r.showWhenStartGame && (r.secondsFirstTime = 0), this.ads.configure(i, {
                                            enabled: e.Enabled,
                                            interstitialPID: e.InterstitialPlacementId,
                                            rewardedVideoPID: e.VideoRewardsPlacementId,
                                            interstitialAdOptions: r,
                                            bannerAdOptions: e.BannerAdOptions
                                        });
                                    case 14:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, this)
                        })));
                        return function () {
                            return t.apply(this, arguments)
                        }
                    }(), i.initWorld = function () {
                        var t = GameCore.Configs.Game;
                        this.world.configure({
                            width: 375,
                            height: 667,
                            ratio: 320 / 518
                        }), this.world.resize(t.ForcePixelRatio)
                    }, i.initStorage = function () {
                        var t = new Hi(this);
                        this.storage.setInitiator(t)
                    }, i.initLanguage = function () {
                        var t = this.facebook.getLocale();
                        this.lang.configure({
                            locale: t,
                            upperCaseText: !0
                        })
                    }, i.initUtils = function () {
                        this.handlePauseAudio(), this.removeUnusedPipelines(), (0, Bi.setAndCheckVibrateSupport)()
                    }, i.initConsole = function () {
                        GameCore.Utils.Valid.isDebugger() && (GameCore.Configs.Debugger.ShowConsole && this.eruda.configure({
                            tool: ["console", "info"],
                            defaults: {
                                theme: "Dark"
                            }
                        }))
                    }, i.initDebugger = function () {
                        if (GameCore.Utils.Valid.isDebugger()) {
                            var t = GameCore.Configs.Debugger,
                                e = t.ShowInspector,
                                n = t.ShowMonitoring;
                            (e || n) && this.debugger.configure(GameCore.Configs.Debugger)
                        }
                    }, i.initStatistics = function () {
                        GameCore.Utils.Valid.isDebugger() && (GameCore.Configs.Statistics.Enable && this.statistics.configure(GameCore.Configs.Statistics))
                    }, i.initParticleEditor = function () {
                        GameCore.Utils.Valid.isDebugger() && (GameCore.Configs.ParticleEditor.Enable && this.particleEditor.configure(GameCore.Configs.ParticleEditor))
                    }, i.initLevelBuilder = function () {
                        GameCore.Utils.Valid.isDebugger() && (GameCore.Configs.LevelBuilder.Enable && this.levelBuilder.configure(GameCore.Configs.LevelBuilder))
                    }, i.initAdaptivePerformance = function () {
                        var t = GameCore.Configs.Performance,
                            e = t.Enable,
                            n = (0, Wt.default)(t, Fr);
                        if (e) {
                            var i = this.world.getPixelRatio();
                            this.performance.configure((0, Mt.default)({
                                pixelRatio: i
                            }, n)), this.performance.active()
                        }
                    }, i.initRollbar = function () {
                        GameCore.Configs.Rollbar.Enable && this.rollbar.setup()
                    }, i.handlePauseAudio = function () {
                        var t = this;
                        this.sound.pauseOnBlur = !1, document.addEventListener("visibilitychange", (function () {
                            document.hidden ? t.audio.pauseMusic() : t.audio.playMusic()
                        }))
                    }, i.removeUnusedPipelines = function () {
                        var t = this.renderer;
                        if (t instanceof Phaser.Renderer.WebGL.WebGLRenderer) {
                            var e = t.pipelines,
                                n = Phaser.Renderer.WebGL.Pipelines;
                            if (n)[n.ROPE_PIPELINE, n.LIGHT_PIPELINE, n.POINTLIGHT_PIPELINE, n.BITMAPMASK_PIPELINE].forEach((function (t) {
                                var n;
                                null == (n = e.get(t)) || n.destroy(), e.remove(t)
                            }))
                        }
                    }, e
                }(Phaser.Game),
                Hr = Gr,
                Vr = GameCore.Configs.Debugger.ShowInspector,
                Yr = {
                    parent: "app",
                    type: Phaser.AUTO,
                    width: 0,
                    height: 0,
                    scale: {
                        autoRound: !0
                    },
                    dom: {
                        createContainer: !1
                    },
                    loader: {
                        maxParallelDownloads: 6,
                        crossOrigin: "no-cros"
                    },
                    audio: {
                        noAudio: !1,
                        disableWebAudio: !1
                    },
                    input: {
                        gamepad: !1,
                        keyboard: Vr,
                        touch: {
                            capture: !0
                        },
                        smoothFactor: 1,
                        activePointers: 1,
                        windowEvents: !1
                    },
                    disableContextMenu: !0,
                    render: {
                        pixelArt: !1,
                        antialias: !0,
                        antialiasGL: !0,
                        transparent: !0,
                        desynchronized: !1,
                        powerPreference: "high-performance",
                        clearBeforeRender: !1,
                        roundPixels: !1
                    },
                    plugins: {
                        global: []
                    }
                };
            (0, Yt.initSentry)();
            var Wr = setInterval((function () {
                window.__analyticsInitiated && (window.__fbGameReady = !1, clearInterval(Wr), clearInterval(window.__fbInstantLoadingTimer), GameSDK.setLoadingProgress(30), gtag("event", "app_initialize", {
                    send_to: ["GA"]
                }), function () {
                    try {
                        var t = new Hr(Yr);
                        window.game = t
                    } catch (e) {
                        (0, Yt.sendException)(e)
                    }
                }())
            }), 50)
        },
        470: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getConnectedPlayerEntriesAsync: function () {
                    return x
                },
                getLeaderboardAsync: function () {
                    return S
                },
                getPlayerEntryAsync: function () {
                    return b
                },
                setScoreAsync: function () {
                    return _
                },
                setScoreByAPIAsync: function () {
                    return k
                }
            });
            var i = n(29),
                a = n(9),
                r = n(5),
                s = n.n(r),
                o = n(35),
                l = n.n(o),
                c = n(172),
                u = n(348),
                h = GameCore.Configs,
                d = h.ApiHost,
                f = h.OtherHost,
                p = h.LeadersBoard,
                g = p.Prefix,
                v = p.LeaderboardId,
                m = p.Name,
                E = g + "/" + v + "/leaders",
                y = g + "/" + v + "/players",
                A = function (t) {
                    var e = "";
                    return v ? (t === u.LEADERBOARD_TYPE_GLOBAL ? e = E : t === u.LEADERBOARD_TYPE_FRIEND && (e = y), e) : e
                },
                T = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, a, r, o, u, h;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return a = l()(e).call(e, (function (t) {
                                        return t.playerId
                                    })), r = GameCore.Utils.Object.keyBy(e, "playerId"), o = GameCore.Utils.String.params({
                                        playerIds: a
                                    }), t.next = 5, (0, c.get)("players?" + o, {}, d);
                                case 5:
                                    return u = t.sent, h = l()(n = u.data).call(n, (function (t) {
                                        var e = r[t.playerId];
                                        return (0, i.default)({}, t, {
                                            score: e.score,
                                            rank: e.rank,
                                            getScore: function () {
                                                return e.score
                                            },
                                            getFormattedScore: function () {
                                                return ""
                                            },
                                            getTimestamp: function () {
                                                return (new Date).valueOf()
                                            },
                                            getRank: function () {
                                                return e.rank
                                            },
                                            getExtraData: function () {
                                                return e.extraData
                                            },
                                            getPlayer: function () {
                                                return {
                                                    getName: function () {
                                                        return t.name
                                                    },
                                                    getPhoto: function () {
                                                        return t.photo
                                                    },
                                                    getID: function () {
                                                        return t.playerId
                                                    }
                                                }
                                            }
                                        })
                                    })), t.abrupt("return", h);
                                case 8:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                S = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (void 0 === e && (e = {}), null == v) {
                                        t.next = 3;
                                        break
                                    }
                                    return t.abrupt("return", M(e));
                                case 3:
                                    return t.abrupt("return", w(e));
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                M = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i, a, r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (void 0 === e && (e = {}), n = [], i = A(u.LEADERBOARD_TYPE_GLOBAL)) {
                                        t.next = 5;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 5:
                                    return a = GameCore.Utils.String.params(e), t.next = 8, (0, c.get)(i + "?" + a, {}, f);
                                case 8:
                                    if (r = t.sent, !((o = (null == r ? void 0 : r.data) || []).length < 1)) {
                                        t.next = 12;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 12:
                                    return n = o, t.abrupt("return", T(n));
                                case 14:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                w = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i, a, r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return void 0 === e && (e = {}), i = (n = e).limit, a = n.offset, t.next = 4, window.GameSDK.getLeaderboardAsync(m);
                                case 4:
                                    return r = t.sent, t.next = 7, r.getEntriesAsync(i, a);
                                case 7:
                                    return o = t.sent, t.abrupt("return", o);
                                case 9:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                x = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (void 0 === e && (e = {}), null == v) {
                                        t.next = 3;
                                        break
                                    }
                                    return t.abrupt("return", C(e));
                                case 3:
                                    return t.abrupt("return", I(e));
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                C = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i, a, r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (void 0 === e && (e = {}), n = [], i = A(u.LEADERBOARD_TYPE_FRIEND)) {
                                        t.next = 5;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 5:
                                    return a = GameCore.Utils.String.params(e), t.next = 8, (0, c.get)(i + "?" + a, {}, f);
                                case 8:
                                    if (r = t.sent, !((o = (null == r ? void 0 : r.data) || []).length < 1)) {
                                        t.next = 12;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 12:
                                    return n = o, t.abrupt("return", T(n));
                                case 14:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                I = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i, a, r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return void 0 === e && (e = {}), i = (n = e).limit, a = n.offset, t.next = 4, window.GameSDK.getLeaderboardAsync(m);
                                case 4:
                                    return r = t.sent, t.next = 7, r.getConnectedPlayerEntriesAsync(i, a);
                                case 7:
                                    return o = t.sent, t.abrupt("return", o);
                                case 9:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                b = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (null == v) {
                                        t.next = 2;
                                        break
                                    }
                                    return t.abrupt("return", R(e));
                                case 2:
                                    return t.abrupt("return", P());
                                case 3:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                R = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i, a, r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (n = null, e) {
                                        t.next = 3;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 3:
                                    if (i = A(u.LEADERBOARD_TYPE_FRIEND)) {
                                        t.next = 6;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 6:
                                    return a = GameCore.Utils.String.params({
                                        playerIds: e
                                    }), t.next = 9, (0, c.get)(i + "?" + a, {}, f);
                                case 9:
                                    if (r = t.sent, !((o = (null == r ? void 0 : r.data) || []).length < 1)) {
                                        t.next = 13;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 13:
                                    return n = T(o)[0], t.abrupt("return", n);
                                case 15:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                P = function () {
                    var t = (0, a.default)(s().mark((function t() {
                        var e, n;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, window.GameSDK.getLeaderboardAsync(m);
                                case 2:
                                    return e = t.sent, t.next = 5, e.getPlayerEntryAsync();
                                case 5:
                                    return n = t.sent, t.abrupt("return", n);
                                case 7:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function () {
                        return t.apply(this, arguments)
                    }
                }(),
                _ = function () {
                    var t = (0, a.default)(s().mark((function t(e, n, i) {
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (null == v) {
                                        t.next = 2;
                                        break
                                    }
                                    return t.abrupt("return", k(e, n));
                                case 2:
                                    return t.abrupt("return", L(n, i));
                                case 3:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e, n, i) {
                        return t.apply(this, arguments)
                    }
                }(),
                k = function () {
                    var t = (0, a.default)(s().mark((function t(e, n) {
                        var i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, (0, c.post)("leaderboards/" + v + "/players/" + e, {
                                        score: n
                                    }, {}, f);
                                case 2:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e, n) {
                        return t.apply(this, arguments)
                    }
                }(),
                L = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 3, window.GameSDK.getLeaderboardAsync(m);
                                case 3:
                                    return n = t.sent, t.next = 6, n.setScoreAsync(e);
                                case 6:
                                    return t.abrupt("return", t.sent);
                                case 7:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }()
        },
        585: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                LEADERBOARD_DATA_CLEAR: function () {
                    return r
                },
                LEADERBOARD_DATA_REQUEST: function () {
                    return i
                },
                LEADERBOARD_DATA_UPDATE: function () {
                    return a
                }
            });
            var i = "LEADERBOARD_DATA_REQUEST",
                a = "LEADERBOARD_DATA_UPDATE",
                r = "LEADERBOARD_DATA_CLEAR"
        },
        348: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                LEADERBOARD_TYPE_FRIEND: function () {
                    return a
                },
                LEADERBOARD_TYPE_GLOBAL: function () {
                    return i
                }
            });
            var i = "global",
                a = "friend"
        },
        582: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                REDUCER_NAME: function () {
                    return i
                }
            });
            var i = "leaderboards"
        },
        599: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                cleanOnlineMatch: function () {
                    return st
                },
                clearChallengeMatchData: function () {
                    return et
                },
                clearSingleMatchData: function () {
                    return q
                },
                continueChallengeMatch: function () {
                    return J
                },
                createChallengeMatch: function () {
                    return Z
                },
                createGroupMatch: function () {
                    return nt
                },
                createOnlineMatch: function () {
                    return at
                },
                createSingleMatch: function () {
                    return W
                },
                finishChallengeMatch: function () {
                    return $
                },
                finishGroupMatch: function () {
                    return it
                },
                finishOnlineMatch: function () {
                    return ot
                },
                finishSingleMatch: function () {
                    return X
                },
                getSingleMatchDetail: function () {
                    return K
                },
                joinChallengeMatch: function () {
                    return Q
                },
                loadSingleMatch: function () {
                    return Y
                },
                updateSingleMatchMove: function () {
                    return z
                }
            });
            var i = n(29),
                a = n(9),
                r = n(5),
                s = n.n(r),
                o = n(90),
                l = n.n(o),
                c = n(35),
                u = n.n(c),
                h = n(113),
                d = n.n(h),
                f = n(32),
                p = n(591),
                g = n(110),
                v = n(172),
                m = GameCore.Configs.ApiHost,
                E = (function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return "single-matches", t.next = 3, (0, v.post)("single-matches", e, {}, m);
                                case 3:
                                    return n = t.sent, t.abrupt("return", (null == n ? void 0 : n.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, a.default)(s().mark((function t() {
                        var e;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return "single-matches/active", t.next = 3, (0, v.get)("single-matches/active", {}, m);
                                case 3:
                                    return e = t.sent, t.abrupt("return", (null == e ? void 0 : e.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, a.default)(s().mark((function t(e, n) {
                        var i, a;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return i = "single-matches/" + e + "/move", t.next = 3, (0, v.post)(i, n, {}, m);
                                case 3:
                                    return a = t.sent, t.abrupt("return", (null == a ? void 0 : a.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = "single-matches/" + e + "/finish", t.next = 3, (0, v.post)(n, {}, {}, m);
                                case 3:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return "matches", t.next = 3, (0, v.post)("matches", {
                                        opponentPlayerId: e
                                    }, {}, m);
                                case 3:
                                    return n = t.sent, t.abrupt("return", (null == n ? void 0 : n.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }()),
                y = (function () {
                    var t = (0, a.default)(s().mark((function t() {
                        var e;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return "matches", t.next = 3, (0, v.get)("matches", {}, m);
                                case 3:
                                    return e = t.sent, t.abrupt("return", (null == e ? void 0 : e.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = "matches/" + e + "/join", t.next = 3, (0, v.post)(n, {}, {}, m);
                                case 3:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }()),
                A = function () {
                    var t = (0, a.default)(s().mark((function t(e) {
                        var n, i;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = "matches/" + e, t.next = 3, (0, v.get)(n, {}, m);
                                case 3:
                                    return i = t.sent, t.abrupt("return", (null == i ? void 0 : i.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                T = function () {
                    var t = (0, a.default)(s().mark((function t(e, n, i, a) {
                        var r, o;
                        return s().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return r = "matches/" + e + "/finish", t.next = 3, (0, v.post)(r, {
                                        matchId: e,
                                        score: n,
                                        level: i,
                                        extraData: a
                                    }, {}, m);
                                case 3:
                                    return o = t.sent, t.abrupt("return", (null == o ? void 0 : o.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e, n, i, a) {
                        return t.apply(this, arguments)
                    }
                }(),
                S = n(193),
                M = n(194),
                w = n(464),
                x = n(0),
                C = n(47),
                I = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidMatchStatus", i.message = e || "The match status is not valid", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                b = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidOpponentId", i.message = e || "Invalid opponent id", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                R = n(458),
                P = n(600),
                _ = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidBlackPlayerId", i.message = e || "Invalid black player id", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                k = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidRequestedMatchId", i.message = e || "The matchId in match data not matched with requested matchId", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                L = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidScore", i.message = e || "The score is not valid", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                D = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidWhitePlayerId", i.message = e || "Invalid white player id", i.payload = n, i
                    }
                    return (0, x.default)(e, t), e
                }((0, C.default)(Error)),
                O = function (t) {
                    var e = t.matchId,
                        n = t.currentMatchId;
                    if ("" === e || "string" !== typeof e) throw new w.default(null, {
                        matchId: e
                    });
                    if ("" === n || "string" !== typeof n) throw new w.default(null, {
                        currentMatchId: n
                    });
                    if (e !== n) throw new k(null, {
                        matchId: e,
                        currentMatchId: n
                    })
                },
                N = function (t) {
                    var e = t.playerId,
                        n = t.match,
                        i = n._id,
                        a = n.playerId,
                        r = n.status;
                    if ("" === i || "string" !== typeof i) throw new w.default(null, {
                        matchId: i
                    });
                    if ("finished" === r || "string" !== typeof r) throw new I("This match is finished", {
                        status: r
                    });
                    if (a !== e) throw new R.default(null, {
                        playerId: a,
                        currentPlayerId: e
                    })
                },
                U = function (t) {
                    var e = t.opponentId;
                    if ("" === e || "string" !== typeof e) throw new b(null, {
                        opponentId: e
                    })
                },
                B = function (t) {
                    var e = t.matchId;
                    if ("" === e || "string" !== typeof e) throw new w.default(null, {
                        matchId: e
                    })
                },
                F = function (t) {
                    var e = t.match,
                        n = e._id,
                        i = e.whitePlayerId,
                        a = e.blackPlayerId;
                    if ("" === n || "string" !== typeof n) throw new w.default(null, {
                        matchId: n
                    });
                    if ("" === i || "string" !== typeof i) throw new D(null, {
                        whitePlayerId: i
                    });
                    if ("" === a || "string" !== typeof a) throw new _(null, {
                        blackPlayerId: a
                    })
                },
                G = GameCore.Configs.Match,
                H = function (t) {
                    try {
                        return GameCore.Utils.Hash.stringToHash(l()(t))
                    } catch (e) {
                        return ""
                    }
                },
                V = function (t) {
                    try {
                        return JSON.parse(GameCore.Utils.Hash.hashToString(t))
                    } catch (e) {
                        return ""
                    }
                },
                Y = function () {
                    return function (t) {
                        try {
                            var e = (0, p.getByKeyLocalStorage)(G.SingleMatchStore);
                            if (!GameCore.Utils.Valid.isObject(e)) return;
                            var n = e.data;
                            if (e.data = V(n), "object" === typeof e && null !== e)(e || {})._id === G.localSingleMatchDefault._id && t(j(e));
                            else t(W())
                        } catch (i) {
                            (0, g.sendException)(i)
                        }
                    }
                },
                W = function () {
                    return function () {
                        var t = (0, a.default)(s().mark((function t(e) {
                            var n, a, r, o;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        t.prev = 0, n = window.game, a = n.player, n.globalScene.screen.open(f.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), e({
                                            type: S.MATCH_SINGLE_CREATE_REQUEST,
                                            payload: {}
                                        }), r = a.getPlayerId(), o = (0, i.default)({}, G.LocalSingleMatchDefault, {
                                            status: "active",
                                            playerId: r,
                                            startedAt: Date.now()
                                        }), N({
                                            playerId: r,
                                            match: o
                                        }), e(j(o)), (0, p.writeByKeyLocalStorage)(G.SingleMatchStore, o), t.next = 19;
                                        break;
                                    case 11:
                                        if (t.prev = 11, t.t0 = t.catch(0), e(j(null)), !(t.t0 instanceof w.default)) {
                                            t.next = 16;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 16:
                                        if (!(t.t0 instanceof I)) {
                                            t.next = 18;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 18:
                                        (0, g.sendException)(t.t0);
                                    case 19:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 11]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                K = function () {
                    return function (t) {
                        try {
                            var e = window.game.player;
                            t({
                                type: S.MATCH_SINGLE_DETAIL_REQUEST,
                                payload: {}
                            });
                            var n = e.getPlayerId(),
                                i = (0, p.getByKeyLocalStorage)(G.SingleMatchStore) || {},
                                a = i.data;
                            i.data = V(a), N({
                                playerId: n,
                                match: i
                            }), t(j(i))
                        } catch (r) {
                            if (t(j(null)), r instanceof w.default) return;
                            if (r instanceof R.default) return;
                            if (r instanceof I) return;
                            (0, g.sendException)(r)
                        }
                    }
                },
                z = function (t, e) {
                    return function (n, a) {
                        try {
                            ! function (t) {
                                var e = t.matchId,
                                    n = t.score;
                                if ("" === e || "string" !== typeof e) throw new w.default(null, {
                                    matchId: e
                                });
                                if ("number" !== typeof n) throw new L(null, {
                                    score: n
                                })
                            }((0, i.default)({
                                matchId: t
                            }, e));
                            var r = a(),
                                s = (0, P.getSingleMatchId)(r);
                            ! function (t) {
                                var e = t.matchId,
                                    n = t.currentMatchId;
                                if ("" === e || "string" !== typeof e) throw new w.default(null, {
                                    matchId: e
                                });
                                if ("" === n || "string" !== typeof n) throw new w.default(null, {
                                    currentMatchId: n
                                });
                                if (e !== n) throw new k(null, {
                                    matchId: e,
                                    currentMatchId: n
                                })
                            }({
                                matchId: t,
                                currentMatchId: s
                            }), n({
                                type: S.MATCH_SINGLE_MOVE_UPDATED,
                                payload: {
                                    match: e
                                }
                            });
                            var o = e.data;
                            e.data = H(o), (0, p.writeByKeyLocalStorage)(G.SingleMatchStore, e)
                        } catch (l) {
                            if (l instanceof w.default) return;
                            (0, g.sendException)(l)
                        }
                    }
                },
                X = function (t) {
                    return function () {
                        var e = (0, a.default)(s().mark((function e(n, a) {
                            var r, o, l, c, u, h, d, f;
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        e.prev = 0, r = window.game.player, B({
                                            matchId: t
                                        }), o = a(), l = (0, P.getSingleMatchId)(o), c = r.getPlayerId(), O({
                                            matchId: t,
                                            currentMatchId: l
                                        }), n({
                                            type: S.MATCH_SINGLE_FINISH_REQUEST,
                                            payload: {
                                                matchId: t
                                            }
                                        }), u = (0, P.getSingleMatchData)(o), N({
                                            playerId: c,
                                            match: u
                                        }), h = (0, i.default)({}, G.LocalSingleMatchDefault, u, {
                                            _id: t,
                                            status: "finished",
                                            playerId: c,
                                            finishAt: Date.now()
                                        }), n(j(h)), d = h.data, (f = (0, i.default)({}, h)).data = H(d), (0, p.writeByKeyLocalStorage)(G.SingleMatchStore, f), e.next = 26;
                                        break;
                                    case 18:
                                        if (e.prev = 18, e.t0 = e.catch(0), n(j(null)), !(e.t0 instanceof w.default)) {
                                            e.next = 23;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 23:
                                        if (!(e.t0 instanceof I)) {
                                            e.next = 25;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 25:
                                        (0, g.sendException)(e.t0);
                                    case 26:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 18]
                            ])
                        })));
                        return function (t, n) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                j = function (t) {
                    return {
                        type: S.MATCH_SINGLE_DATA_RECEIVED,
                        payload: {
                            match: t
                        }
                    }
                },
                q = function () {
                    return {
                        type: S.MATCH_SINGLE_DATA_CLEAR,
                        payload: {}
                    }
                },
                Z = function (t) {
                    return function () {
                        var e = (0, a.default)(s().mark((function e(n) {
                            var i, a, r, o;
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.prev = 0, i = window.game, a = i.profile, i.globalScene.screen.open(f.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), r = t.playerId, U({
                                            opponentId: r
                                        }), n({
                                            type: S.MATCH_CHALLENGE_CREATE_REQUEST,
                                            payload: {
                                                opponentInfo: t
                                            }
                                        }), e.next = 8, E(r);
                                    case 8:
                                        return o = e.sent, F({
                                            match: o
                                        }), e.next = 12, a.requestProfiles([r]);
                                    case 12:
                                        n(tt(o)), e.next = 23;
                                        break;
                                    case 15:
                                        if (e.prev = 15, e.t0 = e.catch(0), n(tt(null)), !(e.t0 instanceof w.default)) {
                                            e.next = 20;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 20:
                                        if (!(e.t0 instanceof b)) {
                                            e.next = 22;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 22:
                                        (0, g.sendException)(e.t0);
                                    case 23:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 15]
                            ])
                        })));
                        return function (t) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                Q = function (t) {
                    return function () {
                        var e = (0, a.default)(s().mark((function e(n) {
                            var i, a, r, o, l, c, u, h, d;
                            return s().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.prev = 0, i = window.game, a = i.player, r = i.profile, i.globalScene.screen.open(f.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), B({
                                            matchId: t
                                        }), n({
                                            type: S.MATCH_CHALLENGE_JOIN_REQUEST,
                                            payload: {
                                                matchId: t
                                            }
                                        }), e.next = 7, y(t);
                                    case 7:
                                        if (o = e.sent, F({
                                                match: o
                                            }), l = o.status, c = o.whitePlayerId, u = o.blackPlayerId, l !== M.MATCH_STATUS_ACTIVE) {
                                            e.next = 16;
                                            break
                                        }
                                        return h = a.getPlayerId(), d = h === c ? u : c, e.next = 16, r.requestProfiles([d]);
                                    case 16:
                                        n(tt(o)), e.next = 25;
                                        break;
                                    case 19:
                                        if (e.prev = 19, e.t0 = e.catch(0), n(tt(null)), !(e.t0 instanceof w.default)) {
                                            e.next = 24;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 24:
                                        (0, g.sendException)(e.t0);
                                    case 25:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 19]
                            ])
                        })));
                        return function (t) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                J = function (t, e) {
                    return function () {
                        var n = (0, a.default)(s().mark((function n(i) {
                            var a, r, o, l, c, u, h, d, p;
                            return s().wrap((function (n) {
                                for (;;) switch (n.prev = n.next) {
                                    case 0:
                                        return n.prev = 0, a = window.game, r = a.player, a.globalScene.screen.open(f.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), B({
                                            matchId: t
                                        }), i({
                                            type: S.MATCH_CHALLENGE_CONTINUE_REQUEST,
                                            payload: {
                                                matchId: t,
                                                opponentInfo: e
                                            }
                                        }), n.next = 7, A(t);
                                    case 7:
                                        o = n.sent, F({
                                            match: o
                                        }), l = o.whitePlayerId, c = o.whitePlayerScore, u = o.blackPlayerScore, h = r.getPlayerId(), d = r.getPlayerData(), p = d.score, i(tt(o, {
                                            score: h === l ? c : u,
                                            bestScore: p
                                        })), n.next = 23;
                                        break;
                                    case 17:
                                        if (n.prev = 17, n.t0 = n.catch(0), i(tt(null)), !(n.t0 instanceof w.default)) {
                                            n.next = 22;
                                            break
                                        }
                                        return n.abrupt("return");
                                    case 22:
                                        (0, g.sendException)(n.t0);
                                    case 23:
                                    case "end":
                                        return n.stop()
                                }
                            }), n, null, [
                                [0, 17]
                            ])
                        })));
                        return function (t) {
                            return n.apply(this, arguments)
                        }
                    }()
                },
                $ = function (t, e, n) {
                    return function () {
                        var i = (0, a.default)(s().mark((function i(a) {
                            var r, o;
                            return s().wrap((function (i) {
                                for (;;) switch (i.prev = i.next) {
                                    case 0:
                                        return i.prev = 0, window.game.globalScene.screen.open(f.ScreenKeys.NOTIFY_SCREEN, {
                                            message: "Loading...",
                                            loading: !0
                                        }), B({
                                            matchId: t
                                        }), a({
                                            type: S.MATCH_CHALLENGE_FINISH_REQUEST,
                                            payload: {
                                                matchId: t,
                                                score: e,
                                                extraData: n
                                            }
                                        }), r = n.level, i.next = 8, T(t, e, r, n);
                                    case 8:
                                        return o = i.sent, F({
                                            match: o
                                        }), i.next = 12, a(tt(o));
                                    case 12:
                                        i.next = 20;
                                        break;
                                    case 14:
                                        if (i.prev = 14, i.t0 = i.catch(0), a(tt(null)), !(i.t0 instanceof w.default)) {
                                            i.next = 19;
                                            break
                                        }
                                        return i.abrupt("return");
                                    case 19:
                                        (0, g.sendException)(i.t0);
                                    case 20:
                                    case "end":
                                        return i.stop()
                                }
                            }), i, null, [
                                [0, 14]
                            ])
                        })));
                        return function (t) {
                            return i.apply(this, arguments)
                        }
                    }()
                },
                tt = function (t, e, n) {
                    return void 0 === n && (n = null), {
                        type: S.MATCH_CHALLENGE_DATA_RECEIVED,
                        payload: {
                            match: t,
                            opponentInfo: e,
                            current: n
                        }
                    }
                },
                et = function () {
                    return {
                        type: S.MATCH_CHALLENGE_DATA_CLEAR,
                        payload: {}
                    }
                },
                nt = function (t) {
                    return {
                        type: S.MATCH_GROUP_CREATE_REQUEST,
                        payload: {
                            opponentInfo: t
                        }
                    }
                },
                it = function () {
                    return {
                        type: S.MATCH_GROUP_FINISH_REQUEST,
                        payload: {}
                    }
                },
                at = function () {
                    return function () {
                        var t = (0, a.default)(s().mark((function t(e) {
                            var n, i, a, r, o, l, c, h;
                            return s().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        a = window.game.player, r = a.getPlayer(), o = r.playerId, l = r.name, c = r.photo, e({
                                            type: S.MATCH_ONLINE_CREATE_REQUEST,
                                            payload: {
                                                playerId: o
                                            }
                                        }), h = {}, u()(n = d()(i = new Array(20)).call(i, null)).call(n, (function (t, e) {
                                            var n = "0" + (e + 1);
                                            h[n] = {
                                                playerId: n,
                                                name: "MPlayer " + n,
                                                photo: "./assets/images/others/avatar.png"
                                            }
                                        })), h[o] = {
                                            playerId: o,
                                            name: l,
                                            photo: c
                                        }, e(rt("mock", h));
                                    case 7:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                rt = function (t, e) {
                    return {
                        type: S.MATCH_ONLINE_DATA_RECEIVED,
                        payload: {
                            matchId: t,
                            players: e
                        }
                    }
                },
                st = function () {
                    return {
                        type: S.MATCH_ONLINE_DATA_CLEAR,
                        payload: {}
                    }
                },
                ot = function () {
                    return {
                        type: S.MATCH_ONLINE_FINISH_REQUEST,
                        payload: {}
                    }
                }
        },
        193: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                MATCH_CHALLENGE_CONTINUE_REQUEST: function () {
                    return S
                },
                MATCH_CHALLENGE_CREATE_REQUEST: function () {
                    return A
                },
                MATCH_CHALLENGE_DATA_CLEAR: function () {
                    return w
                },
                MATCH_CHALLENGE_DATA_RECEIVED: function () {
                    return M
                },
                MATCH_CHALLENGE_FINISH_REQUEST: function () {
                    return T
                },
                MATCH_CHALLENGE_JOIN_REQUEST: function () {
                    return y
                },
                MATCH_GAMEPLAY_FINISH: function () {
                    return r
                },
                MATCH_GAMEPLAY_INITIALIZE: function () {
                    return i
                },
                MATCH_GAMEPLAY_RESCUE: function () {
                    return o
                },
                MATCH_GAMEPLAY_START: function () {
                    return a
                },
                MATCH_GAMEPLAY_UPDATE: function () {
                    return s
                },
                MATCH_GROUP_CREATE_REQUEST: function () {
                    return x
                },
                MATCH_GROUP_FINISH_REQUEST: function () {
                    return C
                },
                MATCH_ONLINE_CREATE_REQUEST: function () {
                    return I
                },
                MATCH_ONLINE_DATA_CLEAR: function () {
                    return _
                },
                MATCH_ONLINE_DATA_RECEIVED: function () {
                    return b
                },
                MATCH_ONLINE_FINISH_REQUEST: function () {
                    return P
                },
                MATCH_ONLINE_STATS_UPDATE: function () {
                    return R
                },
                MATCH_SINGLE_CREATE_REQUEST: function () {
                    return f
                },
                MATCH_SINGLE_DATA_CLEAR: function () {
                    return E
                },
                MATCH_SINGLE_DATA_RECEIVED: function () {
                    return m
                },
                MATCH_SINGLE_DETAIL_REQUEST: function () {
                    return p
                },
                MATCH_SINGLE_FINISH_REQUEST: function () {
                    return g
                },
                MATCH_SINGLE_MOVE_UPDATED: function () {
                    return v
                },
                MATCH_STATS_CONTEXT_RECEIVED: function () {
                    return d
                },
                MATCH_STATS_CONTEXT_REQUEST: function () {
                    return h
                },
                MATCH_STATS_CURRENT_UPDATE: function () {
                    return u
                },
                MATCH_STATS_DATA_CLEAR: function () {
                    return l
                },
                MATCH_STATS_DATA_UPDATE: function () {
                    return c
                }
            });
            var i = "MATCH_GAMEPLAY_INITIALIZE",
                a = "MATCH_GAMEPLAY_START",
                r = "MATCH_GAMEPLAY_FINISH",
                s = "MATCH_GAMEPLAY_UPDATE",
                o = "MATCH_GAMEPLAY_RESCUE",
                l = "MATCH_STATS_DATA_CLEAR",
                c = "MATCH_STATS_DATA_UPDATE",
                u = "MATCH_STATS_CURRENT_UPDATE",
                h = "MATCH_STATS_CONTEXT_REQUEST",
                d = "MATCH_STATS_CONTEXT_RECEIVED",
                f = "MATCH_SINGLE_CREATE_REQUEST",
                p = "MATCH_SINGLE_DETAIL_REQUEST",
                g = "MATCH_SINGLE_FINISH_REQUEST",
                v = "MATCH_SINGLE_MOVE_UPDATED",
                m = "MATCH_SINGLE_DATA_RECEIVED",
                E = "MATCH_SINGLE_DATA_CLEAR",
                y = "MATCH_CHALLENGE_JOIN_REQUEST",
                A = "MATCH_CHALLENGE_CREATE_REQUEST",
                T = "MATCH_CHALLENGE_FINISH_REQUEST",
                S = "MATCH_CHALLENGE_CONTINUE_REQUEST",
                M = "MATCH_CHALLENGE_DATA_RECEIVED",
                w = "MATCH_CHALLENGE_DATA_CLEAR",
                x = "MATCH_GROUP_CREATE_REQUEST",
                C = "MATCH_GROUP_FINISH_REQUEST",
                I = "MATCH_ONLINE_CREATE_REQUEST",
                b = "MATCH_ONLINE_DATA_RECEIVED",
                R = "MATCH_ONLINE_STATS_UPDATE",
                P = "MATCH_ONLINE_FINISH_REQUEST",
                _ = "MATCH_ONLINE_DATA_CLEAR"
        },
        197: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                MATCH_MODE_CHALLENGE_FRIENDS: function () {
                    return a
                },
                MATCH_MODE_MATCHING_GROUP: function () {
                    return r
                },
                MATCH_MODE_ONLINE: function () {
                    return o
                },
                MATCH_MODE_SINGLE: function () {
                    return i
                },
                MATCH_MODE_TOURNAMENTS: function () {
                    return s
                }
            });
            var i = "single",
                a = "challenge-friends",
                r = "matching-group",
                s = "tournaments",
                o = "online"
        },
        194: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                MATCH_STATUS_ACTIVE: function () {
                    return a
                },
                MATCH_STATUS_FINISHED: function () {
                    return r
                },
                MATCH_STATUS_OPEN: function () {
                    return i
                }
            });
            var i = "open",
                a = "active",
                r = "finished"
        },
        579: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                REDUCER_NAME: function () {
                    return i
                }
            });
            var i = "match"
        },
        464: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidMatchId", i.message = e || "Invalid match id", i.payload = n, i
                    }
                    return (0, i.default)(e, t), e
                }((0, n(47).default)(Error));
            e.default = a
        },
        458: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(0),
                a = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidPlayerId", i.message = e || "The playerId is not valid", i.payload = n, i
                    }
                    return (0, i.default)(e, t), e
                }((0, n(47).default)(Error));
            e.default = a
        },
        465: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getState: function () {
                    return a
                }
            });
            var i = n(579),
                a = function (t) {
                    return t[i.REDUCER_NAME]
                }
        },
        600: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getChallengeMatchBlackPlayerId: function () {
                    return T
                },
                getChallengeMatchData: function () {
                    return v
                },
                getChallengeMatchId: function () {
                    return m
                },
                getChallengeMatchOpponentId: function () {
                    return S
                },
                getChallengeMatchOpponentInfo: function () {
                    return y
                },
                getChallengeMatchPlayerId: function () {
                    return M
                },
                getChallengeMatchStatus: function () {
                    return E
                },
                getChallengeMatchWhitePlayerId: function () {
                    return A
                },
                getGroupMatchOpponentInfo: function () {
                    return C
                },
                getIsOpponentFinishChallengeMatch: function () {
                    return x
                },
                getIsPlayerFinishChallengeMatch: function () {
                    return w
                },
                getMatchRequesting: function () {
                    return o
                },
                getOnlineMatchPlayers: function () {
                    return I
                },
                getSingleMatchData: function () {
                    return l
                },
                getSingleMatchDiamond: function () {
                    return d
                },
                getSingleMatchFen: function () {
                    return f
                },
                getSingleMatchId: function () {
                    return c
                },
                getSingleMatchLevel: function () {
                    return h
                },
                getSingleMatchPlayerId: function () {
                    return g
                },
                getSingleMatchScore: function () {
                    return u
                },
                getSingleMatchStatus: function () {
                    return p
                }
            });
            var i = n(196),
                a = n(91),
                r = n(465),
                s = function (t, e) {
                    return e.playerId
                },
                o = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.isRequesting
                }], (function (t) {
                    return t
                })),
                l = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single
                }], (function (t) {
                    return t
                })),
                c = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single._id
                }], (function (t) {
                    return t
                })),
                u = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single.score
                }], (function (t) {
                    return t || 0
                })),
                h = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single.level
                }], (function (t) {
                    return t || 0
                })),
                d = (0, a.createSelector)([function (t) {
                    var e;
                    return null == (e = (0, r.getState)(t).match.single.data) ? void 0 : e.diamond
                }], (function (t) {
                    return t || 0
                })),
                f = (0, a.createSelector)([function (t) {
                    var e;
                    return null == (e = (0, r.getState)(t).match.single.data) ? void 0 : e.fen
                }], (function (t) {
                    return t || null
                })),
                p = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single.status
                }], (function (t) {
                    return t
                })),
                g = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.single.playerId
                }], (function (t) {
                    return t
                })),
                v = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge
                }], (function (t) {
                    return t
                })),
                m = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge._id
                }], (function (t) {
                    return t
                })),
                E = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge.status
                }], (function (t) {
                    return t
                })),
                y = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge.opponentInfo
                }], (function (t) {
                    return t
                })),
                A = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge.whitePlayerId
                }], (function (t) {
                    return t
                })),
                T = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.challenge.blackPlayerId
                }], (function (t) {
                    return t
                })),
                S = (0, a.createSelector)([v, s], (function (t, e) {
                    var n = t.whitePlayerId,
                        i = t.blackPlayerId;
                    return n !== e && i === e ? n : i !== e && n === e ? i : ""
                })),
                M = (0, a.createSelector)([v, s], (function (t, e) {
                    var n = t.whitePlayerId,
                        a = t.blackPlayerId;
                    return n === e ? n : a === e ? a : i.SampleOpponent.playerId
                })),
                w = (0, a.createSelector)([v, s], (function (t, e) {
                    var n = t.whitePlayerId,
                        i = t.blackPlayerId,
                        a = t.whitePlayerFinish,
                        r = t.blackPlayerFinish;
                    return e && n === e ? a : !(!e || i !== e) && r
                })),
                x = (0, a.createSelector)([v, function (t, e) {
                    return e.opponentId
                }], (function (t, e) {
                    var n = t.whitePlayerId,
                        i = t.blackPlayerId,
                        a = t.whitePlayerFinish,
                        r = t.blackPlayerFinish;
                    return e && n === e ? a : !(!e || i !== e) && r
                })),
                C = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.group.opponentInfo
                }], (function (t) {
                    return t
                })),
                I = (0, a.createSelector)([function (t) {
                    return (0, r.getState)(t).match.online.players
                }], (function (t) {
                    return t
                }))
        },
        601: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                checkOfflineReward: function () {
                    return h
                },
                receiveOfflineReward: function () {
                    return d
                },
                setOfflineRewardShow: function () {
                    return f
                }
            });
            var i = n(60),
                a = n(581),
                r = "offlineRewardLastCheck",
                s = n(602),
                o = GameCore.Configs.OfflineReward,
                l = o.Enable,
                c = o.MinimumTimeToActive,
                u = i.default.LEVEL_PROGRESS,
                h = function () {
                    return function (t, e) {
                        if (l) {
                            var n = e();
                            if (!(0, s.getOfflineRewardChecked)(n)) {
                                t({
                                    type: a.OFFLINE_REWARD_CHECKING,
                                    payload: {}
                                });
                                var i = window.game.player,
                                    o = Date.now(),
                                    h = i.getCustomData(r);
                                if (i.setCustomData(r, o), h) {
                                    var f = i.getCustomData(u),
                                        p = 0;
                                    if (f && "number" === typeof f && (p = f), !(p < 3)) {
                                        var g = o - h;
                                        if (!(g < c)) {
                                            var v = Math.floor(g / 6e4);
                                            t(d(v))
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                d = function (t) {
                    return {
                        type: a.OFFLINE_REWARD_RECEIVED,
                        payload: {
                            value: t
                        }
                    }
                },
                f = function () {
                    return function (t) {
                        l && t({
                            type: a.OFFLINE_REWARD_RECEIVED_SHOW,
                            payload: {}
                        })
                    }
                }
        },
        581: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                OFFLINE_REWARD_CHECKING: function () {
                    return i
                },
                OFFLINE_REWARD_RECEIVED: function () {
                    return a
                },
                OFFLINE_REWARD_RECEIVED_SHOW: function () {
                    return r
                }
            });
            var i = "OFFLINE_REWARD_CHECKING",
                a = "OFFLINE_REWARD_RECEIVED",
                r = "OFFLINE_REWARD_RECEIVED_CHECKED"
        },
        580: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                REDUCER_NAME: function () {
                    return i
                }
            });
            var i = "offline-reward"
        },
        602: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getOfflineRewardChecked: function () {
                    return s
                },
                getOfflineRewardShow: function () {
                    return l
                },
                getOfflineRewardValue: function () {
                    return o
                }
            });
            var i = n(91),
                a = n(580),
                r = function (t) {
                    return t[a.REDUCER_NAME]
                },
                s = (0, i.createSelector)([function (t) {
                    return r(t).checked
                }], (function (t) {
                    return t
                })),
                o = (0, i.createSelector)([function (t) {
                    return r(t).valueReceived
                }], (function (t) {
                    return t
                })),
                l = (0, i.createSelector)([function (t) {
                    return r(t).hasShowReward
                }], (function (t) {
                    return t
                }))
        },
        341: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                AnalyticsEvents: function () {
                    return i
                }
            });
            var i = {
                BUTTON_CLICK: "button_click",
                SCREEN_OPEN: "screen_open",
                LOAD_START: "load_start",
                LOAD_COMPLETE: "load_complete",
                APP_READY: "app_ready",
                TUTORIAL_BEGIN: "tutorial_begin",
                TUTORIAL_STEP: "tutorial_step",
                TUTORIAL_COMPLETE: "tutorial_complete",
                MATCH_START: "match_start",
                MATCH_RESCUE: "match_rescue",
                MATCH_END: "match_end",
                LEVEL_START: "level_start",
                LEVEL_RESCUE: "level_rescue",
                LEVEL_END: "level_end",
                SHARE: "share",
                MESSAGE: "message",
                INVITE: "invite",
                SHORTCUT_CREATE: "shortcut_create",
                SHORTCUT_CREATE_POPUP: "shortcut_create_popup",
                BOT_SUBSCRIBE: "bot_subscribe",
                BOT_SUBSCRIBE_POPUP: "bot_subscribe_popup",
                AD_SHOW: "ad_show",
                AD_SHOW_FAILED: "ad_show_failed",
                NEW_USER: "new_user",
                AD_IMPRESSION: "ad_impression",
                JOIN_GROUP: "join_group",
                TOURNAMENT_SHARE: "tournament_share",
                TOURNAMENT_CREATE: "tournament_create",
                TOURNAMENT_POST_SCORE: "tournament_post_score"
            }
        },
        173: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                IDLE: "IDLE",
                INITIALIZING: "INITIALIZING",
                STARTED: "STARTED"
            }
        },
        586: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                RECEIVED: "received"
            }
        },
        575: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                PLAYER_CONNECTED_PLAYERS_UPDATE: function () {
                    return l
                },
                PLAYER_DATA_UPDATE: function () {
                    return a
                },
                PLAYER_IS_USER_NEW_UPDATE: function () {
                    return c
                },
                PLAYER_PROFILE_UPDATE: function () {
                    return s
                },
                PLAYER_RECEIVED: function () {
                    return i
                },
                PLAYER_SCORE_UPDATE: function () {
                    return r
                },
                PLAYER_SETTING_UPDATE: function () {
                    return o
                }
            });
            var i = "PLAYER_RECEIVED",
                a = "PLAYER_DATA_UPDATE",
                r = "PLAYER_SCORE_UPDATE",
                s = "PLAYER_PROFILE_UPDATE",
                o = "PLAYER_SETTING_UPDATE",
                l = "PLAYER_CONNECTED_PLAYERS_UPDATE",
                c = "PLAYER_IS_USER_NEW_UPDATE"
        },
        343: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                defaultSettings: function () {
                    return i
                }
            });
            var i = {
                sound: !0,
                music: !0,
                vibrate: !0
            }
        },
        576: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                REDUCER_NAME: function () {
                    return i
                }
            });
            var i = "player"
        },
        342: function (t, e, n) {
            "use strict";
            n.r(e);
            var i = n(132),
                a = function () {
                    function t(t, e, n, a) {
                        this.playerId = void 0, this.name = void 0, this.photo = void 0, this.locale = void 0, this.playerId = t, this.name = e, this.photo = n || i.default.AVATAR.FILE, this.locale = a || "en_US"
                    }
                    return t.prototype.toObject = function () {
                        return {
                            playerId: this.playerId,
                            name: this.name,
                            photo: this.photo,
                            locale: this.locale,
                            score: 0
                        }
                    }, t
                }();
            e.default = a
        },
        574: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                incUserGuideDisplays: function () {
                    return L
                },
                playerReceived: function () {
                    return x
                },
                requestConnectedPlayers: function () {
                    return C
                },
                setMultiCustomData: function () {
                    return _
                },
                setPlayerCustomData: function () {
                    return P
                },
                setPlayerIsOld: function () {
                    return O
                },
                setPlayerScore: function () {
                    return D
                },
                updateConnectedPlayers: function () {
                    return I
                },
                updatePlayerProfile: function () {
                    return R
                },
                updateSetting: function () {
                    return b
                }
            });
            var i = n(9),
                a = n(5),
                r = n.n(a),
                s = n(46),
                o = n.n(s),
                l = n(56),
                c = n.n(l),
                u = n(35),
                h = n.n(u),
                d = n(455),
                f = n(110),
                p = n(172),
                g = GameCore.Configs.ApiHost,
                v = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.abrupt("return");
                                case 3:
                                    return n = t.sent, t.abrupt("return", (null == n ? void 0 : n.data) || {});
                                case 5:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                m = (function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return t.next = 2, (0, p.post)("players/" + e + "/user-guide-displays/inc", {}, {}, g);
                                case 2:
                                    return n = t.sent, t.abrupt("return", (null == n ? void 0 : n.data) || {});
                                case 4:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })))
                }(), n(575)),
                E = n(342),
                y = n(0),
                A = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e) || this).payload = void 0, i.name = "PlayerDataNameNotSupport", i.message = e || "The name of player data is not supported", i.payload = n || {}, i
                    }
                    return (0, y.default)(e, t), e
                }((0, n(47).default)(Error)),
                T = n(456),
                S = GameCore.Configs,
                M = S.AppId,
                w = S.Tutorial,
                x = function (t, e) {
                    return function (n) {
                        var i = t.playerId,
                            a = t.name,
                            r = t.photo,
                            s = t.locale,
                            o = e || {};
                        n({
                            type: m.PLAYER_RECEIVED,
                            payload: {
                                playerId: i,
                                name: a,
                                photo: r,
                                locale: s,
                                data: o
                            }
                        })
                    }
                },
                C = function () {
                    return function () {
                        var t = (0, i.default)(r().mark((function t(e) {
                            var n, i, a, s, l;
                            return r().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, i = window.game.facebook, t.next = 4, new(o())((function (t, e) {
                                            i.once("players", (function (e) {
                                                t(e)
                                            })), i.once("playersfail", (function () {
                                                return e([])
                                            })), i.getPlayers()
                                        }));
                                    case 4:
                                        if (a = t.sent, s = function (t) {
                                                return !!t
                                            }, !((l = c()(n = h()(a).call(a, (function (t) {
                                                var e = t.getID(),
                                                    n = t.getName(),
                                                    i = t.getPhoto();
                                                return e && n && i ? new E.default(e, n, i).toObject() : null
                                            }))).call(n, s)).length < 1)) {
                                            t.next = 9;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 9:
                                        e(I(l)), t.next = 15;
                                        break;
                                    case 12:
                                        t.prev = 12, t.t0 = t.catch(0), (0, f.sendException)(t.t0);
                                    case 15:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 12]
                            ])
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                I = function (t) {
                    return {
                        type: m.PLAYER_CONNECTED_PLAYERS_UPDATE,
                        payload: {
                            connectedPlayers: t
                        }
                    }
                },
                b = function (t, e) {
                    return function (n, i) {
                        try {
                            var a = i();
                            n({
                                type: m.PLAYER_SETTING_UPDATE,
                                payload: {
                                    name: t,
                                    value: e
                                }
                            }), a = i();
                            var r = (0, T.getPlayerData)(a),
                                s = new d.default({}).convertToFacebookData(r);
                            FBInstant.player.setDataAsync(s)
                        } catch (o) {
                            (0, f.sendException)(o)
                        }
                    }
                },
                R = function () {
                    return function () {
                        var t = (0, i.default)(r().mark((function t(e, n) {
                            var i, a, s, o, l, c, u, h;
                            return r().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, i = n(), a = (0, T.getPlayer)(i), s = a.playerId, o = a.name, l = a.photo, c = a.locale, t.next = 6, FBInstant.player.getASIDAsync();
                                    case 6:
                                        u = t.sent, v(h = {
                                            appId: M,
                                            playerId: s,
                                            name: o,
                                            photo: l,
                                            locale: c,
                                            ASID: u
                                        }), e({
                                            type: m.PLAYER_PROFILE_UPDATE,
                                            payload: {
                                                profile: h
                                            }
                                        }), t.next = 15;
                                        break;
                                    case 12:
                                        t.prev = 12, t.t0 = t.catch(0), (0, f.sendException)(t.t0);
                                    case 15:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 12]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                P = function (t, e) {
                    return function () {
                        var n = (0, i.default)(r().mark((function n(i, a) {
                            var s, o, l, c, u;
                            return r().wrap((function (n) {
                                for (;;) switch (n.prev = n.next) {
                                    case 0:
                                        return n.prev = 0, o = {
                                            customFields: (s = {}, s[t] = e, s)
                                        }, n.next = 5, i(k(o));
                                    case 5:
                                        l = a(), c = (0, T.getPlayerData)(l), v(c), u = new d.default({}).convertToFacebookData(c), FBInstant.player.setDataAsync(u), n.next = 17;
                                        break;
                                    case 12:
                                        if (n.prev = 12, n.t0 = n.catch(0), !(n.t0 instanceof A)) {
                                            n.next = 16;
                                            break
                                        }
                                        return n.abrupt("return");
                                    case 16:
                                        (0, f.sendException)(n.t0);
                                    case 17:
                                    case "end":
                                        return n.stop()
                                }
                            }), n, null, [
                                [0, 12]
                            ])
                        })));
                        return function (t, e) {
                            return n.apply(this, arguments)
                        }
                    }()
                },
                _ = function (t) {
                    return function () {
                        var e = (0, i.default)(r().mark((function e(n, i) {
                            var a, s, o, l;
                            return r().wrap((function (e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.prev = 0, a = {
                                            customFields: t
                                        }, e.next = 5, n(k(a));
                                    case 5:
                                        s = i(), o = (0, T.getPlayerData)(s), v(o), l = new d.default({}).convertToFacebookData(o), FBInstant.player.setDataAsync(l), e.next = 18;
                                        break;
                                    case 12:
                                        if (e.prev = 12, e.t0 = e.catch(0), !(e.t0 instanceof A)) {
                                            e.next = 17;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 17:
                                        (0, f.sendException)(e.t0);
                                    case 18:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, 12]
                            ])
                        })));
                        return function (t, n) {
                            return e.apply(this, arguments)
                        }
                    }()
                },
                k = function (t) {
                    return function (e) {
                        try {
                            e({
                                type: m.PLAYER_DATA_UPDATE,
                                payload: {
                                    data: t
                                }
                            })
                        } catch (n) {
                            (0, f.sendException)(n)
                        }
                    }
                },
                L = function () {
                    return function () {
                        var t = (0, i.default)(r().mark((function t(e, n) {
                            var i, a, s, o;
                            return r().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        return t.prev = 0, i = 1, w.ForceUseTutorial && (i = 0), t.next = 5, e(k({
                                            userGuideDisplays: i
                                        }));
                                    case 5:
                                        i > 0 && (a = n(), s = (0, T.getPlayerData)(a), o = new d.default({}).convertToFacebookData(s), FBInstant.player.setDataAsync(o)), t.next = 11;
                                        break;
                                    case 8:
                                        t.prev = 8, t.t0 = t.catch(0), (0, f.sendException)(t.t0);
                                    case 11:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 8]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                D = function (t) {
                    return function () {
                        try {
                            v({
                                score: t
                            })
                        } catch (e) {
                            (0, f.sendException)(e)
                        }
                    }
                },
                O = function () {
                    return function (t) {
                        try {
                            t({
                                type: m.PLAYER_IS_USER_NEW_UPDATE,
                                payload: {}
                            })
                        } catch (e) {
                            (0, f.sendException)(e)
                        }
                    }
                }
        },
        456: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getConnectedPlayerIds: function () {
                    return g
                },
                getConnectedPlayers: function () {
                    return p
                },
                getPlayer: function () {
                    return c
                },
                getPlayerASID: function () {
                    return h
                },
                getPlayerCustomData: function () {
                    return v
                },
                getPlayerData: function () {
                    return d
                },
                getPlayerId: function () {
                    return u
                },
                getPlayerSettings: function () {
                    return f
                }
            });
            var i = n(83),
                a = n.n(i),
                r = n(50),
                s = n.n(r),
                o = n(91),
                l = n(576),
                c = (0, o.createSelector)([function (t) {
                    return t[l.REDUCER_NAME]
                }], (function (t) {
                    return t
                })),
                u = (0, o.createSelector)([c], (function (t) {
                    return t.playerId
                })),
                h = (0, o.createSelector)([c], (function (t) {
                    return t.ASID
                })),
                d = (0, o.createSelector)([function (t) {
                    return t[l.REDUCER_NAME].data
                }], (function (t) {
                    return t
                })),
                f = (0, o.createSelector)([d], (function (t) {
                    return t.settings
                })),
                p = (0, o.createSelector)([function (t) {
                    return t[l.REDUCER_NAME].connectedPlayers
                }], (function (t) {
                    return t
                })),
                g = (0, o.createSelector)([p, function (t, e) {
                    return e.limit
                }, function (t, e) {
                    return e.offset
                }], (function (t, e, n) {
                    if ("number" !== typeof e) return [];
                    if ("number" !== typeof n) return [];
                    var i = a()(t);
                    return s()(i).call(i, n, e + n) || []
                })),
                v = (0, o.createSelector)([d], (function (t) {
                    return t.customFields
                }))
        },
        577: function (t, e, n) {
            "use strict";
            n.r(e);
            e.default = {
                OPEN: "open",
                CLOSE: "close",
                CREATED: "created"
            }
        },
        321: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                contextProcessed: function () {
                    return h
                },
                contextReceived: function () {
                    return u
                },
                detectGameMode: function () {
                    return d
                },
                gameModeDetected: function () {
                    return f
                },
                setRequestDetectGameMode: function () {
                    return p
                }
            });
            var i = n(52),
                a = n.n(i),
                r = n(192),
                s = n(195),
                o = n(196),
                l = n(197),
                c = n(322),
                u = function (t, e, n) {
                    return {
                        type: r.CONTEXT_RECEIVED,
                        payload: {
                            contextId: t,
                            contextType: e,
                            entryPointData: n
                        }
                    }
                },
                h = function (t, e) {
                    return {
                        type: r.CONTEXT_PROCESSED,
                        payload: {
                            contextId: t,
                            contextType: e
                        }
                    }
                },
                d = function () {
                    return function (t, e) {
                        var n, i = e(),
                            r = (0, c.getContext)(i),
                            u = window.game.player.getPlayerId(),
                            h = r.contextId,
                            d = r.entryPointData || {},
                            p = d.type,
                            g = d.matchId,
                            v = d.playerId,
                            m = d.opponentId,
                            E = void 0 === m ? o.SampleOpponent.playerId : m,
                            y = d.tournamentContextId,
                            A = u === v,
                            T = E === o.SampleOpponent.playerId || a()(n = [E, v]).call(n, u) >= 0,
                            S = l.MATCH_MODE_SINGLE;
                        !h || void 0 !== p && p !== s.TOURNAMENT || (S = l.MATCH_MODE_TOURNAMENTS), p === s.TOURNAMENT && y && (S = l.MATCH_MODE_TOURNAMENTS), h && p === s.SHARE_INVITE && !A && (S = l.MATCH_MODE_CHALLENGE_FRIENDS), g && h && T && p === s.CHALLENGE_FRIEND_MATCH && (S = l.MATCH_MODE_CHALLENGE_FRIENDS), h && p === s.CHALLENGE_FRIENDS_MESSAGE && !A && (S = l.MATCH_MODE_CHALLENGE_FRIENDS), h && p === s.MATCHING_GROUP_MATCH && (S = l.MATCH_MODE_MATCHING_GROUP), t(f(S))
                    }
                },
                f = function (t) {
                    return function (e) {
                        e({
                            type: r.CONTEXT_GAME_MODE_DETECTED,
                            payload: {
                                gameMode: t
                            }
                        })
                    }
                },
                p = function (t) {
                    return {
                        type: r.CONTEXT_GAME_MODE_REQUESTED,
                        payload: {
                            isRequestingDetectGameMode: t
                        }
                    }
                }
        },
        598: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                checkLoadSingleMatch: function () {
                    return A
                },
                processContextChallengeFriendMessage: function () {
                    return M
                },
                processContextChallengeFriendMode: function () {
                    return S
                },
                processContextData: function () {
                    return T
                }
            });
            var i = n(9),
                a = n(52),
                r = n.n(a),
                s = n(5),
                o = n.n(s),
                l = n(38),
                c = n(195),
                u = n(44),
                h = n(32),
                d = n(60),
                f = n(599),
                p = n(197),
                g = n(322),
                v = n(321),
                m = GameCore.Configs.Match,
                E = d.default.LEVEL_PROGRESS,
                y = d.default.SELECTED_LEVEL,
                A = function () {
                    return function () {
                        var t = (0, i.default)(o().mark((function t(e) {
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (m.ContinueSingleMatchEnabled) {
                                            t.next = 2;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 2:
                                        e((0, f.loadSingleMatch)());
                                    case 3:
                                    case "end":
                                        return t.stop()
                                }
                            }), t)
                        })));
                        return function (e) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                T = function () {
                    return function () {
                        var t = (0, i.default)(o().mark((function t(e, n) {
                            var i, a, r, s, d, f, m, A, T, w, x, C, I, b, R;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (i = window.game, a = i.player, r = i.analytics, s = i.rollbar, d = i.globalScene, t.prev = 1, f = n(), m = (0, g.getContext)(f), A = (0, g.getCurrentGameMode)(f), T = a.getPlayer(), w = m.entryPointData, x = (w || {}).type, T.isUserNew && r.event(l.AnalyticsEvents.NEW_USER), C = a.getCustomData(y), I = a.getCustomData(E), b = "number" === typeof I && I >= 0, C || (R = 1, b && (R = I + 1), a.setCustomData(y, R)), A !== p.MATCH_MODE_CHALLENGE_FRIENDS) {
                                            t.next = 42;
                                            break
                                        }
                                        if (d.screen.open(h.ScreenKeys.NOTIFY_SCREEN, {
                                                message: "Loading...",
                                                loading: !0
                                            }), !(b && I >= 2)) {
                                            t.next = 35;
                                            break
                                        }
                                        if (x !== c.CHALLENGE_FRIEND_MATCH) {
                                            t.next = 26;
                                            break
                                        }
                                        return t.t0 = e, t.next = 21, S();
                                    case 21:
                                        return t.t1 = t.sent, t.next = 24, (0, t.t0)(t.t1);
                                    case 24:
                                        t.next = 33;
                                        break;
                                    case 26:
                                        if (x !== c.CHALLENGE_FRIENDS_MESSAGE) {
                                            t.next = 33;
                                            break
                                        }
                                        return t.t2 = e, t.next = 30, M();
                                    case 30:
                                        return t.t3 = t.sent, t.next = 33, (0, t.t2)(t.t3);
                                    case 33:
                                        t.next = 42;
                                        break;
                                    case 35:
                                        return t.t4 = e, t.next = 38, (0, v.setRequestDetectGameMode)(!0);
                                    case 38:
                                        return t.t5 = t.sent, t.next = 41, (0, t.t4)(t.t5);
                                    case 41:
                                    case 42:
                                        t.next = 47;
                                        break;
                                    case 44:
                                        t.prev = 44, t.t6 = t.catch(1), s.sendException(t.t6);
                                    case 47:
                                        return t.prev = 47, d.screen.close(h.ScreenKeys.NOTIFY_SCREEN), d.events.emit(u.SceneEvents.SWITCH, u.SceneKeys.GAME_SCENE), t.finish(47);
                                    case 51:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [1, 44, 47, 51]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                S = function () {
                    return function () {
                        var t = (0, i.default)(o().mark((function t(e, n) {
                            var i, a, s, l, c, u, h, d, f, p, v, m, y;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, a = n(), s = (0, g.getContext)(a), l = window.game, c = l.player, u = l.battle, h = c.getPlayer(), d = s.entryPointData, p = (f = d || {}).matchId, v = f.opponentId, m = f.playerId, "number" === typeof (y = c.getCustomData(E))) {
                                            t.next = 10;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 10:
                                        if (!(y < 2)) {
                                            t.next = 12;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 12:
                                        if (r()(i = [v, m]).call(i, h.playerId) >= 0) {
                                            t.next = 15;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 15:
                                        if (!(h.playerId === m)) {
                                            t.next = 21;
                                            break
                                        }
                                        return t.next = 19, u.continueBattle(p, v);
                                    case 19:
                                        t.next = 23;
                                        break;
                                    case 21:
                                        return t.next = 23, u.continueBattle(p, m);
                                    case 23:
                                        t.next = 28;
                                        break;
                                    case 25:
                                        t.prev = 25, t.t0 = t.catch(0);
                                    case 28:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 25]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }()
                },
                M = function () {
                    return function () {
                        var t = (0, i.default)(o().mark((function t(e, n) {
                            var i, a, r, s, l, c, u, h;
                            return o().wrap((function (t) {
                                for (;;) switch (t.prev = t.next) {
                                    case 0:
                                        if (t.prev = 0, i = n(), a = (0, g.getContext)(i), r = window.game, s = r.player, l = r.battle, c = s.getPlayer(), u = a.entryPointData, h = (u || {}).playerId, !(c.playerId === h)) {
                                            t.next = 10;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 10:
                                        if (h) {
                                            t.next = 12;
                                            break
                                        }
                                        return t.abrupt("return");
                                    case 12:
                                        return t.next = 14, l.createBattle(h, !1);
                                    case 14:
                                        t.next = 19;
                                        break;
                                    case 16:
                                        t.prev = 16, t.t0 = t.catch(0);
                                    case 19:
                                    case "end":
                                        return t.stop()
                                }
                            }), t, null, [
                                [0, 16]
                            ])
                        })));
                        return function (e, n) {
                            return t.apply(this, arguments)
                        }
                    }()
                }
        },
        587: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                sendInviteMessage: function () {
                    return C
                },
                sendWinMessage: function () {
                    return I
                }
            });
            var i = n(9),
                a = n(5),
                r = n.n(a),
                s = n(192),
                o = n(38),
                l = n(195),
                c = n(588),
                u = n(0),
                h = function (t) {
                    function e(e, n) {
                        var i;
                        return (i = t.call(this, e, n) || this).name = "InvalidOpponentId", i.message = e || "This opponentId is not valid", i.payload = n, i
                    }
                    return (0, u.default)(e, t), e
                }((0, n(47).default)(Error)),
                d = n(706),
                f = {
                    PASS_LEVELS: {
                        ID: "pass-levels",
                        EVENTS: {
                            PASS_LEVEL: "pass-level"
                        }
                    },
                    COLLECT_DIAMONDS: {
                        ID: "collect-diamonds",
                        EVENTS: {
                            COLLECT_DIAMONDS: "collect-diamonds"
                        }
                    },
                    INVITE_FRIENDS: {
                        ID: "invite-friends",
                        EVENTS: {
                            INVITED_FRIEND: "INVITED_FRIEND"
                        }
                    },
                    REACH_SCORE: {
                        ID: "reach-score",
                        EVENTS: {
                            ADD_SCORE: "add-score"
                        }
                    },
                    EVENTS: {
                        TASKS_RESET: "tasks-reset",
                        NOTICE_UPDATE: "notice-update"
                    }
                },
                p = n(194),
                g = n(589),
                v = n(590),
                m = new(n.n(v)()),
                E = n(344),
                y = function (t) {
                    var e = t.contextId;
                    if ("" === e || "string" !== typeof e) throw new c.default(null, {
                        contextId: e
                    })
                },
                A = function (t) {
                    var e = t.opponentId,
                        n = t.contextId;
                    if ("" === e || "string" !== typeof e) throw new h(null, {
                        opponentId: e
                    });
                    if ("" === n || "string" !== typeof n) throw new c.default(null, {
                        contextId: n
                    })
                },
                T = function (t) {
                    if (null === t.imageShare) throw new d.default
                },
                S = function (t, e) {
                    return void 0 === e && (e = !0),
                        function (n, i) {
                            var a, r = i(),
                                s = (0, g.getMessages)(r);
                            if (e) {
                                var o;
                                if (null != (o = s[t]) && o.sent) return;
                                n(M(t))
                            }
                            null != (a = s[t]) && a.sent && n(w(t))
                        }
                },
                M = function (t) {
                    return {
                        type: s.MESSAGES_SENT_UPDATE,
                        payload: {
                            opponentId: t
                        }
                    }
                },
                w = function (t) {
                    return {
                        type: s.MESSAGES_SENT_REMOVE,
                        payload: {
                            opponentId: t
                        }
                    }
                },
                x = function () {
                    var t = (0, i.default)(r().mark((function t(e, n) {
                        var i, a, s, o;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (i = window.game, a = i.facebook, s = i.rollbar, t.prev = 1, A({
                                            opponentId: e,
                                            contextId: n
                                        }), (o = FBInstant.context.getID()) !== n || "" === n) {
                                        t.next = 6;
                                        break
                                    }
                                    return t.abrupt("return", o);
                                case 6:
                                    if ("10" !== e || "" === n) {
                                        t.next = 8;
                                        break
                                    }
                                    return t.abrupt("return", n);
                                case 8:
                                    if (!n) {
                                        t.next = 12;
                                        break
                                    }
                                    return t.next = 11, a.switchAsync(n);
                                case 11:
                                    return t.abrupt("return", FBInstant.context.getID());
                                case 12:
                                    t.next = 17;
                                    break;
                                case 14:
                                    t.prev = 14, t.t0 = t.catch(1), s.sendException(t.t0);
                                case 17:
                                    return t.abrupt("return", "");
                                case 18:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [1, 14]
                        ])
                    })));
                    return function (e, n) {
                        return t.apply(this, arguments)
                    }
                }(),
                C = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n, i, a, s, c, u, h, d, g, v, A, M, w, C, I, b, R;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (n = window.game, i = n.battle, a = n.analytics, s = n.facebook, c = n.storage, u = n.rollbar, t.prev = 1, h = e.matchId, d = e.opponentId, g = e.contextId, v = i.getPlayerInfo()) {
                                        t.next = 6;
                                        break
                                    }
                                    return t.abrupt("return");
                                case 6:
                                    if (A = i.getOpponentInfo()) {
                                        t.next = 9;
                                        break
                                    }
                                    return t.abrupt("return");
                                case 9:
                                    return M = v.playerId, w = v.playerName, C = v.playerPhoto, I = A.playerPhoto, t.next = 13, x(d, g);
                                case 13:
                                    return b = t.sent, y({
                                        contextId: b
                                    }), t.next = 17, (0, E.renderWideframesChallenge)({
                                        playerId: M,
                                        playerPhoto: C,
                                        opponentId: d,
                                        opponentPhoto: I
                                    });
                                case 17:
                                    return R = t.sent, T({
                                        imageShare: R
                                    }), t.next = 21, s.sendMessage({
                                        cta: {
                                            default: "Play now",
                                            localizations: {
                                                vi_VN: "Ch\u01a1i ngay"
                                            }
                                        },
                                        text: {
                                            default: w + " challenges you",
                                            localizations: {
                                                vi_VN: w + " th\u1eed th\xe1ch b\u1ea1n trong tr\u1eadn \u0111\u1ea5u n\xe0y. Ch\u01a1i ngay!"
                                            }
                                        },
                                        image: R || "",
                                        template: "challenge",
                                        data: {
                                            type: l.CHALLENGE_FRIEND_MATCH,
                                            matchId: h,
                                            playerId: M,
                                            opponentId: d,
                                            status: p.MATCH_STATUS_ACTIVE
                                        }
                                    });
                                case 21:
                                    c.dispatch(S(d)), a.event(o.AnalyticsEvents.MESSAGE, {
                                        message_content_type: "Challenge",
                                        success: !0
                                    }), m.emit(f.INVITE_FRIENDS.EVENTS.INVITED_FRIEND, {
                                        type: "friend",
                                        value: 1,
                                        opponentId: d
                                    }), t.next = 30;
                                    break;
                                case 26:
                                    t.prev = 26, t.t0 = t.catch(1), a.event(o.AnalyticsEvents.MESSAGE, {
                                        message_content_type: "Challenge",
                                        success: !1
                                    }), u.sendException(t.t0);
                                case 30:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [1, 26]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                I = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n, i, a, s, c, u, h, d, f, g, v, m, A, M;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = window.game, i = n.player, a = n.analytics, s = n.facebook, c = n.storage, u = n.rollbar, t.prev = 1, h = e.matchId, d = e.opponentId, f = e.contextId, t.next = 5, x(d, f);
                                case 5:
                                    return g = t.sent, y({
                                        contextId: g
                                    }), t.next = 9, (0, E.renderWideframesGameResult)();
                                case 9:
                                    return v = t.sent, T({
                                        imageShare: v
                                    }), m = i.getPlayer(), A = m.name, M = m.playerId, t.next = 14, s.sendMessage({
                                        cta: {
                                            default: "Revenge",
                                            localizations: {
                                                vi_VN: "Tr\u1ea3 th\xf9"
                                            }
                                        },
                                        text: {
                                            default: A + " beat your troops!",
                                            localizations: {
                                                vi_VN: A + " \u0111\xe3 \u0111\xe1nh b\u1ea1i qu\xe2n c\u1ee7a b\u1ea1n!"
                                            }
                                        },
                                        image: v || "",
                                        template: "pass_score",
                                        data: {
                                            type: l.CHALLENGE_FRIEND_MATCH,
                                            matchId: h,
                                            playerId: M,
                                            opponentId: d,
                                            status: p.MATCH_STATUS_ACTIVE
                                        }
                                    });
                                case 14:
                                    c.dispatch(S(d)), a.event(o.AnalyticsEvents.MESSAGE, {
                                        message_content_type: "Beat",
                                        success: !0
                                    }), t.next = 22;
                                    break;
                                case 18:
                                    t.prev = 18, t.t0 = t.catch(1), a.event(o.AnalyticsEvents.MESSAGE, {
                                        message_content_type: "Beat",
                                        success: !1
                                    }), u.sendException(t.t0);
                                case 22:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [1, 18]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }()
        },
        642: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                updateActiveSceneKey: function () {
                    return a
                }
            });
            var i = n(192),
                a = function (t) {
                    return {
                        type: i.SCENE_KEY_UPDATE,
                        payload: {
                            sceneKey: t
                        }
                    }
                }
        },
        344: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                renderWideframesChallenge: function () {
                    return E
                },
                renderWideframesGameResult: function () {
                    return v
                },
                renderWideframesNewUnit: function () {
                    return T
                },
                shareGame: function () {
                    return f
                },
                shareNewUnit: function () {
                    return A
                }
            });
            var i = n(9),
                a = n(5),
                r = n.n(a),
                s = n(38),
                o = n(195),
                l = n(706),
                c = n(132),
                u = n(32),
                h = n(60).default.LEVEL_PROGRESS,
                d = function (t) {
                    if ("string" !== typeof t || !t) throw new l.default(null, {
                        imageShare: t
                    })
                },
                f = function () {
                    var t = (0, i.default)(r().mark((function t() {
                        var e, n, i, a, l, c, h, f, g, v, m;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return e = window.game, n = e.player, i = e.analytics, a = e.facebook, l = e.globalScene, c = e.rollbar, t.prev = 1, l.screen.open(u.ScreenKeys.NOTIFY_SCREEN, {
                                        message: "Loading...",
                                        loading: !0
                                    }), t.next = 5, p();
                                case 5:
                                    return h = t.sent, d(h), f = n.getPlayer(), g = f.playerId, v = f.name, m = f.photo, t.next = 10, a.shareAsync({
                                        text: "A ha, I'm the best!",
                                        intent: "CHALLENGE",
                                        image: h || "",
                                        data: {
                                            playerId: g,
                                            playerName: v,
                                            playerPhoto: m,
                                            type: o.SHARE_INVITE
                                        }
                                    });
                                case 10:
                                    i.event(s.AnalyticsEvents.SHARE, {
                                        share_content_type: "BestLevel",
                                        success: !0
                                    }), t.next = 17;
                                    break;
                                case 13:
                                    t.prev = 13, t.t0 = t.catch(1), i.event(s.AnalyticsEvents.SHARE, {
                                        share_content_type: "BestLevel",
                                        success: !1
                                    }), c.sendException(t.t0);
                                case 17:
                                    return t.prev = 17, l.screen.close(u.ScreenKeys.NOTIFY_SCREEN), t.finish(17);
                                case 20:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [1, 13, 17, 20]
                        ])
                    })));
                    return function () {
                        return t.apply(this, arguments)
                    }
                }(),
                p = function () {
                    var t = (0, i.default)(r().mark((function t() {
                        var e, n, i, a, s, o, l, c, u;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (e = window.game, n = e.player, i = e.globalScene, a = n.getPlayer(), s = a.playerId, o = a.photo, l = n.getCustomData(h), c = g({
                                            playerId: s,
                                            playerPhoto: o,
                                            playerLevel: l
                                        })) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return");
                                case 7:
                                    return u = {
                                        name: "share-game",
                                        width: 375,
                                        height: 500,
                                        renderOptions: c
                                    }, t.next = 10, i.frameCapture.capture(u);
                                case 10:
                                    return t.abrupt("return", t.sent);
                                case 11:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function () {
                        return t.apply(this, arguments)
                    }
                }(),
                g = function (t) {
                    var e = t.playerId,
                        n = t.playerPhoto,
                        i = t.playerLevel,
                        a = void 0 === i ? 1 : i;
                    return "string" !== typeof e || "string" !== typeof n ? null : {
                        avatar: {
                            name: "" + e,
                            type: "image",
                            x: 135,
                            y: 72,
                            image: n,
                            width: 105,
                            height: 105,
                            fallbackWithImage: c.default.AVATAR.KEY
                        },
                        wideFrame: {
                            name: "wide-frame-share",
                            type: "image",
                            x: 0,
                            y: 0,
                            image: "./assets/wideframes/wide-frame-share.png",
                            width: 375,
                            height: 500
                        },
                        playerLevel: {
                            type: "text",
                            x: 185,
                            y: 212,
                            font: "800 18px",
                            fillStyle: "#424ec4",
                            text: "Level " + a,
                            textAlign: "center"
                        }
                    }
                },
                v = function () {
                    var t = (0, i.default)(r().mark((function t() {
                        var e, n, i, a, s, o, l, c, u;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (e = window.game, n = e.player, i = e.globalScene, a = n.getPlayer(), s = a.playerId, o = a.photo, l = n.getCustomData(h), c = m({
                                            playerId: s,
                                            playerPhoto: o,
                                            playerLevel: l
                                        })) {
                                        t.next = 7;
                                        break
                                    }
                                    return t.abrupt("return", null);
                                case 7:
                                    return u = {
                                        name: "mess-game-result",
                                        width: 476,
                                        height: 246,
                                        renderOptions: c
                                    }, t.next = 10, i.frameCapture.capture(u);
                                case 10:
                                    return t.abrupt("return", t.sent);
                                case 11:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function () {
                        return t.apply(this, arguments)
                    }
                }(),
                m = function (t) {
                    var e = t.playerId,
                        n = t.playerPhoto,
                        i = t.playerLevel,
                        a = void 0 === i ? 1 : i;
                    return "string" !== typeof e || "string" !== typeof n ? null : {
                        avatar: {
                            name: "" + e,
                            type: "image",
                            x: 50,
                            y: 68,
                            image: n,
                            width: 105,
                            height: 105,
                            fallbackWithImage: c.default.AVATAR.KEY
                        },
                        wideFrame: {
                            name: "wide-frame-game-result",
                            type: "image",
                            x: 0,
                            y: 0,
                            image: "./assets/wideframes/wide-frame-game-result.png",
                            width: 476,
                            height: 246
                        },
                        playerLevel: {
                            type: "text",
                            x: 234,
                            y: 35,
                            font: "800 18px",
                            fillStyle: "#424ec4",
                            text: "Level " + a,
                            textAlign: "center"
                        }
                    }
                },
                E = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n, i, a;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (n = window.game.globalScene, i = y(e)) {
                                        t.next = 6;
                                        break
                                    }
                                    return t.abrupt("return", null);
                                case 6:
                                    return a = {
                                        name: "mess-challenge",
                                        width: 476,
                                        height: 246,
                                        renderOptions: i
                                    }, t.next = 9, n.frameCapture.capture(a);
                                case 9:
                                    return t.abrupt("return", t.sent);
                                case 10:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                y = function (t) {
                    var e = t.playerId,
                        n = t.playerPhoto,
                        i = t.opponentId,
                        a = t.opponentPhoto;
                    return "string" !== typeof e || "string" !== typeof i ? null : {
                        playerAvatar: {
                            name: "" + e,
                            type: "image",
                            x: 20,
                            y: 75,
                            image: n || c.default.AVATAR.FILE,
                            width: 105,
                            height: 105,
                            fallbackWithImage: c.default.AVATAR.KEY
                        },
                        opponentAvatar: {
                            name: "" + i,
                            type: "image",
                            x: 357,
                            y: 75,
                            image: a || c.default.AVATAR.FILE,
                            width: 105,
                            height: 105,
                            fallbackWithImage: c.default.AVATAR.KEY
                        },
                        wideFrame: {
                            name: "wide-frame-game-challenge",
                            type: "image",
                            x: 0,
                            y: 0,
                            image: "./assets/wideframes/wide-frame-game-challenge.png",
                            width: 476,
                            height: 246
                        }
                    }
                },
                A = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n, i, a, l, c, h, f, p, g, v, m;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    return n = window.game, i = n.player, a = n.analytics, l = n.facebook, c = n.globalScene, h = n.rollbar, t.prev = 1, c.screen.open(u.ScreenKeys.NOTIFY_SCREEN, {
                                        message: "Loading...",
                                        loading: !0
                                    }), t.next = 5, T(e);
                                case 5:
                                    return f = t.sent, d(f), p = i.getPlayer(), g = p.playerId, v = p.name, m = p.photo, t.next = 10, l.shareAsync({
                                        text: "I unlocked a new unit!",
                                        intent: "SHARE",
                                        image: f || "",
                                        data: {
                                            playerId: g,
                                            playerName: v,
                                            playerPhoto: m,
                                            type: o.SHARE_INVITE
                                        }
                                    });
                                case 10:
                                    a.event(s.AnalyticsEvents.SHARE, {
                                        share_content_type: "UnlockNewUnit",
                                        success: !0
                                    }), t.next = 17;
                                    break;
                                case 13:
                                    t.prev = 13, t.t0 = t.catch(1), a.event(s.AnalyticsEvents.SHARE, {
                                        share_content_type: "UnlockNewUnit",
                                        success: !1
                                    }), h.sendException(t.t0);
                                case 17:
                                    return t.prev = 17, c.screen.close(u.ScreenKeys.NOTIFY_SCREEN), t.finish(17);
                                case 20:
                                case "end":
                                    return t.stop()
                            }
                        }), t, null, [
                            [1, 13, 17, 20]
                        ])
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                T = function () {
                    var t = (0, i.default)(r().mark((function t(e) {
                        var n, i, a;
                        return r().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    if (n = window.game.globalScene, i = S(e)) {
                                        t.next = 5;
                                        break
                                    }
                                    return t.abrupt("return", null);
                                case 5:
                                    return a = {
                                        name: "mess-new-unit",
                                        width: 375,
                                        height: 500,
                                        renderOptions: i
                                    }, t.next = 8, n.frameCapture.capture(a);
                                case 8:
                                    return t.abrupt("return", t.sent);
                                case 9:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                S = function (t) {
                    var e = t.unitType,
                        n = t.unitLevel,
                        i = t.unitHp,
                        a = t.unitAtk,
                        r = t.unitName;
                    return {
                        wideFrame: {
                            name: "wide-frame-new-unit",
                            type: "image",
                            x: 0,
                            y: 0,
                            image: "./assets/wideframes/wide-frame-new-unit.png",
                            width: 375,
                            height: 500
                        },
                        unitSprite: {
                            name: r,
                            type: "image",
                            x: 90,
                            y: 176,
                            image: "melee" === e ? M(n) : w(n),
                            width: 200,
                            height: 200
                        },
                        unitName: {
                            type: "text",
                            x: 185,
                            y: 404,
                            font: "800 18px",
                            fillStyle: "#ffffff",
                            text: r,
                            textAlign: "center"
                        },
                        unitHp: {
                            type: "text",
                            x: 155,
                            y: 164,
                            font: "800 20px",
                            fillStyle: "#ffffff",
                            text: "" + GameCore.Utils.Number.toAbbreviatedString(i),
                            textAlign: "center"
                        },
                        unitAtk: {
                            type: "text",
                            x: 243,
                            y: 164,
                            font: "800 20px",
                            fillStyle: "#ffffff",
                            text: "" + GameCore.Utils.Number.toAbbreviatedString(a),
                            textAlign: "center"
                        }
                    }
                },
                M = function (t) {
                    var e = "";
                    switch (t) {
                        case 1:
                            e = "lv01-velociraptor.png";
                            break;
                        case 2:
                            e = "lv02-saurolophus.png";
                            break;
                        case 3:
                            e = "lv03-pachysaurus.png";
                            break;
                        case 4:
                            e = "lv04-triceratops.png";
                            break;
                        case 5:
                            e = "lv05-stegosaurus.png";
                            break;
                        case 6:
                            e = "lv06-ankylosaurus.png";
                            break;
                        case 7:
                            e = "lv07-baroptiloraptor.png";
                            break;
                        case 8:
                            e = "lv08-tyrannosaurus.png";
                            break;
                        case 9:
                            e = "lv09-dilophosaurus.png";
                            break;
                        case 10:
                            e = "lv10-triceradonosaurus.png";
                            break;
                        case 11:
                            e = "lv11-spinosaurus-rex.png"
                    }
                    return "./assets/dino-unlocked/" + e
                },
                w = function (t) {
                    var e = "";
                    switch (t) {
                        case 1:
                            e = "lv01-rockthrower.png";
                            break;
                        case 2:
                            e = "lv02-javelineer.png";
                            break;
                        case 3:
                            e = "lv03-boomeranger.png";
                            break;
                        case 4:
                            e = "lv04-macer.png";
                            break;
                        case 5:
                            e = "lv05-artemis.png";
                            break;
                        case 6:
                            e = "lv06-william.png";
                            break;
                        case 7:
                            e = "lv07-blanchette.png";
                            break;
                        case 8:
                            e = "lv08-phantom.png";
                            break;
                        case 9:
                            e = "lv09-oracle.png";
                            break;
                        case 10:
                            e = "lv10-shaman.png";
                            break;
                        case 11:
                            e = "lv11-seraph.png"
                    }
                    return "./assets/warriors-unlocked/" + e
                }
        },
        322: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getContext: function () {
                    return a
                },
                getContextId: function () {
                    return r
                },
                getContextProcessed: function () {
                    return o
                },
                getContextType: function () {
                    return s
                },
                getCurrentGameMode: function () {
                    return l
                },
                getIsRequestingDetectGameMode: function () {
                    return c
                }
            });
            var i = n(91),
                a = (0, i.createSelector)([function (t) {
                    return t.context
                }], (function (t) {
                    return t
                })),
                r = (0, i.createSelector)([function (t) {
                    return t.context.contextId
                }], (function (t) {
                    return t
                })),
                s = (0, i.createSelector)([function (t) {
                    return t.context.contextType
                }], (function (t) {
                    return t
                })),
                o = (0, i.createSelector)([function (t) {
                    return t.context.processed
                }], (function (t) {
                    return t
                })),
                l = (0, i.createSelector)([function (t) {
                    return t.context.currentGameMode
                }], (function (t) {
                    return t
                })),
                c = (0, i.createSelector)([function (t) {
                    return t.context.isRequestingDetectGameMode
                }], (function (t) {
                    return t
                }))
        },
        589: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getMessages: function () {
                    return a
                },
                getMessagesSentStatus: function () {
                    return r
                }
            });
            var i = n(91),
                a = (0, i.createSelector)([function (t) {
                    return t.messages.data
                }], (function (t) {
                    return t
                })),
                r = (0, i.createSelector)([a, function (t, e) {
                    return e.opponentId
                }], (function (t, e) {
                    return !!GameCore.Utils.Valid.isString(e) && (!!GameCore.Utils.Object.hasOwn(t, e) && t[e].sent)
                }))
        },
        319: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                checkIsToday: function () {
                    return l
                },
                formatDateHMS: function () {
                    return c
                },
                getDateDMY: function () {
                    return u
                },
                sleepAsync: function () {
                    return o
                }
            });
            var i = n(46),
                a = n.n(i),
                r = n(50),
                s = n.n(r),
                o = function (t) {
                    return new(a())((function (e) {
                        return setTimeout(e, t)
                    }))
                },
                l = function (t) {
                    var e = new Date(t),
                        n = new Date;
                    return e.getDate() === n.getDate() && e.getMonth() === n.getMonth() && e.getFullYear() === n.getFullYear()
                },
                c = function (t, e) {
                    void 0 === e && (e = !0);
                    var n = new Date(t).toISOString();
                    return e ? s()(n).call(n, 11, -5) : s()(n).call(n, 14, -5)
                },
                u = function () {
                    var t = new Date,
                        e = t.getDate(),
                        n = t.getMonth() + 1,
                        i = "" + e,
                        a = "" + n;
                    return e < 10 && (i = "0" + e), n < 10 && (a = "0" + n), i + "/" + a + "/" + t.getFullYear()
                }
        },
        110: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                addBreadcrumbSentry: function () {
                    return a
                },
                initSentry: function () {
                    return i
                },
                sendException: function () {
                    return o
                },
                sendExceptionWithScope: function () {
                    return s
                },
                setSentryUser: function () {
                    return r
                }
            });
            n(340), n(318), n(90), n(52);
            var i = function () {
                    var t = setInterval((function () {
                        window.Sentry && clearInterval(t)
                    }), 100)
                },
                a = function (t, e) {
                    window.Sentry && window.Sentry.addBreadcrumb({
                        category: t,
                        message: e
                    })
                },
                r = function (t) {
                    window.Sentry && window.Sentry.setUser(t)
                },
                s = function (t, e) {
                    t && window.Sentry.withScope((function (t) {
                        t.setExtras(e)
                    }))
                },
                o = function (t) {}
        },
        591: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getByKeyLocalStorage: function () {
                    return a
                },
                isLocalStorageAvailability: function () {
                    return o
                },
                removeKeyLocalStorage: function () {
                    return s
                },
                writeByKeyLocalStorage: function () {
                    return r
                }
            });
            var i = n(149),
                a = function (t) {
                    try {
                        var e = localStorage.getItem(t);
                        return null === e ? null : GameCore.Utils.Json.decode(e)
                    } catch (n) {
                        return null
                    }
                },
                r = function (t, e) {
                    try {
                        var n = a(t),
                            r = {};
                        GameCore.Utils.Valid.isObject(n) && (r = n);
                        var s = GameCore.Utils.Json.clone(e);
                        if (!GameCore.Utils.Valid.isObject(s)) return !1;
                        var o = GameCore.Utils.Object.clear(s),
                            l = (0, i.merge)(r, o),
                            c = GameCore.Utils.Json.encode(l);
                        return localStorage.setItem(t, c), !0
                    } catch (u) {
                        return !1
                    }
                },
                s = function (t) {
                    try {
                        return localStorage.removeItem(t), !0
                    } catch (e) {
                        return !1
                    }
                },
                o = function () {
                    try {
                        return r("test", {
                            first: !0
                        })
                    } catch (t) {
                        return !1
                    }
                }
        },
        573: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                getImageScale: function () {
                    return a
                }
            });
            var i = GameCore.Configs.Game.ForcePixelRatio,
                a = function () {
                    return i > 0 ? i : GameCore.Utils.Device.isDesktop() || GameCore.Utils.Device.pixelRatio() > 1 ? 2 : 1
                }
        },
        92: function (t, e, n) {
            "use strict";
            n.r(e), n.d(e, {
                isSupportVibrateApi: function () {
                    return p
                },
                setAndCheckVibrateSupport: function () {
                    return d
                },
                setVibrateEnabled: function () {
                    return h
                }
            });
            var i = n(9),
                a = n(46),
                r = n.n(a),
                s = n(5),
                o = n.n(s),
                l = n(319),
                c = !1,
                u = !1,
                h = function (t) {
                    c = t
                },
                d = function () {
                    u = f()
                },
                f = function () {
                    return !GameCore.Utils.Device.isDesktop()
                },
                p = function () {
                    return u
                },
                g = function () {
                    var t = (0, i.default)(o().mark((function t(e) {
                        var n, a, s, c, u;
                        return o().wrap((function (t) {
                            for (;;) switch (t.prev = t.next) {
                                case 0:
                                    n = Math.round(e / 80), a = 0, s = function () {
                                        var t = (0, i.default)(o().mark((function t() {
                                            return o().wrap((function (t) {
                                                for (;;) switch (t.prev = t.next) {
                                                    case 0:
                                                        return t.prev = 0, t.next = 3, FBInstant.performHapticFeedbackAsync();
                                                    case 3:
                                                        t.next = 8;
                                                        break;
                                                    case 5:
                                                        t.prev = 5, t.t0 = t.catch(0);
                                                    case 8:
                                                    case "end":
                                                        return t.stop()
                                                }
                                            }), t, null, [
                                                [0, 5]
                                            ])
                                        })));
                                        return function () {
                                            return t.apply(this, arguments)
                                        }
                                    }();
                                case 3:
                                    if (!(a < n)) {
                                        t.next = 11;
                                        break
                                    }
                                    return c = s(), u = (0, l.sleepAsync)(80), a += 1, t.next = 9, r().all([c, u]);
                                case 9:
                                    t.next = 3;
                                    break;
                                case 11:
                                case "end":
                                    return t.stop()
                            }
                        }), t)
                    })));
                    return function (e) {
                        return t.apply(this, arguments)
                    }
                }(),
                v = function (t) {
                    window.navigator.vibrate(0), window.navigator.vibrate(t)
                };
            e.default = function (t) {
                try {
                    if (!c) return !1;
                    if (!u) return !1;
                    var e = GameCore.Utils.Device;
                    e.isAndroid() || e.isMobileWeb() ? v(t) : e.isIOS() && g(t).catch((function (t) {}))
                } catch (n) {}
            }
        }
    },
    function (t) {
        var e = function (e) {
            return t(t.s = e)
        };
        t.O(0, [216], (function () {
            return e(730), e(729), e(712), e(681)
        }));
        t.O()
    }
]);
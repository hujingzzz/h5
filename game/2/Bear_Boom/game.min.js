var sendBugLog = new Object();
sendBugLog.bugInfoHttp = function(a) {}
;
sendBugLog.initialize = function() {}
;
sendBugLog.updateGameErrorType = function(a) {}
;
sendBugLog.setLogInfo = function(a) {}
;
var sdkName = "FaceBookTest";
var gameServerVersion = "201901301";
var currentScene = null
  , GameScene = cc.Scene.extend({
    sceneName: null,
    localTime: null,
    gameRuningTime: null,
    onceUpdataTime: null,
    onEnter: function() {
        currentScene = this;
        this._super()
    },
    initialize: function() {
        this.localTime = (new Date).getTime();
        this.onceUpdataTime = 3E3;
        this.gameRuningTime = engineGameRunTime();
        this.scheduleUpdate()
    },
    update: function(a) {
        engine.engineuUpdate(a);
        gameUserData.power < Global.maxPower && (gameUserData.RetainRecoveryTime -= a)
    }
})
  , multiplePNGDic = {}
  , multiplePNGToSpriteFrame = function(a) {
    null == cc.loader.getRes(a) ? cc.log("解析文件没有加载", a) : null == multiplePNGDic[a] && (multiplePNGDic[a] = a,
    cc.spriteFrameCache.addSpriteFrames(a))
}
  , transitions = function(a, b, c, d) {
    null == b && (b = []);
    null == c && (c = LoadScene);
    loaderRes(b, function() {
        engine.gameUpdate.cleanUpdate();
        cc.director.runScene(new a)
    }, c, d, !1, 0)
}
  , transitionsF = function(a, b, c, d) {
    null == b && (b = []);
    null == c && (c = LoadScene);
    loaderRes(b, function() {
        null != a && (engine.gameUpdate.cleanUpdate(),
        cc.director.runScene(new a))
    }, c, d, !1, 0)
};
var LoadControl = cc.Class.extend({
    cb: null,
    resources: null,
    originalResources: null,
    isInit: null,
    loadClassName: null,
    analysisFun: null,
    isloadBefore: null,
    loadBeforeValue: null,
    loadMC: null,
    loadTotalCount: null,
    circle: null,
    initialize: function(a) {
        this.cb = a.cb;
        this.analysisFun = a.analysisFun;
        this.loadClassName = a.loadClassName;
        this.loadBeforeValue = a.loadBeforeValue;
        this.isloadBefore = a.isloadBefore;
        this.loadTotalCount = 0;
        this.circle = null;
        null == this.loadBeforeValue && (this.loadBeforeValue = 0);
        this.originalResources = this.getMustLoadResources(a.resources);
        this.loadMC = new this.loadClassName(this);
        !0 != this.isloadBefore && this.load(0.1)
    },
    loadEnd: function() {
        null != this.analysisFun && this.analysisFun();
        null != this.cb && this.cb()
    },
    load: function(a) {
        this.loadTotalCount++;
        if (!(10 < this.loadTotalCount)) {
            var b = this.getCheckLoadResources(this.originalResources);
            0 < b.length ? (this.resources = b,
            b = this.loadMC.loadCount,
            this.loadMC = new this.loadClassName(this),
            this.loadMC.loadCount = b,
            this.loadMC.showLoad(),
            this.loadMC.load(a)) : this.loadEnd()
        }
    },
    setLoadPercent: function(a) {
        this.loadMC.setLoadPercent(a)
    },
    getLoadCount: function() {
        return this.originalResources.length - this.getCheckLoadResources(this.originalResources).length
    },
    getAllLoadCount: function() {
        return this.originalResources.length
    },
    getCheckLoadResources: function(a) {
        for (var b = [], c = 0; c < a.length; c++)
            if (null != a[c].type && "font" == a[c].type)
                for (var d = 0; d < a[c].srcs.length; d++)
                    null == cc.loader.getRes(a[c].srcs[d]) && b.push(a[c].srcs[d]);
            else
                null == cc.loader.getRes(a[c]) && b.push(a[c]);
        return b
    },
    getMustLoadResources: function(a) {
        for (var b = [], c = 0; c < a.length; c++)
            if (null != a[c].type && "font" == a[c].type)
                for (var d = 0; d < a[c].srcs.length; d++)
                    null == cc.loader.getRes(getUrlByVersion(a[c].srcs[d])) && b.push(getUrlByVersion(a[c].srcs[d]));
            else
                null == cc.loader.getRes(a[c]) && b.push(a[c]);
        return b
    }
})
  , loadSoundDic = {}
  , LoadSound = cc.Class.extend({
    playSound: null,
    loadEffectSound: function(a) {
        null == loadSoundDic[a] && (loadSoundDic[a] = !0,
        cc.loader.load(a, function() {}))
    },
    loadBackgroundSound: function(a) {
        null == loadSoundDic[a] && (loadSoundDic[a] = {},
        loadSoundDic[a].loadCount = 1,
        loadSoundDic[a].isNowLoad = !1);
        if (!(10 <= loadSoundDic[a].loadCount)) {
            var b = cc.loader.getRes(a);
            null != b && null == b._element && (b = null,
            cc.loader.release(a));
            if (null == b) {
                if (!1 == loadSoundDic[a].isNowLoad) {
                    var c = this;
                    null == b && (loadSoundDic[a].isNowLoad = !0,
                    loadSoundDic[a].loadCount++,
                    setTimeout(function() {
                        cc.loader.load(a, function() {
                            loadSoundDic[a].isNowLoad = !1;
                            c.loadBackgroundSound(a)
                        })
                    }, 2))
                }
            } else
                this.playSound(a)
        }
    }
})
  , LoadScene = GameScene.extend({
    label: null,
    isInit: null,
    loadCount: null,
    loadControl: null,
    loadBefore: null,
    loadBeforeValue: null,
    mustLoadConnt: null,
    ctor: function(a) {
        this.sceneName = "LoadScene";
        this.isInit = !1;
        this.loadCount = 0;
        this.loadBefore = null;
        this.loadBeforeValue = 0;
        this.mustLoadConnt = a.originalResources.length;
        this.loadControl = a;
        this.loadBeforeValue = a.loadBeforeValue;
        cc.director.runScene(this);
        this._super();
        this.setLoadStyle()
    },
    addLogo: function() {},
    loadingUI: function() {
        var a = new cc.Sprite("res/loadimg.jpg");
        a.x = viewGameWidth / 2;
        a.y = viewGameHeigh / 2;
        this.addChild(a, 1001);
        this.circle = new cc.Sprite("res/circle.png");
        this.circle.x = viewGameWidth / 2;
        this.circle.y = viewGameHeigh / 2;
        this.addChild(this.circle, 1001);
        a = new cc.Sprite("res/loading.png");
        a.x = viewGameWidth / 2;
        a.y = viewGameHeigh / 2;
        this.addChild(a, 1001);
        null == this.label && (this.label = new cc.LabelTTF("Loading... 0%","Arial",46),
        this.label.setPosition(viewGameWidth / 2, 100),
        this.label.setColor(cc.color(67, 14, 21)),
        this.addChild(this.label, 100))
    },
    load: function(a) {
        var b = this;
        this.scheduleOnce(function() {
            cc.loader.load(this.loadControl.resources, function(a, d, e) {
                b.loadCount = b.loadControl.getLoadCount();
                b.showLoad()
            }, function() {
                b.loadControl.load(0.2)
            })
        }, a)
    },
    setLoadStyle: function() {
        var a = new cc.Sprite("res/loadimg.jpg");
        a.x = viewGameWidth / 2;
        a.y = viewGameHeigh / 2;
        this.addChild(a, 100);
        this.label = new cc.LabelTTF("Loading... 0%","Arial",46);
        this.label.setPosition(viewGameWidth / 2, 80);
        this.label.setColor(cc.color(67, 14, 21));
        this.addChild(this.label, 100)
    },
    showLoad: function() {
        var a = new cc.Sprite("res/loadimg.jpg");
        a.x = viewGameWidth / 2;
        a.y = viewGameHeigh / 2;
        this.addChild(a);
        a = Math.floor(this.loadControl.loadBeforeValue + (Math.floor(this.loadCount / this.mustLoadConnt * 100) | 0) * (100 - this.loadControl.loadBeforeValue) / 100);
        a = Math.min(a, 99);
        this.label.setString("Loading... " + a + "%");
        this.circle && 2 === Global.mapIndex && null !== this.circle && this.circle.setRotation(a / 100 * 360);
        isNotFbGame || FBInstant.setLoadingProgress(a)
    }
})
  , loaderRes = function(a, b, c, d, e, f) {
    var g = {};
    g.resources = a;
    g.cb = b;
    g.analysisFun = d;
    g.loadClassName = c;
    g.isloadBefore = e;
    g.loadBeforeValue = f;
    (new LoadControl).initialize(g)
};
var LoadUI = cc.Class.extend({
    cb: null,
    resources: null,
    loadIndex: null,
    loadTotalCount: null,
    initialize: function(a) {
        this.cb = a.cb;
        this.target = a.target;
        this.loadTotalCount = this.loadIndex = 0;
        this.resources = this.getMustLoadResources(a.resources);
        this.load()
    },
    loadEnd: function() {
        null != this.cb && (null != this.target ? this.cb(this.target) : this.cb())
    },
    load: function() {
        this.loadTotalCount++;
        if (!(10 < this.loadTotalCount)) {
            var a = this
              , b = this.getCheckLoadResources(this.resources);
            0 < b.length ? (new cc.Node).scheduleOnce(cc.loader.load(b, function(b, d, e) {
                a.loadIndex++
            }, function() {
                a.load()
            }), 0.5) : this.loadEnd()
        }
    },
    getMustLoadResources: function(a) {
        for (var b = [], c = 0; c < a.length; c++)
            if (0 <= a[c].indexOf("mp3"))
                null == cc.loader.getRes(a[c]) && b.push(a[c]);
            else if (null == cc.loader.getRes(a[c])) {
                if (0 <= a[c].indexOf(".plist")) {
                    var d = a[c]
                      , e = d.split("/")
                      , e = e[e.length - 1]
                      , f = e.split(".")[0] + ".png"
                      , d = d.substring(0, d.length - e.length) + f;
                    if (null != cc.loader.getRes(getUrlByVersion(d)))
                        continue
                }
                b.push(a[c])
            }
        return b
    },
    getCheckLoadResources: function(a) {
        for (var b = [], c = 0; c < a.length; c++)
            if (null != a[c].type && "font" == a[c].type)
                for (var d = 0; d < a[c].srcs.length; d++)
                    null == cc.loader.getRes(getUrlByVersion(a[c].srcs[d])) && b.push(getUrlByVersion(a[c].srcs[d]));
            else
                a[c].indexOf("mp3"),
                null == cc.loader.getRes(a[c]) && b.push(a[c]);
        return b
    }
})
  , loadUIFun = function(a, b, c) {
    var d = new LoadUI
      , e = {};
    e.resources = a;
    e.cb = b;
    e.target = c;
    d.initialize(e)
};
var GameBackgroundLoad = cc.Class.extend({
    loadArr: null,
    isLoad: null,
    loadCountDic: null,
    isInit: null,
    loadCompleteDic: null,
    backgroundLoadCompleteParsingPlistFun: null,
    initialize: function(a) {
        !0 != this.isInit && (this.isInit = !0,
        this.loadArr = [],
        this.isLoad = !1,
        this.loadCountDic = {},
        this.loadCompleteDic = {},
        this.backgroundLoadCompleteParsingPlistFun = null)
    },
    addLoadRes: function(a) {
        null == a && cc.error(".....要加载的资源是空...");
        this.loadArr.push(a);
        this.loadRes()
    },
    loadRes: function() {
        if (!1 == this.isLoad && 0 < this.loadArr.length) {
            var a = this
              , b = this.loadArr[0];
            null == cc.loader.getRes(b) && this.isCanLoad(b) ? (this.isLoad = !0,
            cc.loader.load([b], function() {}, function() {
                null != cc.loader.getRes(b) && (a.loadCompleteDic[b] = !0);
                null != a.backgroundLoadCompleteParsingPlistFun && a.backgroundLoadCompleteParsingPlistFun(b);
                a.isLoad = !1;
                a.loadRes()
            })) : (this.loadArr.shift(),
            this.loadRes())
        }
    },
    isCanLoad: function(a) {
        if (!0 == this.loadCompleteDic[a])
            return !1;
        null == this.loadCountDic[a] && (this.loadCountDic[a] = 1);
        this.loadCountDic[a] += 1;
        return 10 < this.loadCountDic[a] ? !1 : !0
    }
});
var PurityLoadScene = LoadScene.extend({
    showPNG: function() {
        null != this.loadpng1 && this.loadpng2 && null != this.loadprogress && (this.loadpng1.setVisible(!0),
        this.loadpng2.setVisible(!0),
        this.loadprogress.setVisible(!0),
        this.label.setVisible(!0))
    },
    setLoadStyle: function() {
        var a = this;
        this.label = new cc.LabelTTF("Loading...","jellyboom_font",24);
        this.label.setPosition(375, 87);
        this.label.setColor(cc.color(255, 255, 255));
        this.addChild(this.label, 100);
        this.label.setVisible(!1);
        var b = new cc.LabelTTF("Loading takes a little longer for the 1st time. Please be patient.","jellyboom_font",24);
        b.setPosition(375, 140);
        b.setColor(cc.color(255, 255, 255));
        b.enableStroke(cc.color(0, 0, 0), 2);
        this.addChild(b, 100);
        cc.loader.load("res/loadpng1.png", function() {
            a.loadpng1 = new cc.Sprite("res/loadpng1.png");
            a.loadpng1.setAnchorPoint(0, 0);
            a.loadpng1.y = 667;
            a.loadpng1.setVisible(!1);
            a.addChild(a.loadpng1);
            a.showPNG()
        });
        cc.loader.load("res/loadpng2.png", function() {
            a.loadpng2 = new cc.Sprite("res/loadpng2.png");
            a.loadpng2.setAnchorPoint(0, 0);
            a.loadpng2.setVisible(!1);
            a.addChild(a.loadpng2);
            a.showPNG()
        });
        cc.loader.load("res/loadprogress.png", function() {
            a.loadprogress = new cc.Sprite("res/loadprogress.png");
            a.loadprogress.setAnchorPoint(0, 0);
            a.loadprogress.x = -620;
            a.loadprogress.y = 69;
            a.loadprogress.setVisible(!1);
            a.addChild(a.loadprogress, -1);
            a.showPNG()
        })
    },
    showLoad: function() {
        if (null != this.loadprogress) {
            var a = this.computationsLoadProgress();
            this.setLoadPercent(a)
        }
    },
    setLoadPercent: function(a) {
        null != this.label && null != this.loadprogress && (this.label.setString("Loading..." + a + "%"),
        this.loadprogress.x = -620 + 642 * a / 100)
    }
});
var faceBookDataKey = "jellyboom20180912"
  , FB_LEVEL_RANK_KEY = "jellyboom_levelrank"
  , FB_HURT_RANK_KEY = "jellyboom_hurtrank"
  , getSaveFBData = function() {
    var a = {};
    a.gold = gameUserData.gold;
    a.musicVolume = gameUserData.musicVolume;
    a.effectVolume = gameUserData.effectVolume;
    a.stars = gameUserData.stars;
    a.lv = gameUserData.lv;
    a.killElement = gameUserData.killElement;
    a.spendDiamond = gameUserData.spendDiamond;
    a.completeTasks = gameUserData.completeTasks;
    a.items = gameUserData.items;
    a.lotteryRecords = gameUserData.lotteryRecords;
    a.freeLotteyNum = gameUserData.freeLotteyNum;
    a.levelStar = gameUserData.levelStar;
    a.rewardLevel = gameUserData.rewardLevel;
    a.guideLevel = gameUserData.guideLevel;
    a.isGetItem = gameUserData.isGetItem;
    a.lastDay = gameUserData.lastDay;
    a.power = gameUserData.power;
    a.beginRecoveryTime = gameUserData.beginRecoveryTime;
    a.RetainRecoveryTime = gameUserData.RetainRecoveryTime;
    a.recoverTime = gameUserData.recoverTime;
    a.watchAdsNum = gameUserData.watchAdsNum;
    a.resugenceAdsNum = gameUserData.resugenceAdsNum;
    a.supportNum = gameUserData.supportNum;
    a.gift = gameUserData.gift;
    a.getNextGiftTime = gameUserData.getNextGiftTime;
    a.recoveryPowerNum = gameUserData.recoveryPowerNum;
    a.totalScore = gameUserData.totalScore;
    a.beSupportNum = gameUserData.beSupportNum;
    a.firstGift = gameUserData.firstGift;
    a.getBoxID = gameUserData.getBoxID;
    a.signDay = gameUserData.signDay;
    a.signNum = gameUserData.signNum;
    a.signDayLimit = gameUserData.signDayLimit;
    a.touchRank = gameUserData.touchRank;
    a.getInfinitePowerTime = gameUserData.getInfinitePowerTime;
    a.firstEnterGameTime = gameUserData.firstEnterGameTime;
    a.isInfiniteOver = gameUserData.isInfiniteOver;
    a.leftGetDiamondNum = gameUserData.leftGetDiamondNum;
    a.usePowerNum = gameUserData.usePowerNum;
    a.baseFriendNum = gameUserData.baseFriendNum;
    a.isDailyGift = gameUserData.isDailyGift;
    a.seeTargetDate = gameUserData.seeTargetDate;
    a.shortcut = gameUserData.shortcut;
    a.honor_reward_index = gameUserData.honor_reward_index;
    a.honor_invite_type = gameUserData.honor_invite_type;
    a.honor_free_box = gameUserData.honor_free_box;
    a.hurt_gift_package = gameUserData.hurt_gift_package;
    a.honor = gameUserData.honor;
    a.free_count = gameUserData.free_count;
    a.boxget = gameUserData.boxget;
    a.invite_ids = gameUserData.invite_ids;
    a.is_today_first_login = gameUserData.is_today_first_login;
    a.lastHurt = gameUserData.lastHurt;
    a.myHurt = gameUserData.myHurt;
    a.pay_count = gameUserData.pay_count;
    a.tagetlvl = gameUserData.tagetlvl;
    a.todayInitLv = gameUserData.todayInitLv;
    a.week_gift_reveived = gameUserData.week_gift_reveived;
    a.week_invite_num = gameUserData.week_invite_num;
    a.week_refresh = gameUserData.week_refresh;
    a.week_share_num = gameUserData.week_share_num;
    a.tarStr = gameUserData.tarStr;
    a.dianZanList = gameUserData.dianZanList;
    a.lotteryCostNum = gameUserData.lotteryCostNum;
    a.lotteryShareCount = gameUserData.lotteryShareCount;
    a.limitPowerCount = gameUserData.limitPowerCount;
    a.inviteFriendList = gameUserData.inviteFriendList;
    a.isBuyOtherAD = gameUserData.isBuyOtherAD;
    a.isBuyReliveAD = gameUserData.isBuyReliveAD;
    a.isAllAD = gameUserData.isAllAD;
    a.watchParachuteAd_count = gameUserData.watchParachuteAd_count;
    a.isSelectMessage = gameUserData.isSelectMessage;
    a.getMsgAwardDate = gameUserData.getMsgAwardDate;
    var b = {};
    b[fbSaveDataKey] = a;
    return b
}
  , getFaceBookTestEntriesLeaderboardData = function() {
    var a = []
      , b = {};
    b.level = gameUserData.lv;
    b.maxstar = gameUserData.stars;
    b.totalScore = gameUserData.totalScore;
    a.push({
        id: gameSDK.sdkPlayInfo.id,
        pid: gameSDK.sdkPlayInfo.id,
        playerid: gameSDK.sdkPlayInfo.id,
        name: gameSDK.sdkPlayInfo.name,
        level: gameUserData.lv,
        photo: gameSDK.sdkPlayInfo.photo,
        image: gameSDK.sdkPlayInfo.photo,
        maxstar: gameUserData.stars,
        dianzan: getDianZan(gameSDK.sdkPlayInfo.id),
        rank: 1,
        data: JSON.stringify(b)
    });
    a.push({
        id: "13000007",
        pid: "13000007",
        playerid: "13000007",
        level: 30,
        name: "test1",
        photo: "res/iconren.png",
        image: "res/iconren.png",
        maxstar: 20,
        dianzan: getDianZan("13000007"),
        rank: 3,
        data: JSON.stringify({
            level: 30,
            maxstar: 20,
            totalScore: 99990
        })
    });
    a.push({
        id: "100000003",
        pid: "100000003",
        playerid: "100000003",
        level: 20,
        name: "test2",
        photo: "res/iconren.png",
        image: "res/iconren.png",
        maxstar: 50,
        dianzan: getDianZan("100000003"),
        rank: 2,
        data: JSON.stringify({
            level: 20,
            maxstar: 50,
            totalScore: 654646
        })
    });
    a.push({
        id: "100000004",
        pid: "100000004",
        playerid: "100000004",
        level: 20,
        name: "test4",
        photo: "res/iconren.png",
        image: "res/iconren.png",
        maxstar: 50,
        dianzan: getDianZan("100000003"),
        rank: 4,
        data: JSON.stringify({
            level: 20,
            maxstar: 50,
            totalScore: 654646
        })
    });
    return a
}
  , getPlayerWeekGameEntriesboardLeaderboardData = function() {
    var a = []
      , b = {};
    b.hurt = gameUserData.myHurt;
    b.last_hurt = gameUserData.lastHurt;
    a.push({
        id: gameSDK.sdkPlayInfo.id,
        name: gameSDK.sdkPlayInfo.name,
        photo: gameSDK.sdkPlayInfo.photo,
        rank: 3,
        data: JSON.stringify(b)
    });
    a.push({
        id: "13000007",
        name: "test1",
        photo: "res/iconren.png",
        rank: 2,
        data: JSON.stringify({
            hurt: 20,
            last_hurt: 0
        })
    });
    a.push({
        id: "100000003",
        name: "test2",
        photo: "res/iconren.png",
        rank: 1,
        data: JSON.stringify({
            hurt: 40,
            last_hurt: 0
        })
    });
    a.push({
        id: "100000003",
        name: "test2",
        photo: "res/iconren.png",
        rank: 4,
        data: JSON.stringify({
            hurt: 45,
            last_hurt: 0
        })
    });
    return a
}
  , getFaceBookTestPlayerEntriesboardLeaderboardData = function() {
    var a = []
      , b = {};
    b.level = gameUserData.lv;
    b.maxstar = gameUserData.stars;
    a.push({
        id: gameSDK.sdkPlayInfo.id,
        pid: gameSDK.sdkPlayInfo.id,
        playerid: gameSDK.sdkPlayInfo.id,
        name: gameSDK.sdkPlayInfo.name,
        level: gameUserData.lv,
        photo: gameSDK.sdkPlayInfo.photo,
        image: gameSDK.sdkPlayInfo.photo,
        maxstar: gameUserData.stars,
        dianzan: getDianZan(gameSDK.sdkPlayInfo.id),
        data: JSON.stringify(b)
    });
    a.push({
        id: "13000007",
        pid: "13000007",
        playerid: "13000007",
        level: 30,
        name: "test1",
        photo: "res/iconren.png",
        image: "res/iconren.png",
        maxstar: 70,
        dianzan: getDianZan("13000007"),
        data: JSON.stringify({
            level: 30,
            maxstar: 70
        })
    });
    a.push({
        id: "100000003",
        pid: "100000003",
        playerid: "100000003",
        level: 20,
        name: "test2",
        photo: "res/iconren.png",
        image: "res/iconren.png",
        maxstar: 50,
        dianzan: getDianZan("100000003"),
        data: JSON.stringify({
            level: 20,
            maxstar: 50
        })
    });
    return a
}
  , setFriendsList = function(a) {
    a.name = "黄海晨";
    a.photo = "res/iconren.png";
    a.friendsList["13000007"] = {
        name: "test1",
        id: "13000007",
        img: a.photo
    };
    a.friendsList["100000003"] = {
        name: "test2",
        id: "100000003",
        img: a.photo
    };
    a.friendsList["9003"] = {
        name: "test2",
        id: "9003",
        img: a.photo
    }
}
  , getShareData = function() {
    var a = {};
    a.text = FB_config.getShareTxt();
    return a
}
  , getSendFriendData = function() {
    return {
        text: "Come and play together",
        template: "play_turn"
    }
}
  , createTestPlayer = function() {
    if ("FaceBookTest" == sdkName) {
        var a = HttpFun.GetRequest();
        gameSDK.sdkPlayInfo.id = null == a.playerid ? "3222112005" : a.playerid;
        gameSDK.sdkPlayInfo.name = null == a.pname ? "doubi" + gameSDK.sdkPlayInfo.id : a.pname;
        gameSDK.sdkPlayInfo.photo = "res/iconren.png"
    }
}
  , upateFriendData = function() {}
  , addLoadingCircle = function() {
    FB_config.addLoadingCircle()
}
  , removeLoadingCircle = function() {
    FB_config.removeLoadingCircle()
}
  , createGameSureTitleWindow = function() {
    var a = new GameSureTitleWindow;
    a.initialize(FB_config.ad_fail_layer);
    null != currentScene && currentScene.addChild(a, 999999)
}
  , GameSureTitleWindow = cc.Sprite.extend({
    ctor: function() {
        this._super()
    },
    initialize: function(a) {
        var b = new cc.DrawNode;
        b.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        this.addChild(b, -1);
        engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height));
        a = loadCSS(a);
        this.addChild(a);
        a.btn_sure ? engine.gameEvent.createMouseUp(a.btn_sure, this.clickCancelbtnFun.bind(this), buttonScalingType) : cc.error("定制界面里缺失特定名称的确认按钮:btn_sure")
    },
    clickCancelbtnFun: function() {
        this.removeFromParent()
    }
})
  , ADMaskLayer = cc.Layer.extend({
    circle: null,
    ctor: function() {
        this._super()
    },
    initialize: function(a) {
        !0 == a.isCanClick && (a = new cc.DrawNode,
        a.drawRect(cc.p(0, 0), cc.p(cc.winSize.width, cc.winSize.height), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120)),
        this.addChild(a, -1),
        engine.gameEvent.createMouseDown(this, function() {}, null, cc.rect(0, 0, cc.winSize.width, cc.winSize.height)));
        a = new cc.Sprite(FB_config.loadingCirclePng);
        a.setAnchorPoint(0.5, 0.5);
        a.setPosition(375, 667);
        this.addChild(a);
        var b = cc.rotateBy(2, 360);
        b.repeatForever();
        a.runAction(b);
        this.circle = a
    },
    removeGameLayer: function() {
        this.circle.stopAllActions();
        this.removeAllChildrenWithCleanup(!0);
        this.removeFromParent()
    }
})
  , appointFaceBookFriendData = function() {
    var a = {};
    a.pngArr = [{
        url: "res/share_bg.jpg",
        posX: 0,
        posY: 0,
        imgWidth: 750,
        imgHeight: 340
    }, {
        url: this.sdkPlayInfo.photo,
        posX: 225,
        posY: 155,
        imgWidth: 110,
        imgHeight: 114
    }, {
        url: "res/imageicon.png",
        posX: 220,
        posY: 150,
        imgWidth: 120,
        imgHeight: 126
    }];
    a.fontData = [{
        des: (100).toString(),
        posX: 375,
        posY: 265,
        font: "55px Microsoft YaHei",
        fillStyle: "rgb(255,255,255)",
        textAlign: "left"
    }, {
        des: this.sdkPlayInfo.name,
        posX: 375,
        posY: 190,
        font: "38px Microsoft YaHei",
        fillStyle: "rgb(255,255,255)",
        textAlign: "left"
    }];
    a.canvasWidth = 750;
    a.canvasHeight = 340;
    return a
}
  , checkShareOrWatch = function() {
    return !1
}
  , checkMobileShareOrWatch = function() {
    return !1 == cc.sys.isMobile ? !0 : !1
}
  , add_watchAD_share_count_Fun = function() {
    Global.watchAD_share_count += 1
}
  , checkShareOrWatchByCount = function() {
    return 2 > Global.watchAD_share_count % 3 ? !0 : !1
}
  , add_IAD_share_count_Fun = function() {
    Global.interstitialAdCD += 1
}
  , reset_IAD_share_count_Fun = function() {
    Global.interstitialAdCD = 0
}
  , checkShowIADbyCount = function() {
    return 2 <= Global.interstitialAdCD ? !0 : !1
}
  , checkSendInvite = function(a) {
    if (-1 != gameUserData.inviteFriendList.indexOf(a))
        return EventMgr.emit(EVENTMGR_ID.ADS_TIPS, "Whoa there! Looks like you already message this friend.Try again in later"),
        !1;
    gameUserData.inviteFriendList.push(a);
    gameSDK.saveUserData(getSaveFBData(), null);
    return !0
}
  , getPayTestData = function() {
    var a = {
        purchaseToken: "123",
        productID: "1",
        signedRequest: "123"
    };
    gameSDK.supplementPropList = [a, a]
};
var FacebookLoadScene = LoadScene.extend({
    showPNG: function() {
        null != this.loadpng1 && this.loadpng2 && (this.loadpng1.setVisible(!0),
        this.loadpng2.setVisible(!0))
    },
    setLoadStyle: function() {},
    showLoad: function() {
        var a = this.computationsLoadProgress();
        this.setLoadPercent(a)
    },
    setLoadPercent: function(a) {
        gameSDK.setLoadingProgress(a)
    }
});
var rewardedVideoID1 = "139365650098436_162388937796107"
  , rewardedVideoID2 = "139365650098436_158100214891646"
  , rewardedVideoID3 = "139365650098436_161608864540781"
  , FB_config = {
    loadingCirclePng: "res/circle.png",
    ad_fail_layer: "res/facebook_ad_fail.json",
    ad_over_layer: "res/facebook_ad_over.json",
    headRect: "res/touxiangkuang.png",
    shareImg: "res/share_bg.jpg",
    shareTxt: "Come running with me!",
    inviteImg: "res/share_bg.jpg",
    inviteTxt: "Come to challenge, Who can get more stars?",
    showAdOver: function() {
        var a = new GameSureTitleWindow;
        a.initialize(this.ad_over_layer);
        null != currentScene && currentScene.addChild(a, 999999)
    },
    getInviteTxt: function() {
        for (var a = this.inviteTxt; -1 != a.indexOf("#player"); )
            a = a.replace("#player", gameSDK.sdkPlayInfo.name);
        return a
    },
    getShareTxt: function() {
        for (var a = this.shareTxt; -1 != a.indexOf("#player"); )
            a = a.replace("#player", gameSDK.sdkPlayInfo.name);
        return a
    },
    addLoadingCircle: function() {
        if (this.ad_mask)
            cc.error("不能添加，已经存在了一个广告加载页面");
        else {
            var a = new ADMaskLayer;
            a.initialize({
                isCanClick: !0
            });
            currentScene.addChild(a, 99999);
            this.ad_mask = a
        }
    },
    removeLoadingCircle: function() {
        this.ad_mask ? (this.ad_mask.removeGameLayer(),
        this.ad_mask = null) : cc.error("尝试移除一个不存在的广告加载界面")
    }
};
var gameSDK, GameSDK = cc.Class.extend({
    isFirstStartGame: null,
    sdkPlayInfo: null,
    entriesLeaderboard: null,
    playerEntriesboard: null,
    interstitialDic: null,
    isCanPayment: null,
    supplementPropList: null,
    sdkPort: null,
    sdkIAD: null,
    sdkMessage: null,
    ctor: function() {
        this.sdkPlayInfo = {};
        this.sdkPlayInfo.friendsList = {};
        this.isFirstStartGame = !0;
        this.entriesLeaderboard = {};
        this.playerEntriesboard = {};
        this.interstitialAd = null;
        this.isCanPayment = !1;
        this.supplementPropList = [];
        this.sdkPort = {};
        this.sdkMessage = this.sdkIAD = null
    },
    runSDK: function() {},
    getPlayerInfo: function() {},
    startGame: function() {},
    getLoadScene: function() {
        return PurityLoadScene
    },
    getfriendsList: function() {},
    shareGame: function() {},
    setHeroData: function(a) {}
}), initGameSDK = function() {
    switch (sdkName) {
    case "FaceBook":
        gameSDK = new FaceBookSDK;
        break;
    case "FaceBookTest":
        gameSDK = new FaceBookSDK;
        break;
    default:
        console.log("not find init sdk")
    }
};
var fbSaveDataKey = "databearboomhhc"
  , appID = "319647368564919"
  , rewardedVideoID1 = "1496369423800038_1503886543048326"
  , rewardedVideoID2 = "1496369423800038_1506229902813990"
  , rewardedVideoID3 = "1496369423800038_1506230112813969"
  , rewardedVideoID4 = "1496369423800038_1506230452813935"
  , rewardedVideoID5 = "1496369423800038_1506231109480536"
  , rewardedVideoID6 = "1496369423800038_1506231352813845"
  , rewardedVideoID7 = "1496369423800038_1506235152813465"
  , sdkPortEm = {
    ios: "IOS",
    android: "ANDROID",
    web: "WEB",
    mobileWeb: "MOBILE_WEB"
}
  , FaceBookSDK = GameSDK.extend({
    runSDK: function(a) {
        cc.log("FaceBookSDK版本号2018091201");
        switch (sdkName) {
        case "FaceBookTest":
            this.sdkIAD = new FaceBookIAD;
            this.sdkMessage = new FaceBookMSG;
            createTestPlayer();
            a();
            break;
        case "FaceBook":
            this.sdkPlayInfo.id = facebookPlayerid,
            this.sdkIAD = new FaceBookIAD,
            this.sdkMessage = new FaceBookMSG,
            a()
        }
    },
    startGame: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            !0 == this.isFirstStartGame && (this.isFirstStartGame = !1,
            this.sdkPort = sdkPortEm.web,
            null != a && a());
            break;
        case "FaceBook":
            var b = this;
            cc.log("获取游戏isFirstStartGame属性，如果true则调用FBInstant.startGameAsync方法" + this.isFirstStartGame);
            !0 == this.isFirstStartGame && (isLoadComplete = !0,
            this.isFirstStartGame = !1,
            FBInstant.startGameAsync().then(function() {
                b.sdkPlayInfo.name = FBInstant.player.getName();
                b.sdkPlayInfo.photo = FBInstant.player.getPhoto();
                cc.log("FBInstant.startGameAsync回调。玩家 name=" + b.sdkPlayInfo.name + "photo=" + b.sdkPlayInfo.photo);
                b.sdkPort = FBInstant.getPlatform();
                FBInstant.payments.onReady(function() {
                    b.isCanPayment = !0;
                    cc.log("可以发起支付");
                    b.checkPaymentStatus()
                });
                null != a && a()
            }))
        }
    },
    checkPaymentStatus: function() {
        switch (sdkName) {
        case "FaceBookTest":
            getPayTestData();
            break;
        case "FaceBook":
            var a = this;
            if (!1 == this.isCanPayment) {
                cc.log("支付并没有准备好");
                break
            }
            FBInstant.payments.getPurchasesAsync().then(function(b) {
                0 < b.length && (cc.log("有未消费的订单", b),
                a.supplementPropList = b)
            })
        }
    },
    showPay: function(a, b, c) {
        switch (sdkName) {
        case "FaceBookTest":
            this.isCanPayment = !0;
            if (!1 == this.isCanPayment) {
                cc.log("支付并没有准备好");
                null != b && b();
                break
            }
            null != a && (c.signedRequest = "1234",
            a(c));
            break;
        case "FaceBook":
            if (!1 == this.isCanPayment) {
                cc.log("支付并没有准备好");
                null != b && b();
                break
            }
            addLoadingCircle();
            FBInstant.payments.purchaseAsync({
                productID: c.payid,
                developerPayload: c.developerPayload
            }).then(function(b) {
                cc.log("购买成功,使商品生效并保存玩家信息", b);
                removeLoadingCircle();
                null != a && (a(b),
                cc.log(b))
            }).catch(function(a) {
                removeLoadingCircle();
                cc.log("支付失败:");
                cc.log(a);
                "USER_INPUT" != a.code && null != b && b()
            })
        }
    },
    consumeFbItem: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            cc.log("清除对应的消费信息:", a);
            break;
        case "FaceBook":
            FBInstant.payments.consumePurchaseAsync(a).then(function() {
                cc.log("商品消费掉了：" + a)
            })
        }
    },
    getFirstLoadScene: function() {
        switch (sdkName) {
        case "FaceBookTest":
            return LoadScene;
        case "FaceBook":
            return FacebookLoadScene
        }
    },
    getFriendsList: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            setFriendsList(this.sdkPlayInfo);
            null != a && a();
            break;
        case "FaceBook":
            var b = this;
            cc.log(" 获取好友列表, 调用FBInstant.player.getConnectedPlayersAsync方法。");
            FBInstant.player.getConnectedPlayersAsync().then(function(c) {
                for (var d = 0; d < c.length; d++) {
                    var e = c[d]
                      , f = {};
                    f.name = e.getName();
                    f.id = e.getID();
                    f.photo = e.getPhoto();
                    b.sdkPlayInfo.friendsList[f.id] = f;
                    cc.log(" 获取玩家好友列表:名字" + f.name + "玩家id:" + f.id + " 玩家头像：" + f.photo)
                }
                upateFriendData();
                cc.log("FBInstant.player.getConnectedPlayersAsync回调处理完毕。");
                null != a && a()
            })
        }
    },
    upateFriendsInfo: function(a) {
        var b = null;
        null == a.id && cc.log("friendsInfo.id is null");
        null == a.photo && cc.log("friendsInfo.photo is null");
        null == a.name && cc.log("friendsInfo.name is null");
        var c = this.sdkPlayInfo.friendsList[a.id];
        if (null != c && (c.photo != a.photo || c.name != a.name) && null != c.name && null != c.photo) {
            b = {};
            b.id = c.id;
            b.name = c.name;
            b.photo = c.photo;
            c = {};
            c.playerid = b.id;
            c.imageurl = b.photo;
            c.name = b.name;
            a = serverUrl + "?opcode=90002";
            c = JSON.stringify(c);
            cc.log("发送给服务信息90002：" + c);
            var d = cc.loader.getXMLHttpRequest();
            d.open("POST", a);
            d.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
            d.send(c)
        }
        return b
    },
    setLoadingProgress: function(a) {
        switch (sdkName) {
        case "FaceBook":
            FBInstant.setLoadingProgress(a)
        }
    },
    sendFaceBookFriend: function(a, b, c) {
        switch (sdkName) {
        case "FaceBookTest":
            null != a && a();
            var d = new GameCustomImage;
            d.initialize(b);
            d.drawCompleteFun = function(a) {
                var b = new Image;
                b.crossOrigin = "anonymous";
                b.src = a;
                b.onload = function() {
                    var a = new cc.Sprite(b);
                    currentScene.addChild(a, 999999);
                    a.x = cc.winSize.width / 2;
                    a.y = cc.winSize.height / 2;
                    engine.gameEvent.createMouseUp(a, function() {
                        a.removeFromParent()
                    }, buttonScalingType)
                }
            }
            ;
            break;
        case "FaceBook":
            d = getSendFriendData(),
            null == b.text && (b.text = d.text),
            null == b.template && (b.template = d.template),
            cc.log("调用FBInstant.context.chooseAsync方法"),
            FBInstant.context.chooseAsync({
                filters: ["NEW_CONTEXT_ONLY"]
            }).then(function() {
                if (null != a) {
                    var c = FBInstant.context.getID();
                    if (!1 == checkSendInvite(c))
                        return
                }
                cc.log("调用FBInstant.context.chooseAsync方法回调");
                c = new GameCustomImage;
                c.initialize(b);
                c.drawCompleteFun = function(a) {
                    cc.log("好友图片加载完成，调用FBInstant.updateAsync方法，邀请好友");
                    FBInstant.updateAsync({
                        action: "CUSTOM",
                        cta: "Play",
                        template: b.template,
                        image: a,
                        text: b.text,
                        data: {},
                        strategy: "LAST",
                        notification: "PUSH"
                    }).then(function() {})
                }
                ;
                null != a && (cc.log("邀请好友回调"),
                a())
            }).catch(function(b) {
                cc.log("chooseAsync", b);
                "SAME_CONTEXT" == b.code && null != a && (b = FBInstant.context.getID(),
                checkSendInvite(b));
                null != c && c()
            })
        }
    },
    shareGame: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            null != a && a();
            break;
        case "FaceBook":
            var c = getShareData();
            null == b && (b = {});
            null == b.text && (b.text = c.text);
            c = new GameCustomImage;
            c.initialize(b);
            c.drawCompleteFun = function(c) {
                var e = new Image;
                e.crossOrigin = "anonymous";
                e.src = c;
                e.onload = function() {
                    FBInstant.shareAsync({
                        intent: "SHARE",
                        image: c,
                        text: b.text,
                        data: {
                            myReplayData: "..."
                        }
                    }).then(function() {
                        null != a && a()
                    }).catch(function(a) {})
                }
            }
        }
    },
    showRewardVideoAd: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            null != b && b();
            break;
        case "FaceBook":
            var c = null;
            addLoadingCircle();
            FBInstant.getRewardedVideoAsync(a).then(function(a) {
                cc.log("RewardedVideo开始加载");
                c = a;
                return c.loadAsync()
            }).then(function() {
                cc.log("RewardedVideo加载成功回调");
                return c.showAsync()
            }).then(function() {
                cc.log("RewardedVideo广告显示成功");
                removeLoadingCircle();
                null != b && b()
            }).catch(function() {
                removeLoadingCircle();
                createGameSureTitleWindow();
                cc.log("RewardedVideo广告显示失败")
            })
        }
    },
    appointFaceBookFriend: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            null != a && a();
            null == b && appointFaceBookFriendData();
            var c = new GameCustomImage;
            c.initialize(b);
            c.drawCompleteFun = function(a) {
                var b = new Image;
                b.crossOrigin = "anonymous";
                b.src = a;
                b.onload = function() {
                    var a = new cc.Sprite(b);
                    currentScene.addChild(a, 999999);
                    a.x = cc.winSize.width / 2;
                    a.y = cc.winSize.height / 2;
                    engine.gameEvent.createMouseUp(a, function() {
                        a.removeFromParent()
                    }, buttonScalingType)
                }
            }
            ;
            break;
        case "FaceBook":
            cc.log("调用appointFaceBookFriend方法,邀请指定玩家id：" + b.playerid),
            FBInstant.context.createAsync(b.playerid).then(function() {
                cc.log("appointFaceBookFriend方法回调");
                var c = new GameCustomImage;
                c.initialize(b);
                c.drawCompleteFun = function(c) {
                    cc.log("邀请指定玩家图片加载完成，调用FBInstant.updateAsync方法");
                    FBInstant.updateAsync({
                        action: "CUSTOM",
                        cta: "Play",
                        template: b.updateAsyncTemplate,
                        image: c,
                        text: b.updateAsyncText,
                        data: {},
                        strategy: "LAST",
                        notification: "PUSH"
                    }).then(function() {});
                    null != a && (cc.log("指定好友邀请成功！"),
                    a())
                }
            })
        }
    },
    logEvent: function(a, b, c) {
        switch (sdkName) {
        case "FaceBook":
            FBInstant.logEvent(a, b, c)
        }
    },
    getUserData: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            initGameUserData();
            var c = readGameUserData(), d;
            for (d in c)
                gameUserData[d] = c[d];
            c = gameUserData;
            cc.log("取到缓存数据:", c);
            0 == c.lv && (c = null);
            b(c);
            break;
        case "FaceBook":
            var e = this;
            this.logEvent("getDataAsync", 1, {
                getDataAsync: "getDataAsync"
            });
            cc.log("getDataAsync");
            initGameUserData();
            FBInstant.player.getDataAsync(a).then(function(a) {
                e.logEvent("getDataAsyncOK", 1, {
                    getDataAsyncOK: "getDataAsyncOK"
                });
                cc.log("取到FB的数据:");
                cc.log(a);
                var c = 0, d;
                for (d in a)
                    null != a[d] && c++;
                null == a[fbSaveDataKey] ? b(null) : b(a)
            }).catch(function(a) {
                cc.log(a)
            })
        }
    },
    saveUserData: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            var c = null;
            try {
                c = JSON.parse(cc.sys.localStorage.getItem(gameSaveDataKey))
            } catch (d) {}
            if (null == c)
                c = a[fbSaveDataKey];
            else
                for (var e in a[fbSaveDataKey])
                    c[e] = a[fbSaveDataKey][e];
            try {
                cc.log("存数据：", c),
                cc.sys.localStorage.setItem(gameSaveDataKey, JSON.stringify(c))
            } catch (f) {}
            null != b && b();
            break;
        case "FaceBook":
            cc.log("游戏存档：-----", a),
            FBInstant.player.setDataAsync(a).then(function() {
                cc.log("游戏存档成功！");
                null != b && b()
            })
        }
    },
    setScoreAsync: function(a, b, c, d) {
        switch (sdkName) {
        case "FaceBookTest":
            null != d && d();
            break;
        case "FaceBook":
            FBInstant.getLeaderboardAsync(a).then(function(a) {
                cc.log("添加自己排行榜。" + b);
                var d = JSON.stringify(c);
                cc.log("添加自己排行榜----" + d);
                return a.setScoreAsync(b, d)
            }).then(function(a) {
                null != d && d(a)
            }).catch(function(a) {
                cc.log("上传排行失败。");
                cc.log(a);
                null != d && d(null)
            })
        }
    },
    getPlayerEntryAsync: function(a, b) {
        switch (sdkName) {
        case "FaceBook":
            var c = this;
            FBInstant.getLeaderboardAsync(a).then(function(a) {
                return a.getPlayerEntryAsync()
            }).then(function(a) {
                cc.log("getPlayerEntryAsync获取自己排行榜成功：");
                cc.log(a);
                c.sdkPlayInfo.rank = null != a ? a.getRank() : null;
                null != b && b()
            })
        }
    },
    getEntriesAsync: function(a, b) {
        if (null == this.entriesLeaderboard[a])
            switch (sdkName) {
            case "FaceBook":
                this.getEntriesAsyncInfo(a, b, [])
            }
    },
    getEntriesAsyncInfo: function(a, b, c) {
        cc.log("开始获取世界排行榜--------1");
        if (0 >= b.length)
            this.entriesLeaderboard[a] = c;
        else {
            var d = b.shift()
              , e = this;
            cc.log("开始获取世界排行榜--------3", d);
            FBInstant.getLeaderboardAsync(a).then(function(a) {
                return a.getEntriesAsync(d.count, d.beginNum)
            }).then(function(d) {
                cc.log("getEntriesAsync获取世界排行榜成功：");
                cc.log(d);
                for (var g = 0; g < d.length; g++) {
                    var h = {};
                    h.id = d[g].getPlayer().getID();
                    h.photo = d[g].getPlayer().getPhoto();
                    h.name = d[g].getPlayer().getName();
                    h.level = d[g].getScore();
                    h.rank = d[g].getRank();
                    h.data = d[g].getExtraData();
                    cc.log("世界排行榜-----：", h);
                    c.push(h)
                }
                e.getEntriesAsyncInfo(a, b, c)
            })
        }
    },
    getEntriesLeaderboardData: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            return getFaceBookTestEntriesLeaderboardData();
        case "FaceBook":
            return this.entriesLeaderboard[a]
        }
    },
    setEntriesLeaderboardData: function(a, b) {
        this.entriesLeaderboard[a] = b
    },
    setPlayerEntriesboardLeaderboardData: function(a, b) {
        this.playerEntriesboard[a] = b
    },
    getPlayerEntriesboardLeaderboardData: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            return getFaceBookTestPlayerEntriesboardLeaderboardData();
        case "FaceBook":
            return this.playerEntriesboard[a]
        }
    },
    getPlayerWeekGameEntriesboardLeaderboardData: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            return getPlayerWeekGameEntriesboardLeaderboardData();
        case "FaceBook":
            return this.playerEntriesboard[a]
        }
    },
    getConnectedPlayerEntriesAsync: function(a, b, c) {
        if (null == this.playerEntriesboard[a])
            switch (sdkName) {
            case "FaceBook":
                var d = this;
                FBInstant.getLeaderboardAsync(a).then(function(a) {
                    return a.getConnectedPlayerEntriesAsync(b, c)
                }).then(function(b) {
                    cc.log("getEntriesAsync获取好友排行榜成功：");
                    cc.log(b);
                    for (var c = [], g = 0; g < b.length; g++) {
                        var h = {};
                        h.id = b[g].getPlayer().getID();
                        h.photo = b[g].getPlayer().getPhoto();
                        h.name = b[g].getPlayer().getName();
                        h.score = b[g].getScore();
                        h.rank = b[g].getRank();
                        h.data = b[g].getExtraData();
                        c.push(h)
                    }
                    d.playerEntriesboard[a] = c
                }).catch(function(a) {
                    cc.log("好友排行榜失败。");
                    cc.log(a)
                })
            }
    },
    createShortcut: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            cc.log("创建桌面快捷方式。");
            null != a && a(null);
            break;
        case "FaceBook":
            cc.log("创建桌面快捷方式sdk。"),
            FBInstant.player.getDataAsync(["shortcut"]).then(function(b) {
                cc.log("获取到的data。", b);
                null != b && null != b.shortcut && 1 == b.shortcut || FBInstant.canCreateShortcutAsync().then(function(b) {
                    cc.log("........创建值canCreateShortcut：" + b);
                    cc.log(b);
                    b && FBInstant.createShortcutAsync().then(function() {
                        FBInstant.player.setDataAsync({
                            shortcut: 1
                        }).then(function() {});
                        cc.log("创建成功。");
                        null != a && a(null)
                    }).catch(function(a) {
                        cc.log("创建失败。");
                        cc.log(a)
                    })
                }).catch(function(a) {
                    cc.log("不可以创建。");
                    cc.log(a)
                })
            }).catch(function(a) {
                cc.log("获取数据失败。");
                cc.log(a)
            })
        }
    },
    requestInterstitialAd: function(a, b) {
        cc.log("加载插屏广告---");
        var c = this;
        c.interstitialAd = null;
        FBInstant.getInterstitialAdAsync(a).then(function(a) {
            cc.log("InterstitialAd开始加载");
            c.interstitialAd = a;
            return c.interstitialAd.loadAsync()
        }).then(function() {
            cc.log("InterstitialAd加载成功回调");
            null != b && b()
        }).catch(function(a) {
            cc.log("InterstitialAd加载失败", a);
            isAdLoading = !1;
            EventMgr.emit(EVENTMGR_ID.ADS_TIPS, Global.noAdds2);
            EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
            c.interstitialAd = null
        })
    },
    showInterstitialAd: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            null != b && b();
            EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
            break;
        case "FaceBook":
            var c = this;
            null == this.interstitialAd ? this.requestInterstitialAd(a, function() {
                c.showInterstitialAd(a, b)
            }) : c.interstitialAd.showAsync().then(function() {
                cc.log("InterstitialAd广告显示成功");
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                null != b && b();
                c.interstitialAd = null
            }).catch(function(a) {
                cc.log("InterstitialAd广告显示失败");
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, Global.noAdds2);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                console.log(a)
            })
        }
    },
    getPlatform: function() {
        var a = "WEB";
        switch (sdkName) {
        case "FaceBook":
            a = FBInstant.getPlatform()
        }
        return a
    },
    isCanPay: function() {
        var a = !0;
        switch (sdkName) {
        case "FaceBookTest":
            a = !1;
            break;
        case "FaceBook":
            a = this.sdkPort == sdkPortEm.ios || cc.sys.os === cc.sys.OS_IOS ? !1 : !0
        }
        return a
    }
});
var FacebookPaymentShopLayer = cc.Layer.extend({
    mainUI: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_payment_shop_layer);
        this.addChild(this.mainUI);
        this.addListener();
        this.refreshView()
    },
    addListener: function() {
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        for (var a = 1; 5 > a; a++)
            engine.gameEvent.createMouseUp(this.mainUI["paybtn_" + a], this.paymentFun.bind(this), buttonScalingType)
    },
    refreshView: function() {},
    checkPayment: function(a) {
        return !0
    },
    paymentFun: function(a, b) {
        var c = b.getCurrentTarget().getName().split("_")[1]
          , d = Global.payShopInfo[c]
          , e = this;
        !1 != this.checkPayment(c) && (c = {},
        c.payid = d.payid,
        c.developerPayload = "bearboom_pay",
        gameSDK.showPay(function(a) {
            for (var b = 0; b < d.itemInfo.length; ++b)
                2006 === d.itemInfo[b].id ? (gameUserData.gold += d.itemInfo[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[b].id ? (gameUserData.power += d.itemInfo[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(d.itemInfo[b].id, d.itemInfo[b].num);
            e.refreshView();
            EventMgr.emit(EVENTMGR_ID.PAYMENT_SUCCESS, d);
            b = {};
            b.sig = a.signedRequest;
            sendServerPaySuccess(b);
            gameSDK.saveUserData(getSaveFBData(), function() {
                gameSDK.consumeFbItem(a.purchaseToken)
            })
        }, function() {
            EventMgr.emit(EVENTMGR_ID.ADS_TIPS, Global.paymentFailDes)
        }, c))
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.removeFromParent()
    }
})
  , PaymentSuccessLayer = cc.Layer.extend({
    data: null,
    ctor: function(a) {
        this._super();
        this.data = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_payment_success_layer);
        this.addChild(this.mainUI);
        if (0 < this.data.itemInfo.length)
            this.createItemNode();
        else {
            var a = new cc.Sprite("#public/scalesprite2.png");
            this.addChild(a);
            a.x = 360;
            a.y = 612;
            a = new cc.Sprite("#shop/" + this.data.payid + ".png");
            a.x = 360;
            a.y = 620;
            this.addChild(a)
        }
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType)
    },
    createItemNode: function() {
        var a = []
          , b = 1;
        5 <= this.data.itemInfo.length && (b = 0.75);
        for (var c = 0; c < this.data.itemInfo.length; c++) {
            var d = new cc.Sprite("#public/n_choosebg3.png");
            this.addChild(d);
            var e = "#element/" + DataMgr.getElementDataByID(this.data.itemInfo[c].id).uiIcon + ".png"
              , e = new cc.Sprite(e);
            d.addChild(e);
            e.x = 78;
            e.y = 118;
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + this.data.itemInfo[c].num);
            d.addChild(e);
            e.x = 78;
            e.y = 38;
            d.setScale(b);
            a.push(d)
        }
        c = {};
        c.spArr = a;
        c.spWidth = 150 * b + 5;
        c.p = cc.p(360, 617);
        c.settingType = centerSetting;
        gameSpSettingFun(c)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        0 < this.data.itemInfo.length && this.playGetAction(this.data.itemInfo);
        this.removeFromParent()
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : 3 == a.length ? [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)] : 4 == a.length ? [cc.p(250, 800), cc.p(250, 600), cc.p(470, 600), cc.p(470, 800)] : [cc.p(250, 900), cc.p(250, 700), cc.p(470, 700), cc.p(470, 900), cc.p(360, 500)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    }
})
  , sendServerPaySuccess = function(a) {
    var b = {}
      , c = "0";
    null != gameSDK.sdkPlayInfo.id && (c = gameSDK.sdkPlayInfo.id);
    b.player_id = c;
    b.game_id = appID;
    b.sig = a.sig;
    a = JSON.stringify(b);
    b = cc.loader.getXMLHttpRequest();
    b.open("POST", "https://candy.9191youxi.com:9080/payment");
    b.setRequestHeader("Content-Type", "text/plain;charset=UTF-8")
};
var FaceBookIAD = cc.Class.extend({
    ADIDArr: "1496369423800038_1533391133431200 1496369423800038_1533391300097850 1496369423800038_1533391446764502 1496369423800038_1533391533431160 1496369423800038_1533391660097814 1496369423800038_1533391773431136 1496369423800038_1533392650097715 1496369423800038_1533392780097702 1496369423800038_1533392913431022 1496369423800038_1533393056764341".split(" "),
    preLoadArr: [],
    currentShowADID: 0,
    loadedAd: null,
    preLoadRunning: !1,
    retryCount: 0,
    stopRetry: !1,
    showTime: 0,
    hasRemoveAD: !1,
    preLoadAd: function(a) {
        if ("FaceBookTest" != sdkName && !(this.hasRemoveAD || 3E4 >= (new Date).getTime() - this.showTime))
            if (!a && (this.preLoadRunning || this.loadedAd || this.stopRetry))
                cc.log("预加载被阻止", this.preLoadRunning, this.loadedAd, this.stopRetry);
            else {
                this.preLoadRunning = !0;
                0 == this.preLoadArr.length && (this.preLoadArr = this.ADIDArr.slice(),
                this.preLoadArr.sort(function(a, b) {
                    return Math.random() - 0.5
                }));
                this.currentShowADID = this.preLoadArr.shift();
                cc.log("触发预加载", this.currentShowADID);
                var b = this, c;
                FBInstant.getInterstitialAdAsync(b.currentShowADID).then(function(a) {
                    console.log("ready pre load AD", b.currentShowADID);
                    c = a;
                    return c.loadAsync()
                }).then(function() {
                    console.log("Rewarded video preloaded");
                    b.loadedAd = c;
                    b.preLoadRunning = !1
                }).catch(function(a) {
                    console.log("Rewarded video failed to preload: " + a.message);
                    console.log("code", a.code);
                    "ADS_NO_FILL" == a.code && (cc.log("no fill:", b.currentShowADID.slice(-4)),
                    gameSDK.logEvent("AD_PRELOAD_FAIL", 1, {
                        preload_fail: b.currentShowADID.slice(-4)
                    }));
                    b.retryCount++;
                    2 <= b.retryCount ? (b.stopRetry = !0,
                    b.preLoadRunning = !1) : setTimeout(function() {
                        b.preLoadAd(!0)
                    }, 2E4)
                })
            }
    },
    showAd: function(a, b, c) {
        if (this.hasRemoveAD)
            a();
        else
            switch (sdkName) {
            case "FaceBookTest":
                null != a && a();
                break;
            case "FaceBook":
                var d = this;
                d.stopRetry = !1;
                d.loadedAd ? d.loadedAd.showAsync().then(function() {
                    d.showTime = (new Date).getTime();
                    cc.log("InterstitialAd广告显示成功");
                    null != a && a();
                    d.loadedAd = null
                }).catch(function(a) {
                    d.showTime = (new Date).getTime();
                    d.loadedAd = null;
                    cc.log("InterstitialAd广告显示失败");
                    cc.log(a.code, a.message);
                    gameSDK.logEvent("AD_SHOW_FAIL", 1, {
                        AD_SHOW_FAIL: d.currentShowADID.slice(-4)
                    });
                    null != b && b()
                }) : (cc.log("RewardedVideo广告未加载好"),
                null != c && c())
            }
    }
});
var FaceBookMSG = cc.Class.extend({
    botData: null,
    tryAgainTimes: 0,
    canGetMsgAward: function() {
        return (new Date).getDate() == gameUserData.getMsgAwardDate ? !1 : !0
    },
    canSubscribeBotAsync: function(a, b) {
        if (this.canGetMsgAward()) {
            var c = this;
            switch (sdkName) {
            case "FaceBookTest":
                cc.log("调用canSubscribeBotAsync。");
                null != a && a();
                break;
            case "FaceBook":
                cc.log("调用canSubscribeBotAsync。"),
                FBInstant.player.canSubscribeBotAsync().then(function(b) {
                    cc.log("调用canSubscribeBotAsync成功。");
                    cc.log(b);
                    !0 == b ? (myLogEventFun("new_meiyouxuanzedingyue"),
                    null != a && a()) : myLogEventFun("new_yijingxuanzedingyue")
                }).catch(function(b) {
                    cc.log("调用canSubscribeBotAsync失败。");
                    cc.log(b.message);
                    c.tryAgainTimes++;
                    isFirstEnterGame ? (myLogEventFun("new_aotuopen_toofast"),
                    4 > c.tryAgainTimes ? setTimeout(function() {
                        c.canSubscribeBotAsync(a)
                    }, 100) : myLogEventFun("new_try3fail")) : myLogEventFun("new_yijingxuanzedingyue")
                })
            }
        }
    },
    subscribeBotAsync: function(a, b) {
        switch (sdkName) {
        case "FaceBookTest":
            null != a && a();
            break;
        case "FaceBook":
            cc.log("调用subscribeBotAsync。"),
            FBInstant.player.subscribeBotAsync().then(function() {
                myLogEventFun("new_dingyuedakai");
                cc.log("订阅Bot。");
                null != a && a()
            }).catch(function(a) {
                myLogEventFun("new_dingyueguanbi");
                cc.log("取消订阅Bot。");
                null != b && b()
            })
        }
    },
    sendMessengerRobot: function(a) {
        switch (sdkName) {
        case "FaceBookTest":
            null != a && a();
            break;
        case "FaceBook":
            cc.log("send msg to Bot"),
            FBInstant.setSessionData(this.getBotData())
        }
    },
    getBotData: function() {
        null == this.botData && (this.botData = {});
        return this.botData
    }
})
  , myLogEventFun = function(a) {
    var b = {};
    b[a] = a;
    gameSDK.logEvent(a, 1, b)
};
var isGetSelfInfoSend = !0
  , isSendTimeOut = !1
  , isCreatePlayerSend = !1
  , gameLoginSelf = "gameLoginSelf";
HttpID = {
    uploadSelfInfo: "?opcode=10001",
    getSelfInfo: "?opcode=10002",
    getPowerTime: "?opcode=10003",
    getFriendsInfo: "?opcode=10004",
    dianZan: "?opcode=10005",
    getRewardBox: "?opcode=10006",
    updateTargetPersonInfo: "?opcode=10007",
    rankList: "?opcode=10008",
    refreshHonorBox: "?opcode=10009",
    refreshInviteID: "?opcode=10010",
    refreshHonorInviteType: "?opcode=10011",
    refreshHonorRewardIndex: "?opcode=10012",
    getSaveSelfInfo: "?opcode=110002",
    updateFreeOrPayCountInfo: "?opcode=20001",
    updateTotalHurtInfo: "?opcode=20002",
    updateWeekGameGiftStateInfo: "?opcode=20003",
    weekganeRankInfo: "?opcode=20004",
    updateWeekGiftKey: "?opcode=20005",
    updateShareAndInviteNumKey: "?opcode=20006"
};
function translateObToStr(a) {
    return ""
}
HttpFun = {
    GetRequest: function() {
        var a = location.search
          , b = {};
        if (-1 != a.indexOf("?"))
            for (var a = a.substr(1).split("&"), c = 0; c < a.length; c++)
                b[a[c].split("=")[0]] = decodeURI(a[c].split("=")[1]);
        return b
    },
    getSelfInfo: function(a, b) {},
    getSaveSelfInfo: function(a) {},
    dianZanInfo: function(a) {},
    getRankInfo: function(a) {},
    getPlayInfo: function(a) {},
    upTargetPeopleHttp: function(a) {},
    rewardTargetBoxHttp: function() {},
    getPowerTimer: function() {},
    uploadSelfInfo: function() {},
    updateFreeOrPayCount: function(a) {},
    updateTotalHurt: function(a) {},
    updateWeekGameHurtGiftState: function(a) {},
    weekGameFriendRankInfo: function(a) {},
    updateWeekGift: function(a) {},
    updateShareAndInviteNum: function(a) {},
    refreshHonorBoxHttp: function() {},
    refreshInviteIDHttp: function() {},
    refreshHonorInviteTypeHttp: function() {},
    refreshHonorRewardIndexHttp: function() {}
};
function sendHttp(a, b, c) {
    printLog(c.htttpType + " send:" + b);
    (new Date).getTime();
    var d = cc.loader.getXMLHttpRequest();
    d.open("POST", a);
    d.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
    d.htttpType = c.htttpType;
    d.onreadystatechange = function() {
        if (4 == d.readyState && 200 <= d.status && 207 >= d.status) {
            printLog(d.htttpType);
            printLog(d.responseText);
            var a = d.responseText;
            cc.log("协议号：" + d.htttpType + "内容：" + d.responseText);
            switch (d.htttpType) {
            case HttpID.getSelfInfo:
                parseSelfJson(a);
                removeGameMaskLayer("getSelfInfo");
                break;
            case HttpID.rankList:
                parseRankJson(a);
                break;
            case HttpID.getFriendsInfo:
                gameSDK.logEvent("getFriendsInfo", 1, {
                    getFriendsInfo: "getFriendsInfo"
                });
                sendBugLog.bugInfoHttp("好友信息完成getFriendsInfo-------");
                parsePlayerJson(a);
                break;
            case HttpID.getPowerTime:
                serverTimer = parseInt(JSON.parse(a).time);
                Global.severTime = serverTimer;
                Global.curGameRunTime = engineGameRunTime();
                break;
            case HttpID.getSaveSelfInfo:
                parseSaveSelfJson(a);
                removeGameMaskLayer("getSelfInfo");
                break;
            case HttpID.weekganeRankInfo:
                Global.isGetWeekRank = !0,
                parseWeekRankJson(a),
                EventMgr.emit(EVENTMGR_ID.OPEN_WEEKGAME)
            }
        }
    }
    ;
    d.send(b)
}
;for (var gameSaveDataKey = "bearboom20180530", petMaxLevel = 60, gameWidth = 720, gameHigh = 1280, gameLayout = cc.ResolutionPolicy.SHOW_ALL, gameSeep = 1, language = "en", langueArr = ["en", "es"], languageIndex = 0, loadResCount = 100, connectedTxt = "Poor Network!", n = 0; n < langueArr.length; n++)
    language == langueArr[n] && (languageIndex = n);
var playEffectMinTime = 300
  , animationPath = "res/data/animation.json"
  , defaultTxt = "Microsoft YaHei"
  , defaultBottonSound = "res/music/button.mp3"
  , escapeTxt = {
    "/": "gang",
    x: "x",
    ".": "dian",
    "+": "jia",
    k: "k",
    m: "m",
    "`": "signal",
    b: "b",
    ",": "dou",
    ":": "mao",
    a: "a",
    g: "g",
    i: "i",
    k: "k",
    n: "n",
    r: "r",
    s: "s",
    L: "lv",
    t: "t"
}
  , mappingSDK = {};
var GameCustomImage = cc.Class.extend({
    width: null,
    height: null,
    pngData: null,
    fontData: null,
    drawFun: null,
    drawCompleteFun: null,
    initialize: function(a) {
        this.pngData = null != a.pngData ? a.pngData : [];
        this.fontData = null != a.fontData ? a.fontData : [];
        this.width = a.width;
        this.height = a.height;
        this.getBase64Image(a)
    },
    getBase64Image: function(a) {
        var b = this;
        for (a = 0; a < this.pngData.length; a++) {
            var c = this.pngData[a]
              , d = new Image;
            c.playImage = d;
            d.crossOrigin = "anonymous";
            d.imgHeight = c.imgHeight;
            d.imgWidth = c.imgWidth;
            d.src = c.url;
            d.isLoad = !1;
            d.onload = function() {
                this.width = this.imgWidth;
                this.height = this.imgHeight;
                this.isLoad = !0;
                b.drawImage()
            }
        }
    },
    drawImage: function() {
        for (var a = 0; a < this.pngData.length; a++) {
            var b = this.pngData[a];
            if (!1 == b.playImage.isLoad)
                return
        }
        if (null != this.drawFun)
            this.drawFun();
        else {
            a = document.createElement("canvas");
            a.width = this.width;
            a.height = this.height;
            for (var c = 0; c < this.pngData.length; c++) {
                var b = this.pngData[c]
                  , d = a.getContext("2d");
                d.drawImage(b.playImage, b.posX, b.posY, b.playImage.width, b.playImage.height)
            }
            for (b = 0; b < this.fontData.length; b++)
                c = this.fontData[b],
                d.font = c.font,
                d.lineWidth = c.lineWidth,
                d.fillStyle = c.fillStyle,
                d.textAlign = c.textAlign,
                d.strokeStyle = c.strokeStyle,
                d.strokeText(c.des.toString(), c.posX, c.posY),
                d.fillText(c.des.toString(), c.posX, c.posY);
            d = a.toDataURL("image/png");
            null != this.drawCompleteFun && this.drawCompleteFun(d)
        }
    }
});
var artWordNo = 0
  , artWordMiddle = 1
  , artWordLeft = 2
  , artWordRight = 3
  , GameArtWord = cc.Sprite.extend({
    text: null,
    txtWidth: null,
    txtHeight: null,
    fontName: null,
    alignmentType: null,
    contentSprite: null,
    stringSize: null,
    ctor: function(a, b, c) {
        this.alignmentType = artWordNo;
        this.txtWidth = b;
        this.txtHight = c;
        this.stringSize = cc.size(0, 0);
        this.fontName = a;
        this._super();
        this.scheduleUpdate()
    },
    update: function() {},
    getString: function() {
        return this.text
    },
    setString: function(a) {
        if (a != this.text) {
            null == this.contentSprite ? (this.contentSprite = new cc.Sprite,
            this.addChild(this.contentSprite)) : this.contentSprite.removeAllChildren();
            this.text = a;
            this.stringSize = cc.size(0, 0);
            for (var b = 0, c = 0; c < a.length; c++) {
                var d = a[c];
                null != escapeTxt[d] && (d = escapeTxt[d]);
                d = new cc.Sprite("#fnt/" + this.fontName + "_" + d + ".png");
                d.setAnchorPoint(0, 0.5);
                d.x = b;
                if (null != this.txtWidth)
                    b += this.txtWidth;
                else {
                    var e = d.getContentSize();
                    this.stringSize.width += e.width;
                    b += e.width
                }
                this.contentSprite.addChild(d)
            }
            switch (this.alignmentType) {
            case artWordMiddle:
                this.contentSprite.x = -b / 2;
                break;
            case artWordLeft:
                this.contentSprite.x = 0;
                break;
            case artWordRight:
                this.contentSprite.x = b
            }
        }
    }
})
  , creatGameArtWord = function(a, b, c) {
    var d = new GameArtWord;
    d.txtWidth = a;
    d.txtHeight = b;
    d.fontName = c;
    return d
};
var createMaskLayer = function(a, b) {
    var c = new cc.Layer;
    if (null != b)
        c.addChild(b);
    else {
        var d = new cc.DrawNode;
        d.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
        c.addChild(d)
    }
    c.setScale(10);
    a.maskLayer = c;
    a.addChild(c, -1);
    engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
    return c
}
  , createMaskRectLayer = function(a, b, c) {
    null == c && (c = []);
    for (var d = new cc.Layer, e = 0; e < b.length; e++) {
        var f = b[e]
          , g = new cc.DrawNode;
        g.drawRect(cc.p(0, 0), cc.p(f.width, f.height), cc.color(0, 0, 0, 90), 0, cc.color(0, 0, 0, 0));
        var h = new cc.Sprite;
        h.addChild(g);
        h.x = f.x;
        h.y = f.y;
        d.addChild(h)
    }
    for (e = 0; e < c.length; e++)
        f = c[e],
        g = new cc.DrawNode,
        g.drawRect(cc.p(0, 0), cc.p(f.width, f.height), cc.color(0, 0, 0, 1), 0, cc.color(0, 0, 0, 0)),
        h = new cc.Sprite,
        h.addChild(g),
        h.x = f.x,
        h.y = f.y,
        d.addChild(h);
    d.checkClick = function(a, c) {
        for (var d = c.getCurrentTarget().convertToNodeSpace(a.getLocation()), e = 0; e < b.length; e++)
            if (cc.rectContainsPoint(b[e], d))
                return !0;
        return !1
    }
    ;
    engine.gameEvent.createMouseDown(d, function() {}, null);
    a.maskLayer = d;
    a.addChild(d, -1);
    return a
}
  , createPageLayer = function(a) {
    var b = new GamePageLayer;
    b.addChild(a.ui);
    b.initialize(a);
    return b
}
  , landscapePage = 1
  , portaitPage = 2
  , GamePageLayer = cc.Layer.extend({
    mouseDownPoint: null,
    isMove: null,
    pageIndex: null,
    pageWidth: null,
    pageHeight: null,
    pageMax: null,
    turnPageState: null,
    pageIconList: null,
    pageList: null,
    pageItemCount: null,
    isPlayPageEffect: null,
    pageEffectFun: null,
    setPageInfo: null,
    moveToPoint: null,
    isCanMovePage: null,
    ctor: function() {
        this.isMove = !1;
        this.pageIndex = 0;
        this.isPlayPageEffect = !1;
        this.isCanMovePage = !0;
        this._super()
    },
    initialize: function(a) {
        this.pageMax = a.pageMax;
        this.pageWidth = a.pageWidth;
        this.turnPageState = null == a.turnPageState ? landscapePage : a.turnPageState;
        null != a.isCanMovePage && (this.isCanMovePage = a.isCanMovePage);
        this.pageIconList = null != a.pageIconList ? a.pageIconList : [];
        this.pageList = null != a.pageList ? a.pageList : [];
        this.pageList = a.pageList;
        this.pageComplete = a.pageComplete;
        this.pageItemCount = a.pageItemCount;
        this.pageEffectFun = a.pageEffectFun;
        this.setPageInfo = a.setPageInfo;
        this.isUpCheck = !1;
        engine.gameEvent.createMouseDown(this, this.mouseDown, null, a.clickRect);
        engine.gameEvent.createMouseMove(this, this.mouseMove, null, a.clickRect);
        engine.gameEvent.createMouseUp(this, this.mouseUp, null, a.clickRect);
        this.setPageIndexNoEffect(0);
        this.setPageIcons()
    },
    hiddenNoCheckedPage: function() {
        for (var a = 0; a < this.pageList.length; a++)
            a >= this.pageIndex * this.pageItemCount && a < (this.pageIndex + 1) * this.pageItemCount ? this.pageList[a].setVisible(!0) : this.pageList[a].setVisible(!1)
    },
    mouseUp: function(a, b) {
        if (!1 != this.isCanMovePage)
            switch (this.mouseDownPoint = null,
            this.turnPageState) {
            case landscapePage:
                var c = Math.ceil((-this.x - this.pageWidth / 2) / this.pageWidth);
                0 > c && (c = 0);
                c >= this.pageMax && (c = this.pageMax - 1);
                this.setPageIndex(c);
                break;
            case portaitPage:
                this.y += pos.y - this.mouseDownPoint.y
            }
    },
    mouseDown: function(a, b) {
        this.isMove = !1;
        var c = b.getCurrentTarget();
        c.getClickRect();
        this.mouseDownPoint = c.convertToNodeSpace(a.getLocation())
    },
    mouseMove: function(a, b) {
        if (!1 != this.isCanMovePage) {
            var c = b.getCurrentTarget();
            c.getClickRect();
            c = c.convertToNodeSpace(a.getLocation());
            if (null != this.mouseDownPoint)
                switch (3 <= cc.pDistance(this.mouseDownPoint, c) && (this.isMove = !0),
                this.stopAllActions(),
                this.turnPageState) {
                case landscapePage:
                    this.x += c.x - this.mouseDownPoint.x;
                    break;
                case portaitPage:
                    this.y += c.y - this.mouseDownPoint.y
                }
        }
    },
    nextPage: function() {
        this.pageIndex + 1 < this.pageMax && (this.pageIndex++,
        this.setPageIndex(this.pageIndex))
    },
    lastPage: function() {
        0 <= this.pageIndex - 1 && (this.pageIndex--,
        this.setPageIndex(this.pageIndex))
    },
    setPageIndexNoEffect: function(a) {
        this.stopAllActions();
        this.pageIndex = a;
        this.x = -this.pageIndex * this.pageWidth;
        this.setPageIcons()
    },
    setPageIndex: function(a) {
        switch (this.turnPageState) {
        case 1:
            this.stopAllActions();
            this.pageIndex = a;
            a = cc.moveTo(0.5, cc.p(-1 * this.pageIndex * this.pageWidth, this.y));
            this.runAction(a);
            this.setPageIcons();
            null != this.setPageInfo && this.setPageInfo(this.pageIndex);
            break;
        case 2:
            this.stopAllActions(),
            this.pageIndex = a,
            a = cc.moveTo(0.5, cc.p(-1 * this.pageIndex * this.pageHeight, this.y)),
            this.runAction(a),
            this.setPageIcons(),
            null != this.setPageInfo && this.setPageInfo(this.pageIndex)
        }
    },
    setPageIcons: function() {
        if (!(0 >= this.pageIconList.length)) {
            for (var a = 0; a < this.pageIconList.length; a++)
                this.pageIconList[a].setVisible(!1);
            this.pageIconList[this.pageIndex].setVisible(!0)
        }
    }
})
  , GameLayer = cc.Class.extend({
    isInit: null,
    createMaskLayer: null,
    createPageLayer: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0,
        this.createMaskLayer = createMaskLayer,
        this.createPageLayer = createPageLayer)
    }
});
var GameSound = cc.Class.extend({
    isInit: null,
    soundVolume: null,
    stopSound: null,
    stopBackground: null,
    stopEffect: null,
    playMusicUrl: null,
    lastTimeDic: null,
    ctor: function() {
        this.isInit = !1;
        this.soundVolume = 100;
        this.stopEffect = this.stopBackground = this.stopSound = !1;
        this.playMusicUrl = "";
        this.lastTimeDic = {}
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    stopBackgroundMusic: function() {
        this.stopBackground = !0;
        cc.audioEngine.setMusicVolume(0);
        gameUserData.musicVolume = 0;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    openBackgroundMusic: function() {
        this.stopBackground = !1;
        cc.audioEngine.setMusicVolume(this.soundVolume);
        gameUserData.musicVolume = 1;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    stopEffectMusic: function() {
        this.stopEffect = !0;
        cc.audioEngine.setEffectsVolume(0);
        gameUserData.effectsVolume = 0;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    openEffectMusic: function() {
        this.stopEffect = !1;
        cc.audioEngine.setEffectsVolume(this.soundVolume);
        gameUserData.effectsVolume = 1;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    stopMusic: function() {
        this.stopSound = !0;
        this.stopBackgroundMusic();
        this.stopEffectMusic()
    },
    openMusic: function() {
        this.stopSound = !1;
        this.openBackgroundMusic();
        this.openEffectMusic()
    },
    changeBackgroundMusicState: function() {
        !0 == this.stopBackground ? this.openBackgroundMusic() : this.stopBackgroundMusic()
    },
    changeEffectMusicState: function() {
        !0 == this.stopEffect ? this.openEffectMusic() : this.stopEffectMusic()
    },
    changeMusicState: function() {
        !0 == this.stopSound ? this.openMusic() : this.stopMusic()
    },
    setSoundVolume: function(a) {
        this.soundVolume = a;
        !1 == this.stopSound && (cc.audioEngine.setMusicVolume(a),
        cc.audioEngine.setEffectsVolume(this.soundVolume))
    },
    playEffect: function(a) {
        var b = engineGameRunTime();
        null != this.lastTimeDic[a] && b - playEffectMinTime <= this.lastTimeDic[a] || (this.lastTimeDic[a] = b,
        (new LoadSound).loadEffectSound(a),
        null != cc.loader.cache[a] && cc.audioEngine.playEffect(a))
    },
    playMusic: function(a, b) {
        null == b && (b = !0);
        this.playMusicUrl = a;
        var c = this
          , d = new LoadSound;
        d.playSound = function(a) {
            a == c.playMusicUrl && cc.audioEngine.playMusic(a, b)
        }
        ;
        d.loadBackgroundSound(a)
    }
});
var cocosUIAction = {}
  , GameCocosStudio = cc.Class.extend({
    isInit: null,
    loadCSS: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0,
        this.loadCSS = loadCSS)
    },
    setChangeString: function(a) {
        a.txtValue = "";
        a.setString = function(b) {
            a.txtValue != b && (a.txtValue = b,
            a.setString(b))
        }
    }
})
  , createMouseMove = function(a, b, c, d) {
    a.mouseDownTypeList = c;
    null != a.addTouchEventListener ? createCCSTouchEventListener(a) : createTouchEventListener(a, d);
    a.mouseMovefun = b;
    a.mouseMove = function(b, c) {
        null != a.mouseMovefun && a.mouseMovefun(b, c)
    }
}
  , createMouseDown = function(a, b, c, d) {
    a.mouseDownTypeList = c;
    null != a.addTouchEventListener ? createCCSTouchEventListener(a) : createTouchEventListener(a, d);
    a.mouseDownfun = b;
    a.mouseDown = function(b, c) {
        null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && a.setScale(0.9);
        null != a.mouseDownfun && a.mouseDownfun(b, c)
    }
    ;
    null == a.mouseUp && (a.mouseUp = function(b, c) {
        null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && a.setScale(1)
    }
    )
}
  , createMouseUp = function(a, b, c, d) {
    null != c && (a.mouseDownTypeList = c);
    null != a.addTouchEventListener ? createCCSTouchEventListener(a) : createTouchEventListener(a, d);
    a.mouseUpfun = b;
    a.mouseUp = function(b, c) {
        null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && a.setScale(1);
        if (!1 != a.isUpCheck && null != a.checkClick && !1 == a.checkClick(b, c))
            return !1;
        null != a.mouseUpfun && a.mouseUpfun(b, c)
    }
    ;
    null == a.mouseDown && (a.mouseDown = function(b, c) {
        null != a.mouseDownTypeList && 0 <= a.mouseDownTypeList.indexOf(buttonScalingType) && a.setScale(0.9)
    }
    )
}
  , createTouchEventListener = function(a, b) {
    if (null == a.checkClick) {
        if (null != b)
            a.getClickRect = function() {
                return b
            }
            ;
        else if (a.constructor == cc.Node) {
            var c = null
              , c = findClickSize(a, c);
            a.getClickRect = null != c ? function() {
                return cc.rect(1 * -c.width / 2, 1 * -c.height / 2, c.width, c.height)
            }
            : function() {
                var b = a.getContentSize();
                return cc.rect(cc.rect(0, 0, b.width, b.height))
            }
        } else
            a.getClickRect = function() {
                var b = a.getContentSize();
                return cc.rect(cc.rect(0, 0, b.width, b.height))
            }
            ;
        a.checkClick = function(a, b) {
            var c = b.getCurrentTarget()
              , d = c.getClickRect()
              , c = c.convertToNodeSpace(a.getLocation());
            return cc.rectContainsPoint(d, c) ? !0 : !1
        }
    }
    a.eventMouseDown = function(b, c) {
        if (!1 == a.checkClick(b, c) || !a.isVisible() || !a.getParent().isVisible())
            return !1;
        null != a.mouseDown && a.mouseDown(b, c);
        return !0
    }
    ;
    a.eventMouseMove = function(b, c) {
        null != a.mouseMove && a.isVisible() && a.getParent().isVisible() && a.mouseMove(b, c)
    }
    ;
    a.eventMouseUp = function(b, c) {
        null != a.mouseUp && a.isVisible() && a.getParent().isVisible() && a.mouseUp(b, c)
    }
    ;
    var d = !0;
    null != a.isSwallowTouches && (d = a.isSwallowTouches);
    a.uiListener = cc.eventManager.addListener({
        event: cc.EventListener.TOUCH_ONE_BY_ONE,
        swallowTouches: d,
        onTouchBegan: a.eventMouseDown,
        onTouchMoved: a.eventMouseMove,
        onTouchEnded: a.eventMouseUp,
        onTouchCancelled: null
    }, a);
    a.uiRemoveListener = function() {
        null != a.uiListener && cc.eventManager.removeListener(a.uiListener)
    }
}
  , createCCSTouchEventListener = function(a) {
    null == a.touchEvent && (a.touchEvent = function(b, c) {
        switch (c) {
        case ccui.Widget.TOUCH_BEGAN:
            null != a.mouseDown && a.mouseDown();
            break;
        case ccui.Widget.TOUCH_MOVED:
            null != a.mouseMove && a.mouseMove();
            break;
        case ccui.Widget.TOUCH_ENDED:
            null != a.mouseUp && a.mouseUp()
        }
    }
    ,
    a.addTouchEventListener(a.touchEvent, a),
    a.uiRemoveListener = function() {
        cc.eventManager.removeListeners(a)
    }
    )
}
  , findClickSize = function(a, b) {
    var c = a.getContentSize();
    if (0 != c.width && 0 != c.height)
        b = c;
    else
        for (var c = a.getChildren(), d = 0; d < c.length; d++)
            b = findClickSize(c[d], b);
    return b
}
  , setCCSSprite = function(a, b) {
    var c = a.getName()
      , d = cocosUIAction[b[c]].clone();
    a.runAction(d);
    a.gotoStop = function(a) {
        d.gotoFrameAndPlay(a, a, !1)
    }
}
  , setCCSSpriteText = function(a, b) {
    var c = a.getName()
      , d = cocosUIAction[b[c]].clone();
    a.runAction(d);
    a.gotoStop = function(a) {
        d.gotoFrameAndPlay(a, a, !1)
    }
    ;
    a.gotoStop(languageIndex)
}
  , setCCSSpriteArtWord = function(a) {
    var b = a.getName().split("_")
      , b = creatGameArtWord(b[1]);
    switch (a.getTextHorizontalAlignment()) {
    case cc.TEXT_ALIGNMENT_CENTER:
        b.alignmentType = artWordMiddle;
        break;
    case cc.TEXT_ALIGNMENT_LEFT:
        b.alignmentType = artWordLeft;
        break;
    case cc.TEXT_ALIGNMENT_RIGHT:
        b.alignmentType = artWordRight
    }
    b.x = a.x;
    b.y = a.y;
    null != a.parent && (a.parent.addChild(b),
    a.removeFromParent());
    return b
}
  , setCCSTxtLanguage = function(a) {
    var b = a.getName().split("_");
    0 < b.length ? a.setString(engine.gameData.getLanguageByKey(b[1])) : printLog("你所配置的文本没有指定多语言配置文件所需要的键值!!!")
}
  , setCCSAllUI = function(a) {
    var b = a.getChildren()
      , c = b.length
      , d = a.getName();
    if (0 <= d.indexOf("txt_")) {
        var e = d.split("_");
        setCCSTxtLanguage(a, e[1])
    }
    0 <= d.indexOf("sp_") && setCCSSprite(a);
    0 <= d.indexOf("spt_") && setCCSSpriteText(a);
    0 <= d.indexOf("_sound") && setCCSSound(a);
    0 <= d.indexOf("_df") && a.setFontName(defaultTxt);
    0 <= d.indexOf("aw_") && (a = setCCSSpriteArtWord(a));
    null != a.parent && (null == a.parent[d] ? a.parent[d] = a : printLog("你在UI里面起的名字是关键字或重复！请检查CCS"));
    for (a = c - 1; 0 <= a; a--)
        setCCSAllUI(b[a])
}
  , loadCSS = function(a) {
    a = ccs.load(a).node;
    setCCSAllUI(a);
    return a
}
  , createClippingNode = function(a, b, c, d, e, f, g) {
    var h = new cc.ClippingNode;
    h.anchorX = a;
    h.anchorY = b;
    h.x = c;
    h.y = d;
    h.alphaThreshold = e;
    h.inverted = f;
    h.stencil = g;
    return h
};
var buttonScalingType = "1";
function setCCSSound(a, b) {
    a.setUIState = function() {
        engine.gameSound.stopSound ? (a.closesound.setVisible(!0),
        a.opensound.setVisible(!1)) : (a.closesound.setVisible(!1),
        a.opensound.setVisible(!0))
    }
    ;
    engine.gameEvent.createMouseDown(a, function(b, d) {
        engine.gameSound.changeMusicState();
        a.setUIState()
    }, buttonScalingType, b)
}
var createSoundByPNGURL = function(a, b, c) {
    var d = new cc.Sprite;
    d.setSpriteFrame(a);
    a = new cc.Sprite;
    a.setSpriteFrame(b);
    return createSoundByPNG(d, a, c)
}
  , createSoundByPNG = function(a, b, c) {
    var d = new cc.Sprite;
    d.addChild(a);
    d.addChild(b);
    d.closesound = a;
    d.opensound = b;
    setCCSSound(d, c);
    return d
};
var dataPathDic = {}
  , GameData = cc.Class.extend({
    isInit: null,
    dataDic: null,
    isCreateJsonData: null,
    languageDic: null,
    animationDic: null,
    ctor: function() {
        this.isCreateJsonData = this.isInit = !1;
        this.dataDic = {}
    },
    addDataDic: function(a, b) {
        this.dataDic[a] = b
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    createJsonData: function() {
        if (!this.isCreateJsonData) {
            this.isCreateJsonData = !0;
            for (var a in dataPathDic)
                this.dataDic[a] = this.analysisJsonData(cc.loader.getRes(dataPathDic[a]), a)
        }
    },
    getLanguageByKey: function(a) {
        if (null != this.languageDic[a])
            return this.languageDic[a].content;
        printLog("配置的多语言" + a + "缺少对应的键值");
        return ""
    },
    analysisJsonData: function(a, b) {
        if (null == a)
            printLog("配置的" + b + "JSON文件缺失");
        else {
            for (var c = {}, d = 1; d < a.length; d++) {
                for (var e = {}, f = 0; f < a[d].length; f++)
                    e[a[0][f]] = "null" != a[d][f] ? a[d][f] : "";
                c[a[d][0]] = e
            }
            return c
        }
    }
})
  , GameDataDic = cc.Class.extend({
    dataDic: null,
    num: null,
    ctor: function() {
        this.dataDic = {};
        this.num = 0
    },
    addData: function(a, b) {
        this.dataDic[a] = b;
        this.num++
    },
    deleteData: function(a) {
        this.dataDic[a] = null;
        delete this.dataDic[a];
        this.num--
    },
    getDataByKey: function(a) {
        return this.dataDic[a]
    },
    getDataNum: function() {
        return this.num
    }
});
var gameUserData, readGameUserData = function() {
    var a;
    try {
        a = cc.sys.localStorage.getItem(gameSaveDataKey),
        a = JSON.parse(a)
    } catch (b) {}
    return a
}, getCurrencyTime = function() {
    return (new Date).getTime()
}, getCurrencyTimeSecond = function() {
    var a = (new Date).getTime();
    return parseInt(0.001 * a)
}, saveUserData = function() {
    try {
        cc.sys.localStorage.setItem(gameSaveDataKey, JSON.stringify(gameUserData))
    } catch (a) {}
};
var GameAnimation = cc.Sprite.extend({
    frameIndex: null,
    frameMaxIndex: null,
    lastFrameTime: null,
    frameIntervalTime: null,
    isInit: null,
    playCount: null,
    curPlayCount: null,
    isStop: null,
    isRemoveFromComplete: null,
    frameFun: null,
    frameCompleteFun: null,
    playFrameIndex: null,
    fromFrameIndex: null,
    isPool: !1,
    animationSprite: null,
    imgeData: null,
    onEnter: function() {
        this._super()
    },
    onExit: function() {
        this.removeAllChildren();
        this.setBitmapInfo = this.url = this.imgeSkeletalData = this.imgeData = this.animationSprite = this.isPool = this.fromFrameIndex = this.playFrameIndex = this.frameCompleteFun = this.frameFun = this.isRemoveFromComplete = this.isStop = this.curPlayCount = this.playCount = this.isInit = this.frameIntervalTime = this.lastFrameTime = this.frameMaxIndex = this.frameIndex = null;
        this._super()
    },
    ctor: function(a, b, c) {
        this._super();
        this.animationSprite = new cc.Sprite;
        this.addChild(this.animationSprite);
        this.resetAttribute()
    },
    resetAttribute: function() {
        this.isPool = !1;
        this.frameIntervalTime = this.lastFrameTime = this.frameMaxIndex = this.frameIndex = 0;
        this.isInit = !1;
        this.playCount = -1;
        this.curPlayCount = 0;
        this.isRemoveFromComplete = this.isStop = !1;
        this.frameCompleteFun = this.frameFun = null
    },
    reuse: function() {
        this.resetAttribute()
    },
    initialize: function(a) {
        !0 != this.isInit && (this.setInfo(a),
        this.scheduleUpdate())
    },
    update: function(a) {
        this.playFrame()
    },
    playFrame: function() {
        if (!0 != this.isStop && engineGameRunTime() - this.lastFrameTime > this.frameIntervalTime) {
            if (this.frameIndex > this.playFrameIndex)
                if (this.curPlayCount++,
                -1 == this.playCount)
                    this.frameIndex = this.fromFrameIndex;
                else if (this.curPlayCount < this.playCount)
                    this.frameIndex = this.fromFrameIndex;
                else {
                    this.gotoAndStop(this.playFrameIndex);
                    null != this.frameCompleteFun && this.frameCompleteFun();
                    !0 == this.isRemoveFromComplete && this.dispose();
                    return
                }
            this.lastFrameTime = engineGameRunTime();
            this.setBitmapInfo(this.frameIndex);
            null != this.frameFun && this.frameFun(this.frameIndex);
            this.frameIndex++
        }
    },
    dispose: function() {
        this.isPool && engine.gamePool.putInPool(this);
        this.removeFromParent()
    },
    setFrameIntervalTime: function(a) {
        this.frameIntervalTime = parseInt(1E3 / a)
    },
    gotoAndPlay: function(a) {
        this.isStop = !1;
        this.lastFrameTime = 0;
        this.frameIndex = a;
        this.setBitmapInfo(this.frameIndex)
    },
    fromFrameIndexToPlayFrameIndex: function(a, b) {
        this.isStop = !1;
        this.frameIndex = this.fromFrameIndex = a;
        this.lastFrameTime = 0;
        this.setBitmapInfo(this.frameIndex);
        this.playFrameIndex = b
    },
    gotoAndStop: function(a) {
        this.isStop = !0;
        this.lastFrameTime = 0;
        this.frameIndex = a;
        this.setBitmapInfo(this.frameIndex)
    },
    setIsStop: function(a) {
        this.isStop = a
    },
    resetInfo: function(a) {
        this.setInfo(a)
    },
    setInfo: function(a) {
        this.fromFrameIndex = this.lastFrameTime = this.frameIndex = this.curPlayCount = 0;
        this.frameMaxIndex = a.frameMaxIndex;
        this.playFrameIndex = this.frameMaxIndex - 1;
        this.imgeData = a.framesBitmapList;
        null != a.isRemoveFromComplete && (this.isRemoveFromComplete = a.isRemoveFromComplete);
        null != a.playCount && (this.playCount = a.playCount);
        this.gotoAndPlay(this.frameIndex)
    },
    setBitmapInfo: function(a) {
        a = this.imgeData[a];
        this.animationSprite.setSpriteFrame(a.url + ".png");
        this.animationSprite.x = a.x;
        this.animationSprite.y = a.y
    }
})
  , customAnimation = function(a, b) {
    var c = {};
    switch (b.copyType) {
    case "frame":
        var d = b.gameAnimationFrameConfig.split("|");
        switch (a.type) {
        case "mc":
            c.frameMaxIndex = d.length;
            c.framesBitmapList = a.framesBitmapList;
            c.framesBitmapInfo = {};
            c.type = a.type;
            var e = a.framesBitmapInfo, f;
            for (f in e) {
                c.framesBitmapInfo[f] = [];
                for (var e = a.framesBitmapInfo[f], g = 0; g < d.length; g++) {
                    var h = parseInt(d[g]) - 1;
                    c.framesBitmapInfo[f].push(e[h])
                }
            }
            break;
        case "im":
            for (c.frameMaxIndex = d.length,
            c.type = a.type,
            c.framesBitmapList = [],
            g = 0; g < d.length; g++)
                c.framesBitmapList.push(a.framesBitmapList[d[parseInt(g)]])
        }
    }
    return c
}
  , createGameAnimation = function(a, b, c, d) {
    var e = skeletalAnimation[a + "|" + b];
    null == e && (cc.log("数据为空:" + a + "|" + b),
    multipleAnimation(a, a),
    e = skeletalAnimation[a + "|" + b]);
    null != d && (b = customSkeletalAnimation[a + "|" + b + "|" + d.gameAnimationConfig],
    null == b && (b = customAnimation(e, d)),
    e = b);
    switch (e.type) {
    case "mc":
        return d = new GameSkeletalAnimation,
        e.jsonName = a,
        d.initialize(e),
        d.setFrameIntervalTime(c),
        d;
    case "im":
        return a = new GameAnimation,
        a.initialize(e),
        a.setFrameIntervalTime(c),
        a
    }
};
var skeletalAnimation = {}
  , customSkeletalAnimation = {}
  , multipleAnimationDic = {}
  , GameSkeletalAnimation = cc.Sprite.extend({
    frameIndex: null,
    lastFrameTime: null,
    frameIntervalTime: null,
    isInit: null,
    framesData: null,
    framesBitmapUrlList: null,
    playCount: null,
    isRemoveFromComplete: null,
    curPlayCount: null,
    frameMaxIndex: null,
    playFrameIndex: null,
    fromFrameIndex: null,
    isStop: null,
    frameCompleteFun: null,
    isPool: !1,
    frameFun: null,
    jsonName: null,
    onEnter: function() {
        this._super();
        this.scheduleUpdate()
    },
    ctor: function(a, b, c) {
        this._super();
        this.lastFrameTime = this.frameIndex = 0;
        this.playCount = -1;
        this.frameMaxIndex = this.curPlayCount = 0;
        this.playFrameIndex = 1;
        this.frameBitmapList = [];
        this.isPool = this.isRemoveFromComplete = this.isStop = this.isInit = !1
    },
    initialize: function(a) {
        !0 != this.isInit && this.setInfo(a)
    },
    update: function(a) {
        if (!0 != this.isStop && engineGameRunTime() - this.lastFrameTime > this.frameIntervalTime) {
            this.lastFrameTime = engineGameRunTime();
            if (this.frameIndex > this.playFrameIndex)
                if (this.curPlayCount++,
                -1 == this.playCount)
                    this.frameIndex = this.fromFrameIndex;
                else if (this.curPlayCount < this.playCount)
                    this.frameIndex = this.fromFrameIndex;
                else {
                    this.gotoAndStop(this.playFrameIndex);
                    null != this.frameCompleteFun && this.frameCompleteFun();
                    !0 == this.isRemoveFromComplete && this.removeFromParent();
                    return
                }
            for (a = 0; a < this.frameBitmapList.length; a++)
                this.frameBitmapList[a].setBitmapInfo(this.frameIndex),
                255 != this.opacity && (this.frameBitmapList[a].opacity = this.opacity);
            null != this.frameFun && this.frameFun(this.frameIndex);
            this.frameIndex++
        }
    },
    onExit: function() {
        for (this.jsonName = this.frameFun = this.isPool = this.frameCompleteFun = this.isStop = this.fromFrameIndex = this.playFrameIndex = this.frameMaxIndex = this.curPlayCount = this.isRemoveFromComplete = this.playCount = this.framesData = this.isInit = this.frameIntervalTime = this.lastFrameTime = this.frameIndex = null; 0 < this.frameBitmapList.length; ) {
            var a = this.frameBitmapList.shift();
            a.url = null;
            a.imgeData = null;
            a.bonename = null;
            a.setBitmapInfo = null;
            a.imgeSkeletalData = null
        }
        this.framesBitmapList = this.frameBitmapList = null;
        this._super()
    },
    steFrameComplete: function(a) {
        this.frameCompleteFun = a
    },
    setFrameIntervalTime: function(a) {
        this.frameIntervalTime = parseInt(1E3 / a)
    },
    gotoAndPlay: function(a) {
        this.isStop = !1;
        this.frameIndex = a;
        for (a = 0; a < this.frameBitmapList.length; a++)
            this.frameBitmapList[a].setBitmapInfo(this.frameIndex)
    },
    gotoAndStop: function(a) {
        this.isStop = !0;
        this.frameIndex = a;
        for (a = 0; a < this.frameBitmapList.length; a++)
            this.frameBitmapList[a].setBitmapInfo(this.frameIndex)
    },
    fromFrameIndexToPlayFrameIndex: function(a, b) {
        this.isStop = !1;
        this.frameIndex = this.fromFrameIndex = a;
        for (var c = 0; c < this.frameBitmapList.length; c++)
            this.frameBitmapList[c].setBitmapInfo(this.frameIndex);
        this.playFrameIndex = b
    },
    setIsStop: function(a) {
        this.isStop = a
    },
    resetInfo: function(a) {
        this.setInfo(a)
    },
    setInfo: function(a) {
        this.removeAllChildren();
        this.jsonName = a.jsonName;
        this.curPlayCount = this.frameIndex = this.fromFrameIndex = 0;
        this.frameBitmapList = [];
        null != a.isRemoveFromComplete && (this.isRemoveFromComplete = a.isRemoveFromComplete);
        null != a.playCount && (this.playCount = a.playCount);
        this.frameMaxIndex = a.frameMaxIndex;
        this.playFrameIndex = this.frameMaxIndex - 1;
        this.frameIntervalTime = null == a.frameIntervalTime ? parseInt(1 / cc.game.config[cc.game.CONFIG_KEY.frameRate] * 1E3) : a.frameIntervalTime;
        this.framesBitmapList = a.framesBitmapList;
        this.framesData = a.framesBitmapInfo;
        for (a = 0; a < this.framesBitmapList.length; a++) {
            var b = {};
            b.url = this.framesBitmapList[a].url;
            b.imgeData = this.framesData[this.framesBitmapList[a].url + "|" + a];
            b.px = this.framesBitmapList[a].px;
            b.py = this.framesBitmapList[a].py;
            b.jsonName = this.jsonName;
            b.isPool = this.isPool;
            b.bonename = this.framesBitmapList[a].bonename;
            b = this.createGameBitmap(b);
            this.addChild(b, this.framesBitmapList[a].zIndex);
            b.setBitmapInfo(this.frameIndex);
            this.frameBitmapList.push(b)
        }
    },
    getBitmapByBoneName: function(a) {
        for (var b = 0; b < this.frameBitmapList.length; b++) {
            var c = this.frameBitmapList[b];
            if (c.bonename == a)
                return c
        }
        return null
    },
    getBitmapByUrlName: function(a) {
        for (var b = 0; b < this.frameBitmapList.length; b++) {
            var c = this.frameBitmapList[b]
              , d = c.url.split("/");
            if (d[d.length - 1] == a)
                return c
        }
        return null
    },
    setBlendFunc: function(a, b) {
        for (var c = 0; c < this.frameBitmapList.length; c++)
            this.frameBitmapList[c].setBlendFunc(a, b)
    },
    createGameBitmap: function(a) {
        var b, c = a.url.split("/"), c = c[c.length - 1];
        "im::" == c.substr(0, 4) ? (c = c.substr(4, c.length).split("."),
        b = createGameAnimation(a.jsonName, c[0], 60),
        b.setAnchorPoint(cc.p(a.px, a.py)),
        b.unscheduleUpdate(),
        b.imgeSkeletalData = a.imgeData,
        b.url = a.url,
        b.setBitmapInfo = function(a) {
            var c = this.imgeSkeletalData[a];
            this.animationSprite.opacity != c.opacity && this.animationSprite.setOpacity(c.opacity);
            a = b.imgeData[a];
            this.animationSprite.setSpriteFrame(a.url + ".png");
            this.animationSprite.x = a.x;
            this.animationSprite.y = a.y;
            this.x = c.x;
            this.y = -c.y;
            this.skewY != c.skewY && (this.skewY = c.skewY);
            this.skewX != c.skewX && (this.skewX = c.skewX);
            this.scaleY != c.scaleY && this.setScaleY(c.scaleY);
            this.scaleX != c.scaleX && this.setScaleX(c.scaleX);
            this.setRotation(c.rotation)
        }
        ) : (b = new cc.Sprite,
        b.setAnchorPoint(cc.p(a.px, a.py)),
        b.setSpriteFrame(a.url),
        b.url = a.url,
        b.imgeData = a.imgeData,
        b.bonename = a.bonename,
        b.setBitmapInfo = function(a) {
            a = this.imgeData[a];
            this.opacity != a.opacity && this.setOpacity(a.opacity);
            this.x = a.x;
            this.y = -a.y;
            this.skewY != a.skewY && (this.skewY = a.skewY);
            this.skewX != a.skewX && (this.skewX = a.skewX);
            this.scaleX != a.scaleX && this.setScaleX(a.scaleX);
            this.scaleY != a.scaleY && this.setScaleY(a.scaleY);
            this.setRotation(a.rotation)
        }
        );
        return b
    }
})
  , isMultipleAnimation = function(a, b) {
    return null == multipleAnimationDic[a + "|" + b] ? !1 : !0
}
  , multipleAnimation = function(a, b) {
    if (!0 != isMultipleAnimation(a, b)) {
        cc.log(a + "|" + b);
        var c = 0
          , d = cc.loader.getRes(b);
        if (null == d)
            cc.log("没加载json：   " + b);
        else
            for (multipleAnimationDic[a + "|" + b] = !0; null != d["mc" + c.toString()] || null != d["im" + c.toString()]; ) {
                var e = "";
                null != d["mc" + c.toString()] && (e = a + "|" + d["mc" + c.toString()].name,
                analysisSkeletalAnimation(e, d["mc" + c.toString()]));
                null != d["im" + c.toString()] && (e = a + "|" + d["im" + c.toString()].name,
                analysisAnimation(e, d["im" + c.toString()]));
                c++
            }
    }
}
  , analysisAnimation = function(a, b) {
    if (null == skeletalAnimation[a]) {
        skeletalAnimation[a] = {};
        skeletalAnimation[a].frameMaxIndex = b.max;
        skeletalAnimation[a].type = b.type;
        skeletalAnimation[a].framesBitmapList = [];
        for (var c = b.folderName, d = b.bi.split("|"), e = 0; e < d.length; e++) {
            var f = d[e].split(",")
              , g = {}
              , h = f[0];
            0 <= h.indexOf("-") ? (h = h.split("-"),
            g.url = h[1].replace("_", "/") + "/" + h[0]) : g.url = c + "/" + h;
            g.x = parseFloat(f[1]);
            g.y = -parseFloat(f[2]);
            skeletalAnimation[a].framesBitmapList.push(g)
        }
    }
}
  , analysisSkeletalAnimation = function(a, b) {
    if (null == skeletalAnimation[a]) {
        skeletalAnimation[a] = {};
        skeletalAnimation[a].frameMaxIndex = b.max;
        skeletalAnimation[a].framesBitmapList = [];
        skeletalAnimation[a].framesBitmapInfo = {};
        skeletalAnimation[a].type = b.type;
        var c = b.folderName;
        if (null != b)
            for (var d = 0; null != b["mcdata" + d.toString()]; ) {
                var e = b["mcdata" + d.toString()]
                  , f = {}
                  , g = e.url;
                0 <= g.indexOf("-") ? (g = g.split("-"),
                f.url = g[1].replace("_", "/") + "/" + g[0] + ".png") : f.url = c + "/" + g + ".png";
                f.zIndex = e.zi;
                f.px = null == e.px ? 0.5 : parseFloat(e.px);
                f.py = null == e.py ? 0.5 : parseFloat(e.py);
                f.bonename = e.bonename;
                skeletalAnimation[a].framesBitmapList.push(f);
                skeletalAnimation[a].framesBitmapInfo[f.url + "|" + d] = [];
                e = e.bi.split("|");
                for (g = 0; g < e.length; g++) {
                    var h = e[g].split(",")
                      , k = {};
                    k.x = null == h[0] || "" == h[0] ? 0 : parseFloat(h[0]);
                    k.y = null == h[1] || "" == h[1] ? 0 : parseFloat(h[1]);
                    k.scaleX = null == h[2] || "" == h[2] ? 1 : parseFloat(h[2]);
                    k.scaleY = null == h[3] || "" == h[3] ? 1 : parseFloat(h[3]);
                    k.opacity = null == h[4] || "" == h[4] ? 255 : 255 * parseFloat(h[4]);
                    k.rotation = null == h[5] || "" == h[5] ? 0 : parseFloat(h[5]);
                    k.skewX = null == h[6] || "" == h[6] ? 0 : parseFloat(h[6]);
                    k.skewY = null == h[7] || "" == h[7] ? 0 : parseFloat(h[7]);
                    skeletalAnimation[a].framesBitmapInfo[f.url + "|" + d].push(k)
                }
                d++
            }
    }
};
var createCloudEffectOne = function(a, b, c, d, e, f, g) {
    var h = new cc.Sprite;
    h.setAnchorPoint(cc.p(0, 0.5));
    h.setSpriteFrame(b);
    var k = 30 * Math.random();
    h.x = c;
    h.y = d - 30 + k;
    c = cc.moveTo((gameWidth + e - h.x) / 100 * f, cc.p(gameWidth + e, d));
    var k = cc.callFunc(function() {
        createCloudEffectOne(a, b, 0 - e, d, e, f)
    }), m = cc.callFunc(function() {
        h.removeFromParent()
    }), p;
    null != g && 0 != g && (p = cc.delayTime(g));
    a.addChild(h);
    null != p ? h.runAction(cc.sequence(c, k, m, p)) : h.runAction(cc.sequence(c, k, m))
}
  , showUIFadeIn = function(a, b, c) {
    if (null != a) {
        var d;
        null != b && 0 != b && (d = cc.delayTime(b));
        b = cc.scaleTo(0.15, 1);
        var e = cc.fadeIn(0.15);
        b = cc.spawn(b, e);
        var e = cc.moveTo(0.2, cc.p(a.x, a.y - 3))
          , f = cc.moveTo(0.2, cc.p(a.x, a.y + 3));
        null != c ? null != d ? a.runAction(cc.sequence(d, b, e, f, c)) : a.runAction(cc.sequence(b, e, f, c)) : null != d ? a.runAction(cc.sequence(d, b, e, f)) : a.runAction(cc.sequence(b, e, f))
    }
}
  , showUIFadeOut = function(a, b, c) {
    if (null != a) {
        var d;
        null != b && 0 != b && (d = cc.delayTime(b));
        b = cc.fadeOut(0.3);
        var e = cc.moveTo(0.3, cc.p(a.x, a.y + 10));
        b = cc.spawn(b, e);
        null != c ? null != d ? a.runAction(cc.sequence(d, b, c)) : a.runAction(cc.sequence(b, c)) : null != d ? a.runAction(cc.sequence(d, b)) : a.runAction(cc.sequence(b))
    }
}
  , inSceneByRight = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(d - 20, a.y));
        d = cc.moveTo(0.2, cc.p(d, a.y));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
    }
}
  , inSceneByLeft = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(d + 20, a.y));
        d = cc.moveTo(0.2, cc.p(d, a.y));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
    }
}
  , outSceneByRight = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(a.x - 20, a.y));
        d = cc.moveTo(0.2, cc.p(d, a.y));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
    }
}
  , outSceneByLeft = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(a.x + 20, a.y));
        d = cc.moveTo(0.2, cc.p(d, a.y));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, d, c)) : a.runAction(cc.sequence(e, b, d)) : null != c ? a.runAction(cc.sequence(b, d, c)) : a.runAction(cc.sequence(b, d))
    }
}
  , inSceneByTop = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(a.x, d - 20));
        var f = cc.moveTo(0.2, cc.p(a.x, d + 10));
        d = cc.moveTo(0.2, cc.p(a.x, d));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, f, d, c)) : a.runAction(cc.sequence(e, b, f, d)) : null != c ? a.runAction(cc.sequence(b, f, d, c)) : a.runAction(cc.sequence(b, f, d))
    }
}
  , inSceneByBottom = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(a.x, d + 20));
        var f = cc.moveTo(0.2, cc.p(a.x, d - 10));
        d = cc.moveTo(0.2, cc.p(a.x, d));
        null != e ? null != c ? a.runAction(cc.sequence(e, b, f, d, c)) : a.runAction(cc.sequence(e, b, f, d)) : null != c ? a.runAction(cc.sequence(b, f, d, c)) : a.runAction(cc.sequence(b, f, d))
    }
}
  , outSceneByBottom = function(a, b, c, d) {
    if (null != a) {
        a.setVisible(!0);
        var e;
        0 != b && (e = cc.delayTime(b));
        b = cc.moveTo(0.2, cc.p(a.x, a.y + 20));
        d = cc.moveTo(0.2, cc.p(a.x, d));
        null != e ? a.runAction(cc.sequence(e, b, d)) : a.runAction(cc.sequence(b, d))
    }
}
  , inSceneByScale = function(a, b, c) {
    if (null != a) {
        var d;
        0 != b && (d = cc.delayTime(b));
        a.setScale(0.12);
        b = cc.scaleTo(5 / 28, 1.13, 1.13);
        var e = cc.scaleTo(0.25, 0.95, 0.95)
          , f = cc.scaleTo(8 / 28, 1, 1);
        null != d ? null != c ? a.runAction(cc.sequence(d, b, e, f, c)) : a.runAction(cc.sequence(d, b, e, f)) : null != c ? a.runAction(cc.sequence(b, e, f, c)) : a.runAction(cc.sequence(b, e, f))
    }
}
  , growthTextNum = function(a, b, c, d, e) {
    a.setString(b.toString());
    a.nowNum = b;
    a.scheduleUpdate();
    var f = parseInt((c - b) / d);
    1 > f && (f = 1);
    a.update = function() {
        a.nowNum += f;
        a.nowNum >= c && (a.unscheduleUpdate(),
        a.nowNum = c,
        null != e && e());
        a.setString(a.nowNum.toString())
    }
}
  , removeUIByTag = function(a, b) {
    null != a.getChildByTag(b) && a.removeChildByTag(b)
};
var GameTime = cc.Class.extend({
    nowDate: null,
    isInit: null,
    gameRunTime: null,
    isPause: null,
    lastTime: null,
    ctor: function() {
        this.isPause = this.isInit = !1;
        this.gameRunTime = 0;
        this.lastTime = this.nowDate = (new Date).getTime()
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    updateTime: function(a) {
        !1 == this.isPause && (this.gameRunTime += 1E3 * a)
    }
})
  , engineGameRunTime = function() {
    return engine.gameTime.gameRunTime
}
  , engineGamePause = function(a) {
    engine.gameTime.isPause = a
}
  , gameUpdateType = 2
  , sceneUpdateType = 1
  , GameUpdate = cc.Class.extend({
    gameUpdateList: null,
    sceneUpdateList: null,
    isInit: null,
    ctor: function() {
        this.gameUpdateList = [];
        this.sceneUpdateList = [];
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    update: function() {
        for (var a = this.gameUpdateList.length - 1; 0 <= a; a--)
            this.gameUpdateList[a].update(),
            !0 == this.gameUpdateList[a].isEnd && this.gameUpdateList.splice(a, 1);
        for (a = this.sceneUpdateList.length - 1; 0 <= a; a--)
            this.sceneUpdateList[a].update(),
            !0 == this.sceneUpdateList[a].isEnd && this.sceneUpdateList.splice(a, 1)
    },
    addUpdate: function(a, b) {
        null == b && (b = sceneUpdateType);
        switch (b) {
        case gameUpdateType:
            this.gameUpdateList.push(a);
            break;
        case sceneUpdateType:
            this.sceneUpdateList.push(a)
        }
    },
    cleanUpdate: function(a) {
        switch (a) {
        case gameUpdateType:
            this.sceneUpdateList = [];
            break;
        case sceneUpdateType:
            this.gameUpdateList = []
        }
    }
})
  , TimeOut = cc.Class.extend({
    endTime: null,
    isInit: null,
    callFuntion: null,
    data: null,
    isEnd: null,
    ctor: function() {
        this.isEnd = this.isInit = !1
    },
    initialize: function(a) {
        !0 != this.isInit && (this.isInit = !0,
        this.endTime = a.endTime,
        this.callFuntion = a.callFuntion,
        this.endTime = a.endTime,
        this.data = a.data)
    },
    update: function() {
        !0 != this.isEnd && 0 <= engineGameRunTime() - this.endTime && (this.callFuntion.call(this.data),
        this.isEnd = !0)
    }
})
  , engineSetTimeOut = function(a, b, c, d) {
    var e = new TimeOut
      , f = {};
    f.callFuntion = a;
    f.endTime = engineGameRunTime() + 1E3 * b;
    f.data = c;
    e.initialize(f);
    engine.gameUpdate.addUpdate(e, d)
}
  , GameInterval = cc.Class.extend({
    updateList: null,
    isInit: null,
    ctor: function() {
        this.isEnd = this.isInit = !1
    },
    initialize: function(a) {
        if (!0 != this.isInit) {
            this.isInit = !0;
            this.updateList = {};
            var b = this;
            setInterval(function() {
                for (var a in b.updateList)
                    b.updateList[a].updateInterval()
            }, 3E3)
        }
    },
    addUpdateList: function(a, b) {
        null != this.updateList[a] ? cc.log("key:" + a + " 该心跳被添加过了") : this.updateList[a] = b
    },
    removeUpdateList: function(a, b) {
        null == this.updateList[a] && cc.log("key:" + a + " 该心跳没有被添加过了");
        this.updateList[a] = null;
        delete this.updateList[a]
    },
    updateUpdateList: function(a, b) {
        this.removeUpdateList(a, b);
        this.addUpdateList(a, b)
    }
});
var author = "cm"
  , printLog = function(a) {
    cc.log(author + ":" + a)
}
  , getAngle = function(a, b) {
    var c = 0
      , c = Math.atan2(b.y - a.y, b.x - a.x)
      , c = 180 / Math.PI * c;
    0 > c && (c += 360);
    return c % 360
}
  , getRadian = function(a, b) {
    var c = 0
      , c = Math.atan2(b.x - a.x, b.y - a.y);
    0 > c && (c += 2 * Math.PI);
    return c
}
  , beginPointTodistance = function(a, b, c) {
    b *= Math.PI / 180;
    return cc.pAdd(a, cc.p(c * Math.cos(b), c * Math.sin(b)))
}
  , cloneObject = function(a) {
    var b = {}, c;
    for (c in a)
        b[c] = a[c];
    return b
}
  , leftSetting = "leftSetting"
  , rightSetting = "rightSetting"
  , centerSetting = "centerSetting"
  , verticalCenterSetting = "verticalCenterSetting"
  , gameSpSettingFun = function(a) {
    var b = a.spArr
      , c = a.spWidth
      , d = a.p;
    switch (a.settingType) {
    case leftSetting:
        for (a = 0; a < b.length; a++)
            b[a].x = d.x - c * a,
            b[a].y = d.y;
        break;
    case rightSetting:
        for (a = 0; a < b.length; a++)
            b[a].x = d.x + c * a,
            b[a].y = d.y;
        break;
    case centerSetting:
        if (0 < b.length % 2) {
            var e = Math.floor(b.length / 2) + 1;
            for (a = 0; a < b.length; a++)
                b[a].y = d.y,
                b[a].x = a <= e - 1 ? d.x - a * c : d.x + (a - Math.floor(b.length / 2)) * c
        } else
            for (a = 0; a < b.length; a++)
                b[a].y = d.y,
                b[a].x = a < Math.floor(b.length / 2) ? d.x - (Math.floor(b.length / 2) - a) * c + b[a].anchorX * c : d.x + (a - Math.floor(b.length / 2)) * c + b[a].anchorX * c;
        break;
    case verticalCenterSetting:
        if (0 < b.length % 2)
            for (e = Math.floor(b.length / 2),
            a = 0; a < b.length; a++)
                b[a].x = d.x,
                b[a].y = a <= e ? d.y + (e - a) * c : d.y - (a - e) * c;
        else
            for (a = 0; a < b.length; a++)
                b[a].x = d.x,
                b[a].y = a < Math.floor(b.length / 2) ? d.y + (Math.floor(b.length / 2) - a) * c - 0.5 * c : d.y - (a - Math.floor(b.length / 2)) * c - 0.5 * c
    }
}
  , getDirByPointFour = function(a, b) {
    var c = 4;
    a.x < b.x && (c = 6);
    a.x > b.x && (c = 4);
    a.x == b.x && (c = a.y < b.y ? 6 : 4);
    return c
};
var GamePool = cc.Class.extend({
    isInit: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0)
    },
    initObjPool: function(a, b) {
        for (var c = [], d = b - 1; 0 <= d; d--) {
            var e = new a;
            c.push(e);
            cc.pool.putInPool(e)
        }
        return c
    },
    popOut: function(a) {
        var b = cc.pool.getFromPool(a);
        null == b && (b = new a);
        return b
    },
    putInPool: function(a) {
        cc.pool.putInPool(a)
    },
    hasObject: function(a) {
        return cc.pool.hasObject(a)
    },
    clearObject: function(a) {
        cc.pool.removeObject(a)
    },
    clearPool: function() {
        cc.pool.drainAllPools()
    }
});
var beforeEnterGame = "beforeEnterGame"
  , afterEnterGame = "afterEnterGame"
  , GameLog = cc.Class.extend({
    bugLimitCount: null,
    isInit: null,
    gameErrorType: null,
    logInfo: null,
    logVersion: null,
    initialize: function() {
        if (!0 != this.isInit) {
            this.isInit = !0;
            this.bugLimitCount = 0;
            this.gameErrorType = beforeEnterGame;
            this.logInfo = "";
            this.logVersion = "log日志版本：20180813";
            cc.log(this.logVersion);
            var a = this;
            window.onerror = function(b, c, d, e, f) {
                null != f && null != f.stack && 30 >= a.bugLimitCount && (a.bugLimitCount++,
                a.bugInfoHttp(f.stack.toString()))
            }
        }
    },
    bugInfoHttp: function(a) {
        var b = new Date
          , c = b.getFullYear() + "." + (b.getMonth() + 1) + "." + b.getDate()
          , b = {}
          , d = "";
        null != gameSDK && null != gameSDK.sdkPlayInfo && null != gameSDK.sdkPlayInfo.id && (d = gameSDK.sdkPlayInfo.id);
        b.playerid = d;
        b.emsg = this.gameErrorType + " 版本号：" + gameServerVersion + " 渲染模式：" + cc._renderType + this.logInfo;
        b.emsg = b.emsg.replace(/\|/g, " ");
        b.date = c;
        b.emsg2 = a;
        b.emsg2 = b.emsg2.replace(/\|/g, " ");
        a = serverUrl + "?opcode=90001";
        b = JSON.stringify(b);
        c = cc.loader.getXMLHttpRequest();
        c.open("POST", a);
        c.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
        c.send(b);
        cc.log("发送给服务器错误信息：" + b)
    },
    updateGameErrorType: function(a) {
        this.gameErrorType = a
    },
    setLogInfo: function(a) {
        this.logInfo = a
    }
});
var gameEngineVersion = "2.1"
  , gameVersion = "20180103"
  , getUrlByVersion = function(a) {
    return a
};
var GameEvent = cc.Class.extend({
    isInit: null,
    createMouseMove: null,
    createMouseDown: null,
    createMouseUp: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0,
        this.createMouseMove = createMouseMove,
        this.createMouseDown = createMouseDown,
        this.createMouseUp = createMouseUp)
    }
});
var engine = null
  , Engine = cc.Class.extend({
    isInit: null,
    gameTime: null,
    gameData: null,
    gameSound: null,
    gamePool: null,
    gameElementManage: null,
    gameSkillManage: null,
    gameUpdate: null,
    gameEvent: null,
    gameCocosStudio: null,
    gameLayer: null,
    gameLog: null,
    gameInterval: null,
    gameBackgroundLoad: null,
    ctor: function() {
        this.isInit = !1
    },
    initialize: function() {
        !0 != this.isInit && (this.isInit = !0,
        this.gameTime = new GameTime,
        this.gameTime.initialize(),
        this.gameData = new GameData,
        this.gameData.initialize(),
        this.gameSound = new GameSound,
        this.gameSound.initialize(),
        this.gamePool = new GamePool,
        this.gamePool.initialize(),
        this.gameUpdate = new GameUpdate,
        this.gameUpdate.initialize(),
        this.gameEvent = new GameEvent,
        this.gameEvent.initialize(),
        this.gameLayer = new GameLayer,
        this.gameLayer.initialize(),
        this.gameCocosStudio = new GameCocosStudio,
        this.gameCocosStudio.initialize(),
        this.gameInterval = new GameInterval,
        this.gameInterval.initialize(),
        this.gameBackgroundLoad = new GameBackgroundLoad,
        this.gameBackgroundLoad.initialize(),
        cc.director.setProjection(cc.Director.PROJECTION_2D),
        cc.FIX_ARTIFACTS_BY_STRECHING_TEXEL = 1)
    },
    engineuUpdate: function(a) {
        engine.gameTime.updateTime(a);
        engine.gameUpdate.update()
    }
})
  , initEngine = function() {
    null == engine && (engine = new Engine,
    engine.initialize())
};
var initGameUserData = function() {
    null == gameUserData && (gameUserData = {
        gold: 0,
        musicVolume: 100,
        effectVolume: 100,
        stars: 0,
        lv: 0,
        killElement: 0,
        spendDiamond: 0,
        completeTasks: [0, 0, 0, 0],
        items: {},
        lotteryRecords: [],
        freeLotteyNum: 1,
        levelStar: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        rewardLevel: [],
        guideLevel: [],
        isGetItem: [],
        lastDay: 0,
        power: 99999,
        beginRecoveryTime: 0
    },
    gameUserData.RetainRecoveryTime = Global.recoverTime,
    gameUserData.watchAdsNum = 1,
    gameUserData.resugenceAdsNum = 3,
    gameUserData.supportNum = 5,
    gameUserData.gift = 1,
    gameUserData.getNextGiftTime = 0,
    gameUserData.recoveryPowerNum = 3,
    gameUserData.totalScore = 0,
    gameUserData.beSupportNum = 0,
    gameUserData.firstGift = 1,
    gameUserData.getBoxID = [0, 0, 0, 0, 0],
    gameUserData.signDay = -1,
    gameUserData.signNum = 0,
    gameUserData.signDayLimit = 0,
    gameUserData.touchRank = 0,
    gameUserData.getInfinitePowerTime = 0,
    gameUserData.firstEnterGameTime = 0,
    gameUserData.isInfiniteOver = 1,
    gameUserData.leftGetDiamondNum = 3,
    gameUserData.usePowerNum = 0,
    gameUserData.baseFriendNum = 0,
    gameUserData.isDailyGift = 1,
    gameUserData.seeTargetDate = -1,
    gameUserData.shortcut = 0,
    gameUserData.boxget = 0,
    gameUserData.free_count = 1,
    gameUserData.honor = 0,
    gameUserData.honor_free_box = 0,
    gameUserData.honor_invite_type = 0,
    gameUserData.honor_reward_index = 0,
    gameUserData.hurt_gift_package = [0, 0, 0, 0, 0, 0, 0],
    gameUserData.invite_ids = [],
    gameUserData.is_today_first_login = 0,
    gameUserData.lastHurt = 0,
    gameUserData.myHurt = 0,
    gameUserData.pay_count = 0,
    gameUserData.tagetlvl = 15,
    gameUserData.todayInitLv = 0,
    gameUserData.week_gift_reveived = 0,
    gameUserData.week_invite_num = 0,
    gameUserData.week_refresh = 0,
    gameUserData.dianZanList = [],
    gameUserData.week_share_num = 0,
    gameUserData.lotteryCostNum = 100,
    gameUserData.lotteryShareCount = 1,
    gameUserData.limitPowerCount = 3,
    gameUserData.inviteFriendList = [],
    gameUserData.isBuyOtherAD = 0,
    gameUserData.isBuyReliveAD = 0,
    gameUserData.isAllAD = 0,
    gameUserData.watchParachuteAd_count = 5,
    gameUserData.isSelectMessage = 0,
    gameUserData.getMsgAwardDate = -1)
};
var res = {
    res_island_png1: "res/choose_map/island_1.png",
    res_csi_1_plist: "res/csi/csi_1.plist",
    res_csi_1_png: "res/csi/csi_1.png",
    res_csi_2_plist: "res/csi/csi_2.plist",
    res_csi_2_png: "res/csi/csi_2.png",
    res_csi_3_plist: "res/csi/csi_3.plist",
    res_csi_3_png: "res/csi/csi_3.png",
    res_csi_4_plist: "res/csi/csi_4.plist",
    res_csi_4_png: "res/csi/csi_4.png",
    res_csi_5_plist: "res/csi/csi_5.plist",
    res_csi_5_png: "res/csi/csi_5.png",
    res_csi_6_plist: "res/csi/csi_6.plist",
    res_csi_6_png: "res/csi/csi_6.png",
    res_csi_7_plist: "res/csi/csi_7.plist",
    res_csi_7_png: "res/csi/csi_7.png",
    res_csi_8_plist: "res/csi/csi_8.plist",
    res_csi_8_png: "res/csi/csi_8.png",
    fightanimatelist1_plist: "res/csi/fightanimatelist1.plist",
    fightanimatelist1_png: "res/csi/fightanimatelist1.png",
    fightanimatelist2_plist: "res/csi/fightanimatelist2.plist",
    fightanimatelist2_png: "res/csi/fightanimatelist2.png",
    res_heart_json: "res/pngdata/heart/heart.json",
    res_gift_json: "res/pngdata/gift/gift.json",
    res_targetbox_json: "res/pngdata/targetbox/targetbox.json",
    res_starbox_json: "res/pngdata/starbox/starbox.json",
    res_pause_layer_json: "res/pause_layer.json",
    res_tips_node_json: "res/ui/tips_node.json",
    res_reward_node_json: "res/ui/reward_node.json",
    res_shop_layer_json: "res/ui/shop_layer.json",
    res_target_layer_json: "res/ui/target_layer.json",
    res_target_box_layer_json: "res/ui/targetboxlayer.json",
    res_goto_next_page_layer_json: "res/ui/goto_next_page_layer.json",
    res_choose_level_layer_json: "res/ui/choose_level_layer.json",
    res_guide_dialog_json: "res/ui/guide_dialog.json",
    res_no_heart_node_json: "res/ui/no_heart_node.json",
    res_rank_layer_json: "res/ui/rank_layer.json",
    res_friend_node_json: "res/ui/friend_node.json",
    res_gift_node_json: "res/ui/gift_node.json",
    res_sign_in_layer: "res/ui/sign_in_layer.json",
    res_infinite_node: "res/ui/infinite_node.json",
    res_little_rank_node: "res/ui/little_rank_node.json",
    res_daily_share_node: "res/ui/daily_share.json",
    choose_number_layer: "res/ui/choose_number_layer.json",
    res_ads_node: "res/ui/ads_node.json",
    res_payment_shop_layer: "res/ui/payment_shop_layer.json",
    res_payment_success_layer: "res/ui/payment_success_layer.json",
    res_new_level_layer: "res/ui/new_level_layer.json",
    res_parachute_layer: "res/ui/parachute_layer.json",
    map1_json: "res/configdata/map1/map1.json",
    pknei_0_png: "res/pknei_0.png",
    pknei_1_png: "res/pknei_1.png",
    pkwai_0_png: "res/pkwai_0.png",
    pkwai__1_png: "res/pkwai_1.png",
    giftAni_png: "res/giftani.png",
    guidebg: "res/guidebg.png",
    iconren: "res/iconren.png",
    n_gamebg: "res/game/n_gamebg.jpg",
    gameplaybg1: "res/game/playbg/gameplaybg1.jpg",
    scaleplist_plist: "res/csi/scaleplist.plist",
    scaleplist_png: "res/csi/scaleplist.png",
    res_monster_json: "res/pngdata/monster/monster.json",
    fntplist_plist: "res/csi/fntplist.plist",
    fntplist_png: "res/csi/fntplist.png",
    messagebg: "res/messagebg.png",
    message_layer_json: "res/ui/message_layer.json",
    elementtrailing_plist: "res/effect/elementtrailing/elementtrailing.plist",
    remainsteptrailing1_plist: "res/effect/remainsteptrailing/remainsteptrailing1.plist",
    remainsteptrailing2_plist: "res/effect/remainsteptrailing/remainsteptrailing2.plist",
    res_game_target_node_json: "res/ui/game_target_layer.json",
    res_brush_json: "res/pngdata/brush/brush.json",
    res_merge_json: "res/pngdata/merge/merge.json",
    res_colorslm_json: "res/pngdata/colorslm/colorslm.json",
    res_lotterylight_json: "res/pngdata/lotterylight/lotterylight.json",
    msg_box_json: "res/pngdata/msg_box/msg_box.json"
}, font = {
    jellyboomfont: {
        type: "font",
        name: "jellyboom_font",
        srcs: ["res/font/jellyboom_font.ttf"]
    }
}, lotteryUIRes = {
    res_lottery_layer_json: "res/ui/lottery.json",
    res_lottery_node_json: "res/ui/lottery_reward_layer.json",
    res_lottery_watch_node: "res/ui/lottery_watch_node.json",
    res_lottery_json: "res/pngdata/lottery/lottery.json",
    res_lotteryuiimg_plist: "res/csi/lotteryuiimg.plist",
    res_lotteryuiimg_png: "res/csi/lotteryuiimg.png",
    res_lotteryuiimg_plist2: "res/csi/lotteryuiimg2.plist",
    res_lotteryuiimg_png2: "res/csi/lotteryuiimg2.png",
    res_lotterymonster_json: "res/pngdata/lotterymonster/lotterymonster.json"
}, weekGameRes = {
    res_week_gift_reward_json: "res/ui/week_gift_reward_layer.json",
    res_week_help_json: "res/ui/week_help_layer.json",
    res_week_rank_json: "res/ui/week_rank_layer.json",
    res_week_rank_node_json: "res/ui/week_rank_node.json",
    res_week_ranking_reward_json: "res/ui/week_ranking_reward_layer.json",
    res_week_result_json: "res/ui/week_result_layer.json",
    res_week_tickets_json: "res/ui/week_tickets_layer.json",
    res_bosstag_json: "res/pngdata/bosstag/bosstag.json",
    res_weekgame_plist1: "res/csi/weekgameplist1.plist",
    res_weekgame_png1: "res/csi/weekgameplist1.png",
    res_weekgame_plist2: "res/csi/weekgameplist2.plist",
    res_weekgame_png2: "res/csi/weekgameplist2.png",
    res_weekgameanimateilist_plist: "res/csi/weekgameanimateilist.plist",
    res_weekgameanimateilist_png: "res/csi/weekgameanimateilist.png",
    res_weekgameboss_json: "res/pngdata/weekgameboss/weekgameboss.json",
    res_weekgamemonster5_json: "res/pngdata/monster5/monster5.json",
    res_weekgamemonster6_json: "res/pngdata/monster6/monster6.json",
    res_weekgamemonster7_json: "res/pngdata/monster7/monster7.json",
    res_weekgamewin_json: "res/pngdata/weekgamewin/weekgamewin.json",
    res_weekgameimg_png: "res/weekgame/weekgameimg.png",
    res_weekgamemenuprogress_png: "res/weekgame/weekgamemenuprogress.png",
    res_weekgameprogress_png: "res/weekgame/weekgameprogress.png"
}, payShopUIRes = {
    res_pay_shop_plist: "res/csi/fbpayshopplist.plist",
    res_pay_shop_png: "res/csi/fbpayshopplist.plist"
}, getPayShopRes = function() {
    var a = [], b;
    for (b in payShopUIRes)
        a.push(payShopUIRes[b]);
    return a
}, honorUIRes = {
    res_honor_plist: "res/csi/honorplist.plist",
    res_honor_png: "res/csi/honorplist.png",
    res_honor_layer: "res/ui/honor_layer.json",
    res_honor_rank_node: "res/ui/honor_rank_node.json",
    res_honor_lottery_layer_json: "res/ui/honor_lottery_layer.json",
    res_hopro_png: "res/honor/hopro.png",
    res_circle_png: "res/honor/circle.png",
    res_honorlottery_json: "res/pngdata/honorlottery/honorlottery.json"
}, getHonorRes = function() {
    var a = [], b;
    for (b in honorUIRes)
        a.push(honorUIRes[b]);
    return a
}, getLotteryRes = function() {
    var a = [], b;
    for (b in lotteryUIRes)
        a.push(lotteryUIRes[b]);
    return a
}, getWeekGameRes = function() {
    var a = [], b;
    for (b in weekGameRes)
        a.push(weekGameRes[b]);
    return a
}, fightRes = {
    res_evils_json: "res/pngdata/evils/evils.json",
    res_bigmouth_json: "res/pngdata/bigmouth/bigmouth.json",
    res_gameplayeffect2_json: "res/pngdata/gameplayeffect2/gameplayeffect2.json",
    res_gameplayeffect3_json: "res/pngdata/gameplayeffect3/gameplayeffect3.json",
    res_gameplayeffect4_json: "res/pngdata/gameplayeffect4/gameplayeffect4.json",
    res_gameplayeffect5_json: "res/pngdata/gameplayeffect5/gameplayeffect5.json",
    res_lose_layer_json: "res/ui/lose_layer.json",
    res_game_menu_layer_json: "res/ui/game_menu_layer.json",
    res_resurgence_json: "res/ui/resurgence.json",
    res_result_json: "res/pngdata/result/result.json",
    res_resultui_json: "res/pngdata/resultui/resultui.json",
    res_uprank_json: "res/pngdata/uprank/uprank.json",
    res_up_rank_node_json: "res/ui/up_rank_node.json",
    res_up_rank_layer_json: "res/ui/up_rank_layer.json",
    fightanimatelist3_plist: "res/csi/fightanimatelist3.plist",
    fightanimatelist3_png: "res/csi/fightanimatelist3.png",
    fightanimatelist4_plist: "res/csi/fightanimatelist4.plist",
    fightanimatelist4_png: "res/csi/fightanimatelist4.png",
    fightanimatelist5_plist: "res/csi/fightanimatelist5.plist",
    fightanimatelist5_png: "res/csi/fightanimatelist5.png",
    fightanimatelist6_plist: "res/csi/fightanimatelist6.plist",
    fightanimatelist6_png: "res/csi/fightanimatelist6.png",
    fightanimatelist7_plist: "res/csi/fightanimatelist7.plist",
    fightanimatelist7_png: "res/csi/fightanimatelist7.png",
    fightanimatelist8_plist: "res/csi/fightanimatelist8.plist",
    fightanimatelist8_png: "res/csi/fightanimatelist8.png",
    fightanimatelist9_plist: "res/csi/fightanimatelist9.plist",
    fightanimatelist9_png: "res/csi/fightanimatelist9.png",
    fightanimatelist10_plist: "res/csi/fightanimatelist10.plist",
    fightanimatelist10_png: "res/csi/fightanimatelist10.png",
    fightelementimglist1_plist: "res/csi/fightelementimglist1.plist",
    fightelementimglist1_png: "res/csi/fightelementimglist1.png",
    fightelementimglist2_plist: "res/csi/fightelementimglist2.plist",
    fightelementimglist2_png: "res/csi/fightelementimglist2.png",
    fightelementimglist3_plist: "res/csi/fightelementimglist3.plist",
    fightelementimglist3_png: "res/csi/fightelementimglist3.png",
    fightelementimglist4_plist: "res/csi/fightelementimglist4.plist",
    fightelementimglist4_png: "res/csi/fightelementimglist4.png"
}, getFightRes = function() {
    var a = [], b;
    for (b in fightRes)
        a.push(fightRes[b]);
    return a
}, fightResFun = function(a) {
    var b = [];
    if (!0 == a)
        return getFightRes();
    0 <= gameUserData.lv && (b.push(fightRes.fightanimatelist3_plist),
    b.push(fightRes.fightanimatelist3_png),
    b.push(fightRes.fightanimatelist4_plist),
    b.push(fightRes.fightanimatelist4_png),
    b.push(fightRes.fightanimatelist5_plist),
    b.push(fightRes.fightanimatelist5_png),
    b.push(fightRes.fightanimatelist10_plist),
    b.push(fightRes.fightanimatelist10_png),
    b.push(fightRes.res_lose_layer_json),
    b.push(fightRes.res_game_menu_layer_json),
    b.push(fightRes.res_result_json),
    b.push(fightRes.res_resultui_json));
    1 <= gameUserData.lv && (b.push(fightRes.fightanimatelist9_plist),
    b.push(fightRes.fightanimatelist9_png),
    b.push(fightRes.res_uprank_json),
    b.push(fightRes.res_up_rank_node_json),
    b.push(fightRes.res_up_rank_layer_json));
    2 <= gameUserData.lv && (b.push(fightRes.fightanimatelist6_plist),
    b.push(fightRes.fightanimatelist6_png),
    b.push(fightRes.fightanimatelist7_plist),
    b.push(fightRes.fightanimatelist7_png));
    3 <= gameUserData.lv && (b.push(fightRes.fightanimatelist8_plist),
    b.push(fightRes.fightanimatelist8_png));
    4 <= gameUserData.lv && b.push(fightRes.res_resurgence_json);
    5 <= gameUserData.lv && (null == cc.loader.getRes("res/csi/stoneplist.plist") && b.push("res/csi/stoneplist.plist"),
    null == cc.loader.getRes("res/csi/stoneplist.png") && b.push("res/csi/stoneplist.png"));
    10 <= gameUserData.lv && (b.push(fightRes.fightelementimglist1_plist),
    b.push(fightRes.fightelementimglist1_png),
    b.push(fightRes.fightelementimglist2_plist),
    b.push(fightRes.fightelementimglist2_png),
    b.push(fightRes.fightelementimglist3_plist),
    b.push(fightRes.fightelementimglist3_png),
    b.push(fightRes.fightelementimglist4_plist),
    b.push(fightRes.fightelementimglist4_png));
    20 <= gameUserData.lv && (b.push(fightRes.res_gameplayeffect3_json),
    b.push(fightRes.res_bigmouth_json));
    30 <= gameUserData.lv && b.push(fightRes.res_gameplayeffect4_json);
    40 <= gameUserData.lv && (b.push(fightRes.res_gameplayeffect5_json),
    b.push(fightRes.res_evils_json));
    return b
}, soundRes = {
    sound_balloon: "res/sound/balloon.mp3",
    sound_bomb_bomb: "res/sound/bomb_bomb.mp3",
    sound_broom: "res/sound/broom.mp3",
    sound_brush: "res/sound/brush.mp3",
    sound_bubble_be_collect: "res/sound/bubble_be_collect.mp3",
    sound_can_not_touch: "res/sound/can_not_touch.mp3",
    sound_cheese_be_collect: "res/sound/cheese_be_collect.mp3",
    sound_chocolate_break: "res/sound/chocolate_break.mp3",
    sound_choose_bg: "res/sound/choose_bg.mp3",
    sound_color_jelly: "res/sound/color_jelly.mp3",
    sound_eat_jelly: "res/sound/eat_jelly.mp3",
    sound_finish_target: "res/sound/finish_target.mp3",
    sound_fly_jelly: "res/sound/fly_jelly.mp3",
    sound_game_bg: "res/sound/game_bg.mp3",
    sound_get_reward: "res/sound/get_reward.mp3",
    sound_ice_break: "res/sound/ice_break.mp3",
    sound_ice_create: "res/sound/ice_create.mp3",
    sound_lose: "res/sound/lose.mp3",
    sound_magic_stick: "res/sound/magic_stick.mp3",
    sound_monster_be_collect: "res/sound/monster_be_collect.mp3",
    sound_normal_be_collect: "res/sound/normal_be_collect.mp3",
    sound_normal_close: "res/sound/normal_close.mp3",
    sound_normal_merge: "res/sound/normal_merge.mp3",
    sound_normal_touch: "res/sound/normal_touch.mp3",
    sound_rainbow_bucket: "res/sound/rainbow_bucket.mp3",
    sound_result_step: "res/sound/result_step.mp3",
    sound_special_merge: "res/sound/special_merge.mp3",
    sound_start_menu: "res/sound/start_menu.mp3",
    sound_sugar_be_collect: "res/sound/sugar_be_collect.mp3",
    sound_target_over: "res/sound/target_over.mp3",
    sound_win: "res/sound/win.mp3",
    sound_normal_kill: "res/sound/normal_kill.mp3",
    sound_hammer: "res/sound/hammer.mp3",
    sound_big_bomb: "res/sound/big_bomb.mp3",
    sound_resurgence: "res/sound/resurgence.mp3",
    sound_star: "res/sound/star.mp3",
    sound_collect_target: "res/sound/collect_target.mp3",
    sound_stone_be_collect: "res/sound/stone_be_collect.mp3",
    sound_lottery_run: "res/sound/lottery_run.mp3",
    sound_lottery_get_reward: "res/sound/lottery_get_reward.mp3",
    sound_color_start: "res/sound/color_start.mp3",
    sound_star_1: "res/sound/winstar1.mp3",
    sound_star_2: "res/sound/winstar2.mp3",
    sound_star_3: "res/sound/winstar3.mp3",
    sound_good: "res/sound/good.mp3",
    sound_great: "res/sound/great.mp3",
    sound_amazing: "res/sound/amazing.mp3",
    sound_unbelievable: "res/sound/unbelievable.mp3",
    sound_jelly: "res/sound/jellyjelly.mp3",
    sound_good1: "res/sound/good1.mp3",
    sound_good2: "res/sound/good2.mp3",
    sound_good3: "res/sound/good3.mp3"
}, g_resources = [], i;
for (i in res)
    g_resources.push(res[i]);
var resNew = {
    res_gameplayeffect6_json: "res/pngdata/gameplayeffect6/gameplayeffect6.json",
    res_gameplayeffect7_json: "res/pngdata/gameplayeffect7/gameplayeffect7.json",
    map2_json: "res/configdata/map2/map2.json",
    map3_json: "res/configdata/map3/map3.json"
}, g_mapRes = [], j;
for (j in resNew)
    g_mapRes.push(resNew[j]);
var Global = {
    isNewPlayer: !1,
    maxLevel: 250,
    maxTips: "come soon !!!",
    isPure: !0,
    language: "en",
    unlockItemCondition: [{
        lv: 4,
        price: 80,
        id: 23
    }, {
        lv: 8,
        price: 150,
        id: 10
    }, {
        lv: 24,
        price: 250,
        id: 11
    }],
    lotteyCost: 100,
    maxRow: 8,
    maxCol: 8,
    moveSpeed: 1300,
    moveSlowSpeed: 500,
    chooseLv: 0,
    flySpeed: 1500,
    timeDuring: 0.02,
    chooseItems: [],
    tipsTime: 3,
    startSpeed: 500,
    aSpeed: 3200,
    resurgenceTime: 0,
    isIceEeffect: !1,
    lastLevel: 0,
    isNextLevel: !1,
    isFreeLottery: !1,
    isDialog: !1,
    maxPower: 10,
    diffTime: 1800,
    recoverTime: 1800,
    winNum: 0,
    closeTarget: 0,
    supportTips: "you can only thumb up for friends 5 times a day",
    noSupportSelf: "Can't thumb up yourself，try your friends",
    noAdds: "Sorry，there's no video. Please check your network.",
    noAdds1: "Failed: Sorry, the ad is currently only available on messenger!",
    noAdds2: "Failed: No ads available, please try again later!",
    paymentFailDes: "Payment failed, you can try to pay by PC.",
    gifts: [{
        id: 2007,
        num: 2
    }, {
        id: 2006,
        num: 50
    }, {
        id: 2001,
        num: 1
    }, {
        id: 2002,
        num: 1
    }, {
        id: 2003,
        num: 1
    }],
    isAddStar: 0,
    FailAdLevel: 0,
    FailAdCount: 0,
    nextCondition: 250,
    nextCondition1: 500,
    mapIndex: 1,
    firstGifts: [{
        id: 2007,
        num: 5
    }, {
        id: 2006,
        num: 50
    }, {
        id: 2001,
        num: 1
    }],
    globalTips: "You'll be removed from the ranking list if log out for a long time!",
    loseNum: 0,
    lastLoseLv: 0,
    severTime: 0,
    isFirstEnter: !0,
    lockGiftTips: "unlock at level 10",
    lockSignTips: "unlock at level 3",
    lockRankTips: "unlock at level 5",
    endInfiniteTime: 300,
    isInfinite: !1,
    isSecondDay: !1,
    addFriendsNum: 0
};
Global.parachuteNum = 2 + Math.floor(3 * Math.random());
Global.isShowTargetBox = 0;
Global.enDiamondTime = 3600;
Global.lockInfiniteTips = "Only open on tomorrow！";
Global.startGameLocalTime = 0;
Global.tipsIconTime = 0.2;
Global.rankTipsText = {
    en: "You are better than s% players!",
    es: "¡Eres mejor que s% jugadores!",
    pt: "Você é Melhor do que s% jogadores!"
};
Global.addStepText = {
    zh: {
        pre: "花费 ",
        end: " 颗钻石获得5步"
    },
    en: {
        pre: "use ",
        end: " diamonds to get 5 moves"
    },
    fr: {
        pre: "Utiliser ",
        end: " diamants pour obtenir 5 mouvements supplémentaires?"
    }
};
Global.lotteyRewards = [{
    id: 2006,
    num: 100,
    probability: 15
}, {
    id: 2007,
    num: 1,
    probability: 45
}, {
    id: 2006,
    num: 200,
    probability: 11
}, {
    id: 2007,
    num: 2,
    probability: 25
}, {
    id: 10,
    num: 1,
    probability: 1
}, {
    id: 11,
    num: 1,
    probability: 1
}, {
    id: 2002,
    num: 1,
    probability: 1
}, {
    id: 2005,
    num: 1,
    probability: 1
}];
Global.guildData = {};
Global.task = {
    task1: [{
        type: 1,
        condition: 10,
        reward: 10
    }, {
        type: 1,
        condition: 20,
        reward: 20
    }, {
        type: 1,
        condition: 30,
        reward: 30
    }, {
        type: 1,
        condition: 75,
        reward: 35
    }, {
        type: 1,
        condition: 90,
        reward: 50
    }, {
        type: 1,
        condition: 120,
        reward: 50
    }, {
        type: 1,
        condition: 150,
        reward: 50
    }, {
        type: 1,
        condition: 180,
        reward: 80
    }, {
        type: 1,
        condition: 200,
        reward: 100
    }],
    task2: [{
        type: 2,
        condition: 2,
        reward: 10
    }, {
        type: 2,
        condition: 10,
        reward: 20
    }, {
        type: 2,
        condition: 15,
        reward: 20
    }, {
        type: 2,
        condition: 25,
        reward: 25
    }, {
        type: 2,
        condition: 30,
        reward: 30
    }, {
        type: 2,
        condition: 45,
        reward: 50
    }, {
        type: 2,
        condition: 55,
        reward: 50
    }, {
        type: 2,
        condition: 70,
        reward: 50
    }, {
        type: 2,
        condition: 80,
        reward: 100
    }],
    task3: [{
        type: 3,
        condition: 1E3,
        reward: 10
    }, {
        type: 3,
        condition: 2500,
        reward: 15
    }, {
        type: 3,
        condition: 4E3,
        reward: 20
    }, {
        type: 3,
        condition: 5500,
        reward: 25
    }, {
        type: 3,
        condition: 7500,
        reward: 30
    }, {
        type: 3,
        condition: 1E4,
        reward: 40
    }, {
        type: 3,
        condition: 15E3,
        reward: 50
    }],
    task4: [{
        type: 4,
        condition: 100,
        reward: 10
    }, {
        type: 4,
        condition: 500,
        reward: 15
    }, {
        type: 4,
        condition: 800,
        reward: 20
    }, {
        type: 4,
        condition: 1200,
        reward: 20
    }, {
        type: 4,
        condition: 1500,
        reward: 25
    }, {
        type: 4,
        condition: 2E3,
        reward: 25
    }, {
        type: 4,
        condition: 2500,
        reward: 25
    }, {
        type: 4,
        condition: 5E3,
        reward: 100
    }]
};
Global.taskTips = [{
    zh: {
        pre: "还差",
        end: "颗星星就可以领奖了哦！"
    },
    en: {
        pre: "Collect ",
        end: " more stars to get rewards!"
    }
}, {
    zh: {
        pre: "还差",
        end: "颗星星就可以领奖了哦！"
    },
    en: {
        pre: "Complete  ",
        end: " more levels to get rewards!"
    }
}, {
    zh: {
        pre: "还差",
        end: "颗星星就可以领奖了哦！"
    },
    en: {
        pre: "Clear ",
        end: " more jellies to get rewards！"
    }
}, {
    zh: {
        pre: "还差",
        end: "颗星星就可以领奖了哦！"
    },
    en: {
        pre: "Use ",
        end: " more diamonds to get rewards！"
    }
}];
Global.elements = [{
    id: 1,
    name: "红布丁",
    icon: "red_pudding",
    uiIcon: "red_shadow"
}, {
    id: 2,
    name: "蓝布丁",
    icon: "blue_pudding",
    uiIcon: "blue_shadow"
}, {
    id: 3,
    name: "黄布丁",
    icon: "yellow_pudding",
    uiIcon: "yellow_shadow"
}, {
    id: 4,
    name: "绿布丁",
    icon: "green_pudding",
    uiIcon: "green_shadow"
}, {
    id: 5,
    name: "紫布丁",
    icon: "purple_pudding",
    uiIcon: "purple_shadow"
}, {
    id: 6,
    name: "红布丁小怪",
    icon: "red_pudding_monster",
    uiIcon: "red_shadow_monster"
}, {
    id: 7,
    name: "蓝布丁小怪",
    icon: "blue_pudding_monster",
    uiIcon: "blue_shadow_monster"
}, {
    id: 8,
    name: "黄布丁小怪",
    icon: "yellow_pudding_monster",
    uiIcon: "yellow_shadow_monster"
}, {
    id: 9,
    name: "绿布丁小怪",
    icon: "green_pudding_monster",
    uiIcon: "green_shadow_monster"
}, {
    id: 10,
    name: "炸弹布丁",
    icon: "bomb",
    en: "bomb",
    uiIcon: "bomb_shadow"
}, {
    id: 11,
    name: "五彩布丁",
    icon: "color_pudding",
    en: "colorful jelly",
    uiIcon: "color_shadow"
}, {
    id: 12,
    name: "巧克力",
    icon: "chocolate3",
    uiIcon: "chocolate1_shadow"
}, {
    id: 13,
    name: "热气球",
    icon: "hot_balloon",
    uiIcon: "hot_balloon_shadow"
}, {
    id: 14,
    name: "星星宝石",
    icon: "star_stone",
    uiIcon: "star_stone_shadow"
}, {
    id: 15,
    name: "彩虹糖",
    icon: "rainbow_sugar",
    uiIcon: "rainbow_sugar_shadow"
}, {
    id: 16,
    name: "彩虹糖2",
    icon: "rainbow_flower",
    uiIcon: "rainbow_flower"
}, {
    id: 17,
    name: "泡泡",
    icon: "bubble",
    uiIcon: "bubble_shadow"
}, {
    id: 18,
    name: "方块奶酪",
    icon: "cheese",
    uiIcon: "cheese_shadow"
}, {
    id: 19,
    name: "笼子",
    icon: "cage",
    uiIcon: "cage"
}, {
    id: 20,
    name: "冰块1",
    icon: "ice2",
    uiIcon: "ice1_shadow"
}, {
    id: 21,
    name: "冰块2",
    icon: "ice2",
    uiIcon: "ice2_shadow"
}, {
    id: 22,
    name: "风车",
    icon: "winnower",
    uiIcon: "winnower_shadow"
}, {
    id: 23,
    name: "飞天布丁",
    icon: "fly_pudding",
    en: "missile",
    uiIcon: "fly_shadow"
}, {
    id: 24,
    name: "飞天+飞天",
    icon: "fly_pudding",
    uiIcon: "fly_shadow"
}, {
    id: 25,
    name: "飞天+炸弹",
    icon: "fly_pudding",
    uiIcon: "fly_shadow"
}, {
    id: 26,
    name: "炸弹+炸弹",
    icon: "bomb",
    uiIcon: "bomb_shadow"
}, {
    id: 27,
    name: "飞天+五彩",
    icon: "color_pudding",
    uiIcon: "color_shadow"
}, {
    id: 28,
    name: "五彩+五彩",
    icon: "color_pudding",
    uiIcon: "color_shadow"
}, {
    id: 31,
    name: "红恶魔",
    icon: "devil_red",
    uiIcon: "devil_red"
}, {
    id: 32,
    name: "蓝恶魔",
    icon: "devil_blue",
    uiIcon: "devil_blue"
}, {
    id: 33,
    name: "黄恶魔",
    icon: "devil_yellow",
    uiIcon: "devil_yellow"
}, {
    id: 34,
    name: "绿恶魔",
    icon: "devil_green",
    uiIcon: "devil_green"
}, {
    id: 35,
    name: "紫恶魔",
    icon: "devil_purple",
    uiIcon: "devil_purple"
}, {
    id: 45,
    name: "糖果",
    icon: "candy_pudding",
    uiIcon: "candy_pudding_shadow"
}, {
    id: 46,
    name: "珍珠",
    icon: "pearl",
    uiIcon: "pearl_shadow"
}, {
    id: 47,
    name: "雪糕",
    icon: "icecream",
    uiIcon: "icecream_shadow"
}, {
    id: 2001,
    name: "锤子",
    icon: "hammer",
    uiIcon: "hammer"
}, {
    id: 2002,
    name: "魔法棒",
    icon: "magic_stick",
    en: "Magic wand",
    uiIcon: "magic_stick"
}, {
    id: 2003,
    name: "超级扫帚",
    icon: "broom",
    en: "broom",
    uiIcon: "broom"
}, {
    id: 2004,
    name: "彩虹刷",
    icon: "rainbow_brush",
    en: "colorful brush",
    uiIcon: "rainbow_brush"
}, {
    id: 2005,
    name: "彩色桶",
    icon: "small_bucket",
    en: "colorful pail",
    uiIcon: "small_bucket"
}, {
    id: 2006,
    name: "钻石",
    icon: "diamond",
    en: "diamond",
    uiIcon: "diamond"
}, {
    id: 2007,
    name: "心",
    icon: "star",
    en: "heart",
    uiIcon: "star"
}, {
    id: 2008,
    name: "礼包",
    icon: "gift",
    en: "gift",
    uiIcon: "gift"
}, {
    id: 2009,
    name: "转盘免费次数",
    icon: "spin",
    en: "spin",
    uiIcon: "spin"
}, {
    id: 2010,
    name: "增加步子",
    icon: "resurgence/five.png",
    en: "step",
    uiIcon: "resurgence/five.png"
}, {
    id: 2011,
    name: "荣誉",
    icon: "honor",
    en: "honor",
    uiIcon: "honor"
}];
Global.shopDatas = [{
    id: 2001,
    num: 1,
    price: 100
}, {
    id: 2002,
    num: 1,
    price: 200
}, {
    id: 2003,
    num: 1,
    price: 300
}, {
    id: 2004,
    num: 1,
    price: 400
}, {
    id: 2005,
    num: 1,
    price: 600
}, {
    id: 2007,
    num: 1,
    price: 150
}, {
    id: 2007,
    num: 5,
    price: 750
}, {
    id: 2007,
    num: 10,
    price: 1250
}];
Global.gameItems = [2001, 2002, 2003, 2004, 2005];
Global.unLockItem = [8, 12, 20, 25, 33];
Global.boxTips = "Stars aren't enough！";
Global.alreadyGet = "can't open again !!!";
Global.boxs = [{
    condition: 15,
    pos: {
        x: 225,
        y: 900
    },
    reward: 2006,
    num: 100
}, {
    condition: 50,
    pos: {
        x: 500,
        y: 2240
    },
    reward: 2006,
    num: 200
}, {
    condition: 100,
    pos: {
        x: 480,
        y: 4030
    },
    reward: 2006,
    num: 300
}, {
    condition: 180,
    pos: {
        x: 380,
        y: 7930
    },
    reward: 2006,
    num: 400
}, {
    condition: 250,
    pos: {
        x: 480,
        y: 11180
    },
    reward: 2006,
    num: 500
}];
Global.signReward = [[{
    id: 2006,
    num: 100
}], [{
    id: 2007,
    num: 3
}], [{
    id: 2001,
    num: 2
}], [{
    id: 2006,
    num: 200
}], [{
    id: 2007,
    num: 3
}], [{
    id: 2009,
    num: 3
}], [{
    id: 2006,
    num: 500
}, {
    id: 2007,
    num: 3
}, {
    id: 2001,
    num: 1
}]];
Global.robot = [{
    pid: 10001,
    name: "Phương Tuấn",
    image: "others/head1.png"
}, {
    pid: 10002,
    name: "Ali-Mohamed Virag",
    image: "others/head2.png"
}, {
    pid: 10003,
    name: "Adi Adrian",
    image: "others/head3.png"
}, {
    pid: 10004,
    name: "Putri",
    image: "others/head4.png"
}, {
    pid: 10005,
    name: "Janak Oli",
    image: "others/head5.png"
}];
Global.targetPeople = [];
Global.targetTxt = "Set a goal, pass %s stages";
Global.targetBoxTips = "Need a key to open the chest";
Global.tarBoxKeyTips = "Pass %s level to get the key";
Global.targetItemPos = [{
    posArr: [cc.p(540, 1024)],
    scale: 0.7
}, {
    posArr: [cc.p(505, 1016), cc.p(580, 1016)],
    scale: 0.7
}, {
    posArr: [cc.p(544, 1063), cc.p(507, 993), cc.p(582, 993)],
    scale: 0.7
}, {
    posArr: [cc.p(507, 1051), cc.p(582, 1051), cc.p(507, 981), cc.p(582, 981)],
    scale: 0.7
}];
Global.weekTargetItemPos = [{
    posArr: [cc.p(635, 985)],
    scale: 0.5
}, {
    posArr: [cc.p(610, 985), cc.p(660, 985)],
    scale: 0.5
}, {
    posArr: [cc.p(635, 1008), cc.p(610, 963), cc.p(660, 963)],
    scale: 0.5
}, {
    posArr: [cc.p(610, 1008), cc.p(660, 1008), cc.p(610, 963), cc.p(660, 963)],
    scale: 0.5
}];
Global.desStr = "Watch a video to get it for free";
Global.watchDesStr = "Watch a video to get +1";
Global.watchPowerStr = "Watch a video to get +";
Global.resurgenceDes = "Watch videos and get 5 more moves";
Global.giftDes = "So lucky you are!";
Global.shareDes = "You can get the gift after sharing!";
Global.youHave = "You own";
Global.scoreRotateA = 60;
Global.scoreRotateB = -90;
Global.elementSize = 85;
Global.mapOffsetY = 235;
Global.mapOffsetX = 64;
Global.isLoadAnimate = !1;
Global.isUseItem = !1;
Global.gotoNextTxt = "Go to the next map. The map is loading, sure to play the next stage?";
Global.gameSceneConfig = [6, 6, 6];
Global.scoreEn = "SCORE";
Global.gameType = 2;
Global.gameWeekLv = 1;
Global.isGameStart = !1;
Global.isBossAttackStopOntouch = !1;
Global.costWeekStep = 0;
Global.hurtAllReward = 2E3;
Global.hurtReward = [{
    hurtNum: 200,
    reward: [{
        id: 2007,
        num: 3
    }, {
        id: 10,
        num: 2
    }]
}, {
    hurtNum: 400,
    reward: [{
        id: 2006,
        num: 10
    }, {
        id: 2001,
        num: 2
    }]
}, {
    hurtNum: 600,
    reward: [{
        id: 2002,
        num: 1
    }, {
        id: 2009,
        num: 2
    }]
}, {
    hurtNum: 900,
    reward: [{
        id: 2004,
        num: 2
    }, {
        id: 23,
        num: 2
    }]
}, {
    hurtNum: 1200,
    reward: [{
        id: 2003,
        num: 3
    }, {
        id: 2006,
        num: 30
    }]
}, {
    hurtNum: 1600,
    reward: [{
        id: 11,
        num: 2
    }, {
        id: 2009,
        num: 3
    }]
}, {
    hurtNum: 2E3,
    reward: [{
        id: 2005,
        num: 2
    }, {
        id: 2007,
        num: 5
    }]
}];
Global.weekReward = [[{
    id: 2006,
    num: 250
}], [{
    id: 2006,
    num: 150
}], [{
    id: 2006,
    num: 80
}]];
Global.weekInitPrice = 20;
Global.addPriceEvery = 10;
Global.isGetWeekRank = !1;
Global.weekRank = [];
Global.dayTxt = "days";
Global.shareAddWeekTicMax = 2;
Global.inviteAddWeekTicMax = 3;
Global.weekBossHittedPos = cc.p(310, 1085);
Global.curLevelScore = 0;
Global.isOpenWeekLayer = !1;
Global.getRewardDes = "At least 3 friends must participate in order to get a reward!";
Global.lockWeekGameTips = "unlock at level 10";
Global.honorLotteryDes = "Spin 3 times in a set";
Global.isCreateTargetR = !1;
Global.addMapFriendData = [];
Global.friendHeadNum = 5;
Global.lockHonorTips = "unlock at level 1";
Global.robotGetHonorEveryLv = 0.5;
Global.friendGetHonorEveryLv = 1;
Global.honorLetteryMax = 3;
Global.getHonorByInvite = 2;
Global.getHonorByAdd = 3;
Global.addHonorNum = 0;
Global.HonorFreeBoxReward = [[{
    id: 2001,
    num: 1
}, {
    id: 2011,
    num: 5
}]];
Global.surpassTips = "For honor, surpass them!";
Global.honorRewardList = [{
    honorNum: 20
}, {
    honorNum: 25
}, {
    honorNum: 30
}, {
    honorNum: 35
}, {
    honorNum: 40
}, {
    honorNum: 45
}, {
    honorNum: 50
}, {
    honorNum: 55
}, {
    honorNum: 60
}];
Global.maxEn = "MAX";
Global.honorLotteyRewards = [{
    id: 2006,
    num: 50,
    probability: 25
}, {
    id: 2007,
    num: 1,
    probability: 25
}, {
    id: 2006,
    num: 150,
    probability: 15
}, {
    id: 2004,
    num: 1,
    probability: 5
}, {
    id: 2007,
    num: 3,
    probability: 15
}, {
    id: 2006,
    num: 250,
    probability: 5
}, {
    id: 2007,
    num: 5,
    probability: 5
}, {
    id: 2003,
    num: 1,
    probability: 5
}];
Global.rankMaxNumber = 20;
Global.isSendWeekGame = !1;
Global.resultShareDes = "Play with your friends！";
Global.reliveDic = {};
var addReliveDic = function(a) {
    null == Global.reliveDic[a] ? (Global.reliveDic[a] = {},
    Global.reliveDic[a].reliveNum = 1) : Global.reliveDic[a].reliveNum += 1
}
  , getReliveByLv = function(a) {
    return null == Global.reliveDic[a] ? 0 : Global.reliveDic[a].reliveNum
}
  , checkReliveDic = function(a) {
    return null == Global.reliveDic[a] || 1 > Global.reliveDic[a].reliveNum ? !0 : !1
}
  , resetReliveDic = function(a) {
    null != Global.reliveDic[a] && (Global.reliveDic[a].reliveNum = 0)
};
Global.invitedes = "Invited to get rewards!";
Global.watchdes = "Watch Ads to get rewards!";
Global.watchdes1 = "Add 2 hearts!";
Global.reliveNum = 0;
Global.getPowerDes = "Your energie purchase has been used up today.";
Global.reliveFailDes = "Send was not successful, please invite other friends.";
Global.isWinSelect = !1;
Global.fontUrl = "res/font/jellyboom_font.ttf";
Global.isResultShare = !1;
Global.resultShareCount = 0;
Global.giftHasClaimDes = "Rewards claimed";
Global.payShopInfo = {
    1: {
        payid: "9001",
        itemInfo: [{
            id: 2006,
            num: 25E3
        }, {
            id: 2001,
            num: 1
        }, {
            id: 2004,
            num: 1
        }, {
            id: 2005,
            num: 1
        }],
        price: 9.99,
        payType: "1"
    },
    2: {
        payid: "9002",
        itemInfo: [{
            id: 2006,
            num: 4E3
        }],
        price: 1.99,
        payType: "2"
    },
    3: {
        payid: "9003",
        itemInfo: [{
            id: 2006,
            num: 2E4
        }],
        price: 8.99,
        payType: "3"
    },
    4: {
        payid: "9004",
        itemInfo: [{
            id: 2006,
            num: 65E3
        }],
        price: 24.99,
        payType: "4"
    },
    5: {
        payid: "9005",
        itemInfo: [{
            id: 2007,
            num: 2
        }, {
            id: 2006,
            num: 2E4
        }, {
            id: 2001,
            num: 1
        }, {
            id: 2002,
            num: 1
        }, {
            id: 2003,
            num: 1
        }],
        price: 0.99,
        payType: "5"
    }
};
Global.payIdbyShopInfo = {
    9001: {
        shopInfoID: 1
    },
    9002: {
        shopInfoID: 2
    },
    9003: {
        shopInfoID: 3
    },
    9004: {
        shopInfoID: 4
    },
    9005: {
        shopInfoID: 5
    }
};
Global.newMapInfo = {
    land_1: {
        levelRange: [1, 30],
        levelRangedDes: "level 1-30",
        landName: "Donut Island",
        newElementIcon: [{
            icon: "candy_pudding",
            level: 5
        }, {
            icon: "star_stone",
            level: 9
        }, {
            icon: "bubble",
            level: 16
        }, {
            icon: "cheese",
            level: 22
        }],
        lockLevel: 0,
        landIcon: "island_1",
        isLandPos: {
            x: 225,
            y: 200
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 320
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 260
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 260
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 560,
            y: 660
        }
    },
    land_2: {
        levelRange: [31, 60],
        levelRangedDes: "level 31-60",
        landName: "Moon Island",
        newElementIcon: [{
            icon: "pearl",
            level: 31
        }, {
            icon: "cage",
            level: 48
        }],
        lockLevel: 30,
        landIcon: "island_2",
        isLandPos: {
            x: 505,
            y: 800
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 280
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 220
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 220
        },
        newElementPos: {
            x: -75,
            y: -30
        },
        tarBoxKeyPos: {
            x: 480,
            y: 760
        }
    },
    land_3: {
        levelRange: [61, 90],
        levelRangedDes: "level 61-90",
        landName: "Windmill Island",
        newElementIcon: [{
            icon: "ice2",
            level: 61
        }, {
            icon: "red_pudding_monster",
            level: 71
        }, {
            icon: "winnower",
            level: 81
        }],
        lockLevel: 60,
        landIcon: "island_3",
        isLandPos: {
            x: 225,
            y: 1400
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 270
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 210
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 210
        },
        newElementPos: {
            x: -75,
            y: -30
        },
        tarBoxKeyPos: {
            x: 380,
            y: 900
        }
    },
    land_4: {
        levelRange: [91, 120],
        levelRangedDes: "level 91-120",
        landName: "Lighthouse Island",
        newElementIcon: [{
            icon: "chocolate3",
            level: 91
        }, {
            icon: "hot_balloon",
            level: 101
        }, {
            icon: "rainbow_sugar",
            level: 111
        }],
        lockLevel: 90,
        landIcon: "island_4",
        isLandPos: {
            x: 505,
            y: 2E3
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 270
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 210
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 240
        },
        newElementPos: {
            x: -75,
            y: -30
        },
        tarBoxKeyPos: {
            x: 380,
            y: 900
        }
    },
    land_5: {
        levelRange: [121, 150],
        levelRangedDes: "level 121-150",
        landName: "Lollipop Island",
        newElementIcon: [{
            icon: "icecream",
            level: 126
        }],
        lockLevel: 120,
        landIcon: "island_5",
        isLandPos: {
            x: 225,
            y: 2600
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 320
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 260
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 260
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 470,
            y: 700
        }
    },
    land_6: {
        levelRange: [151, 180],
        levelRangedDes: "level 151-180",
        landName: "Waterfall island",
        newElementIcon: [],
        lockLevel: 150,
        landIcon: "island_6",
        isLandPos: {
            x: 505,
            y: 3200
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 320
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 260
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 260
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 500,
            y: 730
        }
    },
    land_7: {
        levelRange: [181, 210],
        levelRangedDes: "level 181-210",
        landName: "Amethyst island",
        newElementIcon: [{
            icon: "devil_red",
            level: 201
        }],
        lockLevel: 180,
        landIcon: "island_7",
        isLandPos: {
            x: 225,
            y: 3800
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 300
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 240
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 240
        },
        newElementPos: {
            x: -25,
            y: -30
        },
        tarBoxKeyPos: {
            x: 600,
            y: 630
        }
    },
    land_8: {
        levelRange: [211, 240],
        levelRangedDes: "level 211-240",
        landName: "Ice island",
        newElementIcon: [],
        lockLevel: 210,
        landIcon: "island_8",
        isLandPos: {
            x: 505,
            y: 4400
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 350
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 290
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 290
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 300,
            y: 680
        }
    },
    land_9: {
        levelRange: [241, 270],
        levelRangedDes: "level 241-270",
        landName: "Ice Lake Island",
        newElementIcon: [],
        lockLevel: 240,
        landIcon: "island_9",
        isLandPos: {
            x: 225,
            y: 5E3
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 340
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 280
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 280
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 480,
            y: 860
        }
    },
    land_10: {
        levelRange: [271, 300],
        levelRangedDes: "level 271-300",
        landName: "Arch bridge island",
        newElementIcon: [],
        lockLevel: 270,
        landIcon: "island_10",
        isLandPos: {
            x: 505,
            y: 5600
        },
        unLockNamePos: {
            x: 0,
            y: 80
        },
        lockNamePos: {
            x: 0,
            y: 310
        },
        unLockDesBgPos: {
            x: 0,
            y: -15
        },
        lockDesBgPos: {
            x: 0,
            y: 250
        },
        unLockDesPos: {
            x: 0,
            y: 10
        },
        lockDesPos: {
            x: 0,
            y: 250
        },
        newElementPos: {
            x: -45,
            y: -30
        },
        tarBoxKeyPos: {
            x: 390,
            y: 750
        }
    }
};
Global.isLanddes1 = "New element shows in level";
Global.surpassDes = "Clear %s more stages, \nyou could surpass me";
Global.powerPrice = 200;
Global.isShopNewIcon = 1;
Global.watchAD_share_count = 0;
Global.noheartDes = "Chances are used up, please come tomorrow.";
Global.interstitialAdCD = 0;
Global.isWatchAD = !1;
Global.isOpenMessage = !1;
Global.runStartGame = !1;
var DataMgr = {
    getElementDataByID: function(a) {
        for (var b = 0; b < Global.elements.length; ++b) {
            var c = Global.elements[b];
            if (c.id === a)
                return c
        }
        return null
    },
    getElementIconNameByID: function(a) {
        if (a = this.getElementDataByID(a))
            return "element/" + a.icon + ".png"
    },
    getElementTipIconNameByType: function(a, b) {
        return "element/" + a + b + ".png"
    },
    getItemNumByID: function(a) {
        isNaN(gameUserData.items["" + a]) && (gameUserData.items["" + a] = 0);
        return gameUserData.items["" + a]
    },
    addItemByID: function(a, b) {
        isNaN(gameUserData.items["" + a]) && (gameUserData.items["" + a] = 0);
        gameUserData.items["" + a] += b;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    subItemByID: function(a, b) {
        isNaN(gameUserData.items["" + a]) && (gameUserData.items["" + a] = 0);
        if (gameUserData.items["" + a] < b)
            return -1;
        gameUserData.items["" + a] -= b;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    getLevelData: function(a) {
        return 1 == Global.gameType ? Global.levelTarget["level" + a] : Global.weekGamelevelTarget["level" + a]
    },
    getScoreByNum: function(a) {
        return (2 + a) * (a - 1) * 5
    },
    getPosByGrid: function(a, b) {
        return {
            x: b * Global.elementSize + Global.mapOffsetX,
            y: a * Global.elementSize + Global.mapOffsetY
        }
    },
    getNewElementData: function() {
        var a;
        a = 1 == Global.gameType ? Global.levelTarget["level" + Global.chooseLv].elements : Global.weekGamelevelTarget["level" + Global.gameWeekLv].elements;
        var b = 0
          , b = 0;
        a && 1 <= a.length ? (b = Utils.getRandomNum(a.length) - 1,
        b = a[b]) : b = Utils.getRandomNum(5);
        return "" + b
    },
    getTargetIndex: function(a) {
        var b = PieceMgr.lvData.targets, c;
        for (c in b)
            if (b[c].id === a) {
                if (0 < b[c].num)
                    return c;
                null == targetStep[b[c].id] && (targetStep[b[c].id] = {},
                targetStep[b[c].id].targetStep = PieceMgr.lvData.step);
                if (targetStep[b[c].id].targetStep == PieceMgr.lvData.step)
                    return c
            }
        return -1
    },
    refreshTargetData: function(a) {
        var b = PieceMgr.lvData.targets, c;
        for (c in b)
            b[c].id === a && 0 < b[c].num && (b[c].num -= 1)
    },
    getTargetData: function(a) {
        var b = PieceMgr.lvData.targets, c;
        for (c in b)
            if (b[c].id === a)
                return b[c].num
    },
    getAnimationNameByID: function(a) {
        var b = null;
        switch (a) {
        case 1:
            b = "red";
            break;
        case 2:
            b = "blue";
            break;
        case 3:
            b = "yellow";
            break;
        case 4:
            b = "green";
            break;
        case 5:
            b = "purple";
            break;
        default:
            cc.log("out of id ~~~~~")
        }
        return b
    }
};
var createTargetPeopleDate = function() {
    Global.targetPeople = [];
    for (var a = 0; 5 > a; a++) {
        var b = Global.robot[a]
          , c = {};
        c.name = b.name;
        c.image = b.image;
        c.photo = b.image;
        c.playerid = b.pid;
        c.friendType = 2;
        c.level = 0 == a ? gameUserData.todayInitLv + getTargetRobotSurpassLv() : Global.targetPeople[a - 1].level + getTargetRobotSurpassLv();
        c.starNum = 3 * c.level;
        c.getHonor = Math.ceil((c.level - gameUserData.todayInitLv) * Global.robotGetHonorEveryLv);
        c.beRanked = !1;
        Global.targetPeople[a] = c
    }
    targetPeoplePostServer()
}
  , getTargetRobotSurpassLv = function() {
    var a = 0;
    return a = 50 > gameUserData.todayInitLv ? getRandomInt(2, 3) : 100 > gameUserData.todayInitLv ? getRandomInt(1, 3) : getRandomInt(1, 2)
}
  , targetPeoplePostServer = function() {
    if (!(null == Global.targetPeople || 0 >= Global.targetPeople.length)) {
        for (var a = "", b = 0; b < Global.targetPeople.length; b++)
            var c = Global.targetPeople[b]
              , a = 0 == b ? a + c.playerid + "," + c.level + "," + c.starNum : a + "|" + c.playerid + "," + c.level + "," + c.starNum;
        gameUserData.tarStr = a;
        gameUserData.is_today_first_login = 0;
        gameSDK.saveUserData(getSaveFBData(), null)
    }
}
  , parseTargetPeople = function(a) {
    if (null != a && "" != a) {
        Global.targetPeople = [];
        a = a.split("|");
        for (var b = 0; b < a.length; b++) {
            var c = a[b].split(",")
              , d = {};
            d.playerid = parseInt(c[0]);
            for (var e = null, f = 0; f < Global.robot.length; f++)
                if (d.playerid == Global.robot[f].pid) {
                    e = Global.robot[f];
                    break
                }
            null != e && (d.name = e.name,
            d.image = e.image,
            d.photo = e.image,
            d.friendType = 2,
            d.level = parseInt(c[1]),
            d.beRanked = d.level < gameUserData.lv ? !0 : !1,
            d.getHonor = Math.ceil((d.level - gameUserData.todayInitLv) * Global.robotGetHonorEveryLv),
            d.starNum = parseInt(c[2]),
            Global.targetPeople.push(d))
        }
    }
}
  , getHonorRankByType = function(a) {
    for (var b = [], c = [], c = 1 == a ? Global.targetPeople : friendList, d = 0; d < c.length; d++) {
        var e = {};
        e.name = c[d].name;
        e.level = c[d].level;
        e.playerid = c[d].playerid;
        e.getHonor = c[d].getHonor;
        e.photo = c[d].photo;
        b.push(e)
    }
    1 == a && (a = {},
    a.name = gameSDK.sdkPlayInfo.name,
    a.level = gameUserData.lv,
    a.playerid = gameSDK.sdkPlayInfo.id,
    a.photo = gameSDK.sdkPlayInfo.photo,
    a.getHonor = 0,
    b.push(a));
    b.sort(function(a, b) {
        return parseInt(b.level) - parseInt(a.level)
    });
    return b
}
  , getHonorRankData = function(a, b) {
    for (var c = {}, d = getHonorRankByType(b), e = 0; e < d.length; e++)
        if (d[e].playerid == a) {
            c = d[e];
            c.rankNum = e + 1;
            break
        }
    return c
}
  , checkIsHaveRobot = function(a) {
    for (var b = 0; b < Global.targetPeople.length; b++)
        if (Global.targetPeople[b].level == a)
            return !0;
    return !1
}
  , checkIsHaveFriend = function(a) {
    for (var b = 0; b < Global.addMapFriendData.length; b++)
        if (Global.addMapFriendData[b].level == a)
            return !0;
    return !1
}
  , checkFriendIsInvite = function(a) {
    for (var b = 0; b < gameUserData.invite_ids.length; b++)
        if (gameUserData.invite_ids[b] == a)
            return !0;
    return !1
}
  , chooseFriendsToAddMap = function() {
    Global.addMapFriendData = [];
    for (var a = [], b = [], c = 0; c < friendList.length; c++)
        friendList[c].level < gameUserData.lv ? b.push(friendList[c]) : friendList[c].level > gameUserData.lv && a.push(friendList[c]);
    b.sort(function(a, b) {
        return parseInt(b.level) - parseInt(a.level)
    });
    a.sort(function(a, b) {
        return parseInt(a.level) - parseInt(b.level)
    });
    for (c = 0; c < a.length && !(!1 == checkIsHaveRobot(a[c].level) && !1 == checkIsHaveFriend(a[c].level) && Global.addMapFriendData.push(a[c]),
    Global.addMapFriendData.length >= Global.friendHeadNum); c++)
        ;
    a = 0;
    c = Global.friendHeadNum - Global.addMapFriendData.length;
    a = b.length;
    a = c < a ? c : a;
    for (c = 0; c < a; c++)
        !1 == checkIsHaveRobot(b[c].level) && !1 == checkIsHaveFriend(b[c].level) && Global.addMapFriendData.push(b[c])
}
  , getServerTomorrow = function() {
    var a = new Date;
    a.setTime(1E3 * getCheckoutServerTime());
    a.setDate(a.getDate() + 1);
    a.setHours(0);
    a.setMinutes(0);
    a.setSeconds(0);
    return Math.floor(a.getTime() / 1E3)
}
  , getComputeTime = function(a) {
    var b = Math.floor(a / 3600);
    0 == b ? b = "00" : 10 > b && (b = "0" + b);
    var c = Math.floor(a % 3600 / 60);
    0 == c ? c = "00" : 10 > c && (c = "0" + c);
    a = Math.floor(a % 3600 % 60);
    0 == a ? a = "00" : 10 > a && (a = "0" + a);
    return b + ":" + c + ":" + a
}
  , getCheckoutServerTime = function() {
    return Global.severTime + (engineGameRunTime() - Global.curGameRunTime) / 1E3
}
  , showTipsAction = function(a, b) {
    if (null == b.getChildByName("tipAction")) {
        var c = new cc.LabelTTF(a,"jellyboom_font",32);
        c.enableStroke(cc.color(0, 0, 0, 255), 2);
        c.y = 770;
        c.x = 360;
        c.setName("tipAction");
        b.addChild(c, 100);
        c.setScale(0);
        c.runAction(cc.sequence(cc.scaleTo(0.1, 1), cc.moveBy(2, cc.p(0, 70)), cc.fadeOut(0.5), cc.removeSelf()))
    }
}
  , updateWeekGameRank = function() {
    for (var a = 0; a < Global.weekRank.length; a++)
        if (Global.weekRank[a].playerid == gameSDK.sdkPlayInfo.id) {
            Global.weekRank[a].hurt = gameUserData.myHurt;
            break
        }
    Global.weekRank.sort(function(a, c) {
        return parseInt(c.hurt) - parseInt(a.hurt)
    })
}
  , getWeekGameLastRanking = function(a) {
    null == a && (a = gameSDK.sdkPlayInfo.id);
    for (var b = [], c = 0; c < Global.weekRank.length; c++) {
        var d = {};
        d.playerid = Global.weekRank[c].playerid;
        d.last_hurt = Global.weekRank[c].last_hurt;
        b.push(d)
    }
    b.sort(function(a, b) {
        return parseInt(b.last_hurt) - parseInt(a.last_hurt)
    });
    for (c = 0; c < b.length; c++)
        if (b[c].playerid == a)
            return c + 1;
    return 0
}
  , getWeekGameLastScore = function(a) {
    null == a && (a = gameSDK.sdkPlayInfo.id);
    for (var b = 0; b < Global.weekRank.length; b++) {
        var c = Global.weekRank[b];
        if (a == c.playerid && 0 == c.hurt)
            return !1
    }
    return !0
};
function getRandomInt(a, b) {
    return Math.floor(Math.random() * (b - a + 1)) + a
}
var addHonorFun = function(a) {
    var b = 0
      , c = Global.honorRewardList[gameUserData.honor_reward_index].honorNum;
    gameUserData.honor < c && (b = c - gameUserData.honor >= a ? a : c - gameUserData.honor,
    gameUserData.honor += b);
    return b
};
Global.levelTarget = {
    level1: {
        score: [1500, 3E3, 7500, 2E4],
        step: 25,
        targets: [{
            id: 2,
            num: 12
        }, {
            id: 1,
            num: 8
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level2: {
        score: [2E3, 4E3, 6E3, 25E3],
        step: 20,
        targets: [{
            id: 4,
            num: 12
        }, {
            id: 2,
            num: 7
        }, {
            id: 3,
            num: 12
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level3: {
        score: [2E3, 4E3, 6E3, 28E3],
        step: 20,
        targets: [{
            id: 1,
            num: 20
        }, {
            id: 2,
            num: 16
        }, {
            id: 4,
            num: 25
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level4: {
        score: [3E3, 6E3, 9E3, 52E3],
        step: 25,
        targets: [{
            id: 4,
            num: 40
        }, {
            id: 1,
            num: 40
        }, {
            id: 3,
            num: 40
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level5: {
        score: [2500, 5E3, 7500, 57E3],
        step: 24,
        targets: [{
            id: 45,
            num: 30
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level6: {
        score: [2500, 5E3, 7500, 57E3],
        step: 28,
        targets: [{
            id: 45,
            num: 48
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level7: {
        score: [2E3, 4E3, 6E3, 2E4],
        step: 26,
        targets: [{
            id: 45,
            num: 28
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level8: {
        score: [3E3, 6E3, 9E3, 25E3],
        step: 23,
        targets: [{
            id: 45,
            num: 30
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level9: {
        score: [2E3, 4E3, 6E3, 2E4],
        step: 28,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level10: {
        score: [2E3, 4E3, 6E3, 12E3],
        special: 1,
        step: 25,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level11: {
        score: [2500, 5E3, 7500, 3E4],
        step: 31,
        targets: [{
            id: 14,
            num: 6
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level12: {
        score: [3500, 7E3, 10500, 27500],
        step: 35,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 32
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level13: {
        score: [3E3, 6E3, 9E3, 25E3],
        step: 26,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 34
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level14: {
        score: [3500, 7E3, 10500, 27500],
        step: 28,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 28
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level15: {
        score: [3500, 7E3, 10500, 17500],
        special: 1,
        step: 35,
        targets: [{
            id: 45,
            num: 18
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4, 5],
        showElement: 11
    },
    level16: {
        score: [3500, 7E3, 10500, 27500],
        step: 26,
        targets: [{
            id: 17,
            num: 38
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level17: {
        score: [2500, 5E3, 7500, 22500],
        step: 21,
        targets: [{
            id: 17,
            num: 32
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level18: {
        score: [3500, 7E3, 10500, 27500],
        step: 31,
        targets: [{
            id: 17,
            num: 32
        }, {
            id: 45,
            num: 32
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level19: {
        score: [3500, 7E3, 10500, 27500],
        step: 23,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level20: {
        score: [3E3, 6E3, 9E3, 25E3],
        step: 34,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 17,
            num: 32
        }, {
            id: 45,
            num: 32
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level21: {
        score: [3500, 7E3, 10500, 24E3],
        step: 28,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 14
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level22: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 28,
        targets: [{
            id: 18,
            num: 32
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level23: {
        score: [3500, 7E3, 10500, 15E3],
        special: 1,
        step: 30,
        targets: [{
            id: 18,
            num: 32
        }, {
            id: 17,
            num: 16
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level24: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 32,
        targets: [{
            id: 18,
            num: 56
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4, 5],
        showElement: 1
    },
    level25: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 28,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 18,
            num: 16
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level26: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 30,
        targets: [{
            id: 17,
            num: 30
        }, {
            id: 18,
            num: 30
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level27: {
        score: [3500, 7E3, 10500, 14E3],
        special: 1,
        step: 34,
        targets: [{
            id: 18,
            num: 28
        }, {
            id: 45,
            num: 4
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4, 5],
        showElement: 1
    },
    level28: {
        score: [3600, 7200, 10800, 24400],
        step: 27,
        targets: [{
            id: 45,
            num: 16
        }, {
            id: 18,
            num: 16
        }, {
            id: 17,
            num: 16
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level29: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 28,
        targets: [{
            id: 18,
            num: 32
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level30: {
        score: [3500, 7E3, 10500, 24E3],
        step: 32,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 45,
            num: 25
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level31: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 30,
        targets: [{
            id: 46,
            num: 38
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level32: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 31,
        targets: [{
            id: 46,
            num: 40
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level33: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 41,
        targets: [{
            id: 18,
            num: 50
        }, {
            id: 46,
            num: 20
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level34: {
        score: [4E3, 8E3, 12E3, 18E3],
        special: 1,
        step: 34,
        targets: [{
            id: 45,
            num: 16
        }, {
            id: 46,
            num: 16
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level35: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 36,
        targets: [{
            id: 46,
            num: 24
        }, {
            id: 18,
            num: 8
        }, {
            id: 17,
            num: 30
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level36: {
        score: [3500, 7E3, 10500, 24E3],
        step: 33,
        targets: [{
            id: 46,
            num: 26
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level37: {
        score: [3500, 7E3, 10500, 24E3],
        step: 27,
        targets: [{
            id: 45,
            num: 22
        }, {
            id: 18,
            num: 18
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level38: {
        score: [3500, 7E3, 10500, 24E3],
        step: 33,
        targets: [{
            id: 17,
            num: 46
        }, {
            id: 46,
            num: 30
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level39: {
        score: [4500, 9E3, 13500, 28E3],
        step: 29,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 45,
            num: 21
        }, {
            id: 18,
            num: 22
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level40: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 33,
        targets: [{
            id: 18,
            num: 20
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4, 5],
        showElement: 1
    },
    level41: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 31,
        targets: [{
            id: 45,
            num: 32
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level42: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 32,
        targets: [{
            id: 17,
            num: 34
        }, {
            id: 18,
            num: 18
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level43: {
        score: [5500, 11E3, 16500, 42E3],
        step: 30,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 18,
            num: 18
        }, {
            id: 45,
            num: 18
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level44: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 33,
        targets: [{
            id: 45,
            num: 26
        }, {
            id: 46,
            num: 24
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level45: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 33,
        targets: [{
            id: 46,
            num: 30
        }, {
            id: 18,
            num: 24
        }, {
            id: 45,
            num: 16
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level46: {
        score: [4500, 9E3, 13500, 18E3],
        step: 28,
        targets: [{
            id: 46,
            num: 20
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level47: {
        score: [3E3, 6E3, 9E3, 22E3],
        special: 1,
        step: 37,
        targets: [{
            id: 17,
            num: 24
        }, {
            id: 46,
            num: 16
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level48: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 35,
        targets: [{
            id: 19,
            num: 16
        }],
        topcustombg: 2,
        elements: [1, 2, 3, 4, 5],
        showElement: 3
    },
    level49: {
        score: [4700, 9400, 14100, 28800],
        step: 27,
        targets: [{
            id: 19,
            num: 24
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level50: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 34,
        targets: [{
            id: 19,
            num: 8
        }, {
            id: 17,
            num: 6
        }, {
            id: 18,
            num: 28
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level51: {
        score: [3500, 7E3, 10500, 24E3],
        step: 33,
        targets: [{
            id: 45,
            num: 16
        }, {
            id: 19,
            num: 20
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level52: {
        score: [3500, 7E3, 10500, 24E3],
        step: 36,
        targets: [{
            id: 46,
            num: 18
        }, {
            id: 18,
            num: 12
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level53: {
        score: [3200, 6400, 9600, 22800],
        step: 29,
        targets: [{
            id: 18,
            num: 18
        }, {
            id: 19,
            num: 16
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level54: {
        score: [2500, 5E3, 7500, 2E4],
        step: 29,
        targets: [{
            id: 17,
            num: 36
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level55: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 33,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level56: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 45,
        targets: [{
            id: 46,
            num: 36
        }, {
            id: 19,
            num: 22
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level57: {
        score: [3500, 7E3, 10500, 24E3],
        step: 32,
        targets: [{
            id: 17,
            num: 25
        }, {
            id: 46,
            num: 13
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level58: {
        score: [4500, 9E3, 13500, 28E3],
        step: 44,
        targets: [{
            id: 17,
            num: 16
        }, {
            id: 19,
            num: 22
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level59: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 31,
        targets: [{
            id: 14,
            num: 6
        }, {
            id: 19,
            num: 6
        }, {
            id: 18,
            num: 12
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level60: {
        score: [2E3, 4E3, 6E3, 18E3],
        step: 35,
        targets: [{
            id: 18,
            num: 32
        }, {
            id: 45,
            num: 4
        }, {
            id: 19,
            num: 20
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level61: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 30,
        targets: [{
            id: 20,
            num: 40
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level62: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 30,
        targets: [{
            id: 20,
            num: 32
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 10
    },
    level63: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 35,
        targets: [{
            id: 20,
            num: 16
        }, {
            id: 18,
            num: 44
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level64: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 36,
        targets: [{
            id: 45,
            num: 24
        }, {
            id: 20,
            num: 24
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level65: {
        score: [4E3, 8E3, 12E3, 18E3],
        special: 1,
        step: 45,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 20,
            num: 14
        }, {
            id: 18,
            num: 10
        }, {
            id: 19,
            num: 4
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level66: {
        score: [2E3, 4E3, 6E3, 18E3],
        step: 45,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 46,
            num: 35
        }, {
            id: 19,
            num: 12
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level67: {
        score: [4500, 9E3, 13500, 28E3],
        step: 42,
        targets: [{
            id: 46,
            num: 26
        }, {
            id: 20,
            num: 15
        }, {
            id: 19,
            num: 6
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level68: {
        score: [2500, 5E3, 7500, 2E4],
        step: 31,
        targets: [{
            id: 19,
            num: 8
        }, {
            id: 20,
            num: 8
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level69: {
        score: [4500, 9E3, 13500, 28E3],
        step: 29,
        targets: [{
            id: 17,
            num: 20
        }, {
            id: 18,
            num: 44
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level70: {
        score: [4700, 9400, 14100, 28800],
        special: 1,
        step: 31,
        targets: [{
            id: 18,
            num: 26
        }],
        topcustombg: 3,
        elements: [1, 2, 3, 4, 5],
        showElement: 1
    },
    level71: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 28,
        targets: [{
            id: 6,
            num: 2
        }, {
            id: 7,
            num: 2
        }, {
            id: 8,
            num: 2
        }, {
            id: 9,
            num: 2
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 9
    },
    level72: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 24,
        targets: [{
            id: 6,
            num: 1
        }, {
            id: 7,
            num: 1
        }, {
            id: 8,
            num: 1
        }, {
            id: 9,
            num: 1
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 9
    },
    level73: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 45,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level74: {
        score: [2E3, 4E3, 6E3, 18E3],
        step: 20,
        targets: [{
            id: 17,
            num: 6
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level75: {
        score: [4500, 9E3, 13500, 28E3],
        step: 41,
        targets: [{
            id: 17,
            num: 28
        }, {
            id: 18,
            num: 43
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level76: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 47,
        targets: [{
            id: 45,
            num: 13
        }, {
            id: 17,
            num: 23
        }, {
            id: 18,
            num: 12
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level77: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 39,
        targets: [{
            id: 46,
            num: 46
        }, {
            id: 19,
            num: 6
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level78: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 38,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level79: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 43,
        targets: [{
            id: 18,
            num: 42
        }, {
            id: 46,
            num: 14
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level80: {
        score: [4E3, 8E3, 12E3, 2E4],
        step: 57,
        targets: [{
            id: 17,
            num: 8
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level81: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 47,
        targets: [{
            id: 22,
            num: 6
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level82: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 47,
        targets: [{
            id: 22,
            num: 8
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level83: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 43,
        targets: [{
            id: 22,
            num: 4
        }, {
            id: 45,
            num: 36
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level84: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 44,
        targets: [{
            id: 22,
            num: 6
        }, {
            id: 18,
            num: 50
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level85: {
        score: [4E3, 8E3, 12E3, 26E3],
        special: 1,
        step: 54,
        targets: [{
            id: 22,
            num: 10
        }, {
            id: 46,
            num: 16
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level86: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 14,
            num: 3
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level87: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 46,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 16
        }, {
            id: 45,
            num: 20
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level88: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 37,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level89: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 18,
            num: 16
        }, {
            id: 45,
            num: 16
        }, {
            id: 17,
            num: 16
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4, 5],
        showElement: 1
    },
    level90: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 47,
        targets: [{
            id: 45,
            num: 28
        }, {
            id: 22,
            num: 4
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level91: {
        score: [4E3, 8E3, 12E3, 22E3],
        special: 1,
        step: 37,
        targets: [{
            id: 12,
            num: 16
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level92: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 34,
        targets: [{
            id: 12,
            num: 21
        }, {
            id: 45,
            num: 15
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level93: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 47,
        targets: [{
            id: 12,
            num: 28
        }, {
            id: 46,
            num: 15
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level94: {
        score: [3500, 7E3, 10500, 24E3],
        step: 45,
        targets: [{
            id: 12,
            num: 10
        }, {
            id: 20,
            num: 22
        }, {
            id: 17,
            num: 34
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level95: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 43,
        targets: [{
            id: 12,
            num: 30
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level96: {
        score: [4500, 9E3, 13500, 28E3],
        step: 42,
        targets: [{
            id: 19,
            num: 12
        }, {
            id: 20,
            num: 12
        }, {
            id: 17,
            num: 28
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level97: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 40,
        targets: [{
            id: 45,
            num: 24
        }, {
            id: 46,
            num: 30
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level98: {
        score: [4500, 9E3, 13500, 28E3],
        step: 37,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 18,
            num: 12
        }, {
            id: 12,
            num: 6
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4, 5],
        showElement: 7
    },
    level99: {
        score: [4500, 9E3, 13500, 28E3],
        step: 41,
        targets: [{
            id: 18,
            num: 22
        }, {
            id: 46,
            num: 26
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level100: {
        score: [4E3, 8E3, 12E3, 18E3],
        special: 1,
        step: 47,
        targets: [{
            id: 17,
            num: 52
        }, {
            id: 12,
            num: 24
        }, {
            id: 22,
            num: 4
        }],
        topcustombg: 5,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level101: {
        score: [2500, 5E3, 7500, 2E4],
        step: 32,
        targets: [{
            id: 13,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 6
    },
    level102: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 18,
            num: 40
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level103: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 38,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 46,
            num: 22
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level104: {
        score: [6E3, 12E3, 18E3, 34E3],
        step: 36,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 17,
            num: 24
        }, {
            id: 18,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level105: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 42,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 45,
            num: 48
        }, {
            id: 17,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level106: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 47,
        targets: [{
            id: 13,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level107: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 45,
        targets: [{
            id: 13,
            num: 3
        }, {
            id: 18,
            num: 29
        }, {
            id: 12,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level108: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 27,
        targets: [{
            id: 14,
            num: 7
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level109: {
        score: [3500, 7E3, 10500, 24E3],
        step: 40,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 18
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level110: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 35,
        targets: [{
            id: 14,
            num: 8
        }, {
            id: 17,
            num: 64
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level111: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 37,
        targets: [{
            id: 15,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level112: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 27,
        targets: [{
            id: 17,
            num: 8
        }, {
            id: 12,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level113: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 57,
        targets: [{
            id: 12,
            num: 8
        }, {
            id: 17,
            num: 8
        }, {
            id: 18,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level114: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 17,
            num: 44
        }, {
            id: 18,
            num: 12
        }, {
            id: 46,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level115: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 40,
        targets: [{
            id: 15,
            num: 7
        }, {
            id: 18,
            num: 49
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level116: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 42,
        targets: [{
            id: 12,
            num: 8
        }, {
            id: 13,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level117: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 17,
            num: 12
        }, {
            id: 19,
            num: 16
        }, {
            id: 22,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level118: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 13,
            num: 2
        }, {
            id: 12,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level119: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 42,
        targets: [{
            id: 45,
            num: 22
        }, {
            id: 20,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level120: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 17,
            num: 18
        }, {
            id: 12,
            num: 14
        }, {
            id: 13,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level121: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 22,
            num: 4
        }, {
            id: 19,
            num: 16
        }, {
            id: 18,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level122: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 43,
        targets: [{
            id: 46,
            num: 26
        }, {
            id: 19,
            num: 8
        }, {
            id: 18,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level123: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 44,
        targets: [{
            id: 14,
            num: 3
        }, {
            id: 19,
            num: 12
        }, {
            id: 46,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level124: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 46,
        targets: [{
            id: 13,
            num: 2
        }, {
            id: 19,
            num: 28
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level125: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 52,
        targets: [{
            id: 12,
            num: 36
        }, {
            id: 17,
            num: 36
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level126: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 33,
        targets: [{
            id: 47,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level127: {
        score: [2500, 5E3, 7500, 2E4],
        step: 36,
        targets: [{
            id: 47,
            num: 12
        }, {
            id: 18,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level128: {
        score: [2500, 5E3, 7500, 2E4],
        step: 40,
        targets: [{
            id: 47,
            num: 8
        }, {
            id: 45,
            num: 26
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level129: {
        score: [3500, 7E3, 10500, 24E3],
        step: 40,
        targets: [{
            id: 47,
            num: 12
        }, {
            id: 17,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level130: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 35,
        targets: [{
            id: 47,
            num: 18
        }, {
            id: 19,
            num: 9
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level131: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 37,
        targets: [{
            id: 47,
            num: 8
        }, {
            id: 18,
            num: 16
        }, {
            id: 19,
            num: 8
        }, {
            id: 46,
            num: 10
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level132: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 40,
        targets: [{
            id: 17,
            num: 48
        }, {
            id: 19,
            num: 16
        }, {
            id: 14,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level133: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 39,
        targets: [{
            id: 46,
            num: 18
        }, {
            id: 12,
            num: 8
        }, {
            id: 20,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level134: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 42,
        targets: [{
            id: 47,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 13
    },
    level135: {
        score: [3500, 7E3, 10500, 24E3],
        step: 42,
        targets: [{
            id: 47,
            num: 20
        }, {
            id: 45,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level136: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 44,
        targets: [{
            id: 18,
            num: 22
        }, {
            id: 19,
            num: 10
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 3
    },
    level137: {
        score: [3500, 7E3, 10500, 24E3],
        step: 37,
        targets: [{
            id: 47,
            num: 16
        }, {
            id: 46,
            num: 50
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level138: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 50,
        targets: [{
            id: 13,
            num: 2
        }, {
            id: 19,
            num: 6
        }, {
            id: 18,
            num: 14
        }, {
            id: 12,
            num: 10
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level139: {
        score: [2E3, 4E3, 6E3, 18E3],
        step: 46,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 26
        }, {
            id: 12,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level140: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 52,
        targets: [{
            id: 22,
            num: 6
        }, {
            id: 17,
            num: 36
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level141: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 52,
        targets: [{
            id: 46,
            num: 25
        }, {
            id: 17,
            num: 20
        }, {
            id: 12,
            num: 13
        }, {
            id: 18,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 12
    },
    level142: {
        score: [3500, 7E3, 10500, 24E3],
        step: 45,
        targets: [{
            id: 47,
            num: 14
        }, {
            id: 13,
            num: 2
        }, {
            id: 45,
            num: 18
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level143: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 37,
        targets: [{
            id: 45,
            num: 26
        }, {
            id: 47,
            num: 10
        }, {
            id: 17,
            num: 36
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level144: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 36,
        targets: [{
            id: 15,
            num: 12
        }, {
            id: 12,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level145: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 45,
        targets: [{
            id: 17,
            num: 16
        }, {
            id: 12,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level146: {
        score: [4500, 9E3, 13500, 28E3],
        step: 42,
        targets: [{
            id: 45,
            num: 21
        }, {
            id: 14,
            num: 2
        }, {
            id: 47,
            num: 7
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 11
    },
    level147: {
        score: [3500, 7E3, 10500, 24E3],
        step: 32,
        targets: [{
            id: 15,
            num: 18
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level148: {
        score: [4500, 9E3, 13500, 28E3],
        step: 52,
        targets: [{
            id: 18,
            num: 16
        }, {
            id: 12,
            num: 12
        }, {
            id: 46,
            num: 14
        }, {
            id: 17,
            num: 28
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level149: {
        score: [6E3, 12E3, 18E3, 34E3],
        step: 47,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 16
        }, {
            id: 46,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level150: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 37,
        targets: [{
            id: 19,
            num: 12
        }, {
            id: 14,
            num: 2
        }, {
            id: 20,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level151: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 49,
        targets: [{
            id: 12,
            num: 14
        }, {
            id: 15,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level152: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 47,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 45,
            num: 12
        }, {
            id: 18,
            num: 12
        }, {
            id: 12,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level153: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 37,
        targets: [{
            id: 19,
            num: 22
        }, {
            id: 15,
            num: 14
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level154: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 34,
        targets: [{
            id: 47,
            num: 12
        }, {
            id: 20,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 13
    },
    level155: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 40,
        targets: [{
            id: 47,
            num: 14
        }, {
            id: 46,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 13
    },
    level156: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 55,
        targets: [{
            id: 17,
            num: 32
        }, {
            id: 22,
            num: 4
        }, {
            id: 12,
            num: 16
        }, {
            id: 18,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level157: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 57,
        targets: [{
            id: 18,
            num: 32
        }, {
            id: 13,
            num: 4
        }, {
            id: 22,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level158: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 42,
        targets: [{
            id: 45,
            num: 28
        }, {
            id: 15,
            num: 10
        }, {
            id: 19,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 11
    },
    level159: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 43,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 12,
            num: 9
        }, {
            id: 18,
            num: 9
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level160: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 57,
        targets: [{
            id: 22,
            num: 4
        }, {
            id: 12,
            num: 32
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level161: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 77,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level162: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 27,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level163: {
        score: [7E3, 14E3, 21E3, 48E3],
        step: 67,
        targets: [{
            id: 22,
            num: 10
        }, {
            id: 14,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level164: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 47,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 18
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level165: {
        score: [4E3, 8E3, 12E3, 28E3],
        step: 37,
        targets: [{
            id: 19,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level166: {
        score: [6E3, 12E3, 18E3, 4E4],
        step: 57,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 36
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level167: {
        score: [7E3, 14E3, 21E3, 48E3],
        step: 67,
        targets: [{
            id: 12,
            num: 12
        }, {
            id: 22,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level168: {
        score: [4E3, 8E3, 12E3, 24E3],
        step: 37,
        targets: [{
            id: 17,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level169: {
        score: [6E3, 12E3, 18E3, 4E4],
        step: 57,
        targets: [{
            id: 18,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 1
    },
    level170: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 19,
            num: 16
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level171: {
        score: [4500, 9E3, 13500, 28E3],
        step: 42,
        targets: [{
            id: 15,
            num: 14
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level172: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 19,
            num: 12
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level173: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 18,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level174: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 22,
            num: 8
        }, {
            id: 17,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level175: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 14,
            num: 1
        }, {
            id: 12,
            num: 23
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level176: {
        score: [5E3, 1E4, 15E3, 32E3],
        step: 47,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level177: {
        score: [4E3, 8E3, 12E3, 28E3],
        step: 37,
        targets: [{
            id: 15,
            num: 10
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level178: {
        score: [9900, 19800, 29700, 59E3],
        step: 95,
        targets: [{
            id: 13,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level179: {
        score: [6500, 13E3, 19500, 48E3],
        step: 62,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level180: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 57,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 48
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level181: {
        score: [6E3, 12E3, 18E3, 42E3],
        step: 57,
        targets: [{
            id: 19,
            num: 60
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 3
    },
    level182: {
        score: [9E3, 18E3, 27E3, 58E3],
        step: 87,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 12,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level183: {
        score: [9E3, 18E3, 27E3, 58E3],
        step: 87,
        targets: [{
            id: 14,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 7
    },
    level184: {
        score: [9E3, 18E3, 27E3, 58E3],
        step: 87,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 17,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level185: {
        score: [7E3, 14E3, 21E3, 48E3],
        step: 67,
        targets: [{
            id: 12,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level186: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 77,
        targets: [{
            id: 17,
            num: 64
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level187: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 57,
        targets: [{
            id: 17,
            num: 20
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level188: {
        score: [8E3, 16E3, 24E3, 5E4],
        step: 77,
        targets: [{
            id: 17,
            num: 28
        }, {
            id: 18,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level189: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 57,
        targets: [{
            id: 15,
            num: 18
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 8
    },
    level190: {
        score: [5E3, 1E4, 15E3, 4E4],
        step: 47,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3],
        showElement: 4
    },
    level191: {
        score: [6E3, 12E3, 18E3, 4E4],
        step: 57,
        targets: [{
            id: 13,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 6
    },
    level192: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 77,
        targets: [{
            id: 17,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level193: {
        score: [9E3, 18E3, 27E3, 5E4],
        step: 87,
        targets: [{
            id: 22,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 2
    },
    level194: {
        score: [9E3, 18E3, 27E3, 5E4],
        step: 67,
        targets: [{
            id: 12,
            num: 4
        }, {
            id: 14,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 5
    },
    level195: {
        score: [4E3, 8E3, 12E3, 3E4],
        step: 37,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 4
    },
    level196: {
        score: [6E3, 12E3, 18E3, 4E4],
        step: 57,
        targets: [{
            id: 19,
            num: 8
        }, {
            id: 22,
            num: 6
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4],
        showElement: 2
    },
    level197: {
        score: [9E3, 18E3, 27E3, 5E4],
        step: 87,
        targets: [{
            id: 22,
            num: 2
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 2
    },
    level198: {
        score: [6E3, 12E3, 18E3, 44E3],
        step: 57,
        targets: [{
            id: 19,
            num: 24
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 3
    },
    level199: {
        score: [8E3, 16E3, 24E3, 42E3],
        step: 87,
        targets: [{
            id: 13,
            num: 4
        }, {
            id: 14,
            num: 4
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 6
    },
    level200: {
        score: [9E3, 18E3, 27E3, 45E3],
        step: 87,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        showElement: 4
    },
    level201: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 2,
            num: 30
        }, {
            id: 1,
            num: 30
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 10
    },
    level202: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 1,
            num: 20
        }, {
            id: 2,
            num: 20
        }, {
            id: 3,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 10
    },
    level203: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 14,
            num: 6
        }, {
            id: 4,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level204: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 18,
            num: 16
        }, {
            id: 4,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 1
    },
    level205: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 17,
            num: 16
        }, {
            id: 1,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level206: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 12,
            num: 8
        }, {
            id: 2,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level207: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 19,
            num: 10
        }, {
            id: 2,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 3
    },
    level208: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 22,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level209: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 13,
            num: 8
        }, {
            id: 4,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level210: {
        score: [2E3, 4E3, 6E3, 8E3],
        step: 20,
        targets: [{
            id: 15,
            num: 16
        }, {
            id: 4,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 8
    },
    level211: {
        score: [2500, 5E3, 7500, 1E4],
        step: 25,
        targets: [{
            id: 17,
            num: 24
        }, {
            id: 3,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level212: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 17,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level213: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 15,
            num: 14
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 8
    },
    level214: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 22,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level215: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 15,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 8
    },
    level216: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 17,
            num: 28
        }, {
            id: 13,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level217: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level218: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 12
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level219: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 12,
            num: 14
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level220: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 22,
            num: 2
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level221: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 18,
            num: 12
        }, {
            id: 2,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 1
    },
    level222: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 12,
            num: 6
        }, {
            id: 13,
            num: 8
        }, {
            id: 15,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 8
    },
    level223: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 12,
            num: 16
        }, {
            id: 14,
            num: 2
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level224: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 14
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level225: {
        score: [2E3, 4E3, 6E3, 8E3],
        step: 20,
        targets: [{
            id: 1,
            num: 40
        }, {
            id: 4,
            num: 40
        }, {
            id: 2,
            num: 40
        }, {
            id: 3,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 10
    },
    level226: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 13,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level227: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 18,
            num: 30
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 1
    },
    level228: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 8,
            num: 2
        }, {
            id: 9,
            num: 2
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 9
    },
    level229: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 18,
            num: 16
        }, {
            id: 22,
            num: 2
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level230: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 3
    },
    level231: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 17,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level232: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level233: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 17,
            num: 20
        }, {
            id: 22,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level234: {
        score: [7E3, 14E3, 21E3, 28E3],
        step: 70,
        targets: [{
            id: 17,
            num: 64
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level235: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 12,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 31, 32, 33],
        showElement: 5
    },
    level236: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 7
    },
    level237: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 7
    },
    level238: {
        score: [6E3, 12E3, 18E3, 25E3],
        step: 60,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 19,
            num: 12
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level239: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level240: {
        score: [2E3, 4E3, 6E3, 12E3],
        step: 60,
        targets: [{
            id: 17,
            num: 18
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level241: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 5,
            num: 60
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 7
    },
    level242: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 15,
            num: 8
        }, {
            id: 4,
            num: 40
        }, {
            id: 1,
            num: 40
        }, {
            id: 3,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 8
    },
    level243: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 5,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 7
    },
    level244: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 13,
            num: 4
        }, {
            id: 5,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 6
    },
    level245: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 3,
            num: 40
        }, {
            id: 4,
            num: 40
        }, {
            id: 2,
            num: 40
        }, {
            id: 5,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 10
    },
    level246: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 17,
            num: 20
        }, {
            id: 5,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level247: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level248: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 17,
            num: 12
        }, {
            id: 5,
            num: 40
        }, {
            id: 1,
            num: 40
        }, {
            id: 3,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level249: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 18,
            num: 18
        }, {
            id: 13,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 6
    },
    level250: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 18,
            num: 24
        }, {
            id: 17,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 1
    },
    level251: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 22
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level252: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 17,
            num: 40
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level253: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 18,
            num: 12
        }, {
            id: 22,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 2
    },
    level254: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 19,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level255: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 17,
            num: 26
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level256: {
        score: [3E3, 6E3, 9E3, 12E3],
        step: 30,
        targets: [{
            id: 17,
            num: 16
        }, {
            id: 1,
            num: 30
        }, {
            id: 5,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level257: {
        score: [6E3, 12E3, 18E3, 24E3],
        step: 60,
        targets: [{
            id: 17,
            num: 16
        }, {
            id: 19,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level258: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 14,
            num: 2
        }, {
            id: 18,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 1
    },
    level259: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 19,
            num: 12
        }, {
            id: 17,
            num: 12
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level260: {
        score: [4E3, 8E3, 12E3, 16E3],
        step: 40,
        targets: [{
            id: 18,
            num: 16
        }, {
            id: 19,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level261: {
        score: [7500, 15E3, 3E4, 5E4],
        step: 70,
        targets: [{
            id: 22,
            num: 2
        }, {
            id: 19,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level262: {
        score: [6E3, 12E3, 16E3, 22E3],
        step: 50,
        targets: [{
            id: 22,
            num: 4
        }, {
            id: 17,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level263: {
        score: [8800, 14E3, 2E4, 3E4],
        step: 60,
        targets: [{
            id: 15,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 8
    },
    level264: {
        score: [7E3, 14E3, 21E3, 38E3],
        step: 60,
        targets: [{
            id: 22,
            num: 2
        }, {
            id: 12,
            num: 18
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level265: {
        score: [6200, 12400, 2E4, 38E3],
        step: 75,
        targets: [{
            id: 13,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level266: {
        score: [6600, 13E3, 22E3, 38E3],
        step: 48,
        targets: [{
            id: 19,
            num: 6
        }, {
            id: 17,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 3
    },
    level267: {
        score: [5E3, 15E3, 26E3, 38E3],
        step: 40,
        targets: [{
            id: 13,
            num: 2
        }, {
            id: 19,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 6
    },
    level268: {
        score: [6600, 12600, 2E4, 4E4],
        step: 38,
        targets: [{
            id: 12,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level269: {
        score: [5E3, 12E3, 16E3, 22E3],
        step: 50,
        targets: [{
            id: 13,
            num: 2
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level270: {
        score: [3E3, 6800, 15E3, 32E3],
        step: 64,
        targets: [{
            id: 15,
            num: 12
        }, {
            id: 17,
            num: 48
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32],
        showElement: 8
    },
    level271: {
        score: [6200, 12400, 2E4, 28E3],
        step: 50,
        targets: [{
            id: 1,
            num: 70
        }, {
            id: 3,
            num: 70
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 1, 2, 1, 2, 31, 32],
        showElement: 10
    },
    level272: {
        score: [4500, 7E3, 10500, 15E3],
        step: 30,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level273: {
        score: [5500, 1E4, 2E4, 35E3],
        step: 30,
        targets: [{
            id: 14,
            num: 3
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 31, 32, 33],
        showElement: 7
    },
    level274: {
        score: [4E3, 8E3, 14E3, 25E3],
        step: 40,
        targets: [{
            id: 19,
            num: 12
        }, {
            id: 12,
            num: 28
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 3
    },
    level275: {
        score: [6E3, 1E4, 2E4, 28E3],
        step: 50,
        targets: [{
            id: 17,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level276: {
        score: [6E3, 1E4, 15E3, 22E3],
        step: 40,
        targets: [{
            id: 12,
            num: 20
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 5
    },
    level277: {
        score: [4E3, 8E3, 11E3, 22E3],
        step: 40,
        targets: [{
            id: 17,
            num: 32
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level278: {
        score: [7E3, 12E3, 28E3, 35E3],
        step: 72,
        targets: [{
            id: 14,
            num: 1
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level279: {
        score: [12E3, 18E3, 24E3, 3E4],
        step: 66,
        topcustombg: 7,
        targets: [{
            id: 17,
            num: 22
        }],
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level280: {
        score: [8800, 18800, 28800, 38800],
        step: 72,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level281: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 60,
        targets: [{
            id: 22,
            num: 4
        }, {
            id: 17,
            num: 28
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 2
    },
    level282: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 40,
        targets: [{
            id: 15,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 8
    },
    level283: {
        score: [5E3, 1E4, 15E3, 2E4],
        step: 50,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 7
    },
    level284: {
        score: [6E3, 9E3, 12E3, 3E4],
        step: 30,
        targets: [{
            id: 17,
            num: 6
        }, {
            id: 12,
            num: 12
        }],
        topcustombg: 7,
        elements: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 31, 32],
        showElement: 5
    },
    level285: {
        score: [4E3, 8E3, 12E3, 2E4],
        step: 40,
        targets: [{
            id: 17,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level286: {
        score: [4E3, 8E3, 12E3, 25E3],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }, {
            id: 17,
            num: 32
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level287: {
        score: [2500, 5E3, 7500, 2E4],
        step: 60,
        targets: [{
            id: 6,
            num: 4
        }, {
            id: 12,
            num: 4
        }, {
            id: 7,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 9
    },
    level288: {
        score: [2500, 5E3, 7500, 2E4],
        step: 30,
        targets: [{
            id: 17,
            num: 62
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 4
    },
    level289: {
        score: [4E3, 7E3, 10500, 2E4],
        step: 40,
        targets: [{
            id: 19,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 3
    },
    level290: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 40,
        targets: [{
            id: 12,
            num: 12
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 5
    },
    level291: {
        score: [3E3, 6E3, 9E3, 22E3],
        step: 40,
        targets: [{
            id: 14,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level292: {
        score: [5E3, 1E4, 15E3, 25E3],
        step: 50,
        targets: [{
            id: 14,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 7
    },
    level293: {
        score: [6E3, 12E3, 18E3, 3E4],
        step: 60,
        targets: [{
            id: 12,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 5
    },
    level294: {
        score: [3E3, 6E3, 9E3, 2E4],
        step: 40,
        targets: [{
            id: 13,
            num: 10
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 6
    },
    level295: {
        score: [3500, 7E3, 10500, 2E4],
        step: 40,
        targets: [{
            id: 19,
            num: 18
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 3
    },
    level296: {
        score: [4E3, 8E3, 12E3, 22E3],
        step: 40,
        targets: [{
            id: 18,
            num: 24
        }, {
            id: 19,
            num: 10
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 1
    },
    level297: {
        score: [3500, 7E3, 10500, 24E3],
        step: 45,
        targets: [{
            id: 17,
            num: 22
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 4
    },
    level298: {
        score: [8E3, 16E3, 24E3, 52E3],
        step: 80,
        targets: [{
            id: 22,
            num: 8
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 31, 32, 34, 33],
        showElement: 2
    },
    level299: {
        score: [2E3, 4E3, 6E3, 15E3],
        step: 30,
        targets: [{
            id: 18,
            num: 24
        }, {
            id: 17,
            num: 16
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 1
    },
    level300: {
        score: [4E3, 8E3, 12E3, 26E3],
        step: 50,
        targets: [{
            id: 19,
            num: 14
        }, {
            id: 13,
            num: 4
        }],
        topcustombg: 7,
        elements: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 31, 32, 34, 33],
        showElement: 6
    }
};
Global.maps = [["00000000".split(""), "22123232".split(""), "42231433".split(""), "31121224".split(""), "34344321".split(""), "31234212".split(""), "21213212".split(""), "00000000".split("")], ["00000000".split(""), "04142440".split(""), "03122140".split(""), "04422120".split(""), "03331440".split(""), "01121430".split(""), "01314330".split(""), "00000000".split("")], ["00000000".split(""), "02243210".split(""), "41444223".split(""), "31444332".split(""), "31222341".split(""), "32211124".split(""), "03111120".split(""), "00000000".split("")], ["01133320".split(""), "01234320".split(""), "13334341".split(""), "34111144".split(""), "14111112".split(""), "13333112".split(""), "03333330".split(""), "03222240".split("")], ["23224412".split(""), "13231122".split(""), "34144233".split(""), "4 45 45 45 45 45 45 2".split(" "), "2 45 45 45 45 45 45 2".split(" "), "4 45 45 45 45 45 45 4".split(" "), "3 45 45 45 45 45 45 4".split(" "), "1 45 45 45 45 45 45 2".split(" ")], ["45 45 45 45 45 45 45 45".split(" "), "45 3 3 45 45 1 2 45".split(" "), "45 1 1 45 45 2 3 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 4 4 45 45 4 3 45".split(" "), "45 1 3 45 45 3 4 45".split(" "), "45 45 45 45 45 45 45 45".split(" ")], ["3 1 1 2 45 45 45 45".split(" "), "1 1 2 3 45 45 45 45".split(" "), "2 3 2 0 0 45 45 45".split(" "), "2 3 2 0 0 45 45 45".split(" "), "4 1 3 0 0 45 45 45".split(" "), "4 4 3 0 0 45 45 45".split(" "), "4 3 3 1 45 45 45 45".split(" "), "2 2 3 1 45 45 45 45".split(" ")], ["0 45 45 45 45 45 45 0".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "42414344".split(""), "32343423".split(""), "13331441".split(""), "01124410".split("")], ["0 14 14 0 0 14 14 0".split(" "), "13200423".split(""), "13200433".split(""), "43200123".split(""), "24312341".split(""), "14211213".split(""), "24232341".split(""), "14312331".split("")], ["3 14 3 14 14 3 14 1".split(" "), "12323323".split(""), "24142441".split(""), "21011012".split(""), "31042011".split(""), "03233120".split(""), "00143100".split(""), "00024000".split("")], ["14 0 14 14 14 14 0 14".split(" "), "54435133".split(""), "24533411".split(""), "21211251".split(""), "33342255".split(""), "23221124".split(""), "35141155".split(""), "05500550".split("")], ["14 14 14 14 45 45 45 45".split(" "), "1 1 3 4 45 45 45 45".split(" "), "2 3 1 3 45 45 45 45".split(" "), "1 4 3 1 45 45 45 45".split(" "), "3 4 4 3 45 45 45 45".split(" "), "1 3 2 3 45 45 45 45".split(" "), "4 4 3 3 45 45 45 45".split(" "), "3 1 1 2 45 45 45 45".split(" ")], ["14 0 0 14 14 0 0 14".split(" "), "12232443".split(""), "45 3 3 45 45 1 3 45".split(" "), "45 3 2 45 45 1 3 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "0 45 45 45 45 45 45 0".split(" "), "0 45 45 45 45 45 45 0".split(" "), "0 45 45 45 45 45 45 0".split(" ")], ["14 1 14 0 0 14 3 14".split(" "), "45 2 45 1 4 45 1 45".split(" "), "45 4 45 1 3 45 4 45".split(" "), "45 3 45 2 3 45 4 45".split(" "), "45 3 45 4 1 45 2 45".split(" "), "45 2 45 1 3 45 2 45".split(" "), "45 3 45 3 3 45 2 45".split(" "), "45 4 45 0 0 45 4 45".split(" ")], ["0 14 14 0 0 14 14 0".split(" "), "11212334".split(""), "5 45 45 45 45 45 45 4".split(" "), "15354534".split(""), "33224345".split(""), "1 45 45 45 45 45 45 1".split(" "), "3 45 45 45 45 45 45 3".split(" "), "03400450".split("")], ["41400232".split(""), "2 2+17 4+17 5+17 4+17 3+17 1+17 1".split(" "), "3 1+17 4+17 2+17 3+17 5+17 4+17 1".split(" "), "0 3+17 1+17 5+17 3+17 4+17 4+17 0".split(" "), "0 3+17 1+17 5+17 3+17 4+17 5+17 0".split(" "), "4+17 2+17 4+17 1+17 5+17 2+17 5+17 5+17".split(" "), "2 3+17 4+17 3+17 3+17 3+17 5+17 5".split(" "), "54500442".split("")], ["24333412".split(""), "1 4+17 3+17 2+17 1+17 4+17 1+17 2".split(" "), "2 3+17 1+17 2+17 3+17 3+17 1+17 1".split(" "), "3 2+17 4+17 0 0 4+17 4+17 3".split(" "), "1 3+17 3+17 0 0 2+17 2+17 4".split(" "), "4 2+17 2+17 3+17 4+17 3+17 3+17 3".split(" "), "4 2+17 1+17 3+17 4+17 3+17 4+17 1".split(" "), "11222233".split("")], ["45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "3+17 2+17 2+17 4+17 3+17 3+17 2+17 3+17".split(" "), "3+17 2+17 3+17 1+17 2+17 4+17 2+17 1+17".split(" "), "2+17 4+17 3+17 1+17 3+17 1+17 3+17 1+17".split(" "), "1+17 4+17 3+17 2+17 1+17 4+17 3+17 1+17".split(" ")], ["14 3 3 14 4+17 1+17 4+17 4+17".split(" "), "4 2 3 3 1+17 1+17 4+17 1+17".split(" "), "2 2 1 3 2+17 3+17 3+17 1+17".split(" "), "3 3 4 1 1+17 1+17 4+17 3+17".split(" "), "4 3 2 1 3+17 2+17 2+17 3+17".split(" "), "2 2 3 2 1+17 4+17 3+17 4+17".split(" "), "2 1 2 3 4+17 1+17 2+17 1+17".split(" "), "1 4 1 4 2+17 3+17 3+17 2+17".split(" ")], ["0 14 1 1 2 1 14 0".split(" "), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "03114120".split(""), "04122340".split(""), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "02113130".split("")], ["0 0 14 2 2 14 0 0".split(" "), "0 14 4 3 2 1 14 0".split(" "), "44233111".split(""), "13200332".split(""), "45 2 3 3 4 4 2 45".split(" "), "45 45 2 1 1 3 45 45".split(" "), "0 45 45 3 2 45 45 0".split(" "), "0 0 45 45 45 45 0 0".split(" ")], ["13144112".split(""), "23322143".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "23431132".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "00000000".split("")], ["13244121".split(""), "12321422".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["18 18 1 1 1 1 18 18".split(" "), "18 18 1 1 1 1 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["14 0 0 14 14 0 0 14".split(" "), "10142301".split(""), "18 2 1 4 1 3 4 18".split(" "), "1 18 3 18 18 4 18 1".split(" "), "18 4 18 1 2 18 2 18".split(" "), "1 18 2 18 18 2 18 1".split(" "), "18 3 1 1 2 1 2 18".split(" "), "14223231".split("")], ["03413320".split(""), "1 18+17 4 2 4 1 18+17 3".split(" "), "13200343".split(""), "1 4 18+17 0 0 18+17 1 4".split(" "), "1 18+17 18+17 0 0 18+17 18+17 4".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "0 18+17 18+17 18+17 18+17 18+17 18+17 0".split(" ")], ["00344500".split(""), "0 2 18 18 18 18 4 0".split(" "), "1 18 18 18 18 18 18 3".split(" "), "2 18 18 45 45 18 18 1".split(" "), "2 18 18 45 45 18 18 1".split(" "), "3 18 18 18 18 18 18 2".split(" "), "0 1 18 18 18 18 3 0".split(" "), "00253500".split("")], ["0 0 0 0 45 45 45 45".split(" "), "0 0 0 0 45 45 45 45".split(" "), "0 0 0 0 45 45 45 45".split(" "), "0 0 0 0 45 45 45 45".split(" "), "3+17 2+17 1+17 3+17 18 18 18 18".split(" "), "4+17 3+17 4+17 4+17 18 18 18 18".split(" "), "1+17 1+17 3+17 3+17 18 18 18 18".split(" "), "3+17 1+17 2+17 2+17 18 18 18 18".split(" ")], ["00123300".split(""), "14432243".split(""), "22134410".split(""), "04014020".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["0 0 5 2 4 14 0 0".split(" "), "0 0 3 2 4 45 0 0".split(" "), "0 3 5 4 1 45 45 0".split(" "), "0 4 14 1 5 45 45 0".split(" "), "0 0 45 3 3 45 0 0".split(" "), "45 45 45 1 4 45 45 45".split(" "), "45 45 45 4 2 45 45 45".split(" "), "45 45 45 5 3 45 45 45".split(" ")], ["12400214".split(""), "13300212".split(""), "2 3 4 46 46 3 4 4".split(" "), "3 3 4 46 46 4 4 3".split(" "), "4 1 4 46 46 4 4 3".split(" "), "2 3 4 46 46 1 3 2".split(" "), "41200243".split(""), "13400233".split("")], ["00123100".split(""), "02311120".split(""), "32414444".split(""), "32334312".split(""), "14342231".split(""), "14433234".split(""), "46 3 4 46 46 1 1 46".split(" "), "0 46 46 0 0 46 46 0".split(" ")], ["18 18 18 1 1 18 18 18".split(" "), "18 18 18 1 1 18 18 18".split(" "), "18 18 18 1 1 18 18 18".split(" "), "18 18 18 0 0 18 18 18".split(" "), "18 18 18 0 0 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "46 18 46 18 18 46 18 46".split(" ")], ["2 4 2 4 0 45 45 46".split(" "), "2 2 3 2 0 45 45 0".split(" "), "2 3 3 2 0 45 45 46".split(" "), "3 3 2 1 0 45 45 0".split(" "), "1 2 2 3 0 45 45 0".split(" "), "1 1 1 3 0 45 45 46".split(" "), "3 4 3 1 0 45 45 0".split(" "), "3 3 2 4 0 45 45 46".split(" ")], ["24224213".split(""), "31132224".split(""), "11241423".split(""), "18 18 18 18 18 18 18 18".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 46 46 17 17 17".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "02112110".split(""), "46 3 3 3 2 3 4 46".split(" "), "03323340".split(""), "46 2 2 4 2 2 4 46".split(" "), "03211240".split(""), "46 1 1 2 3 3 1 46".split(" "), "04123130".split("")], ["00032000".split(""), "00043000".split(""), "0 45 45 2 3 45 45 0".split(" "), "45 45 45 18 18 45 45 45".split(" "), "45 45 45 18 18 45 45 45".split(" "), "18 18 18 18 18 18 18 18".split(" "), "0 18 18 18 18 18 18 0".split(" "), "0 45 45 45 45 45 45 0".split(" ")], ["0 1+17 2+17 0 0 4+17 1+17 0".split(" "), "2+17 3+17 3+17 2+17 46 2+17 1+17 1+17".split(" "), "0 4+17 4+17 2+17 0 3+17 1+17 0".split(" "), "1+17 1+17 2+17 4+17 46 4+17 1+17 3+17".split(" "), "3+17 1+17 2+17 3+17 46 4+17 1+17 4+17".split(" "), "0 3+17 3+17 2+17 0 2+17 1+17 0".split(" "), "2+17 1+17 3+17 2+17 46 4+17 2+17 3+17".split(" "), "0 2+17 3+17 0 0 2+17 2+17 0".split(" ")], ["14 2 3 14 0 45 45 45".split(" "), "4 2 2 1 0 45 45 45".split(" "), "18 4 4 18 0 45 45 45".split(" "), "18 18 18 18 0 18 18 18".split(" "), "18 18 18 18 0 0 0 0".split(" "), "18 18 18 18 45 45 45 45".split(" "), "18 18 18 18 45 45 45 45".split(" "), "18 18 18 18 45 45 45 45".split(" ")], ["4+17 4 4+17 3 3+17 1 4+17 4".split(" "), "1 3+17 2 1+17 5 3+17 3 1+17".split(" "), "1+17 2 4+17 3 5+17 1 4+17 3".split(" "), "18 2+17 18 4+17 18 2+17 18 4+17".split(" "), "3+17 18 3+17 18 2+17 18 3+17 18".split(" "), "18 2+17 18 1+17 18 1+17 18 3+17".split(" "), "4+17 18 1+17 18 1+17 18 2+17 18".split(" "), "18 4+17 18 2+17 18 4+17 18 2+17".split(" ")], ["0 0 45+17 45+17 45+17 45+17 0 0".split(" "), "0 0 45+17 45+17 45+17 45+17 0 0".split(" "), "45+17 45+17 2 3 1 2 45+17 45+17".split(" "), "45+17 45+17 2 1 4 3 45+17 45+17".split(" "), "45+17 45+17 3 4 4 2 45+17 45+17".split(" "), "45+17 45+17 3 1 4 3 45+17 45+17".split(" "), "0 0 45+17 45+17 45+17 45+17 0 0".split(" "), "0 0 45+17 45+17 45+17 45+17 0 0".split(" ")], ["5 5 4 18 18 3 4 2".split(" "), "2 1 18 17 17 18 1 2".split(" "), "2 18 17 17 17 17 18 2".split(" "), "18 17 17 17 17 17 17 18".split(" "), "17 17 17 18 18 17 17 17".split(" "), "17 17 18 17 17 18 17 17".split(" "), "17 18 17 17 17 17 18 17".split(" "), "18 17 17 18 18 17 17 18".split(" ")], ["0 2 14 14 14 14 2 0".split(" "), "43221214".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 3 3 1 2 4 3 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 1 3 4 3 4 3 45".split(" "), "45 45 45 45 45 45 45 45".split(" ")], ["0 0 45 45 45 45 0 0".split(" "), "0 0 45 45 45 45 0 0".split(" "), "0 0 45 45 45 45 0 0".split(" "), "0 45 45 45 45 45 45 0".split(" "), "45 45 45 45 45 45 45 45".split(" "), "46 3 4 4 3 3 4 46".split(" "), "46 2 2 4 4 2 2 46".split(" "), "04433410".split("")], ["21322213".split(""), "43233423".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "46 46 46 46 46 46 46 46".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "46 4 2 3 1 2 2 46".split(" "), "04334110".split(""), "46 1 4 1 4 3 1 46".split(" "), "04233320".split(""), "46 1 1 4 2 2 1 46".split(" "), "02121210".split(""), "46 1 0 2 3 0 3 46".split(" ")], ["3+17 4+17 0 3 3 0 1+17 3+17".split(" "), "4+17 2+17 0 2 2 0 3+17 3+17".split(" "), "4+17 1+17 0 46 46 0 4+17 4+17".split(" "), "2+17 1+17 0 0 0 0 2+17 3+17".split(" "), "2+17 2+17 1+17 1+17 2+17 1+17 1+17 3+17".split(" "), "13143222".split(""), "33343132".split(""), "22124133".split("")], ["01542310".split(""), "01542310".split(""), "0 1+19 5+19 4+19 2+19 3+19 1+19 0".split(" "), "03355440".split(""), "01231540".split(""), "0 2+19 4+19 4+19 2+19 3+19 3+19 0".split(" "), "01111110".split(""), "0 3 3+19 3+19 3+19 3+19 3 0".split(" ")], ["42123244".split(""), "32143233".split(""), "34334432".split(""), "32111143".split(""), "00000000".split(""), "3+19 3+19 3+19 3+19 3+19 3+19 3+19 3+19".split(" "), "3+19 3+19 3+19 3+19 3+19 3+19 3+19 3+19".split(" "), "3+19 3+19 3+19 3+19 3+19 3+19 3+19 3+19".split(" ")], ["31011033".split(""), "3 1 0 18 18 0 3 4".split(" "), "18 18 2+19 17 17 2+19 18 18".split(" "), "18 18 2+19 18 18 2+19 18 18".split(" "), "18 18 2+19 17 17 2+19 18 18".split(" "), "18 18 2+19 18 18 2+19 18 18".split(" "), "18 18 0 18 18 0 18 18".split(" "), "3 3 0 17 17 0 3 3".split(" ")], ["11344433".split(""), "3 1+19 2+19 4+19 1+19 4+19 4+19 4".split(" "), "3 3+19 45 45 45 45 2+19 2".split(" "), "3 2+19 45 45 45 45 2+19 2".split(" "), "4 1+19 45 45 45 45 1+19 1".split(" "), "3 1+19 45 45 45 45 3+19 1".split(" "), "2 2+19 2+19 4+19 4+19 4+19 3+19 2".split(" "), "44123313".split("")], ["1 1 18 3 4 18 2 2".split(" "), "2 2 18 4 3 18 3 3".split(" "), "3 1 18 1 2 18 4 2".split(" "), "3 2 18 2 3 18 4 4".split(" "), "4 3 18 0 0 18 3 2".split(" "), "4 4 18 46 46 18 4 4".split(" "), "21000034".split(""), "24000044".split("")], ["21214422".split(""), "31211212".split(""), "31423123".split(""), "2+19 3+19 2+19 1+19 3+19 2+19 4+19 4+19".split(" "), "4+19 3+19 3+19 2+19 4+19 1+19 2+19 3+19".split(" "), "0 0 18 18 18 18 0 0".split(" "), "0 18 18 18 18 18 18 0".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["0 2+17 3+17 0 0 1+17 3+17 0".split(" "), "3+17 2+17 1+17 1+17 5+17 3+17 1+17 5+17".split(" "), "3+17 3 2 2+17 4+17 4 2 1+17".split(" "), "0 3+17 1+17 0 0 2+17 3+17 0".split(" "), "02300410".split(""), "4+17 18 18 5+17 2+17 18 18 5+17".split(" "), "5+17 17 17 1+17 4+17 17 17 3+17".split(" "), "0 17 17 0 0 17 17 0".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "43211433".split(""), "44222334".split(""), "3 4+19 2 3+19 4+19 1 4+19 4".split(" "), "1 1+19 4 1+19 1+19 1 3+19 3".split(" "), "1 2+19 4 3+19 3+19 2 2+19 1".split(" "), "2 4+19 4 2+19 1+19 2 1+19 1".split(" "), "1 2+19 4 3+19 1+19 3 3+19 3".split(" ")], ["44424443".split(""), "34133124".split(""), "32142311".split(""), "02334440".split(""), "46 3+19 4+19 4 3 3+19 2+19 46".split(" "), "46 1+19 1+19 4+19 2+19 4+19 2+19 46".split(" "), "46 2+19 4+19 2+19 1+19 1+19 1+19 46".split(" "), "0 1+19 1+19 4+19 3+19 2+19 4+19 0".split(" ")], ["3+17 1 1 2 3 0 0 0".split(" "), "2+17 5+17 4 4 4 0 0 0".split(" "), "1+17 3+17 4+17 2 3 4 0 0".split(" "), "4+17 1+17 2+17 1+17 4 5 4 1".split(" "), "46 3+17 3+17 1+17 4+17 3 3 3".split(" "), "0 0 46 3+17 5+17 5+17 4 4".split(" "), "0 0 0 2+17 3+17 1+17 4+17 3+17".split(" "), "0 0 0 46 3+17 3+17 2+17 46".split(" ")], ["42214113".split(""), "44324223".split(""), "4+19 4+19 1+19 1+19 2+19 3+19 2+19 3+19".split(" "), "17 17 0 0 0 0 17 17".split(" "), "3+19 4+19 0 1+19 1+19 0 2+19 3+19".split(" "), "17 17 0 0 0 0 17 17".split(" "), "4+19 4+19 2+19 4+19 3+19 3+19 2+19 3+19".split(" "), "17 17 17 17 17 17 17 17".split(" ")], ["01244140".split(""), "14 1 3 3 4 2 4 14".split(" "), "18 14 14 1 2 14 14 18".split(" "), "4 18 2 1 3 3 18 3".split(" "), "2 3 18 3 4 18 3 3".split(" "), "2+19 3+19 1+19 18 18 3+19 3+19 2+19".split(" "), "0 2 3 18 18 1 4 0".split(" "), "0 2 18 2 3 18 2 0".split(" ")], ["23312443".split(""), "18 4+19 3+19 3+19 1+19 1+19 2+19 18".split(" "), "18 1+19 18 18 18 18 3+19 18".split(" "), "18 2+19 18 45 45 18 1+19 18".split(" "), "18 2+19 18 45 45 18 4+19 18".split(" "), "18 3+19 18 18 18 18 3+19 18".split(" "), "18 3+19 1+19 2+19 1+19 2+19 3+19 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["22123324".split(""), "11443141".split(""), "13311242".split(""), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" ")], ["12314313".split(""), "22332232".split(""), "43421113".split(""), "01012040".split(""), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" ")], ["20 20 18 1 1 18 20 20".split(" "), "20 20 18 1 1 18 20 20".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "20 20 18 18 18 18 20 20".split(" "), "20 20 18 18 18 18 20 20".split(" ")], ["12233131".split(""), "33214112".split(""), "45 45 45 45 45 45 45 45".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "20 20 20 20 20 20 20 20".split(" ")], ["0 0 2 14 14 2 0 0".split(" "), "0 14 2 1 3 2 14 0".split(" "), "20 20 4 1 3 3 20 20".split(" "), "18 20 2 3 2 3 20 18".split(" "), "18 20 3 1 1 1 20 18".split(" "), "18 20 2 1 4 4 20 18".split(" "), "18 20 2 4 2 5 20 18".split(" "), "18 20 4+19 5+19 3+19 1+19 20 18".split(" ")], ["14 0 0 0 0 0 0 14".split(" "), "2 0 14 0 0 14 0 2".split(" "), "41112443".split(""), "33213133".split(""), "32334212".split(""), "11432113".split(""), "3+19 1+19 4+19 2+19 2+19 1+19 2+19 3+19".split(" "), "1+19 46 1+19 46 46 3+19 46 1+19".split(" ")], ["03243000".split(""), "46 4 4 2 4 3 0 0".split(" "), "0 1 4 2 2 4 1 46".split(" "), "46 1 1 2 4 1 1 0".split(" "), "0 4+19 1+19 3+19 1+19 3+19 1+19 46".split(" "), "46 20 20 20 20 20 20 0".split(" "), "0 0 20 20 20 20 20 46".split(" "), "0 0 0 20 20 20 20 0".split(" ")], ["20 1 3 3 4 2 4 20".split(" "), "21233234".split(""), "3 1 0 4+19 1+19 0 3 4".split(" "), "2 3 4+19 20 20 3+19 4 2".split(" "), "4 1 1+19 20 20 4+19 4 2".split(" "), "2 3 0 2+19 4+19 0 3 1".split(" "), "12331324".split(""), "20 1 4 0 0 2 3 20".split(" ")], ["2+17 1+17 18 18 18 18 4+17 3+17".split(" "), "2+17 1+17 18 18 18 18 4+17 2+17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 17 17 18 18 18".split(" "), "18 18 18 17 17 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "1+17 2+17 18 18 18 18 2+17 2+17".split(" "), "1+17 4+17 18 18 18 18 1+17 3+17".split(" ")], ["18 3 2 1 1 4 3 18".split(" "), "18 18 4 4 3 3 18 18".split(" "), "20 18 18 1 4 18 18 20".split(" "), "4 20 18 0 0 18 20 1".split(" "), "1 1 20 0 0 20 1 1".split(" "), "3 18 18 20 20 18 18 2".split(" "), "18 18 20 1 4 20 18 18".split(" "), "18 20 18 18 18 18 20 18".split(" ")], ["22123324".split(""), "11443141".split(""), "16311272".split(""), "16321272".split(""), "31344233".split(""), "19311284".split(""), "19243181".split(""), "12443243".split("")], ["00014000".split(""), "00332200".split(""), "03621710".split(""), "11215545".split(""), "24533415".split(""), "05922820".split(""), "00442200".split(""), "00023000".split("")], ["14 2 3 1 1 1 3 14".split(" "), "52443114".split(""), "3 5 14 2 5 14 4 3".split(" "), "62123559".split(""), "44722841".split(""), "11535331".split(""), "43555341".split(""), "65741849".split("")], ["22242232".split(""), "42242242".split(""), "01111440".split(""), "00213100".split(""), "00334200".split(""), "0 0 0 6+17 7+17 0 0 0".split(" "), "0 0 0 8+17 9+17 0 0 0".split(" "), "0 0 0 3+17 1+17 0 0 0".split(" ")], ["1 3 2 4 3 2 18 18".split(" "), "5 4 4 2 4 18 18 18+17".split(" "), "4 1 4 2 18 18 18+17 18+17".split(" "), "4 4 1 18 18 18+17 18+17 18+17".split(" "), "5 3 18 18 18+17 18+17 18+17 18+17".split(" "), "4 18 18 18+17 18+17 18+17 18+17 18+17".split(" "), "18 18 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "18 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" ")], ["1+17 2+17 4+17 3+17 4+17 0 2+17 2+17".split(" "), "3+17 2+17 3+17 2+17 2+17 0 4+17 2+17".split(" "), "4+17 1+17 4+17 2+17 4+17 6 4+17 3+17".split(" "), "0 0 45 8 8 6 3+17 3+17".split(" "), "45 45 45 9 7 7 0 0".split(" "), "45 45 45 9 18 18 18 18".split(" "), "45 45 45 0 18 18 18 18".split(" "), "45 45 45 0 18 18 18 18".split(" ")], ["04003233".split(""), "46 3 2 0 0 4+19 3+19 3+19".split(" "), "46 1 4 3 0 0 2+19 2+19".split(" "), "46 1 3 3 2 0 0 4+19".split(" "), "03213200".split(""), "46 4 4 1 3 3 1 0".split(" "), "46 2 3 1 4 1 2 2".split(" "), "46 2 2 4 3 2 2 2".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "06032090".split(""), "2 18 4 18 18 4 18 2".split(" "), "3 18 4 18 18 4 18 3".split(" "), "1 18 2 18 18 2 18 1".split(" "), "1 18 2 18 18 2 18 1".split(" "), "0 18 0 18 18 0 18 0".split(" "), "09087060".split("")], ["46 18 18 18 18 18 18 3".split(" "), "0 18 18 18 18 18 18 3".split(" "), "46 18 18 18 18 18 18 3".split(" "), "0 18 18 18 18 18 18 3".split(" "), "46 18 18 18 18 18 18 0".split(" "), "0 18 18 18 18 18 0 0".split(" "), "46 18 18 18 18 0 0 0".split(" "), "0 18 18 18 0 0 0 0".split(" ")], ["01425210".split(""), "13545412".split(""), "24314233".split(""), "54544351".split(""), "5 1 8+17 4 3 8+17 4 2".split(" "), "4 7+17 6+17 4 5 6+17 7+17 5".split(" "), "5 9+17 3 2 2 1 9+17 2".split(" "), "02142220".split("")], ["43214000".split(""), "12223000".split(""), "1 22 2 4 4 0 0 0".split(" "), "4 22 22 1 1 1 2 2".split(" "), "42114433".split(""), "0 0 0 1 4 22 22 4".split(" "), "0 0 0 2 3 22 3 3".split(" "), "00044333".split("")], ["22133335".split(""), "42442322".split(""), "1 1 22 22 22 22 1 4".split(" "), "3 3 22 0 0 22 2 4".split(" "), "42300411".split(""), "41222111".split(""), "1 22 4 4 4 4 22 2".split(" "), "21322221".split("")], ["41332444".split(""), "41223241".split(""), "34412322".split(""), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 22 22 45 45 22 22 45".split(" ")], ["14211143".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 22 18 18 22 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 22 18 18 22 18 18".split(" "), "18 22 18 18 18 18 22 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["01444120".split(""), "03242440".split(""), "01214440".split(""), "46 22 22 3 2 22 22 46".split(" "), "46 22 22 4 2 22 22 46".split(" "), "04422220".split(""), "0 1 22 3 4 22 1 0".split(" "), "02233220".split("")], ["14 14 14 0 3 5 4 2".split(" "), "18 18 18 0 2 5 4 1".split(" "), "18 18 18 0 2 5 4 2".split(" "), "18 18 18 0 5 4 1 5".split(" "), "18 18 18 0 5 5 1 3".split(" "), "18 18 18 0 5 3 1 4".split(" "), "18 18 18 0 2 3 2 4".split(" "), "18 18 18 0 4 4 1 4".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "44221312".split(""), "12221132".split(""), "3+19 1+19 2+19 2+19 1+19 3+19 3+19 4+19".split(" "), "45 45 45 45 45 45 45 45".split(" "), "2+19 3+19 1+19 2+19 3+19 3+19 2+19 4+19".split(" "), "45 45 0 45 45 0 45 45".split(" "), "45 45 0 45 45 0 45 45".split(" ")], ["14 4 1 14 14 3 3 14".split(" "), "41124421".split(""), "23421321".split(""), "21234414".split(""), "20 20 20 20 2 3 2 2".split(" "), "20 20 20 20 20 2 1 2".split(" "), "20 20 20 20 20 20 4 4".split(" "), "20 20 20 20 20 20 20 1".split(" ")], ["1 1 3 1 18 18 18 18".split(" "), "4 3 2 4 18 18 18 18".split(" "), "3 4 1 2 18 18 18 18".split(" "), "4 3 1 3 18 18 18 18".split(" "), "45 45 45 45 17 17 17 17".split(" "), "45 45 45 45 17 17 17 17".split(" "), "45 45 45 45 17 17 17 17".split(" "), "45 45 45 45 17 17 17 17".split(" ")], ["2 4 45 0 0 0 0 0".split(" "), "3 1 45 0 0 0 0 0".split(" "), "4 1 45 22 45 0 0 0".split(" "), "1 4 45 45 45 0 0 0".split(" "), "2 2 45 45 22 45 45 45".split(" "), "4 1 45 45 45 45 45 45".split(" "), "1 3 45 45 45 22 45 22".split(" "), "4 4 45 45 45 45 45 45".split(" ")], ["22400431".split(""), "13311124".split(""), "31423323".split(""), "31300233".split(""), "44231134".split(""), "12 12 12 12 12 12 12 12".split(" "), "12 12 12 12 12 12 12 12".split(" "), "11100222".split("")], ["45 45 1 2 12 12 0 0".split(" "), "45 2 3 2 12 12 0 0".split(" "), "4 3 1 1 12 12 0 0".split(" "), "4 3 3 12 12 12 45 45".split(" "), "12 12 12 12 12 12 45 45".split(" "), "12 12 12 12 12 12 45 45".split(" "), "0 0 0 45 45 45 0 0".split(" "), "0 0 0 45 45 45 0 0".split(" ")], ["0 0 12 2 2 12 12 46".split(" "), "46 12 12 1 1 12 12 46".split(" "), "46 12 12 1 4 12 12 46".split(" "), "46 12 12 1 4 12 0 0".split(" "), "0 0 12 4 3 12 12 46".split(" "), "46 12 12 1 1 12 12 46".split(" "), "46 12 12 2 3 12 12 46".split(" "), "46 12 12 3 3 12 0 0".split(" ")], ["0 0 3 1 12 2+17 20+17 20+17".split(" "), "0 0 4 3 12 1+17 20+17 20+17".split(" "), "0 1 1 4 12 4+17 20+17 20+17".split(" "), "1 2 3 4 12 3+17 20+17 20+17".split(" "), "12 12 12 12 12 4+17 20+17 20+17".split(" "), "2+17 3+17 4+17 3+17 2+17 2+17 12+17 0".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 0 0".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 0 0".split(" ")], ["14 0 0 14 12 14 14 12".split(" "), "12 1 3 12 12 4 1 12".split(" "), "12 1 3 12 12 4 4 12".split(" "), "12 4 3 12 12 1 3 12".split(" "), "12 3 1 12 12 4 4 12".split(" "), "12 3 1 12 12 2 3 12".split(" "), "12 4 1 12 12 1 4 12".split(" "), "12 3 2 12 12 0 0 12".split(" ")], ["3 3 3 4 3+19 20+17 20+17 20+17".split(" "), "4 3 2 1 2+19 20+17 20+17 20+17".split(" "), "4 3 1 4 4+19 20+17 20+17 20+17".split(" "), "2 2 1 3+19 3+19 20+17 20+17 20+17".split(" "), "2 3 4 4+19 17 17 17 17".split(" "), "2 2 1 2+19 17 17 17 17".split(" "), "4 2 1 3+19 17 17 17 17".split(" "), "4+19 3+19 1+19 2+19 17 17 17 17".split(" ")], ["4 4 3 0 46 45 45 45".split(" "), "3 4 1 46 0 45 45 45".split(" "), "1 2 4 0 46 45 45 45".split(" "), "3 2 2 46 0 45 45 45".split(" "), "3 2 4 0 46 45 45 45".split(" "), "4 1 3 46 0 45 45 45".split(" "), "4 1 1 0 46 45 45 45".split(" "), "4 2 2 46 0 45 45 45".split(" ")], ["14 14 0 0 0 0 0 0".split(" "), "34000000".split(""), "24440000".split(""), "25130000".split(""), "18 18 18 2 5 2 0 0".split(" "), "18 18 18 5 3 2 0 0".split(" "), "12 12 12 18 18 18 2 3".split(" "), "12 12 12 18 18 18 5 4".split(" ")], ["0 18 18 0 0 3 3 3".split(" "), "0 18 18 0 0 1 3 4".split(" "), "0 18 18 0 0 4 3 2".split(" "), "46 18 18 46 0 18 18 18".split(" "), "46 18 18 46 0 3 4 3".split(" "), "46 18 18 46 0 4 2 3".split(" "), "0 18 18 0 0 1 1 4".split(" "), "0 18 18 0 0 18 18 18".split(" ")], ["0 1+17 2+17 0 0 4+17 1+17 0".split(" "), "12+17 1+17 1+17 12+17 12+17 1+17 1+17 12+17".split(" "), "12+17 4+17 1+17 12+17 12+17 4+17 1+17 12+17".split(" "), "12+17 4+17 4+17 12+17 12+17 3+17 4+17 12+17".split(" "), "12+17 2+17 2+17 12+17 12+17 1+17 1+17 12+17".split(" "), "12+17 2+17 2+17 12+17 12+17 1+17 3+17 12+17".split(" "), "12+17 1+17 3+17 12+17 12+17 4+17 2+17 12+17".split(" "), "0 22 22 0 0 22 22 0".split(" ")], ["24442224".split(""), "33153421".split(""), "24122131".split(""), "21543343".split(""), "15341414".split(""), "21432242".split(""), "13144313".split(""), "1 13 13 13 13 13 13 1".split(" ")], ["24123123".split(""), "23433432".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 13 18 18 18 18 13 18".split(" "), "18 18 3 18 18 3 18 18".split(" "), "1 18 18 18 18 18 18 2".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 13 13 18 18 18".split(" ")], ["03424410".split(""), "02113220".split(""), "04131310".split(""), "46 2 3 4 3 2 3 46".split(" "), "46 2 1 4 1 2 4 46".split(" "), "46 1 4 3 3 4 1 46".split(" "), "03422120".split(""), "0 0 13 13 13 13 0 0".split(" ")], ["12212233".split(""), "1 18+17 18+17 1 4 18+17 18+17 4".split(" "), "2 18+17 18+17 3 4 18+17 18+17 4".split(" "), "18+17 4 3 18+17 18+17 1 2 18+17".split(" "), "18+17 3 4 18+17 18+17 2 1 18+17".split(" "), "3 18+17 18+17 1 2 18+17 18+17 2".split(" "), "4 18+17 18+17 2 1 18+17 18+17 1".split(" "), "13 2 2 13 13 3 3 13".split(" ")], ["45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45 45 45 45 45 45 45 45".split(" "), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "45+17 45+17 45+17 45+17 45+17 45+17 45+17 45+17".split(" "), "13224221".split(""), "13 1 13 1 2 13 1 13".split(" ")], ["3 3 1 20 20 20 20 2".split(" "), "2 2 20 20 20 20 4 4".split(" "), "4 20 20 20 20 3 1 1".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "13 13 13 13 13 13 13 13".split(" ")], ["1 1 4 4 18 18 18 18".split(" "), "1 4 2 3 18 18 18 18".split(" "), "1 3 2 3 12 12 12 12".split(" "), "3 1 1 1 12 18 18 18".split(" "), "12 12 13 12 12 18 18 18".split(" "), "12 12 12 12 12 18 18 18".split(" "), "18 18 18 18 12 13 13 18".split(" "), "18 18 18 18 12 18 18 18".split(" ")], ["20 14 1 1 2 2 1 3".split(" "), "20 20 14 3 3 2 1 1".split(" "), "20 20 20 14 1 4 4 2".split(" "), "20 20 20 20 14 1 4 3".split(" "), "20 20 20 20 20 14 4 4".split(" "), "20 20 20 20 20 20 14 2".split(" "), "20 20 20 20 20 20 20 14".split(" "), "20 20 20 20 20 20 20 20".split(" ")], ["0 14 14 0 0 14 14 0".split(" "), "34222243".split(""), "34444123".split(""), "22133323".split(""), "3+19 2+19 2+19 3+19 4+19 4+19 1+19 1+19".split(" "), "3+19 6 8 3+19 4+19 8 7 2+19".split(" "), "0 7 9 2+19 3+19 9 6 0".split(" "), "0 0 2+19 2+19 2+19 1+19 0 0".split(" ")], ["14+17 2+17 14+17 3+17 14+17 3+17 14+17 1+17".split(" "), "2+17 14+17 1+17 14+17 3+17 14+17 2+17 14+17".split(" "), "4+17 2+17 2+17 1+17 3+17 3+17 2+17 5+17".split(" "), "2+17 4+17 3+17 4+17 1+17 5+17 2+17 5+17".split(" "), "5+17 5+17 3+17 2+17 4+17 2+17 1+17 3+17".split(" "), "3+17 5+17 3+17 1+17 4+17 4+17 1+17 5+17".split(" "), "1+17 2+17 5+17 2+17 5+17 4+17 3+17 1+17".split(" "), "2+17 1+17 1+17 3+17 2+17 4+17 2+17 3+17".split(" ")], ["1 4 4 15 15 3 2 2".split(" "), "2 4 15 1 3 15 2 3".split(" "), "3 15 12 1 4 12 15 1".split(" "), "15 12 1 4 4 4 12 15".split(" "), "12 15 15 3 2 15 15 12".split(" "), "14422441".split(""), "15 15 15 15 15 15 15 15".split(" "), "18 18 12 12 12 12 18 18".split(" ")], ["12232143".split(""), "4 15+17 15+17 1 1 15+17 15+17 4".split(" "), "4 12 12 2 2 12 12 4".split(" "), "21313331".split(""), "14244412".split(""), "1 15+17 15+17 2 3 15+17 15+17 3".split(" "), "2 12 12 2 1 12 12 2".split(" "), "23343213".split("")], ["12222141".split(""), "11442144".split(""), "21100142".split(""), "32433342".split(""), "11242113".split(""), "18 18 18 18 18 18 18 18".split(" "), "15+17 15+17 15+17 15+17 15+17 15+17 15+17 15+17".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["0 3+17 3+17 0 0 4+17 2+17 0".split(" "), "18+17 2+17 1+17 0 46 3+17 4+17 18+17".split(" "), "18+17 4+17 1+17 46 0 3+17 2+17 18+17".split(" "), "18+17 1+17 3+17 0 46 1+17 4+17 18+17".split(" "), "18+17 4+17 3+17 46 0 1+17 4+17 18+17".split(" "), "18+17 2+17 1+17 0 46 2+17 3+17 18+17".split(" "), "18+17 3+17 2+17 46 0 2+17 1+17 18+17".split(" "), "0 3+17 2+17 0 0 2+17 1+17 0".split(" ")], ["11433334".split(""), "18 18 15+19 18 18 18 18 18".split(" "), "18 18 18 15+19 18 18 18 18".split(" "), "18 15+19 18 18 18 18 15+19 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 15+19 18 18 18 15+19 18".split(" "), "15+19 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["1 4 2 2 3 3 12 2".split(" "), "1 1 2 4 4 12 13 4".split(" "), "2 1 1 3 12 13 2 4".split(" "), "2 2 1 12 13 3 3 3".split(" "), "1 4 12 13 1 4 1 2".split(" "), "3 12 13 2 3 1 4 1".split(" "), "12 13 2 1 4 4 3 12".split(" "), "13 20 20 20 20 20 20 13".split(" ")], ["2 1 2 3 1+17 4+17 4+17 4+17".split(" "), "3 3 1 1 2+17 22 22 4+17".split(" "), "3 2 3 3 3+19 1+19 3+19 3+19".split(" "), "4 4 1 3 3+19 2+19 3+19 3+19".split(" "), "1 1 2 4 3+19 2+19 2+19 1+19".split(" "), "1 4 2 2 1+19 3+19 2+19 4+19".split(" "), "1 4 1 1 4+17 22 22 2+17".split(" "), "3 4 4 3 3+17 2+17 1+17 1+17".split(" ")], ["0 14 14 0 3 3 1 3".split(" "), "14 1 2 14 3 3 4 4".split(" "), "23432233".split(""), "1 1 2 4 12 12 12 12".split(" "), "3 2 4 4 12 12 12 12".split(" "), "3 2 1 2 12 12 12 12".split(" "), "1 3 1 1 12 12 12 12".split(" "), "12 12 12 12 13 0 0 13".split(" ")], ["24432432".split(""), "31122313".split(""), "14321431".split(""), "45 45 45 0 0 45 45 45".split(" "), "45 45 0 20 20 0 45 45".split(" "), "45 45 0 20 20 0 45 45".split(" "), "45 45 0 20 20 0 45 45".split(" "), "45 45 0 20 20 0 45 45".split(" ")], ["12+17 1 2 3 2 3 2 12+17".split(" "), "12+17 1 4 3 1 1 2 12+17".split(" "), "12+17 1 2 3 4 4 4 12+17".split(" "), "12+17 2 3 3 1 2 2 12+17".split(" "), "12+17 4 4 1 1 4 3 12+17".split(" "), "12+17 4 2 4 2 3 1 12+17".split(" "), "12+17 1 3 1 1 4 2 12+17".split(" "), "13+17 1 2 13+17 13+17 3 3 13+17".split(" ")], ["11133421".split(""), "22413434".split(""), "42221414".split(""), "22 22 18 18 18 18 22 22".split(" "), "1+19 1+19 18 3+19 2+19 18 4+19 3+19".split(" "), "1+19 2+19 4+19 20 20 3+19 1+19 3+19".split(" "), "0 0 3+19 20 20 4+19 0 0".split(" "), "0 0 18 1+19 1+19 18 0 0".split(" ")], ["01110000".split(""), "46 1 4 2 0 18 18 18".split(" "), "0 2 1 1 0 18 18 18".split(" "), "46 2 3 3 4+19 4+19 2+19 2+19".split(" "), "46 3 2 1 3+19 3+19 4+19 4+19".split(" "), "0 3 2 4 0 18 18 18".split(" "), "46 4 3 1 0 18 18 18".split(" "), "02340000".split("")], ["14 14 14 0 0 3 3 2".split(" "), "4 1 4 0 46 2+19 3+19 4+19".split(" "), "42200244".split(""), "2 4 2 0 46 3+19 3+19 3+19".split(" "), "4 3 1 0 46 3+19 1+19 2+19".split(" "), "31100214".split(""), "1 4 3 0 46 4+19 4+19 1+19".split(" "), "24200211".split("")], ["2 1 3 1+19 1+19 4 3 1".split(" "), "3 4 4 1+19 1+19 2 1 4".split(" "), "1 1 4 3+19 4+19 2 2 4".split(" "), "1+19 4+19 2+19 2+19 2+19 3+19 4+19 4+19".split(" "), "4+19 2+19 3+19 1+19 1+19 4+19 3+19 3+19".split(" "), "22 3 3 2+19 3+19 2 3 22".split(" "), "2 2 4 4+19 3+19 4 1 1".split(" "), "13 2 2 4+19 1+19 2 1 13".split(" ")], ["00041000".split(""), "0 0 12+17 1 2 12+17 0 0".split(" "), "0 12+17 12+17 4 3 12+17 12+17 0".split(" "), "12+17 12+17 12+17 3 3 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 3 4 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 4 4 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 1 3 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 2 3 12+17 12+17 12+17".split(" ")], ["03223330".split(""), "03421440".split(""), "47 47 10 3 1 4 47 47".split(" "), "47 47 4 1 2 2 47 47".split(" "), "47 47 2 3 4 1 47 47".split(" "), "47 47 1 4 1 3 47 47".split(" "), "03422320".split(""), "02111240".split("")], ["23444443".split(""), "4 47 18 47 47 18 47 4".split(" "), "3 18 3 18 18 4 18 2".split(" "), "3 47 18 18 18 18 47 4".split(" "), "4 47 18 18 18 18 47 1".split(" "), "2 18 2 18 18 3 18 3".split(" "), "2 47 18 47 47 18 47 4".split(" "), "24122333".split("")], ["3 2 2 45 47 0 0 0".split(" "), "1 4 3 45 45 47 0 0".split(" "), "4 3 3 45 45 45 47 0".split(" "), "45 45 45 45 45 45 45 47".split(" "), "47 45 45 45 45 45 45 45".split(" "), "0 47 45 45 45 1 1 3".split(" "), "0 0 47 45 45 4 1 3".split(" "), "0 0 0 47 45 4 2 3".split(" ")], ["33322411".split(""), "41442444".split(""), "21344131".split(""), "2 47 2 47 47 3 47 1".split(" "), "47 47 47 47 47 47 47 47".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" ")], ["1+19 1 3 2 4+19 0 0 0".split(" "), "47 3 4 1 47 0 47 47".split(" "), "2+19 2 1 4 4+19 0 0 0".split(" "), "47 3 3 2 47 0 47 47".split(" "), "47 2 4 2 47 0 47 47".split(" "), "3+19 1 4 2 2+19 0 0 0".split(" "), "47 3 3 1 47 0 47 47".split(" "), "1+19 47 3+19 47 3+19 0 0 0".split(" ")], ["12231132".split(""), "43443241".split(""), "43312423".split(""), "1+19 4+19 2+19 3+19 4+19 1+19 3+19 4+19".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 47 18 47 47 18 47 18".split(" "), "47 18 47 18 18 47 18 47".split(" "), "0 46 0 46 46 0 46 0".split(" ")], ["14+17 2+17 2+17 14+17 1+19 4+19 2+19 1+19".split(" "), "4+17 3+17 4+17 4+17 17 17 17 17".split(" "), "4+17 3+17 3+17 1+17 2+19 4+19 2+19 3+19".split(" "), "1+17 4+17 2+17 3+17 17 17 17 17".split(" "), "3+17 2+17 1+17 4+17 3+19 2+19 2+19 1+19".split(" "), "4+17 1+17 2+17 2+17 17 17 17 17".split(" "), "2+17 3+17 2+17 4+17 4+19 1+19 1+19 2+19".split(" "), "2+17 4+17 4+17 2+17 17 17 17 17".split(" ")], ["1 4 3 46 46 3 2 4".split(" "), "21100414".split(""), "1 1 4 46 46 4 1 3".split(" "), "24200441".split(""), "12 3 2 0 0 3 3 12".split(" "), "20 12 2 46 46 3 12 20".split(" "), "20 20 12 0 0 12 20 20".split(" "), "20 20 20 12 12 20 20 20".split(" ")], ["4 2 3 2 1 4 47 47".split(" "), "1 0 3 1 2 1 47 47".split(" "), "4 3 2 3 47 47 3 3".split(" "), "2 2 2 3 47 47 3 0".split(" "), "3 3 47 47 1 1 0 0".split(" "), "4 3 47 47 1 0 0 0".split(" "), "47 47 3 1 0 0 0 0".split(" "), "47 47 2 0 0 0 0 0".split(" ")], ["42342233".split(""), "47 47 2 3 2 4 47 47".split(" "), "47 47 3 2 3 2 47 47".split(" "), "0 0 45 4 1 45 0 0".split(" "), "0 0 47 45 45 47 0 0".split(" "), "47 47 45 47 47 45 47 47".split(" "), "47 47 45 45 45 45 47 47".split(" "), "1 3 2 45 45 3 4 1".split(" ")], ["41312423".split(""), "14234134".split(""), "2 3 2 18 18 2 3 2".split(" "), "1 18 18 0 0 18 18 1".split(" "), "0 18 4+19 4+19 4+19 4+19 18 0".split(" "), "4+19 1+19 2 18 18 2 1+19 4+19".split(" "), "4+19 3 18 18 18 18 3 4+19".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["42312323".split(""), "12334124".split(""), "2 3 2 2 47 47 47 47".split(" "), "2 4 2 1 47 47 47 47".split(" "), "3 3 47 47 46 46 46 46".split(" "), "1 1 47 47 46 46 46 46".split(" "), "1 4 47 47 46 46 46 46".split(" "), "1 3 47 47 46 46 46 46".split(" ")], ["11000032".split(""), "1 18 18 0 0 18 18 3".split(" "), "0 2+19 18 2 2 18 2+19 0".split(" "), "0 18 18 4 4 18 18 0".split(" "), "0 1+19 18 4 2 18 1+19 0".split(" "), "0 18 12 2 4 12 18 0".split(" "), "12 3+19 12 3 3 12 3+19 12".split(" "), "12 13 12 3 1 12 13 12".split(" ")], ["14 3 45 14 14 45 4 14".split(" "), "1 1 45 12 12 45 3 3".split(" "), "45 45 45 12 12 45 45 45".split(" "), "45 12 12 12 12 12 12 45".split(" "), "45 12 12 12 12 12 12 45".split(" "), "45 45 45 12 12 45 45 45".split(" "), "3 3 45 12 12 45 4 4".split(" "), "3 3 45 45 45 45 4 4".split(" ")], ["0 0 0 1+17 2+17 0 0 0".split(" "), "0 0 0 3+17 4+17 0 0 0".split(" "), "0 0 0 2+17 1+17 0 0 0".split(" "), "2+17 1+17 2+17 3+17 3+17 4+17 4+17 2+17".split(" "), "1+17 2+17 3+17 2+17 2+17 1+17 1+17 1+17".split(" "), "1+17 1+17 0 3+17 4+17 0 3+17 3+17".split(" "), "22 22 2+17 1+17 1+17 3+17 22 22".split(" "), "0 22 2+17 1+17 3+17 4+17 22 0".split(" ")], ["01221410".split(""), "12 12 18 18 1 2 2 46".split(" "), "17 12 12 18 18 3 3 0".split(" "), "17 17 12 12 18 18 1 46".split(" "), "17 17 17 12 12 18 18 46".split(" "), "17 17 17 17 12 12 18 0".split(" "), "17 17 17 17 17 12 12 46".split(" "), "0 17 17 17 17 17 12 0".split(" ")], ["47 47 45 45 45 45 45 45".split(" "), "47 47 45 45 45 45 45 45".split(" "), "47 47 45 45 45 45 45 45".split(" "), "47 47 2+19 4+19 3+19 4+19 1+19 3+19".split(" "), "47 47 2 4 2 1 4 3".split(" "), "47 47 2 4 2 2 4 3".split(" "), "47 47 1 2 3 3 3 2".split(" "), "13 13 3 1 4 1 4 4".split(" ")], ["0 0 0 45+17 45+17 0 0 0".split(" "), "0 0 45+17 45+17 45+17 45+17 0 0".split(" "), "0 47+17 45+17 45+17 45+17 45+17 47+17 0".split(" "), "47+17 45+17 45+17 4 4 45+17 45+17 47+17".split(" "), "47+17 45+17 45+17 4 4 45+17 45+17 47+17".split(" "), "0 47+17 45+17 45+17 45+17 45+17 47+17 0".split(" "), "0 0 45+17 45+17 45+17 45+17 0 0".split(" "), "0 0 0 47+17 47+17 0 0 0".split(" ")], ["15 4 2 1 2 2 3 15".split(" "), "63341216".split(""), "02122320".split(""), "15 4 3 3 1 1 4 15".split(" "), "71413247".split(""), "02324320".split(""), "15 15 15 15 15 15 15 15".split(" "), "8 12 12 12 12 12 12 8".split(" ")], ["03200220".split(""), "12+17 4 4 12+17 12+17 2 1 12+17".split(" "), "04300130".split(""), "12+17 1 1 12+17 12+17 3 4 12+17".split(" "), "02100440".split(""), "12+17 1 2 12+17 12+17 2 3 12+17".split(" "), "01300140".split(""), "12+17 2 2 12+17 12+17 2 4 12+17".split(" ")], ["14 1 3 2 4 3 4 14".split(" "), "3 2 3 2 1 1 4 47".split(" "), "4 1 4 2 1 3 47 45".split(" "), "3 1 4 3 2 47 45 45".split(" "), "2 1 3 4 47 45 45 45".split(" "), "1 2 4 47 45 45 45 45".split(" "), "3 1 47 45 45 45 45 45".split(" "), "3 47 45 45 45 45 45 45".split(" ")], ["2 3 2 15 15 2 1 3".split(" "), "1 4 15 1 2 15 2 4".split(" "), "1 15 2 3 4 1 15 4".split(" "), "15 2 2 1 3 2 1 15".split(" "), "6 15 3 4 4 3 15 8".split(" "), "7 1 15 3 1 15 3 9".split(" "), "15 15 2 15 15 2 15 15".split(" "), "98766789".split("")], ["0 3 4 18+17 18+17 2 3 0".split(" "), "46 0 1 18+17 18+17 2 0 46".split(" "), "0 0 1 18+17 18+17 2 0 0".split(" "), "46 0 18+17 18+17 18+17 18+17 0 46".split(" "), "46 0 18+17 18+17 18+17 18+17 0 46".split(" "), "0 0 12+17 18+17 18+17 12+17 0 0".split(" "), "46 0 12+17 12+17 12+17 12+17 0 46".split(" "), "0 12+17 12+17 12+17 12+17 12+17 12+17 0".split(" ")], ["0 14 0 14 14 0 14 0".split(" "), "41322421".split(""), "2 1+19 2 1+19 3+19 1 3+19 3".split(" "), "1 3+19 4 3+19 2+19 2 2+19 4".split(" "), "3 1+19 2 1+19 3+19 1 3+19 2".split(" "), "4 3+19 2 4+19 2+19 4 2+19 2".split(" "), "46 4 46 2 3 46 4 46".split(" "), "04023030".split("")], ["14 2 2+19 20 20 1+19 3 14".split(" "), "2 1 2+19 20 20 1+19 3 3".split(" "), "1 3 1+19 20 20 2+19 2 4".split(" "), "32200142".split(""), "41200133".split(""), "2 3 4+19 20 20 2+19 2 4".split(" "), "2 1 1+19 20 20 2+19 4 3".split(" "), "4 3 3+19 20 20 2+19 1 3".split(" ")], ["21300222".split(""), "2 15 15 3 4 15 15 3".split(" "), "32331143".split(""), "0 2 15 15 15 15 3 0".split(" "), "0 2 3 12 12 2 2 0".split(" "), "12 4 1 12 12 1 3 12".split(" "), "12 15 15 3 3 15 15 12".split(" "), "12 12 12 0 0 12 12 12".split(" ")], ["45 14 45 14 14 45 14 45".split(" "), "45 18 45 18 18 45 18 45".split(" "), "45 18 45 18 18 45 18 45".split(" "), "18 4 2 3 1 4 3 18".split(" "), "18 2 2 4 3 3 4 18".split(" "), "12 12 12 12 12 12 12 12".split(" "), "12 12 12 12 12 12 12 12".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["13241122".split(""), "33142134".split(""), "15 2 1+19 1+19 1+19 1+19 4 15".split(" "), "2+19 15 2+19 15 15 2+19 15 4+19".split(" "), "15 2+19 3+19 15 15 3+19 4+19 15".split(" "), "2+19 15 4+19 1+19 1+19 4+19 15 4+19".split(" "), "15 3+19 2 1 2 4 4+19 15".split(" "), "3+19 2 4 4 1 1 1 2+19".split(" ")], ["01043010".split(""), "47 1 2 2 2 3 3 47".split(" "), "02341220".split(""), "47 20 20 20 20 20 20 47".split(" "), "47 20 20 20 20 20 20 47".split(" "), "0 20 20 20 20 20 20 0".split(" "), "47 20 20 20 20 20 20 47".split(" "), "0 47 0 47 47 0 47 0".split(" ")], ["00000000".split(""), "02323310".split(""), "0 47 47 4 2 47 47 0".split(" "), "0 46 47 4 2 47 46 0".split(" "), "0 46 47 3 2 47 46 0".split(" "), "0 46 47 4 1 47 46 0".split(" "), "0 46 47 47 47 47 46 0".split(" "), "00000000".split("")], ["13212411".split(""), "23312133".split(""), "23242433".split(""), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "22 22 12+17 12+17 12+17 12+17 22 22".split(" "), "12+17 12+17 12+17 2 3 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 2 3 12+17 12+17 12+17".split(" ")], ["41314113".split(""), "32233414".split(""), "18 18 18 18 18 18 18 18".split(" "), "22 18 18 22 22 18 18 22".split(" "), "18 18 18 13 13 18 18 18".split(" "), "13 18 18 18 18 18 18 13".split(" "), "18 18 18 18 18 18 18 18".split(" "), "43241132".split("")], ["00332300".split(""), "00244200".split(""), "01412210".split(""), "45 45 45 45 45 45 45 45".split(" "), "45 15+19 45 15 15 45 15+19 45".split(" "), "45 15+19 45 45 45 45 15+19 45".split(" "), "45 45 15+19 15+19 15+19 15+19 45 45".split(" "), "0 45 45 45 45 45 45 0".split(" ")], ["0 12 2 2 2 1 18 0".split(" "), "1 18 1 1 3 2 12 1".split(" "), "1 12 4 1 4 1 18 3".split(" "), "3 18 4 1 4 2 12 4".split(" "), "1 12 3 4 3 4 18 2".split(" "), "3 18 4 1 1 1 12 4".split(" "), "1 12 18 12 18 12 18 2".split(" "), "0 13 2 13 13 1 13 0".split(" ")], ["12 12 12 1 1 12 12 12".split(" "), "12 22 12 1 1 12 22 12".split(" "), "12 12 12 2 1 12 12 12".split(" "), "33221232".split(""), "32211212".split(""), "12 12 12 3 3 12 12 12".split(" "), "12 22 12 2 2 12 22 12".split(" "), "12 12 12 3 1 12 12 12".split(" ")], ["2 3 0 20+17 20+17 0 2 3".split(" "), "3 3 0 20+17 20+17 0 1 4".split(" "), "2 4 0 20+17 20+17 0 1 4".split(" "), "1 4 0 20+17 20+17 0 1 1".split(" "), "4 2 0 20+17 20+17 0 3 1".split(" "), "2 2 0 20+17 20+17 0 2 3".split(" "), "3 1 0 20+17 20+17 0 4 1".split(" "), "3 3 0 13+17 13+17 0 3 1".split(" ")], ["3 14 1 14 14 3 14 2".split(" "), "15 3 15 4 15 2 15 4".split(" "), "3 15 1 15 2 15 3 15".split(" "), "15 3 15 4 15 1 15 4".split(" "), "33134134".split(""), "02032020".split(""), "01041010".split(""), "03034030".split("")], ["0 0 14 0 0 14 0 0".split(" "), "01222220".split(""), "31241213".split(""), "2 2 22 3 4 22 1 2".split(" "), "4 3 22 3 4 22 3 4".split(" "), "4 3 22 3 1 22 3 4".split(" "), "1 2 22 2 1 22 2 3".split(" "), "22 0 2 0 0 2 0 22".split(" ")], ["1 2 2+19 2 3 2+19 1 3".split(" "), "2 4 2+19 1 1 1+19 1 2".split(" "), "3 4+19 1+19 3+19 2+19 3+19 1+19 4".split(" "), "4 3+19 14 14 14 14 2+19 4".split(" "), "3 3+19 2+19 2+19 4+19 1+19 3+19 4".split(" "), "31142432".split(""), "42331144".split(""), "32342134".split("")], ["02142130".split(""), "03241330".split(""), "0 1+19 2+19 4+19 3+19 1+19 3+19 0".split(" "), "02132140".split(""), "63232436".split(""), "7 4+19 3+19 2+19 2+19 1+19 4+19 7".split(" "), "8 3+19 2+19 2+19 1+19 2+19 3+19 8".split(" "), "9 3+19 0 0 0 0 3+19 9".split(" ")], ["0 0 1 14 14 3 0 0".split(" "), "02134310".split(""), "14 2 4 4 3 1 1 14".split(" "), "3+17 4+17 1+17 2+17 1+17 3+17 4+17 3+17".split(" "), "2+17 4+17 3+17 4+17 3+17 1+17 2+17 2+17".split(" "), "1+17 3+17 2+17 4+17 1+17 4+17 4+17 1+17".split(" "), "2+17 13+17 13+17 1+17 1+17 13+17 13+17 4+17".split(" "), "3+17 0 0 2+17 2+17 0 0 3+17".split(" ")], ["42423134".split(""), "21242232".split(""), "42413112".split(""), "31321442".split(""), "40000002".split(""), "3 12 12 18 18 12 12 3".split(" "), "3 12 12 18 18 12 12 1".split(" "), "2 12 12 22 22 12 12 4".split(" ")], ["21242232".split(""), "42423134".split(""), "31321442".split(""), "22 2 1 2 3 1 4 22".split(" "), "17 22 3 3 2 4 22 17".split(" "), "17 17 22 4 3 22 17 17".split(" "), "17 17 17 22 22 17 17 17".split(" "), "17 17 17 17 17 17 17 17".split(" ")], ["42323412".split(""), "21412134".split(""), "34324432".split(""), "12413113".split(""), "67899876".split(""), "67899876".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["0 0 3 14 14 2 0 0".split(" "), "01412230".split(""), "14 0 0 2 1 0 0 14".split(" "), "42323412".split(""), "2 1+19 4+19 1 2 1+19 3+19 4".split(" "), "3 4+19 3+19 2 4 4+19 3+19 2".split(" "), "1 2+19 4+19 1 3 1+19 1+19 3".split(" "), "0 1+19 2+19 0 0 2+19 3+19 0".split(" ")], ["15 3 1 3 2 1 3 15".split(" "), "20 2 3 4 2 4 2 20".split(" "), "15 1 4 2 3 4 2 15".split(" "), "20 3 1 4 2 1 3 20".split(" "), "15 15 1 0 0 1 15 15".split(" "), "20 8 0 20 20 0 8 20".split(" "), "15 0 15 15 15 15 0 15".split(" "), "20 0 7 6 6 7 0 20".split(" ")], ["20 20 20 1 2 20 20 20".split(" "), "20 20 1 4 1 3 20 20".split(" "), "20 1 2 3 2 1 4 20".split(" "), "3 4 1 20 20 1 2 4".split(" "), "2 3 20 20 20 20 1 3".split(" "), "00000000".split(""), "3+19 2+19 0 3+19 3+19 0 2+19 4+19".split(" "), "1+19 4+19 0 4+19 2+19 0 1+19 3+19".split(" ")], ["33342133".split(""), "3 0 4 18 18 2 0 2".split(" "), "1 0 2 18 18 1 0 1".split(" "), "4 0 2 18 18 2 0 4".split(" "), "2 0 3 18 18 1 0 4".split(" "), "1 0 4 18 18 3 0 2".split(" "), "3 0 1 18 18 4 0 2".split(" "), "13 18 18 13 13 18 18 13".split(" ")], ["01142120".split(""), "03233410".split(""), "04312130".split(""), "1 3+17 2+17 1+17 2+17 4+17 3+17 1".split(" "), "22 2+17 1+17 2+17 3+17 1+17 2+17 22".split(" "), "0 22 4+17 4+17 2+17 2+17 22 0".split(" "), "0 1+17 22 1+17 2+17 22 3+17 0".split(" "), "0 0 0 22 22 0 0 0".split(" ")], ["00031000".split(""), "0 0 12 4 4 12 0 0".split(" "), "0 12 3 2 3 1 12 0".split(" "), "12 12 12 12 12 12 12 12".split(" "), "0 4 1 12 12 12 3 0".split(" "), "0 3 3 12 12 14 4 0".split(" "), "0 1 2 12 12 12 2 0".split(" "), "0 4 1 12 12 12 1 0".split(" ")], ["4 4 1 14 14 1 3 4".split(" "), "02142130".split(""), "00121100".split(""), "00034000".split(""), "0 0 14 1 2 14 0 0".split(" "), "0 14 1 4 3 1 14 0".split(" "), "14 2+19 4+19 3+19 3+19 4+19 1+19 14".split(" "), "4+19 3+19 1+19 4+19 2+19 1+19 3+19 4+19".split(" ")], ["00112200".split(""), "03243430".split(""), "15 1 3 1 2 3 3 15".split(" "), "20 2 2 4 2 4 3 20".split(" "), "15 20 15 20 20 15 20 15".split(" "), "20 0 20 0 0 20 0 20".split(" "), "15 0 15 0 0 15 0 15".split(" "), "20 0 20 0 0 20 0 20".split(" ")], ["33132144".split(""), "24341233".split(""), "23123144".split(""), "34232331".split(""), "22 22 22 22 22 22 22 22".split(" "), "33213144".split(""), "24132432".split(""), "13 13 13 13 13 13 13 13".split(" ")], ["14 14 14 14 14 14 14 14".split(" "), "32141344".split(""), "23432111".split(""), "14141222".split(""), "44332131".split(""), "23243434".split(""), "67899876".split(""), "67899876".split("")], ["14 3 2 14 14 2 3 14".split(" "), "3+17 2+17 1+17 4+17 1+17 3+17 4+17 4+17".split(" "), "2+17 3+17 4+17 3+17 2+17 1+17 1+17 1+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "3 13 13 4 2 13 13 4".split(" ")], ["3+19 1+19 1+19 4+19 2+19 2+19 1+19 4+19".split(" "), "2+19 4+19 4+19 2+19 1+19 4+19 2+19 3+19".split(" "), "1+19 1+19 3+19 2+19 1+19 4+19 2+19 2+19".split(" "), "4+19 4+19 2+19 1+19 3+19 1+19 3+19 4+19".split(" "), "2+19 4+19 23 3+19 4+19 23 4+19 4+19".split(" "), "3+19 3+19 2+19 3+19 1+19 2+19 1+19 4+19".split(" "), "23 3+19 3+19 3+19 2+19 3+19 2+19 23".split(" "), "1+19 2+19 1+19 1+19 3+19 4+19 2+19 1+19".split(" ")], ["14 3 12 12 12 12 3 14".split(" "), "30000004".split(""), "12 0 1 4 2 3 0 12".split(" "), "12 0 1 4 2 3 0 12".split(" "), "12 0 1 4 2 3 0 12".split(" "), "12 0 1 4 2 3 0 12".split(" "), "30000004".split(""), "3 3 12 12 12 12 3 4".split(" ")], ["14 0 0 0 0 0 0 14".split(" "), "10032001".split(""), "18 0 2 4 3 1 0 18".split(" "), "12 1 3 2 1 2 4 12".split(" "), "12 2 1 3 1 3 3 12".split(" "), "22 4 4 3 4 1 2 22".split(" "), "22 20 20 20 20 20 20 22".split(" "), "22 20 20 20 20 20 20 22".split(" ")], ["32142134".split(""), "24100141".split(""), "1 4 0 18+17 18+17 0 3 2".split(" "), "1 3 0 18+17 18+17 0 3 2".split(" "), "4 3 0 18+17 18+17 0 3 3".split(" "), "34100434".split(""), "31242244".split(""), "13 13 1 3 2 4 13 13".split(" ")], ["32142414".split(""), "21331422".split(""), "44213144".split(""), "11413231".split(""), "00000000".split(""), "67899876".split(""), "12 12 12 12 12 12 12 12".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["12+17 3+17 3+17 3+17 3+17 3+17 3+17 12+17".split(" "), "12+17 12+17 3+17 3+17 3+17 3+17 12+17 12+17".split(" "), "12+17 12+17 12+17 3+17 3+17 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 12+17 12+17 12+17 12+17 12+17".split(" "), "12+17 12+17 12+17 12+17 12+17 12+17 12+17 12+17".split(" "), "20+17 12+17 12+17 12+17 12+17 12+17 12+17 20+17".split(" "), "20+17 20+17 12+17 12+17 12+17 12+17 20+17 20+17".split(" "), "20+17 20+17 20+17 12+17 12+17 20+17 20+17 20+17".split(" ")], ["24242144".split(""), "03131130".split(""), "0 0 12 12 12 12 0 0".split(" "), "0 0 0 12 12 0 0 0".split(" "), "0 0 0 12+17 12+17 0 0 0".split(" "), "0 0 20+17 20+17 20+17 20+17 0 0".split(" "), "0 20+17 20+17 20+17 20+17 20+17 20+17 0".split(" "), "12+17 12+17 12+17 12+17 12+17 12+17 12+17 12+17".split(" ")], ["4+17 1+17 4+17 1+17 3+17 1+17 3+17 2+17".split(" "), "3+17 2+17 4+17 2+17 1+17 2+17 4+17 4+17".split(" "), "0 0 0 4+17 3+17 0 0 0".split(" "), "18 20 20 3+17 2+17 20 20 18".split(" "), "0 0 0 3+17 2+17 0 0 0".split(" "), "18 20 20 4+17 1+17 20 20 18".split(" "), "0 0 0 4+17 1+17 0 0 0".split(" "), "18 20 20 13+17 13+17 20 20 18".split(" ")], ["3 15 1 4 2 1 15 4".split(" "), "0 3 15 4 2 15 3 0".split(" "), "15 0 1 15 15 1 0 15".split(" "), "3+19 15 0 4 2 0 15 4+19".split(" "), "0 3+19 15 15 15 15 3+19 0".split(" "), "15 0 1+19 4+19 2+19 1+19 0 15".split(" "), "3+19 15 0 4 2 0 15 4+19".split(" "), "3 3+19 1 4 2 1 3+19 4".split(" ")], ["12+17 12+17 0 1 2 0 12+17 12+17".split(" "), "12+17 12+17 0 3 2 0 12+17 12+17".split(" "), "00032000".split(""), "33132131".split(""), "23112132".split(""), "00012000".split(""), "12+17 12+17 0 3 2 0 12+17 12+17".split(" "), "12+17 12+17 0 2 2 0 12+17 12+17".split(" ")], ["32142431".split(""), "12 3 3 1 3 1 2 12".split(" "), "20 12 2 4 2 4 12 20".split(" "), "20 20 12 1 2 12 20 20".split(" "), "12 20 20 12 12 20 20 12".split(" "), "3 12 20 20 20 20 12 4".split(" "), "3 3 12 20 20 12 3 4".split(" "), "13 13 13 12 12 13 13 13".split(" ")], ["34142332".split(""), "23314412".split(""), "14113134".split(""), "32231221".split(""), "22232143".split(""), "6+17 7+17 8+17 9+17 9+17 8+17 7+17 6+17".split(" "), "6+17 7+17 8+17 9+17 9+17 8+17 7+17 6+17".split(" "), "6+17 7+17 8+17 9+17 9+17 8+17 7+17 6+17".split(" ")], ["32145134".split(""), "32145134".split(""), "32145134".split(""), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "22 0 0 22 22 0 0 22".split(" ")], ["14 3 0 4 2 0 3 14".split(" "), "18 3 0 3 1 0 3 18".split(" "), "18 2 0 1 3 0 1 18".split(" "), "18 1 0 4 3 0 2 18".split(" "), "18 4 0 2 4 0 4 18".split(" "), "18 2 0 3 1 0 3 18".split(" "), "18 1 0 12 12 0 2 18".split(" "), "18 3 0 12 12 0 1 18".split(" ")], ["1+17 3 0 0 0 0 3 1+17".split(" "), "1+17 3 0 0 0 0 3 1+17".split(" "), "18+17 3 20 0 0 20 3 18+17".split(" "), "18+17 4 20 20 20 20 4 18+17".split(" "), "18+17 4 20 20 20 20 4 18+17".split(" "), "18+17 2 20 0 0 20 2 18+17".split(" "), "18+17 2 0 0 0 0 2 18+17".split(" "), "13+17 2 0 0 0 0 2 13+17".split(" ")], ["01011010".split(""), "1+19 1 0 1 1 0 1 1+19".split(" "), "0 2 22 2 2 22 2 0".split(" "), "2+19 3 0 2 2 0 3 2+19".split(" "), "0 2 22 3 3 22 2 0".split(" "), "3+19 4 0 4 4 0 4 3+19".split(" "), "0 3 22 4 4 22 3 0".split(" "), "4+19 4 0 1 1 0 4 4+19".split(" ")], ["32142251".split(""), "2 4 18 18 18 18 3 4".split(" "), "1 3 18 20 20 18 1 5".split(" "), "2 1 18 20 20 18 5 4".split(" "), "5 5 18 20 20 18 2 2".split(" "), "1 2 18 20 20 18 3 5".split(" "), "3 4 18 0 0 18 4 1".split(" "), "3 4 18 22 22 18 1 2".split(" ")], ["31152134".split(""), "23353254".split(""), "1+19 3 1 2 3 3 3 2+19".split(" "), "5+19 3 2 4 3 4 5 1+19".split(" "), "3+19 2+19 2 1 5 1 2+19 4+19".split(" "), "0 2+19 3+19 4 5 2+19 5+19 0".split(" "), "0 0 1+19 4+19 3+19 5+19 0 0".split(" "), "3+19 2+19 5+19 3+19 2+19 1+19 3+19 4+19".split(" ")], ["3 14 14 5 3 14 14 4".split(" "), "23333254".split(""), "20 20 20 20 20 20 20 20".split(" "), "53243451".split(""), "20 20 20 20 20 20 20 20".split(" "), "22342253".split(""), "20 20 20 20 20 20 20 20".split(" "), "13 3 5 13 13 1 4 13".split(" ")], ["12152134".split(""), "23353254".split(""), "15125332".split(""), "53243451".split(""), "15+17 15+17 15+17 15+17 15+17 15+17 15+17 15+17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "15+17 15+17 15+17 15+17 15+17 15+17 15+17 15+17".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["00000000".split(""), "23314412".split(""), "14113134".split(""), "32231221".split(""), "2 2 3 33 33 1 4 3".split(" "), "14113134".split(""), "32231221".split(""), "00000000".split("")], ["00000000".split(""), "2 2 3 31 4 4 1 2".split(" "), "1 3 1 2 31 4 3 4".split(" "), "32 32 2 3 1 2 2 31".split(" "), "2 1 4 3 4 31 4 3".split(" "), "1 4 1 2 3 31 3 4".split(" "), "3 2 32 32 1 2 2 1".split(" "), "00000000".split("")], ["14 14 1 14 14 3 14 14".split(" "), "22122413".split(""), "4 3 4 32 2 3 2 1".split(" "), "1 31 3 3 1 4 31 1".split(" "), "4 1 32 4 2 32 3 2".split(" "), "31 1 4 3 32 4 4 3".split(" "), "4 4 2 3 2 2 1 32".split(" "), "11243144".split("")], ["12342424".split(""), "41234224".split(""), "44233351".split(""), "22521511".split(""), "13253423".split(""), "2 2 18 18 18 18 4 3".split(" "), "18 18 18 34 31 18 18 18".split(" "), "18 18 18 32 33 18 18 18".split(" ")], ["0 0 0 4 34 0 0 0".split(" "), "0 0 2 33 2 3 0 0".split(" "), "4 2 1 2 34 4 3 0".split(" "), "1 1 4 34 4 3 1 1".split(" "), "4 4 2 1 33 4 4 1".split(" "), "2 4 2 34 2 3 3 1".split(" "), "2+17 4+17 3+17 2+17 3+17 2+17 1+17 3+17".split(" "), "4+17 3+17 1+17 4+17 1+17 4+17 3+17 3+17".split(" ")], ["23444243".split(""), "44124332".split(""), "42314441".split(""), "41242241".split(""), "42333141".split(""), "12 12 12 12 12 12 12 12".split(" "), "34 32 34 31 33 33 31 34".split(" "), "32 20 20 20 20 20 20 32".split(" ")], ["34142332".split(""), "23314412".split(""), "14113134".split(""), "32231221".split(""), "22232143".split(""), "1 4 1 1+19 3+19 1 3 4".split(" "), "3 2 2+19 3+19 1+19 2+19 2 1".split(" "), "32+19 32+19 2 3 2 1 32+19 32+19".split(" ")], ["34142332".split(""), "23314412".split(""), "14113134".split(""), "32231221".split(""), "3 22 2 3 3 1 22 3".split(" "), "1 22 1 1 3 1 22 4".split(" "), "3 22 2 3 1 2 22 1".split(" "), "2 22 3 3 2 1 22 3".split(" ")], ["34142332".split(""), "23314432".split(""), "14313334".split(""), "32441223".split(""), "21234123".split(""), "1 4 13 13 13 13 3 4".split(" "), "3 13 2 3 1 2 13 1".split(" "), "13 2 2 3 2 1 4 13".split(" ")], ["34142332".split(""), "21344212".split(""), "14312134".split(""), "31231121".split(""), "15 15 15 15 15 15 15 15".split(" "), "1 4 1 31 33 1 3 4".split(" "), "15 15 15 15 15 15 15 15".split(" "), "2 2 2 33 32 1 4 3".split(" ")], ["34142132".split(""), "2 1 33 2 1 34 1 2".split(" "), "1 34 1 1 3 1 33 4".split(" "), "34214221".split(""), "32134143".split(""), "1+17 4+17 1+17 1+17 3+17 1+17 3+17 4+17".split(" "), "3+17 2+17 2+17 3+17 1+17 2+17 2+17 1+17".split(" "), "2+17 2+17 2+17 3+17 2+17 1+17 4+17 3+17".split(" ")], ["33 4 1 4 2 3 3 33".split(" "), "32 3 3 1 4 4 1 32".split(" "), "31 4 1 1 3 1 3 31".split(" "), "32231221".split(""), "2 2 2 20+17 20+17 1 4 3".split(" "), "1 4 20+17 20+17 20+17 20+17 3 4".split(" "), "2 20+17 20+17 20+17 20+17 20+17 20+17 1".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" ")], ["0 0 0 15 15 0 0 0".split(" "), "0 0 15 1 4 15 0 0".split(" "), "0 15 1 1 3 1 15 0".split(" "), "20 20 20 3 1 20 20 20".split(" "), "0 0 15 15 15 15 0 0".split(" "), "00113100".split(""), "0 0 15 15 15 15 0 0".split(" "), "0 0 20 20 20 20 0 0".split(" ")], ["22 4 1 4 2 3 3 22".split(" "), "20 3 3 1 4 4 1 20".split(" "), "20 4 1 31 33 1 3 20".split(" "), "20 2 32 3 1 32 2 20".split(" "), "20 32 2 3 2 1 34 20".split(" "), "20 4 1 1 3 1 3 20".split(" "), "20 2 2 3 1 2 2 20".split(" "), "22 20 20 20 20 20 20 22".split(" ")], ["34142332".split(""), "23314412".split(""), "31 4 1 1 3 1 3 34".split(" "), "3 32 2 3 1 2 32 1".split(" "), "2 2 32 3 2 31 4 3".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 15 20 15 15 20 15 20".split(" "), "20 6 20 7 7 20 6 20".split(" ")], ["20+17 2 2 20+17 20+17 4 3 20+17".split(" "), "20+17 3 3 20+17 20+17 1 3 20+17".split(" "), "20+17 3 3 20+17 20+17 3 4 20+17".split(" "), "20+17 3 1 20+17 20+17 4 3 20+17".split(" "), "20+17 2 3 20+17 20+17 1 4 20+17".split(" "), "20+17 3 1 20+17 20+17 1 3 20+17".split(" "), "20+17 3 2 20+17 20+17 2 1 20+17".split(" "), "13 1 2 13 13 2 3 13".split(" ")], ["14 3 1 4 2 3 2 14".split(" "), "2 14 32 34 34 32 14 4".split(" "), "1 2 14 1 3 14 1 2".split(" "), "3 1 3 14 14 3 4 2".split(" "), "12324231".split(""), "11433221".split(""), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" ")], ["41313131".split(""), "14 2 2 14 14 1 1 14".split(" "), "12331133".split(""), "14 1 3 14 14 4 1 14".split(" "), "22313334".split(""), "14 2 3 14 14 3 3 14".split(" "), "33 1 2 32 32 3 3 33".split(" "), "22 3 1 22 22 4 4 22".split(" ")], ["12431122".split(""), "22144122".split(""), "41134131".split(""), "44414334".split(""), "12 1 2 12 12 3 3 12".split(" "), "12 1 12 31 32 12 4 12".split(" "), "12 12 31 32 31 32 12 12".split(" "), "12 20 32 31 32 31 20 12".split(" ")], ["2 2 20 20 20 20 2 2".split(" "), "3 3 20 20 20 20 3 3".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "22 20 20 20 20 20 20 22".split(" ")], ["41231334".split(""), "33 2 2 1 2 4 3 33".split(" "), "2 33 2 3 2 2 33 3".split(" "), "14314214".split(""), "20 20 20 20 20 20 20 20".split(" "), "20 20 20 18 18 20 20 20".split(" "), "20 20 18 18 18 18 20 20".split(" "), "20 18 18 18 18 18 18 20".split(" ")], ["14341112".split(""), "33 2 2 3 4 4 1 33".split(" "), "43224331".split(""), "33 4 2 1 2 3 1 33".split(" "), "2 3 1 13 13 1 3 3".split(" "), "4 4 13 15 15 13 4 3".split(" "), "2 13 15 18 18 15 13 2".split(" "), "13 12 12 12 12 12 12 13".split(" ")], ["14 12 1 4 2 3 12 14".split(" "), "32 12 3 1 4 4 12 32".split(" "), "31 12 1 1 3 1 12 34".split(" "), "33 12 2 3 1 2 12 31".split(" "), "32 12 2 3 2 1 12 33".split(" "), "31 12 1 1 3 1 12 34".split(" "), "33 12 2 3 1 2 12 31".split(" "), "20 12 2 3 2 1 12 20".split(" ")], ["24431222".split(""), "31 14 14 14 14 14 14 31".split(" "), "13422424".split(""), "4 14 1 3 4 2 14 3".split(" "), "2 2 14 14 14 14 4 3".split(" "), "34 14 3 2 3 2 14 34".split(" "), "33441441".split(""), "28766782".split("")], ["31 31 31 31 33 34 34 34".split(" "), "34 31 31 34 33 32 34 32".split(" "), "32 32 33 34 34 33 31 33".split(" "), "34 34 33 33 34 33 31 33".split(" "), "31 31 33 34 33 34 31 33".split(" "), "33 33 33 32 34 33 32 34".split(" "), "31 31 33 34 34 34 33 34".split(" "), "31 33 33 11 10 32 32 32".split(" ")], ["4 3 14 32 31 14 4 1".split(" "), "1 3 2 14 14 1 2 1".split(" "), "4 4 2 31 34 1 2 1".split(" "), "2 1 1 34 34 3 3 1".split(" "), "1 2 4 32 32 1 2 1".split(" "), "3 2 1 31 32 4 2 3".split(" "), "2 13 2 33 33 3 13 4".split(" "), "13 1 3 31 31 2 3 13".split(" ")], ["11342221".split(""), "4 33 1 2 1 3 34 2".split(" "), "20 4 20 1 2 2 20 2".split(" "), "18 1 18 4 20 3 18 4".split(" "), "18 20 18 20 18 4 18 20".split(" "), "18 18 18 18 18 20 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["14413441".split(""), "43342432".split(""), "31112412".split(""), "24311223".split(""), "21131343".split(""), "41143231".split(""), "22112431".split(""), "8 31+19 31+19 9 9 34+19 34+19 8".split(" ")], ["12241341".split(""), "44411341".split(""), "4 4 2 22 22 2 3 1".split(" "), "1 33 4 18 18 1 32 1".split(" "), "4 31 4 18 18 4 33 2".split(" "), "1 4 1 18 18 4 2 3".split(" "), "2 1 18 18 18 18 1 1".split(" "), "2 18 18 18 18 18 18 2".split(" ")], ["14 2 2 14 14 1 3 14".split(" "), "21213133".split(""), "13134224".split(""), "32243142".split(""), "41213133".split(""), "23434224".split(""), "2+19 1+19 1+19 3+19 1+19 2+19 4+19 3+19".split(" "), "4+19 3+19 3+19 2+19 4+19 2+19 1+19 3+19".split(" ")], ["12152134".split(""), "23353254".split(""), "15125332".split(""), "53243451".split(""), "53243451".split(""), "18 18 18 18 18 18 18 18".split(" "), "15+17 15+17 15+17 15+17 15+17 15+17 15+17 15+17".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["12152134".split(""), "23353254".split(""), "15125332".split(""), "53243451".split(""), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "15+17 15+17 15+17 15+17 15+17 15+17 15+17 15+17".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["01142120".split(""), "03233410".split(""), "04312130".split(""), "1 3+17 2+17 1+17 2+17 4+17 3+17 1".split(" "), "22 2+17 1+17 2+17 3+17 1+17 2+17 22".split(" "), "0 22 4+17 4+17 2+17 2+17 22 0".split(" "), "0 1+17 22 1+17 2+17 22 3+17 0".split(" "), "0 0 0 22 22 0 0 0".split(" ")], ["18+17 3+17 3+17 3+17 3+17 3+17 3+17 18+17".split(" "), "18+17 18+17 3+17 3+17 3+17 3+17 18+17 18+17".split(" "), "18+17 18+17 18+17 3+17 3+17 18+17 18+17 18+17".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "12+17 12+17 12+17 12+17 12+17 12+17 12+17 12+17".split(" "), "20+17 12+17 12+17 12+17 12+17 12+17 12+17 20+17".split(" "), "20+17 20+17 12+17 12+17 12+17 12+17 20+17 20+17".split(" "), "20+17 20+17 20+17 12+17 12+17 20+17 20+17 20+17".split(" ")], ["2 3 12 12 12 12 3 2".split(" "), "30000003".split(""), "14 0 1 2 2 3 0 14".split(" "), "20 0 1 2 2 3 0 20".split(" "), "20 0 1 2 2 3 0 20".split(" "), "20 0 1 2 2 3 0 20".split(" "), "10000001".split(""), "3 2 12 12 12 12 2 3".split(" ")], ["14 2 2 14 14 1 3 14".split(" "), "2 20 20 1 3 20 20 3".split(" "), "13134224".split(""), "20 2 2 4 3 1 4 20".split(" "), "41213133".split(""), "23434224".split(""), "2+19 1+19 31+19 33+19 31+19 32+19 4+19 3+19".split(" "), "4+19 3+19 3+19 2+19 4+19 2+19 1+19 3+19".split(" ")], ["14 14 14 14 14 14 14 14".split(" "), "3 20 20 20 20 20 20 4".split(" "), "12 20 1 4 2 3 20 12".split(" "), "12 20 1 4 2 3 20 12".split(" "), "12 20 1 4 2 3 20 12".split(" "), "12 20 1 4 2 3 20 12".split(" "), "3 20 20 20 20 20 20 4".split(" "), "3 3 1 12 12 1 3 4".split(" ")], ["13241122".split(""), "3 14 1 4 2 1 14 4".split(" "), "15 2 1+19 1+19 1+19 1+19 4 15".split(" "), "2 15 2+19 15 15 2+19 15 4".split(" "), "15 2 3+19 15 15 3+19 4 15".split(" "), "2 15 4+19 1+19 1+19 4+19 15 4".split(" "), "15 14 2 1 2 4 14 15".split(" "), "32441112".split("")], ["0 15+17 0 15+17 15+17 0 15+17 0".split(" "), "0 15+17 0 15+17 15+17 0 15+17 0".split(" "), "0 15+17 0 15+17 15+17 0 15+17 0".split(" "), "0 15+17 0 15+17 15+17 0 15+17 0".split(" "), "3 2 2 14 14 1 3 4".split(" "), "3 3 14 4 2 14 3 4".split(" "), "2+17 3+17 1+17 3+17 1+17 2+17 4+17 3+17".split(" "), "3+17 1+17 2+17 4+17 2+17 1+17 3+17 4+17".split(" ")], ["13042031".split(""), "13042031".split(""), "13242431".split(""), "13342331".split(""), "00000000".split(""), "3+17 3+17 0 4+17 2+17 0 3+17 4+17".split(" "), "15+17 15+17 0 15+17 15+17 0 15+17 15+17".split(" "), "3+17 3+17 0 4+17 2+17 0 3+17 4+17".split(" ")], ["0 0 14 0 0 14 0 0".split(" "), "01222220".split(""), "31241213".split(""), "22534412".split(""), "43534434".split(""), "43531434".split(""), "12521423".split(""), "00200200".split("")], ["1 2 3 15 15 2 2 1".split(" "), "11412231".split(""), "15 3 1 2 1 2 2 15".split(" "), "42323412".split(""), "24312344".split(""), "3 15 15 2 4 15 15 2".split(" "), "11413323".split(""), "22113323".split("")], ["00132100".split(""), "0 2 14 4 5 14 2 0".split(" "), "31423425".split(""), "3 14 1 4 2 1 14 4".split(" "), "5 2 1 5 5 1 15 3".split(" "), "43353211".split(""), "01123450".split(""), "00343400".split("")], ["0 0 0 14 2 3 4 5".split(" "), "0 0 14 1 1 1 3 4".split(" "), "0 14 1 2 3 4 1 3".split(" "), "14 4 3 2 4 1 1 2".split(" "), "4 1 1 5 4 3 2 13".split(" "), "3 1 1 1 1 1 13 0".split(" "), "2 3 1 1 1 13 0 0".split(" "), "1 2 3 4 13 0 0 0".split(" ")], ["33342133".split(""), "30455202".split(""), "10244101".split(""), "40232204".split(""), "20332104".split(""), "10413302".split(""), "30132402".split(""), "54321422".split("")], ["01142120".split(""), "03233410".split(""), "04312130".split(""), "1 3+17 2+17 1+17 2+17 4+17 3+17 1".split(" "), "2 2+17 1+17 2+17 3+17 1+17 2+17 2".split(" "), "0 2 4+17 4+17 2+17 2+17 2 0".split(" "), "0 1+17 2 1+17 2+17 2 3+17 0".split(" "), "00022000".split("")], ["0 14+17 0 14+17 14+17 0 14+17 0".split(" "), "0 3+17 0 3+17 3+17 0 3+17 0".split(" "), "0 4+17 0 4+17 4+17 0 4+17 0".split(" "), "0 5+17 0 5+17 5+17 0 5+17 0".split(" "), "32222134".split(""), "33142434".split(""), "3+17 1+17 4+17 1+17 1+17 1+17 3+17 4+17".split(" "), "3+17 1+17 2+17 4+17 2+17 1+17 3+17 4+17".split(" ")], ["43452221".split(""), "02232220".split(""), "00211400".split(""), "00012000".split(""), "00232300".split(""), "0 4 2+17 1+17 4+17 3+17 2 0".split(" "), "3 3 3+17 3+17 3+17 3+17 5 3".split(" "), "2 2 2+17 1+17 4+17 3+17 3 2".split(" ")], ["34232241".split(""), "21421143".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "2 2 1 18 18 3 2 1".split(" "), "1 3 13 13 13 13 1 2".split(" "), "5 13 5 2 5 3 13 4".split(" "), "13 4 5 2 5 3 3 13".split(" ")], ["2+17 2+17 3+17 3+17 3+17 3+17 3+17 3+17".split(" "), "2+17 4+17 3+17 3+17 3+17 3+17 1+17 1+17".split(" "), "3+17 5+17 4+17 3+17 3+17 4+17 2+17 3+17".split(" "), "3+17 1+17 5+17 1+17 2+17 5+17 2+17 2+17".split(" "), "1+17 2+17 2+17 1+17 2+17 1+17 2+17 3+17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["24242144".split(""), "03131130".split(""), "03323430".split(""), "04232130".split(""), "0 2 2 3+17 2+17 4 2 0".split(" "), "0 1 14+17 14+17 14+17 14+17 2 0".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" ")], ["4+17 1+17 4+17 1+17 3+17 1+17 3+17 2+17".split(" "), "3+17 2+17 4+17 2+17 1+17 2+17 4+17 4+17".split(" "), "0 0 0 4+17 3+17 0 0 0".split(" "), "2 1 3 3+17 2+17 2 4 5".split(" "), "2 3 3 3+17 2+17 1 2 3".split(" "), "0 0 0 4+17 1+17 0 0 0".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" ")], ["18 18 1 4 2 1 18 18".split(" "), "18 3 1 4 2 1 3 18".split(" "), "22 3 1 4 2 1 3 22".split(" "), "22 3 1 4 2 1 3 22".split(" "), "22 3 1 4 2 1 3 22".split(" "), "22 3 1 4 2 1 3 22".split(" "), "18 3 1 4 2 1 3 18".split(" "), "18 18 1 4 2 1 18 18".split(" ")], ["2+19 1+19 2 1 2 2 2+19 1+19".split(" "), "2+19 1+19 5 3 2 4 2+19 1+19".split(" "), "32231543".split(""), "34132114".split(""), "21313532".split(""), "52142311".split(""), "4+19 3+19 2 1 2 2 3+19 4+19".split(" "), "4+19 3+19 3 4 2 4 3+19 4+19".split(" ")], ["3 2 1+17 4 2 4+17 3 1".split(" "), "2 3+17 3 1+17 3+17 1 2+17 5".split(" "), "1+17 3 2 4 2 4 4 3+17".split(" "), "2+17 4+17 20 20 20 20 1+17 2+17".split(" "), "20 3+17 5+17 20 20 4+17 2+17 20".split(" "), "20 20 1+17 2+17 5+17 3+17 20 20".split(" "), "20 3+17 1 3+17 4+17 20 3+17 20".split(" "), "2+17 20 20 20 20 20 20 4+17".split(" ")], ["1+17 3 2 2 3 2 1 1+17".split(" "), "1 2+17 3 1 2 2 2+17 4".split(" "), "1 2 3+17 4 2 3+17 4 4".split(" "), "2 2 2 4+17 4+17 2 1 3".split(" "), "2 4 3 5+17 5+17 3 2 4".split(" "), "3 1 4+17 3 1 4+17 3 4".split(" "), "3 3+17 2 3 1 2 3+17 4".split(" "), "2+17 1 2 2 3 3 4 2+17".split(" ")], ["1+17 2+17 0 1 2 0 2+17 1+17".split(" "), "3+17 4+17 0 3 2 0 4+17 3+17".split(" "), "00133400".split(""), "3 3 1 2+19 3+19 1 3 1".split(" "), "2 3 1 5+19 4+19 1 3 2".split(" "), "00311200".split(""), "3+17 4+17 0 3 2 0 4+17 3+17".split(" "), "1+17 2+17 0 2 2 0 2+17 1+17".split(" ")], ["14 1 2 2 1 2 3 14".split(" "), "12345432".split(""), "51525431".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "20 20 20 20 20 20 20 20".split(" "), "11242521".split(""), "20 20 20 20 20 20 20 20".split(" ")], ["33342133".split(""), "3 3+19 4 2+17 2+17 2 2+19 2".split(" "), "1 2+19 2 2+17 1+17 1 3+19 1".split(" "), "4 1+19 2 3+17 3+17 2 2+19 4".split(" "), "2 3+19 3 4+17 4+17 1 1+19 4".split(" "), "1 2+19 4 1+17 3+17 3 2+19 2".split(" "), "3 3+19 1 2+17 2+17 4 1+19 2".split(" "), "23221451".split("")], ["34142332".split(""), "23314412".split(""), "14113134".split(""), "32231221".split(""), "22232143".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "3+19 2+19 1+19 2+19 3+19 2+19 1+19 2+19".split(" ")], ["22 2 2+19 2 2 2+19 2 22".split(" "), "1 3 3+19 4 4 3+19 3 1".split(" "), "1+19 4+19 4+19 2 4 4+19 4+19 1+19".split(" "), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "4+19 1+19 3+19 18 18 3+19 1+19 4+19".split(" "), "4 1 3+19 18 18 3+19 1 4".split(" "), "2 2 2+19 18 18 2+19 2 2".split(" ")], ["12142134".split(""), "13343214".split(""), "18+17 18+17 21 21 21 21 18+17 18+17".split(" "), "22 18+17 21 21 21 21 18+17 22".split(" "), "22 18+17 21 21 21 21 18+17 22".split(" "), "18+17 18+17 21 21 21 21 18+17 18+17".split(" "), "18+17 18+17 2 4 4 2 18+17 18+17".split(" "), "18+17 18+17 2 3 3 2 18+17 18+17".split(" ")], ["34142332".split(""), "23314432".split(""), "14113114".split(""), "32231221".split(""), "22232143".split(""), "41344111".split(""), "15 15 20 20 20 20 15 15".split(" "), "22 22 20 20 20 20 22 22".split(" ")], ["12132134".split(""), "13333214".split(""), "2 12 12 12 12 12 12 1".split(" "), "3 12 3+19 1+19 1+19 3+19 12 1".split(" "), "3 12 1+19 22 22 1+19 12 1".split(" "), "1 12 3+19 1+19 1+19 3+19 12 1".split(" "), "1 12 12 12 12 12 12 1".split(" "), "31233213".split("")], ["12121124".split(""), "2+19 3 3+19 4 4 3+19 3 2+19".split(" "), "41100142".split(""), "13100121".split(""), "21200241".split(""), "18 4 18 0 0 18 3 18".split(" "), "22 2 22 4 3 22 2 22".split(" "), "13 1 13 3 3 13 1 13".split(" ")], ["5+17 2+17 0 0 0 0 3+17 4+17".split(" "), "1 3 2+19 0 0 2+19 1 4".split(" "), "51000055".split(""), "32442332".split(""), "1 18+17 18+17 1+19 1+19 18+17 18+17 4".split(" "), "3 5 18+17 31+19 31+19 18+17 2 2".split(" "), "1 18+17 4+17 4 4 4+17 18+17 4".split(" "), "18+17 1+17 2+17 3 1 2+17 3+17 18+17".split(" ")], ["12 12 1 2 2 2 12 12".split(" "), "33333223".split(""), "21000012".split(""), "1 3 0 1+19 2+19 0 3 1".split(" "), "1 3 0 4+19 3+19 0 3 1".split(" "), "21000012".split(""), "1 32 3 3 3 3 32 1".split(" "), "13 1 3 3 3 3 1 13".split(" ")], ["44422444".split(""), "00022000".split(""), "0 0 12 12 12 12 0 0".split(" "), "0 12 12 12 12 12 12 0".split(" "), "0 12 12 12 12 12 12 0".split(" "), "0 0 12 12 12 12 0 0".split(" "), "00044000".split(""), "33 33 2 3 3 2 33 33".split(" ")], ["34 0 3 4 3 1 0 34".split(" "), "0 3 22 4 3 22 1 0".split(" "), "22214333".split(""), "22200333".split(""), "11100444".split(""), "11131444".split(""), "03344210".split(""), "34 0 13 3 3 13 0 34".split(" ")], ["4+17 15+17 15+17 15+17 3+17 3+17 3+17 4+17".split(" "), "4+17 12+17 12+17 12+17 15+17 15+17 15+17 4+17".split(" "), "3+17 0 0 0 12+17 12+17 12+17 3+17".split(" "), "3+17 1+17 1+17 1+17 0 0 0 4+17".split(" "), "3+17 0 0 0 1+17 1+17 1+17 3+17".split(" "), "3+17 15+17 15+17 15+17 0 0 0 3+17".split(" "), "4+17 12+17 12+17 12+17 15+17 15+17 15+17 4+17".split(" "), "3+17 2+17 2+17 2+17 12+17 12+17 12+17 3+17".split(" ")], ["21 2 1 1 2 1 2 21".split(" "), "3 21 0 3 3 0 21 3".split(" "), "1 0 21 1+19 1+19 21 0 1".split(" "), "1 2 1+19 21 21 1+19 2 1".split(" "), "1 2 1+19 21 21 1+19 2 1".split(" "), "1 0 21 1+19 1+19 21 0 1".split(" "), "3 21 0 3 3 0 21 3".split(" "), "21 1 2 3 3 2 1 21".split(" ")], ["14 14 0 0 0 0 14 14".split(" "), "18 18 0 0 0 0 18 18".split(" "), "31211213".split(""), "12344321".split(""), "31 32 33 34 34 33 32 31".split(" "), "33111133".split(""), "12 12 12 12 12 12 12 12".split(" "), "2+19 2+19 2+19 2+19 2+19 2+19 2+19 2+19".split(" ")], ["14 0 14 0 14 3 3 3".split(" "), "15 0 15 0 15 2 3 3".split(" "), "12 0 12 0 12 1 3 3".split(" "), "12 0 12 0 12 3 2 2".split(" "), "12 0 12 0 12 2 2 1".split(" "), "12 0 12 0 12 2 1 1".split(" "), "12 0 12 0 12 2 1 1".split(" "), "12 0 12 0 12 3 1 1".split(" ")], ["12 1 2 1 2 2 2 12".split(" "), "12 12 2 1 1 1 12 12".split(" "), "3+19 12 12 2 1 12 12 3+19".split(" "), "3+19 4+19 12 12 12 12 4+19 3+19".split(" "), "3+19 4+19 12 12 12 12 4+19 3+19".split(" "), "3+19 12 12 1 1 12 12 3+19".split(" "), "12 12 2 2 1 2 12 12".split(" "), "12 1 1 1 2 1 1 12".split(" ")], ["03341320".split(""), "23143214".split(""), "3 3 12+17 12+17 12+17 12+17 12+17 1".split(" "), "4 1 12+17 3 4 3 12+17 1".split(" "), "4 3 12+17 4 32 4 12+17 1".split(" "), "4 2 12+17 3 4 3 12+17 4".split(" "), "2 3 12+17 12+17 12+17 12+17 12+17 2".split(" "), "02432210".split("")], ["25112134".split(""), "2 12 3 5 3 2 12 4".split(" "), "2 3 12 1 2 12 3 1".split(" "), "3 5 2 12 12 1 3 3".split(" "), "5 2 3 12 12 2 4 4".split(" "), "1 12 12 1 1 12 12 1".split(" "), "21 21 21 21 21 21 21 21".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["44112134".split(""), "22313224".split(""), "22212231".split(""), "02200130".split(""), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" "), "18+17 31+17 32+17 18+17 18+17 31+17 32+17 18+17".split(" "), "18+17 33+17 34+17 18+17 18+17 33+17 34+17 18+17".split(" "), "18+17 18+17 18+17 18+17 18+17 18+17 18+17 18+17".split(" ")], ["1 3 3 21 21 21 21 14".split(" "), "2 21 21 21 21 21 21 21".split(" "), "2 21 21 21 21 21 21 21".split(" "), "21 21 21 21 21 21 21 21".split(" "), "21 21 21 21 21 21 21 21".split(" "), "21 21 21 21 21 21 21 21".split(" "), "21 21 21 21 21 21 21 21".split(" "), "21 21 21 21 21 21 21 21".split(" ")], ["00031440".split(""), "0 0 3 2 3 4 0 21+17".split(" "), "0 1 1 3 3 0 21+17 21+17".split(" "), "4 3 3 2 0 21+17 21+17 21+17".split(" "), "1 1 1 0 21+17 21+17 21+17 21+17".split(" "), "3 3 0 21+17 21+17 21+17 21+17 0".split(" "), "3 0 21+17 21+17 21+17 21+17 0 0".split(" "), "0 21+17 21+17 21+17 21+17 0 0 0".split(" ")], ["14 14 14 14 14 14 14 14".split(" "), "23344332".split(""), "23311332".split(""), "21444412".split(""), "21131312".split(""), "15 15 15 15 15 15 15 15".split(" "), "12 12 12 12 12 12 12 12".split(" "), "3+19 3+19 3+19 3+19 3+19 3+19 3+19 3+19".split(" ")], ["11133421".split(""), "22413434".split(""), "42221414".split(""), "31413123".split(""), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 22 22 22 22 20+17 20+17".split(" ")], ["15 1 1 15 15 2 3 15".split(" "), "2+19 1 4 2+19 3+19 2 3 4+19".split(" "), "15 2 4 15 15 3 3 15".split(" "), "4+19 2 3 4+19 1+19 3 2 1+19".split(" "), "15 3 2 15 15 1 1 15".split(" "), "1+19 3 2 1+19 2+19 1 4 3+19".split(" "), "15 4 1 15 15 1 1 15".split(" "), "1+19 2 3 4+19 4+19 3 4 3+19".split(" ")], ["14 3 14 3 14 4 14 4".split(" "), "1 14 1 14 2 14 2 14".split(" "), "11122224".split(""), "13241314".split(""), "21323423".split(""), "3 12 2 12 3 12 2 12".split(" "), "12 2 12 1 12 3 12 3".split(" "), "2 12 1 12 1 12 2 12".split(" ")], ["11212211".split(""), "10000002".split(""), "1 0 12+17 12 12 12+17 0 2".split(" "), "2 0 12+17 12 12 12+17 0 2".split(" "), "2 0 12+17 12 12 12+17 0 2".split(" "), "10000002".split(""), "22121212".split(""), "12221212".split("")], ["12121212".split(""), "21212121".split(""), "12221212".split(""), "21212121".split(""), "12121212".split(""), "00000000".split(""), "0 0 6+17 6+17 6+17 6+17 0 0".split(" "), "0 0 7+17 7+17 7+17 7+17 0 0".split(" ")], ["1+17 14 14 1+17 3+17 14 14 4+17".split(" "), "2+17 4 4 2+17 2+17 1 2 4+17".split(" "), "1+17 3 4 2+17 4+17 2 3 2+17".split(" "), "2+17 3 2 1+17 2+17 2 3 2+17".split(" "), "3+17 1 1 3+17 4+17 1 4 3+17".split(" "), "3+17 2 2 4+17 1+17 3 4 3+17".split(" "), "3+17 3 4 2+17 2+17 3 2 2+17".split(" "), "13+17 2 1 13+17 13+17 2 4 13+17".split(" ")], ["12211221".split(""), "23323311".split(""), "31266222".split(""), "3 3 6 12 12 6 2 2".split(" "), "2 2 7 12 12 7 2 2".split(" "), "32277331".split(""), "12322132".split(""), "23122332".split("")], ["20+17 20+17 2+17 1 1 2+17 20+17 20+17".split(" "), "20+17 20+17 2+17 2+17 2+17 2+17 20+17 20+17".split(" "), "20+17 20+17 20+17 2+17 2+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 6+17 7+17 7+17 6+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" "), "20+17 20+17 20+17 20+17 20+17 20+17 20+17 20+17".split(" ")], ["13214311".split(""), "43342121".split(""), "2 1 3+19 4+19 4+19 3+19 2 2".split(" "), "4 3 2+19 1+19 1+19 2+19 3 4".split(" "), "1 2 4+19 2+19 2+19 4+19 3 1".split(" "), "4 3 1+19 3+19 3+19 1+19 4 2".split(" "), "43424213".split(""), "20 20 20 20 20 20 20 20".split(" ")], ["21311214".split(""), "12444321".split(""), "20 20 20 20 20 20 20 20".split(" "), "12 20 12 20 12 20 12 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 12 20 12 20 12 20 12".split(" "), "20 20 20 20 20 20 20 20".split(" "), "12 20 12 20 12 20 12 20".split(" ")], ["12231132".split(""), "43443241".split(""), "43312423".split(""), "14234134".split(""), "43123221".split(""), "00000000".split(""), "14 14 14 14 14 14 14 14".split(" "), "12 12 12 12 12 12 12 12".split(" ")], ["14 3 3 14 14 4 2 14".split(" "), "43443241".split(""), "43312423".split(""), "14234134".split(""), "32143221".split(""), "41223144".split(""), "22 3 2 4 4 1 1 22".split(" "), "22 4 4 22 22 2 2 22".split(" ")], ["00233200".split(""), "12 0 3 2 2 1 0 12".split(" "), "00131300".split(""), "12 0 3 2 2 1 0 12".split(" "), "00221300".split(""), "12 0 2 2 3 3 0 12".split(" "), "00123200".split(""), "12 0 3 1 1 3 0 12".split(" ")], ["43312423".split(""), "14234134".split(""), "20 13 20 20 20 20 13 20".split(" "), "20 20 20 13 13 20 20 20".split(" "), "20 20 20 20 20 20 20 20".split(" "), "20 20 13 20 20 13 20 20".split(" "), "20 13 20 20 20 20 13 20".split(" "), "20 20 20 13 13 20 20 20".split(" ")], ["42311323".split(""), "13233134".split(""), "4+19 2 3 2 1 2 4 4+19".split(" "), "1+19 4+19 4+19 1+19 1+19 2+19 3+19 1+19".split(" "), "3+19 20 20 20 20 20 20 3+19".split(" "), "2+19 20 20 20 20 20 20 2+19".split(" "), "20 20 20 20 20 20 20 20".split(" "), "4+19 0 0 3+19 2+19 0 0 1+19".split(" ")], ["41312423".split(""), "14234134".split(""), "2 3 2 18 18 2 3 2".split(" "), "1 18 18 0 0 18 18 1".split(" "), "18 18 4+19 4+19 4+19 4+19 18 18".split(" "), "4+19 1+19 2 18 18 2 1+19 4+19".split(" "), "4+19 3 18 18 18 18 3 4+19".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["42312323".split(""), "12234124".split(""), "23223242".split(""), "2 4 2 12+17 12+17 3 4 4".split(" "), "3 3 4 12+17 12+17 2 1 1".split(" "), "1 1 12+17 12+17 12+17 12+17 3 3".split(" "), "1 12+17 12+17 12+17 12+17 12+17 12+17 3".split(" "), "12+17 12+17 12+17 12+17 12+17 12+17 12+17 12+17".split(" ")], ["22 4 2 2 4 4 3 22".split(" "), "03312430".split(""), "22 20 3 20 2 20 2 22".split(" "), "0 2 20 1 20 3 20 0".split(" "), "22 20 2 20 4 20 1 22".split(" "), "0 1 20 4 20 2 20 0".split(" "), "22 20 2 20 3 20 3 22".split(" "), "0 3 20 4 20 4 20 0".split(" ")], ["43441241".split(""), "43312423".split(""), "12234134".split(""), "18 18 18 18 18 18 18 18".split(" "), "17 17 17 17 17 17 17 17".split(" "), "18 18 18 18 18 18 18 18".split(" "), "17 17 17 17 17 17 17 17".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["43312423".split(""), "12234134".split(""), "2 4+19 4 2 1 3 4+19 2".split(" "), "2 1 2+19 3 3 4+19 4 2".split(" "), "1 2+19 3 2 2 1 1+19 1".split(" "), "3 1+19 2+19 3 4 4+19 3+19 3".split(" "), "3 3+19 2+19 1 1 1+19 3+19 2".split(" "), "13 3 3 13 13 3 3 13".split(" ")]];
Global.weekGamelevelTarget = {
    level1: {
        step: 48,
        targets: [{
            id: 5,
            num: 99999,
            hurtnum: 1
        }, {
            id: 18,
            num: 99999,
            hurtnum: 1
        }, {
            id: 12,
            num: 99999,
            hurtnum: 3
        }, {
            id: 2,
            num: 99999,
            hurtnum: 1
        }],
        topcustombg: 1,
        elements: [1, 2, 3, 4, 5],
        bossHp: 488,
        bossNewElement: [18],
        stepCD: 7
    },
    level2: {
        step: 48,
        targets: [{
            id: 4,
            num: 99999,
            hurtnum: 1
        }, {
            id: 18,
            num: 99999,
            hurtnum: 1
        }, {
            id: 2,
            num: 99999,
            hurtnum: 1
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        bossHp: 500,
        bossNewElement: [18],
        stepCD: 7
    },
    level3: {
        step: 45,
        targets: [{
            id: 12,
            num: 99999,
            hurtnum: 3
        }, {
            id: 1,
            num: 99999,
            hurtnum: 1
        }, {
            id: 3,
            num: 99999,
            hurtnum: 1
        }],
        topcustombg: 4,
        elements: [1, 2, 3, 4, 5],
        bossHp: 485,
        bossNewElement: [12],
        stepCD: 8
    },
    level4: {
        step: 55,
        targets: [{
            id: 15,
            num: 99999,
            hurtnum: 2
        }, {
            id: 18,
            num: 99999,
            hurtnum: 3
        }, {
            id: 3,
            num: 99999,
            hurtnum: 1
        }],
        topcustombg: 6,
        elements: [1, 2, 3, 4, 5],
        bossHp: 485,
        bossNewElement: [18],
        stepCD: 8
    }
};
Global.weekGamelevelMap = [["33331111".split(""), "33331111".split(""), "18 18 18 18 18 18 18 18".split(" "), "18 18 18 18 18 18 18 18".split(" "), "12 18 18 18 18 18 18 12".split(" "), "0 18 18 18 18 18 18 0".split(" "), "0 0 12 18 18 12 0 0".split(" "), "0 0 0 18 18 0 0 0".split(" ")], ["18 18 18 2 3 18 18 18".split(" "), "18 1 18 2 3 18 1 18".split(" "), "18 1 18 4 3 18 1 18".split(" "), "18 1 18 4 3 18 1 18".split(" "), "18 1 18 4 2 18 1 18".split(" "), "18 1 18 18 18 18 1 18".split(" "), "18 1 1 1 1 1 1 18".split(" "), "18 18 18 18 18 18 18 18".split(" ")], ["33333333".split(""), "3 12 12 1 1 12 12 3".split(" "), "3 12 0 1 1 0 12 3".split(" "), "3 12 1 1 1 1 12 3".split(" "), "3 12 1 1 1 1 12 3".split(" "), "3 12 0 1 1 0 12 3".split(" "), "3 12 12 12 12 12 12 3".split(" "), "33333333".split("")], ["00233200".split(""), "05211250".split(""), "24111142".split(""), "25411452".split(""), "35444453".split(""), "0 15 15 15 15 15 15 0".split(" "), "0 15 15 15 15 15 15 0".split(" "), "0 18 18 18 18 18 18 0".split(" ")]];
Global.animationNum = [3, 2, 4, 5, 3, 1, 1];
var createItemByID = function(a, b, c) {
    var d = null;
    switch (a) {
    case 2001:
        d = new HammerItem(a);
        break;
    case 2002:
        d = new MagicStickItem(a);
        break;
    case 2003:
        d = new BroomItem(a);
        break;
    case 2004:
        d = new RainbowBrushItem(a);
        break;
    case 2005:
        d = new ColorBucketItem(a);
        break;
    default:
        cc.log("out of id ~~~~" + a);
        return
    }
    d.setGrid(b, c);
    return d
}
  , Item = cc.Node.extend({
    target: null,
    animation: null,
    id: 0,
    grid: null,
    chooseElements: [],
    ctor: function(a) {
        this._super();
        this.id = a || 0;
        this.animation = this.target = this.grid = null;
        this.chooseElements = []
    },
    onEnter: function() {
        this._super();
        this.createTargetSprite()
    },
    onExit: function() {
        this._super()
    },
    createTargetSprite: function() {
        if (null === this.target) {
            var a = DataMgr.getElementIconNameByID(this.id);
            this.target = new cc.Sprite("#" + a);
            this.target.setCascadeOpacityEnabled(!0);
            this.addChild(this.target, 2)
        }
        null === this.animation && (this.animation = new cc.Sprite,
        this.animation.setCascadeOpacityEnabled(!0),
        this.addChild(this.animation, 1))
    },
    setGrid: function(a, b) {
        this.grid = {
            r: a,
            c: b
        }
    },
    useItem: function() {
        DataMgr.subItemByID(this.id, 1);
        this.doAction()
    },
    doAction: function() {},
    chooseSelectElements: function(a, b, c) {
        var d = PieceMgr.elements[a][b];
        PieceMgr.isHaveElement(a, b) && PieceMgr.isCanKillByItem(a, b) && (1 < d.length && 17 !== d[1].id && !d[1].isChoose ? (d[1].isChoose = !0,
        c.push(d[1])) : 1 < d.length && 17 === d[1].id && d[0].isCanBeItemKill ? (c.push(d[0]),
        d[0].isChoose = !0) : d[0].isCanBeItemKill && (c.push(d[0]),
        d[0].isChoose = !0));
        return c
    }
})
  , HammerItem = Item.extend({
    ctor: function(a) {
        this._super(a)
    },
    killChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 >= a[b].hp && a[b].disappearAction(b, a.length);
            PieceMgr.killElement(c, d)
        }
    },
    killElements: function() {
        var a = this.chooseSelectElements(this.grid.r, this.grid.c, []);
        this.killChooseElements(a)
    },
    doAction: function() {
        this.target.setAnchorPoint(cc.p(1, 0));
        this.target.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, this.grid.c || 0));
        this.target.x += 100;
        this.animation.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, this.grid.c || 0));
        this.animation.setVisible(!1);
        this.target.setRotation(45);
        var a = cc.rotateTo(0.3, 22)
          , b = cc.rotateTo(0.4, 87)
          , c = cc.rotateTo(0.1, -36)
          , d = cc.rotateTo(0.1, -26)
          , e = cc.rotateTo(0.1, -31)
          , f = cc.rotateTo(0.1, -30)
          , g = cc.rotateTo(0.1, -31)
          , h = cc.fadeOut(0.2)
          , a = cc.sequence(a, b, c, cc.callFunc(function() {
            this.animation.setVisible(!0);
            engine.gameSound.playEffect(soundRes.sound_hammer);
            this.killElements();
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
            this.animation.setScale(1.5);
            8 <= gameUserData.lv && this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/hammer/bomb", 12, 1 / 18), cc.fadeOut(0.5)));
            Global.isUseItem = !1
        }, this), d, e, f, g, h);
        this.target.runAction(a)
    }
})
  , MagicStickItem = Item.extend({
    num: 0,
    ctor: function(a) {
        this._super(a)
    },
    selectElements: function() {
        for (var a = this.grid.c, b = [], c = 0; c < Global.maxRow; ++c)
            this.chooseSelectElements(c, a, b);
        return b
    },
    killChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 >= a[b].hp && (a[b].setVisible(!1),
            a[b].disappearAction(b, a.length));
            PieceMgr.killElement(c, d)
        }
    },
    killAction: function() {
        var a = this.grid.c;
        this.animation.setVisible(!0);
        this.animation.setScale(2);
        this.animation.setRotation(90);
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/broom/kill", 10, 1 / 18), cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
            this.removeFromParent();
            Global.isUseItem = !1
        }, this)));
        for (var b = Global.maxRow - 1; 0 <= b; --b)
            if (PieceMgr.isHaveElement(b, a)) {
                this.num += 1;
                var c = new cc.Sprite;
                c.setPosition(DataMgr.getPosByGrid(b || 0, a || 0));
                this.addChild(c);
                c.runAction(cc.sequence(cc.delayTime(0.03 * b), cc.callFunc(function(b, c) {
                    var f = [];
                    this.chooseSelectElements(c, a, f);
                    this.killChooseElements(f)
                }, this, b), cc.callFunc(function(a, b) {
                    this.num -= 1
                }, this, b)))
            }
    },
    killElements: function() {
        this.killAction()
    },
    doAction: function() {
        this.target.setAnchorPoint(cc.p(1, 0));
        this.target.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, this.grid.c || 0));
        this.target.x += 100;
        this.target.y -= 200;
        this.target.setRotation(20);
        var a = cc.moveBy(0.2, cc.p(0, 200))
          , b = cc.rotateTo(0.1, 40)
          , c = cc.rotateTo(0.1, -20)
          , d = cc.rotateTo(0.1, -15)
          , e = cc.fadeOut(0.4)
          , a = cc.sequence(a, b, c, d, cc.callFunc(function() {
            engine.gameSound.playEffect(soundRes.sound_magic_stick);
            this.killElements()
        }, this), e, cc.callFunc(function() {}, this));
        this.animation.setPosition(DataMgr.getPosByGrid(4, this.grid.c));
        this.animation.setVisible(!1);
        this.target.runAction(a)
    }
})
  , BroomItem = Item.extend({
    ctor: function(a) {
        this._super(a)
    },
    killChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 >= a[b].hp && (a[b].setVisible(!1),
            a[b].disappearAction(b, a.length));
            PieceMgr.killElement(c, d)
        }
    },
    killAction: function() {
        var a = this.grid.r;
        this.animation.setVisible(!0);
        this.animation.setScale(2);
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/broom/kill", 10, 1 / 18), cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
            this.removeFromParent();
            Global.isUseItem = !1
        }, this)));
        for (var b = 0; b < Global.maxCol; ++b)
            PieceMgr.isHaveElement(a, b) && this.runAction(cc.sequence(cc.delayTime(0.03 * b), cc.callFunc(function(b, d) {
                var e = [];
                this.chooseSelectElements(a, d, e);
                this.killChooseElements(e)
            }, this, b)))
    },
    killElements: function() {
        this.killAction()
    },
    doAction: function() {
        this.target.setAnchorPoint(cc.p(0.5, 0.5));
        this.target.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, 0));
        this.animation.setPosition(DataMgr.getPosByGrid(this.grid.r, 4));
        this.animation.x -= 10;
        this.animation.setVisible(!1);
        this.target.y += 200;
        this.target.setRotation(44);
        var a = cc.moveBy(0.2, cc.p(0, -180))
          , b = cc.rotateTo(0.2, 101)
          , c = cc.moveBy(0.2, cc.p(800, 0))
          , a = cc.sequence(a, b, cc.callFunc(function() {
            engine.gameSound.playEffect(soundRes.sound_broom);
            this.killElements()
        }, this), c, cc.callFunc(function() {}, this));
        this.target.runAction(a)
    }
})
  , RainbowBrushItem = Item.extend({
    ctor: function(a) {
        this._super(a)
    },
    chooseSelectElements: function(a, b, c) {
        var d = PieceMgr.elements[a][b];
        PieceMgr.isHaveElement(a, b) && 5 >= d[0].id && !d[0].isEvil && c.push(d[0]);
        return c
    },
    rangeChoose: function() {
        for (var a = this.grid.r, b = this.grid.c, c = [], d = a - 1; d <= a + 1; d += 1)
            for (var e = b - 1; e <= b + 1; e += 1)
                0 > d || d > Global.maxRow - 1 || 0 > e || e > Global.maxCol - 1 || this.chooseSelectElements(d, e, c);
        return c
    },
    killChooseElements: function(a) {
        for (var b = PieceMgr.elements[this.grid.r][this.grid.c][0].id, c = 0; c < a.length; ++c)
            a[c].changeAttribute(b)
    },
    killElements: function() {
        var a = this.rangeChoose();
        this.killChooseElements(a)
    },
    doAction: function() {
        this.target.setVisible(!1);
        var a = createGameAnimation(res.res_brush_json, "brush", 31);
        a.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, this.grid.c || 0));
        this.animation.setPosition(DataMgr.getPosByGrid(this.grid.r || 0, this.grid.c || 0));
        a.playCount = 1;
        a.frameFun = function(a) {
            10 === a && (this.animation.setVisible(!0),
            this.animation.setScale(2),
            10 <= gameUserData.lv ? this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/rainbow_brush/bomb", 14, 1 / 18), cc.callFunc(function() {
                engine.gameSound.playEffect(soundRes.sound_brush);
                this.animation.setScale(1);
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                Global.isUseItem = !1
            }, this), cc.fadeOut(0.5))) : (engine.gameSound.playEffect(soundRes.sound_brush),
            this.animation.setScale(1),
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL),
            Global.isUseItem = !1))
        }
        .bind(this);
        this.killElements();
        this.addChild(a, 30)
    }
})
  , ColorBucketItem = Item.extend({
    num: 0,
    top: null,
    light: null,
    beforeLight: null,
    ctor: function(a) {
        this._super(a);
        this.num = 0;
        this.top = null
    },
    chooseAllSameElement: function() {
        for (var a = [], b = PieceMgr.elements[this.grid.r][this.grid.c][0].id, c = 0; c < PieceMgr.elements.length; ++c)
            for (var d = 0; d < PieceMgr.elements[0].length; ++d) {
                var e = PieceMgr.elements[c][d];
                !PieceMgr.isHaveElement(c, d) || e[0].id !== b || 1 < e.length && 17 !== e[1].id || (e[0].isChoose = !0,
                a.push(e[0]))
            }
        return a
    },
    killChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = []
              , d = cc.pDistance(a[b].getPosition(), cc.p(360, 680)) / 200;
            360 >= a[b].x && 200 <= a[b].x && 720 < a[b].y && 920 >= a[b].y ? (c = [cc.p(30, a[b].y), cc.p(30, 1040), cc.p(360, 680)],
            c = cc.bezierTo(d, c)) : 360 < a[b].x && 560 >= a[b].x && 720 < a[b].y && 920 >= a[b].y ? (c = [cc.p(720, a[b].y), cc.p(720, 1040), cc.p(360, 680)],
            c = cc.bezierTo(d, c)) : (c = 360 >= a[b].x ? [cc.p(30, 840), cc.p(360, 1040), cc.p(360, 680)] : [cc.p(720, 840), cc.p(360, 1040), cc.p(360, 680)],
            c = cc.bezierTo(d, c).easing(cc.easeBackIn()));
            d = cc.rotateTo(d / 3, 0.1 * (360 - a[b].x) + 0.5 * (680 - a[b].y));
            a[b].setLocalZOrder(CELL_Z_ORDER.ACTION);
            var e = PieceMgr.elements[a[b].curGrid.row][a[b].curGrid.col];
            1 < e.length && 17 === e[1].id && (e[1].disappearAction(),
            e.splice(1, 1));
            280 <= a[b].x && 450 >= a[b].x && 550 <= a[b].y && 700 >= a[b].y ? (this.num -= 1,
            e = PieceMgr.elements[a[b].curGrid.row][a[b].curGrid.col],
            this.dealElement(a[b]),
            e[0] = -1,
            a[b].removeFromParent(),
            0 >= this.num && this.target.runAction(cc.sequence(cc.callFunc(function() {
                this.top.setVisible(!0);
                this.light.setVisible(!0);
                EventMgr.emit(EVENTMGR_ID.HIDE_BUCKET)
            }, this), cc.scaleTo(0.2, 0.01), cc.callFunc(function() {
                this.removeFromParent();
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                Global.isUseItem = !1
            }, this)))) : a[b].runAction(cc.sequence(cc.spawn(d, c), cc.callFunc(function(a, b) {
                this.num -= 1;
                var c = PieceMgr.elements[b.curGrid.row][b.curGrid.col];
                this.dealElement(b);
                c[0] = -1;
                b.removeFromParent();
                0 >= this.num && this.target.runAction(cc.sequence(cc.callFunc(function() {
                    this.top.setVisible(!0);
                    this.light.setVisible(!0);
                    EventMgr.emit(EVENTMGR_ID.HIDE_BUCKET)
                }, this), cc.scaleTo(0.2, 0.01), cc.callFunc(function() {
                    this.removeFromParent();
                    EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                    Global.isUseItem = !1
                }, this)))
            }, this, a[b])))
        }
    },
    getMonsterIndex: function(a) {
        for (var b = 0; b < PieceMgr.monsters.length; ++b)
            if (a === PieceMgr.monsters[b].id - 5 && 0 < PieceMgr.monsters[b].num)
                return b;
        return -1
    },
    dealElement: function(a) {
        var b = DataMgr.getTargetIndex(a.id);
        -1 !== b ? (EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, b),
        DataMgr.refreshTargetData(a.id)) : (b = this.getMonsterIndex(a.id),
        -1 !== b && (a = {
            id: a.id,
            monsterGrid: PieceMgr.monsters[b].curGrid
        },
        PieceMgr.monsters[b].num -= 1,
        EventMgr.emit(EVENTMGR_ID.KILL_MONSTER, a)))
    },
    killElements: function() {
        var a = this.chooseAllSameElement();
        this.num = a.length;
        this.killChooseElements(a)
    },
    createBucket: function() {
        Utils.changeTexture(this.target, "element/bucket_buttom.png");
        this.target.y -= 200;
        this.top = new cc.Sprite("#element/bucket_top.png");
        this.top.attr({
            x: 100,
            y: 100
        });
        this.target.addChild(this.top, -1)
    },
    bucketLightAction: function() {
        this.light = createGameAnimation(res.res_brush_json, "bucketmc", 31);
        this.light.playCount = -1;
        this.target.addChild(this.light, -2);
        this.light.attr({
            x: 100,
            y: 100
        })
    },
    bucketBeforeLightAction: function() {
        this.beforeLight = new cc.Sprite("#effect/bucket/star1.png");
        this.target.addChild(this.beforeLight);
        this.beforeLight.attr({
            x: 100,
            y: 100
        });
        this.beforeLight.setScale(2);
        10 <= gameUserData.lv && this.beforeLight.runAction(AnimationMgr.getDefaultFrameAnimation("effect/bucket/star", 10, 1 / 9).repeatForever())
    },
    doAction: function() {
        this.createBucket();
        this.bucketLightAction();
        this.bucketBeforeLightAction();
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        this.target.attr({
            x: a - uiOfferX,
            y: viewGameHeigh / 2
        });
        this.target.setOpacity(0);
        cc.moveBy(0.2, cc.p(0, 300));
        a = cc.fadeIn(0.8);
        cc.scaleTo(0.3, 0.1);
        this.target.runAction(cc.sequence(a, cc.callFunc(function() {
            engine.gameSound.playEffect(soundRes.sound_rainbow_bucket);
            this.top.setVisible(!1);
            this.light.setVisible(!1);
            EventMgr.emit(EVENTMGR_ID.SHOW_BUCKET);
            this.killElements()
        }, this)))
    }
});
var ELEMENT_STATE = {
    STATIC: 0,
    MOVE: 1,
    CREATE: 2,
    DELETE: 3
}
  , FLY_PUDDINGPOSREDY = 100
  , FLY_PUDDINGPOSBLUEY = -15
  , isShowBombStar = !1
  , isShowBombBomb = !1
  , isColorPuddingAndColorPudding = !1
  , isflyBomeStar = 0
  , isBombBombAndBomb = !1
  , createElementByID = function(a, b, c) {
    var d = null;
    switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
        d = new NormalPudding(a);
        break;
    case 6:
    case 7:
    case 8:
    case 9:
        d = new MonsterPudding(a);
        break;
    case 10:
        d = new BombPudding(a);
        break;
    case 11:
        d = new ColorPudding(a);
        break;
    case 12:
        d = new ChocolatePudding(a);
        break;
    case 13:
        d = new HotBalloon(a);
        break;
    case 14:
        d = new Stone(a);
        break;
    case 15:
    case 16:
        d = new RainbowSugar(a);
        break;
    case 17:
        d = new Bubble(a);
        break;
    case 18:
        d = new Cheese(a);
        break;
    case 19:
        d = new Cage(a);
        break;
    case 20:
    case 21:
        d = new IcePudding(a);
        break;
    case 22:
        d = new Winnower(a);
        break;
    case 23:
        d = new FlyPudding(a);
        break;
    case 24:
        d = new FlyFly(a);
        break;
    case 25:
        PieceMgr.chooseElement && PieceMgr.chooseElement.setVisible(!1);
        d = new FlyBomb(a);
        break;
    case 26:
        PieceMgr.chooseElement && PieceMgr.chooseElement.setVisible(!1);
        d = new BombBomb(a);
        break;
    case 27:
        PieceMgr.chooseElement && PieceMgr.chooseElement.setVisible(!1);
        d = new ColorFly(a);
        break;
    case 28:
        PieceMgr.chooseElement && PieceMgr.chooseElement.setVisible(!1);
        d = new ColorColor(a);
        break;
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
        d = new EvilElement(a);
        break;
    case 45:
        d = new Candy(a);
        break;
    case 46:
        d = new Pearl(a);
        break;
    case 47:
        d = new IceCream(a);
        break;
    default:
        cc.log("out of id ~~~~" + a);
        return
    }
    d.setCurGridPos(b, c);
    return d
}
  , Element = cc.Node.extend({
    id: 0,
    state: 0,
    hp: 1,
    isChoose: !1,
    isCanChoose: !0,
    isCanMove: !0,
    isCanTouch: !0,
    isCanKill: !0,
    curGrid: null,
    nextGrid: null,
    curPos: null,
    nextPos: null,
    target: null,
    animation: null,
    moveTime: 0,
    totalTime: 0.12,
    autoKill: 0,
    weightValue: 0,
    delayTime: 0.1,
    touchActionNode: null,
    isTips: !1,
    beKillElement: null,
    isClean: !1,
    startPos: null,
    startSpeed: 0,
    data: null,
    isCanBeItemKill: !1,
    isTouchSelf: !1,
    isMostFar: !1,
    isLost: !1,
    isReset: !1,
    isEvil: !1,
    bombeffect: !1,
    isBossSelect: null,
    cleanCD: null,
    checkIsClean: null,
    ctor: function(a) {
        this._super();
        this.id = a;
        this.initData()
    },
    initData: function() {
        this.isChoose = !1;
        this.isCanKill = this.isCanMove = this.isCanChoose = !0;
        this.target = null;
        this.hp = 1;
        this.curGrid = {
            row: 0,
            col: 0
        };
        this.nextGrid = {
            row: 0,
            col: 0
        };
        this.nextPos = this.curPos = null;
        this.weightValue = this.autoKill = 0;
        this.delayTime = 0.1;
        this.state = 0;
        this.isCanTouch = !0;
        this.animation = null;
        this.moveTime = 0;
        this.totalTime = 0.12;
        this.touchActionNode = null;
        this.isTips = !1;
        this.beKillElement = null;
        this.isClean = !1;
        this.startPos = null;
        this.startSpeed = Global.startSpeed;
        this.data = null;
        this.isBossSelect = this.bombeffect = this.isEvil = this.isReset = this.isLost = this.isMostFar = this.isTouchSelf = this.isCanBeItemKill = !1;
        this.checkIsClean = 0;
        this.cleanCD = 200
    },
    onEnter: function() {
        this._super();
        this.setCascadeOpacityEnabled(!0);
        this.createTargetSprite()
    },
    createTargetSprite: function() {
        if (null === this.target) {
            var a = DataMgr.getElementIconNameByID(this.id);
            this.target = new cc.Sprite("#" + a);
            this.target.setAnchorPoint(cc.p(0.5, 0));
            this.target.setCascadeOpacityEnabled(!0);
            this.target.y = -this.target.getContentSize().height / 2;
            this.addChild(this.target)
        }
        null === this.animation && (this.animation = new cc.Sprite,
        this.addChild(this.animation))
    },
    changeAttribute: function(a) {
        this.id = a;
        this.touchActionNode && (this.target.setVisible(!0),
        this.touchActionNode.removeFromParent(),
        this.touchActionNode = null);
        a = cc.fadeOut(0.35);
        var b = cc.fadeIn(0.35)
          , c = cc.delayTime(0.4);
        this.target.runAction(cc.sequence(c, a, cc.callFunc(function() {
            Utils.changeTexture(this.target, DataMgr.getElementIconNameByID(this.id))
        }, this), b, cc.callFunc(function() {
            this.target.setAnchorPoint(cc.p(0.5, 0))
        }, this)))
    },
    isCanBeChoose: function() {
        return this.isCanChoose && this.state === ELEMENT_STATE.STATIC
    },
    isCanBeTouch: function() {
        return this.isCanTouch && this.state === ELEMENT_STATE.STATIC
    },
    isCanBeKill: function() {
        return this.isCanKill
    },
    setState: function(a) {
        this.state = a || 0
    },
    getState: function() {
        return this.state
    },
    setCurGridPos: function(a, b) {
        this.curGrid.row = a || 0;
        this.curGrid.col = b || 0;
        this.curPos = DataMgr.getPosByGrid(a, b);
        this.startPos = Utils.deepCopy(this.curPos)
    },
    setNextGridPos: function(a, b) {
        this.nextGrid.row = a;
        this.nextGrid.col = b;
        this.nextPos = DataMgr.getPosByGrid(a, b)
    },
    setElementMoveState: function() {
        if (this.curGrid.row !== this.nextGrid.row || this.curGrid.col !== this.nextGrid.col)
            this.state = ELEMENT_STATE.MOVE
    },
    normalAction: function() {
        this.target.runAction(AnimationMgr.getElementNormalAction())
    },
    disappearAction: function() {
        this.doObtainAction()
    },
    doObtainAction: function(a, b) {
        var c = DataMgr.getTargetIndex(this.id);
        this.setLocalZOrder(11);
        if (-1 === c)
            return this.target.setVisible(!1),
            !1;
        this.target.setVisible(!0);
        AnimationMgr.obtainAction(this, c, a, b);
        return !0
    },
    doAction: function() {},
    removeElementData: function() {
        this.curGrid && PieceMgr.elements[this.curGrid.row] && PieceMgr.elements[this.curGrid.row][this.curGrid.col] && (PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1)
    },
    update: function(a) {
        if (!0 == this.isClean && (this.checkIsClean++,
        this.checkIsClean >= this.cleanCD && null != this.getParent())) {
            this.removeFromParent();
            return
        }
        if (this.state === ELEMENT_STATE.MOVE)
            if (this.moveTime += a,
            a = this.startSpeed * this.moveTime + 0.5 * Global.aSpeed * this.moveTime * this.moveTime,
            this.y = 13 === this.id ? this.startPos.y + a : this.startPos.y - a,
            84 <= a && 13 !== this.id)
                this.startSpeed += Global.aSpeed * this.moveTime,
                this.setCurGridPos(this.nextGrid.row, this.nextGrid.col),
                this.moveTime = 0,
                this.state = ELEMENT_STATE.STATIC,
                this.doAction(),
                this.isDropComplete() && (this.attr({
                    x: this.nextPos.x,
                    y: this.nextPos.y
                }),
                this.startSpeed = Global.startSpeed,
                11 !== this.id && 10 !== this.id && 23 !== this.id && 14 !== this.id && (this.target.stopAllActions(),
                this.target.runAction(AnimationMgr.getElementNormalAction())));
            else if (this.y >= this.nextPos.y && 13 === this.id && (this.startSpeed += Global.aSpeed * this.moveTime,
            this.attr({
                x: this.nextPos.x,
                y: this.nextPos.y
            }),
            this.setCurGridPos(this.nextGrid.row, this.nextGrid.col),
            this.moveTime = 0,
            this.state = ELEMENT_STATE.STATIC,
            this.doAction(),
            this.isDropComplete() && (this.startSpeed = Global.startSpeed,
            11 !== this.id && 10 !== this.id && 23 !== this.id && 14 !== this.id)))
                if (this.target.stopAllActions(),
                13 === this.id) {
                    var b = this;
                    a = cc.sequence(AnimationMgr.getElementNormalAction(), cc.callFunc(function() {
                        b.standbyAction()
                    }));
                    this.target.runAction(a)
                } else
                    this.target.runAction(AnimationMgr.getElementNormalAction())
    },
    isDropComplete: function() {
        for (var a = this.curGrid.row; 0 <= a; --a) {
            var b = PieceMgr.elements[a][this.curGrid.col];
            if (-1 === b[0])
                return !1;
            if (!b[0].isCanMove || "0" === b[0])
                break;
            else if (1 < b.length && 19 === b[1].id)
                break;
            else if (13 === b[0].id)
                break
        }
        return !0
    },
    getMonsterIndex: function() {
        for (var a = 0; a < PieceMgr.monsters.length; ++a)
            if (this.id === PieceMgr.monsters[a].id - 5 && 0 < PieceMgr.monsters[a].num)
                return a;
        return -1
    },
    mergeAction: function() {
        var a = createGameAnimation(res.res_merge_json, "mergeLight", 24);
        a.playCount = 1;
        a.isRemoveFromComplete = !0;
        this.addChild(a)
    },
    mergeSpecialElement: function() {
        if (PieceMgr.chooseElement) {
            EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
            this.setLocalZOrder(CELL_Z_ORDER.ACTION);
            this.state = ELEMENT_STATE.MOVE;
            var a = DataMgr.getTargetIndex(this.id)
              , b = this.getMonsterIndex();
            if (-1 !== a)
                DataMgr.refreshTargetData(this.id),
                EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, a);
            else if (-1 !== b) {
                PieceMgr.monsters[b].num -= 1;
                var c = {
                    id: this.id,
                    monsterGrid: PieceMgr.monsters[b].curGrid
                };
                EventMgr.emit(EVENTMGR_ID.KILL_MONSTER, c)
            }
            var c = cc.pDistance(this.getPosition(), PieceMgr.chooseElement.curPos) / (5 >= this.id ? Global.moveSpeed : Global.moveSlowSpeed)
              , a = 0
              , d = !1;
            5 < this.id && this.curGrid.row === PieceMgr.chooseElement.curGrid.row && this.curGrid.col === PieceMgr.chooseElement.curGrid.col ? (d = !0,
            1 == PieceMgr.curSpecialElement ? (PieceMgr.curSpecialElement = 0,
            a = 0.01,
            c = 0.2) : a = 0.8) : 5 >= this.id && (c = 0.1);
            var b = cc.moveTo(c, PieceMgr.chooseElement.curPos)
              , e = cc.scaleTo(0, 1.1);
            5 >= this.id && this.curGrid.row === PieceMgr.chooseElement.curGrid.row && this.curGrid.col === PieceMgr.chooseElement.curGrid.col ? this.runAction(cc.sequence(cc.delayTime(c + 0), cc.callFunc(function() {
                this.setVisible(!1)
            }, this), cc.delayTime(a), cc.callFunc(function(a, b) {
                this.isTouchSelf || this.removeElementData();
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                b && EventMgr.emit(EVENTMGR_ID.TRIGGER_SPECIAL);
                this.removeFromParent()
            }, this, d))) : 5 < this.id ? (23 == this.id && (a = 0.4),
            10 == this.id && (a = 0.4),
            !0 == isShowBombBomb && 10 == this.id && (a = 0.2,
            isBombBombAndBomb = !0),
            this.runAction(cc.sequence(b, cc.callFunc(function() {}, this), cc.delayTime(a), cc.callFunc(function(a, b) {
                this.setVisible(!1);
                this.isTouchSelf || this.removeElementData();
                !0 == isColorPuddingAndColorPudding && this.scheduleOnce(function() {
                    EventMgr.emit(EVENTMGR_ID.ITEM_KILL)
                }, 0.2);
                b && EventMgr.emit(EVENTMGR_ID.TRIGGER_SPECIAL);
                this.removeFromParent()
            }, this, d)))) : (c = {
                is: d,
                row: PieceMgr.chooseElement.curGrid.row,
                col: PieceMgr.chooseElement.curGrid.col
            },
            this.runAction(cc.sequence(e, b, cc.callFunc(function() {
                this.setVisible(!1)
            }, this), cc.delayTime(a), cc.callFunc(function(a, b) {
                this.isTouchSelf || this.removeElementData();
                this.playNormalMergeAction(b);
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                b.is && EventMgr.emit(EVENTMGR_ID.TRIGGER_SPECIAL);
                this.removeFromParent()
            }, this, c))))
        }
    },
    playNormalMergeAction: function(a) {
        a && 5 >= this.id && this.isMostFar && (a = PieceMgr.elements[a.row][a.col][0],
        -1 !== a && (a.setVisible(!0),
        a.isCanMove = !0,
        a.mergeAction()))
    },
    touchAnimation: function() {
        this.target.runAction(AnimationMgr.getTipElementNormalAction())
    },
    isBeSpecialKillAction: function(a) {
        if (this.beKillElement && 27 === this.beKillElement.id)
            return this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/bomb", 10, 1 / 18), cc.fadeOut(0.1), cc.callFunc(function() {
                if (20 === this.id || 21 === this.id || 19 === this.id) {
                    var b = DataMgr.getTargetIndex(this.id);
                    -1 !== b && (DataMgr.refreshTargetData(this.id),
                    EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, b))
                }
                a || this.removeFromParent()
            }, this))),
            !0;
        if (this.beKillElement && 10 === this.beKillElement.id) {
            if (19 === this.id || 20 === this.id || 21 === this.id) {
                var b = DataMgr.getTargetIndex(this.id);
                -1 !== b && (DataMgr.refreshTargetData(this.id),
                EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, b))
            }
            a || 19 !== this.id && 20 !== this.id && 21 !== this.id || this.removeFromParent();
            return !0
        }
        return !1
    },
    resetElement: function() {
        var a = cc.sequence(cc.moveTo(0.4, this.nextPos), cc.callFunc(function() {
            this.attr({
                x: this.nextPos.x,
                y: this.nextPos.y
            });
            this.setCurGridPos(this.nextGrid.row, this.nextGrid.col);
            this.state = ELEMENT_STATE.STATIC;
            this.isReset = !1;
            this.doAction()
        }, this));
        this.runAction(a)
    },
    addBossSelectEffect: function() {
        var a = createGameAnimation(weekGameRes.res_bosstag_json, "bosstagmc", 30);
        this.addChild(a, 1E3)
    }
})
  , NormalPudding = Element.extend({
    tipIcon: null,
    tipSelect: null,
    ctor: function(a) {
        this._super(a);
        this.isCanBeItemKill = !0;
        this.tipSelect = this.tipIcon = null
    },
    onEnter: function() {
        this._super();
        this.creatTipIcon()
    },
    creatTipIcon: function() {
        null === this.tipIcon && (this.tipIcon = new cc.Sprite,
        this.target.addChild(this.tipIcon),
        this.tipIcon.x = this.target.getContentSize().width / 2,
        this.tipIcon.y = this.target.getContentSize().height / 2,
        this.tipIcon.setVisible(!1))
    },
    changeTipIcon: function(a, b) {
        if (!0 == a) {
            var c = DataMgr.getElementTipIconNameByType(b, this.id);
            this.tipIcon.setSpriteFrame(c)
        }
        this.tipIcon.setVisible(a)
    },
    getDisappearAction: function(a) {
        if (this.beKillElement && 28 === this.beKillElement.id)
            return this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/n", 9, 1 / 24);
        this.animation.y = -30;
        this.animation.setScale(1.25);
        switch (this.id) {
        case 1:
            return this.animation.setLocalZOrder(1),
            this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/red", 15, 1 / 24);
        case 2:
            return this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/b", 15, 1 / 24);
        case 3:
            return this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/y", 15, 1 / 24);
        case 4:
            return this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/g", 15, 1 / 24);
        case 5:
            return this.animation.y = 0,
            AnimationMgr.getDefaultFrameAnimation("effect/pudding_bomb_effect/p", 15, 1 / 24);
        default:
            cc.log("is out of normal id !!!!!!")
        }
    },
    playBossChangeEffect: function() {
        this.animation.y = 0;
        this.animation.setLocalZOrder(15);
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("weekgame/changeelementeffect/effect", 14, 1 / 28), cc.callFunc(function() {})))
    },
    beEatAction: function(a, b) {
        var c = {
            id: this.id,
            monsterGrid: a.curGrid
        };
        this.setVisible(!0);
        this.target.setVisible(!0);
        var d = this.getPosition();
        cc.pDistance(this.getPosition(), a.getPosition());
        var e = 0
          , e = 0.6
          , f = cc.scaleTo(e, 0.5)
          , g = cc.rotateBy(e, 360)
          , d = cc.moveBy(e, cc.p(a.x - d.x, a.y - d.y + 20)).easing(cc.easeBackIn())
          , f = cc.spawn(f, d, g)
          , g = 0;
        !0 == isShowBombStar || !0 == isShowBombBomb ? g = 0.5 : b.beKillElement && 10 === b.beKillElement.id && (g = 0.7);
        d = 0.2;
        0.5 <= g && (d = g);
        this.scheduleOnce(function() {
            EventMgr.emit(EVENTMGR_ID.EAT_FOOD, c)
        }, d);
        f = cc.sequence(cc.delayTime(g), f, cc.delayTime(0.05), cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.KILL_MONSTER, c);
            this.isClean || (this.removeElementData(),
            this.isClean = !0);
            this.removeFromParent()
        }, this));
        this.scheduleOnce(function() {}, e + 0.1);
        this.target.runAction(f)
    },
    disappearAction: function(a, b, c) {
        gameUserData.killElement += 1;
        this.isCanTouch = !1;
        PieceMgr.chooseElement && PieceMgr.chooseElement.curGrid && PieceMgr.chooseElement.curGrid.row === this.curGrid.row && PieceMgr.chooseElement.curGrid.col === this.curGrid.col && (this.isTouchSelf = !0);
        this.beKillElement && 10 === this.beKillElement.id && !1 == isShowBombStar && !1 == isShowBombBomb ? this.disappear(c, a, b) : !0 == isShowBombStar ? this.disappear(c, a, b) : this.scheduleOnce(function() {
            this.disappear(c, a, b)
        }
        .bind(this), this.delayTime)
    },
    disappear: function(a, b, c) {
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        this.touchActionNode && this.touchActionNode.setVisible(!1);
        if (a)
            this.target.setVisible(!0),
            this.mergeSpecialElement();
        else {
            DataMgr.refreshTargetData(this.id);
            var d = this.doObtainAction(b, c)
              , e = this.getMonsterIndex()
              , f = !1;
            d || -1 === e || (null == this.step ? (this.beEatAction(PieceMgr.monsters[e], this),
            PieceMgr.monsters[e].num -= 1,
            f = d = !0) : 0 != this.step && (this.beEatAction(PieceMgr.monsters[e], this),
            PieceMgr.monsters[e].num -= 1,
            f = d = !0));
            this.target.setVisible(!0);
            if (this.isBeSpecialKillAction(d))
                if (d)
                    a = 0.8,
                    0.8 < this.delayTime && (a = this.delayTime),
                    !0 == isBombBombAndBomb && (a = 0.2),
                    this.target.setVisible(!0),
                    null != this.getParent() ? (g = new cc.Sprite,
                    this.getParent().addChild(g, 999999),
                    g.x = this.x,
                    g.y = this.y,
                    g.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function() {
                        this.target.setVisible(!0)
                    }
                    .bind(this)), this.getDisappearAction(d), cc.callFunc(function() {
                        g.removeFromParent();
                        this.animation.setVisible(!1);
                        this.animation.setScale(1);
                        this.beKillElement && 28 === this.beKillElement.id && EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                        d || (this.removeFromParent(),
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0,
                        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, e)))
                    }, this)))) : this.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function() {
                        this.target.setVisible(!0)
                    }
                    .bind(this)), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.animation.setScale(1);
                        this.beKillElement && 28 === this.beKillElement.id && EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                        d || (this.removeFromParent(),
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0,
                        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, e)))
                    }, this)));
                else if (this.beKillElement && 10 === this.beKillElement.id)
                    if (a = 0.8,
                    0.8 < this.delayTime && (a = this.delayTime),
                    !0 == this.beKillElement.isFlyBomb && !0 == currentScene.gameLogicLayer.isGameWin && 0.8 < this.delayTime && (a = this.delayTime),
                    !0 == isBombBombAndBomb && (a = 0.2),
                    this.target.setVisible(!0),
                    this.scheduleOnce(function() {
                        !1 == f && this.target.setVisible(!1)
                    }
                    .bind(this), a),
                    null != this.getParent()) {
                        var g = new cc.Sprite;
                        this.getParent().addChild(g, 999999);
                        g.x = this.x;
                        g.y = this.y;
                        g.runAction(cc.sequence(cc.delayTime(a), this.getDisappearAction(d), cc.callFunc(function() {
                            g.removeFromParent();
                            this.animation.setVisible(!1);
                            this.animation.setScale(1);
                            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                            d || (this.removeFromParent(),
                            this.isClean || (this.removeElementData(),
                            this.isClean = !0,
                            EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, e)))
                        }, this)))
                    } else
                        this.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function() {
                            this.animation.setVisible(!1);
                            this.animation.setScale(1);
                            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                            d || (this.removeFromParent(),
                            this.isClean || (this.removeElementData(),
                            this.isClean = !0,
                            EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, e)))
                        }, this)));
                else
                    this.removeElementData(),
                    this.removeFromParent();
            else
                b = a = 0,
                d ? (a = 0,
                b = 0.3,
                !0 == isShowBombStar && (a = 21 == isflyBomeStar ? 0.8 : 0.4),
                !0 == isShowBombBomb && (a = 0.2)) : (a = 0,
                !0 == isShowBombStar && (21 == isflyBomeStar ? (a = 0.8,
                !0 == currentScene.gameLogicLayer.isGameWin && (a = 0)) : a = 0.4),
                b = 0.2),
                g = new cc.Sprite,
                null != this.getParent() && this.getParent().addChild(g, 999999),
                g.x = this.x,
                g.y = this.y,
                g.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function() {
                    255 == this.target.opacity && !1 == f && this.target.setVisible(!1)
                }
                .bind(this)), this.getDisappearAction(d), cc.callFunc(function() {
                    g.removeFromParent();
                    this.animation.setVisible(!1);
                    this.animation.setScale(1)
                }, this))),
                this.scheduleOnce(function() {
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    d || this.removeFromParent()
                }
                .bind(this), a + b)
        }
    }
})
  , MonsterPudding = Element.extend({
    num: 5,
    text: null,
    isEating: !1,
    animation_evil: null,
    ctor: function(a) {
        this._super(a);
        this.num = 20;
        this.isCanKill = this.isCanMove = this.isCanChoose = !1
    },
    onEnter: function() {
        this._super();
        Utils.changeTexture(this.target, "game/monster.png");
        this.setLocalZOrder(6);
        this.playWait();
        this.createNeedFood();
        this.registerEvent()
    },
    registerEvent: function() {
        EventMgr.register(EVENTMGR_ID.EAT_FOOD, function(a) {
            this.isEating || (this.isEating = !0,
            engine.gameSound.playEffect(soundRes.sound_eat_jelly));
            a.monsterGrid.row === this.curGrid.row && a.monsterGrid.col === this.curGrid.col && this.id - 5 === a.id && this.eatFood()
        }, this);
        EventMgr.register(EVENTMGR_ID.KILL_MONSTER, function(a) {
            this.isEating = !1;
            a && a.monsterGrid.row === this.curGrid.row && a.monsterGrid.col === this.curGrid.col && this.id - 5 === a.id && (a = Utils.getNumberFromString(this.text.getString()),
            a -= 1,
            this.text.setString(a + ""),
            0 >= this.num && 0 >= a ? (engine.gameSound.playEffect(soundRes.sound_monster_be_collect),
            this.animation.setVisible(!1),
            a = this.doObtainAction(),
            PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1,
            DataMgr.refreshTargetData(this.id),
            a || (this.removeElementData(),
            this.removeFromParent())) : this.num === a && this.animation.setVisible(!1))
        }, this)
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.EAT_FOOD, this);
        EventMgr.remove(EVENTMGR_ID.KILL_MONSTER, this)
    },
    createNeedFood: function() {
        var a = new GameArtWord("fnttype36");
        a.alignmentType = artWordMiddle;
        a.setPosition(63, 13);
        a.setString(this.num + "");
        this.target.addChild(a, 101);
        this.text = a
    },
    playWait: function() {
        this.animation_evil && this.animation_evil.removeFromParent();
        this.animation_evil = createGameAnimation(fightRes.res_bigmouth_json, ["mouse_red_wait", "mouse_blue_wait", "mouse_yellow_wait", "mouse_green_wait", "mouse_fen_wait"][this.id - 6], 24);
        this.animation_evil.setPosition(42, 42);
        this.animation_evil.playCount = 1;
        this.animation_evil.gotoAndStop(0);
        this.target.addChild(this.animation_evil, 100);
        var a = this;
        this.animation_evil.steFrameComplete(function() {
            a.target.scheduleOnce(function() {
                a.isEating || a.animation_evil.gotoAndPlay(0)
            }, 3 + 7 * Math.random())
        });
        this.setRandomPlay()
    },
    setRandomPlay: function() {
        var a = this;
        this.target.scheduleOnce(function() {
            a.isEating || a.animation_evil.gotoAndPlay(0)
        }, 3 + 7 * Math.random())
    },
    eatFood: function() {
        this.text.setVisible(!0);
        this.animation_evil.removeFromParent();
        this.animation_evil = createGameAnimation(fightRes.res_bigmouth_json, ["mouse_red_open", "mouse_blue_open", "mouse_yellow_open", "mouse_green_open", "mouse_fen_open"][this.id - 6], 30);
        this.animation_evil.setPosition(42, 42);
        this.animation_evil.playCount = 1;
        this.animation_evil.gotoAndPlay(10);
        this.target.addChild(this.animation_evil, 100);
        var a = this;
        this.animation_evil.frameCompleteFun = function() {
            a.playWait()
        }
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.removeFromParent()
    }
})
  , FlyPudding = Element.extend({
    head: null,
    tail: null,
    weightValue: 1,
    isCol: !1,
    type: 0,
    beKill: !1,
    flypuddingStandby: null,
    ctor: function(a) {
        this._super(a);
        this.weightValue = 1;
        this.isCol = !1;
        this.type = 0;
        this.beKill = !1
    },
    onEnter: function() {
        this._super();
        this.standbyAction();
        this.setLocalZOrder(11)
    },
    standbyAction: function() {
        this.animation.setVisible(!0);
        this.animation.stopAllActions();
        this.animation.x -= 2;
        this.animation.y -= 2;
        this.animation.setLocalZOrder(1);
        this.target.setVisible(!1);
        this.flypuddingStandby = createGameAnimation(res.res_brush_json, "flypudding", 24);
        this.flypuddingStandby.playCount = -1;
        this.flypuddingStandby.setRotation(this.getRotation());
        this.addChild(this.flypuddingStandby)
    },
    disappearAction: function(a, b, c) {
        gameUserData.killElement += 1;
        this.beKill || (this.beKill = !0,
        this.isCanTouch = !1,
        this.isChoose = !0,
        this.isCanChoose = this.isCanKill = !1,
        this.type = c,
        this.type || (a = DataMgr.getTargetIndex(this.id),
        -1 !== a && (DataMgr.refreshTargetData(this.id),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, a))),
        this.emitEvent(this.type),
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1),
        PieceMgr.chooseElement && PieceMgr.chooseElement.curGrid && PieceMgr.chooseElement.curGrid.row === this.curGrid.row && PieceMgr.chooseElement.curGrid.col === this.curGrid.col && (this.isTouchSelf = !0),
        1 == this.autoKill && (this.delayTime = 0),
        this.runAction(cc.sequence(cc.delayTime(this.delayTime), cc.callFunc(function() {
            this.disappear()
        }
        .bind(this), this))))
    },
    emitEvent: function(a) {
        a || this.isLost || (90 === this.getRotation() ? EventMgr.emit(EVENTMGR_ID.FORBID_DROP) : (EventMgr.emit(EVENTMGR_ID.FORBID_DROP, this.curGrid.col),
        this.isCol = !0))
    },
    disappear: function() {
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        this.type ? this.mergeSpecialElement() : this.isLost && this.isBeSpecialKillAction(!1) ? this.type || (this.isCol || this.isLost ? this.isLost || EventMgr.emit(EVENTMGR_ID.ITEM_KILL, this.curGrid.col) : EventMgr.emit(EVENTMGR_ID.ITEM_KILL),
        0 < PieceMgr.autoKillNum && this.autoKill && (PieceMgr.autoKillNum -= 1,
        this.autoKill = 0),
        this.setVisible(!1),
        this.removeElementData()) : (engine.gameSound.playEffect(soundRes.sound_fly_jelly),
        this.setLocalZOrder(12),
        this.target.setVisible(!1),
        this.killAction(),
        this.state = ELEMENT_STATE.MOVE)
    },
    createHeadAndTail: function() {
        this.target.setVisible(!1);
        var a = new cc.Sprite;
        a.attr({
            y: 21
        });
        this.addChild(a);
        this.head = a;
        var b = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        b.attr({
            x: 0,
            y: -b.getContentSize().height / 2 + FLY_PUDDINGPOSREDY
        });
        b.setScale(2);
        b.setAnchorPoint(0.5, 0);
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            b.removeFromParent()
        })));
        this.head.addChild(b);
        a = new cc.Sprite;
        a.attr({
            y: -21
        });
        this.addChild(a);
        this.tail = a;
        var c = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        c.setRotation(180);
        c.attr({
            x: 0,
            y: b.getContentSize().height / 2 + FLY_PUDDINGPOSBLUEY
        });
        c.setScale(2);
        c.setAnchorPoint(0.5, 0);
        c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            c.removeFromParent()
        })));
        this.tail.addChild(c)
    },
    hKillElements: function() {
        var a = Math.max((920 - this.x) / Global.flySpeed, this.x / Global.flySpeed);
        this.scheduleOnce(function() {
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
            0 < PieceMgr.autoKillNum && this.autoKill && (PieceMgr.autoKillNum -= 1);
            this.removeFromParent()
        }
        .bind(this), a + 0.01)
    },
    vKillElements: function() {
        var a = Math.max((1380 - this.y) / Global.flySpeed, (this.y + 200) / Global.flySpeed);
        this.scheduleOnce(function() {
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL, this.curGrid.col);
            0 < PieceMgr.autoKillNum && this.autoKill && (PieceMgr.autoKillNum -= 1);
            this.removeFromParent()
        }
        .bind(this), a + 0.01)
    },
    killAction: function(a) {
        var b = new cc.Sprite;
        b.y = -5;
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/bombpoint", 19, 1 / 24), cc.callFunc(function() {
            b.removeFromParent()
        })));
        this.flypuddingStandby.removeFromParent();
        this.addChild(b);
        this.scheduleOnce(function() {
            this.createHeadAndTail();
            this.removeElementData();
            90 === this.getRotation() ? this.hKillElements() : this.vKillElements()
        }
        .bind(this), 0.16)
    }
})
  , BombPudding = Element.extend({
    weightValue: 2,
    beKill: !1,
    fireEffect: null,
    isFlyBomb: null,
    ctor: function(a) {
        this._super(a);
        this.weightValue = 2;
        this.isFlyBomb = this.beKill = !1
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(10);
        this.standbyAction()
    },
    standbyAction: function() {
        this.fireEffect = new cc.Sprite;
        this.fireEffect.runAction(AnimationMgr.getDefaultFrameAnimation("effect/bomb_pudding/fire", 6, 1 / 18).repeatForever());
        this.addChild(this.fireEffect);
        this.fireEffect.setLocalZOrder(0);
        this.fireEffect.x = -25;
        this.fireEffect.y = 35;
        var a = cc.rotateTo(0.72, 6)
          , b = cc.rotateTo(0.72, 0)
          , c = cc.scaleTo(0.72, 1.05)
          , d = cc.scaleTo(0.72, 1);
        this.runAction(cc.sequence(cc.spawn(a, c), cc.spawn(b, d)).repeatForever())
    },
    disappearAction: function(a, b, c) {
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        this.setLocalZOrder(12);
        gameUserData.killElement += 1;
        this.isCanTouch = !1;
        this.isChoose = !0;
        this.isCanChoose = this.isCanKill = !1;
        this.beKillElement && 23 === this.beKillElement.id && (this.isFlyBomb = !0);
        this.beKill || (c || (EventMgr.emit(EVENTMGR_ID.FORBID_DROP),
        a = DataMgr.getTargetIndex(this.id),
        -1 !== a && (DataMgr.refreshTargetData(this.id),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, a))),
        PieceMgr.chooseElement && PieceMgr.chooseElement.curGrid && PieceMgr.chooseElement.curGrid.row === this.curGrid.row && PieceMgr.chooseElement.curGrid.col === this.curGrid.col && (this.isTouchSelf = !0),
        !0 == this.isFlyBomb && (this.delayTime -= 0.4,
        0 > this.delayTime && (this.delayTime = 0.1)),
        this.scheduleOnce(function() {
            this.disappear(c)
        }
        .bind(this), this.delayTime))
    },
    disappear: function(a) {
        engine.gameSound.playEffect(soundRes.sound_bomb_bomb);
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        if (a)
            this.mergeSpecialElement();
        else {
            this.state = ELEMENT_STATE.MOVE;
            var b = cc.scaleTo(8 / 24, 1.4, 1.4)
              , c = cc.scaleTo(0.125, 0.9, 0.9);
            this.fireEffect.runAction(cc.sequence(b, c, cc.callFunc(function() {
                this.fireEffect.removeFromParent()
            }, this)));
            this.target.runAction(cc.sequence(b, c, cc.callFunc(function() {
                this.target.setVisible(!1);
                this.animation.stopAllActions();
                this.stopAllActions();
                this.fireEffect.removeFromParent();
                this.animation.runAction(cc.sequence(AnimationMgr.getFrameAnimation("effect/bomb_pudding/bomb", 1, 8, 1 / 12), cc.callFunc(function() {
                    this.animation.setVisible(!1);
                    a || EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                    this.removeElementData();
                    this.removeFromParent()
                }, this)))
            }, this)))
        }
    }
})
  , ColorPudding = Element.extend({
    lineNum: 0,
    weightValue: 3,
    slmeye: null,
    ctor: function(a) {
        this._super(a);
        this.weightValue = 3
    },
    onEnter: function() {
        this._super();
        this.standbyAction()
    },
    standbyAction: function() {
        this.target.setVisible(!1);
        this.animation.setLocalZOrder(-1);
        this.animation.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/standby", 12, 1 / 18).repeatForever());
        this.slmeye = createGameAnimation(res.res_colorslm_json, "slmeyemc", 24);
        this.addChild(this.slmeye)
    },
    killChooseElements: function(a) {
        if (1 === a.length)
            a[0].isChoose = !1;
        else
            for (var b = 0; b < a.length; ++b) {
                var c = PieceMgr.elements[a[b].curGrid.row][a[b].curGrid.col];
                1 >= a[b].hp && a[b].disappearAction();
                1 < c.length && 17 === c[1].id && (c[1].disappearAction(),
                c.splice(1, 1))
            }
    },
    killAction: function(a) {
        a && 11 === this.id && 1 !== a.length && (engine.gameSound.playEffect(soundRes.sound_color_start),
        this.setLocalZOrder(12),
        this.isCanTouch = !1,
        this.isChoose = !0,
        this.isCanChoose = this.isCanKill = !1,
        this.runAction(cc.sequence(cc.delayTime(0.8 + this.delayTime), cc.callFunc(function() {
            engine.gameSound.playEffect(soundRes.sound_color_jelly);
            this.clickAction();
            this.killChooseElements(a);
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL)
        }, this))),
        this.runAction(cc.sequence(cc.delayTime(this.delayTime), cc.callFunc(function(a, c) {
            a.playAction(c)
        }, this, a))))
    },
    playAction: function(a) {
        this.target.stopAllActions();
        this.animation.stopAllActions();
        this.animation.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/light", 8, 1 / 12).repeatForever());
        this.lineNum = a.length;
        for (var b = 0; b < a.length; ++b) {
            var c = cc.pDistance(a[b].getPosition(), this.getPosition())
              , d = Utils.getAngleByLength(a[b].x - this.x, a[b].y - this.y);
            this.emitLineAction(c, d, a[b].getPosition())
        }
    },
    clickAction: function() {
        var a = new cc.Sprite;
        a.setScale(2);
        a.runAction(AnimationMgr.getDefaultFrameAnimation("effect/publiceffect/clickeffect", 13, 1 / 12).repeatForever());
        this.addChild(a, 1E3)
    },
    emitLineAction: function(a, b, c) {
        this.setLocalZOrder(CELL_Z_ORDER.ACTION);
        var d = new cc.Sprite;
        d.setScaleY(0.01);
        d.setVisible(!0);
        d.setAnchorPoint(cc.p(0.5, 0));
        d.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/line", 8, 1 / 12).repeatForever());
        d.setRotation(b);
        a /= 600;
        d.runAction(cc.sequence(cc.scaleTo(0.1, a, a), cc.delayTime(0.1), cc.callFunc(function(a, b) {
            var c = new cc.Sprite;
            c.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/light", 8, 1 / 18).repeatForever());
            c.setPosition(cc.pSub(b, this.getPosition()));
            this.addChild(c)
        }, this, c)));
        this.addChild(d)
    },
    disappearAction: function(a, b, c) {
        PieceMgr.chooseElement && PieceMgr.chooseElement.curGrid && PieceMgr.chooseElement.curGrid.row === this.curGrid.row && PieceMgr.chooseElement.curGrid.col === this.curGrid.col && (this.isTouchSelf = !0);
        this.disappear(c);
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        gameUserData.killElement += 1;
        this.isCanTouch = !1
    },
    disappear: function(a) {
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        a ? this.mergeSpecialElement() : (a = DataMgr.getTargetIndex(this.id),
        -1 !== a && (DataMgr.refreshTargetData(this.id),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, a)),
        this.removeElementData(),
        this.removeFromParent())
    }
})
  , ChocolatePudding = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.hp = 3;
        this.isCanTouch = this.isCanMove = this.isCanChoose = !1;
        this.isCanBeItemKill = !0
    },
    onEnter: function() {
        this._super()
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    disappear: function() {
        engine.gameSound.playEffect(soundRes.sound_chocolate_break);
        if (3 === this.hp)
            this.target.y -= 1.5,
            this.delayTime = 0.1,
            this.target.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/chocolate_pudding/chocolate1_", 8), cc.callFunc(function() {
                Utils.changeTexture(this.target, "effect/chocolate_pudding/chocolate2_1.png");
                this.isChoose = !1
            }, this)));
        else if (2 === this.hp)
            this.delayTime = 0.1,
            this.target.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/chocolate_pudding/chocolate2_", 5), cc.callFunc(function() {
                Utils.changeTexture(this.target, "effect/chocolate_pudding/chocolate3_1.png");
                this.isChoose = !1
            }, this)));
        else if (1 === this.hp) {
            var a = this.doObtainAction();
            DataMgr.refreshTargetData(this.id);
            if (a)
                this.target.setVisible(!1),
                this.animation.setVisible(!1),
                b = new cc.Sprite,
                b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation1("effect/chocolate_pudding/chocolate3_", 5, 1 / 24), cc.callFunc(function() {
                    b.removeFromParent()
                }, this))),
                null != this.getParent() && this.getParent().addChild(b, 999999),
                b.x = this.x,
                b.y = this.y,
                this.removeElementData();
            else {
                this.target.setVisible(!1);
                this.animation.setVisible(!1);
                var b = new cc.Sprite;
                b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation1("effect/chocolate_pudding/chocolate3_", 5, 1 / 24), cc.callFunc(function() {
                    b.removeFromParent();
                    a || (this.removeElementData(),
                    this.removeFromParent())
                }, this)));
                null != this.getParent() && this.getParent().addChild(b, 999999);
                b.x = this.x;
                b.y = this.y
            }
            this.animation.y -= 25
        }
        this.hp -= 1;
        this.isChoose = !1
    }
})
  , HotBalloon = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanKill = this.isCanChoose = !1
    },
    onEnter: function() {
        this._super();
        this.standbyAction()
    },
    standbyAction: function() {
        var a = cc.rotateTo(1, -3)
          , b = cc.rotateTo(1, 3);
        this.target.runAction(cc.sequence(a, b).repeatForever())
    },
    doAction: function() {
        if (this.curGrid.row === Global.maxRow - 1 || "0" === PieceMgr.elements[this.curGrid.row + 1][this.curGrid.col][0] && this.state === ELEMENT_STATE.STATIC)
            PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1,
            this.disappearAction(),
            DataMgr.refreshTargetData(this.id)
    },
    disappearAction: function() {
        engine.gameSound.playEffect(soundRes.sound_balloon);
        gameUserData.killElement += 1;
        var a = this.doObtainAction();
        this.animation.setVisible(!1);
        var b = new cc.Sprite;
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/collect/collect", 12, 1 / 24), cc.callFunc(function() {
            a || this.removeFromParent()
        }, this)));
        this.getParent().addChild(b, 999999);
        b.x = this.x;
        b.y = this.y
    }
})
  , Stone = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanKill = this.isCanChoose = !1
    },
    onEnter: function() {
        this._super();
        this.standbyAction()
    },
    standbyAction: function() {
        this.animation.runAction(AnimationMgr.getDefaultFrameAnimation("effect/stone/stand_by", 15).repeatForever())
    },
    doAction: function() {
        0 === this.curGrid.row && this.state === ELEMENT_STATE.STATIC ? (PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1,
        this.disappearAction(),
        DataMgr.refreshTargetData(this.id)) : 0 < this.curGrid.row && "0" === PieceMgr.elements[this.curGrid.row - 1][this.curGrid.col][0] && this.state === ELEMENT_STATE.STATIC && (PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1,
        this.disappearAction(),
        DataMgr.refreshTargetData(this.id))
    },
    disappearAction: function() {
        engine.gameSound.playEffect(soundRes.sound_stone_be_collect);
        gameUserData.killElement += 1;
        var a = this.doObtainAction();
        this.animation.stopAllActions();
        this.animation.setVisible(!1);
        var b = new cc.Sprite;
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/collect/collect", 12, 1 / 24), cc.callFunc(function() {
            b.setVisible(!1);
            a || this.removeFromParent()
        }, this)));
        null != this.getParent() && (this.getParent().addChild(b, 999999),
        b.x = this.x,
        b.y = this.y)
    }
})
  , RainbowSugar = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanKill = this.isCanTouch = this.isCanChoose = !1;
        this.isCanBeItemKill = !0;
        this.isDelete = !1
    },
    doAction: function() {
        this.state !== ELEMENT_STATE.STATIC || 15 !== this.id && 16 !== this.id || (PieceMgr.elements[this.curGrid.row][this.curGrid.col][0] = -1,
        this.isClean = !0,
        this.disappearAction())
    },
    disappearAction: function() {
        engine.gameSound.playEffect(soundRes.sound_sugar_be_collect);
        gameUserData.killElement += 1;
        var a = this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/rainbow_pudding/bomb", 5, 1 / 18), cc.callFunc(function() {
            this.animation.setVisible(!1);
            this.isClean || (this.removeElementData(),
            this.isClean = !0);
            a || this.removeFromParent()
        }, this)))
    }
})
  , Bubble = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanTouch = !0;
        this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(11)
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.setLocalZOrder(12);
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    disappear: function() {
        this.setLocalZOrder(13);
        var a = this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.animation.stopAllActions();
        a || this.removeFromParent()
    }
})
  , IceCream = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanBeItemKill = this.isCanMove = !1
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime);
        this.delayTime = 0.1
    },
    disappear: function() {
        engine.gameSound.playEffect(soundRes.sound_cheese_be_collect);
        var a = this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.setLocalZOrder(10);
        if (this.isBeSpecialKillAction(a))
            if (a)
                b = 0.4,
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/icecream/boom", 5, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), this.delayTime);
            else {
                var b = 0;
                this.target.setVisible(!0);
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/icecream/boom", 5, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), b)
            }
        else {
            if (this.beKillElement && 23 === this.beKillElement.id) {
                var c = new cc.Sprite;
                c.runAction(cc.sequence(cc.delayTime(0.2), cc.callFunc(function() {
                    this.target.setVisible(!1);
                    this.animation.setVisible(!1)
                }
                .bind(this)), AnimationMgr.getDefaultFrameAnimation("effect/icecream/boom", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)))
            } else
                this.target.setVisible(!1),
                this.animation.setVisible(!1),
                c = new cc.Sprite,
                c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/icecream/boom", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)));
            this.getParent().addChild(c, 999999);
            c.x = this.x;
            c.y = this.y
        }
    }
})
  , Candy = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanBeItemKill = this.isCanMove = !0
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    disappear: function() {
        engine.gameSound.playEffect(soundRes.sound_cheese_be_collect);
        var a = this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.setLocalZOrder(10);
        if (this.isBeSpecialKillAction(a))
            if (a)
                b = 0.4,
                this.beKillElement && 10 === this.beKillElement.id && (this.delayTime = 0.8),
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/candy/bomb", 5, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), this.delayTime);
            else {
                var b = 0;
                this.beKillElement && 10 === this.beKillElement.id && (b = 0.8);
                this.target.setVisible(!0);
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/candy/bomb", 5, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), b)
            }
        else {
            if (this.beKillElement && 23 === this.beKillElement.id) {
                var c = new cc.Sprite;
                c.runAction(cc.sequence(cc.delayTime(0.2), cc.callFunc(function() {
                    this.target.setVisible(!1);
                    this.animation.setVisible(!1)
                }
                .bind(this)), AnimationMgr.getDefaultFrameAnimation("effect/candy/bomb", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)))
            } else
                this.target.setVisible(!1),
                this.animation.setVisible(!1),
                c = new cc.Sprite,
                c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/candy/bomb", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)));
            this.getParent().addChild(c, 999999);
            c.x = this.x;
            c.y = this.y
        }
    }
})
  , Pearl = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanBeItemKill = this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        this.standbyAction()
    },
    standbyAction: function() {
        this.target.setVisible(!1);
        this.pearl = createGameAnimation(res.res_colorslm_json, "pearl_wait", 24);
        this.addChild(this.pearl)
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    doObtainAction: function(a, b) {
        var c = DataMgr.getTargetIndex(this.id);
        this.setLocalZOrder(11);
        if (-1 === c)
            return this.isChoose = !1,
            this.target.setVisible(!1),
            !1;
        this.target.setVisible(!1);
        this.windEffect(c);
        return !0
    },
    windEffect: function(a) {
        var b = this
          , c = cc.p(0, 0)
          , d = cc.p(0, 0);
        2 > this.curGrid.col ? 2 > this.curGrid.row ? (c = cc.p(20, 210),
        d = cc.p(-240, 860)) : 5 > this.curGrid.row ? (c = cc.p(20, 170),
        d = cc.p(-190, 790)) : (c = cc.p(20, 70),
        d = cc.p(-200, 460)) : 5 > this.curGrid.col ? 2 > this.curGrid.row ? (c = cc.p(-230, 210),
        d = cc.p(-380, 800)) : 5 > this.curGrid.row ? (c = cc.p(-140, 170),
        d = cc.p(-290, 740)) : (c = cc.p(-190, 60),
        d = cc.p(-340, 440)) : 2 > this.curGrid.row ? (c = cc.p(-370, 210),
        d = cc.p(-420, 760)) : 5 > this.curGrid.row ? (c = cc.p(-280, 170),
        d = cc.p(-330, 700)) : (c = cc.p(-330, 40),
        d = cc.p(-380, 400));
        var e = Object.getOwnPropertyNames(PieceMgr.lvData.targets).length
          , f = 0
          , f = 1 == Global.gameType ? Global.targetItemPos[e - 1].scale : 0.7
          , g = 0
          , e = g = 1 == Global.gameType ? Global.targetItemPos[e - 1].posArr[a] : Global.weekBossHittedPos
          , g = cc.pAdd(this.curPos, this.target.getPosition());
        Math.sqrt(Math.pow(e.y - g.y, 2) + Math.pow(Math.abs(e.x - g.x), 2));
        e = cc.p(e.x - g.x, e.y - g.y - 50);
        c = cc.bezierBy(0.7, [c, d, e]).easing(cc.easeIn(1));
        cc.rotateBy(0.7 - 0.5, 360);
        var f = cc.spawn(c, cc.scaleTo(0.7 - 0.5, f), cc.callFunc(function() {}))
          , h = new cc.Sprite("#element/pear_wind.png")
          , f = cc.sequence(cc.delayTime(0.05), f, cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.SCALE_TARGET, a);
            EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, a);
            PieceMgr.obtainTargetCount--;
            b.isChoose = !1;
            b.delayTime = 0.2
        }), cc.delayTime(0.1), cc.callFunc(function() {
            h.removeFromParent()
        }, h));
        this.getParent().addChild(h, 999999);
        PieceMgr.obtainTargetCount++;
        h.runAction(f);
        h.x = this.x;
        h.y = this.y
    },
    disappear: function() {
        engine.gameSound.playEffect(soundRes.sound_cheese_be_collect);
        this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.setLocalZOrder(10)
    }
})
  , Cheese = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanMove = !1;
        this.isCanBeItemKill = !0
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime);
        cc.log("奶酪--------" + this.delayTime)
    },
    disappear: function() {
        engine.gameSound.playEffect(soundRes.sound_cheese_be_collect);
        var a = this.doObtainAction();
        DataMgr.refreshTargetData(this.id);
        this.setLocalZOrder(10);
        if (this.isBeSpecialKillAction(a))
            if (a)
                b = 0.4,
                this.beKillElement && 10 === this.beKillElement.id && (this.delayTime = 0.8),
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/cheese_pudding/bomb", 6, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), this.delayTime);
            else {
                var b = 0;
                this.beKillElement && 10 === this.beKillElement.id && (b = 0.8);
                this.target.setVisible(!0);
                this.scheduleOnce(function() {
                    this.target.setVisible(!1);
                    this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/cheese_pudding/bomb", 6, 1 / 12), cc.callFunc(function() {
                        this.animation.setVisible(!1);
                        this.isClean || (this.removeElementData(),
                        this.isClean = !0);
                        a || this.removeFromParent()
                    }, this)))
                }
                .bind(this), b)
            }
        else {
            if (this.beKillElement && 23 === this.beKillElement.id) {
                var c = new cc.Sprite;
                c.runAction(cc.sequence(cc.delayTime(0.2), cc.callFunc(function() {
                    this.target.setVisible(!1);
                    this.animation.setVisible(!1)
                }
                .bind(this)), AnimationMgr.getDefaultFrameAnimation("effect/cheese_pudding/bomb", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)))
            } else
                this.target.setVisible(!1),
                this.animation.setVisible(!1),
                c = new cc.Sprite,
                c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/cheese_pudding/bomb", 5, 1 / 12), cc.callFunc(function() {
                    c.removeFromParent();
                    this.isClean || (this.removeElementData(),
                    this.isClean = !0);
                    a || this.removeFromParent()
                }, this)));
            this.getParent().addChild(c, 999999);
            c.x = this.x;
            c.y = this.y
        }
    }
})
  , IcePudding = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanMove = this.isCanChoose = !1;
        this.isCanBeItemKill = !0
    },
    onEnter: function() {
        this._super();
        Global.isIceEeffect || (Global.isIceEeffect = !0,
        engine.gameSound.playEffect(soundRes.sound_ice_create));
        this.growUpAction()
    },
    growUpAction: function() {
        this.animation.stopAllActions();
        this.animation.y += 1.5;
        this.target.setVisible(!1);
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/ice_pudding/grow_up", 15, 1 / 24), cc.callFunc(function() {
            this.target.setVisible(!0);
            Global.isIceEeffect = !1;
            this.animation.setVisible(!1)
        }, this)))
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    disappear: function() {
        var a = DataMgr.getTargetIndex(this.id);
        DataMgr.refreshTargetData(this.id);
        this.setLocalZOrder(12);
        this.removeElementData();
        this.animation.setVisible(!0);
        this.target.setVisible(!1);
        this.isBeSpecialKillAction(!1) || (engine.gameSound.playEffect(soundRes.sound_ice_break),
        this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/ice_pudding/bomb", 14, 1 / 26), cc.callFunc(function(a, c) {
            this.animation.setVisible(!1);
            -1 !== c && EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, c);
            this.removeFromParent()
        }, this, a))))
    }
})
  , Cage = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanMove = this.isCanChoose = this.isCanTouch = !1;
        this.isCanBeItemKill = !0
    },
    disappearAction: function() {
        gameUserData.killElement += 1;
        this.scheduleOnce(function() {
            this.disappear()
        }
        .bind(this), this.delayTime)
    },
    disappear: function() {
        this.target.setVisible(!1);
        if (!this.isBeSpecialKillAction(!1)) {
            this.animation.setLocalZOrder(2);
            Utils.changeTexture(this.animation, "effect/cage/break1.png");
            var a = DataMgr.getTargetIndex(this.id);
            DataMgr.refreshTargetData(this.id);
            this.animation.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/cage/break", 6, 0.0625), cc.callFunc(function(a, c) {
                this.animation.setVisible(!1);
                -1 !== c && EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, c);
                this.removeFromParent()
            }, this, a)))
        }
    }
})
  , Winnower = Element.extend({
    needs: [1, 2, 3, 4],
    img: ["red_leaf", "blue_leaf", "yellow_leaf", "green_leaf"],
    ctor: function(a) {
        this._super(a);
        this.isCanKill = this.isCanMove = this.isCanChoose = !1;
        this.needs = [1, 2, 3, 4];
        this.img = ["red_leaf", "blue_leaf", "yellow_leaf", "green_leaf"]
    },
    onEnter: function() {
        this._super();
        Utils.changeTexture(this.target, "element/winnower_gray.png");
        this.target.setAnchorPoint(cc.p(0.5, 0.5));
        this.target.y = 0
    },
    disappearAction: function() {
        this.addWingLeaf()
    },
    addWingLeaf: function() {
        for (var a = 0; a < this.needs.length; ++a)
            if (PieceMgr.chooseElement.id === this.needs[a]) {
                var b = new cc.Sprite("#element/" + this.img[a] + ".png");
                b.setCascadeOpacityEnabled(!0);
                b.x = b.getContentSize().width / 2;
                b.y = b.getContentSize().height / 2;
                this.target.addChild(b);
                this.needs.splice(a, 1);
                this.img.splice(a, 1);
                this.target.runAction(cc.sequence(cc.rotateBy(0.5, -720).easing(cc.easeExponentialInOut()), cc.callFunc(function() {
                    if (0 >= this.needs.length) {
                        gameUserData.killElement += 1;
                        var a = this.doObtainAction();
                        DataMgr.refreshTargetData(this.id);
                        Utils.changeTexture(this.animation, "element/winnower_action.png");
                        this.animation.setVisible(!0);
                        this.animation.runAction(cc.sequence(cc.spawn(cc.rotateTo(10 / 24, 300), cc.scaleTo(10 / 24, 0.1)), cc.callFunc(function() {
                            this.animation.setVisible(!1);
                            this.animation.setLocalZOrder(2);
                            this.isClean || (this.removeElementData(),
                            this.isClean = !0);
                            a || this.removeFromParent()
                        }, this)))
                    }
                }, this)));
                break
            }
    }
})
  , FlyFly = Element.extend({
    num: 2,
    head1: null,
    head2: null,
    tail1: null,
    tail2: null,
    ctor: function(a) {
        this._super(a);
        this.num = 2;
        this.isCanTouch = this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(11);
        this.scheduleOnce(function() {
            var a = new cc.Sprite;
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/merge/merge", 12, 1 / 15), cc.callFunc(function() {
                a.setVisible(!1)
            }, a)));
            this.addChild(a, 3)
        }, 0.2);
        this.target.setVisible(!1)
    },
    disappearAction: function() {
        EventMgr.emit(EVENTMGR_ID.FORBID_DROP);
        engine.gameSound.playEffect(soundRes.sound_fly_jelly);
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        this.setLocalZOrder(12);
        this.target.setVisible(!1);
        this.state = ELEMENT_STATE.MOVE;
        this.removeElementData();
        this.scheduleOnce(function() {
            this.createHeadAndTail();
            this.killAction()
        }
        .bind(this), 0.35);
        this.scheduleOnce(function() {
            var a = new cc.Sprite;
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/flyfly/bomb", 14, 1 / 24), cc.callFunc(function() {
                a.removeFromParent()
            })));
            this.addChild(a, 1E3)
        }
        .bind(this), 0.15)
    },
    createHeadAndTail: function() {
        this.target.setVisible(!1);
        var a = new cc.Sprite;
        a.attr({
            y: 21
        });
        this.addChild(a);
        this.head1 = a;
        var b = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        b.attr({
            x: 0,
            y: -b.getContentSize().height / 2 + FLY_PUDDINGPOSREDY
        });
        b.setAnchorPoint(0.5, 0);
        b.setScale(2);
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            b.removeFromParent()
        })));
        this.head1.addChild(b);
        a = new cc.Sprite;
        a.attr({
            y: -21
        });
        this.addChild(a);
        this.tail1 = a;
        var c = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        c.setRotation(180);
        c.attr({
            x: 0,
            y: b.getContentSize().height / 2 + FLY_PUDDINGPOSBLUEY
        });
        c.setScale(2);
        c.setAnchorPoint(0.5, 0);
        c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            c.removeFromParent()
        })));
        this.tail1.addChild(c);
        a = new cc.Sprite;
        a.attr({
            x: 20,
            y: 0
        });
        this.addChild(a);
        this.head2 = a;
        var d = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        d.attr({
            x: 0,
            y: 0
        });
        d.setAnchorPoint(0.5, 0);
        d.setRotation(90);
        d.setScale(2);
        d.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            d.removeFromParent()
        })));
        this.head2.addChild(d);
        a = new cc.Sprite;
        a.attr({
            x: -20,
            y: 0
        });
        this.addChild(a);
        this.tail2 = a;
        var e = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        e.setRotation(270);
        e.attr({
            x: 0,
            y: 0
        });
        e.setScale(2);
        e.setAnchorPoint(0.5, 0);
        e.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            e.removeFromParent()
        })));
        this.tail2.addChild(e)
    },
    hKillElements: function() {
        var a = Math.max((920 - this.x) / Global.flySpeed, this.x / Global.flySpeed);
        this.scheduleOnce(function() {
            this.num -= 1;
            this.completeAction()
        }
        .bind(this), a + 0.01)
    },
    vKillElements: function() {
        var a = Math.max((1380 - this.y) / Global.flySpeed, this.y / Global.flySpeed);
        this.scheduleOnce(function() {
            this.num -= 1;
            this.completeAction()
        }
        .bind(this), a + 0.01)
    },
    killAction: function() {
        this.hKillElements();
        this.vKillElements()
    },
    completeAction: function() {
        0 >= this.num && (EventMgr.emit(EVENTMGR_ID.ITEM_KILL),
        this.removeFromParent())
    }
})
  , FlyBomb = Element.extend({
    num: 2,
    head1: null,
    head2: null,
    tail1: null,
    tail2: null,
    ctor: function(a) {
        this._super(a);
        this.num = 2;
        this.isCanTouch = this.isCanMove = !1;
        this.tail2 = this.tail1 = this.head2 = this.head1 = null
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(11);
        EventMgr.emit(EVENTMGR_ID.FORBID_DROP);
        this.scheduleOnce(function() {
            var a = new cc.Sprite;
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/merge/merge", 12, 1 / 15), cc.callFunc(function() {}, a)));
            this.addChild(a, 3)
        }
        .bind(this), 0.15);
        var a = DataMgr.getElementIconNameByID(PieceMgr.chooseElement.id)
          , b = PieceMgr.chooseElement.getRotation();
        Utils.changeTexture(this.target, a);
        this.target.setRotation(b);
        23 === PieceMgr.chooseElement.id && 90 === b && (this.target.x -= 42,
        this.target.y += 42)
    },
    disappearAction: function() {
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        this.setLocalZOrder(12);
        this.target.setVisible(!1);
        this.state = ELEMENT_STATE.MOVE;
        this.createHeadAndTail();
        this.killAction();
        this.removeElementData()
    },
    createHeadAndTail: function() {
        this.target.setVisible(!1);
        var a = new cc.Sprite;
        a.attr({
            y: 21
        });
        this.addChild(a);
        this.head1 = a;
        var b = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        b.attr({
            x: 0,
            y: -b.getContentSize().height / 2 + FLY_PUDDINGPOSREDY
        });
        b.setAnchorPoint(0.5, 0);
        b.setScale(2);
        b.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            b.removeFromParent()
        })));
        this.head1.addChild(b);
        var c = new cc.Sprite;
        c.attr({
            x: 0,
            y: 0
        });
        c.setScale(2);
        c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/flybomb/bomb", 16, 1 / 24), cc.callFunc(function() {
            c.removeFromParent()
        })));
        this.head1.addChild(c, 10);
        var d = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        d.attr({
            x: 84,
            y: -d.getContentSize().height / 2 + FLY_PUDDINGPOSREDY
        });
        d.setAnchorPoint(0.5, 0);
        d.setScale(2);
        d.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            d.removeFromParent()
        })));
        this.head1.addChild(d);
        var e = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        e.attr({
            x: -84,
            y: -e.getContentSize().height / 2 + FLY_PUDDINGPOSREDY
        });
        e.setAnchorPoint(0.5, 0);
        e.setScale(2);
        e.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            e.removeFromParent()
        })));
        this.head1.addChild(e);
        a = new cc.Sprite;
        a.attr({
            y: -21
        });
        this.addChild(a);
        this.tail1 = a;
        var f = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        f.setRotation(180);
        f.attr({
            x: 0,
            y: b.getContentSize().height / 2 + FLY_PUDDINGPOSBLUEY
        });
        f.setScale(2);
        f.setAnchorPoint(0.5, 0);
        f.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            f.removeFromParent()
        })));
        this.tail1.addChild(f);
        var g = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        g.setRotation(180);
        g.attr({
            x: -84,
            y: g.getContentSize().height / 2 + FLY_PUDDINGPOSBLUEY
        });
        g.setScale(2);
        g.setAnchorPoint(0.5, 0);
        g.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            g.removeFromParent()
        })));
        this.tail1.addChild(g);
        var h = new cc.Sprite("#effect/fly_pudiding/tail1.png");
        h.setRotation(180);
        h.attr({
            x: 84,
            y: h.getContentSize().height / 2 + FLY_PUDDINGPOSBLUEY
        });
        h.setScale(2);
        h.setAnchorPoint(0.5, 0);
        h.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
            h.removeFromParent()
        })));
        this.tail1.addChild(h);
        a = new cc.Sprite;
        a.attr({
            x: 20,
            y: 0
        });
        this.addChild(a, 10);
        this.head2 = a;
        a = new cc.Sprite;
        a.attr({
            x: -20,
            y: 0
        });
        this.addChild(a);
        this.tail2 = a
    },
    vEffect: function() {
        var a = new cc.Sprite;
        a.attr({
            x: -20,
            y: 0
        });
        a.setScale(2);
        a.setRotation(90);
        a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/flybomb/bomb", 16, 1 / 24), cc.callFunc(function() {
            a.removeFromParent()
        })));
        this.head2.addChild(a, 10);
        this.scheduleOnce(function() {
            var a = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            a.attr({
                x: -30,
                y: 0
            });
            a.setAnchorPoint(0.5, 0);
            a.setRotation(90);
            a.setScale(2);
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                a.removeFromParent()
            })));
            this.head2.addChild(a);
            var c = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            c.attr({
                x: -30,
                y: 84
            });
            c.setAnchorPoint(0.5, 0);
            c.setRotation(90);
            c.setScale(2);
            c.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                c.removeFromParent()
            })));
            this.head2.addChild(c);
            var d = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            d.attr({
                x: -30,
                y: -84
            });
            d.setAnchorPoint(0.5, 0);
            d.setRotation(90);
            d.setScale(2);
            d.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                d.removeFromParent()
            })));
            this.head2.addChild(d);
            var e = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            e.setRotation(270);
            e.attr({
                x: -30,
                y: 0
            });
            e.setScale(2);
            e.setAnchorPoint(0.5, 0);
            e.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                e.removeFromParent()
            })));
            this.tail2.addChild(e);
            var f = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            f.setRotation(270);
            f.attr({
                x: -30,
                y: 84
            });
            f.setScale(2);
            f.setAnchorPoint(0.5, 0);
            f.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                f.removeFromParent()
            })));
            this.tail2.addChild(f);
            var g = new cc.Sprite("#effect/fly_pudiding/tail1.png");
            g.setRotation(270);
            g.attr({
                x: -30,
                y: -84
            });
            g.setScale(2);
            g.setAnchorPoint(0.5, 0);
            g.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/fly_pudiding/tail", 16, 1 / 24), cc.callFunc(function() {
                g.removeFromParent()
            })));
            this.tail2.addChild(g)
        }
        .bind(this), 0.3)
    },
    hKillElements: function() {
        engine.gameSound.playEffect(soundRes.sound_fly_jelly);
        this.head2.setVisible(!0);
        this.tail2.setVisible(!0);
        var a = Math.max((920 - this.x) / Global.flySpeed, (this.x + 200) / Global.flySpeed);
        this.scheduleOnce(function() {
            this.num -= 1;
            this.completeAction()
        }
        .bind(this), a + 0.3)
    },
    vKillElements: function() {
        engine.gameSound.playEffect(soundRes.sound_fly_jelly);
        var a = Math.max((1380 - this.y) / Global.flySpeed, (this.y + 200) / Global.flySpeed);
        this.scheduleOnce(function() {
            this.num -= 1;
            this.completeAction();
            this.vEffect();
            this.hKillElements()
        }
        .bind(this), a - 0.3)
    },
    killAction: function() {
        this.vKillElements()
    },
    completeAction: function() {
        0 >= this.num && (EventMgr.emit(EVENTMGR_ID.ITEM_KILL),
        this.removeFromParent())
    }
})
  , BombBomb = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanTouch = this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(11);
        isShowBombBomb = !0;
        this.scheduleOnce(function() {
            var a = new cc.Sprite;
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/merge/merge", 12, 1 / 24), cc.callFunc(function() {}
            .bind(this), a)));
            this.addChild(a, 3)
        }
        .bind(this), 0.2);
        this.scheduleOnce(function() {
            var a = new cc.Sprite;
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/bomb_pudding/bombbomb", 14, 1 / 24), cc.callFunc(function() {
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL)
            }
            .bind(this), a)));
            this.addChild(a, 3)
        }
        .bind(this), 0.55)
    },
    disappearAction: function() {
        engine.gameSound.playEffect(soundRes.sound_big_bomb);
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        this.setLocalZOrder(12);
        this.target.setVisible(!1);
        this.animation.setScale(1.8);
        this.animation.runAction(cc.sequence(AnimationMgr.getFrameAnimation("effect/bomb_pudding/bomb", 1, 8, 1 / 12), cc.callFunc(function() {
            this.removeElementData();
            this.removeFromParent()
        }, this)))
    }
})
  , ColorColor = Element.extend({
    ctor: function(a) {
        this._super(a);
        this.isCanTouch = this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        isColorPuddingAndColorPudding = !0;
        this.setLocalZOrder(11);
        var a = new cc.Sprite;
        a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/merge/merge", 12, 1 / 15), cc.callFunc(function() {}, a)));
        this.addChild(a, 3);
        EventMgr.emit(EVENTMGR_ID.FORBID_DROP);
        this.scheduleOnce(function() {
            this.target.setVisible(!1);
            var a = new cc.Sprite;
            a.setScale(1.8);
            a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/bomb_pudding/bomb", 8, 1 / 12), cc.callFunc(function() {}
            .bind(this), a)));
            this.addChild(a, 3);
            var c = new cc.Sprite("#effect/merge/slm.png");
            this.scheduleOnce(function() {
                var a = cc.scaleTo(0.4, 8);
                c.runAction(cc.sequence(a, cc.callFunc(function() {
                    c.setVisible(!1)
                }
                .bind(this))));
                this.addChild(c, 3)
            }, 0.2)
        }
        .bind(this), 0.4)
    },
    disappearAction: function() {
        engine.gameSound.playEffect(soundRes.sound_big_bomb);
        this.data && EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, this.data);
        EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
        this.removeElementData();
        this.scheduleOnce(function() {
            this.setVisible(!1)
        }
        .bind(this), 0.2);
        this.scheduleOnce(function() {
            engine.gameSound.playEffect(soundRes.sound_unbelievable);
            this.removeFromParent();
            EventMgr.emit(EVENTMGR_ID.ITEM_KILL)
        }
        .bind(this), 1.5)
    }
})
  , ColorFly = Element.extend({
    lineNum: 0,
    specialID: 10,
    ctor: function(a) {
        this._super(a);
        this.isCanTouch = this.isCanMove = !1
    },
    onEnter: function() {
        this._super();
        this.setLocalZOrder(11);
        isShowBombStar = !0;
        this.standbyAction();
        engine.gameSound.playEffect(soundRes.sound_color_start);
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        EventMgr.emit(EVENTMGR_ID.FORBID_DROP);
        var a = new cc.Sprite;
        a.runAction(cc.sequence(AnimationMgr.getDefaultFrameAnimation("effect/merge/merge", 12, 1 / 15), cc.callFunc(function() {}, a)));
        this.addChild(a, 3);
        this.clickAction()
    },
    clickAction: function() {
        var a = new cc.Sprite;
        a.setScale(2);
        a.runAction(AnimationMgr.getDefaultFrameAnimation("effect/publiceffect/clickeffect", 13, 1 / 12).repeatForever());
        this.addChild(a, 1E3)
    },
    standbyAction: function() {
        var a = cc.scaleTo(0.3, 1.1, 0.85)
          , b = cc.scaleTo(0.8, 0.9, 1.1);
        this.target.runAction(cc.sequence(a, b).repeatForever())
    },
    killChooseElements: function(a) {
        if (a && 1 === a.length)
            a[0].isChoose = !1;
        else {
            for (var b = 0; b < a.length; ++b) {
                var c = a[b].curGrid.row
                  , d = a[b].curGrid.col;
                c !== this.curGrid.row || d !== this.curGrid.col ? (this.dealElement(a[b]),
                c = PieceMgr.turnToOtherElement(a[b], this.specialID, !0),
                c[0].autoKill = 1,
                1 === b % 2 && 23 === this.specialID && c[0].setRotation(90)) : (PieceMgr.elements[c][d][0] = -1,
                a[b].disappearAction())
            }
            EventMgr.emit(EVENTMGR_ID.AUTO_KILL)
        }
    },
    killAction: function(a) {
        if (a && 27 === this.id && 1 !== a.length) {
            EventMgr.emit(EVENTMGR_ID.FORBID_DROP);
            engine.gameSound.playEffect(soundRes.sound_color_jelly);
            this.scheduleOnce(function(a) {
                this.killChooseElements(a);
                EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
                this.removeFromParent()
            }
            .bind(this, a), 0.8);
            this.target.stopAllActions();
            this.animation.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/light", 8, 1 / 12).repeatForever());
            this.lineNum = a.length;
            for (var b = 0; b < a.length; ++b) {
                var c = cc.pDistance(a[b].getPosition(), this.getPosition())
                  , d = Utils.getAngleByLength(a[b].x - this.x, a[b].y - this.y);
                this.emitLineAction(c, d, a[b].getPosition())
            }
        }
    },
    emitLineAction: function(a, b, c) {
        this.setLocalZOrder(13);
        var d = new cc.Sprite;
        d.setScaleY(0.01);
        d.setVisible(!0);
        d.setAnchorPoint(cc.p(0.5, 0));
        d.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/line", 8).repeatForever());
        d.setRotation(b);
        d.runAction(cc.sequence(cc.scaleTo(0.1, 1, a / 600), cc.callFunc(function(a, b) {
            var c = new cc.Sprite;
            c.runAction(AnimationMgr.getDefaultFrameAnimation("effect/color_pudding/light", 8, 1 / 14).repeatForever());
            c.setPosition(cc.pSub(b, this.getPosition()));
            this.addChild(c)
        }, this, c)));
        this.addChild(d)
    },
    disappearAction: function() {},
    getMonsterIndex: function(a) {
        for (var b = 0; b < PieceMgr.monsters.length; ++b)
            if (a === PieceMgr.monsters[b].id - 5 && 0 < PieceMgr.monsters[b].num)
                return b;
        return -1
    },
    dealElement: function(a) {
        var b = DataMgr.getTargetIndex(a.id);
        -1 !== b ? (EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, b),
        DataMgr.refreshTargetData(a.id)) : (b = this.getMonsterIndex(a.id),
        -1 !== b && (a = {
            id: a.id,
            monsterGrid: PieceMgr.monsters[b].curGrid
        },
        PieceMgr.monsters[b].num -= 1,
        EventMgr.emit(EVENTMGR_ID.KILL_MONSTER, a),
        bool = !0))
    }
})
  , EvilElement = NormalPudding.extend({
    step: 0,
    animation_evil: null,
    evilNewID: null,
    isEnd: null,
    ctor: function(a) {
        this._super(a);
        this.isCanBeItemKill = !0;
        this.step = 9;
        this.evilNewID = this.id = a;
        this.isEvil = !0;
        this.isEnd = !1
    },
    onEnter: function() {
        this._super();
        Utils.changeTexture(this.target, "game/monster.png");
        EventMgr.register(EVENTMGR_ID.STEP, function() {
            if (!this.isChoose) {
                this.step -= 1;
                if (0 >= this.step && (this.step = 0,
                !1 == this.isEnd)) {
                    this.isEnd = !0;
                    this.setLocalZOrder(13);
                    var a = new cc.Sprite("#game/evilreduce.png");
                    this.getParent().addChild(a, 999999);
                    a.x = this.x;
                    a.y = this.y;
                    a.runAction(cc.sequence(cc.moveBy(0.8, cc.p(0, 50)), cc.removeSelf()));
                    var b = new cc.Sprite;
                    this.getParent().addChild(b, 999999);
                    b.x = this.x;
                    b.y = this.y;
                    this.target.setVisible(!1);
                    this.removeElementData();
                    b.runAction(cc.sequence(this.getDisappearAction(), cc.callFunc(function() {
                        b.removeFromParent();
                        this.removeFromParent();
                        EventMgr.emit(EVENTMGR_ID.STEP_OVER)
                    }, this)))
                }
                this.createStepNum()
            }
        }
        .bind(this), this);
        this.id -= 30;
        this.createStepNum()
    },
    doAction: function() {},
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.STEP, this)
    },
    createStepNum: function() {
        var a = ["evil_red", "evil_blue", "evil_yellow", "evil_green", "evil_fen"];
        null !== this.target && null == this.animation_evil ? (this.animation_evil = createGameAnimation(fightRes.res_evils_json, a[this.evilNewID - 31], 31),
        this.animation_evil.setPosition(42, 42),
        this.animation_evil.playCount = 1,
        this.animation_evil.gotoAndStop(35),
        this.target.addChild(this.animation_evil, 100)) : (cc.log("current", this.step),
        a = [35, 59, 84, 109, 135, 159, 185, 210, 235, 260, 273, 275],
        this.animation_evil.playCount = 1,
        this.animation_evil.fromFrameIndexToPlayFrameIndex(a[8 - this.step], a[9 - this.step]))
    },
    evilAction: function() {
        this.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.5, 3), cc.moveTo(0.5, cc.p(360, 640))), cc.callFunc(function() {
            this.setLocalZOrder(3);
            this.scheduleOnce(function() {
                this.setVisible();
                EventMgr.emit(EVENTMGR_ID.FAILED)
            }
            .bind(this), 1.6);
            AnimationMgr.evilAction(this)
        }, this)))
    }
});
var CELL_Z_ORDER = {
    BG: 1,
    GRID: 2,
    BORDER: 3,
    ELEMENT: 4,
    ACTION: 6
}
  , Map1 = cc.Sprite.extend({
    lv: 0,
    data: 0,
    gridSize: null,
    top: null,
    light: null,
    randomElementList: null,
    ctor: function(a) {
        this._super();
        this.lv = a || 0;
        this.data = 1 == Global.gameType ? Global.maps[this.lv - 1] : Global.weekGamelevelMap[this.lv - 1];
        this.light = this.top = null;
        this.randomElementList = {}
    },
    onEnter: function() {
        this._super();
        this.initMapBg();
        this.registerEvent()
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.SHOW_BUCKET, this);
        EventMgr.remove(EVENTMGR_ID.HIDE_BUCKET, this)
    },
    initMapBg: function() {
        for (var a = this.data.length - 1; 0 <= a; --a)
            for (var b = 0; b < this.data[0].length; ++b)
                "0" !== this.data[a][b][0] && (this.createGridBg(this.data.length - 1 - a, b, this.getIndex(a, b)),
                this.createBorder(this.data.length - 1 - a, b),
                this.createCorner(this.data.length - 1 - a, b),
                this.initElement(this.data.length - 1 - a, b))
    },
    registerEvent: function() {
        EventMgr.register(EVENTMGR_ID.SHOW_BUCKET, function() {
            this.bucketAction(!0)
        }, this);
        EventMgr.register(EVENTMGR_ID.HIDE_BUCKET, function() {
            this.bucketAction(!1)
        }, this)
    },
    initElement: function(a, b) {
        var c = this.getMapData(a, b)
          , c = Utils.strToNumber(c, "+");
        PieceMgr.elements[a][b] = [];
        for (var d = 0; d < c.length; ++d) {
            var e = createElementByID(c[d]);
            e.attr({
                x: b * Global.elementSize + Global.mapOffsetX,
                y: a * Global.elementSize + Global.mapOffsetY
            });
            e.setCurGridPos(a, b);
            this.addChild(e, CELL_Z_ORDER.ELEMENT + d);
            17 === c[0] && (e.setLocalZOrder(CELL_Z_ORDER.ACTION),
            PieceMgr.elements[a][b][0] = -1);
            PieceMgr.elements[a][b].push(e);
            this.pushMonster(e)
        }
    },
    pushMonster: function(a) {
        5 < a.id && 9 >= a.id && PieceMgr.monsters.push(a)
    },
    getIndex: function(a, b) {
        return 0 === a % 2 && 0 === b % 2 ? 1 : 1 === a % 2 && 1 === b % 2 ? 1 : 2
    },
    createBorder: function(a, b) {
        "0" !== this.getMapData(a, b) && (this.createUpBorder(a, b),
        this.createDownBorder(a, b),
        this.createLeftBorder(a, b),
        this.createRightBorder(a, b))
    },
    createCorner: function(a, b) {
        this.createLeftUpCorner(a, b);
        this.createRightUpCorner(a, b);
        this.createLeftDownCorner(a, b);
        this.createRightDownCorner(a, b)
    },
    getMapData: function(a, b) {
        return this.data[Global.maxRow - 1 - a] && this.data[Global.maxRow - 1 - a][b] ? this.data[Global.maxRow - 1 - a][b] : null
    },
    createUpBorder: function(a, b) {
        this.getMapData(a + 1, b) && "0" !== this.getMapData(a + 1, b) || this.createBorderSp("#game/border.png", {
            x: b * Global.elementSize + Global.mapOffsetX,
            y: a * Global.elementSize + Global.mapOffsetY + 42 + 4
        })
    },
    createDownBorder: function(a, b) {
        this.getMapData(a - 1, b) && "0" !== this.getMapData(a - 1, b) || this.createBorderSp("#game/border.png", {
            x: b * Global.elementSize + Global.mapOffsetX,
            y: a * Global.elementSize + Global.mapOffsetY - 42 - 4
        })
    },
    createLeftBorder: function(a, b) {
        this.getMapData(a, b - 1) && "0" !== this.getMapData(a, b - 1) || this.createBorderSp("#game/border.png", {
            x: b * Global.elementSize + Global.mapOffsetX - 42 - 4,
            y: a * Global.elementSize + Global.mapOffsetY
        }).setRotation(90)
    },
    createRightBorder: function(a, b) {
        this.getMapData(a, b + 1) && "0" !== this.getMapData(a, b + 1) || this.createBorderSp("#game/border.png", {
            x: b * Global.elementSize + Global.mapOffsetX + 42 + 4,
            y: a * Global.elementSize + Global.mapOffsetY
        }).setRotation(90)
    },
    createLeftUpCorner: function(a, b) {
        "0" === this.getMapData(a, b) || this.getMapData(a + 1, b) && "0" !== this.getMapData(a + 1, b) || this.getMapData(a, b - 1) && "0" !== this.getMapData(a, b - 1) || this.createBorderSp("#game/corner2.png", {
            x: b * Global.elementSize + Global.mapOffsetX - 42 - 4,
            y: a * Global.elementSize + Global.mapOffsetY + 42 + 4
        }).setRotation(-90)
    },
    createRightUpCorner: function(a, b) {
        "0" === this.getMapData(a, b) || this.getMapData(a + 1, b) && "0" !== this.getMapData(a + 1, b) || this.getMapData(a, b + 1) && "0" !== this.getMapData(a, b + 1) || this.createBorderSp("#game/corner2.png", {
            x: b * Global.elementSize + Global.mapOffsetX + 42 + 4,
            y: a * Global.elementSize + Global.mapOffsetY + 42 + 4
        })
    },
    createLeftDownCorner: function(a, b) {
        "0" === this.getMapData(a, b) || this.getMapData(a - 1, b) && "0" !== this.getMapData(a - 1, b) || this.getMapData(a, b - 1) && "0" !== this.getMapData(a, b - 1) || this.createBorderSp("#game/corner2.png", {
            x: b * Global.elementSize + Global.mapOffsetX - 42 - 4,
            y: a * Global.elementSize + Global.mapOffsetY - 42 - 4
        }).setRotation(180)
    },
    createRightDownCorner: function(a, b) {
        "0" === this.getMapData(a, b) || this.getMapData(a - 1, b) && "0" !== this.getMapData(a - 1, b) || this.getMapData(a, b + 1) && "0" !== this.getMapData(a, b + 1) || this.createBorderSp("#game/corner2.png", {
            x: b * Global.elementSize + Global.mapOffsetX + 42 + 4,
            y: a * Global.elementSize + Global.mapOffsetY - 42 - 4
        }).setRotation(90)
    },
    createBorderSp: function(a, b) {
        var c = new cc.Sprite(a);
        c.attr({
            x: b.x,
            y: b.y
        });
        this.addChild(c, CELL_Z_ORDER.BORDER);
        return c
    },
    createGridBg: function(a, b, c) {
        c = new cc.Sprite("res/game/gray1.png");
        c.getContentSize();
        c.attr({
            x: b * Global.elementSize + Global.mapOffsetX,
            y: a * Global.elementSize + Global.mapOffsetY
        });
        c.gridData = {
            r: a,
            c: b
        };
        this.addChild(c, CELL_Z_ORDER.GRID)
    },
    onTouch: function(a, b) {
        var c = b.getCurrentTarget();
        EventMgr.emit(EVENTMGR_ID.TOUCH_CELL, c.gridData)
    },
    turnToSpecialElement: function() {
        for (var a = Math.min(Global.chooseItems.length, this.getNormalElementNum()), b = 0; b < a; ++b)
            if (0 < Global.chooseItems[b]) {
                var c = Global.unlockItemCondition[b].id
                  , d = this.getNoNormalElement();
                this.scheduleOnce(function(a) {
                    this.itemAction(this, a)
                }
                .bind(this, {
                    id: c,
                    target: d
                }), 0.2 * b)
            }
    },
    resultAction: function(a, b) {
        engine.gameSound.playEffect(soundRes.sound_result_step);
        if (cc._renderType === cc.game.RENDER_TYPE_WEBGL) {
            var c = new cc.Node;
            c.setCascadeOpacityEnabled(!0);
            c.setAnchorPoint(cc.p(0.5, 0));
            c.setPosition(cc.p(98, 1166));
            a.addChild(c, 4);
            var d = new cc.ParticleSystem("res/effect/remainsteptrailing/remainsteptrailing1.plist");
            d.x = 0;
            d.y = 0;
            d.setAutoRemoveOnFinish(!0);
            c.addChild(d, 4);
            d = new cc.ParticleSystem("res/effect/remainsteptrailing/remainsteptrailing2.plist");
            d.x = 0;
            d.y = 0;
            d.setAutoRemoveOnFinish(!0);
            c.addChild(d, 4);
            var d = cc.pDistance(c.getPosition(), target.getPosition()), e, d = cc.moveTo(d / 1500, target.getPosition());
            b = {
                index: index,
                animationNode: c
            };
            d = cc.sequence(d, cc.callFunc(function(a, b) {
                this.turnToFlyPudding(target, b.index, step);
                b.animationNode.removeFromParent()
            }, this, b))
        } else {
            c = new cc.Sprite("#game/result_light.png");
            c.setCascadeOpacityEnabled(!0);
            c.setAnchorPoint(cc.p(0.5, 0));
            c.setScale(0.5);
            c.setPosition(cc.p(98, 1166));
            a.addChild(c, 4);
            d = cc.pDistance(c.getPosition(), target.getPosition());
            e = d / 2E3;
            d = Utils.getAngleByLength(target.getPositionX() - 98, target.getPositionY() - 1166);
            c.setRotation(d + 180);
            d = cc.moveTo(e, target.getPosition());
            e = cc.scaleTo(e, 1, 4);
            b = {
                index: index,
                sprite: c
            };
            var f = cc.spawn(cc.scaleTo(0.2, 1, 0.1), cc.fadeOut(0.2))
              , d = cc.sequence(cc.spawn(d, e), f, cc.callFunc(function(a, b) {
                this.turnToFlyPudding(target, b.index, step);
                b.sprite.removeFromParent()
            }, this, b))
        }
        c.runAction(d)
    },
    itemAction: function(a, b) {
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1);
        engine.gameSound.playEffect(soundRes.sound_result_step);
        var c = new cc.Sprite("#game/item_light.png");
        c.setAnchorPoint(cc.p(0.5, 0));
        c.setPosition(cc.p(98, 1166));
        a.addChild(c, 4);
        var d = cc.pDistance(c.getPosition(), b.target.getPosition()) / 2E3
          , e = Utils.getAngleByLength(b.target.getPositionX() - 98, b.target.getPositionY() - 1166);
        c.setRotation(e + 180);
        0.4 > d && (d = 0.4);
        var d = cc.moveTo(d, b.target.getPosition())
          , f = cc.sequence(d, cc.callFunc(function(a, b) {
            PieceMgr.turnToOtherElement(b.target, b.id);
            EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !0);
            a.removeFromParent()
        }, f, b));
        c.runAction(f)
    },
    getNoNormalElement: function() {
        var a = Utils.getRandomNum(Global.maxRow) - 1
          , b = Utils.getRandomNum(Global.maxCol) - 1;
        if (null != this.randomElementList[a + "_" + b])
            return this.getNoNormalElement();
        this.randomElementList[a + "_" + b] = 1;
        var c = PieceMgr.elements[a][b];
        if (PieceMgr.isHaveElement(a, b) && 5 >= c[0].id && c[0]) {
            if (1 < c.length && 19 === c[1].id)
                return this.getNoNormalElement();
            c[0].isChoose = !0;
            return c[0]
        }
        return this.getNoNormalElement()
    },
    getNormalElement: function() {
        var a = Utils.getRandomNum(Global.maxRow) - 1
          , b = Utils.getRandomNum(Global.maxCol) - 1
          , c = PieceMgr.elements[a][b];
        if (PieceMgr.isHaveElement(a, b) && 5 >= c[0].id && c[0]) {
            if (1 < c.length && 19 === c[1].id)
                return this.getNormalElement();
            c[0].isChoose = !0;
            return c[0]
        }
        return this.getNormalElement()
    },
    getNormalElementNum: function() {
        for (var a = 0, b = 0; b < PieceMgr.elements.length; ++b)
            for (var c = 0; c < PieceMgr.elements[0].length; ++c) {
                var d = PieceMgr.elements[b][c];
                if (PieceMgr.isHaveElement(b, c) && 5 >= d[0].id && d[0] && (1 >= d.length || 19 !== d[1].id) && (++a,
                3 <= a))
                    return a
            }
        return a
    },
    bucketAction: function(a) {
        if (this.top)
            this.top.setVisible(a),
            this.light.setVisible(a);
        else {
            this.light = createGameAnimation(res.res_brush_json, "bucketmc", 31);
            this.light.playCount = -1;
            this.addChild(this.light, CELL_Z_ORDER.ACTION);
            var b = 0
              , b = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
            this.light.attr({
                x: b - uiOfferX,
                y: viewGameHeigh / 2
            });
            this.top = new cc.Sprite("#element/bucket_top.png");
            this.top.attr({
                x: b - uiOfferX,
                y: viewGameHeigh / 2
            });
            this.addChild(this.top, CELL_Z_ORDER.ACTION);
            this.top.setVisible(a)
        }
    }
});
var MainScene = GameScene.extend({
    rewardNode: null,
    loadUI: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super();
        this.x = viewGameWidth / 2 - 360;
        this.y = viewGameHeigh / 2 - 640;
        this.createTipNode();
        this.dealTime();
        EventMgr.register(EVENTMGR_ID.REWARD_NODE, function(a) {
            this.createRewardNode(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.SHOW_TIPS, function(a) {
            this.showTips(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.SHOW_LOADING, function() {
            this.loadingUI()
        }, this);
        EventMgr.register(EVENTMGR_ID.CLOSE_LOADING, function(a) {
            this.removeLoadUI(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.ADS_TIPS, function(a) {
            this.createAdsNode(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.PAYMENT_SUCCESS, function(a) {
            this.createPaySuccessLayer(a)
        }, this)
    },
    initialize: function() {
        this._super()
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.REWARD_NODE, this);
        EventMgr.remove(EVENTMGR_ID.SHOW_TIPS, this);
        EventMgr.remove(EVENTMGR_ID.SHOW_LOADING, this);
        EventMgr.remove(EVENTMGR_ID.CLOSE_LOADING, this);
        EventMgr.remove(EVENTMGR_ID.ADS_TIPS, this);
        EventMgr.remove(EVENTMGR_ID.PAYMENT_SUCCESS, this)
    },
    createRewardNode: function(a) {
        this.rewardNode = new RewardNode(a.id,a.num,a.type);
        a = 0;
        createMaskLayer(this.rewardNode).attr({
            x: -cc.winSize.width / 2,
            y: -cc.winSize.height / 2
        });
        a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        this.rewardNode.attr({
            x: a,
            y: cc.winSize.height / 2
        });
        this.addChild(this.rewardNode)
    },
    createTipNode: function() {
        this.tipsNode = new TipsNode;
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        this.tipsNode.attr({
            x: a,
            y: cc.winSize.height / 2 - 275
        });
        this.addChild(this.tipsNode, 10001)
    },
    createAdsNode: function(a) {
        a = new TipsAdsNode(a);
        createMaskLayer(a).attr({
            x: -viewGameWidth / 2,
            y: -cc.winSize.height / 2
        });
        a.attr({
            x: 360,
            y: cc.winSize.height / 2
        });
        this.addChild(a, 100001)
    },
    createPaySuccessLayer: function(a) {
        a = new PaymentSuccessLayer(a);
        this.addChild(a, 1000001)
    },
    showTips: function(a) {
        this.tipsNode.refreshText(a);
        var b = 0;
        a == Global.noAdds && (b = 1);
        this.tipsNode.inAction(b)
    },
    dealTime: function() {
        var a = (new Date).getDate();
        cc.log("当天日期：" + a + "----------昨天日期：" + gameUserData.lastDay);
        if (a !== gameUserData.lastDay) {
            gameUserData.lastDay = a;
            gameUserData.supportNum = 5;
            gameUserData.watchAdsNum = 1;
            gameUserData.resugenceAdsNum = 3;
            gameUserData.freeLotteyNum = 1;
            gameUserData.recoveryPowerNum = 3;
            gameUserData.leftGetDiamondNum = 3;
            gameUserData.isDailyGift = 1;
            Global.isShowTargetBox = 1;
            gameUserData.is_today_first_login = 1;
            gameUserData.pay_count = 0;
            gameUserData.free_count = 1;
            gameUserData.week_share_num = 0;
            gameUserData.week_invite_num = 0;
            gameUserData.honor_free_box = 0;
            gameUserData.honor_invite_type = 0;
            gameUserData.boxget = 0;
            15 <= gameUserData.lv && (gameUserData.tagetlvl = gameUserData.lv + 2);
            300 < gameUserData.tagetlvl && (gameUserData.tagetlvl = 299);
            gameUserData.invite_ids = [];
            gameUserData.lotteryCostNum = 100;
            gameUserData.lotteryShareCount = 1;
            gameUserData.limitPowerCount = 3;
            gameUserData.inviteFriendList = [];
            gameUserData.gift = 1;
            gameUserData.watchParachuteAd_count = 5;
            gameUserData.getMsgAwardDate = 5;
            for (var a = !0, b = 0; b < gameUserData.hurt_gift_package.length; b++)
                0 == gameUserData.hurt_gift_package[b] && (a = !1);
            !0 == a && 2E3 <= gameUserData.myHurt && (gameUserData.myHurt = 0,
            gameUserData.hurt_gift_package = [0, 0, 0, 0, 0, 0, 0])
        }
    },
    loadingUI: function() {
        if (null == this.loadUI) {
            var a = new cc.Layer
              , b = new cc.DrawNode;
            b.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
            a.addChild(b);
            this.addChild(a, 1E5);
            this.loadUI = a;
            b = new cc.Sprite("#rank/circle.png");
            b.x = 360;
            b.y = 640;
            a.addChild(b, 1001);
            b.runAction(cc.rotateBy(100, 36E3));
            b = new cc.Sprite("#rank/loading.png");
            b.x = 360;
            b.y = 640;
            a.addChild(b, 1002);
            engine.gameEvent.createMouseDown(a, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh))
        }
    },
    removeLoadUI: function(a) {
        1 == a ? null !== this.loadUI && (this.loadUI.removeFromParent(),
        this.loadUI = null) : this.runAction(cc.sequence(cc.delayTime(0.58), cc.callFunc(function() {
            null !== this.loadUI && (this.loadUI.removeFromParent(),
            this.loadUI = null)
        }
        .bind(this))))
    }
});
var isOpenSigh = !0
  , isShowSupplement = !1
  , ChooseScene = MainScene.extend({
    chooseLevelLayer: null,
    isPlayBgSound: null,
    ctor: function() {
        this._super();
        this.sceneName = "ChooseScene"
    },
    onEnter: function() {
        this._super();
        this.isPlayBgSound = !1;
        gameSDK.startGame(function() {
            selfData.myname = gameSDK.sdkPlayInfo.name;
            selfData.myurl = gameSDK.sdkPlayInfo.photo;
            gameSDK.logEvent("startGame", 1, {
                startGame: "startGame"
            });
            gameSDK.getFriendsList(function() {
                gameSDK.getPlayerEntryAsync(FB_LEVEL_RANK_KEY, null);
                var a = Object.getOwnPropertyNames(gameSDK.sdkPlayInfo.friendsList).length;
                20 < a && (a = 20);
                initMaxPower(a);
                cc.log("开始获取好友排行榜------");
                gameSDK.getConnectedPlayerEntriesAsync(FB_LEVEL_RANK_KEY, Global.rankMaxNumber, 0);
                1 <= gameUserData.lv && gameSDK.createShortcut();
                Global.runStartGame || (Global.runStartGame = !0,
                gameSDK.sdkMessage.canSubscribeBotAsync(function() {
                    myLogEventFun("new_canSubscribe");
                    if (null != currentScene && "ChooseScene" == currentScene.sceneName) {
                        var a = new MessageLayer;
                        currentScene.addChild(a, 1E7)
                    }
                }))
            })
        });
        cc.director.isPaused() && cc.director.resume();
        50 <= gameUserData.lv && 0 === gameUserData.isInfiniteOver && (gameUserData.isInfiniteOver = 1,
        gameSDK.saveUserData(getSaveFBData(), null));
        if (0 === gameUserData.isInfiniteOver) {
            var a = Math.floor((new Date).getTime() / 1E3);
            0 >= gameUserData.firstEnterGameTime && (gameUserData.firstEnterGameTime = a,
            gameSDK.saveUserData(getSaveFBData(), null));
            if (0 < gameUserData.getInfinitePowerTime)
                a = gameUserData.getInfinitePowerTime + Global.endInfiniteTime - a,
                Global.endInfiniteTime = 0 >= a ? 0 : a,
                0 >= Global.endInfiniteTime ? (Global.isInfinite = !1,
                gameUserData.isInfiniteOver = 1,
                gameSDK.saveUserData(getSaveFBData(), null)) : Global.isInfinite = !0,
                EventMgr.emit(EVENTMGR_ID.INFINITE_POWER);
            else {
                var a = (new Date(1E3 * a)).getDate()
                  , b = (new Date(1E3 * gameUserData.firstEnterGameTime)).getDate()
                  , c = b + 1;
                a === (31 < c ? c - 31 : c) ? (Global.isSecondDay = !0,
                EventMgr.emit(EVENTMGR_ID.INFINITE_POWER)) : 1 < Math.abs(a - b) && (gameUserData.isInfiniteOver = 1,
                gameSDK.saveUserData(getSaveFBData(), null))
            }
        }
        this.afterGetInfoShowGame();
        a = {
            lv1: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 414
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 275,
                    y: 449
                },
                viewRect: [cc.rect(276 + downOfferX, 450, 166, 85)],
                des: "Click on 2 or more adjacent same jellies to eliminate them "
            },
            lv2: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 520
                },
                img: "#guide/rect2.png",
                pos: {
                    x: 277,
                    y: 534
                },
                viewRect: [cc.rect(278 + downOfferX, 537, 168, 168), cc.rect(363 + downOfferX, 707, 84, 84)],
                des: "Clear 5-6 jellies to get a missile"
            },
            lv3: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 520
                },
                img: "#guide/rect3.png",
                pos: {
                    x: 191,
                    y: 535
                },
                viewRect: [cc.rect(191 + downOfferX, 537, 252, 168), cc.rect(279 + downOfferX, 707, 84, 84)],
                des: "Clear 7-8 jellies to get a boom"
            },
            lv4: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 415
                },
                img: "#guide/rect4.png",
                pos: {
                    x: 192,
                    y: 448
                },
                viewRect: [cc.rect(192 + downOfferX, 450, 336, 168), cc.rect(531 + downOfferX, 455, 84, 84)],
                des: "You'll get a colorful jelly when clear 9 or more jellies.click on it and see what happened."
            },
            lv5: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 582
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 276,
                    y: 617
                },
                viewRect: [cc.rect(276 + +downOfferX, 617, 166, 85)],
                des: "Candy will be eliminated when the surrounding jellies are cleared"
            },
            lv8: {
                dialogPos: {
                    x: 360,
                    y: 950
                },
                handPos: null,
                img: "#guide/rect6.png",
                pos: {
                    x: 33,
                    y: 20
                },
                viewRect: [cc.rect(33 + downOfferX, 20, 130, 130)],
                des: "Hammer can clear a jelly"
            },
            lv9: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 195,
                    y: 564
                },
                img: "#guide/rect5.png",
                pos: {
                    x: 106,
                    y: 537
                },
                viewRect: [cc.rect(106 + downOfferX, 537, 84, 336)],
                des: "Gem stars will be collected when it falls to the bottom"
            },
            lv12: {
                dialogPos: {
                    x: 360,
                    y: 950
                },
                handPos: null,
                img: "#guide/rect6.png",
                pos: {
                    x: 162,
                    y: 20
                },
                viewRect: [cc.rect(162 + downOfferX, 20, 130, 130)],
                des: "Broom can clear a line of jellies"
            },
            lv13: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 220,
                    y: 425
                },
                img: "#guide/rect7.png",
                pos: {
                    x: 83,
                    y: 408
                },
                viewRect: [cc.rect(83 + downOfferX, 408, 178, 191)],
                des: "You can get a missile at the beginning"
            },
            lv16: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 414
                },
                img: "#guide/rect8.png",
                pos: {
                    x: 363,
                    y: 449
                },
                viewRect: [cc.rect(363 + downOfferX, 449, 84, 252)],
                des: "The bubble will break when the jelly inside is cleared"
            },
            lv18: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 417,
                    y: 425
                },
                img: "#guide/rect7.png",
                pos: {
                    x: 280,
                    y: 408
                },
                viewRect: [cc.rect(280 + downOfferX, 408, 178, 191)],
                des: "You can get a boom at the beginning"
            },
            lv20: {
                dialogPos: {
                    x: 360,
                    y: 950
                },
                handPos: null,
                img: "#guide/rect6.png",
                pos: {
                    x: 297,
                    y: 20
                },
                viewRect: [cc.rect(297 + downOfferX, 20, 130, 130)],
                des: "Magic wand can clear a column of jellies"
            },
            lv22: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 666
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 276,
                    y: 705
                },
                viewRect: [cc.rect(276 + +downOfferX, 705, 166, 85)],
                des: "Cheese will be eliminated when the surrounding jellies are cleared"
            },
            lv25: {
                dialogPos: {
                    x: 360,
                    y: 950
                },
                handPos: null,
                img: "#guide/rect6.png",
                pos: {
                    x: 433,
                    y: 20
                },
                viewRect: [cc.rect(433 + downOfferX, 20, 130, 130)],
                des: "Colorful brush can change the jellies in a 3*3 range to the same color"
            },
            lv26: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 614,
                    y: 425
                },
                img: "#guide/rect7.png",
                pos: {
                    x: 477,
                    y: 408
                },
                viewRect: [cc.rect(477 + downOfferX, 408, 178, 191)],
                des: "You can get a colorful jelly at the beginning"
            },
            lv31: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 279,
                    y: 396
                },
                img: "#guide/rect5.png",
                pos: {
                    x: 190,
                    y: 369
                },
                viewRect: [cc.rect(190 + downOfferX, 369, 84, 336)],
                des: "Collect pearls by eliminate elements next to the shell"
            },
            lv40: {
                dialogPos: {
                    x: 360,
                    y: 950
                },
                handPos: null,
                img: "#guide/rect6.png",
                pos: {
                    x: 568,
                    y: 20
                },
                viewRect: [cc.rect(568 + downOfferX, 20, 130, 130)],
                des: "Colorful pail can clear a kind of jellies"
            },
            lv48: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 447,
                    y: 667
                },
                img: "#guide/rect10.png",
                pos: {
                    x: 360,
                    y: 704
                },
                viewRect: [cc.rect(360 + downOfferX, 706, 84, 168)],
                des: "The cage will be eliminated when the same type of surrounding jellies are cleared"
            },
            lv61: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 583
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 275,
                    y: 617
                },
                viewRect: [cc.rect(277 + downOfferX, 617, 168, 84)],
                des: "The ice cube will break when the surrounding jellies are cleared, but it will grow by a grid when it's not cleared each time"
            },
            lv71: {
                dialogPos: {
                    x: 360,
                    y: 1020
                },
                handPos: {
                    x: 279,
                    y: 396
                },
                img: "#guide/rect5.png",
                pos: {
                    x: 190,
                    y: 369
                },
                viewRect: [cc.rect(190 + downOfferX, 369, 84, 336)],
                des: "Big mouth monster will be full after eating 20 puddings in certain colors."
            },
            lv81: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 331
                },
                img: "#guide/rect10.png",
                pos: {
                    x: 361,
                    y: 368
                },
                viewRect: [cc.rect(361 + downOfferX, 368, 84, 168)],
                des: "Windmill will be collected when a type of surrounding jellies is cleared"
            },
            lv91: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 564,
                    y: 415
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 361,
                    y: 450
                },
                viewRect: [cc.rect(363 + downOfferX, 450, 168, 84)],
                des: "The chocolate will be eliminated when the surrounding jellies are cleared for 3 times"
            },
            lv101: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 247
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 275,
                    y: 281
                },
                viewRect: [cc.rect(277 + downOfferX, 281, 168, 84)],
                des: "Ballons could be collected when rises to the top."
            },
            lv111: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 608,
                    y: 331
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 445,
                    y: 364
                },
                viewRect: [cc.rect(445 + +downOfferX, 364, 168, 84)],
                des: "Lollipops will be cleared when it falls"
            },
            lv126: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 268,
                    y: 586
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 105,
                    y: 619
                },
                viewRect: [cc.rect(105 + +downOfferX, 619, 168, 84)],
                des: "Bear-claw ice-cream only could be removed by special elements"
            },
            lv201: {
                dialogPos: {
                    x: 360,
                    y: 920
                },
                handPos: {
                    x: 447,
                    y: 415
                },
                img: "#guide/rect1.png",
                pos: {
                    x: 275,
                    y: 448
                },
                viewRect: [cc.rect(275 + downOfferX, 448, 168, 84)],
                des: "When it counts down to 0, moves step decreases 3. Fortunately, you can eliminate it as normal jellies."
            }
        };
        Global.guildData = a;
        sendBugLog.updateGameErrorType(afterEnterGame)
    },
    initialize: function() {
        this._super()
    },
    afterGetInfoShowGame: function() {
        this.chooseLevelLayer = new ChooseLevelLayer;
        this.addChild(this.chooseLevelLayer);
        this.initialize();
        var a = this
          , b = function() {
            multiplePNGToSpriteFrame(fightRes.fightanimatelist3_plist);
            multiplePNGToSpriteFrame(fightRes.fightanimatelist4_plist);
            if (!0 == a.chooseLevelLayer.isCanSign()) {
                if (!0 == isOpenSigh) {
                    isOpenSigh = !1;
                    var b = new SignInLayer(a.chooseLevelLayer.createTargetBox.bind(a.chooseLevelLayer));
                    createMaskLayer(b);
                    a.chooseLevelLayer.addChild(b, 1001)
                }
            } else
                a.chooseLevelLayer.createTargetBox();
            a.chooseLevelLayer.loadDecorateAnimation();
            Global.isLoadAnimate = !0;
            removeGameMaskLayer("loadUIMask")
        };
        !1 == Global.isLoadAnimate ? (loadUIFun([fightRes.fightanimatelist3_plist, fightRes.fightanimatelist3_png, fightRes.fightanimatelist4_plist, fightRes.fightanimatelist4_png], b),
        setTimeout(function() {
            !1 == Global.isLoadAnimate && createGameMaskLayer("loadUIMask")
        }, 700)) : (!0 == a.chooseLevelLayer.isCanSign() ? !0 == isOpenSigh ? (isOpenSigh = !1,
        b = new SignInLayer(a.chooseLevelLayer.createTargetBox.bind(a.chooseLevelLayer)),
        createMaskLayer(b),
        a.chooseLevelLayer.addChild(b, 1001)) : a.chooseLevelLayer.createTargetBox() : a.chooseLevelLayer.createTargetBox(),
        a.chooseLevelLayer.loadDecorateAnimation())
    },
    chooseLevelLayerEffect: function(a) {
        null != this.chooseLevelLayer && !1 == this.isPlayBgSound && (this.isPlayBgSound = !0,
        engine.gameSound.playMusic(soundRes.sound_choose_bg, !0))
    }
});
var GameFightScene = MainScene.extend({
    gameLogicLayer: null,
    ctor: function() {
        this._super();
        this.sceneName = "GameFightScene";
        this.gameLogicLayer = null
    },
    onEnter: function() {
        this._super();
        this.gameLogicLayer = new GameLogicLayer;
        this.addChild(this.gameLogicLayer);
        this.initialize()
    }
});
var starConfig = [{
    id: 1,
    name: "starsplash1",
    pos1: {
        x: 360,
        y: 940
    },
    pos2: {
        x: 180,
        y: 1070
    }
}, {
    id: 2,
    name: "starsplash2",
    pos1: {
        x: 360,
        y: 940
    },
    pos2: {
        x: 360,
        y: 1110
    }
}, {
    id: 3,
    name: "starsplash3",
    pos1: {
        x: 360,
        y: 940
    },
    pos2: {
        x: 540,
        y: 1070
    }
}]
  , rankInFrined = -1
  , rankinGoble = !1
  , WinLayer = cc.Layer.extend({
    starNum: 1,
    lv: 1,
    score: 0,
    rewardGold: 0,
    rewards: [],
    hasUpRank: !1,
    data: null,
    lightAction: null,
    rankNodeArr: null,
    excessiveHeight: null,
    beforeStars: null,
    selectSp: null,
    addShareGem: null,
    isCanClick: null,
    ctor: function(a, b, c) {
        this._super();
        this.starNum = a || 0;
        this.lv = b || 111;
        this.score = c || 222;
        this.rewardGold = 0;
        this.rewards = [5, 10, 20, 20];
        this.hasUpRank = !1;
        this.data = [];
        this.lightAction = null;
        this.rankNodeArr = [];
        this.excessiveHeight = 310;
        this.selectSp = null;
        this.addShareGem = 0;
        this.isCanClick = !0
    },
    onEnter: function() {
        this._super();
        this.beforeStars = gameUserData.levelStar[this.lv - 1];
        this.recordStarNum();
        this.recordPassLv();
        if (this.getStarsNum() > gameUserData.stars) {
            gameUserData.stars = this.getStarsNum();
            gameSDK.saveUserData(getSaveFBData(), null);
            var a = {};
            a.totalScore = gameUserData.totalScore;
            a.maxstar = gameUserData.stars;
            a.level = gameUserData.lv;
            cc.log("结束界面保存：", a);
            gameSDK.setScoreAsync(FB_LEVEL_RANK_KEY, gameUserData.stars, a, function(a) {
                gameSDK.setEntriesLeaderboardData(FB_LEVEL_RANK_KEY, null);
                gameSDK.getEntriesAsync(FB_LEVEL_RANK_KEY, [{
                    count: 20,
                    beginNum: 0
                }], []);
                isFriendInfoReturn = !1;
                gameSDK.setPlayerEntriesboardLeaderboardData(FB_LEVEL_RANK_KEY, null);
                gameSDK.getConnectedPlayerEntriesAsync(FB_LEVEL_RANK_KEY, Global.rankMaxNumber, 0)
            })
        }
        this.initUI();
        Global.winNum += 1;
        gameUserData.power += 1;
        !0 == this.hasUpRank ? this.createUpLayer(2) : this.addAction();
        engine.gameSound.playEffect(soundRes.sound_win);
        null == selfJsonData && (selfJsonData = {
            boxget: 0,
            dianzan: 0,
            free_count: 0
        },
        selfJsonData.gold = gameUserData.gold,
        selfJsonData.grade = 0,
        selfJsonData.honor = 0,
        selfJsonData.honor_free_box = 0,
        selfJsonData.honor_invite_type = 0,
        selfJsonData.honor_reward_index = 0,
        selfJsonData.hurt = 0,
        selfJsonData.hurt_gift_package = [0, 0, 0, 0, 0, 0, 0],
        selfJsonData.invite_ids = [],
        selfJsonData.is_today_first_login = 0,
        selfJsonData.last_hurt = 0,
        selfJsonData.level = 1,
        selfJsonData.logintime = 0,
        selfJsonData.maxStars = gameUserData.stars,
        selfJsonData.pay_count = 0,
        selfJsonData.power = gameUserData.power,
        selfJsonData.star = gameUserData.levelStar,
        selfJsonData.tagetlvl = 15,
        selfJsonData.today_init_lv = 1,
        selfJsonData.week_gift = 0,
        selfJsonData.week_gift_reveived = 0,
        selfJsonData.week_invite_num = 0,
        selfJsonData.week_refresh = gameUserData.week_refresh,
        selfJsonData.week_share_num = 0);
        1 == gameUserData.lv && gameSDK.createShortcut();
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    getStarsNum: function() {
        for (var a = 0, b = 0; b < gameUserData.levelStar.length; ++b) {
            var c = 0;
            "number" === typeof gameUserData.levelStar[b] && !1 == isNaN(gameUserData.levelStar[b]) && (c = gameUserData.levelStar[b]);
            a += c
        }
        return a
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        var a = new cc.Layer
          , b = new cc.DrawNode;
        b.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        a.addChild(b);
        this.addChild(a, -1);
        engine.gameEvent.createMouseDown(a, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
        a = 0;
        a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        DataMgr.getLevelData(this.lv);
        this.gradeUIAni = createGameAnimation(fightRes.res_resultui_json, "gradeui", 30);
        this.gradeUIAni.x = a - uiOfferX;
        this.gradeUIAni.y = 940;
        this.gradeUIAni.playFrameIndex = 1;
        this.gradeUIAni.playCount = 1;
        this.addChild(this.gradeUIAni);
        var b = this.gradeUIAni.getBitmapByUrlName("png4.png")
          , c = new cc.Sprite("#result/level.png");
        b.addChild(c);
        c.x = 80;
        c.y = 32;
        var d = new GameArtWord("fnttype39");
        d.alignmentType = artWordLeft;
        d.setString(this.lv.toString());
        d.x = 20 + c.x + c.getContentSize().width / 2;
        d.y = 32;
        b.addChild(d);
        b = this.gradeUIAni.getBitmapByUrlName("png1.png");
        d = new cc.Sprite("#rank/total.png");
        b.addChild(d);
        d.y = 20;
        d.x = d.getContentSize().width / 2 - 20;
        c = new GameArtWord("fnttype31");
        c.alignmentType = artWordMiddle;
        c.x = d.x;
        c.y = 20;
        d = this.getStarsNum();
        c.setString(d.toString());
        b.addChild(c);
        this.gradeUIAni.getBitmapByUrlName("png3.png");
        this.getDiamond();
        b = createGameAnimation(fightRes.res_resultui_json, "getdiamondmc", 30);
        this.addChild(b);
        b.x = a - uiOfferX;
        b.y = 540;
        b = b.getBitmapByUrlName("png20.png");
        a = new cc.Sprite("#game/diamondbg.png");
        b.addChild(a);
        a.x = b.getContentSize().width / 2;
        a.y = b.getContentSize().height / 2 + 30;
        b = new GameArtWord("fnttype46");
        b.alignmentType = artWordMiddle;
        b.setString("x" + this.rewardGold);
        b.x = a.getContentSize().width / 2 + 2;
        b.y = a.getContentSize().height / 2 + 4;
        a.addChild(b);
        gameUserData.totalScore += this.score
    },
    checkRankStar: function() {
        rankInFrined = -1;
        rankinGoble = !1;
        for (var a = 0, b = 0; b < friendList.length; b++)
            !1 == friendList[b].beRanked && gameUserData.lv > friendList[b].level && (friendList[b].beRanked = !0,
            rankInFrined = friendList[b].playerid,
            a += friendList[b].getHonor,
            this.hasUpRank = !0);
        for (b = 0; b < Global.targetPeople.length; b++)
            !1 == Global.targetPeople[b].beRanked && gameUserData.lv > Global.targetPeople[b].level && (Global.targetPeople[b].beRanked = !0,
            rankInFrined = Global.targetPeople[b].playerid,
            a += Global.targetPeople[b].getHonor,
            this.hasUpRank = rankinGoble = !0);
        0 < a && (Global.addHonorNum = a,
        addHonorFun(a))
    },
    recordStarNum: function() {
        var a = 0;
        gameUserData.levelStar[this.lv - 1] ? (a = Math.max(gameUserData.levelStar[this.lv - 1], this.starNum),
        gameUserData.levelStar[this.lv - 1] > this.starNum && (Global.isAddStar = 1)) : a = this.starNum;
        gameUserData.levelStar[this.lv - 1] = a
    },
    recordPassLv: function() {
        gameUserData.lv = gameUserData.lv > this.lv ? gameUserData.lv : this.lv;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    getDiamond: function() {
        var a = 0;
        1 <= this.beforeStars && (a = this.rewards[this.beforeStars - 1]);
        1 <= this.starNum && (this.rewardGold = this.rewards[this.starNum - 1] - a);
        0 > this.rewardGold && (this.rewardGold = 0);
        gameUserData.lv >= this.lv && 1 <= this.starNum && 0 == this.rewardGold && (this.rewardGold = 5);
        gameUserData.gold += this.rewardGold
    },
    getCurrentLanguage: function() {
        switch (cc.sys.language) {
        case cc.sys.LANGUAGE_SPANISH:
            return "es";
        case cc.sys.LANGUAGE_PORTUGUESE:
            return "pt";
        default:
            return "en"
        }
    },
    getPercentNum: function(a) {
        return (100 >= a ? (5 * a + 100) / 8 : (0.5 * a + 550) / 8).toFixed(1)
    },
    addAction: function() {
        var a = this;
        !0 == this.hasUpRank ? a.addOtherAction() : setTimeout(function() {
            a.addOtherAction()
        }, 148)
    },
    addOtherAction: function() {
        this.allStarAction();
        var a = new cc.Sprite("#public/publicbtn31.png");
        a.x = 215;
        a.y = 170;
        this.addChild(a, 2);
        engine.gameEvent.createMouseUp(a, this.onReplay.bind(this), buttonScalingType);
        var b = new cc.Sprite("#result/replay.png");
        b.setScale(0.9);
        b.x = 135;
        b.y = 41;
        a.addChild(b);
        b = new cc.Sprite("#public/publicbtn32.png");
        b.x = 505;
        b.y = a.y;
        this.addChild(b, 2);
        engine.gameEvent.createMouseUp(b, this.onGo.bind(this), buttonScalingType);
        var c = new cc.Sprite("#result/continue.png");
        c.setScale(0.9);
        c.x = 137;
        c.y = 45;
        b.addChild(c);
        3 <= Global.resultShareCount && (Global.isResultShare = !1,
        Global.resultShareCount = 0,
        Global.isWinSelect = !0);
        if (!1 == Global.isResultShare) {
            c = new cc.Sprite("#result/selectbg.png");
            c.x = 200;
            c.y = 280;
            this.selectSp = new cc.Sprite("#result/select.png");
            this.addChild(this.selectSp, 2);
            this.selectSp.x = 200;
            this.selectSp.y = 280;
            this.selectSp.setVisible(Global.isWinSelect);
            engine.gameEvent.createMouseUp(c, this.weixinSelectShare.bind(this), buttonScalingType);
            c = new cc.Sprite("#sign/hand.png");
            c.x = 96;
            c.y = 280;
            var d = cc.moveBy(0.7, cc.p(10, 0))
              , e = cc.moveBy(0.7, cc.p(-10, 0));
            c.runAction(cc.sequence(d, e).repeatForever());
            this.addShareGem = 2 * this.rewardGold;
            c = new cc.LabelTTF(Global.resultShareDes,"jellyboom_font",30);
            c.setColor(cc.color(255, 255, 255, 255));
            c.enableStroke(cc.color(37, 133, 195), 2);
            c.x = 400;
            c.y = 276
        } else
            Global.resultShareCount++;
        c = function() {
            return cc.sequence(cc.spawn(cc.fadeIn(0.2), cc.scaleTo(0.2, 1.15)), cc.scaleTo(0.16, 0.85), cc.scaleTo(0.2, 1))
        }
        ;
        a.setCascadeOpacityEnabled(!0);
        a.setScale(0.5);
        a.setOpacity(0);
        a.runAction(c());
        b.setCascadeOpacityEnabled(!0);
        b.setScale(0.5);
        b.setOpacity(0);
        b.runAction(c())
    },
    weixinSelectShare: function() {
        Global.isWinSelect = !0 == Global.isWinSelect ? !1 : !0;
        null != this.selectSp && this.selectSp.setVisible(Global.isWinSelect)
    },
    allStarAction: function() {
        Global.isOpenMessage = !0;
        for (var a = 4 <= this.starNum ? 3 : this.starNum, b = 0; b < a; ++b) {
            var c = 12 * b / 25;
            this.scheduleOnce(function(a, b) {
                this.starAction(a, b)
            }
            .bind(this, starConfig[b], b), c)
        }
        0 == a && this.addRibbonAction()
    },
    starAction: function(a, b) {
        var c = 4 <= this.starNum ? 3 : this.starNum
          , d = this;
        engine.gameSound.playEffect(soundRes.sound_star);
        var e = createGameAnimation(fightRes.res_resultui_json, a.name, 25);
        e.playCount = 1;
        e.setPosition(a.pos1);
        e.frameFun = function(e) {
            5 == e && d.gradeUIAni.fromFrameIndexToPlayFrameIndex(0, 18);
            7 == e && d.playLitterStar(a);
            b == c - 1 && 11 == e && d.addRibbonAction()
        }
        ;
        this.addChild(e)
    },
    playLitterStar: function(a) {
        var b = createGameAnimation(fightRes.res_result_json, "stardivergency", 25);
        b.playCount = 1;
        b.setPosition(a.pos2);
        b.isRemoveFromComplete = !0;
        this.addChild(b, -1)
    },
    addRibbonAction: function() {
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = createGameAnimation(fightRes.res_resultui_json, "ribbonui", 25);
        b.playCount = 1;
        b.setPosition(a - uiOfferX, this.gradeUIAni.y);
        b.isRemoveFromComplete = !1;
        this.addChild(b, -1)
    },
    createUpLayer: function(a) {
        cc.log("createUpLayer   ===========================");
        var b = new UpRankLayer(rankInFrined);
        b.openType = a;
        createMaskLayer(b);
        this.addChild(b, 101)
    },
    onHome: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        Global.isNextLevel = !1;
        transitions(ChooseScene, [], LoadScene)
    },
    onReplay: function() {
        !1 != this.isCanClick && (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        7 <= Global.winNum && (Global.winNum = 0,
        this.showInterAd()),
        this.removeFromParent(),
        transitions(GameFightScene, [], LoadScene, function() {}))
    },
    onGo: function() {
        if (!1 != this.isCanClick) {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            Global.isNextLevel = !0;
            var a = this;
            7 <= Global.winNum && (Global.winNum = 0,
            this.showInterAd());
            if (!0 == Global.isWinSelect) {
                var b = {};
                b.pngData = [{
                    url: "res/invbg.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 380
                }, {
                    url: selfData.myurl,
                    posX: 213,
                    posY: 55,
                    imgWidth: 162,
                    imgHeight: 162
                }, {
                    url: "res/invicon.png",
                    posX: 171,
                    posY: 14,
                    imgWidth: 235,
                    imgHeight: 235
                }];
                b.fontData = [{
                    des: "" + gameUserData.stars,
                    posX: 290,
                    posY: 300,
                    font: "40px Microsoft YaHei",
                    lineWidth: 2,
                    fillStyle: "rgb(249,227,113)",
                    textAlign: "center",
                    strokeStyle: "#000000"
                }];
                b.width = 750;
                b.height = 380;
                gameSDK.sendFaceBookFriend(function() {
                    Global.isResultShare = !0;
                    Global.isWinSelect = !1;
                    gameUserData.gold += a.addShareGem;
                    transitions(ChooseScene, [], LoadScene)
                }, b)
            } else
                transitions(ChooseScene, [], LoadScene)
        }
    },
    showInterAd: function() {},
    onShare: function() {
        this.hasUpRank || (cc.log("on share !!!"),
        Utils.sendShareUploadImage())
    },
    onAddFriend: function() {
        var a = {};
        a.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        a.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        a.width = 750;
        a.height = 380;
        gameSDK.sendFaceBookFriend(null, a)
    }
})
  , LoseLayerSelf = null
  , LoseLayer = cc.Layer.extend({
    mainUI: null,
    lv: 0,
    score: 0,
    data: null,
    myRank: 1,
    ctor: function(a) {
        this._super();
        this.lv = a;
        this.initRankData()
    },
    onEnter: function() {
        this._super();
        LoseLayerSelf = this;
        this.initUI();
        engine.gameSound.playEffect(soundRes.sound_lose);
        EventMgr.emit(EVENTMGR_ID.MONSTER_F);
        var a = {};
        a.playerid = selfData.mypid;
        a.prj = "jellyboom";
        a.type = 1002;
        a.info = {
            level: this.lv
        };
        this.uiOpenAction()
    },
    onExit: function() {
        this._super();
        LoseLayerSelf = null
    },
    showAds: function() {
        if (Global.lastLoseLv === Global.chooseLv) {
            if (Global.loseNum += 1,
            0 === Global.loseNum % 3) {
                var a = new GiftNode(3)
                  , b = createMaskLayer(a);
                b.x = -360;
                b.y = -640;
                a.x = 360;
                a.y = 640;
                this.getParent().addChild(a, 100001)
            }
        } else
            Global.lastLoseLv = Global.chooseLv,
            Global.loseNum = 1
    },
    initRankData: function() {
        this.data = rankJsonData;
        this.myRank = null != this.data ? this.data.rank : 1
    },
    initUI: function() {
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = DataMgr.getLevelData(this.lv)
          , b = new cc.Sprite("res/game/playbg/resultbottom" + b.topcustombg + ".png");
        b.setAnchorPoint(0.5, 0);
        b.x = a - uiOfferX;
        this.addChild(b);
        b = new cc.Sprite("res/game/playbg/resultbg.jpg");
        b.setAnchorPoint(0.5, 0);
        b.x = a - uiOfferX;
        b.setScale(2);
        this.addChild(b);
        b = new cc.Sprite("res/game/playbg/cloud.png");
        b.x = a - uiOfferX;
        b.setScale(2);
        this.addChild(b);
        this.mainUI = ParseUIJson.parseJsonToUI(fightRes.res_lose_layer_json);
        this.addChild(this.mainUI);
        gameSDK.saveUserData(getSaveFBData(), null);
        this.initText();
        engine.gameEvent.createMouseUp(this.mainUI.btnHome, this.onHome.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnReplay, this.onReplay.bind(this), buttonScalingType);
        this.mainUI.get_power_tips.setVisible(!1)
    },
    refreshInfiniteTips: function() {
        this.mainUI.get_power_tips.setVisible(!1)
    },
    loseAction: function() {
        var a;
        null != cc.loader.getRes("res/pngdata/monster1/monster1.json") ? (a = createGameAnimation("res/pngdata/monster1/monster1.json", "monster_f", 31),
        a.setScale(1.5)) : a = new cc.Sprite("#game/loseannimal.png");
        a.setPosition(cc.p(355, 670));
        this.addChild(a, 1)
    },
    initText: function() {
        null != gameSDK.sdkPlayInfo.rank ? this.mainUI.aw_fnttype41_rankText.setString(gameSDK.sdkPlayInfo.rank) : this.mainUI.aw_fnttype41_rankText.setString("" + this.myRank)
    },
    getStarsNum: function() {
        for (var a = 0, b = 0; b < gameUserData.levelStar.length; ++b) {
            var c = 0;
            "number" === typeof gameUserData.levelStar[b] && (c = gameUserData.levelStar[b]);
            a += c
        }
        return a || 0
    },
    onHome: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        transitions(ChooseScene, [], LoadScene)
    },
    createInviteDialog: function() {
        var a = new NoHeartNode(2)
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.getParent().addChild(a, 1001);
        this.removeFromParent()
    },
    onReplay: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        if (!Global.isInfinite) {
            if (0 >= gameUserData.power) {
                0 < gameUserData.limitPowerCount ? this.createInviteDialog() : EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.getPowerDes);
                return
            }
            gameUserData.power -= 1;
            gameUserData.usePowerNum += 1;
            HttpFun.uploadSelfInfo()
        }
        gameSDK.saveUserData(getSaveFBData(), null);
        this.removeFromParent();
        EventMgr.emit(EVENTMGR_ID.REPLAY);
        if (typeof gdsdk !== 'undefined' && gdsdk.showBanner !== 'undefined') {
            gdsdk.showBanner()
        }
    },
    uiOpenAction: function() {
        this.mainUI.setScale(0.12);
        var a = cc.scaleTo(5 / 28, 1.13, 1.13)
          , b = cc.scaleTo(0.25, 0.95, 0.95)
          , c = cc.scaleTo(8 / 28, 1, 1)
          , d = cc.delayTime(0)
          , e = this
          , f = cc.callFunc(function() {}, this);
        this.mainUI.runAction(cc.sequence(a, b, c, d, f));
        a = cc.callFunc(function() {
            e.loseAction()
        }, this);
        this.runAction(cc.sequence(cc.delayTime(15 / 28), a));
        b = [this.mainUI.ranklist, this.mainUI.aw_fnttype41_rankText, this.mainUI.ranklistbg];
        for (a = 0; a < b.length; a++) {
            b[a].setOpacity(0);
            b[a].setScale(0.88, 0.88);
            var c = cc.delayTime(3 / 28)
              , d = cc.scaleTo(4 / 28, 1.09, 1.09)
              , f = cc.fadeIn(4 / 28)
              , g = cc.scaleTo(6 / 28, 0.9, 0.9)
              , h = cc.scaleTo(10 / 28, 1, 1);
            b[a].runAction(cc.sequence(c, cc.spawn(d, f), g, h))
        }
        b = [this.mainUI.btnHome, this.mainUI.btnReplay];
        for (a = 0; a < b.length; a++)
            b[a].setOpacity(0),
            b[a].setScale(0.66),
            b[a].setCascadeOpacityEnabled(!0),
            c = cc.delayTime(5 / 28),
            d = cc.scaleTo(0.25, 1.045, 1.045),
            f = cc.fadeIn(0.25),
            g = cc.scaleTo(8 / 28, 0.95, 0.95),
            h = cc.scaleTo(8 / 28, 1, 1),
            b[a].runAction(cc.sequence(c, cc.spawn(d, f), g, h))
    }
})
  , PauseLayer = cc.Layer.extend({
    mainUI: null,
    lv: 1,
    isPowerTips: !1,
    ctor: function(a) {
        this._super();
        this.lv = a || 1;
        this.isPowerTips = !1
    },
    onEnter: function() {
        this._super();
        this.initUI();
        cc.director.pause()
    },
    initUI: function() {
        this.mainUI = loadCSS(res.res_pause_layer_json);
        this.addChild(this.mainUI);
        this.initSlider();
        engine.gameEvent.createMouseUp(this.mainUI.btnHome, this.onHome.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnReplay, this.onReplay.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        this.mainUI.bg1.realScale = 0.7;
        this.mainUI.bg2.realScale = 0.7;
        engine.gameEvent.createMouseUp(this.mainUI.bg1, this.onMusic.bind(this), buttonScalingType, cc.rect(-30, -20, 200, 70));
        engine.gameEvent.createMouseUp(this.mainUI.bg2, this.onEffect.bind(this), buttonScalingType, cc.rect(-30, -20, 200, 70));
        this.mainUI.slider_audic.setTouchEnabled(!1);
        this.mainUI.slider_music.setTouchEnabled(!1)
    },
    onMusic: function(a, b) {
        0 < this.mainUI.slider_music.getPercent() ? this.setSoundVolume(this.mainUI.slider_music.getTag(), 0) : this.setSoundVolume(this.mainUI.slider_music.getTag(), 100)
    },
    onEffect: function() {
        0 < this.mainUI.slider_audic.getPercent() ? this.setSoundVolume(this.mainUI.slider_audic.getTag(), 0) : this.setSoundVolume(this.mainUI.slider_audic.getTag(), 100)
    },
    initSlider: function() {
        this.mainUI.slider_audic.setPercent(gameUserData.effectVolume);
        this.mainUI.slider_music.setPercent(gameUserData.musicVolume);
        this.initSoundVolume()
    },
    sliderEvent: function(a, b) {
        switch (b) {
        case ccui.Slider.EVENT_PERCENT_CHANGED:
            var c = a.getPercent();
            this.setSoundVolume(a.getTag(), c.toFixed(0))
        }
    },
    initSoundVolume: function() {
        SoundMgr.setMusicVolume(gameUserData.musicVolume);
        SoundMgr.setEffectVolume(gameUserData.effectVolume)
    },
    setSoundVolume: function(a, b) {
        switch (a) {
        case 1:
            gameUserData.musicVolume = 50 < b ? 100 : 0;
            SoundMgr.setMusicVolume(b);
            break;
        case 2:
            gameUserData.effectVolume = 50 < b ? 100 : 0;
            SoundMgr.setEffectVolume(b);
            break;
        default:
            cc.log("out of tag !!!")
        }
        cc.log("tag = " + a + "  volume = " + b);
        this.initSlider();
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    onHome: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        cc.director.isPaused() && cc.director.resume();
        transitions(ChooseScene, [], LoadScene)
    },
    onReplay: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        cc.director.isPaused() && cc.director.resume();
        if (1 != Global.gameType)
            this.removeFromParent(),
            Global.isOpenWeekLayer = !0,
            engine.gameSound.playEffect(soundRes.sound_normal_touch),
            transitions(ChooseScene, [], LoadScene);
        else {
            if (!Global.isInfinite) {
                if (0 >= gameUserData.power) {
                    0 < gameUserData.limitPowerCount ? this.createInviteDialog() : EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.getPowerDes);
                    return
                }
                gameUserData.power -= 1;
                gameUserData.usePowerNum += 1;
                HttpFun.uploadSelfInfo()
            }
            gameSDK.saveUserData(getSaveFBData(), null);
            this.removeFromParent();
            EventMgr.emit(EVENTMGR_ID.REPLAY)
        }
        if (typeof gdsdk !== 'undefined' && gdsdk.showBanner !== 'undefined') {
            gdsdk.showBanner()
        }
    },
    createInviteDialog: function() {
        var a = new NoHeartNode(0)
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.getParent().addChild(a, 1001);
        this.removeFromParent()
    },
    showInterAd: function() {},
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.removeFromParent();
        cc.director.isPaused() && cc.director.resume();
        gameSDK.saveUserData(getSaveFBData(), null)
    }
})
  , TipsNode = cc.Node.extend({
    mainUI: null,
    text: null,
    ctor: function(a) {
        this._super();
        this.text = a || ""
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        var a = ParseUIJson.parseJsonToUI(res.res_tips_node_json);
        this.addChild(a);
        a.x -= uiOfferX;
        this.mainUI = a;
        this.mainUI.setOpacity(0);
        this.mainUI.setCascadeOpacityEnabled(!0);
        this.refreshText(this.text)
    },
    refreshText: function(a) {
        this.mainUI.text.setString(a)
    },
    inAction: function(a) {
        this.mainUI.stopAllActions();
        var b = 0.01;
        1 == a && (b = 0.5);
        this.mainUI.runAction(cc.sequence(cc.delayTime(b), cc.fadeIn(0.4), cc.delayTime(1.5), cc.fadeOut(0.4)))
    }
})
  , RewardNode = cc.Node.extend({
    id: 1,
    num: 1,
    mainUI: null,
    type: null,
    ctor: function(a, b, c) {
        this._super();
        this.id = a || 1;
        this.num = b || 1;
        this.type = c || 1
    },
    onEnter: function() {
        this._super();
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_reward_node_json);
        this.addChild(this.mainUI);
        this.mainUI.x -= uiOfferX;
        this.mainUI.text = new cc.LabelTTF("","jellyboom_font",35);
        this.mainUI.addChild(this.mainUI.text);
        this.mainUI.text.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.text.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.x = 0;
        this.mainUI.text.y = -130;
        this.refreshUI();
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        inSceneByScale(this)
    },
    onExit: function() {
        this._super()
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        2010 === this.id && EventMgr.emit(EVENTMGR_ID.ADD_STEP);
        1 == this.type ? this.removeFromParent() : transitions(ChooseScene, [], LoadScene)
    },
    refreshUI: function() {
        var a = Utils.getDataByID(Global.elements, this.id)
          , b = a.icon + "_big";
        2010 === this.id ? Utils.changeTexture(this.mainUI.icon, a.icon) : Utils.changeTexture(this.mainUI.icon, "element/" + b + ".png");
        2008 === this.id ? (this.mainUI.text.setVisible(!1),
        this.mainUI.icon.setScale(1)) : 2010 === this.id ? (this.mainUI.text.setVisible(!0),
        this.mainUI.icon.setScale(1)) : (this.mainUI.icon.setScale(1),
        this.mainUI.text.setVisible(!0));
        cc.log(Global.language);
        this.mainUI.text.setString(a[Global.language] + " x " + this.num)
    }
})
  , ResurgenceLayer = cc.Layer.extend({
    mainUI: null,
    lv: null,
    relivePrice: null,
    ctor: function(a) {
        this._super();
        this.lv = a
    },
    onEnter: function() {
        this._super();
        Global.resurgenceTime += 1;
        engine.gameSound.playEffect(soundRes.sound_resurgence);
        var a = {};
        a.playerid = selfData.mypid;
        a.prj = "jellyboom";
        a.type = 1003;
        a.info = {
            level: this.lv
        };
        this.initUI();
        this.initListener()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(fightRes.res_resurgence_json);
        this.addChild(this.mainUI);
        this.relivePrice = 200 + parseInt(this.lv);
        this.mainUI.gembtn.aw_fnttype45_price.setString(this.relivePrice + "");
        this.mainUI.aw_fnttype27_goldText.setString(gameUserData.gold + "");
        addReliveDic(this.lv);
        this.mainUI.text = new cc.LabelTTF("","jellyboom_font",24);
        this.mainUI.text.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.text.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.x = 360;
        this.mainUI.text.y = 555;
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.gembtn, this.onGemBtn.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnWatch, this.onOK.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btninvite, this.onInvite.bind(this), buttonScalingType);
        !0 == checkShareOrWatchByCount() ? (this.mainUI.btnWatch.setVisible(!0),
        this.mainUI.btninvite.setVisible(!1)) : (this.mainUI.btnWatch.setVisible(!1),
        this.mainUI.btninvite.setVisible(!0));
        1 != gameUserData.isBuyReliveAD && 1 != gameUserData.isAllAD || this.mainUI.btnWatch.btndes.setSpriteFrame("game/collect.png")
    },
    initListener: function() {},
    onGemBtn: function() {
        if (gameUserData.gold >= this.relivePrice)
            gameUserData.gold -= this.relivePrice,
            EventMgr.emit(EVENTMGR_ID.ADD_STEP),
            this.removeFromParent(),
            gameSDK.saveUserData(getSaveFBData(), null),
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
        else if (!1 == gameSDK.isCanPay())
            this.not_enough ? this.not_enough.inAction() : (this.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.addChild(this.not_enough, 1001));
        else {
            var a = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var b = new FacebookPaymentShopLayer;
                createMaskLayer(b);
                a.addChild(b, 10);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    onInvite: function() {
        var a = this
          , b = {};
        b.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        b.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        b.width = 750;
        b.height = 380;
        gameSDK.sendFaceBookFriend(function() {
            add_watchAD_share_count_Fun();
            EventMgr.emit(EVENTMGR_ID.ADD_STEP);
            a.removeFromParent()
        }, b)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.removeFromParent();
        EventMgr.emit(EVENTMGR_ID.FAILED)
    },
    onOK: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        1 == gameUserData.isBuyReliveAD || 1 == gameUserData.isAllAD ? (gameUserData.resugenceAdsNum -= 1,
        EventMgr.emit(EVENTMGR_ID.ADD_STEP),
        this.removeFromParent(),
        gameSDK.saveUserData(getSaveFBData(), null)) : this.showRewardAd()
    },
    showRewardAd: function() {
        if (isNotFbGame)
            add_watchAD_share_count_Fun(),
            Global.isWatchAD = !0,
            gameUserData.resugenceAdsNum -= 1,
            EventMgr.emit(EVENTMGR_ID.ADD_STEP),
            this.removeFromParent(),
            gameSDK.saveUserData(getSaveFBData(), null);
        else if (!isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var a = null
              , b = this;
            FBInstant.getRewardedVideoAsync(rewardedVideoID1).then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                add_watchAD_share_count_Fun();
                Global.isWatchAD = !0;
                gameUserData.resugenceAdsNum -= 1;
                EventMgr.emit(EVENTMGR_ID.ADD_STEP);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                b.removeFromParent();
                gameSDK.saveUserData(getSaveFBData(), null)
            }).catch(function(a) {
                isAdLoading = !1;
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                console.log(a)
            })
        }
    },
    rewardFailToInter: function() {
        if (!isNotFbGame) {
            var a = null
              , b = this;
            FBInstant.getInterstitialAdAsync("1219338561447280_1625271370853995").then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                gameUserData.resugenceAdsNum -= 1;
                EventMgr.emit(EVENTMGR_ID.ADD_STEP);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                b.removeFromParent();
                gameSDK.saveUserData(getSaveFBData(), null)
            }).catch(function(a) {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.FAILED);
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                console.log(a)
            })
        }
    }
})
  , GoldDialogNode = cc.Node.extend({
    mPos: null,
    mUi: null,
    type: 0,
    ctor: function(a) {
        this._super();
        this.pos = a || {
            x: 0,
            y: 0
        }
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        this.mUi = new cc.Sprite("#game/not_enough.png");
        this.mUi.setScale(2);
        this.mUi.setPosition(this.pos);
        this.mUi.setCascadeOpacityEnabled(!0);
        this.addChild(this.mUi);
        engine.gameEvent.createMouseUp(this.mUi, this.onTouch.bind(this));
        this.outAction(1)
    },
    inAction: function() {
        this.mUi.stopAllActions();
        this.mUi.setOpacity(255);
        this.mUi.setVisible(!0);
        this.outAction(1)
    },
    outAction: function(a) {
        this.mUi.stopAllActions();
        this.mUi.runAction(cc.sequence(cc.delayTime(a), cc.fadeOut(0.5), cc.callFunc(function() {
            this.mUi.setVisible(!1)
        }
        .bind(this))))
    },
    onTouch: function() {
        this.outAction(0)
    }
})
  , gift_node = cc.Node.extend({
    mainUI: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_daily_share_node);
        this.mainUI.x = 360;
        this.mainUI.y = 640;
        this.addChild(this.mainUI);
        this.mainUI.text = new cc.LabelTTF("" + Global.shareDes,"jellyboom_font",28);
        this.mainUI.addChild(this.mainUI.text);
        this.mainUI.text.setFontFillColor(cc.color(49, 81, 180));
        this.mainUI.text.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.enableStroke(cc.color(255, 255, 255), 2);
        this.mainUI.text.x = 0;
        this.mainUI.text.y = -135;
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnShare, this.onShare.bind(this), buttonScalingType);
        1 === gameUserData.isDailyGift ? this.mainUI.btnShare.setVisible(!0) : this.mainUI.btnShare.setVisible(!1)
    },
    onClose: function() {
        this.removeFromParent()
    },
    onShare: function() {
        this.onClose();
        Utils.sendShareUploadImage()
    }
})
  , TipsAdsNode = cc.Node.extend({
    mainUI: null,
    text: null,
    ctor: function(a) {
        this._super();
        this.text = a || ""
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_ads_node);
        this.addChild(this.mainUI);
        this.mainUI.text.setString(this.text);
        engine.gameEvent.createMouseUp(this.mainUI.btnOk, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType)
    },
    onClose: function() {
        this.removeFromParent()
    }
});
var gTestData = {
    rank: 55,
    list: [{
        name: "seldsfasdffsadfdsfsadfdfdff",
        rank: 1,
        score: 55666655,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 12345678,
        score: 666,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 556655,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 55,
        score: 666,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 5555,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 5555,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 666,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 5555,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 66,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 556655,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 6,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 6,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 6,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 6,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "self",
        rank: 1,
        score: 666666,
        starNum: 100,
        img: "#others/head1.png"
    }, {
        name: "other",
        rank: 1,
        score: 556666655,
        starNum: 80,
        img: "#others/head1.png"
    }]
}
  , fTestData = {
    rank: 55,
    list: [{
        name: "self",
        rank: 1,
        support: 3,
        starNum: 10,
        img: "#result/star.png"
    }, {
        name: "other",
        rank: 1,
        support: 4,
        starNum: 80,
        img: "#result/star.png"
    }, {
        name: "other",
        rank: 55,
        support: 444,
        starNum: 80,
        img: "#result/star.png"
    }, {
        name: "other",
        rank: 1,
        support: 4,
        starNum: 80,
        img: "#result/star.png"
    }, {
        name: "other",
        rank: 1,
        support: 4,
        starNum: 80,
        img: "#result/star.png"
    }, {
        name: "other",
        rank: 1,
        support: 4,
        starNum: 80,
        img: "#result/star.png"
    }]
}
  , inSendRankInfoNow = !1
  , RankLayer = cc.Layer.extend({
    mainUI: null,
    type: 1,
    gData: null,
    fData: null,
    data: null,
    tableView: null,
    list: null,
    upClipping: null,
    isCreateGlobalRank: null,
    loadingIcon: null,
    ctor: function() {
        this._super();
        this.initRankData();
        engine.gameLayer.createMaskLayer(this)
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.refreshUI();
        null != rankJsonData ? this.createTableView() : this.scheduleUpdate();
        this.createTipNode();
        Global.isAddStar = 0;
        EventMgr.emit(EVENTMGR_ID.REFRESH_POT)
    },
    addLoadRank: function() {
        this.loadingIcon = new cc.Sprite("#rank/circle.png");
        this.addChild(this.loadingIcon, 1E4);
        this.loadingIcon.setPosition(360, 640);
        var a = cc.rotateBy(2, 360);
        a.repeatForever();
        this.loadingIcon.runAction(a)
    },
    removeLoadRank: function() {
        null != this.loadingIcon && (this.loadingIcon.removeFromParent(),
        this.loadingIcon = null)
    },
    update: function() {
        if (null != gameSDK.getEntriesLeaderboardData(FB_LEVEL_RANK_KEY)) {
            cc.log("排行榜界面渲染排行榜---------------");
            for (var a = gameSDK.getEntriesLeaderboardData(FB_LEVEL_RANK_KEY), b = 30, c = [], d = 0; d < a.length; d++) {
                var e = a[d]
                  , f = JSON.parse(e.data)
                  , g = {};
                g.name = e.name;
                g.imageurl = e.photo;
                g.grade = f.totalScore;
                g.maxStars = f.maxstar;
                g.beRanked = !1;
                g.pid = 0;
                g.rank = e.rank;
                e.id == gameSDK.sdkPlayInfo.id && (b = e.rank);
                c.push(g)
            }
            rankJsonData = {};
            rankJsonData.rank = null != gameSDK.sdkPlayInfo.rank ? gameSDK.sdkPlayInfo.rank : b;
            rankJsonData.list = c
        }
        null != rankJsonData && !1 == this.isCreateGlobalRank && (this.isCreateGlobalRank = !0,
        this.data = this.gData = this.initGfata(),
        this.createTableView(),
        this.removeLoadRank(),
        this.unscheduleUpdate())
    },
    initRankData: function() {
        this.type = 1;
        this.tableView = this.list = null;
        this.isCreateGlobalRank = !1;
        this.loadingIcon = null;
        if (null == rankJsonData) {
            if (!1 == inSendRankInfoNow) {
                inSendRankInfoNow = !0;
                var a = []
                  , a = null != gameSDK.sdkPlayInfo.rank ? 20 >= gameSDK.sdkPlayInfo.rank ? [{
                    count: 20,
                    beginNum: 0
                }] : 22 < gameSDK.sdkPlayInfo.rank ? [{
                    count: 20,
                    beginNum: 0
                }, {
                    count: 5,
                    beginNum: gameSDK.sdkPlayInfo.rank - 2
                }] : [{
                    count: 20,
                    beginNum: 0
                }, {
                    count: 5,
                    beginNum: gameSDK.sdkPlayInfo.rank + 1
                }] : [{
                    count: 20,
                    beginNum: 0
                }];
                gameSDK.getEntriesAsync(FB_LEVEL_RANK_KEY, a, []);
                this.addLoadRank()
            }
        } else
            this.data = this.gData = this.initGfata();
        this.fData = this.initFfata()
    },
    initGfata: function() {
        var a = {};
        if (null == rankJsonData) {
            a.rank = 1;
            a.list = [];
            var b = {};
            b.pid = selfData.mypid;
            b.name = gameSDK.sdkPlayInfo.name;
            b.imageurl = gameSDK.sdkPlayInfo.photo;
            b.grade = gameUserData.totalScore;
            b.maxStars = gameUserData.stars;
            a.list.push(b)
        } else {
            b = [];
            if (rankJsonData.list)
                for (var c = rankJsonData.list.length, d = 0; d < c; d++) {
                    var e = rankJsonData.list[d]
                      , f = {};
                    f.name = e.name;
                    f.imageurl = e.imageurl;
                    f.grade = e.grade;
                    f.maxStars = e.maxStars;
                    f.pid = e.pid;
                    f.rank = e.rank;
                    b.push(f)
                }
            a.rank = rankJsonData.rank;
            a.list = b;
            a.list.sort(function(a, b) {
                return parseInt(a.rank) - parseInt(b.rank)
            })
        }
        return a
    },
    initFfata: function() {
        var a = 1
          , b = {};
        b.name = gameSDK.sdkPlayInfo.name;
        b.img = gameSDK.sdkPlayInfo.photo;
        b.pid = selfData.mypid;
        b.rank = a;
        b.support = gameUserData.beSupportNum;
        b.starNum = gameUserData.stars;
        for (var c = [], d = {}, e = friendList.length - 1; 0 <= e; e--) {
            var f = friendList[e]
              , g = {};
            g.name = f.name;
            g.img = f.image;
            g.support = f.dianzan;
            g.starNum = f.maxstar;
            g.pid = f.pid;
            g.rank = 1;
            d[g.pid] = g;
            c.push(g)
        }
        null == d[b.pid] && c.push(b);
        c.sort(function(a, b) {
            return parseInt(b.starNum) - parseInt(a.starNum)
        });
        d = c.length;
        for (e = 0; e < d; e++)
            g = c[e],
            g.rank = e + 1,
            g.pid == b.pid && (a = g.rank);
        b = {};
        b.rank = a;
        b.list = c;
        return b
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_rank_layer_json);
        this.addChild(this.mainUI);
        var a = new cc.DrawNode;
        a.drawRect(cc.p(80, 310), cc.p(650, 960), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        this.upClipping = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
        this.mainUI.addChild(this.upClipping);
        this.tableView = new cc.Layer;
        this.upClipping.addChild(this.tableView);
        this.upClipping.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(this.upClipping, this.clickDownFun.bind(this), null, cc.rect(80, 310, 570, 650));
        engine.gameEvent.createMouseMove(this.upClipping, this.clickMoveFun.bind(this), null, cc.rect(80, 310, 570, 650));
        engine.gameEvent.createMouseUp(this.upClipping, this.clickUpFun.bind(this), null, cc.rect(80, 310, 570, 650));
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.bg, function() {});
        engine.gameEvent.createMouseUp(this.mainUI.btnInvite, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnglobal, this.onGlobal.bind(this), null);
        engine.gameEvent.createMouseUp(this.mainUI.btnfriend, this.onFriends.bind(this), null)
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        if (null == this.loadingIcon) {
            var c = a.getLocation()
              , d = this.touchY - c.y
              , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
            5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
            e = 0;
            e = 1 == this.type ? this.tableView.y : this.list.y;
            this.touchY = c.y;
            this.moveSetY(e - d)
        }
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        if (1 == this.type) {
            var b = 0;
            null != this.data.list && (b = this.data.list.length - 5);
            0 > b && (b = 0);
            a > 130 * b + 60 && (a = 130 * b + 60);
            this.tableView.y = a
        } else
            b = 0,
            null != this.data.list && (b = this.data.list.length - 5),
            0 > b && (b = 0),
            a > 130 * b + 60 && (a = 130 * b + 60),
            this.list.y = a
    },
    clickUpFun: function() {},
    refreshUI: function() {
        1 == this.type ? (this.mainUI.btnglobal.setSpriteFrame("public/publicbtn7.png"),
        this.mainUI.btnfriend.setSpriteFrame("public/publicbtn6.png"),
        this.mainUI.btnglobal.g1.setSpriteFrame("rank/g2.png"),
        this.mainUI.btnfriend.f1.setSpriteFrame("rank/f1.png"),
        this.mainUI.des.setSpriteFrame("rank/global_des.png")) : (this.mainUI.btnglobal.setSpriteFrame("public/publicbtn6.png"),
        this.mainUI.btnfriend.setSpriteFrame("public/publicbtn7.png"),
        this.mainUI.btnglobal.g1.setSpriteFrame("rank/g1.png"),
        this.mainUI.btnfriend.f1.setSpriteFrame("rank/f2.png"),
        this.mainUI.des.setSpriteFrame("rank/good_des.png"))
    },
    onClose: function() {
        this.removeFromParent()
    },
    onInvite: function() {
        cc.log("on invite !!!!");
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        var a = {};
        a.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        a.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        a.width = 750;
        a.height = 380;
        gameSDK.sendFaceBookFriend(null, a)
    },
    onGlobal: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        1 !== this.type && (this.data = this.gData,
        this.type = 1,
        this.refreshUI(),
        this.tableView.y = 0,
        this.tableView.setVisible(!0),
        this.list.setVisible(!1))
    },
    onFriends: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        null == this.loadingIcon && 2 !== this.type && (this.data = this.fData,
        this.type = 2,
        null == this.list && this.createListView(),
        this.refreshUI(),
        this.list.y = 0,
        null != this.tableView && this.tableView.setVisible(!1),
        this.list.setVisible(!0))
    },
    createListView: function() {
        this.list = new cc.Layer;
        this.upClipping.addChild(this.list);
        !1 == isFriendInfoReturn && (this.data.list = []);
        for (var a = 0; a < this.data.list.length; ++a)
            if (1 !== this.type) {
                var b = this.createFriendItem(a, this.fData.list[a]);
                b.y = 910 - 130 * a;
                b.x = 360;
                this.list.addChild(b)
            }
    },
    createTableView: function() {
        cc.log("排行榜界面渲染排行榜---------------", this.gData.list);
        for (var a = 0; a < this.gData.list.length; a++) {
            var b = this.tableCellAtIndex(a);
            b.y = 850 - 130 * (this.gData.list.length - 1) + 130 * a;
            b.x = 50;
            this.tableView.addChild(b)
        }
    },
    tableCellAtIndex: function(a) {
        if (null != this.gData && null != this.gData.list) {
            a = this.gData.list.length - parseInt(a) - 1;
            var b = null;
            if (!b) {
                var b = new cc.Sprite, c = a + 1, d, e;
                1 == c ? (d = new cc.Sprite("#rank/bg_frame2.png"),
                e = new cc.Sprite("#rank/bg_frame2.png")) : (d = new cc.Sprite("#rank/bg_frame.png"),
                e = new cc.Sprite("#rank/bg_frame.png"));
                d.setAnchorPoint(cc.p(0.5, 0.5));
                d.x = 177;
                d.y = 42;
                d.setName("bg");
                b.addChild(d, -100);
                e.setAnchorPoint(cc.p(0.5, 0.5));
                e.x = 449;
                e.y = 42;
                e.setName("bg1");
                e.setScaleX(-1);
                b.addChild(e, -100);
                20 < c && (d = this.gData.rank,
                20 > d && (d = 20),
                c = d + (c - 20));
                d = new GameArtWord("fnttype30");
                d.alignmentType = artWordMiddle;
                d.setString(this.gData.list[a].rank + "");
                d.x = 100;
                d.y = 45;
                d.setName("rankText");
                e = 89 / d.stringSize.width;
                d.setScale(1 < e ? 1 : e);
                b.addChild(d);
                e = this.gData.list[a].rank;
                1E4 < parseInt(this.gData.list[a].rank) && (e = this.gData.list[a].rank.toString().substring(0, 4),
                d.setString(e + ""));
                3 >= c && (e = new cc.Sprite("#rank/cup" + c + ".png"),
                e.x = 90,
                e.y = 55,
                e.setName("rankIcon"),
                d.setVisible(!1),
                b.addChild(e));
                d = this.gData.list[a].name;
                null == d && (d = "");
                11 < d.length && (d = d.substr(0, 10) + "...");
                d = new cc.LabelTTF(d,defaultTxt,28);
                d.setFontName("Arial Bold");
                d.setColor(cc.color(19, 85, 127, 255));
                d.setAnchorPoint(cc.p(0, 0.5));
                d.x = 250;
                d.y = 65;
                d.setDimensions(cc.size(250, 50));
                d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
                d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
                d.setName("name");
                b.addChild(d);
                d = new cc.LabelTTF("" + this.gData.list[a].grade,"jellyboom_font",26);
                d.setColor(cc.color(19, 85, 127, 255));
                d.setAnchorPoint(cc.p(0, 0.5));
                d.x = 250;
                d.y = 30;
                d.setDimensions(cc.size(250, 50));
                d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
                d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
                d.setName("scoreText");
                b.addChild(d);
                c = new cc.Sprite(1 >= c ? "#public/n_headbg1.png" : "#public/n_headbg2.png");
                c.x = 195;
                c.y = 48;
                b.addChild(c, 10);
                var f = function(a) {
                    a = new cc.Sprite(a);
                    a.setScale(78 / a.getContentSize().width);
                    b.addChild(a);
                    a.x = 195;
                    a.y = 48;
                    return b
                };
                f(res.iconren);
                var g = new Image;
                g.crossOrigin = "anonymous";
                c = "res/iconren.png";
                isNotFbGame || "" == this.gData.list[a].imageurl || null == this.gData.list[a].imageurl || (c = this.gData.list[a].imageurl);
                "" != c ? -1 != c.indexOf("others/head") ? f("#" + c) : (g.src = c,
                g.onload = function() {
                    f(g)
                }
                ) : (g.src = c,
                g.onload = function() {
                    f(g)
                }
                );
                c = new cc.Sprite("#rank/starbg.png");
                c.x = 500;
                c.y = 47;
                b.addChild(c);
                c = new cc.Sprite("#public/n_star_s.png");
                c.x = 458;
                c.y = 44;
                b.addChild(c);
                c = new GameArtWord("fnttype2");
                c.alignmentType = artWordLeft;
                c.setString("" + this.gData.list[a].maxStars);
                c.x = 490;
                c.y = 46;
                c.setName("starNum");
                b.addChild(c)
            }
            return b
        }
    },
    createFriendItem: function(a, b) {
        function c(a) {
            a = new cc.Sprite(a);
            a.setScale(78 / a.getContentSize().width);
            a.x = e.icon_frame.x - 10;
            a.y = e.icon_frame.y;
            e.addChild(a, 1)
        }
        var d = new cc.Sprite;
        d.setCascadeOpacityEnabled(!0);
        d.setContentSize(cc.size(618, 126));
        var e = ParseUIJson.parseJsonToUI(res.res_friend_node_json);
        e.x = 309;
        e.y = 42;
        e.aw_fnttype30_rank.setString(b.rank + "");
        e.aw_fnttype2_startxt.setString(b.starNum.toString());
        e.icon_frame.setVisible(!1);
        var f = b.name;
        null == f && (f = "");
        11 < f.length && (f = f.substr(0, 10) + "...");
        f = new cc.LabelTTF(f,defaultTxt,28);
        f.setFontName("Arial Bold");
        f.setColor(cc.color(19, 85, 127, 255));
        f.setAnchorPoint(cc.p(0, 0.5));
        f.x = -50;
        f.y = 40;
        f.setDimensions(cc.size(250, 50));
        f.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        f.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        f.setName("name");
        e.addChild(f);
        3 >= b.rank && (f = new cc.Sprite("#rank/cup" + b.rank + ".png"),
        f.x = -220,
        f.y = 12,
        f.setName("rankIcon"),
        e.aw_fnttype30_rank.setVisible(!1),
        e.addChild(f, 10));
        if (null != b) {
            f = "";
            1 >= b.rank ? (Utils.changeTexture(e.bg_frame, "rank/bg_frame2.png"),
            Utils.changeTexture(e.bg_frame_0, "rank/bg_frame2.png"),
            f = "#public/n_headbg1.png") : f = "#public/n_headbg2.png";
            f = new cc.Sprite(f);
            f.x = e.icon_frame.x - 10;
            f.y = e.icon_frame.y;
            e.addChild(f, 10);
            c(res.iconren);
            var g = new Image;
            g.crossOrigin = "anonymous";
            f = "res/iconren.png";
            isNotFbGame || "" == b.img || null == b.img || (f = b.img);
            "" != f ? -1 != f.indexOf("others/head") ? c("#" + f) : (g.src = f,
            g.onload = function() {
                c(g)
            }
            ) : (g.src = f,
            g.onload = function() {
                c(g)
            }
            );
            d.addChild(e);
            f = new ccui.Button("rank/good.png","","",ccui.Widget.PLIST_TEXTURE);
            f.ignoreContentAdaptWithSize(!0);
            f.setSwallowTouches(!0);
            f.x = 180;
            f.y = 5;
            f.setTag(a);
            e.addChild(f);
            var h = new cc.Sprite("#rank/dianzan.png");
            f.addChild(h);
            h.x = 60;
            h.y = 35;
            var k = ""
              , m = 1;
            99 < b.support ? (k = "99+",
            m = 0.8) : k = getDianZan(b.pid).support + "";
            var p = new GameArtWord("fnttype26");
            p.alignmentType = artWordMiddle;
            p.x = 100;
            p.y = h.y;
            f.addChild(p);
            p.setScale(m);
            p.setString(k);
            f.text = p;
            f.addClickEventListener(function(a) {
                var b = a.getTag();
                engine.gameSound.playEffect(soundRes.sound_normal_touch);
                cc.log("tag : " + b);
                var b = this.fData.list[b]
                  , c = b.pid;
                b.id = b.pid;
                var d = getDianZan(c).support;
                if (c == selfData.mypid)
                    this.showTips(Global.noSupportSelf);
                else if (0 < gameUserData.supportNum) {
                    d += 1;
                    gameUserData.supportNum -= 1;
                    b.support = d;
                    var c = ""
                      , e = 1;
                    99 < d ? (c = "99+",
                    e = 0.8) : c = d + "";
                    a.text.setString(c);
                    a.text.setScale(e);
                    updateDianZan(b);
                    gameSDK.saveUserData(getSaveFBData(), null);
                    this.getRewards();
                    EventMgr.emit(EVENTMGR_ID.REFRESH_POT)
                } else
                    this.showTips(Global.supportTips)
            }
            .bind(this));
            return d
        }
    },
    supportFriend: function(a) {
        for (var b = friendList.length - 1; 0 <= b; b--) {
            var c = friendList[b];
            if (c.pid == a) {
                c.dianzan += 1;
                HttpFun.dianZanInfo(a);
                break
            }
        }
    },
    getRewards: function() {
        0.5 < Math.random() && (1 === Math.round(Math.random()) % 2 ? (gameUserData.power += 1,
        EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            num: 1,
            id: 2007
        }),
        EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : (gameUserData.gold += 50,
        EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            num: 50,
            id: 2006
        }),
        EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)))
    },
    createTipNode: function() {
        this.tipsNode = new TipsNode;
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        this.tipsNode.attr({
            x: a,
            y: cc.winSize.height / 2
        });
        this.addChild(this.tipsNode, 1001)
    },
    showTips: function(a) {
        this.tipsNode.refreshText(a);
        this.tipsNode.inAction()
    }
})
  , GiftNode = cc.Node.extend({
    mainUI: null,
    type: 1,
    box: null,
    ctor: function(a) {
        this._super();
        this.type = a || 0;
        this.box = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_gift_node_json);
        this.addChild(this.mainUI);
        this.mainUI.text = new cc.LabelTTF("","jellyboom_font",28);
        this.mainUI.addChild(this.mainUI.text);
        this.mainUI.text.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.text.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.x = 0;
        this.mainUI.text.y = -209;
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnWatch, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.paybtn, this.paymentFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnOk, this.onWatch.bind(this), buttonScalingType);
        this.mainUI.btnWatch.setVisible(!1);
        1 != gameUserData.isBuyOtherAD && 1 != gameUserData.isAllAD || this.mainUI.btnOk.watchtxt.setSpriteFrame("choose_map/n_collect.png");
        !1 == gameSDK.isCanPay() ? (this.mainUI.paybtn.setVisible(!1),
        this.mainUI.btnOk.setVisible(!0),
        Global.gifts = [{
            id: 2007,
            num: 2
        }, {
            id: 2006,
            num: 50
        }, {
            id: 2001,
            num: 1
        }, {
            id: 2002,
            num: 1
        }, {
            id: 2003,
            num: 1
        }],
        this.mainUI.iconsprite.setSpriteFrame("rank/imggifticon1.png"),
        this.mainUI.saleicon_1.setVisible(!1)) : (this.mainUI.paybtn.setVisible(!0),
        this.mainUI.btnOk.setVisible(!1),
        Global.gifts = [{
            id: 2007,
            num: 2
        }, {
            id: 2006,
            num: 2E3
        }, {
            id: 2001,
            num: 1
        }, {
            id: 2002,
            num: 1
        }, {
            id: 2003,
            num: 1
        }],
        this.mainUI.iconsprite.setSpriteFrame("rank/imggifticon.png"));
        inSceneByScale(this)
    },
    paymentFun: function() {
        var a = this;
        gameSDK.showPay(function(b) {
            3 != a.type && (gameUserData.gift -= 1,
            gameUserData.getNextGiftTime = getCurrencyTime() + 864E5);
            for (var c = 0; c < Global.gifts.length; ++c)
                2006 === Global.gifts[c].id ? (gameUserData.gold += Global.gifts[c].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[c].id ? (gameUserData.power += Global.gifts[c].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[c].id, Global.gifts[c].num);
            gameSDK.saveUserData(getSaveFBData(), null);
            a.giftAction();
            a.removeFromParent();
            c = {};
            c.sig = b.signedRequest;
            sendServerPaySuccess(c);
            gameSDK.saveUserData(getSaveFBData(), function() {
                gameSDK.consumeFbItem(b.purchaseToken)
            })
        }, function() {
            EventMgr.emit(EVENTMGR_ID.ADS_TIPS, Global.paymentFailDes)
        }, {
            payid: "9005",
            developerPayload: "bearboom_pay"
        })
    },
    onInvite: function() {
        var a = this
          , b = function() {
            3 != a.type && (gameUserData.gift -= 1,
            gameUserData.getNextGiftTime = getCurrencyTime() + 864E5);
            for (var b = 0; b < Global.gifts.length; ++b)
                2006 === Global.gifts[b].id ? (gameUserData.gold += Global.gifts[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[b].id ? (gameUserData.power += Global.gifts[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[b].id, Global.gifts[b].num);
            gameSDK.saveUserData(getSaveFBData(), null);
            a.giftAction();
            a.removeFromParent()
        };
        if (1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD)
            b();
        else {
            var c = {};
            c.pngData = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 213,
                posY: 55,
                imgWidth: 162,
                imgHeight: 162
            }, {
                url: "res/invicon.png",
                posX: 171,
                posY: 14,
                imgWidth: 235,
                imgHeight: 235
            }];
            c.fontData = [{
                des: "" + gameUserData.stars,
                posX: 290,
                posY: 300,
                font: "40px Microsoft YaHei",
                lineWidth: 2,
                fillStyle: "rgb(249,227,113)",
                textAlign: "center",
                strokeStyle: "#000000"
            }];
            c.width = 750;
            c.height = 380;
            gameSDK.sendFaceBookFriend(b, c)
        }
    },
    refreshUI: function() {
        3 === this.type ? this.mainUI.btnWatch.setVisible(!0) : 1 === this.type ? this.mainUI.btnWatch.setVisible(!0) : this.mainUI.btnWatch.setVisible(!1)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.removeFromParent()
    },
    onWatch: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.showRewardAd()
    },
    getReward: function() {
        3 != this.type && (gameUserData.gift -= 1,
        gameUserData.getNextGiftTime = getCurrencyTime() + 864E5);
        for (var a = 0; a < Global.gifts.length; ++a)
            2006 === Global.gifts[a].id ? (gameUserData.gold += Global.gifts[a].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[a].id ? (gameUserData.power += Global.gifts[a].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[a].id, Global.gifts[a].num);
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    showRewardAd: function() {
        var a = this
          , b = function() {
            3 != a.type && (gameUserData.gift -= 1,
            gameUserData.getNextGiftTime = getCurrencyTime() + 864E5);
            for (var b = 0; b < Global.gifts.length; ++b)
                2006 === Global.gifts[b].id ? (gameUserData.gold += Global.gifts[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[b].id ? (gameUserData.power += Global.gifts[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[b].id, Global.gifts[b].num);
            gameSDK.saveUserData(getSaveFBData(), null);
            a.giftAction();
            a.removeFromParent();
            Global.isWatchAD = !0
        };
        if (1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD)
            b();
        else if (isNotFbGame)
            b();
        else if (!isAdLoading) {
            isAdLoading = !0;
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            var c = null
              , d = this;
            FBInstant.getRewardedVideoAsync(rewardedVideoID7).then(function(a) {
                c = a;
                return c.loadAsync()
            }).then(function() {
                return c.showAsync()
            }).then(function() {
                isAdLoading = !1;
                Global.isWatchAD = !0;
                3 != d.type && (gameUserData.gift -= 1,
                gameUserData.getNextGiftTime = getCurrencyTime() + 864E5);
                for (var a = 0; a < Global.gifts.length; ++a)
                    2006 === Global.gifts[a].id ? (gameUserData.gold += Global.gifts[a].num,
                    EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[a].id ? (gameUserData.power += Global.gifts[a].num,
                    EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[a].id, Global.gifts[a].num);
                gameSDK.saveUserData(getSaveFBData(), null);
                d.giftAction();
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                d.removeFromParent()
            }).catch(function(a) {
                isAdLoading = !1;
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0)
            })
        }
    },
    giftAction: function() {
        var a = new cc.Layer
          , b = new cc.DrawNode;
        b.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
        a.addChild(b);
        var c = createGameAnimation(res.res_gift_json, "box", 24);
        c.x = 360;
        c.y = 640;
        a.addChild(c);
        this.getParent().addChild(a, 10002);
        engine.gameEvent.createMouseDown(a, function(a) {
            if (c.isVisible()) {
                c.setVisible(!1);
                var b = !1 == gameSDK.isCanPay() ? createGameAnimation(res.res_gift_json, "gift5_1", 24) : createGameAnimation(res.res_gift_json, "gift5", 24);
                b.playCount = 1;
                b.x = 360;
                b.y = 640;
                b.frameCompleteFun = function(a) {
                    a.removeFromParent()
                }
                .bind(this, a);
                a.addChild(b)
            }
        }
        .bind(this, a), null, cc.rect(0, 0, viewGameWidth, viewGameHeigh))
    }
})
  , littleData = [{
    name: "self",
    score: 123456,
    img: "#result/star.png"
}, {
    name: "other",
    score: 80,
    img: "#result/star.png"
}]
  , LittleRankNode = cc.Node.extend({
    mainUI: null,
    isOpen: !1,
    starX: 0,
    data: null,
    ctor: function(a) {
        this._super();
        this.initData(a)
    },
    initData: function(a) {
        this.isOpen = !1;
        this.starX = 0;
        var b = []
          , c = {};
        c.lv = a.level;
        c.img = a.photo;
        c.honor = a.getHonor;
        b.push(c);
        a = {};
        a.lv = gameUserData.lv;
        a.img = selfData.myurl;
        a.honor = gameUserData.honor;
        b.push(a);
        this.data = b
    },
    onEnter: function() {
        this._super();
        this.starX = this.x;
        this.initUI();
        EventMgr.register(EVENTMGR_ID.REFRESH_LITTLE_RANK, function() {
            if (this.isOpen)
                this.onTouchBg()
        }, this)
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.REFRESH_LITTLE_RANK, this)
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_little_rank_node);
        this.addChild(this.mainUI);
        this.refreshUI();
        engine.gameEvent.createMouseUp(this.mainUI.rank_bg, this.onTouchBg.bind(this))
    },
    refreshUI: function() {
        for (var a = 0; a < this.data.length; ++a)
            this.refreshItem(this.data[a], a)
    },
    refreshItem: function(a, b) {
        var c = this.mainUI.rank_bg["ranknum" + (b + 1)]
          , d = 0
          , d = 300 <= a.lv ? 300 : a.lv + 1;
        c.setString("Lv." + d);
        this.mainUI.rank_bg["honornum" + (b + 1)].setString(a.honor);
        var e = new cc.Sprite(res.iconren);
        this.addChild(e);
        e.setScale(0.16);
        e.x = -25;
        e.y = c.y - 48;
        var f = this
          , g = function(a) {
            var b = new cc.Sprite("res/iconren.png")
              , d = new cc.ClippingNode;
            d.stencil = b;
            d.setAlphaThreshold(0.05);
            d.setInverted(!1);
            d.x = -25;
            d.y = c.y - 48;
            f.addChild(d);
            d.addChild(a);
            e.setVisible(!1)
        };
        if (null != cc.spriteFrameCache.getSpriteFrame(a.img))
            d = new cc.Sprite("#" + a.img),
            d.setScale(32 / d.getContentSize().width),
            g(d);
        else {
            var h = new Image;
            h.crossOrigin = "anonymous";
            h.src = isNotFbGame ? "res/iconren.png" : a.img;
            h.onload = function() {
                var a = new cc.Sprite(h);
                a.setScale(32 / a.getContentSize().width);
                g(a)
            }
        }
    },
    onTouchBg: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.isOpen = this.isOpen ? !1 : !0;
        this.playAction()
    },
    playAction: function() {
        this.stopAllActions();
        this.isOpen ? this.runAction(cc.moveTo(0.2, cc.p(this.starX - 150, this.y))) : this.runAction(cc.moveTo(0.2, cc.p(this.starX, this.y)))
    }
});
var ENUM_SHOP_TYPE = {
    MAINOPEN: 1,
    OTHEROPEN: 2
}
  , ShopLayer = cc.Layer.extend({
    mainUI: null,
    type: null,
    diamondDatas: [],
    duringTime: 0,
    isCanTouch: !0,
    ctor: function(a) {
        this._super();
        this.type = a || ENUM_SHOP_TYPE.OTHEROPEN;
        this.diamondDatas = [];
        this.mainUI = null;
        this.duringTime = 0;
        this.isCanTouch = !0
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super();
        HttpFun.uploadSelfInfo()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_shop_layer_json);
        this.addChild(this.mainUI);
        this.mainUI.bg.setLocalZOrder(-2);
        var a = new cc.Sprite("res/shop/shopbg.png");
        this.mainUI.addChild(a);
        a.x = this.mainUI.bg.x;
        a.y = viewGameHeigh / 2 - 10;
        a.setLocalZOrder(-1);
        this.initListener();
        this.initShopUI();
        inSceneByScale(this)
    },
    initShopUI: function() {
        for (var a = 0; a < Global.shopDatas.length; ++a) {
            var b = Global.shopDatas[a]
              , c = this.mainUI["item_" + (a + 1)]
              , d = "element/" + DataMgr.getElementDataByID(b.id).uiIcon + ".png";
            Utils.changeTexture(c.icon, d);
            this.refreshItemText(c, b);
            4 < a && (b = "",
            b = 5 == a ? "1" : 6 == a ? "5" : "10",
            c.aw_fnttype1_num.setString(b))
        }
    },
    refreshItemText: function(a, b) {
        a.btnbuy.aw_fnttype4_price.setString(b.price.toString());
        a.aw_fnttype1_haveNum.setString("");
        1E3 <= b.price ? (a.btnbuy.aw_fnttype4_price.x = 44,
        a.btnbuy.diamond.x = 22) : 100 <= b.price ? (a.btnbuy.aw_fnttype4_price.x = 50,
        a.btnbuy.diamond.x = 28) : (a.btnbuy.aw_fnttype4_price.x = 59,
        a.btnbuy.diamond.x = 37)
    },
    initListener: function() {
        for (var a = 1; 8 >= a; ++a)
            engine.gameEvent.createMouseUp(this.mainUI["item_" + a].btnbuy, this.onItem.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.isCanTouch && this.removeFromParent()
    },
    buyItem: function(a) {
        var b = Global.shopDatas[a - 1];
        a = this.mainUI["item_" + a];
        if (gameUserData.gold >= b.price)
            gameUserData.gold -= b.price,
            gameUserData.spendDiamond += b.price,
            2007 === b.id ? (gameUserData.power += b.num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO),
            this.initShopUI()) : DataMgr.addItemByID(b.id, b.num),
            this.refreshItemText(a, b),
            EventMgr.emit(EVENTMGR_ID.GAME_ITEMS),
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
        else if (!1 == gameSDK.isCanPay())
            this.not_enough ? this.not_enough.inAction() : (this.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.addChild(this.not_enough, 1001));
        else {
            var c = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var a = new FacebookPaymentShopLayer;
                createMaskLayer(a);
                c.addChild(a, 10);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    onItem: function(a, b) {
        if (this.isCanTouch) {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var c = b.getCurrentTarget().getTag();
            this.openMoreNumLayer(c)
        }
    },
    openMoreNumLayer: function(a) {
        a = new ChooseNumLayer(a);
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    showShopUI: function(a) {
        for (var b = 1; 8 >= b; ++b)
            this.mainUI["item_" + b].setVisible(a)
    },
    onGet: function() {
        this.isCanTouch && (this.isCanTouch = !1,
        this.showRewardAd())
    },
    showRewardAd: function() {
        if (!isNotFbGame && !isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var a = null
              , b = this;
            FBInstant.getRewardedVideoAsync("319647368564919_329051774291145").then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                gameUserData.leftGetDiamondNum -= 1;
                gameUserData.gold += 50;
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD);
                gameSDK.saveUserData(getSaveFBData(), null);
                b.refreshGetDiamondState();
                b.isCanTouch = !0;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1)
            }).catch(function(a) {
                isAdLoading = !1;
                b.isCanTouch = !0;
                var d = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (d = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, d);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0)
            })
        }
    },
    rewardFailToInter: function() {
        if (!isNotFbGame && !isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var a = null
              , b = this;
            FBInstant.getInterstitialAdAsync("1219338561447280_1625271034187362").then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                gameUserData.leftGetDiamondNum -= 1;
                gameUserData.gold += 50;
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD);
                gameSDK.saveUserData(getSaveFBData(), null);
                b.refreshGetDiamondState();
                b.isCanTouch = !0;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1)
            }).catch(function(a) {
                isAdLoading = !1;
                b.isCanTouch = !0;
                var d = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (d = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, d);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0)
            })
        }
    },
    refreshGetDiamondState: function() {}
})
  , ChooseNumLayer = cc.Layer.extend({
    itemIndex: null,
    chooseNum: null,
    itemData: null,
    totalPriceTxt: null,
    buyNumTxt: null,
    ctor: function(a) {
        this._super();
        this.itemIndex = a;
        this.chooseNum = 1;
        this.itemData = 0;
        this.buyNumTxt = this.totalPriceTxt = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.itemData = Global.shopDatas[this.itemIndex - 1];
        this.mainUI = ParseUIJson.parseJsonToUI(res.choose_number_layer);
        this.addChild(this.mainUI);
        var a = "element/" + DataMgr.getElementDataByID(this.itemData.id).uiIcon + ".png";
        Utils.changeTexture(this.mainUI.iconsprite, a);
        2007 == this.itemData.id && (a = new GameArtWord("fnttype1"),
        a.setAnchorPoint(cc.p(0.5, 0.5)),
        a.alignmentType = artWordMiddle,
        a.setString(this.itemData.num + ""),
        this.mainUI.iconsprite.addChild(a),
        a.x = this.mainUI.iconsprite.getContentSize().width / 2,
        a.y = this.mainUI.iconsprite.getContentSize().height / 2);
        this.buyNumTxt = new GameArtWord("fnttype1");
        this.buyNumTxt.setAnchorPoint(cc.p(0.5, 0.5));
        this.buyNumTxt.alignmentType = artWordMiddle;
        this.buyNumTxt.setString("x" + this.chooseNum);
        this.addChild(this.buyNumTxt);
        this.buyNumTxt.x = this.mainUI.numbg.x;
        this.buyNumTxt.y = this.mainUI.numbg.y;
        a = new cc.LabelTTF(Global.youHave,"jellyboom_font",24);
        this.mainUI.addChild(a);
        a.setFontFillColor(cc.color(255, 255, 255));
        a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_RIGHT);
        a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        a.setAnchorPoint(cc.p(1, 0.5));
        a.x = this.mainUI.demimg.x - 50;
        a.y = this.mainUI.demimg.y;
        a = new cc.LabelTTF(gameUserData.gold.toString(),"jellyboom_font",24);
        this.addChild(a);
        a.setFontFillColor(cc.color(255, 255, 255));
        a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        a.setAnchorPoint(cc.p(0, 0.5));
        a.x = this.mainUI.demimg.x + 10;
        a.y = this.mainUI.demimg.y;
        this.totalPriceTxt = new GameArtWord("fnttype4");
        this.totalPriceTxt.setAnchorPoint(cc.p(0, 0.5));
        this.totalPriceTxt.alignmentType = artWordLeft;
        this.totalPriceTxt.setString(this.itemData.price * this.chooseNum + "");
        this.mainUI.buybtn.addChild(this.totalPriceTxt);
        this.totalPriceTxt.x = this.mainUI.buybtn.dem.x + 30;
        this.totalPriceTxt.y = this.mainUI.buybtn.dem.y;
        engine.gameEvent.createMouseUp(this.mainUI.buybtn, this.clickBuyBtnFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.subbtn, this.clickSubFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.addbtn, this.clickAddFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.clickCloseBtnFun.bind(this), buttonScalingType);
        this.updateBuyBtn()
    },
    updateBuyBtn: function() {
        this.buyNumTxt.setString("x" + this.chooseNum);
        this.totalPriceTxt.setString(this.itemData.price * this.chooseNum + "");
        this.itemData.price * this.chooseNum > gameUserData.gold ? this.mainUI.buybtn.setSpriteFrame("public/publicbtn10.png") : this.mainUI.buybtn.setSpriteFrame("public/publicbtn3.png");
        var a = this.totalPriceTxt.stringSize.width + 0.7 * this.mainUI.buybtn.dem.getContentSize().width + 10;
        this.mainUI.buybtn.dem.x = this.mainUI.buybtn.getContentSize().width / 2 - a / 2 + 21;
        this.totalPriceTxt.x = this.mainUI.buybtn.dem.x + 30
    },
    clickBuyBtnFun: function() {
        var a = this.itemData.price * this.chooseNum;
        a > gameUserData.gold || (gameUserData.gold -= a,
        gameUserData.spendDiamond += a,
        2007 === this.itemData.id ? (gameUserData.power += this.itemData.num * this.chooseNum,
        EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(this.itemData.id, this.itemData.num * this.chooseNum),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS),
        EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT),
        HttpFun.uploadSelfInfo(),
        this.setVisible(!1),
        this.playGetAction(this.itemData.id),
        this.clickCloseBtnFun())
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        a = "element/" + DataMgr.getElementDataByID(a).uiIcon + ".png";
        var c = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
        c.playCount = 1;
        var d = 0
          , d = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        c.x = d - uiOfferX;
        c.y = 700;
        c.getBitmapByUrlName("sbg6.png").setSpriteFrame(a);
        b.addChild(c);
        c.isRemoveFromComplete = !0;
        c.layer = b;
        c.frameCompleteFun = function() {
            c.layer.removeFromParent()
        }
    },
    clickSubFun: function() {
        this.chooseNum -= 1;
        1 > this.chooseNum && (this.chooseNum = 1);
        this.updateBuyBtn()
    },
    clickAddFun: function() {
        this.chooseNum += 1;
        this.updateBuyBtn()
    },
    clickCloseBtnFun: function() {
        this.removeFromParent()
    }
});
var TargetLayer = cc.Layer.extend({
    lv: 1,
    mainUI: null,
    chooseItems: [0, 0, 0],
    isCanTouch: !0,
    data: null,
    ctor: function(a) {
        this._super();
        this.lv = a || 1;
        this.chooseItems = [0, 0, 0];
        Global.chooseItems = [];
        this.isCanTouch = !0
    },
    onEnter: function() {
        this._super();
        Global.isDialog = !0;
        this.initUI();
        this.initTargetElement();
        this.refreshItems();
        this.uiOpenAction();
        EventMgr.register(EVENTMGR_ID.REFRESH_TARGET, function() {
            this.refreshItems()
        }, this)
    },
    onExit: function() {
        this._super();
        Global.isDialog = !1;
        EventMgr.remove(EVENTMGR_ID.REFRESH_TARGET, this)
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_target_layer_json);
        this.addChild(this.mainUI);
        this.mainUI.target_bg.setVisible(!1);
        for (var a = 1; 5 > a; a++)
            this.mainUI["paper_" + a].setVisible(!1);
        1 === Global.levelTarget["level" + this.lv].special && this.mainUI.target_bg.setVisible(!0);
        this.initListener();
        this.mainUI.aw_fnttype29_lv.setString(this.lv.toString());
        Global.isInfinite && this.mainUI.btnContinue.star.setVisible(!0)
    },
    initListener: function() {
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnContinue, this.onContinue.bind(this), buttonScalingType);
        for (var a = 1; 3 >= a; ++a)
            engine.gameEvent.createMouseUp(this.mainUI["choose" + a], this.onChoose.bind(this), null)
    },
    initTargetElement: function() {
        for (var a = Global.levelTarget["level" + this.lv], b = 0; b < a.targets.length; ++b) {
            var c = a.targets[b]
              , d = this.mainUI["paper_" + (b + 1)];
            d.setVisible(!0);
            this.refreshTargetItem(d, c);
            d.setCascadeOpacityEnabled(!0);
            d.aw_fnttype1_price.setCascadeOpacityEnabled(!0)
        }
        this.initTargetPosition(a.targets.length)
    },
    initTargetPosition: function(a) {
        1 === a ? this.mainUI.paper_1.x = 360 : 2 === a ? (this.mainUI.paper_1.x = 260,
        this.mainUI.paper_2.x = 460) : 3 === a && (this.mainUI.paper_1.x = 200,
        this.mainUI.paper_2.x = 360,
        this.mainUI.paper_3.x = 520)
    },
    refreshTargetItem: function(a, b) {
        a.aw_fnttype1_price.setString("x" + b.num);
        var c = DataMgr.getElementDataByID(b.id).uiIcon;
        Utils.changeTexture(a, "element/" + c + ".png")
    },
    refreshItems: function() {
        for (var a = 0; 3 > a; ++a) {
            var b = Global.unlockItemCondition[a]
              , c = gameUserData.lv >= b.lv
              , d = this.mainUI["choose" + (a + 1)]
              , e = DataMgr.getElementDataByID(b.id);
            d.buy.setVisible(!1);
            !0 == c ? (Utils.changeTexture(d.icon, "element/" + e.uiIcon + ".png"),
            d.nochoose.unlock_19.setVisible(!1),
            d.nochoose.aw_fnttype1_lv.setVisible(!1),
            this.refreshItem(d, b)) : (d.titlebg.setVisible(!1),
            Utils.changeTexture(d, "public/n_choosebg2.png"),
            Utils.changeTexture(d.icon, "choose_map/question.png"),
            d.numbg.setVisible(!1),
            d.nochoose.aw_fnttype1_lv.setVisible(!0),
            d.nochoose.aw_fnttype1_lv.setString(b.lv.toString()),
            d.nochoose.unlock_19.setVisible(!0),
            d.nochoose.free.setVisible(!1),
            d.nochoose.diamond.setVisible(!1),
            d.nochoose.aw_fnttype1_price.setVisible(!1),
            d.nochoose.unlock_19.x = 10 <= b.lv ? 67 : 78,
            d.nochoose.aw_fnttype1_lv.x = d.nochoose.unlock_19.x + 27)
        }
    },
    refreshItem: function(a, b) {
        var c = DataMgr.getItemNumByID(b.id);
        0 < c ? (a.numbg.setVisible(!0),
        a.numbg.aw_fnttype27_num.setString("" + c),
        a.nochoose.free.setVisible(!0),
        a.nochoose.diamond.setVisible(!1),
        a.nochoose.aw_fnttype1_price.setVisible(!1)) : (a.numbg.setVisible(!1),
        a.nochoose.free.setVisible(!1),
        a.nochoose.diamond.setVisible(!0),
        a.nochoose.aw_fnttype1_price.setVisible(!0),
        a.nochoose.aw_fnttype1_price.setString(b.price.toString()),
        a.nochoose.diamond.x = 100 <= b.price ? 60 : 67,
        a.nochoose.aw_fnttype1_price.x = a.nochoose.diamond.x + 25)
    },
    refreshItemData: function(a) {
        this.chooseItems[a - 1] = 1 === this.chooseItems[a - 1] ? 0 : 1
    },
    refreshItemByTag: function(a) {
        var b = this.mainUI["choose" + a];
        b.buy.setVisible(1 === this.chooseItems[a - 1]);
        b.nochoose.setVisible(1 !== this.chooseItems[a - 1]);
        1 === this.chooseItems[a - 1] ? (Utils.changeTexture(b, "public/n_choosebg.png"),
        Utils.changeTexture(b.titlebg, "sign/n_itemtitle2.png")) : (Utils.changeTexture(b, "public/scalesprite2.png"),
        Utils.changeTexture(b.titlebg, "sign/n_itemtitle1.png"))
    },
    costPrice: function() {
        for (var a = 0, b = 0; 3 > b; ++b) {
            var c = Global.unlockItemCondition[b];
            0 === DataMgr.getItemNumByID(c.id) && (a += this.chooseItems[b] * c.price)
        }
        return a
    },
    refreshGoldText: function() {},
    onChoose: function(a, b) {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        var c = b.getCurrentTarget().getTag();
        gameUserData.lv < Global.unlockItemCondition[c - 1].lv || (this.refreshItemData(c),
        this.refreshItemByTag(c))
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.isCanTouch && (this.removeFromParent(),
        this.showInterAd())
    },
    createInviteDialog: function() {
        var a = new NoHeartNode
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.getParent().addChild(a, 1001);
        this.removeFromParent()
    },
    costItemsAndMoney: function() {
        var a = this.costPrice();
        if (gameUserData.gold < a)
            this.notEnough();
        else {
            if (Global.isInfinite)
                Global.gameType = 1,
                transitions(GameFightScene, fightResFun(!1), LoadScene, function() {
                    multiplePNGToSpriteFrame(fightRes.fightelementimglist1_plist);
                    multiplePNGToSpriteFrame(fightRes.fightelementimglist2_plist);
                    multiplePNGToSpriteFrame(fightRes.fightelementimglist3_plist);
                    multiplePNGToSpriteFrame(fightRes.fightelementimglist4_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist3_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist4_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist5_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist6_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist7_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist8_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist9_plist);
                    multiplePNGToSpriteFrame(fightRes.fightanimatelist10_plist);
                    multiplePNGToSpriteFrame("res/csi/stoneplist.plist")
                });
            else {
                if (0 >= gameUserData.power) {
                    0 < gameUserData.limitPowerCount ? this.createInviteDialog() : EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.getPowerDes);
                    return
                }
                gameUserData.power -= 1;
                gameUserData.usePowerNum += 1;
                gameSDK.saveUserData(getSaveFBData(), null);
                Global.gameType = 1;
                this.playCostPowerAction();
                cc.log("-------当前体力:" + gameUserData.power);
                this.isCanTouch = !1
            }
            gameUserData.gold -= a;
            gameUserData.spendDiamond += a;
            gameSDK.saveUserData(getSaveFBData(), null);
            for (a = 0; a < this.chooseItems.length; ++a)
                DataMgr.subItemByID(Global.unlockItemCondition[a].id, this.chooseItems[a]);
            Global.chooseItems = this.chooseItems
        }
    },
    notEnough: function() {
        if (!1 == gameSDK.isCanPay())
            this.not_enough ? this.not_enough.inAction() : (this.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.addChild(this.not_enough, 1001));
        else {
            var a = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var b = new FacebookPaymentShopLayer;
                createMaskLayer(b);
                a.addChild(b, 10);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    playCostPowerAction: function() {
        var a = createGameAnimation(res.res_heart_json, "heart", 40);
        a.playCount = 1;
        a.frameCompleteFun = function() {
            transitions(GameFightScene, fightResFun(!1), LoadScene, function() {
                multiplePNGToSpriteFrame(fightRes.fightelementimglist1_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist2_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist5_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist6_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist7_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist8_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist9_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist10_plist);
                multiplePNGToSpriteFrame("res/csi/stoneplist.plist")
            })
        }
        .bind(this);
        a.frameFun = function(a) {
            24 !== a || this.mainUI.btnContinue.star.isVisible() || this.mainUI.btnContinue.star.setVisible(!0)
        }
        .bind(this);
        a.attr({
            x: 355,
            y: 620
        });
        this.addChild(a, 30)
    },
    createShopUI: function(a) {
        a = new ShopLayer(a);
        createMaskLayer(a);
        this.getParent().addChild(a, 10)
    },
    onContinue: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.isCanTouch && this.costItemsAndMoney();
        if (typeof gdsdk !== 'undefined' && gdsdk.showBanner !== 'undefined') {
            gdsdk.showBanner()
        }
    },
    uiOpenAction: function() {
        this.mainUI.setScale(0.125);
        var a = cc.scaleTo(5 / 45, 1.1, 1.1)
          , b = cc.scaleTo(7 / 45, 0.95, 0.95)
          , c = cc.scaleTo(8 / 45, 1, 1)
          , d = cc.callFunc(function() {
            13 !== this.lv && 18 !== this.lv && 26 !== this.lv || this.createGuideLayer();
            Global.isDialog = !1
        }, this);
        this.mainUI.runAction(cc.sequence(a, b, c, d))
    },
    downAction: function() {
        var a = this.mainUI.bg_1.getContentSize().height;
        this.mainUI.y = a / 2 + cc.winSize.height;
        var a = cc.moveTo(0.2, cc.p(this.mainUI.x, -30))
          , b = cc.moveBy(0.2, cc.p(0, 30))
          , c = cc.callFunc(function() {
            for (var a = 0, b = 1; 4 >= b; ++b) {
                var c = this.mainUI["paper_" + b]
                  , g = cc.sequence(cc.moveBy(0.1, cc.p(0, -302)), AnimationMgr.getElementNormalAction())
                  , g = cc.spawn(cc.fadeIn(0.2), g);
                c.runAction(cc.sequence(cc.delayTime(a), g));
                c.aw_fnttype1_price.setVisible(!0);
                c.aw_fnttype1_price.runAction(cc.sequence(cc.delayTime(a + 0.2), cc.fadeIn(0.1)));
                a += 0.07
            }
            13 !== this.lv && 18 !== this.lv && 26 !== this.lv || this.createGuideLayer();
            Global.isDialog = !1
        }, this)
          , a = cc.sequence(a, c, b);
        this.mainUI.runAction(a)
    },
    buttonDropAction: function() {
        this.mainUI.btnContinue.y += 1200;
        this.mainUI.btnContinue.runAction(cc.moveBy(0.27, cc.p(0, -1200)))
    },
    createGuideLayer: function() {
        Global.guildData["lv" + this.lv] && -1 === Utils.getDataIndexByID(gameUserData.guideLevel, this.lv) && this.addChild(new GuideLayer(this.lv), 1001)
    },
    showInterAd: function() {}
});
var targetStep = {}
  , GameMenuLayer = cc.Layer.extend({
    mainUI: null,
    progressCircle: null,
    lv: 1,
    data: null,
    step: 0,
    chooseItemIndex: 0,
    isTouch: !1,
    cheerSp: null,
    index: 0,
    isCheerComplete: null,
    gift: null,
    bglayer: null,
    ctor: function(a) {
        this._super();
        this.lv = a || 1;
        this.initData()
    },
    initData: function() {
        this.data = DataMgr.getLevelData(this.lv);
        this.step = this.data.step;
        this.cheerSp = null;
        this.index = 0;
        this.gift = null;
        this.isCheerComplete = !1;
        Global.curLevelScore = 0;
        targetStep = {}
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.initItems(!0);
        this.createTargetUI();
        this.refreshStepLabel(this.data.step);
        if (1 == Global.gameType)
            this.initTargetIcon(DataMgr.getLevelData(this.lv)),
            this.createCircleProgress(),
            this.initStarPosition(),
            this.refreshScoreLabel(0),
            this.refreshLevel(),
            this.mainUI.weeklayer.setVisible(!1);
        else {
            this.mainUI.weeklayer.setVisible(!0);
            this.mainUI.top_2.setVisible(!1);
            this.mainUI.light.setVisible(!1);
            this.mainUI.scoreprogress.setVisible(!1);
            this.mainUI.scrocebg.setVisible(!1);
            for (var a = 1; 4 > a; a++)
                this.mainUI["star" + a].setVisible(!1);
            this.mainUI.aw_fnttype33_stepNum1.setVisible(!1);
            this.mainUI.lvimg.setVisible(!1);
            this.addWeekLayer();
            this.updateBossCurHp()
        }
        this.registerEvent()
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.GAME_ITEMS, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_TARGET, this);
        EventMgr.remove(EVENTMGR_ID.STEP, this);
        EventMgr.remove(EVENTMGR_ID.CLAIM_ITEM, this);
        EventMgr.remove(EVENTMGR_ID.ADD_SCORE, this);
        EventMgr.remove(EVENTMGR_ID.SCALE_TARGET, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_UPDATE_HP_PRO, this);
        EventMgr.remove(EVENTMGR_ID.RESURGENCE_ADD_STEP, this);
        EventMgr.remove(EVENTMGR_ID.REDUCE_STEP, this);
        for (var a = 1; 5 > a; a++)
            this.mainUI["aw_fnttype1_targetNum_" + a].removeFromParent();
        1 != Global.gameType && this.mainUI.targetBg.removeFromParent()
    },
    registerEvent: function() {
        EventMgr.register(EVENTMGR_ID.CLAIM_ITEM, function(a) {
            this.creatClaimItemLayer(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_UPDATE_HP_PRO, function(a) {
            1 != Global.gameType && this.updateBossCurHp()
        }, this);
        EventMgr.register(EVENTMGR_ID.RESURGENCE_ADD_STEP, function(a) {
            1 == Global.gameType ? (this.refreshStepLabel(a),
            this.refreshCircleProgress(a)) : this.refreshStepLabel(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.STEP, function(a) {
            1 == Global.gameType ? (this.refreshStepLabel(a),
            this.refreshCircleProgress(a)) : this.refreshStepLabel(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.REDUCE_STEP, function(a) {
            1 == Global.gameType ? (this.refreshStepLabel(a),
            this.refreshCircleProgress(a)) : this.refreshStepLabel(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.SCALE_TARGET, function(a) {
            if (1 == Global.gameType) {
                var b = cc.scaleTo(0.125, 0.9)
                  , c = cc.scaleTo(0.125, 0.7);
                this.mainUI["targetIcon" + (Utils.getNumberFromString(a) + 1)].runAction(cc.sequence(b, c))
            }
        }, this);
        EventMgr.register(EVENTMGR_ID.ADD_SCORE, function(a) {
            this.refreshScoreLabel(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.GAME_ITEMS, function() {
            this.initItems(!1)
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_TARGET, function(a) {
            if (1 == Global.gameType) {
                if (-1 != a) {
                    var b = this.mainUI["aw_fnttype1_targetNum_" + (Utils.getNumberFromString(a) + 1)]
                      , c = Utils.getNumberFromString(b.getString())
                      , c = c - 1
                      , c = 0 >= c ? 0 : c;
                    0 === c ? (engine.gameSound.playEffect(soundRes.sound_finish_target),
                    this.mainUI["targetIcon" + (Utils.getNumberFromString(a) + 1)].ok.setVisible(!0),
                    b.setVisible(!1)) : (engine.gameSound.playEffect(soundRes.sound_collect_target),
                    this.mainUI["targetIcon" + (Utils.getNumberFromString(a) + 1)].ok.setVisible(!1));
                    b.setString(c + "")
                }
            } else
                -1 != a && EventMgr.emit(EVENTMGR_ID.WEEKBOSS_UPDATE_HP, PieceMgr.lvData.targets[a].hurtnum)
        }, this)
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(fightRes.res_game_menu_layer_json);
        this.addChild(this.mainUI);
        var a = 0;
        0 < uiOfferX && (a = uiOfferX);
        this.mainUI.scoreprogress.x -= uiOfferX;
        this.mainUI.light.x -= uiOfferX;
        this.mainUI.aw_fnttype33_stepNum1.x -= a;
        for (a = 1; 5 > a; a++)
            this.mainUI["targetIcon" + a] = new cc.Sprite("#element/green_shadow.png"),
            this.mainUI.addChild(this.mainUI["targetIcon" + a], 3),
            this.mainUI["targetIcon" + a].setVisible(!1),
            this.mainUI["targetIcon" + a].ok = new cc.Sprite("#game/ok.png"),
            this.mainUI["targetIcon" + a].ok.setPosition(cc.p(62, 14)),
            this.mainUI["targetIcon" + a].addChild(this.mainUI["targetIcon" + a].ok),
            this.mainUI["targetIcon" + a].ok.setVisible(!1),
            this.mainUI["aw_fnttype1_targetNum_" + a] = new GameArtWord("fnttype1"),
            this.parentLayer.addChild(this.mainUI["aw_fnttype1_targetNum_" + a], 3),
            this.mainUI["aw_fnttype1_targetNum_" + a].alignmentType = artWordMiddle;
        this.bglayer = new cc.Layer;
        a = new cc.Sprite(res.n_gamebg);
        this.bglayer.addChild(a);
        a = new cc.Sprite("res/game/playbg/gameplaybg1.jpg");
        this.bglayer.addChild(a);
        a.y = 640;
        this.bglayer.bake();
        this.bglayer.x = 360;
        this.bglayer.y = 475;
        this.mainUI.addChild(this.bglayer, -1);
        this.initListener();
        engine.gameEvent.createMouseDown(this, this.onTouch.bind(this));
        this.mainUI.lvimg.setString("Lv" + this.lv + "");
        a = uiOfferX;
        this.mainUI.lvimg.x = 400 - a;
        var b = null;
        1 == Global.gameType ? b = new GameMonsterLayer : (b = new GameWeekGameBossLayer,
        PieceMgr.bossCurHp = Global.weekGamelevelTarget["level" + this.lv].bossHp,
        PieceMgr.bossMaxHp = Global.weekGamelevelTarget["level" + this.lv].bossHp);
        this.addChild(b);
        this.mainUI.btnPause.x -= a;
        this.mainUI.scrocebg.x -= a;
        this.mainUI.scrocebg.setScale(1.2);
        this.mainUI.lvimg.setScale(1.2);
        Global.isUseItem = !1;
        for (a = 1; 6 > a; a++)
            this.mainUI["item_frame" + a].setCascadeOpacityEnabled(!0),
            this.mainUI["item_frame" + a].choosebubble.setVisible(!1)
    },
    bgLayerUnbake: function() {
        null != this.bglayer && this.bglayer.unbake()
    },
    onTouch: function(a, b) {
        if (!this.isTouch) {
            this.isTouch = !0;
            var c = a.getLocation();
            this.whichCellBeTouch(c);
            this.runAction(cc.sequence(cc.delayTime(0.3), cc.callFunc(function() {
                this.isTouch = !1
            }, this)));
            return !0
        }
        return !1
    },
    whichCellBeTouch: function(a) {
        var b = Math.floor((a.x - 27 - downOfferX) / Global.elementSize)
          , c = Math.floor((a.y - 198) / Global.elementSize);
        8 <= b || 8 <= c || 27 > a.x || 198 > a.y || 0 > b || 0 > c || EventMgr.emit(EVENTMGR_ID.TOUCH_CELL, {
            r: c,
            c: b
        })
    },
    createTargetUI: function() {
        if (1 == Global.gameType) {
            var a = new GameTargetNode(this.lv);
            createMaskLayer(a);
            this.getParent().getParent().addChild(a, 10)
        } else
            EventMgr.emit(EVENTMGR_ID.TARGET_MOVE_FINISH)
    },
    initListener: function() {
        engine.gameEvent.createMouseDown(this.mainUI.btnPause, this.onPause.bind(this), buttonScalingType);
        for (var a = 1; 5 >= a; ++a)
            engine.gameEvent.createMouseDown(this.mainUI["item_frame" + a], this.onItem.bind(this))
    },
    addWeekLayer: function() {
        this.mainUI.targetBg = new cc.Sprite("#weekgame/weekgamemenugoal.png");
        this.mainUI.addChild(this.mainUI.targetBg);
        this.mainUI.targetBg.x = 650;
        this.mainUI.targetBg.y = 1E3;
        for (var a = DataMgr.getLevelData(this.lv), b = Global.weekTargetItemPos[a.targets.length - 1].posArr, c = Global.weekTargetItemPos[a.targets.length - 1].scale, d = 0; d < a.targets.length; d++) {
            var e = a.targets[d];
            this.mainUI["targetIcon" + (d + 1)].setPosition(b[d]);
            this.mainUI["targetIcon" + (d + 1)].setVisible(!0);
            this.mainUI["targetIcon" + (d + 1)].setScale(c);
            e = DataMgr.getElementDataByID(e.id).uiIcon;
            Utils.changeTexture(this.mainUI["targetIcon" + (d + 1)], "element/" + e + ".png")
        }
    },
    updateBossCurHp: function() {
        this.mainUI.weeklayer.hpload.setPercent(PieceMgr.bossCurHp / PieceMgr.bossMaxHp * 100);
        this.mainUI.weeklayer.hptxt.setString(PieceMgr.bossCurHp + "/" + PieceMgr.bossMaxHp)
    },
    initTargetIcon: function(a) {
        for (var b = Global.targetItemPos[a.targets.length - 1].posArr, c = Global.targetItemPos[a.targets.length - 1].scale, d = 0; d < a.targets.length; ++d) {
            var e = a.targets[d];
            this.mainUI["targetIcon" + (d + 1)].setPosition(b[d]);
            this.initTargetItem(d + 1, e, c)
        }
    },
    initTargetAction: function() {
        for (var a = DataMgr.getLevelData(this.lv), b = 0; b < a.targets.length; ++b)
            this.targetBeginAction(this.mainUI["targetIcon" + (b + 1)], b)
    },
    initTargetItem: function(a, b, c) {
        this.mainUI["aw_fnttype1_targetNum_" + a].setString(b.num + "");
        this.mainUI["aw_fnttype1_targetNum_" + a].setVisible(!0);
        this.mainUI["targetIcon" + a].setVisible(!0);
        this.mainUI["targetIcon" + a].setScale(c);
        this.mainUI["aw_fnttype1_targetNum_" + a].x = this.mainUI["targetIcon" + a].x + 3 * c;
        this.mainUI["aw_fnttype1_targetNum_" + a].y = this.mainUI["targetIcon" + a].y - 36 * c;
        b = DataMgr.getElementDataByID(b.id).uiIcon;
        Utils.changeTexture(this.mainUI["targetIcon" + a], "element/" + b + ".png")
    },
    targetBeginAction: function(a, b) {
        var c = DataMgr.getLevelData(this.lv)
          , c = Global.targetItemPos[c.targets.length - 1].scale;
        a.runAction(cc.sequence(cc.delayTime(0.2 * b), cc.scaleTo(0.2, 1), cc.scaleTo(0.2, c)))
    },
    initItems: function(a) {
        a = a || !1;
        for (var b = 0; b < Global.gameItems.length; ++b) {
            var c = Global.gameItems[b]
              , d = DataMgr.getElementDataByID(c);
            0 >= DataMgr.getItemNumByID(c) ? (this.mainUI["item_frame" + (b + 1)].aw_fnttype10_itemNum.setString(""),
            this.mainUI["item_frame" + (b + 1)].havenumbg.setSpriteFrame("game/n_itemadd.png"),
            this.mainUI["item_frame" + (b + 1)].claimbtn.setVisible(!0)) : (this.mainUI["item_frame" + (b + 1)].aw_fnttype10_itemNum.setString(DataMgr.getItemNumByID(c) + ""),
            this.mainUI["item_frame" + (b + 1)].havenumbg.setSpriteFrame("public/n_numbg2.png"),
            this.mainUI["item_frame" + (b + 1)].claimbtn.setVisible(!1));
            this.markItem(c);
            this.isUnlockItem(b) ? Utils.changeTexture(this.mainUI["item_frame" + (b + 1)].item, "element/" + d.icon + ".png") : (this.mainUI["item_frame" + (b + 1)].claimbtn.setVisible(!1),
            this.refreshItem(b + 1, a))
        }
    },
    refreshItem: function(a, b) {
        b && (this.lockItem(a),
        this.mainUI["item_frame" + a].aw_fnttype10_itemNum.setString(""),
        this.mainUI["item_frame" + a].havenumbg.setSpriteFrame("game/n_itemadd.png"))
    },
    isUnlockItem: function(a) {
        return gameUserData.lv >= Global.unLockItem[a] - 1 || this.isHaveGetItem(Global.gameItems[a]) ? !0 : !1
    },
    markItem: function(a) {
        !this.isHaveGetItem(a) && 0 < DataMgr.getItemNumByID(a) && gameUserData.isGetItem.push(a)
    },
    isHaveGetItem: function(a) {
        for (var b = 0; b < gameUserData.isGetItem.length; ++b)
            if (a === gameUserData.isGetItem[b])
                return !0;
        return !1
    },
    lockItem: function(a) {
        Utils.changeTexture(this.mainUI["item_frame" + a].item, "choose_map/question2.png");
        this.mainUI["item_frame" + a].aw_fnttype10_itemNum.setString("");
        this.mainUI["item_frame" + a].havenumbg.setSpriteFrame("game/n_itemadd.png")
    },
    createCircleProgress: function() {
        var a = new cc.Sprite;
        a.setContentSize(180, 182);
        this.progressCircle = new cc.ProgressTimer(a);
        this.progressCircle.type = cc.ProgressTimer.TYPE_RADIAL;
        this.progressCircle.setReverseDirection(!0);
        this.progressCircle.setPercentage(100);
        this.mainUI.addChild(this.progressCircle, 9);
        this.progressCircle.x = -200;
        this.progressCircle.y = 1166;
        this.progressCircle.setVisible(!1)
    },
    refreshCircleProgress: function(a) {
        this.progressCircle.setPercentage((a / this.data.step * 100).toFixed(0))
    },
    refreshScoreLabel: function(a) {
        1 == Global.gameType ? (this.mainUI.scrocebg.scoretxt.setString(Global.scoreEn + ": " + a + ""),
        this.refreshScoreProgress(a),
        this.refreshStarState(a)) : this.mainUI.weeklayer.scoretxt.setString(Global.scoreEn + ": " + a + "");
        Global.curLevelScore = a
    },
    refreshStarState: function(a) {
        for (var b = 0, c = 4 <= this.data.score.length ? 3 : this.data.score.length, d = 0; d < c; ++d)
            a >= this.data.score[d] && (Utils.changeTexture(this.mainUI["star" + (d + 1)], "game/star.png"),
            b = d + 1);
        1 <= b && gameUserData.usePowerNum >= Global.parachuteNum && (c = Math.round(Math.random()),
        1 === c && (gameUserData.usePowerNum = 0,
        EventMgr.emit(EVENTMGR_ID.PARACHUTE_GIFT, 1),
        gameSDK.saveUserData(getSaveFBData(), null)));
        this.createCheerAction(b)
    },
    createCheerAction: function(a) {
        var b = this.getParent();
        if (!(0 >= a || a <= this.index || b && b.isUseLeftStep) && (engine.gameSound.playEffect(soundRes["sound_good" + a]),
        this.index = a,
        !1 == this.isCheerComplete)) {
            this.isCheerComplete = !0;
            a = createGameAnimation(res.res_brush_json, "goodmc" + a, 30);
            a.playCount = 1;
            a.isRemoveFromComplete = !0;
            var c = this;
            a.frameCompleteFun = function() {
                c.isCheerComplete = !1
            }
            ;
            a.x = 360;
            a.y = 800;
            this.getParent().addChild(a, 1001)
        }
    },
    getCheerAction: function() {
        var a = cc.spawn(cc.fadeIn(0.2), cc.scaleTo(0.2, 1.1))
          , b = cc.scaleTo(0.2, 1)
          , c = cc.scaleTo(0.2, 1.05)
          , d = cc.delayTime(0.2)
          , e = cc.spawn(cc.fadeOut(0.2), cc.scaleTo(0.2, 1.44));
        return cc.sequence(a, b, c, d, e)
    },
    refreshScoreProgress: function(a) {
        var b = this.data.score[2];
        this.mainUI.scoreprogress.rotation = (a < b ? a / b : 1) * (Global.scoreRotateB - Global.scoreRotateA) + Global.scoreRotateA
    },
    refreshLevel: function() {},
    refreshStepLabel: function(a) {
        null == a && (a = 0);
        0 > a && (a = 0);
        this.mainUI.aw_fnttype33_stepNum1.setString(a + "");
        this.mainUI.weeklayer.aw_fnttype33_stepnum.setString(a + "");
        4 >= a && gameUserData.usePowerNum >= Global.parachuteNum && (gameUserData.usePowerNum = 0,
        EventMgr.emit(EVENTMGR_ID.PARACHUTE_GIFT, 2),
        gameSDK.saveUserData(getSaveFBData(), null))
    },
    initStarPosition: function() {
        for (var a = this.data.score[2], b = 4 <= this.data.score.length ? 3 : this.data.score.length, c = 0; c < b; ++c)
            this.mainUI["star" + (c + 1)].setPosition(this.getStarPosByScore(this.data.score[c] / a)),
            this.mainUI["star" + (c + 1)].x -= uiOfferX,
            this.mainUI["star" + (c + 1)].y -= 0
    },
    getStarPosByScore: function(a) {
        var b = cc.p(40, 1242)
          , c = a * (Global.scoreRotateB - Global.scoreRotateA) + Global.scoreRotateA - 30 + 180;
        c <= Global.scoreRotateA + 20 && (c = Global.scoreRotateA + 20);
        a = b.x + 98 * Math.sin(3.14 * c / 180);
        b = b.y + 98 * Math.cos(3.14 * c / 180);
        return cc.p(a, b)
    },
    onPause: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.PAUSE_LAYER)
    },
    chooseItem: function(a) {
        if (this.chooseItemIndex === a) {
            this.chooseItemIndex = 0;
            for (var b = 1; 6 > b; b++) {
                var c = this.mainUI["item_frame" + b];
                c.stopAllActions();
                c.runAction(cc.sequence(cc.scaleTo(0.2, 1), cc.callFunc(function() {})));
                b == a && c.choosebubble.setVisible(!1);
                c.setOpacity(255)
            }
        } else {
            this.chooseItemIndex = a;
            for (b = 1; 6 > b; b++) {
                c = this.mainUI["item_frame" + b];
                c.stopAllActions();
                var d = 255
                  , e = 1.15;
                c.choosebubble.setVisible(!0);
                b != a && (d = 150,
                e = 0.9,
                c.choosebubble.setVisible(!1));
                c.runAction(cc.sequence(cc.scaleTo(0.2, e), cc.callFunc(function() {})));
                c.setOpacity(d)
            }
            gameUserData.usePowerNum >= Global.parachuteNum && 1 === Math.round(Math.random()) && (gameUserData.usePowerNum = 0,
            EventMgr.emit(EVENTMGR_ID.PARACHUTE_GIFT, 1),
            gameSDK.saveUserData(getSaveFBData(), null))
        }
    },
    touchItem: function(a) {
        0 < DataMgr.getItemNumByID(Global.gameItems[a - 1]) ? this.chooseItem(a) : EventMgr.emit(EVENTMGR_ID.CHOOSE_NUM_LAYER, a)
    },
    buyItem: function(a, b) {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        var c = b.getCurrentTarget().getParent().getTag();
        this.isUnlockItem(c - 1) && (0 < DataMgr.getItemNumByID(Global.gameItems[c - 1]) || EventMgr.emit(EVENTMGR_ID.CHOOSE_NUM_LAYER, c))
    },
    onItem: function(a, b) {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        var c = b.getCurrentTarget();
        this.isUnlockItem(c.getTag() - 1) && this.touchItem(c.getTag())
    },
    creatClaimItemLayer: function(a) {
        if (null == currentScene.getChildByTag(10001)) {
            var b = new ShowAdByItem;
            b.initialize(a);
            b.setTag(10001);
            currentScene.addChild(b, 1E4)
        }
    }
})
  , GameTargetNode = cc.Node.extend({
    mainUI: null,
    lv: 1,
    ctor: function(a) {
        this._super();
        this.lv = a || 1
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.loginIn()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_game_target_node_json);
        this.addChild(this.mainUI);
        for (var a = 1; 5 > a; ++a)
            this.mainUI["paper_" + a].setVisible(!1);
        this.initTargetElement()
    },
    initTargetElement: function() {
        for (var a = Global.levelTarget["level" + this.lv], b = 0; b < a.targets.length; ++b) {
            var c = a.targets[b]
              , d = this.mainUI["paper_" + (b + 1)];
            d.setVisible(!0);
            this.refreshTargetItem(d, c)
        }
        this.initTargetPosition(a.targets.length)
    },
    initTargetPosition: function(a) {
        1 === a ? this.mainUI.paper_1.x = -365 : 2 === a ? (this.mainUI.paper_1.x = -434,
        this.mainUI.paper_2.x = -291) : 3 === a && (this.mainUI.paper_1.x = -525,
        this.mainUI.paper_2.x = -365,
        this.mainUI.paper_3.x = -205)
    },
    refreshTargetItem: function(a, b) {
        a.aw_fnttype1_price.setString("x" + b.num);
        var c = DataMgr.getElementDataByID(b.id).uiIcon;
        Utils.changeTexture(a, "element/" + c + ".png")
    },
    loginIn: function() {
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        this.mainUI.x = -uiOfferX;
        var a = cc.moveBy(0.3, cc.p(a + 365, 0))
          , b = cc.delayTime(1.5)
          , c = cc.moveBy(0.5, cc.p(1280, 0))
          , d = cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.TARGET_MOVE_FINISH);
            this.removeFromParent()
        }, this);
        this.mainUI.runAction(cc.sequence(a, b, c, d))
    }
})
  , ShowAdByItem = cc.Layer.extend({
    itemid: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super()
    },
    onExit: function() {
        this._super()
    },
    initialize: function(a) {
        var b = 0
          , b = viewGameWidth > mainGameBgWidth ? mainGameBgWidth : viewGameWidth;
        this.itemData = Global.shopDatas[a - 1];
        createMaskLayer(this);
        var c = new cc.Sprite("res/game/claimbg.png");
        this.addChild(c);
        c.x = b / 2;
        c.y = viewGameHeigh / 2 + 50;
        c = createGameAnimation(res.res_heart_json, "claimeffect", 30);
        this.addChild(c);
        c.x = b / 2;
        c.y = viewGameHeigh / 2 + 50;
        a = new cc.Sprite("#" + ["element/hammer.png", "element/magic_stick.png", "element/broom.png", "element/rainbow_brush.png", "element/small_bucket.png"][a - 1]);
        this.addChild(a);
        a.x = b / 2;
        a.y = viewGameHeigh / 2 + 50;
        a.setScale(1.5);
        !0 == checkShareOrWatch() ? (a = new cc.Sprite("#public/publicbtn17.png"),
        this.addChild(a),
        a.x = b / 2,
        a.y = 320,
        c = new cc.Sprite("#public/invite.png"),
        a.addChild(c),
        c.x = 72,
        c.y = 62,
        c = new cc.Sprite("#game/claim.png"),
        a.addChild(c),
        c.x = 190,
        c.y = 62,
        engine.gameEvent.createMouseUp(a, this.invitedFun.bind(this), buttonScalingType)) : (a = new cc.Sprite("#public/publicbtn24.png"),
        this.addChild(a),
        a.x = b / 2,
        a.y = 320,
        c = new cc.Sprite("#public/watchicon.png"),
        a.addChild(c),
        c.x = 70,
        c.y = 54,
        c = new cc.Sprite("#choose_map/n_watch.png"),
        a.addChild(c),
        c.x = 150,
        c.y = 54,
        engine.gameEvent.createMouseUp(a, this.watchAdFun.bind(this), buttonScalingType));
        a = new cc.Sprite("#public/n_close2.png");
        this.addChild(a);
        a.x = b / 2;
        a.y = 240;
        engine.gameEvent.createMouseUp(a, this.closebtnFun.bind(this), buttonScalingType)
    },
    closebtnFun: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.removeFromParent()
    },
    invitedFun: function() {
        var a = this
          , b = {};
        b.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        b.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        b.width = 750;
        b.height = 380;
        gameSDK.sendFaceBookFriend(function() {
            DataMgr.addItemByID(a.itemData.id, 1);
            EventMgr.emit(EVENTMGR_ID.GAME_ITEMS);
            a.removeFromParent()
        }, b)
    },
    watchAdFun: function() {
        var a = this
          , b = function() {
            DataMgr.addItemByID(a.itemData.id, 1);
            EventMgr.emit(EVENTMGR_ID.GAME_ITEMS);
            Global.isWatchAD = !0;
            a.removeFromParent()
        };
        if (isNotFbGame)
            b();
        else if (!isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var c = null;
            FBInstant.getRewardedVideoAsync(rewardedVideoID6).then(function(a) {
                c = a;
                return c.loadAsync()
            }).then(function() {
                return c.showAsync()
            }).then(function() {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                b()
            }).catch(function(a) {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b)
            })
        }
    }
});
var LotteryLayer = cc.Layer.extend({
    mainUI: null,
    data: null,
    time: null,
    during: null,
    acceleratedTime: null,
    uniformTime: null,
    decelerateTime: null,
    uniform: null,
    rewardID: null,
    isRun: null,
    monsterAni: null,
    starLotteryAni: null,
    lightingAni: null,
    baseSpeed: null,
    speedStep: null,
    ctor: function() {
        this._super();
        this.mainUI = null;
        this.data = Global.lotteyRewards;
        this.time = 2;
        this.rewardID = this.uniform = this.decelerateTime = this.uniformTime = this.acceleratedTime = this.during = 0;
        this.isRun = !1;
        this.lightingAni = this.starLotteryAni = this.monsterAni = null;
        this.speedStep = this.baseSpeed = 0
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.initListener();
        this.initGoldText()
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.LOTTERY_COMPLETE, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_GOLD, this)
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(lotteryUIRes.res_lottery_layer_json);
        this.addChild(this.mainUI);
        this.initLotteryIcon();
        this.initRecord();
        this.initLotteryCost();
        this.refreshFreeSpin();
        this.showInAction();
        1 != gameUserData.isBuyOtherAD && 1 != gameUserData.isAllAD || this.mainUI.small_circle.btnWatch.setSpriteFrame("lottery/n_collect.png")
    },
    monsterAnimation: function(a, b) {
        null != this.monsterAni && (this.monsterAni.removeFromParent(),
        this.monsterAni = null);
        this.monsterAni = createGameAnimation(lotteryUIRes.res_lotterymonster_json, ["lotterymonster_wait", "lotterymonster_click", "lotterymonster_zan", "lotterymonster_excitement", "lotterymonster_jump"][a - 58], 30);
        this.monsterAni.playCount = [3, 1, 1, 1, 1][a - 58];
        this.monsterAni.setPosition(cc.p(360, 1090));
        var c = this;
        this.monsterAni.frameCompleteFun = function() {
            null != b && b();
            switch (a) {
            case EVENTMGR_ID.LOTTERY_MONSTER_W:
                c.monsterAnimation(EVENTMGR_ID.LOTTERY_MONSTER_C);
                break;
            case EVENTMGR_ID.LOTTERY_MONSTER_C:
                c.monsterAnimation(EVENTMGR_ID.LOTTERY_MONSTER_W);
                break;
            case EVENTMGR_ID.LOTTERY_MONSTER_Z:
                c.monsterAnimation(EVENTMGR_ID.LOTTERY_MONSTER_W);
                break;
            case EVENTMGR_ID.LOTTERY_MONSTER_E:
                c.monsterAnimation(EVENTMGR_ID.LOTTERY_MONSTER_W);
                break;
            case EVENTMGR_ID.LOTTERY_MONSTER_J:
                c.monsterAnimation(EVENTMGR_ID.LOTTERY_MONSTER_W)
            }
        }
        ;
        this.mainUI.monsternode.addChild(this.monsterAni)
    },
    lightingAnimation: function(a, b) {
        null != this.lightingAni && (this.lightingAni.removeFromParent(),
        this.lightingAni = null);
        this.lightingAni = createGameAnimation(res.res_lotterylight_json, ["lotterylight_normal", "lotterylight_fast", "lotterylight_slow"][a - 63], 25);
        this.lightingAni.playCount = [-1, 4, 1][a - 63];
        this.lightingAni.setPosition(cc.p(360, 650));
        var c = this;
        this.lightingAni.frameCompleteFun = function() {
            null != b && b();
            switch (a) {
            case EVENTMGR_ID.LOTTERY_LIGHTING_F:
                c.lightingAnimation(EVENTMGR_ID.LOTTERY_LIGHTING_S);
                break;
            case EVENTMGR_ID.LOTTERY_LIGHTING_S:
                c.lightingAnimation(EVENTMGR_ID.LOTTERY_LIGHTING_N)
            }
        }
        ;
        this.mainUI.addChild(this.lightingAni)
    },
    showInAction: function() {
        var a = this;
        this.mainUI.bg_2.opacity = 0;
        this.mainUI.bg_2.runAction(cc.fadeIn(7 / 24));
        this.runAction(cc.sequence(cc.delayTime(13 / 24), cc.callFunc(function() {
            a.lightingAnimation(EVENTMGR_ID.LOTTERY_LIGHTING_N)
        })));
        for (var b = [this.mainUI.bg, this.mainUI.circle, this.mainUI.triangle_5, this.mainUI.small_circle, this.mainUI.txtbgsp, this.mainUI.destxtsp], c = 1; 8 >= c; c++) {
            var d = this.mainUI.circle["aw_fnttype2_text" + c];
            d.visible = !1;
            8 == c && d.runAction(cc.sequence(cc.delayTime(0.375), cc.callFunc(function() {
                for (var b = 1; 8 >= b; b++)
                    a.mainUI.circle["aw_fnttype2_text" + b].visible = !0
            })))
        }
        for (c = 0; c < b.length; c++) {
            b[c].opacity = 0;
            b[c].scale = 0.5;
            b[c].setCascadeOpacityEnabled(!0);
            var d = cc.delayTime(0.375)
              , e = cc.spawn(cc.fadeIn(4 / 24), cc.scaleTo(4 / 24, 1.1))
              , f = cc.scaleTo(4 / 24, 0.95)
              , g = cc.scaleTo(4 / 24, 1);
            b[c].runAction(cc.sequence(d, e, f, g))
        }
        b = [this.mainUI.btnClose, this.mainUI.lottery_frame_1, this.mainUI.aw_fnttype27_goldText];
        for (c = 0; c < b.length; c++) {
            b[c].opacity = 0;
            b[c].y += 74;
            b[c].setCascadeOpacityEnabled(!0);
            var d = cc.delayTime(8 / 24)
              , e = cc.spawn(cc.fadeIn(0.125), cc.moveBy(0.125, 0, -92))
              , f = cc.moveBy(0.125, 0, 26)
              , g = cc.moveBy(0.125, 0, -10)
              , h = cc.moveBy(0.125, 0, 2);
            b[c].runAction(cc.sequence(d, e, f, g, h))
        }
        this.runAction(cc.sequence(cc.delayTime(0.375), cc.callFunc(function() {
            var b = createGameAnimation(res.res_lotterylight_json, "starsfly", 24);
            b.playCount = 1;
            b.setPosition(cc.p(360, 990));
            a.mainUI.monsternode.addChild(b, -1)
        })));
        this.runAction(cc.sequence(cc.delayTime(0.625), cc.callFunc(function() {
            var b = createGameAnimation(res.res_lotterylight_json, "bigstarsopen", 24);
            b.playCount = 1;
            b.setPosition(cc.p(360, 990));
            a.mainUI.monsternode.addChild(b, -1)
        })))
    },
    refreshFreeSpin: function() {
        0 < gameUserData.freeLotteyNum ? (this.mainUI.small_circle.free.setVisible(!0),
        this.mainUI.small_circle.aw_fnttype2_costNum.setVisible(!1),
        this.mainUI.small_circle.gem.setVisible(!1),
        this.mainUI.small_circle.btnWatch.setVisible(!1),
        this.mainUI.small_circle.invite.setVisible(!1)) : 0 < gameUserData.watchAdsNum ? (this.mainUI.small_circle.btnWatch.setVisible(!0),
        this.mainUI.small_circle.free.setVisible(!1),
        this.mainUI.small_circle.aw_fnttype2_costNum.setVisible(!1),
        this.mainUI.small_circle.gem.setVisible(!1),
        this.mainUI.small_circle.invite.setVisible(!1)) : 0 < gameUserData.lotteryShareCount ? (this.mainUI.small_circle.btnWatch.setVisible(!1),
        this.mainUI.small_circle.free.setVisible(!1),
        this.mainUI.small_circle.aw_fnttype2_costNum.setVisible(!1),
        this.mainUI.small_circle.gem.setVisible(!1),
        this.mainUI.small_circle.invite.setVisible(!0)) : gameUserData.gold >= gameUserData.lotteryCostNum ? (this.mainUI.small_circle.aw_fnttype2_costNum.setVisible(!0),
        this.mainUI.small_circle.gem.setVisible(!0),
        this.mainUI.small_circle.btnWatch.setVisible(!1),
        this.mainUI.small_circle.free.setVisible(!1),
        this.mainUI.small_circle.invite.setVisible(!1)) : 0 >= gameUserData.watchAdsNum && (this.mainUI.small_circle.aw_fnttype2_costNum.setVisible(!0),
        this.mainUI.small_circle.gem.setVisible(!0),
        this.mainUI.small_circle.btnWatch.setVisible(!1),
        this.mainUI.small_circle.free.setVisible(!1),
        this.mainUI.small_circle.invite.setVisible(!1))
    },
    initListener: function() {
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.small_circle, this.onLottery.bind(this), buttonScalingType);
        EventMgr.register(EVENTMGR_ID.LOTTERY_COMPLETE, function() {
            this.isRun = !1;
            this.refreshFreeSpin()
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_GOLD, function() {
            this.initGoldText()
        }, this)
    },
    initLotteryCost: function() {
        this.mainUI.small_circle.aw_fnttype2_costNum.setString(gameUserData.lotteryCostNum + "")
    },
    initLotteryIcon: function() {
        for (var a = 0; a < this.data.length; ++a) {
            var b = this.mainUI.circle["item" + (a + 1)]
              , c = this.mainUI.circle["aw_fnttype2_text" + (a + 1)];
            c.setScale(0.9);
            var d = DataMgr.getElementIconNameByID(this.data[a].id);
            c.setString("x" + this.data[a].num);
            Utils.changeTexture(b, d)
        }
    },
    initRecord: function() {},
    watchAdsDialog: function() {
        var a = new LotteryWatchNode
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.addChild(a, 1001)
    },
    lottery: function() {
        if (gameUserData.gold >= gameUserData.lotteryCostNum || 0 < gameUserData.freeLotteyNum || 0 < gameUserData.watchAdsNum || 0 < gameUserData.lotteryShareCount) {
            this.isRun = !0;
            if (0 >= gameUserData.freeLotteyNum) {
                if (0 < gameUserData.watchAdsNum) {
                    1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD ? function() {
                        gameUserData.watchAdsNum -= 1;
                        gameUserData.freeLotteyNum = 1;
                        gameSDK.saveUserData(getSaveFBData(), null);
                        EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE)
                    }() : this.watchAdsDialog();
                    return
                }
                if (0 < gameUserData.lotteryShareCount) {
                    var a = {};
                    a.pngData = [{
                        url: "res/invbg.jpg",
                        posX: 0,
                        posY: 0,
                        imgWidth: 750,
                        imgHeight: 380
                    }, {
                        url: selfData.myurl,
                        posX: 213,
                        posY: 55,
                        imgWidth: 162,
                        imgHeight: 162
                    }, {
                        url: "res/invicon.png",
                        posX: 171,
                        posY: 14,
                        imgWidth: 235,
                        imgHeight: 235
                    }];
                    a.fontData = [{
                        des: "" + gameUserData.stars,
                        posX: 290,
                        posY: 300,
                        font: "40px Microsoft YaHei",
                        lineWidth: 2,
                        fillStyle: "rgb(249,227,113)",
                        textAlign: "center",
                        strokeStyle: "#000000"
                    }];
                    a.width = 750;
                    a.height = 380;
                    gameSDK.sendFaceBookFriend(function() {
                        gameUserData.lotteryShareCount -= 1;
                        gameUserData.freeLotteyNum = 2;
                        gameSDK.saveUserData(getSaveFBData(), null);
                        EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE)
                    }, a, function() {
                        EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE)
                    });
                    return
                }
                if (gameUserData.gold >= gameUserData.lotteryCostNum)
                    gameUserData.gold -= gameUserData.lotteryCostNum,
                    gameUserData.lotteryCostNum += 100;
                else
                    return
            } else
                gameUserData.freeLotteyNum -= 1;
            this.initGoldText();
            this.initLotteryCost();
            this.rewardID = this.getRewardID();
            this.addRecord(this.rewardID);
            cc.log("reward ID = " + this.rewardID);
            this.recordReward(this.rewardID);
            this.isRun = !0;
            gameSDK.saveUserData(getSaveFBData(), null);
            HttpFun.uploadSelfInfo();
            this.rotateCircleAction(this.stopAngle());
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT)
        } else if (!1 == gameSDK.isCanPay())
            this.not_enough ? this.not_enough.inAction() : (this.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.addChild(this.not_enough, 1001));
        else {
            var b = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var a = new FacebookPaymentShopLayer;
                createMaskLayer(a);
                b.addChild(a, 10);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    createShopUI: function(a) {
        a = new ShopLayer(a);
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    recordReward: function(a) {
        a = this.data[a];
        2006 === a.id ? gameUserData.gold += a.num : 2007 === a.id ? gameUserData.power += a.num : DataMgr.addItemByID(a.id, a.num)
    },
    stopAngle: function() {
        var a = this.mainUI.circle.getRotation() % 360;
        return 360 - 45 * this.rewardID - a % 360 + 2880
    },
    rotateCircleAction: function(a) {
        null != this.starLotteryAni && (this.starLotteryAni.removeFromParent(),
        this.starLotteryAni = null);
        this.starLotteryAni = createGameAnimation(res.res_lotterylight_json, "lotterylight_bg", 24);
        this.starLotteryAni.playCount = -1;
        this.starLotteryAni.setPosition(cc.p(350, 950));
        this.mainUI.monsternode.addChild(this.starLotteryAni, -1);
        this.lightingAnimation(EVENTMGR_ID.LOTTERY_LIGHTING_F);
        this.playPointerAnimation(a);
        a = cc.rotateBy(5, a);
        a.easing(cc.easeInOut(4));
        var b = this;
        this.scheduleOnce(function() {
            EventMgr.emit(EVENTMGR_ID.REFRESH_POT);
            b.refreshFreeSpin();
            b.initGoldText();
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD);
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO);
            b.isRun = !0;
            b.initRecord();
            b.createRewardNode()
        }
        .bind(this), 4.8);
        var c = cc.callFunc(function() {
            null != this.starLotteryAni && (this.starLotteryAni.removeFromParent(),
            this.starLotteryAni = null)
        }, this);
        this.mainUI.circle.runAction(cc.sequence(a, c))
    },
    playPointerAnimation: function(a) {},
    getSpeed: function() {
        this.baseSpeed += this.speedStep;
        0 > this.baseSpeed && (this.baseSpeed = 0);
        return this.baseSpeed
    },
    treeShake: function() {},
    acceleratedAction: function() {
        var a = cc.rotateBy(1, 360);
        a.easing(cc.easeExponentialIn(1));
        return a
    },
    uniformAction: function() {
        return cc.rotateBy(2, 720)
    },
    decelerateAction: function() {
        var a = cc.rotateBy(1, 360);
        a.easing(cc.easeExponentialOut(1));
        return a
    },
    getRewardID: function() {
        for (var a = Utils.getRandomNum(100), b = 0, c = 0; c < Global.lotteyRewards.length; ++c) {
            var d = Global.lotteyRewards[c].probability;
            if (b < a && a <= b + d)
                return c;
            b += d
        }
        return 0
    },
    addRecord: function(a) {
        3 <= gameUserData.lotteryRecords.length && gameUserData.lotteryRecords.splice(0, 1);
        a = this.data[a];
        a = "get: " + DataMgr.getElementDataByID(a.id)[Global.language] + " x " + a.num;
        gameUserData.lotteryRecords.push(a)
    },
    update: function(a) {
        this.during += a;
        2 >= this.acceleratedTime ? (this.accelerated(360, this.during),
        this.acceleratedTime += a) : 4 >= this.during ? (0 === this.uniform && (this.uniform = 360 * this.acceleratedTime),
        this.uniformTime += a,
        this.uniformSpeed(this.uniform, this.uniformTime)) : (this.decelerateTime += a,
        this.decelerate(this.uniform, 90, this.decelerateTime))
    },
    accelerated: function(a, b) {
        this.mainUI.circle.setRotation(a * b * b)
    },
    uniformSpeed: function(a, b) {
        this.mainUI.circle.setRotation(a * b)
    },
    decelerate: function(a, b, c) {
        this.mainUI.circle.setRotation(a * c - b * c * c)
    },
    onLottery: function() {
        cc.log("on lottery !!!");
        this.isRun || (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        this.lottery())
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.isRun || this.removeFromParent()
    },
    createRewardNode: function() {
        var a = new LotteryRewardNode(this.data[this.rewardID].id);
        a.rewardnum = this.data[this.rewardID].num;
        createMaskLayer(a);
        this.getParent().addChild(a, 999)
    },
    initGoldText: function() {
        this.mainUI.aw_fnttype27_goldText.setString(gameUserData.gold + "")
    }
})
  , LotteryRewardNode = cc.Node.extend({
    mainUI: null,
    id: 0,
    ctor: function(a) {
        this._super();
        this.id = a || 0
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.initIcon();
        this.refreshTips();
        this.lightAction();
        this.flowerAction();
        engine.gameSound.playEffect(soundRes.sound_lottery_get_reward)
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(lotteryUIRes.res_lottery_node_json);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.btnGet, this.onGet.bind(this), buttonScalingType)
    },
    initIcon: function() {
        var a = DataMgr.getElementDataByID(this.id).icon
          , b = new cc.Sprite("#element/" + a + "_big.png")
          , a = createGameAnimation(lotteryUIRes.res_lottery_json, "lotterymc", 24);
        a.playCount = 1;
        a.getBitmapByUrlName("png1.png").addChild(b);
        b.x = 120;
        b.y = 100;
        var b = a.getBitmapByUrlName("png2.png")
          , c = new GameArtWord("fnttype2");
        c.alignmentType = artWordMiddle;
        c.setString("x" + this.rewardnum.toString());
        c.setScale(2);
        b.addChild(c);
        c.x = 60;
        c.y = -42;
        this.mainUI.addChild(a);
        a.x = 360;
        a.y = 640
    },
    getLotteryTipsData: function() {
        for (var a = 0; a < Global.lotteyTips.length; ++a)
            if (this.id === Global.lotteyTips[a].id)
                return Global.lotteyTips[a];
        return null
    },
    refreshTips: function() {},
    lightAction: function() {},
    flowerAction: function() {},
    onGet: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE);
        this.removeFromParent()
    },
    showInterAd: function() {}
})
  , LotteryWatchNode = cc.Node.extend({
    mainUI: null,
    ctor: function(a) {
        this._super();
        this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(lotteryUIRes.res_lottery_watch_node);
        this.addChild(this.mainUI);
        var a = new cc.LabelTTF("" + Global.watchDesStr,"jellyboom_font",26);
        a.x = -25;
        a.y = this.mainUI.lotteryicon.y - 3;
        this.mainUI.addChild(a);
        this.mainUI.lotteryicon.x = a.x + a.getContentSize().width / 2 + 20;
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnWatch, this.onWatch.bind(this), buttonScalingType)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE);
        this.removeFromParent()
    },
    onWatch: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.showRewardAd();
        this.removeFromParent()
    },
    showRewardAd: function() {
        if (isNotFbGame)
            Global.isWatchAD = !0,
            gameUserData.watchAdsNum -= 1,
            gameUserData.freeLotteyNum = 1,
            gameSDK.saveUserData(getSaveFBData(), null),
            EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE);
        else if (isAdLoading)
            EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE);
        else {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var a = null;
            FBInstant.getRewardedVideoAsync(rewardedVideoID4).then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                Global.isWatchAD = !0;
                isAdLoading = !1;
                gameUserData.watchAdsNum -= 1;
                gameUserData.freeLotteyNum = 1;
                gameSDK.saveUserData(getSaveFBData(), null);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE)
            }).catch(function(a) {
                isAdLoading = !1;
                gameSDK.saveUserData(getSaveFBData(), null);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                EventMgr.emit(EVENTMGR_ID.LOTTERY_COMPLETE);
                var c = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (c = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, c)
            })
        }
    }
});
var that = null
  , firstLoad = !0
  , isFriendInfoReturn = !1
  , ChooseLevelLayer = cc.Layer.extend({
    mainUI: null,
    totalHeight: 0,
    maptotalHeight: 0,
    mapNode: null,
    touchStartY: 0,
    chooseLv: 0,
    isCanTouch: !0,
    map: null,
    time: 0,
    targetBox: null,
    tarBoxKey: null,
    powerUpdateTimeCount: 0,
    endlessPowerUpdateTimeCount: 0,
    giftAnimation: null,
    isRefreshMap: null,
    isSelfImage: null,
    isTargetMove: null,
    isMapMove: null,
    isFriendTarget: null,
    isLittleRank: null,
    targetBoxMoveY: 0,
    targetBoxMoveLimitY: 0,
    targetBoxSpeed: 0,
    completeY: null,
    playerHeadArray: null,
    surpassNode: null,
    gift: null,
    ctor: function() {
        this._super();
        this.maptotalHeight = this.totalHeight = this.chooseLv = 0;
        Global.resurgenceTime = 0;
        this.isCanTouch = !0;
        this.tarBoxKey = this.targetBox = this.giftAnimation = this.map = null;
        this.isMapMove = this.isLittleRank = this.isFriendTarget = this.isTargetMove = this.isSelfImage = this.isRefreshMap = !1;
        this.playerHeadArray = {};
        this.gift = this.surpassNode = null
    },
    onEnter: function() {
        this._super();
        that = this;
        gameUserData.lv = 299 < gameUserData.lv ? 299 : gameUserData.lv;
        this.initData();
        this.initUI();
        this.initText();
        this.initMapBg();
        this.registerEvent();
        this.refreshPower();
        this.createLevelBox();
        firstLoad && (firstLoad = !1,
        gameUserData.power < Global.maxPower && this.checkPower());
        cc.log("判断是否需要创建机器人:1");
        if (1 == gameUserData.is_today_first_login && !1 == Global.isCreateTargetR || 0 >= Global.targetPeople.length) {
            if (0 >= gameUserData.lv)
                return;
            gameUserData.todayInitLv = gameUserData.lv;
            Global.isCreateTargetR = !0;
            createTargetPeopleDate()
        }
        for (var a = 0; a < Global.targetPeople.length; a++) {
            var b = Global.targetPeople[a];
            if (!0 == isNaN(b.starNum) || !0 == isNaN(b.level) || !0 == isNaN(b.getHonor)) {
                createTargetPeopleDate();
                break
            }
        }
        for (a = 0; a < Global.targetPeople.length; a++)
            ;
        this.scheduleUpdate()
    },
    flyParachute: function(a) {
        if (!(5 >= gameUserData.lv || 0 >= gameUserData.watchParachuteAd_count)) {
            null !== this.gift && (this.gift.removeFromParent(),
            this.gift = null);
            var b = this;
            this.gift = new cc.Sprite("#sign/parachute" + a + ".png");
            this.gift.x = -this.gift.getContentSize().width / 2;
            this.gift.y = 532;
            this.mainUI.addChild(this.gift, 1E3);
            engine.gameEvent.createMouseUp(this.gift, this.onParachute.bind(this, a), buttonScalingType);
            a = [cc.p(222, 176), cc.p(163, -119), cc.p(360, 0)];
            var c = [cc.p(-222, 176), cc.p(-163, -119), cc.p(-360, 0)]
              , d = [cc.p(-222, 176), cc.p(-163, -119), cc.p(-200, 0)];
            this.gift.runAction(cc.sequence(cc.scaleTo(0.5, 0.9), cc.scaleTo(0.5, 1)).repeatForever());
            this.gift.runAction(cc.sequence(cc.bezierBy(2.5, a), cc.bezierBy(2.5, a), cc.delayTime(2), cc.bezierBy(2.5, c), cc.bezierBy(2.5, d), cc.bezierBy(2.5, a), cc.bezierBy(2.5, a), cc.callFunc(function() {
                b.gift.x = -b.gift.getContentSize().width / 2
            })).repeatForever())
        }
    },
    onParachute: function(a) {
        a = new ParachuteLayer(a);
        a.chooseLevelLayer = this;
        createMaskLayer(a);
        this.addChild(a, 101)
    },
    removeGift: function() {
        null !== this.gift && (this.gift.removeFromParent(),
        this.gift = null)
    },
    addSurpassTips: function() {
        function a(a) {
            a = new cc.Sprite(a);
            a.setScale(78 / a.getContentSize().width);
            a.x = c.x;
            a.y = c.y;
            null != d.surpassNode && d.surpassNode.addChild(a)
        }
        var b = getHonorRankData(gameSDK.sdkPlayInfo.id, 1);
        if (!(1 >= b.rankNum)) {
            b = getHonorRankByType(1)[b.rankNum - 2];
            this.surpassNode = new cc.Node;
            this.mainUI.addChild(this.surpassNode, 10);
            var c = new cc.Sprite("#choose_map/headicon.png");
            c.x = 540;
            c.y = 1015;
            this.surpassNode.addChild(c);
            var d = this
              , e = new Image;
            e.crossOrigin = "anonymous";
            var f = "res/iconren.png";
            null != b.photo && (f = b.photo);
            "" != f ? -1 != f.indexOf("others/head") ? a("#" + f) : (e.src = f,
            e.onload = function() {
                a(e)
            }
            ) : (e.src = f,
            e.onload = function() {
                a(e)
            }
            );
            f = new cc.Sprite("#honor/honornumbg.png");
            f.x = c.x;
            f.y = c.y - 62;
            f.setScaleX(1.4);
            f.setScaleY(1.1);
            this.surpassNode.addChild(f);
            var g = new cc.Sprite("#honor/honoricon_s.png");
            g.x = f.x - 15;
            g.y = f.y;
            this.surpassNode.addChild(g);
            var h = new cc.LabelTTF(b.getHonor,defaultTxt,20);
            this.surpassNode.addChild(h);
            h.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
            h.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            h.setAnchorPoint(cc.p(0, 0.5));
            h.x = g.x + 15;
            h.y = f.y + 2;
            f = b.level - gameUserData.lv + 1;
            b = new cc.Sprite("#choose_map/paopao.png");
            b.x = 316;
            b.y = c.y;
            this.mainUI.addChild(b, 10);
            f = Global.surpassDes.replace("%s", f);
            f = new cc.LabelTTF(f,"jellyboom_font",35);
            this.mainUI.addChild(f, 10);
            f.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            f.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            f.setAnchorPoint(cc.p(0.5, 0.5));
            f.enableStroke(cc.color("#233891"), 2);
            f.setFontFillColor(cc.color(255, 255, 255));
            f.x = b.x - 13;
            f.y = b.y
        }
    },
    surpassNodeBlink: function() {
        null != this.surpassNode && (this.surpassNode.runAction(cc.blink(1, 3)),
        EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.surpassTips))
    },
    loadDecorateAnimation: function() {
        engine.gameBackgroundLoad.addLoadRes("res/csi/stoneplist.plist");
        engine.gameBackgroundLoad.addLoadRes("res/csi/stoneplist.png");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/monster1/monster1.json");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/monster2/monster2.json");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/monster3/monster3.json");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/monster4/monster4.json");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/gameplayeffect1/gameplayeffect1.json");
        engine.gameBackgroundLoad.addLoadRes("res/csi/transmissionplist.plist");
        engine.gameBackgroundLoad.addLoadRes("res/csi/transmissionplist.png");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/levelbox/levelbox.json");
        engine.gameBackgroundLoad.addLoadRes("res/pngdata/levelicon/levelicon.json")
    },
    createTargetBox: function() {
        0 >= gameUserData.lv || (0 == parseInt(gameUserData.boxget) && this.addTargetBoxTime(),
        this.openOtherUI1())
    },
    openOtherUI1: function() {
        if (0 < Global.addHonorNum) {
            var a = 0
              , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
              , b = new cc.Layer;
            createMaskLayer(b);
            currentScene.addChild(b, 10001);
            var c = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            c.playCount = 1;
            c.playFrameIndex = 27;
            c.setPosition(cc.p(a, viewGameHeigh / 2 + 50));
            c.getBitmapByUrlName("sbg6.png").setSpriteFrame("element/honor.png");
            b.addChild(c);
            a = new GameArtWord("fnttype1");
            a.alignmentType = artWordMiddle;
            a.setString("x" + Global.addHonorNum);
            a.x = 0;
            a.y = -80;
            a.setScale(1.2);
            c.addChild(a, 3);
            c.layer = b;
            var d = this;
            Global.addHonorNum = 0;
            c.frameCompleteFun = function() {
                c.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.5, 0.1), cc.moveTo(0.5, 270, 80)), cc.callFunc(function() {
                    c.layer.removeFromParent();
                    d.openOtherUI2()
                })))
            }
        } else
            this.openOtherUI2()
    },
    openOtherUI2: function() {
        !0 == this.isHaveTargetLayer() ? this.updateTargetBoxPage() : this.addNextTargetLayer()
    },
    isHaveTargetLayer: function() {
        var a = getServerTomorrow() - getCheckoutServerTime();
        return 1 == Global.isShowTargetBox && 0 < a && gameUserData.lv < gameUserData.tagetlvl && 0 == parseInt(gameUserData.boxget) ? !0 : !1
    },
    addNextTargetLayer: function() {
        300 <= gameUserData.lv || this.chooseNext()
    },
    updateTargetBoxPage: function() {
        if (!(300 <= gameUserData.lv)) {
            Global.isShowTargetBox = 0;
            null != this.targetBox && this.targetBox.setVisible(!1);
            null != this.tarBoxKey && this.tarBoxKey.setVisible(!1);
            var a = new TargetBoxLayer(this.showTargetBox.bind(this));
            createMaskLayer(a);
            this.addChild(a, 30);
            gameSDK.saveUserData(getSaveFBData(), null)
        }
    },
    showTargetBox: function() {
        300 > gameUserData.lv && 1 <= gameUserData.lv && this.chooseNext();
        null != this.targetBox && this.targetBox.setVisible(!0);
        null != this.tarBoxKey && this.tarBoxKey.setVisible(!0)
    },
    addTargetBoxKey: function() {
        this.tarBoxKey = null;
        gameUserData.lv < parseInt(gameUserData.tagetlvl) ? this.tarBoxKey = createGameAnimation(res.res_targetbox_json, "boxkeyshake", 24) : this.tarBoxKey = createGameAnimation(res.res_targetbox_json, "boxkeyrun", 24);
        engine.gameEvent.createMouseUp(this.tarBoxKey, this.clickTarBoxKey.bind(this), buttonScalingType, cc.rect(-90, -90, 180, 180));
        var a, b;
        for (b in Global.newMapInfo) {
            var c = Global.newMapInfo[b];
            if (this.chooseLv >= c.levelRange[0] && this.chooseLv <= c.levelRange[1]) {
                a = c.tarBoxKeyPos;
                break
            }
        }
        this.tarBoxKey.x = a.x;
        this.tarBoxKey.y = a.y;
        this.mainUI.addChild(this.tarBoxKey, 101)
    },
    clickTarBoxKey: function(a, b) {
        if (gameUserData.lv >= parseInt(gameUserData.tagetlvl)) {
            var c = new cc.Layer
              , d = new cc.DrawNode;
            d.drawRect(cc.p(0, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
            c.addChild(d);
            this.addChild(c, 1E3);
            engine.gameEvent.createMouseDown(c, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
            this.tarBoxKey.maskLayer = c;
            var e = this
              , c = cc.moveTo(0.7, cc.p(655, 885));
            this.tarBoxKey.runAction(cc.sequence(c, cc.callFunc(function() {
                e.targetBox.setVisible(!1);
                e.tarBoxKey.setVisible(!1);
                var a = createGameAnimation(res.res_starbox_json, "targetboxopen", 24);
                a.setScale(0.8);
                a.setPosition(e.targetBox.getPosition());
                a.playCount = 1;
                a.playFrameIndex = 34;
                e.mainUI.addChild(a, 21);
                a.isRemoveFromComplete = !0;
                a.frameCompleteFun = function() {
                    e.tarBoxKey.maskLayer.removeFromParent();
                    e.targetBox.removeFromParent();
                    e.tarBoxKey.removeFromParent();
                    var a = new TargetBoxGetLayer;
                    a.chooseLevelLayer = e;
                    e.addChild(a, 102)
                }
                ;
                var b = new cc.Sprite("#pngdata/starbox/iconeff_3.png");
                b.x = 0;
                b.y = -5;
                b.setScale(1.25);
                a.addChild(b, -1)
            })))
        } else
            c = cc.formatStr(Global.tarBoxKeyTips, gameUserData.tagetlvl),
            EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, c)
    },
    targetBoxRewardAction: function() {
        var a = new cc.Sprite("#choose_map/power.png");
        a.setScale(1.5);
        a.setPosition(cc.p(240, 676));
        this.mainUI.addChild(a, 21);
        var b = cc.spawn(cc.scaleTo(0.8, 0.5), cc.moveTo(0.8, cc.p(56, 1163)));
        a.runAction(cc.sequence(b, cc.callFunc(function(a) {
            a.removeFromParent();
            EventMgr.emit(EVENTMGR_ID.GAME_ITEMS);
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)
        }, a)));
        a = new cc.Sprite("#resurgence/diamond.png");
        a.setPosition(cc.p(486, 676));
        this.mainUI.addChild(a, 21);
        b = cc.spawn(cc.scaleTo(0.8, 0.5), cc.moveTo(0.8, cc.p(56, 1211)));
        a.runAction(cc.sequence(b, cc.removeSelf()))
    },
    addTargetBoxTime: function() {
        var a = getServerTomorrow() - getCheckoutServerTime();
        if (0 < a) {
            this.addTargetBoxKey();
            this.targetBox = createGameAnimation(res.res_starbox_json, "boxawait", 24);
            this.targetBox.x = 655 + uiOfferX;
            this.targetBox.y = 885;
            this.mainUI.addChild(this.targetBox, 20);
            this.targetBox.setScale(0.8);
            this.targetBox.realScale = 0.8;
            engine.gameEvent.createMouseUp(this.targetBox, this.clickTargetBox.bind(this), null, cc.rect(-90, -90, 180, 180));
            if (gameUserData.lv >= parseInt(gameUserData.tagetlvl)) {
                var b = createGameAnimation(res.res_targetbox_json, "canreward", 24);
                this.targetBox.addChild(b, 1)
            }
            b = new cc.Sprite("#choose_map/leveliconbg.png");
            b.x = 0;
            b.y = -5;
            b.setScale(1.25);
            this.targetBox.addChild(b, -1);
            b = new cc.LabelTTF(getComputeTime(a),"jellyboom_font",24);
            b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            b.enableStroke(cc.color(10, 90, 186), 2);
            this.targetBox.addChild(b, 3);
            b.x = 0;
            b.y = -55;
            b.setScale(1.1);
            this.targetBox.remaindTime = a;
            this.targetBox.timeTxt = b;
            this.schedule(this.updateTargetBoxTime, 1)
        }
    },
    clickTargetBox: function() {
        EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.targetBoxTips);
        this.targetBoxSpeed = this.targetBoxMoveY = this.targetBoxMoveLimitY = 0
    },
    moveToTargetBtn: function(a, b) {
        this.surpassNodeBlink()
    },
    update: function() {
        !0 == this.isMapMove && this.updateChooseNodeIsShow();
        !0 == this.isTargetMove && (this.mapNode.y += this.targetBoxSpeed,
        this.updateChooseNodeIsShow(),
        this.targetBoxMoveY += Math.abs(this.targetBoxSpeed),
        this.targetBoxMoveY >= Math.abs(this.targetBoxMoveLimitY) && (this.mapNode.y = this.completeY,
        this.isTargetMove = !1));
        if (!1 == isFriendInfoReturn) {
            var a = gameSDK.getPlayerEntriesboardLeaderboardData(FB_LEVEL_RANK_KEY);
            cc.log("好友排行榜---------------------------", a);
            if (null != a) {
                friendList = [];
                for (var b = 0; b < a.length; b++) {
                    var c = a[b]
                      , d = JSON.parse(c.data)
                      , e = {};
                    e.name = c.name;
                    e.level = parseInt(d.level);
                    e.maxstar = parseInt(d.maxstar);
                    e.image = c.photo;
                    e.photo = c.photo;
                    e.pid = c.id;
                    e.id = c.id;
                    e.playerid = c.id;
                    e.rank = c.rank;
                    c = 0;
                    null != gameUserData && null != gameUserData.lv && (c = parseInt(gameUserData.lv));
                    e.beRanked = e.level < c ? !0 : e.playerid == gameSDK.sdkPlayInfo.id ? !0 : !1;
                    e.getHonor = Math.ceil((e.level - c) * Global.friendGetHonorEveryLv);
                    friendList.push(e)
                }
                cc.log("get friends:", friendList);
                friendList.sort(function(a, b) {
                    return parseInt(b.level) - parseInt(a.level)
                });
                isFriendInfoReturn = !0
            }
        }
        !1 == this.isFriendTarget && !0 == isFriendInfoReturn && (this.isFriendTarget = !0);
        !0 == this.isSelfImage && !0 == this.isFriendTarget && this.addLittleRank();
        if (!0 == Global.isSendWeekGame && !1 == Global.isGetWeekRank && (a = gameSDK.getPlayerWeekGameEntriesboardLeaderboardData(FB_HURT_RANK_KEY),
        null != a)) {
            Global.weekRank = [];
            for (b = 0; b < a.length; b++)
                e = a[b],
                c = JSON.parse(e.data),
                d = {},
                d.hurt = c.hurt,
                d.last_hurt = c.last_hurt,
                d.name = e.name,
                d.imageurl = e.photo,
                d.playerid = e.id,
                d.rank = e.rank,
                Global.weekRank.push(d);
            Global.weekRank.sort(function(a, b) {
                return parseInt(a.rank) - parseInt(b.rank)
            });
            Global.isGetWeekRank = !0;
            cc.log("weekgameInfo---------------------打开周赛");
            EventMgr.emit(EVENTMGR_ID.OPEN_WEEKGAME)
        }
        if (0 < gameSDK.supplementPropList.length && !0 != isShowSupplement) {
            isShowSupplement = !0;
            for (b = 0; b < gameSDK.supplementPropList.length; b++) {
                a = Global.payShopInfo[Global.payIdbyShopInfo[gameSDK.supplementPropList[b].productID].shopInfoID];
                for (b = 0; b < a.itemInfo.length; ++b)
                    2006 === a.itemInfo[b].id ? (gameUserData.gold += a.itemInfo[b].num,
                    EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[b].id ? (gameUserData.power += a.itemInfo[b].num,
                    EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(a.itemInfo[b].id, a.itemInfo[b].num);
                EventMgr.emit(EVENTMGR_ID.PAYMENT_SUCCESS, a)
            }
            cc.log("开始保存信息保存成功", gameSDK.supplementPropList);
            gameSDK.saveUserData(getSaveFBData(), function() {
                cc.log("信息保存成功，消单", gameSDK.supplementPropList);
                for (var a = 0; a < gameSDK.supplementPropList.length; a++)
                    gameSDK.consumeFbItem(gameSDK.supplementPropList[a].purchaseToken)
            })
        }
    },
    updateTargetBoxTime: function() {
        var a = getServerTomorrow() - getCheckoutServerTime();
        0 < a ? this.targetBox.timeTxt.setString(getComputeTime(a)) : (null != this.targetBox && (this.targetBox.removeFromParent(),
        this.targetBox = null),
        null != this.tarBoxKey && (this.tarBoxKey.removeFromParent(),
        this.tarBoxKey = null),
        this.unschedule(this.updateTargetBoxTime))
    },
    refreshRankPot: function() {},
    onExit: function() {
        this.surpassNode = null;
        this._super();
        EventMgr.remove(EVENTMGR_ID.CHOOSE_TEXT, this);
        EventMgr.remove(EVENTMGR_ID.ENTER_GAME, this);
        EventMgr.remove(EVENTMGR_ID.SHOW_ADD, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_POWER_INFO, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_GOLD, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_POT, this);
        EventMgr.remove(EVENTMGR_ID.INFINITE_POWER, this);
        EventMgr.remove(EVENTMGR_ID.REFRESH_SELF_IMG, this);
        EventMgr.remove(EVENTMGR_ID.OPEN_WEEKGAME, this);
        EventMgr.remove(EVENTMGR_ID.CLOSE_MESSAGE_BTN, this);
        this.unscheduleAllCallbacks()
    },
    loadDataFromServer: function() {
        if (!hasLoadedData) {
            if (null == selfJsonData || null == selfJsonData.stars) {
                gameUserData.gold = 0;
                gameUserData.stars = 0;
                gameUserData.lv = 0;
                gameUserData.killElement = 0;
                gameUserData.spendDiamond = 0;
                gameUserData.completeTasks = [0, 0, 0, 0];
                gameUserData.items = {};
                gameUserData.lotteryRecords = [];
                gameUserData.freeLotteyNum = 1;
                gameUserData.levelStar = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                gameUserData.rewardLevel = [];
                gameUserData.guideLevel = [];
                gameUserData.isGetItem = [];
                gameUserData.lastDay = 0;
                gameUserData.power = 10;
                var a = getCurrencyTimeSecond();
                gameUserData.beginRecoveryTime = a;
                gameUserData.RetainRecoveryTime = Global.recoverTime;
                gameUserData.watchAdsNum = 1;
                gameUserData.resugenceAdsNum = 3;
                gameUserData.supportNum = 5;
                gameUserData.gift = 1;
                gameUserData.getNextGiftTime = 0;
                gameUserData.recoveryPowerNum = 3;
                gameUserData.totalScore = 0;
                gameUserData.beSupportNum = 0;
                gameUserData.firstGift = 1;
                gameUserData.getBoxID = [0, 0, 0, 0, 0];
                gameUserData.signDay = -1;
                gameUserData.signNum = 0;
                gameUserData.touchRank = 0;
                gameUserData.getInfinitePowerTime = 0;
                gameUserData.isInfiniteOver = 0;
                gameUserData.leftGetDiamondNum = 3;
                gameUserData.usePowerNum = 0;
                gameUserData.isDailyGift = 1;
                1 < Global.mapIndex && (Global.mapIndex = Math.ceil(gameUserData.lv / 100),
                Global.mapIndex = 0 < Global.mapIndex ? Global.mapIndex : 1);
                gameUserData.tagetlvl = 15;
                gameUserData.boxget = 0;
                gameUserData.pay_count = 0;
                gameUserData.free_count = 1;
                gameUserData.week_gift_reveived = 0;
                gameUserData.week_gift = 0;
                gameUserData.hurt_gift_package = [0, 0, 0, 0, 0, 0, 0];
                gameUserData.myHurt = 0;
                gameUserData.lastHurt = 0;
                gameUserData.week_refresh = 0;
                gameUserData.week_share_num = 0;
                gameUserData.week_invite_num = 0;
                gameUserData.honor = 0;
                gameUserData.honor_free_box = 0;
                gameUserData.invite_ids = [];
                gameUserData.honor_invite_type = 0;
                gameUserData.honor_reward_index = 0;
                gameUserData.is_today_first_login = 1;
                gameUserData.todayInitLv = 0
            }
            hasLoadedData = !0
        }
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_choose_level_layer_json);
        this.addChild(this.mainUI, 10);
        var a = uiOfferX;
        if (null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json"))
            this.mainUI.btnSign = createGameAnimation("res/pngdata/levelicon/levelicon.json", "signicon", 24),
            engine.gameEvent.createMouseUp(this.mainUI.btnSign, this.onSign.bind(this), buttonScalingType, cc.rect(-80, -80, 160, 160));
        else {
            this.mainUI.btnSign = new cc.Sprite("#choose_map/leveliconbg.png");
            var b = new cc.Sprite("#choose_map/signin.png");
            this.mainUI.btnSign.addChild(b);
            engine.gameEvent.createMouseUp(this.mainUI.btnSign, this.onSign.bind(this), buttonScalingType);
            b.x = 50;
            b.y = 57;
            b = new cc.Sprite("#choose_map/signin2.png");
            this.mainUI.btnSign.addChild(b);
            b.x = 50;
            b.y = 7
        }
        this.mainUI.btnSign.x = 69;
        this.mainUI.btnSign.y = 1024;
        this.mainUI.addChild(this.mainUI.btnSign);
        this.mainUI.btnSign.pot3 = new cc.Sprite("#guide/pot.png");
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnSign.pot3.x = 40,
        this.mainUI.btnSign.pot3.y = 40) : (this.mainUI.btnSign.pot3.x = 90,
        this.mainUI.btnSign.pot3.y = 90);
        this.mainUI.btnSign.addChild(this.mainUI.btnSign.pot3, 1E3);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnPower = createGameAnimation("res/pngdata/levelicon/levelicon.json", "notlimiteheart", 24),
        this.mainUI.btnPower.getBitmapByUrlName("iconeff_12.png").setVisible(!1),
        engine.gameEvent.createMouseUp(this.mainUI.btnPower, this.onPower.bind(this), buttonScalingType, cc.rect(-80, -80, 160, 160))) : (this.mainUI.btnPower = new cc.Sprite("#choose_map/limitpower.png"),
        b = new cc.Sprite("#choose_map/leveliconbg.png"),
        engine.gameEvent.createMouseUp(this.mainUI.btnPower, this.onPower.bind(this), buttonScalingType),
        this.mainUI.btnPower.addChild(b, -1),
        b.x = 42,
        b.y = 40);
        this.mainUI.btnPower.x = 69;
        this.mainUI.btnPower.y = 737;
        this.mainUI.btnPower.power_time = new cc.LabelTTF("00:00","jellyboom_font",24);
        this.mainUI.btnPower.power_time.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.btnPower.power_time.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.btnPower.power_time.enableStroke(cc.color(10, 90, 186), 2);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? this.mainUI.btnPower.power_time.setPosition(0, -45) : this.mainUI.btnPower.power_time.setPosition(42, -5);
        this.mainUI.btnPower.addChild(this.mainUI.btnPower.power_time, 1E3);
        this.mainUI.time_icon = new cc.Sprite("#sign/time_icon.png");
        this.mainUI.time_icon.x = 95;
        this.mainUI.time_icon.y = 712;
        this.mainUI.addChild(this.mainUI.time_icon, 1E3);
        this.mainUI.time_icon.setScale(0.7);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnGift = createGameAnimation("res/pngdata/levelicon/levelicon.json", "freeicon", 24),
        this.giftAnimation = createGameAnimation("res/pngdata/levelicon/levelicon.json", "freestar", 24),
        this.giftAnimation.x = 0,
        this.giftAnimation.y = -10,
        this.mainUI.btnGift.addChild(this.giftAnimation, 1E3)) : (this.mainUI.btnGift = new cc.Sprite("#choose_map/leveliconbg.png"),
        b = new cc.Sprite("#choose_map/freegift.png"),
        this.mainUI.btnGift.addChild(b),
        b.x = 54,
        b.y = 55);
        this.mainUI.btnGift.x = 655;
        this.mainUI.btnGift.y = 1024;
        this.mainUI.btnGift.gift_text = new cc.Sprite("#choose_map/free.png");
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnGift.gift_text.x = 0,
        this.mainUI.btnGift.gift_text.y = -45) : (this.mainUI.btnGift.gift_text.x = 54,
        this.mainUI.btnGift.gift_text.y = 10);
        this.mainUI.btnGift.addChild(this.mainUI.btnGift.gift_text, 1E3);
        this.mainUI.btnGift.giftTimeTxt = new cc.LabelTTF("00:00","jellyboom_font",24);
        this.mainUI.btnGift.giftTimeTxt.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.btnGift.giftTimeTxt.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.btnGift.giftTimeTxt.enableStroke(cc.color(10, 90, 186), 2);
        this.mainUI.btnGift.giftTimeTxt.setPosition(0, -45);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? this.mainUI.btnGift.giftTimeTxt.setPosition(0, -45) : this.mainUI.btnGift.giftTimeTxt.setPosition(54, 10);
        this.mainUI.btnGift.addChild(this.mainUI.btnGift.giftTimeTxt, 1E3);
        this.mainUI.btnGift.giftTimeTxt.setVisible(!1);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnDailyGift = createGameAnimation("res/pngdata/levelicon/levelicon.json", "shareicon", 24),
        b = createGameAnimation("res/pngdata/levelicon/levelicon.json", "shareheart", 24),
        b.x = 58,
        b.y = 96,
        this.mainUI.btnDailyGift.addChild(b, 1E3),
        engine.gameEvent.createMouseUp(this.mainUI.btnDailyGift, this.onDailyGift.bind(this), buttonScalingType, cc.rect(-80, -80, 160, 160))) : (this.mainUI.btnDailyGift = new cc.Sprite("#choose_map/leveliconbg.png"),
        b = new cc.Sprite("#choose_map/share.png"),
        this.mainUI.btnDailyGift.addChild(b),
        engine.gameEvent.createMouseUp(this.mainUI.btnDailyGift, this.onDailyGift.bind(this), buttonScalingType),
        b.x = 60,
        b.y = 67);
        this.mainUI.btnDailyGift.x = 929;
        this.mainUI.btnDailyGift.y = 859;
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? (this.mainUI.btnWeekGame = createGameAnimation("res/pngdata/levelicon/levelicon.json", "weekgameicon", 24),
        engine.gameEvent.createMouseUp(this.mainUI.btnWeekGame, this.clickBtnWeekGame.bind(this), buttonScalingType, cc.rect(-80, -80, 160, 160)),
        b = this.mainUI.btnWeekGame.getBitmapByUrlName("iconeff_27.png"),
        this.mainUI.btnWeekGame.freeIcon = b,
        this.mainUI.btnWeekGame.pot3 = new cc.Sprite("#guide/pot.png"),
        this.mainUI.btnWeekGame.pot3.x = 40,
        this.mainUI.btnWeekGame.pot3.y = 40,
        this.mainUI.btnWeekGame.addChild(this.mainUI.btnWeekGame.pot3, 2)) : (this.mainUI.btnWeekGame = new cc.Sprite("#choose_map/leveliconbg.png"),
        b = new cc.Sprite("#choose_map/weekgame.png"),
        b.x = 54,
        b.y = 60,
        this.mainUI.btnWeekGame.addChild(b),
        this.mainUI.btnWeekGame.pot3 = new cc.Sprite("#guide/pot.png"),
        this.mainUI.btnWeekGame.pot3.x = 100,
        this.mainUI.btnWeekGame.pot3.y = 100,
        this.mainUI.btnWeekGame.addChild(this.mainUI.btnWeekGame.pot3, 2),
        b = new cc.Sprite("#choose_map/free.png"),
        b.x = 54,
        b.y = 10,
        this.mainUI.btnWeekGame.addChild(b),
        this.mainUI.btnWeekGame.freeIcon = b,
        engine.gameEvent.createMouseUp(this.mainUI.btnWeekGame, this.clickBtnWeekGame.bind(this), buttonScalingType));
        this.updateWeekIconFree();
        this.mainUI.btnWeekGame.x = 69;
        this.mainUI.btnWeekGame.y = 880;
        this.mainUI.btnbackdown.x -= a;
        this.mainUI.btnSign.x -= a;
        this.mainUI.btnPower.x -= a;
        this.mainUI.time_icon.x -= a;
        this.mainUI.btnGift.x += a;
        this.mainUI.btnWeekGame.x -= a;
        this.mainUI.no_power.x -= a;
        this.mainUI.btnAddGem.x -= a;
        this.mainUI.btnbackdown.setVisible(!1);
        engine.gameEvent.createMouseUp(this.mainUI.btnbackdown, this.onBack.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.entergamebtn, this.enterGameFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.messagebtn, this.messagebtnfun.bind(this), buttonScalingType);
        0 == Global.isShopNewIcon && this.mainUI.btnshop.shopnew.setVisible(!1);
        this.mainUI.btnDailyGift.setVisible(!1);
        null != cc.loader.getRes("res/pngdata/levelicon/levelicon.json") ? engine.gameEvent.createMouseUp(this.mainUI.btnGift, this.onGift.bind(this), buttonScalingType, cc.rect(-80, -80, 160, 160)) : engine.gameEvent.createMouseUp(this.mainUI.btnGift, this.onGift.bind(this), buttonScalingType);
        this.mainUI.messagebtn.setVisible(!1);
        this.mainUI.messagebtn.messageicon.runAction(cc.sequence(cc.rotateTo(0.08, -10), cc.rotateTo(0.16, 20), cc.rotateTo(0.16, -20), cc.rotateTo(0.16, 20), cc.rotateTo(0.08, 0), cc.delayTime(0.7)).repeatForever());
        a = {};
        a.hurt = gameUserData.myHurt;
        a.last_hurt = 0;
        this.refreshGiftState();
        !0 == Global.isOpenWeekLayer && (this.openWeekGameLayer(),
        Global.isOpenWeekLayer = !1)
    },
    messagebtnfun: function() {
        var a = new MessageLayer;
        this.addChild(a, 1E3)
    },
    enterGameFun: function() {
        Global.chooseLv = this.chooseLv;
        Global.lastLevel = this.chooseLv;
        this.createTargetUI(this.chooseLv)
    },
    onMore: function() {
        gameSDK.logEvent("menuOpenTurnPage", 1, {
            menuOpenTurnPage: "menuOpenTurnPage"
        });
        var a = new TurnToOtherGameLayer;
        this.addChild(a, 1E3)
    },
    initFriendSp: function(a, b, c, d) {
        var e = 60;
        b > gameUserData.lv && (e = 30);
        console.log("initFriendSp: " + b);
        var f = 100 * (Global.mapIndex - 1) + 99;
        if (!(b < 100 * (Global.mapIndex - 1) || b > f)) {
            !0 == isNaN(b) && (b = 1);
            f = this.map.getChildByTag(b + 1);
            f = cc.p(f.getPosition().x, f.getPosition().y + e);
            e = new cc.Node;
            e.setPosition(f.x - 4, f.y + 30);
            null != Global.levelTarget["level" + (b + 1)] && 1 == Global.levelTarget["level" + (b + 1)].special && e.setPosition(f.x - 4, f.y + 40);
            that.map.addChild(e, 100);
            f = 54;
            0 == c && (f = 54);
            var g = a.getContentSize().width;
            a.setScale(f / g);
            e.addChild(a);
            a.y = 4;
            a = new cc.Sprite("res/pkwai_" + c + ".png");
            e.addChild(a, 100);
            this.playerHeadArray[b] = e;
            null != d && 0 < d && (b = new cc.Sprite("#honor/honornumbg.png"),
            e.addChild(b, 100),
            b.x = 55,
            b.y = -27,
            a = new cc.Sprite("#honor/honoricon_s.png"),
            b.addChild(a),
            a.x = 26,
            a.y = 12,
            d = new cc.LabelTTF(d,"jellyboom_font",18),
            b.addChild(d),
            d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT),
            d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER),
            d.setAnchorPoint(0, 0.5),
            d.setFontFillColor(cc.color(255, 255, 255)),
            d.enableStroke(cc.color(132, 46, 4), 2),
            d.x = a.x + 40,
            d.y = a.y + 1,
            c = a.getContentSize().width + d.getContentSize().width + 2,
            a.x = b.getContentSize().width / 2 - c / 2 + a.getContentSize().width / 2,
            d.x = a.x + a.getContentSize().width / 2 + 2)
        }
    },
    loadSelfImage: function() {
        var a = gameUserData.lv;
        selfData.myurl = gameSDK.sdkPlayInfo.photo;
        if (null != selfData.myurl && "" != selfData.myurl)
            if (0 == parseInt(gameUserData.boxget) && parseInt(gameUserData.tagetlvl) == a + 1)
                this.isSelfImage = !0;
            else if (!0 == checkIsHaveRobot(a))
                this.isSelfImage = !0;
            else if (!1 == this.isSelfImage) {
                this.isSelfImage = !0;
                var b = new Image;
                b.crossOrigin = "anonymous";
                b.src = isNotFbGame ? "res/iconren.png" : selfData.myurl;
                if (null != cc.spriteFrameCache.getSpriteFrame(b.src)) {
                    var c = new cc.Sprite("#" + b.src);
                    that.initFriendSp(c, a, 1)
                } else
                    b.onload = function() {
                        var c = new cc.Sprite(b);
                        that.initFriendSp(c, a, 1)
                    }
            }
    },
    addFriendHead: function() {
        for (var a = 0; a < Global.addMapFriendData.length; a++) {
            var b = Global.addMapFriendData[a]
              , c = b.level;
            if (0 == parseInt(gameUserData.boxget) && parseInt(gameUserData.tagetlvl) == c + 1) {
                cc.log("有钥匙不显示头像--------" + gameUserData.tagetlvl);
                break
            }
            if (!0 == checkIsHaveRobot(c))
                break;
            var d = b.image;
            if (null != cc.spriteFrameCache.getSpriteFrame(d))
                d = new cc.Sprite("#" + d),
                that.initFriendSp(d, c, 0, b.getHonor);
            else {
                var e = new Image;
                e.crossOrigin = "anonymous";
                e.src = isNotFbGame ? "res/iconren.png" : d;
                e.maxlv = c;
                e.getHonor = b.getHonor;
                e.onload = function() {
                    var a = new cc.Sprite(this);
                    that.initFriendSp(a, this.maxlv, 0, this.getHonor)
                }
            }
        }
    },
    addRobotTarget: function(a) {
        if (!(a >= Global.targetPeople.length)) {
            var b = Global.targetPeople[a]
              , c = b.level;
            cc.log("显示头像-----" + a + "头像数据：" + b);
            if (0 == parseInt(gameUserData.boxget) && parseInt(gameUserData.tagetlvl) == c + 1)
                cc.log("有钥匙不显示头像--------" + gameUserData.tagetlvl);
            else {
                var d = b.image;
                if (null != cc.spriteFrameCache.getSpriteFrame(d))
                    a = new cc.Sprite("#" + d),
                    that.initFriendSp(a, c, 0, b.getHonor);
                else {
                    cc.log("开始加载头像-----" + a);
                    var e = new Image;
                    e.crossOrigin = "anonymous";
                    e.src = isNotFbGame ? "res/iconren.png" : d;
                    e.onload = function() {
                        var a = new cc.Sprite(e);
                        that.initFriendSp(a, c, 0, b.getHonor)
                    }
                }
            }
        }
    },
    updateWeekIconFree: function() {
        0 < gameUserData.free_count && 10 <= gameUserData.lv ? (this.mainUI.btnWeekGame.freeIcon.setVisible(!0),
        this.mainUI.btnWeekGame.pot3.setVisible(!0)) : (this.mainUI.btnWeekGame.freeIcon.setVisible(!1),
        this.mainUI.btnWeekGame.pot3.setVisible(!1))
    },
    openWeekGameLayer: function() {
        var a = this;
        loadUIFun(getWeekGameRes(), function() {
            cc.spriteFrameCache.addSpriteFrames(weekGameRes.res_weekgame_plist1);
            cc.spriteFrameCache.addSpriteFrames(weekGameRes.res_weekgame_plist2);
            cc.spriteFrameCache.addSpriteFrames(weekGameRes.res_weekgameanimateilist_plist);
            EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            removeGameMaskLayer("loadUIMask");
            var b = new WeekGameRankLayer;
            a.addChild(b, 10)
        })
    },
    clickBtnWeekGame: function() {
        10 > gameUserData.lv ? EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockWeekGameTips) : (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        createGameMaskLayer("loadUIMask"),
        !1 == Global.isGetWeekRank ? !1 == Global.isSendWeekGame && (Global.isSendWeekGame = !0,
        gameSDK.getConnectedPlayerEntriesAsync(FB_HURT_RANK_KEY, Global.rankMaxNumber, 0)) : this.openWeekGameLayer())
    },
    refreshLotteryPot: function() {},
    getConfigData: function(a) {
        var b = Global.task["task" + a].length;
        return gameUserData.completeTasks[a - 1] >= b ? Global.task["task" + a][b - 1] : Global.task["task" + a][gameUserData.completeTasks[a - 1]]
    },
    initData: function() {
        this.dataArray = [];
        this.dataArray[0] = this.getStarsNum();
        this.dataArray[1] = gameUserData.lv;
        this.dataArray[2] = gameUserData.killElement;
        this.dataArray[3] = gameUserData.spendDiamond
    },
    isCompleteCurrentTask: function(a) {
        var b = this.getConfigData(a);
        return this.dataArray[a - 1] >= b.condition
    },
    refreshTaskPot: function() {},
    onAdd: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        1 > gameUserData.lv ? EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockHonorTips) : (EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK),
        this.createNoHeart())
    },
    createNoHeart: function() {
        var a = new NoHeartNode
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.addChild(a, 1001)
    },
    getStarsNum: function() {
        for (var a = 0, b = 0; b < gameUserData.levelStar.length; ++b)
            gameUserData.levelStar[b] && (a += gameUserData.levelStar[b]);
        return a
    },
    chooseNext: function(a) {
        if (Global.isNextLevel && Global.lastLevel === gameUserData.lv)
            if (1 === gameUserData.gift && 1E3 === Global.lastLevel)
                this.onGift(),
                Global.isNextLevel = !1;
            else {
                this.isCanTouch = !1;
                Global.isNextLevel = !1;
                var b = 0.5;
                null != a && (b = a);
                this.runAction(cc.sequence(cc.delayTime(b), cc.callFunc(function() {
                    Global.chooseLv = this.chooseLv;
                    Global.lastLevel = this.chooseLv;
                    this.enterGame()
                }, this)))
            }
    },
    initMap: function() {
        this.mapNode = new cc.Node;
        this.addChild(this.mapNode, 1);
        var a = this.createMap();
        this.mapNode.addChild(a, 1E4);
        this.map = a;
        if (1 === Global.mapIndex) {
            var b = new cc.Sprite("res/choose_map/map_bg1.jpg");
            b.attr({
                x: -100,
                y: this.maptotalHeight,
                anchorX: 0,
                anchorY: 0
            });
            b.setScale(1.25);
            this.mapNode.addChild(b, 1);
            this.maptotalHeight += 1280
        }
        this.refreshMap();
        this.initLevelItem(a);
        this.updateChooseNodeIsShow()
    },
    createMap: function() {
        var a = new cc.Layer
          , b = cc.loader.getRes("res/configdata/map" + Global.mapIndex + "/map" + Global.mapIndex + ".json");
        if (null == b)
            sendBugLog.bugInfoHttp("地图数据为空：" + Global.mapIndex);
        else {
            for (var c = 1; c < Global.gameSceneConfig[parseInt(Global.mapIndex) - 1]; c++) {
                var d = b["mc" + (c - 1)], e = 2560 * (parseInt(d.name.split("_")[1]) - 1), f;
                for (f in d)
                    if ("name" != f) {
                        var g = d[f]
                          , h = new cc.Sprite("#choose_map/choose_btn.png");
                        a.addChild(h);
                        h.x = parseInt(g.x) - 100;
                        h.y = -parseInt(g.y) + e;
                        g = g.url.split("im::")[1];
                        g = parseInt(g.slice(5, g.length));
                        h.setTag(g);
                        var k = g + 100 * (parseInt(Global.mapIndex) - 1);
                        if (null != Global.levelTarget["level" + k].special && 1 === Global.levelTarget["level" + k].special)
                            for (var m = 1; 5 > m; m++)
                                k = new cc.Sprite("#choose_map/star1.png"),
                                h.addChild(k),
                                1 === m ? (k.setRotation(-37),
                                k.setPosition(15, 94),
                                k.setScale(0.87)) : 2 === m ? (k.setRotation(-10),
                                k.setPosition(40, 109)) : 3 === m ? (k.setRotation(10),
                                k.setPosition(71, 109)) : 4 === m && (k.setRotation(30),
                                k.setPosition(95, 94),
                                k.setScale(0.87)),
                                h["star" + m] = k;
                        else
                            for (m = 1; 4 > m; m++)
                                k = new cc.Sprite("#choose_map/star1.png"),
                                h.addChild(k),
                                1 === m ? (k.setRotation(-30),
                                k.setPosition(11, 85),
                                k.setScale(0.87)) : 2 === m ? k.setPosition(40, 95) : 3 === m && (k.setRotation(30),
                                k.setPosition(70, 85),
                                k.setScale(0.87)),
                                h["star" + m] = k;
                        a["choose" + g] = h
                    }
            }
            return a
        }
    },
    updateChooseNodeIsShow: function() {
        if (null != this.map)
            for (var a = 1; 100 >= a; a++) {
                var b = this.map["choose" + a];
                0 > b.y + this.mapNode.y || 1280 < b.y + this.mapNode.y ? b.setVisible(!1) : b.setVisible(!0)
            }
    },
    initMapBg: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(79, 102, 219, 255), 0, cc.color(0, 0, 0, 170));
        this.addChild(a, -10);
        this.chooseLv = gameUserData.lv;
        300 > gameUserData.lv && (this.chooseLv += 1);
        this.mainUI.entergamebtn.aw_fnttype47_level.setString(this.chooseLv.toString());
        var b, c, d;
        for (d in Global.newMapInfo)
            if (a = Global.newMapInfo[d],
            this.chooseLv >= a.levelRange[0] && this.chooseLv <= a.levelRange[1]) {
                b = a.landIcon;
                c = a;
                break
            }
        d = new cc.Sprite("res/choose_map/" + b + ".png");
        a = parseInt(b.split("_")[1]);
        this.addChild(d, -5);
        d.x = 360;
        d.y = viewGameHeigh / 2 + 10;
        d.isLandNum = a;
        engine.gameEvent.createMouseUp(d, this.openJellyIsLand.bind(this), buttonScalingType, cc.rect(0, 50, 600, 550));
        if (300 > this.chooseLv)
            if (b = new cc.LabelTTF("","jellyboom_font",35),
            b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER),
            b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER),
            b.setColor(cc.color(255, 255, 255, 255)),
            b.enableStroke(cc.color(35, 56, 145), 2),
            b.setPosition(cc.p(360, 400)),
            this.mainUI.addChild(b, 10),
            d = a + 1,
            0 >= c.newElementIcon.length)
                10 >= d && (c = Global.newMapInfo["land_" + d],
                b.setString("Unlock " + c.landName + "in level " + c.lockLevel));
            else {
                for (var a = 0, e, f = 0; f < c.newElementIcon.length; f++) {
                    var g = c.newElementIcon[f];
                    if (g.level > this.chooseLv) {
                        a = g.level;
                        e = g.icon;
                        break
                    }
                }
                0 == a ? 10 >= d && (c = Global.newMapInfo["land_" + d],
                b.setString("Unlock " + c.landName + "in level " + c.lockLevel)) : (b.setString(Global.isLanddes1 + " " + a + ":"),
                b.x -= 35,
                c = new cc.Sprite("#element/" + e + ".png"),
                c.setPosition(cc.p(575, 400)),
                this.mainUI.addChild(c, 10),
                c.setScale(0.5))
            }
    },
    openJellyIsLand: function(a, b) {
        var c = b.getCurrentTarget().isLandNum
          , c = new NewJellyLandLayer(c);
        createMaskLayer(c);
        this.addChild(c, 100)
    },
    initLevelItem: function(a) {
        for (var b = a.getChildren(), c = 0; c < b.length; ++c) {
            var d = a["choose" + (c + 1)];
            d.setTag(c + 100 * (Global.mapIndex - 1) + 1);
            var e = ""
              , e = null != Global.levelTarget["level" + (c + 100 * (Global.mapIndex - 1) + 1)].special && 1 === Global.levelTarget["level" + (c + 100 * (Global.mapIndex - 1) + 1)].special ? "fnttype35" : "fnttype34"
              , e = new GameArtWord(e);
            e.alignmentType = artWordMiddle;
            d.addChild(e);
            e.setPosition(44, 22);
            d.lv = e;
            d.lv.setString(d.getTag() + "");
            var e = 0 < Global.lastLevel ? Global.lastLevel : gameUserData.lv
              , f = new cc.Sprite("#choose_map/blue_" + Global.levelTarget["level" + (c + 100 * (Global.mapIndex - 1) + 1)].showElement + "_1.png");
            d.addChild(f);
            f.setPosition(40, 62);
            d.collectIcon = f;
            e === d.getTag() && (e = this.getWorldPos(d),
            this.refreshMapPos(e),
            this.limitMove());
            this.initLevelIcon(d)
        }
    },
    refreshMap: function() {
        this.isRefreshMap = !0;
        for (var a = 0; 11 > a; ++a)
            this.totalHeight = 10 === a ? 1 === Global.mapIndex ? this.totalHeight + 590 : this.totalHeight + 850 : this.totalHeight + 1280;
        this.map.getChildren();
        for (a = 0; 100 > a; ++a) {
            var b = this.map["choose" + (a + 1)];
            b.setTag(a + 100 * (Global.mapIndex - 1) + 1);
            var c = 0
              , c = 0 < Global.lastLevel ? Global.lastLevel : gameUserData.lv;
            c === b.getTag() && (b = this.getWorldPos(b),
            this.refreshMapPos(b),
            this.limitMove())
        }
        this.updateChooseNodeIsShow()
    },
    getWorldPos: function(a) {
        return a.getParent().convertToWorldSpace(a)
    },
    refreshMapPos: function(a) {
        !0 == this.isRefreshMap && (this.isRefreshMap = !1,
        this.unscheduleUpdate(),
        a = cc.winSize.height / 2 - a.y,
        this.mapNode.setPositionY(0 > a ? a : 0))
    },
    createReward: function(a) {
        var b = new cc.Sprite("#choose_map/reward_box.png");
        b.attr({
            x: 60,
            y: 150
        });
        b.setName("reward");
        a.addChild(b)
    },
    initRewardBox: function(a) {
        var b = a.getTag()
          , c = Global.levelTarget["level" + b];
        b > gameUserData.lv && c && c.rewards && !this.isAlreadyGetReward(this.lv) && this.createReward(a)
    },
    isAlreadyGetReward: function(a) {
        if (gameUserData.rewardLevel) {
            for (var b = 0; b < gameUserData.rewardLevel.length; ++b)
                if (a === gameUserData.rewardLevel[b])
                    return !0;
            return !1
        }
    },
    currentLevelAction: function(a) {
        var b = new cc.Sprite;
        b.setScale(1.5);
        b.runAction(AnimationMgr.getDefaultFrameAnimation("effect/chooose/light", 15, 1 / 24).repeatForever());
        b.setPosition(cc.p(50, 30));
        a.addChild(b, -1)
    },
    initSpecialIcon: function(a) {
        var b = a.getTag();
        1 === Global.levelTarget["level" + b].special && (a.setSpriteFrame("choose_map/choose_btn_red.png"),
        a.lv.x = 55,
        a.lv.y = 26,
        Utils.changeTexture(a.collectIcon, "choose_map/purple_" + Global.levelTarget["level" + a.getTag()].showElement + "_1.png"),
        a.collectIcon.x = 54,
        a.collectIcon.y = 72)
    },
    initLevelIcon: function(a) {
        var b = a.getTag();
        this.initRewardBox(a);
        if (b <= gameUserData.lv + 1)
            this.initSpecialIcon(a),
            this.initStar(a, b),
            b == gameUserData.lv + 1 && this.currentLevelAction(a),
            a.isSwallowTouches = !1,
            engine.gameEvent.createMouseUp(a, this.onChoose.bind(this), buttonScalingType);
        else {
            a.star1.setVisible(!1);
            a.star2.setVisible(!1);
            a.star3.setVisible(!1);
            a.lv.setVisible(!1);
            Utils.changeTexture(a, "choose_map/gray_choose.png");
            Utils.changeTexture(a.collectIcon, "choose_map/blue_" + Global.levelTarget["level" + a.getTag()].showElement + "_2.png");
            1 === Global.levelTarget["level" + b].special && (Utils.changeTexture(a, "choose_map/gray_choose1.png"),
            Utils.changeTexture(a.collectIcon, "choose_map/purple_" + Global.levelTarget["level" + a.getTag()].showElement + "_2.png"));
            var c = new GameArtWord("fnttype34");
            c.alignmentType = artWordMiddle;
            a.addChild(c);
            c.setPosition(44, 20);
            a.lv = c;
            a.lv.setString(a.getTag() + "");
            1 === Global.levelTarget["level" + b].special && (a.lv.x = 55,
            a.lv.y = 26,
            a.collectIcon.x = 54,
            a.collectIcon.y = 72,
            null != a.star4 && a.star4.setVisible(!1))
        }
    },
    initStar: function(a, b) {
        for (var c = gameUserData.levelStar[b - 1] || 0, d = 1; 3 >= d; ++d)
            a["star" + d].setVisible(d <= c);
        1 === Global.levelTarget["level" + b].special && a.star4.setVisible(!1);
        4 <= c && 1 === Global.levelTarget["level" + b].special ? null != a.star4 && a.star4.setVisible(!0) : 4 <= c && null != a.star4 && a.star4.setVisible(!0)
    },
    refreshHonorPush: function() {
        this.mainUI.btnhonor.pot1.setVisible(!1);
        1 > gameUserData.lv || (0 == gameUserData.honor_free_box ? this.mainUI.btnhonor.pot1.setVisible(!0) : gameUserData.honor >= Global.honorRewardList[gameUserData.honor_reward_index].honorNum && this.mainUI.btnhonor.pot1.setVisible(!0))
    },
    initText: function() {
        this.mainUI.no_power.aw_fnttype27_goldText.setString(gameUserData.gold.toString())
    },
    registerEvent: function() {
        EventMgr.register(EVENTMGR_ID.CHOOSE_TEXT, function() {
            this.initText();
            this.refreshTaskPot()
        }, this);
        EventMgr.register(EVENTMGR_ID.ENTER_GAME, function(a) {
            Global.chooseLv = a;
            Global.lastLevel = a;
            this.createTargetUI(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_POWER_INFO, function() {
            this.refreshPower()
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_GOLD, function() {
            this.initText();
            this.refreshGiftState()
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_POT, function() {
            this.refreshLotteryPot();
            this.refreshTaskPot();
            this.refreshSignPot()
        }, this);
        EventMgr.register(EVENTMGR_ID.INFINITE_POWER, function() {
            this.dialogInfinitePower()
        }, this);
        EventMgr.register(EVENTMGR_ID.REFRESH_WEEK_FREE, function() {
            this.updateWeekIconFree()
        }, this);
        EventMgr.register(EVENTMGR_ID.OPEN_WEEKGAME, function() {
            this.openWeekGameLayer()
        }, this);
        EventMgr.register(EVENTMGR_ID.CLOSE_MESSAGE_BTN, function() {
            this.mainUI.messagebtn.setVisible(!1);
            gameUserData.isSelectMessage = 1;
            gameSDK.saveUserData(getSaveFBData(), null)
        }, this);
        this.refreshSignPot()
    },
    onPower: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
        1 === gameUserData.isInfiniteOver || Global.isInfinite || EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockInfiniteTips)
    },
    dialogInfinitePower: function() {
        Global.isSecondDay && this.infinitePowerUI();
        this.refreshInfiniteState()
    },
    infinitePowerUI: function() {
        var a = new InfiniteNode
          , b = createMaskLayer(a);
        b.x = -360;
        b.y = -640;
        a.x = 360;
        a.y = 640;
        this.addChild(a, 10001)
    },
    refreshInfiniteState: function() {
        gameUserData.isInfiniteOver ? (this.mainUI.btnPower.setVisible(!1),
        this.mainUI.time_icon.setVisible(!1)) : (Global.isInfinite && (this.updateInfiniteTime(),
        this.endlessPowerUpdateTimeCount = 0,
        this.mainUI.time_icon.setVisible(!1),
        this.schedule(this.updateInfiniteTime, 0.2)),
        this.mainUI.btnPower.setVisible(!0),
        this.mainUI.btnPower.power_time.setVisible(Global.isInfinite))
    },
    updateInfiniteTime: function(a) {
        this.endlessPowerUpdateTimeCount += a || 0;
        if (1 < this.endlessPowerUpdateTimeCount) {
            Global.endInfiniteTime -= 1;
            if (0 >= Global.endInfiniteTime)
                this.mainUI.btnPower.setVisible(!1),
                Global.isInfinite = !1,
                gameUserData.isInfiniteOver = 1,
                gameSDK.saveUserData(getSaveFBData(), null),
                this.unschedule(this.updateInfiniteTime);
            else {
                a = Math.floor(Global.endInfiniteTime / 60);
                59 <= a && (a = 59);
                var b = Math.floor(Global.endInfiniteTime % 60)
                  , c = ""
                  , c = (10 > a ? c + ("0" + a) : c + a) + ":"
                  , c = 10 > b ? c + ("0" + b) : c + b;
                this.mainUI.btnPower.power_time.setString(c)
            }
            this.endlessPowerUpdateTimeCount--
        }
    },
    createTaskUI: function() {
        var a = new TaskLayer;
        createMaskLayer(a).isSwallowTouches = !0;
        Global.chooseLv = 0;
        this.addChild(a, 10)
    },
    onDown: function(a, b) {
        this.touchStartY = a.getLocationY();
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK)
    },
    onMove: function(a, b) {
        if (!0 != this.isMapMove) {
            var c = a.getDelta().y;
            this.mapNode.y += c;
            this.updateChooseNodeIsShow();
            this.limitMove()
        }
    },
    limitMove: function() {
        0 < this.mapNode.y ? this.mapNode.y = 0 : this.mapNode.y < -this.totalHeight + 1280 && (this.mapNode.y = -this.totalHeight + 1280)
    },
    createTargetUI: function(a) {
        null == this.getChildByTag(12345) && (a = new TargetLayer(a),
        a.setTag(12345),
        createMaskLayer(a),
        this.addChild(a, 101))
    },
    createRewardUI: function(a) {
        var b = new RewardNode(a.id,a.num);
        b.attr({
            x: viewGameWidth / 2 - uiOfferX,
            y: cc.winSize.height / 2
        });
        createMaskLayer(b).attr({
            x: -cc.winSize.width / 2,
            y: -cc.winSize.height / 2
        });
        this.addChild(b, 30);
        this.getReward(a)
    },
    getReward: function(a) {
        DataMgr.addItemByID(a.id, a.num);
        gameUserData.rewardLevel.push(this.lv);
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    enterGame: function(a) {
        this.createTargetUI(this.chooseLv)
    },
    onChoose: function(a, b) {
        if (this.isCanTouch && !Global.isDialog) {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var c = a.getLocationY()
              , d = b.getCurrentTarget();
            10 >= Math.abs(c - this.touchStartY) && (this.chooseLv = d.getTag(),
            Global.chooseLv = this.chooseLv,
            Global.lastLevel = this.chooseLv,
            this.enterGame(d))
        }
    },
    onBack: function() {
        this.isCanTouch && 1 != Global.mapIndex && (Global.mapIndex -= 1,
        transitions(ChooseScene))
    },
    createShopUI: function() {
        if (!1 == gameSDK.isCanPay()) {
            var a = new ShopLayer(ENUM_SHOP_TYPE.MAINOPEN);
            createMaskLayer(a);
            this.addChild(a, 101)
        } else {
            Global.isShopNewIcon = 0;
            this.mainUI.btnshop.shopnew.setVisible(!1);
            var b = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var a = new FacebookPaymentShopLayer;
                createMaskLayer(a);
                b.addChild(a, 101);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    onTask: function() {
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
        5 > gameUserData.lv ? EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockRankTips) : (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        this.createRankLayer())
    },
    onHonor: function() {
        if (1 > gameUserData.lv)
            EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockHonorTips);
        else {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var a = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getHonorRes(), function() {
                multiplePNGToSpriteFrame(honorUIRes.res_honor_plist);
                var b = new HonorLayer;
                a.addChild(b, 102);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    onShop: function() {
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.createShopUI()
    },
    createRankLayer: function() {
        1 !== gameUserData.touchRank && (gameUserData.touchRank = 1);
        var a = new RankLayer(gTestData,fTestData);
        this.addChild(a, 10)
    },
    createLoseLayer: function() {
        var a = new LoseLayer;
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    createUpLayer: function() {
        rankinGoble = !0;
        var a = new UpRankLayer("10004");
        this.addChild(a, 10)
    },
    onLottery: function() {
        var a = this;
        createGameMaskLayer("loadUIMask");
        loadUIFun(getLotteryRes(), function() {
            cc.spriteFrameCache.addSpriteFrames(lotteryUIRes.res_lotteryuiimg_plist);
            cc.spriteFrameCache.addSpriteFrames(lotteryUIRes.res_lotteryuiimg_plist2);
            EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var b = new LotteryLayer;
            createMaskLayer(b);
            a.addChild(b, 10);
            removeGameMaskLayer("loadUIMask")
        })
    },
    refreshPower: function() {
        gameUserData.power < Global.maxPower && 0 <= gameUserData.power ? (this.mainUI.no_power.leftTime.setVisible(!0),
        this.mainUI.no_power.time_bg.setVisible(!0),
        this.powerUpdateTimeCount = 0,
        this.mainUI.no_power.leftTime.setString(""),
        this.updateSecond(),
        this.schedule(this.updateSecond.bind(this), 0.2, cc.REPEAT_FOREVER, 0)) : (this.mainUI.no_power.leftTime.setVisible(!1),
        this.mainUI.no_power.time_bg.setVisible(!1));
        this.mainUI.no_power.aw_fnttype27_powerText.setString(gameUserData.power.toString())
    },
    checkPower: function() {
        hasGetingServerTime || (hasGetingServerTime = !0,
        serverTimer = 0,
        serverTimer = Math.floor((new Date).getTime() / 1E3),
        Global.severTime = serverTimer,
        Global.curGameRunTime = engineGameRunTime(),
        this.schedule(this.updateCheck))
    },
    updateCheck: function(a) {
        if (0 < serverTimer) {
            a = getCurrencyTimeSecond();
            gameUserData.beginRecoveryTime > a && (gameUserData.beginRecoveryTime = a,
            gameUserData.RetainRecoveryTime = Global.recoverTime + 60);
            var b = Math.abs(a - gameUserData.beginRecoveryTime)
              , c = Math.floor(b / Global.recoverTime);
            0 < c ? (Math.abs(a - serverTimer) > Global.diffTime && (c = 1),
            gameUserData.power += c,
            gameUserData.power = gameUserData.power > Global.maxPower ? Global.maxPower : gameUserData.power,
            gameUserData.beginRecoveryTime = a,
            gameUserData.RetainRecoveryTime = Global.recoverTime + 60) : gameUserData.RetainRecoveryTime = Global.recoverTime - b + 60;
            gameSDK.saveUserData(getSaveFBData(), null);
            this.refreshPower();
            serverTimer = 0;
            hasGetingServerTime = !1;
            this.unschedule(this.updateCheck)
        }
    },
    updateSecond: function(a) {
        this.powerUpdateTimeCount += a || 0;
        1 <= this.powerUpdateTimeCount && (0 >= gameUserData.RetainRecoveryTime && (gameUserData.RetainRecoveryTime = 0,
        this.checkPower()),
        gameUserData.power <= Global.maxPower && this.computerLeftTime(),
        gameUserData.power >= Global.maxPower ? (this.mainUI.no_power.leftTime.setVisible(!1),
        this.mainUI.no_power.time_bg.setVisible(!1),
        this.unschedule(this.updateSecond)) : (this.mainUI.no_power.leftTime.setVisible(!0),
        this.mainUI.no_power.time_bg.setVisible(!0)),
        this.powerUpdateTimeCount -= 1)
    },
    computerLeftTime: function() {
        gameUserData.RetainRecoveryTime > Global.recoverTime && (gameUserData.RetainRecoveryTime = Global.recoverTime);
        var a = gameUserData.RetainRecoveryTime;
        !0 == isNaN(a) && (a = 0);
        0 >= a && (a = 0);
        var b = Math.floor(a / 60);
        59 <= b && (b = 59);
        var a = Math.floor(a % 60)
          , c = ""
          , c = (10 > b ? c + ("0" + b) : c + b) + ":"
          , c = 10 > a ? c + ("0" + a) : c + a;
        this.mainUI.no_power.leftTime.setString(c)
    },
    onGift: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
        var a = 0;
        this.mainUI.btnGift.gift_text.isVisible() && (a = 1);
        if (0 < gameUserData.gift) {
            var a = new GiftNode(a)
              , b = createMaskLayer(a);
            b.x = -360;
            b.y = -640;
            a.x = 360;
            a.y = 640;
            this.addChild(a, 1E3)
        } else
            EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.giftHasClaimDes)
    },
    refreshGiftState: function() {
        0 === gameUserData.gift && gameUserData.getNextGiftTime > getCurrencyTime() && (this.mainUI.btnGift.gift_text.setVisible(!1),
        this.mainUI.btnGift.giftTimeTxt.setVisible(!0),
        this.updateGiftTime(),
        this.schedule(this.updateGiftTime, 1));
        this.refreshGiftAnimation()
    },
    refreshGiftAnimation: function() {
        null !== this.giftAnimation && (this.mainUI.btnGift.gift_text.isVisible() ? this.giftAnimation.setVisible(!0) : this.giftAnimation.setVisible(!1))
    },
    updateGiftTime: function() {
        var a = (gameUserData.getNextGiftTime - getCurrencyTime()) / 1E3
          , b = Math.floor(a / 3600)
          , c = Math.floor(a / 60 % 60)
          , a = Math.floor(a % 60)
          , d = ""
          , d = (10 > b ? d + ("0" + b) : d + b) + ":"
          , d = 10 > c ? d + ("0" + c) : d + c
          , d = d + ":"
          , d = 10 > a ? d + ("0" + a) : d + a;
        0 >= b && 0 >= c && (this.unschedule(this.updateGiftTime),
        this.mainUI.btnGift.gift_text.setVisible(!0),
        this.mainUI.btnGift.giftTimeTxt.setVisible(!1));
        this.mainUI.btnGift.giftTimeTxt.setString(d.toString())
    },
    createNextChapter: function() {},
    onNextChapter: function() {
        1 < Global.mapIndex ? (Global.mapIndex += 1,
        transitions(ChooseScene)) : (Global.mapIndex += 1,
        transitionsF(ChooseScene, g_mapRes, LoadScene, function() {
            nextResComplete = !0
        }))
    },
    firstGift: function() {
        var a = new cc.Layer
          , b = new cc.DrawNode;
        b.drawRect(cc.p(0, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
        a.addChild(b);
        var c = createGameAnimation(res.res_gift_json, "box", 24);
        c.x = 360;
        c.y = 640;
        a.addChild(c);
        this.addChild(a, 10002);
        engine.gameEvent.createMouseDown(a, function(a) {
            if (c.isVisible()) {
                c.setVisible(!1);
                this.getFirstGift();
                var b = createGameAnimation(res.res_gift_json, "light", 24);
                b.playCount = 1;
                b.x = 360;
                b.y = 680;
                a.addChild(b);
                b = createGameAnimation(res.res_gift_json, "light", 24);
                b.playCount = 1;
                b.x = 320;
                b.y = 720;
                b.setRotation(-15);
                b.setScale(2);
                a.addChild(b);
                b = createGameAnimation(res.res_gift_json, "light", 24);
                b.playCount = 1;
                b.x = 400;
                b.y = 720;
                b.setRotation(15);
                b.setScale(2);
                a.addChild(b);
                b = createGameAnimation(res.res_gift_json, "light", 24);
                b.playCount = 1;
                b.x = 360;
                b.y = 720;
                b.setScale(2);
                a.addChild(b);
                b = createGameAnimation(res.res_gift_json, "gift3", 24);
                b.playCount = 1;
                b.x = 360;
                b.y = 640;
                b.frameCompleteFun = function(a) {
                    a.removeFromParent();
                    a = this.map.getChildByTag(2);
                    Global.chooseLv = 2;
                    this.chooseLv = Global.lastLevel = 2;
                    this.enterGame(a)
                }
                .bind(this, a);
                a.addChild(b)
            }
        }
        .bind(this, a), null, cc.rect(0, 0, viewGameWidth, viewGameHeigh))
    },
    getFirstGift: function() {
        for (var a = gameUserData.firstGift = 0; a < Global.firstGifts.length; ++a)
            2006 === Global.gifts[a].id ? (gameUserData.gold += Global.gifts[a].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === Global.gifts[a].id ? (gameUserData.power += Global.gifts[a].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(Global.gifts[a].id, Global.gifts[a].num);
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    createLevelBox: function() {
        for (var a = this.getStarsNum(), b = 0; b < Global.boxs.length; ++b)
            if (1 !== gameUserData.getBoxID[b]) {
                a = this.createBox(a, Global.boxs[b].condition);
                a.x = 360;
                a.y = viewGameHeigh - 100;
                a.data = Global.boxs[b];
                a.setTag(b);
                this.mainUI.addChild(a, 10);
                break
            }
    },
    onBox: function(a, b) {
        var c = this
          , d = b.getCurrentTarget()
          , e = d.data;
        if (this.getStarsNum() >= e.condition && 1 !== gameUserData.getBoxID[d.getTag()])
            if (gameUserData.getBoxID[d.getTag()] = 1,
            2006 === e.reward ? (gameUserData.gold += e.num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === e.reward ? (gameUserData.power += e.num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : DataMgr.addItemByID(e.reward, e.num),
            d.setVisible(!1),
            null != cc.loader.getRes("res/pngdata/levelbox/levelbox.json")) {
                var f = createGameAnimation("res/pngdata/levelbox/levelbox.json", "starboxopen", 24);
                f.playCount = 1;
                f.isRemoveFromComplete = !0;
                f.x = d.getPosition().x;
                f.y = 1 == d.curType ? d.getPosition().y : d.getPosition().y - 20;
                f.playFrameIndex = 26;
                this.addChild(f, 100);
                f.frameCompleteFun = function() {
                    EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                        num: e.num,
                        id: e.reward
                    });
                    gameUserData.getBoxID[d.getTag()] = 1;
                    c.createLevelBox()
                }
            } else
                EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                    num: e.num,
                    id: e.reward
                }),
                gameUserData.getBoxID[d.getTag()] = 1,
                c.createLevelBox();
        else
            1 === gameUserData.getBoxID[d.getTag()] ? EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.alreadyGet) : EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.boxTips)
    },
    createBox: function(a, b) {
        var c, d = 0;
        null != cc.loader.getRes("res/pngdata/levelbox/levelbox.json") ? (c = createGameAnimation("res/pngdata/levelbox/levelbox.json", "starboxreward", 24),
        c.playCount = -1,
        d = 1,
        c.isSwallowTouches = !1,
        engine.gameEvent.createMouseUp(c, this.onBox.bind(this), buttonScalingType, cc.rect(-55, -60, 110, 120))) : (c = new cc.Sprite("#choose_map/levelbox.png"),
        c.isSwallowTouches = !1,
        engine.gameEvent.createMouseUp(c, this.onBox.bind(this), buttonScalingType));
        c.curType = d;
        var e = new cc.Sprite("#game/targetboxbg.png");
        c.addChild(e, 50);
        e.x = c.getContentSize().width / 2 + 2;
        e.y = 0 == d ? 110 : 48;
        var f = new GameArtWord("fnttype19");
        f.alignmentType = artWordLeft;
        f.setString(a + "/" + b);
        var g = 73 / f.getContentSize().width;
        f.setScale(1 < g ? 1 : g);
        e.addChild(f);
        f.y = e.getContentSize().height / 2 + 2;
        g = new cc.Sprite("#game/star.png");
        g.setAnchorPoint(0, 0.5);
        g.y = f.y + 2;
        e.addChild(g);
        f.x = e.getContentSize().width / 2 - 6 - f.stringSize.width / 2;
        g.x = f.x + 2 + f.stringSize.width;
        a >= b && (f = createGameAnimation(res.res_targetbox_json, "canreward", 24),
        c.addChild(f, 2),
        f.x = e.x - 2,
        f.y = 0 == d ? 35 : 40);
        return c
    },
    onSign: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        EventMgr.emit(EVENTMGR_ID.REFRESH_LITTLE_RANK);
        var a = new SignInLayer;
        createMaskLayer(a);
        this.addChild(a, 1001)
    },
    addLittleRank: function() {
        var a = checkGlobe();
        null != a && "" != selfData.myurl && !1 == this.isLittleRank && (this.isLittleRank = !0,
        a = new LittleRankNode(a),
        a.x = 725 + uiOfferX,
        a.y = 230,
        this.addChild(a, 9))
    },
    refreshSignPot: function() {
        this.isCanSign() ? this.mainUI.btnSign.pot3.setVisible(!0) : this.mainUI.btnSign.pot3.setVisible(!1)
    },
    isCanSign: function() {
        7 <= gameUserData.signNum && 0 == gameUserData.signDayLimit && (gameUserData.signDayLimit = gameUserData.signDay);
        if (0 < gameUserData.signDayLimit) {
            var a = new Date(1E3 * Global.severTime);
            1 <= a.getDate() - gameUserData.signDayLimit && (gameUserData.signDay = -1,
            gameUserData.signNum = 0,
            gameUserData.signDayLimit = 0,
            gameSDK.saveUserData(getSaveFBData(), null))
        }
        if (0 >= Global.severTime || 7 <= gameUserData.signNum)
            return !1;
        a = new Date(1E3 * Global.severTime);
        this.day = a.getDate();
        return this.day !== gameUserData.signDay ? !0 : !1
    },
    onDailyGift: function() {
        if (10 > gameUserData.lv)
            EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.lockGiftTips);
        else {
            var a = new DailyGiftNode;
            createMaskLayer(a);
            this.addChild(a, 1001)
        }
    }
});
var GameLogicLayer = cc.Layer.extend({
    menu: null,
    map: null,
    isCanTouch: !0,
    lv: 1,
    isGameWin: !1,
    isMoveComplete: !0,
    isForbidDrop: 0,
    forbidDropCol: [],
    noTouchTime: 0,
    isAutoTips: !1,
    tipsArray: [],
    isUseLeftStep: !1,
    isWinTips: 0,
    warn: null,
    gift: null,
    isEvilOver: !1,
    topLayer: null,
    isHaveTips: null,
    isOpenWin: null,
    isOpenLose: null,
    bugTime: null,
    isStartBugTime: null,
    isBossChangeElement: null,
    maskLayer: null,
    tipsIconCD: null,
    isTipsIcon: !0,
    ctor: function() {
        this._super();
        this.lv = 1 == Global.gameType ? Global.chooseLv || 1 : Global.gameWeekLv || 1;
        Global.chooseLv != Global.FailAdLevel && (Global.FailAdLevel = Global.chooseLv,
        Global.FailAdCount = 0);
        this.initData()
    },
    initData: function() {
        PieceMgr.lvData = 1 == Global.gameType ? Utils.deepCopy(Global.levelTarget["level" + this.lv]) : Utils.deepCopy(Global.weekGamelevelTarget["level" + this.lv]);
        PieceMgr.lvData.score = 0;
        this.isGameWin = !1;
        this.isCanTouch = this.isMoveComplete = !0;
        this.isForbidDrop = 0;
        this.forbidDropCol = [];
        this.noTouchTime = 0;
        this.isHaveTips = !0;
        this.isAutoTips = !1;
        this.tipsArray = [];
        this.isUseLeftStep = !1;
        Global.resurgenceTime = 0;
        this.warn = null;
        this.isWinTips = 0;
        this.gift = null;
        this.isOpenLose = this.isOpenWin = this.isEvilOver = !1;
        this.bugTime = 0;
        this.isStartBugTime = !1;
        Global.costWeekStep = 0;
        Global.isGameStart = !1;
        this.isBossChangeElement = Global.isBossAttackStopOntouch = !1;
        this.tipsIconCD = 0;
        this.isTipsIcon = !0;
        this.maskLayer = null;
        PieceMgr.initElements();
        resetReliveDic(this.lv)
    },
    onEnter: function() {
        this._super();
        gameLayer = this;
        this.registerEvent();
        this.initUI();
        this.preloadIad();
        engine.gameSound.playMusic(soundRes.sound_game_bg, !0)
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.TOUCH_CELL, this);
        EventMgr.remove(EVENTMGR_ID.REPLAY, this);
        EventMgr.remove(EVENTMGR_ID.NEW_ELEMENT, this);
        EventMgr.remove(EVENTMGR_ID.PAUSE_LAYER, this);
        EventMgr.remove(EVENTMGR_ID.SHOP_LAYER, this);
        EventMgr.remove(EVENTMGR_ID.CHOOSE_NUM_LAYER, this);
        EventMgr.remove(EVENTMGR_ID.ITEM_KILL, this);
        EventMgr.remove(EVENTMGR_ID.FORBID_DROP, this);
        EventMgr.remove(EVENTMGR_ID.CAN_TOUCH, this);
        EventMgr.remove(EVENTMGR_ID.AUTO_KILL, this);
        EventMgr.remove(EVENTMGR_ID.ADD_SCORE_ACTION, this);
        EventMgr.remove(EVENTMGR_ID.ADD_STEP, this);
        EventMgr.remove(EVENTMGR_ID.FAILED, this);
        EventMgr.remove(EVENTMGR_ID.TRIGGER_SPECIAL, this);
        EventMgr.remove(EVENTMGR_ID.TARGET_MOVE_FINISH, this);
        EventMgr.remove(EVENTMGR_ID.PARACHUTE_GIFT, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_CHANGE_ELEMENT, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_OPEN_FAIL_VIEW, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_REMOVE_MASK, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_ADD_MASK, this);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_UPDATE_HP, this);
        EventMgr.remove(EVENTMGR_ID.STEP_OVER, this)
    },
    initUI: function() {
        this.y = currentScene.y = 0;
        this.menu = new GameMenuLayer(this.lv);
        this.menu.parentLayer = this;
        this.addChild(this.menu);
        this.map = new Map1(this.lv);
        this.addChild(this.map);
        var a = {};
        a.playerid = selfData.mypid;
        a.prj = "jellyboom";
        a.type = 1001;
        a.info = {
            level: this.lv
        };
        this.firstAutoTipIcon()
    },
    registerEvent: function() {
        EventMgr.register(EVENTMGR_ID.TOUCH_CELL, function(a) {
            if (a)
                this.onTouch(a.r, a.c)
        }, this);
        EventMgr.register(EVENTMGR_ID.REPLAY, function() {
            this.map.removeFromParent();
            this.menu.removeFromParent();
            this.initData();
            this.initUI();
            Global.chooseItems = []
        }, this);
        EventMgr.register(EVENTMGR_ID.NEW_ELEMENT, function(a) {
            a && this.map.addChild(a, CELL_Z_ORDER.ELEMENT)
        }, this);
        EventMgr.register(EVENTMGR_ID.PAUSE_LAYER, function() {
            this.isGameWin || this.createPauseUI()
        }, this);
        EventMgr.register(EVENTMGR_ID.SHOP_LAYER, function() {
            this.createShopLayer(this)
        }, this);
        EventMgr.register(EVENTMGR_ID.CHOOSE_NUM_LAYER, function(a) {
            this.createChooseNumLayer(a)
        }, this);
        EventMgr.register(EVENTMGR_ID.ITEM_KILL, function(a) {
            a && this.isForbidDropCol(a) ? Utils.removeData(this.forbidDropCol, a) : a || (this.isForbidDrop -= 1);
            0 >= this.isForbidDrop && (this.isForbidDrop = 0,
            this.isCanTouch = !0);
            this.menu.chooseItem(this.menu.chooseItemIndex);
            EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)
        }, this);
        EventMgr.register(EVENTMGR_ID.TRIGGER_SPECIAL, function() {
            if (PieceMgr.isHaveMergeElement) {
                var a = PieceMgr.chooseElement;
                PieceMgr.isHaveMergeElement = !1;
                PieceMgr.triggerMergeElement(a)
            }
        });
        EventMgr.register(EVENTMGR_ID.FORBID_DROP, function(a) {
            a && !this.isForbidDropCol(a) ? this.forbidDropCol.push(a) : a || (this.isCanTouch = !1,
            this.isForbidDrop += 1)
        }, this);
        EventMgr.register(EVENTMGR_ID.CAN_TOUCH, function(a) {
            this.isCanTouch = a
        }, this);
        EventMgr.register(EVENTMGR_ID.AUTO_KILL, function() {
            Algorithm.allElementsAutoEmit()
        }, this);
        EventMgr.register(EVENTMGR_ID.ADD_SCORE_ACTION, function(a) {
            a && 0 < a.score && (PieceMgr.lvData.score += a.score,
            this.addScoreAction(a),
            EventMgr.emit(EVENTMGR_ID.ADD_SCORE, PieceMgr.lvData.score))
        }, this);
        EventMgr.register(EVENTMGR_ID.ADD_STEP, function() {
            this.resurgenceAction()
        }, this);
        EventMgr.register(EVENTMGR_ID.FAILED, function() {
            this.scheduleOnce(function() {
                this.createLoseUI(this.lv)
            }
            .bind(this), 0.5)
        }, this);
        EventMgr.register(EVENTMGR_ID.TARGET_MOVE_FINISH, function() {
            this.scheduleUpdate();
            1 == Global.gameType && (this.createGuideLayer(),
            this.map.turnToSpecialElement(),
            this.menu.initTargetAction())
        }, this);
        EventMgr.register(EVENTMGR_ID.STEP_OVER, function() {
            PieceMgr.lvData.step -= 3;
            0 >= PieceMgr.lvData.step && (PieceMgr.lvData.step = 0);
            EventMgr.emit(EVENTMGR_ID.REDUCE_STEP, PieceMgr.lvData.step)
        }, this);
        EventMgr.register(EVENTMGR_ID.PARACHUTE_GIFT, function(a) {}, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_CHANGE_ELEMENT, function(a) {
            this.isBossChangeElement = !0
        }, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_OPEN_FAIL_VIEW, function(a) {
            this.createWeekBossLoseUI()
        }, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_ADD_MASK, function(a) {
            if (null == this.maskLayer)
                for (this.maskLayer = new cc.DrawNode,
                this.maskLayer.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, 905), cc.color(27, 9, 3, 130), 0, cc.color(0, 0, 0, 130)),
                this.map.addChild(this.maskLayer, 1E3),
                engine.gameEvent.createMouseDown(this.maskLayer, function() {}, null, cc.rect(0, 0, viewGameWidth, 900)),
                a = 0; a < PieceMgr.elements.length; a++)
                    for (var b = 0; b < PieceMgr.elements[a].length; b++) {
                        var c = PieceMgr.elements[a][b];
                        "0" !== c[0] && -1 !== c[0] && !0 == c[0].isBossSelect && (c[0].before_zIndex = c[0].zIndex,
                        c[0].setLocalZOrder(1001))
                    }
        }, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_REMOVE_MASK, function(a) {
            if (null != this.maskLayer)
                for (this.maskLayer.removeFromParent(),
                this.maskLayer = null,
                a = 0; a < PieceMgr.elements.length; a++)
                    for (var b = 0; b < PieceMgr.elements[a].length; b++) {
                        var c = PieceMgr.elements[a][b];
                        "0" !== c[0] && -1 !== c[0] && null != c[0].before_zIndex && c[0].setLocalZOrder(c[0].before_zIndex)
                    }
        }, this);
        EventMgr.register(EVENTMGR_ID.WEEKBOSS_UPDATE_HP, function(a) {
            PieceMgr.bossCurHp -= a;
            0 > PieceMgr.bossCurHp && (PieceMgr.bossCurHp = 0);
            cc.log("boss扣血量:---------" + a);
            cc.log("boss血量++++++" + a);
            EventMgr.emit(EVENTMGR_ID.WEEKBOSS_UPDATE_HP_PRO)
        }, this)
    },
    flyParachute: function(a) {
        cc.log("游戏内不要降落伞了！")
    },
    onGift: function(a) {
        null !== this.gift && (this.gift.removeFromParent(),
        this.gift = null);
        a = new ParachuteLayer(a);
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    resurgenceAction: function() {
        var a = new cc.Sprite("#resurgence/five.png");
        a.x = 360;
        a.y = 648;
        a.setCascadeOpacityEnabled(!0);
        this.addChild(a, 1001);
        this.isCanTouch = !1;
        a.runAction(cc.sequence(cc.moveBy(0.1, cc.p(0, 50)), cc.spawn(cc.moveTo(0.4, cc.p(48, 1226)), cc.scaleTo(0.4, 0.4)), cc.spawn(cc.scaleTo(0.5, 1.3), cc.fadeOut(0.5)), cc.callFunc(function() {
            PieceMgr.lvData.step += 5;
            EventMgr.emit(EVENTMGR_ID.RESURGENCE_ADD_STEP, PieceMgr.lvData.step);
            this.scheduleUpdate();
            this.isCanTouch = !0
        }
        .bind(this)), cc.removeSelf()))
    },
    onTouch: function(a, b) {
        !0 != Global.isUseItem && (1 == Global.gameType || !1 != Global.isGameStart && !0 != Global.isBossAttackStopOntouch && !0 != this.isOpenLose) && (this.isMoveComplete && (this.isForbidDrop = 0,
        this.forbidDropCol = []),
        0 >= PieceMgr.lvData.step || !this.isCanTouch || this.isGameWin || PieceMgr.isHaveMergeElement || this.isEvilOver ? (cc.log("this.isMoveComplete--" + this.isMoveComplete + "|PieceMgr.lvData.step--" + PieceMgr.lvData.step + "|this.isCanTouch--" + this.isCanTouch + "|this.isGameWin--" + this.isGameWin + "|PieceMgr.isHaveMergeElement--" + PieceMgr.isHaveMergeElement + "|this.isEvilOver--" + this.isEvilOver + "|this.isForbidDrop--" + this.isForbidDrop),
        engine.gameSound.playEffect(soundRes.sound_can_not_touch)) : (isBombBombAndBomb = isColorPuddingAndColorPudding = isShowBombStar = isShowBombBomb = !1,
        this.noTouchTime = isflyBomeStar = 0,
        this.isTipsIcon = !0,
        0 < this.menu.chooseItemIndex && 5 !== this.menu.chooseItemIndex && this.isMoveComplete && 4 !== this.menu.chooseItemIndex && PieceMgr.isCanKillByItem(a, b) ? (this.isForbidDrop += 1,
        this.isCanTouch = !1,
        this.useItem(this.menu.chooseItemIndex, a, b),
        engine.gameSound.playEffect(soundRes.sound_normal_touch)) : (4 === this.menu.chooseItemIndex || 5 === this.menu.chooseItemIndex) && this.isMoveComplete && 5 >= PieceMgr.elements[a][b][0].id && PieceMgr.isCanTouch(a, b) ? (this.isForbidDrop += 1,
        this.isCanTouch = !1,
        this.useItem(this.menu.chooseItemIndex, a, b),
        engine.gameSound.playEffect(soundRes.sound_normal_touch)) : 0 === this.menu.chooseItemIndex && (PieceMgr.chooseElements = [],
        PieceMgr.chooseElement = null,
        this.chooseElement(a, b))))
    },
    useItem: function(a, b, c) {
        Global.isUseItem = !0;
        a = createItemByID(Global.gameItems[a - 1], b, c);
        this.addChild(a);
        a.useItem()
    },
    chooseElement: function(a, b) {
        PieceMgr.isCanTouch(a, b) ? (PieceMgr.chooseElement = PieceMgr.elements[a][b][0],
        !PieceMgr.chooseElement.isDropComplete() || 11 == PieceMgr.chooseElement.id && !1 == this.isMoveComplete || (0 < PieceMgr.chooseElement.weightValue && Algorithm.chooseSpecialElement(PieceMgr.chooseElement),
        1 >= PieceMgr.chooseElements.length ? (PieceMgr.chooseElement.isChoose = !1,
        PieceMgr.chooseElements = [],
        Algorithm.chooseElement(PieceMgr.chooseElement),
        PieceMgr.killChooseElements(PieceMgr.chooseElements),
        PieceMgr.chooseElement && 5 >= PieceMgr.chooseElement.id && 5 > PieceMgr.chooseElements.length && 1 < PieceMgr.chooseElements.length ? engine.gameSound.playEffect(soundRes.sound_normal_kill) : PieceMgr.chooseElement && 5 >= PieceMgr.chooseElement.id && 5 <= PieceMgr.chooseElements.length && engine.gameSound.playEffect(soundRes.sound_normal_merge)) : (PieceMgr.chooseElement && 5 < PieceMgr.chooseElement.id ? engine.gameSound.playEffect(soundRes.sound_special_merge) : engine.gameSound.playEffect(soundRes.sound_normal_merge),
        PieceMgr.isHaveMergeElement = !0,
        PieceMgr.killSpecialElements(PieceMgr.chooseElements)),
        this.costStep())) : engine.gameSound.playEffect(soundRes.sound_can_not_touch)
    },
    killNormalElements: function() {},
    costStep: function() {
        1 < PieceMgr.chooseElements.length || 0 < PieceMgr.chooseElement.weightValue ? (PieceMgr.lvData.step -= 1,
        1 == Global.gameType ? 5 === PieceMgr.lvData.step && this.createWarn() : (Global.costWeekStep += 1,
        Global.costWeekStep == PieceMgr.lvData.stepCD - 1 && this.setTagElement(),
        Global.costWeekStep >= PieceMgr.lvData.stepCD && (Global.isBossAttackStopOntouch = !0,
        Global.costWeekStep >= PieceMgr.lvData.stepCD && (0 < PieceMgr.getBossHasTagElements().length ? (EventMgr.emit(EVENTMGR_ID.WEEKBOSS_ATTACK),
        EventMgr.emit(EVENTMGR_ID.WEEKBOSS_ADD_MASK)) : (Global.isBossAttackStopOntouch = !1,
        Global.costWeekStep = 0)))),
        EventMgr.emit(EVENTMGR_ID.STEP, PieceMgr.lvData.step)) : (engine.gameSound.playEffect(soundRes.sound_can_not_touch),
        PieceMgr.chooseElement.touchAnimation())
    },
    changeBossSelectElement: function() {
        for (var a = PieceMgr.getBossHasTagElements(), b = 0; b < a.length; b++) {
            var c = a[b]
              , d = Math.floor(Math.random() * Object.getOwnPropertyNames(PieceMgr.lvData.bossNewElement).length);
            PieceMgr.turnToOtherElement(c, PieceMgr.lvData.bossNewElement[d])
        }
        this.isBossChangeElement = Global.isBossAttackStopOntouch = !1
    },
    setTagElement: function() {
        for (var a = Math.floor(2 + 3 * Math.random()), b = 0; b < a; b++) {
            var c = PieceMgr.getBossNormalElements()
              , c = PieceMgr.getRandomElement(c);
            c.isBossSelect = !0;
            c.addBossSelectEffect()
        }
    },
    isForbidDropCol: function(a) {
        for (var b = 0; b < this.forbidDropCol.length; ++b)
            if (a === this.forbidDropCol[b])
                return !0;
        return !1
    },
    dropElement: function(a) {
        this.isMoveComplete = !0;
        for (var b = 0; b < PieceMgr.elements.length; ++b)
            for (var c = 0; c < PieceMgr.elements[0].length; ++c)
                if (this.isForbidDropCol(c))
                    this.isMoveComplete = !1;
                else {
                    var d = PieceMgr.elements[b][c];
                    if (b === Global.maxRow - 1 && -1 === d[0] || b < Global.maxRow - 2 && -1 === d[0] && "0" === PieceMgr.elements[b + 1][c][0] || PieceMgr.isCanDropDown(b, c) && PieceMgr.isCanDown(b + 1, c) && PieceMgr.isHaveElement(b + 1, c) && 13 !== PieceMgr.elements[b + 1][c][0].id)
                        this.isMoveComplete = !1;
                    if (!(1 < d.length && 17 !== d[1].id)) {
                        for (var e = 0; e < d.length; ++e) {
                            if (d[e].state === ELEMENT_STATE.MOVE || d[e].isChoose)
                                this.isMoveComplete = !1;
                            !d[e].isCanMove || d[e].isChoose || PieceMgr.checkElementDrop(d[e]) || d[e].isReset || d[e].update(a)
                        }
                        PieceMgr.isHaveElement(b, c) || this.createNewElement(b, c)
                    }
                }
        this.isMoveComplete && (this.isForbidDrop = 0,
        this.forbidDropCol = [])
    },
    createNewElement: function(a, b) {
        var c = PieceMgr.elements[a][b];
        a === Global.maxRow - 1 && PieceMgr.isCanDropDown(a, b) ? (this.isMoveComplete = !1,
        c = PieceMgr.createNewElement(a + 1, b)) : a <= Global.maxRow - 2 && -1 === c[0] && "0" === PieceMgr.elements[a + 1][b][0] && (!PieceMgr.isHaveElement(a - 1, b) || PieceMgr.elements[a - 1][b][0].state === ELEMENT_STATE.STATIC) && (this.isMoveComplete = !1,
        c = PieceMgr.createNewElement(a, b),
        this.isDownOk(a - 1, b) && c[0].target.runAction(AnimationMgr.getElementNormalAction()))
    },
    isDownOk: function(a, b) {
        for (var c = 0; c < a; ++c)
            if (PieceMgr.elements[c] && PieceMgr.elements[c][b] && -1 === PieceMgr.elements[c][b][0])
                return !1;
        return !0
    },
    update: function(a) {
        this.isGameWin && this.isObtainComplete() && !1 == this.isMoveComplete && 0 >= PieceMgr.lvData.step && 0 === this.isWinTips && 0 < this.isForbidDrop && EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
        0 < this.isForbidDrop || (this.dropElement(a),
        (this.isGameWin || 0 >= PieceMgr.lvData.step) && null !== this.gift && this.gift.setVisible(!1),
        this.jumpWinDialog() ? this.createWinUI() : this.jumpLoseDialog() || (this.isMoveComplete && (this.isCanTouch = !0),
        this.isMoveComplete && PieceMgr.checkDeath() && 0 === this.forbidDropCol.length && (this.isMoveComplete = !1,
        PieceMgr.refreshData()),
        this.isMoveComplete && !1 == PieceMgr.checkDeath() && !0 == this.isBossChangeElement && this.changeBossSelectElement(),
        this.isMoveComplete && !this.isGameWin && this.autoTips(a),
        this.isMoveComplete && !this.isGameWin && this.autoTipIcon(a)))
    },
    triggerMergeElement: function() {
        if (PieceMgr.isHaveMergeElement && this.isMoveComplete) {
            var a = PieceMgr.chooseElement;
            PieceMgr.isHaveMergeElement = !1;
            PieceMgr.triggerMergeElement(a)
        }
    },
    autoTipIcon: function(a) {
        this.tipsIconCD += a;
        this.tipsIconCD >= Global.tipsIconTime && !0 == this.isTipsIcon && (this.isTipsIcon = !1,
        Algorithm.resetTipsIconList(),
        this.tipsIconCD = 0,
        Algorithm.getTipsIconList())
    },
    preloadIad: function() {
        null != gameSDK.sdkIAD && gameSDK.sdkIAD.preLoadAd()
    },
    playIad: function() {
        null != gameSDK.sdkIAD && (cc.log("播放插屏广告---！"),
        gameSDK.sdkIAD.showAd(reset_IAD_share_count_Fun))
    },
    firstAutoTipIcon: function() {
        this.isTipsIcon = !1;
        Algorithm.resetTipsIconList();
        this.tipsIconCD = 0;
        Algorithm.getTipsIconList()
    },
    autoTips: function(a) {
        this.isAutoTips || (this.noTouchTime += a,
        this.noTouchTime >= Global.tipsTime && this.tipsElements())
    },
    tipsElements: function() {
        for (var a = PieceMgr.getNormalElements(), b = 0; b < a.length; ++b) {
            var c = [];
            Algorithm.tipsFourDirectionAlgorithm(a[b], c);
            if (2 <= c.length) {
                this.tipsAction(c);
                this.tipsArray = c;
                this.noTouchTime = 0;
                break
            } else
                null != c[0] && (c[0].isTips = !1)
        }
    },
    tipsAction: function(a) {
        5 < PieceMgr.lvData.step && (this.isHaveTips && EventMgr.emit(EVENTMGR_ID.MONSTER_HINT),
        this.isHaveTips = !this.isHaveTips);
        for (var b = 0; b < a.length; ++b)
            a[b].id && (a[b].isTips = !1,
            a[b].touchAnimation());
        this.isAutoTips = !1;
        this.noTouchTime = 0
    },
    cancelTipsAction: function(a) {
        for (var b = 0; b < a.length; ++b)
            a[b].isTips = !1,
            a[b].target.stopAllActions()
    },
    getStarNum: function() {
        for (var a = 0, b = this.menu.data, c = 0; c < b.score.length; ++c)
            PieceMgr.lvData.score > b.score[c] && (a += 1);
        return a
    },
    createWinUI: function() {
        if (!1 == this.isOpenWin) {
            this.isOpenWin = !0;
            null != this.menu && this.menu.bgLayerUnbake();
            var a = 0
              , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
              , b = new cc.Layer
              , c = new cc.DrawNode;
            c.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
            b.addChild(c);
            this.addChild(b, -1);
            engine.gameEvent.createMouseDown(b, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
            b = new WinLayer(this.getStarNum(),this.lv,PieceMgr.lvData.score);
            b.setTag(10010);
            currentScene.addChild(b);
            EventMgr.emit(EVENTMGR_ID.MONSTER_V);
            b = DataMgr.getLevelData(this.lv);
            b = new cc.Sprite("res/game/playbg/resultbottom" + b.topcustombg + ".png");
            b.setAnchorPoint(0.5, 0);
            b.x = a - uiOfferX;
            this.addChild(b, 10);
            b = new cc.Sprite("res/game/playbg/resultbg.jpg");
            b.setAnchorPoint(0.5, 0);
            b.x = a - uiOfferX;
            b.setScale(2);
            this.addChild(b, 10);
            b = new cc.Sprite("res/game/playbg/cloud.png");
            b.x = a - uiOfferX;
            b.setScale(2);
            this.addChild(b, 10)
        }
    },
    jumpWinDialog: function() {
        if (this.isGameWin || !this.isWin()) {
            if (this.isGameWin && this.isObtainComplete() && this.isMoveComplete && 0 >= PieceMgr.lvData.step && 0 === this.isWinTips && 0 == PieceMgr.obtainTargetCount)
                this.winTips();
            else if (this.isGameWin && 0 < PieceMgr.lvData.step && this.isMoveComplete && this.isObtainComplete() && !this.isUseLeftStep && !PieceMgr.isHaveMergeElement && 0 == PieceMgr.obtainTargetCount)
                Algorithm.hiddenTipsIcon(),
                this.useLeftStep(),
                this.isUseLeftStep = !0;
            else if (this.isGameWin && this.isObtainComplete() && this.isMoveComplete && 0 >= PieceMgr.lvData.step && 2 === this.isWinTips && 0 == PieceMgr.obtainTargetCount)
                return !0;
            return !1
        }
    },
    useLeftStep: function() {
        EventMgr.emit(EVENTMGR_ID.MONSTER_V);
        var a = PieceMgr.getNormalElements();
        this.stepLightAction();
        var b = Math.min(a.length, PieceMgr.lvData.step);
        PieceMgr.turnNormalOneByOne(a, b, this)
    },
    winTips: function() {
        this.isWinTips = 1;
        engine.gameSound.playEffect(soundRes.sound_jelly);
        var a = createGameAnimation(res.res_brush_json, "jellyboommc", 30);
        a.playCount = 1;
        a.isRemoveFromComplete = !0;
        a.frameCompleteFun = function() {
            this.isWinTips = 2
        }
        .bind(this);
        var b = 0
          , b = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        a.attr({
            x: b - uiOfferX,
            y: cc.winSize.height / 2 + 100
        });
        this.addChild(a, 30)
    },
    stepLightAction: function() {},
    checkMonster: function() {
        if (9 != Global.levelTarget["level" + this.lv].showElement || 0 == PieceMgr.monsters.length)
            return !0;
        for (var a = 0; a < PieceMgr.monsters.length; ++a)
            if (0 != PieceMgr.monsters[a].num)
                return !0;
        return !1
    },
    jumpLoseDialog: function() {
        if (1 == Global.gameType)
            if (!this.isGameWin && !PieceMgr.isHaveMergeElement && this.isMoveComplete && this.isEvilOver) {
                this.isCanTouch = this.isEvilOver = !1;
                if (this.checkEvil())
                    return this.unscheduleUpdate(),
                    this.scheduleOnce(function() {
                        this.evilAction()
                    }
                    .bind(this), 0.1),
                    !0;
                this.isCanTouch = !0
            } else {
                if (!this.isGameWin && 0 >= PieceMgr.lvData.step && !PieceMgr.isHaveMergeElement && this.isMoveComplete && 0 == PieceMgr.obtainTargetCount && this.checkMonster())
                    return this.unscheduleUpdate(),
                    this.scheduleOnce(function() {
                        this.createResurgenceUI(this.lv)
                    }
                    .bind(this), 0.2),
                    !0
            }
        else if (!0 == this.isWeekBossEnd() && this.isMoveComplete)
            return !1 == this.isOpenLose && (this.isOpenLose = !0,
            EventMgr.emit(EVENTMGR_ID.WEEKBOSS_MENUFAIL)),
            !0;
        return !1
    },
    isObtainComplete: function() {
        if (!0 == this.isGameWin) {
            for (var a = 1; 4 >= a; ++a)
                this.menu.mainUI["aw_fnttype1_targetNum_" + a].setString("0"),
                this.menu.mainUI["targetIcon" + a].ok.setVisible(!0),
                this.menu.mainUI["aw_fnttype1_targetNum_" + a].setVisible(!1);
            return !0
        }
        for (a = 1; 4 >= a; ++a)
            if (Utils.getNumberFromString(this.menu.mainUI["aw_fnttype1_targetNum_" + a].getString()),
            null != PieceMgr.lvData.targets[a] && 0 < PieceMgr.lvData.targets[a].num)
                return !1;
        var a = 0, b;
        for (b in PieceMgr.lvData.targets)
            0 >= PieceMgr.lvData.targets[b].num && a++;
        if (a === Object.getOwnPropertyNames(PieceMgr.lvData.targets).length)
            for (a = 1; 4 >= a; ++a)
                this.menu.mainUI["aw_fnttype1_targetNum_" + a].setString("0"),
                this.menu.mainUI["targetIcon" + a].ok.setVisible(!0),
                this.menu.mainUI["aw_fnttype1_targetNum_" + a].setVisible(!1);
        return !0
    },
    createResurgenceUI: function(a) {
        EventMgr.emit(EVENTMGR_ID.FAILED)
    },
    createLoseUI: function(a) {
        a = new LoseLayer(a);
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    createWeekBossLoseUI: function() {
        var a = new WeekGameResultLayer;
        this.addChild(a, 10)
    },
    createPauseUI: function() {
        var a = new PauseLayer(this.lv);
        createMaskLayer(a);
        this.addChild(a, 10)
    },
    createShopLayer: function() {
        var a = new ShopLayer;
        createMaskLayer(a);
        this.addChild(a, 11)
    },
    createChooseNumLayer: function(a) {
        a = new ChooseNumLayer(a);
        createMaskLayer(a);
        this.addChild(a, 11)
    },
    isWin: function() {
        var a = PieceMgr.lvData.targets, b;
        for (b in a)
            if (0 < a[b].num)
                return !1;
        this.isObtainComplete();
        this.isGameWin = !0;
        this.isCanTouch = !1;
        return !0
    },
    isWeekBossEnd: function() {
        return 0 >= PieceMgr.bossCurHp || 0 >= PieceMgr.lvData.step ? !0 : !1
    },
    addScoreAction: function(a) {
        var b = new GameArtWord("fnttype20");
        b.alignmentType = artWordMiddle;
        b.setString("+" + a.score);
        b.attr({
            x: a.target.x,
            y: a.target.y + 20
        });
        this.map.addChild(b, 1E3);
        var c = cc.callFunc(function() {
            this.removeFromParent()
        }, b, a.score);
        b.runAction(cc.sequence(AnimationMgr.getAddScoreAction(b), c));
        PieceMgr.soundNum < a.num && 5 <= a.num && (PieceMgr.soundNum = a.num)
    },
    cheerSound: function(a) {
        5 === a || 6 === a ? engine.gameSound.playEffect(soundRes.sound_good) : 7 === a || 8 === a ? engine.gameSound.playEffect(soundRes.sound_great) : 9 <= a && 12 >= a ? engine.gameSound.playEffect(soundRes.sound_amazing) : 13 <= a && engine.gameSound.playEffect(soundRes.sound_unbelievable)
    },
    createGuideLayer: function() {
        add_IAD_share_count_Fun();
        Global.guildData["lv" + this.lv] && -1 === Utils.getDataIndexByID(gameUserData.guideLevel, this.lv) && this.addChild(new GuideLayer(this.lv), 1001);
        !0 == checkShowIADbyCount() && 5 <= gameUserData.lv && this.playIad()
    },
    createWarn: function() {
        EventMgr.emit(EVENTMGR_ID.MONSTER_NO_STEP)
    },
    warnAction: function() {},
    checkEvil: function() {
        for (var a = 0; a < PieceMgr.elements.length; ++a)
            for (var b = 0; b < PieceMgr.elements[a].length; ++b) {
                var c = PieceMgr.elements[a][b];
                if (c && "0" !== c[0] && -1 !== c[0] && c[0].isEvil && 0 >= c[0].step && !c[0].isChoose)
                    return !0
            }
        return !1
    },
    evilAction: function() {
        for (var a = !0, b = 1, c = 0; c < PieceMgr.elements.length; ++c)
            for (var d = 0; d < PieceMgr.elements[c].length; ++d) {
                var e = PieceMgr.elements[c][d];
                e && "0" !== e[0] && -1 !== e[0] && (a && e[0].isEvil && 0 >= e[0].step ? (a = !1,
                1 < e.length && e[1].setVisible(!1),
                e[0].evilAction()) : (b = cc.pDistance(e[0].getPosition(), cc.p(360, 640)) / 250,
                1 < e.length && e[1].setLocalZOrder(5),
                e[0].setLocalZOrder(4),
                5 <= e[0].curGrid.row ? (e[0].runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 300)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0)))),
                1 < e.length && e[1].runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, 300)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0))))) : 2 >= e[0].curGrid.row ? (e[0].runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, -300)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0)))),
                1 < e.length && e[1].runAction(cc.sequence(cc.moveBy(0.5, cc.p(0, -300)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0))))) : 2 >= e[0].curGrid.col ? (1 < e.length && e[1].runAction(cc.sequence(cc.moveBy(0.5, cc.p(-300, 0)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0)))),
                e[0].runAction(cc.sequence(cc.moveBy(0.5, cc.p(-300, 0)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0))))) : (1 < e.length && e[1].runAction(cc.sequence(cc.moveBy(0.5, cc.p(300, 0)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0)))),
                e[0].runAction(cc.sequence(cc.moveBy(0.5, cc.p(300, 0)), cc.spawn(cc.moveTo(b, cc.p(360, 640)), cc.rotateBy(b, 360), cc.scaleTo(b, 0)))))))
            }
    }
});
var GuideLayer = cc.Layer.extend({
    lv: 0,
    ctor: function(a) {
        this._super();
        this.lv = a || 0
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.recordGuideLevel();
        this.createClippingNode();
        this.createHand();
        this.createDialog();
        this.initListener()
    },
    recordGuideLevel: function() {
        -1 === Utils.getDataIndexByID(gameUserData.guideLevel, this.lv) && (gameUserData.guideLevel.push(this.lv),
        8 === this.lv ? (DataMgr.addItemByID(2001, 1),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)) : 12 === this.lv ? (DataMgr.addItemByID(2002, 1),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)) : 13 === this.lv ? (DataMgr.addItemByID(23, 1),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET)) : 18 === this.lv ? (DataMgr.addItemByID(10, 1),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET)) : 20 === this.lv ? (DataMgr.addItemByID(2003, 1),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)) : 25 === this.lv ? (DataMgr.addItemByID(2004, 1),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)) : 26 === this.lv ? (DataMgr.addItemByID(11, 1),
        EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET)) : 40 === this.lv && (DataMgr.addItemByID(2005, 1),
        EventMgr.emit(EVENTMGR_ID.GAME_ITEMS)));
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    createDialog: function() {
        var a = Global.guildData["lv" + this.lv]
          , b = ParseUIJson.parseJsonToUI(res.res_guide_dialog_json)
          , c = new cc.LabelTTF(a.des,"jellyboom_font",32);
        b.addChild(c);
        c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        c.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        c.setAnchorPoint(cc.p(0.5, 0.5));
        c.boundingWidth = 570;
        c.x = 0;
        c.y = 0;
        b.setPosition(a.dialogPos);
        this.addChild(b, 3)
    },
    initListener: function() {
        cc.eventManager.addListener({
            event: cc.EventListener.TOUCH_ONE_BY_ONE,
            swallowTouches: !0,
            onTouchBegan: this.onTouchBegan.bind(this)
        }, this)
    },
    onTouchBegan: function(a, b) {
        var c = a.getLocation()
          , d = Global.guildData["lv" + this.lv];
        return d.viewRect && this.isTouchInRect(d.viewRect, c) ? (this.removeFromParent(),
        !1) : !0
    },
    isTouchInRect: function(a, b) {
        for (var c = 0; c < a.length; ++c)
            if (cc.rectContainsPoint(a[c], b))
                return !0;
        return !1
    },
    createHand: function() {
        var a = Global.guildData["lv" + this.lv];
        a.handPos && (this.hand = new cc.Sprite("#guide/hand.png"),
        this.hand.setVisible(!0),
        a && (this.hand.setPosition(a.handPos),
        this.moveHand()),
        this.addChild(this.hand, 3))
    },
    moveHand: function() {
        var a = cc.moveBy(1, cc.p(0, 10))
          , b = cc.moveBy(1, cc.p(0, -10));
        this.hand && (this.hand.stopAllActions(),
        this.hand.runAction(cc.sequence(a, b).repeatForever()))
    },
    createClippingNode: function() {
        cc.director.getWinSize();
        this.clipper = new cc.ClippingNode;
        var a = new cc.Sprite(res.guidebg);
        a.x = 360;
        a.y = 640;
        a.setScaleX(110);
        a.setScaleY(140);
        this.clipper.stencil = this.createStencilNode();
        this.clipper.setInverted(!0);
        this.clipper.setAlphaThreshold(0.05);
        this.clipper.addChild(a);
        this.addChild(this.clipper, 1)
    },
    createStencilNode: function() {
        var a = Global.guildData["lv" + this.lv];
        if (!a || !a.viewRect)
            return null;
        var b = new cc.Sprite(a.img);
        b.setAnchorPoint(cc.p(0, 0));
        b.x = a.pos.x;
        b.y = a.pos.y;
        return b
    }
});
var testData = [{
    name: "self",
    rank: 3,
    starNum: 100,
    img: "#others/head1.png",
    lv: 5
}, {
    name: "other",
    rank: 4,
    starNum: 80,
    img: "#others/head1.png",
    lv: 5
}]
  , UpRankLayer = cc.Layer.extend({
    mainUI: null,
    data: null,
    isCanTouch: !1,
    openType: null,
    ctor: function(a) {
        this._super();
        this.mainUI = null;
        this.isCanTouch = !1;
        this.initRankData(a)
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initRankData: function(a) {
        if (rankinGoble) {
            var b = []
              , c = getHonorRankData(gameSDK.sdkPlayInfo.id, 1);
            b.push(c);
            a = getHonorRankData(a, 1)
        } else
            b = [],
            c = getHonorRankData(gameSDK.sdkPlayInfo.id, 2),
            b.push(c),
            a = getHonorRankData(a, 2);
        b.push(a);
        this.data = b
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(fightRes.res_up_rank_layer_json);
        this.addChild(this.mainUI);
        engine.gameSound.playEffect(soundRes.sound_lottery_get_reward);
        engine.gameEvent.createMouseUp(this.mainUI.btnContinue, this.onContinue.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnShare, this.onShare.bind(this), buttonScalingType);
        this.upAction();
        this.downAction()
    },
    onContinue: function() {
        cc.log("on continue !!!");
        if (this.isCanTouch) {
            this.removeFromParent();
            var a = currentScene.getChildByTag(10010);
            null != a && a.addAction()
        }
    },
    showInterAd: function() {},
    onShare: function() {
        cc.log("on share !!!");
        this.isCanTouch && (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        Utils.sendShareUploadImage())
    },
    upAction: function() {
        function a(a) {
            a = new cc.Sprite(a);
            a.setScale(95 / a.getContentSize().width);
            a.x = b.headbg.x;
            a.y = b.headbg.y + 2;
            b.headbg.setLocalZOrder(10);
            b.addChild(a, 1)
        }
        var b = ParseUIJson.parseJsonToUI(fightRes.res_up_rank_node_json);
        b.item.setSpriteFrame("rank/up_bg.png");
        b.downrank.setVisible(!1);
        var c = this.data[0].name;
        null == c && (c = "");
        11 < c.length && (c = c.substr(0, 10) + "...");
        b.nametxt.setString(c);
        b.nametxt.setColor(cc.color(250, 252, 255, 255));
        b.item.aw_fnttype31_lv.setString(this.data[0].level.toString());
        b.uprank.aw_fnttype4_ranknum.setString("" + this.data[0].rankNum);
        b.x = 405;
        b.y = 533;
        this.addChild(b, 3);
        a(res.iconren);
        if (null != cc.spriteFrameCache.getSpriteFrame(this.data[0].photo))
            a("#" + this.data[0].photo);
        else {
            var d = new Image;
            d.crossOrigin = "anonymous";
            d.src = this.data[0].photo;
            d.onload = function() {
                a(d)
            }
        }
        c = cc.sequence(cc.delayTime(4 / 24), cc.moveBy(4 / 24, cc.p(0, -30)), cc.moveTo(0.375, cc.p(313, 855)), cc.callFunc(function() {
            this.addUpRankAction();
            this.isCanTouch = !0
        }
        .bind(this)));
        b.runAction(c)
    },
    addUpRankAction: function() {
        var a = createGameAnimation(fightRes.res_uprank_json, "bglight", 24);
        a.setPosition(cc.p(313, 855));
        a.playCount = 1;
        a.isRemoveFromComplete = !0;
        this.addChild(a, 2);
        a = createGameAnimation(fightRes.res_uprank_json, "staropen", 24);
        a.setPosition(cc.p(313, 880));
        a.playCount = 1;
        a.isRemoveFromComplete = !0;
        this.addChild(a, 4);
        var b = this;
        a.frameCompleteFun = function() {
            var a = createGameAnimation(fightRes.res_uprank_json, "light", 24);
            a.setPosition(cc.p(313, 855));
            a.setScale(3);
            a.playCount = 1;
            a.isRemoveFromComplete = !0;
            b.addChild(a, 4)
        }
    },
    downAction: function() {
        function a(a) {
            a = new cc.Sprite(a);
            a.setScale(95 / a.getContentSize().width);
            a.x = b.headbg.x;
            a.y = b.headbg.y + 2;
            b.headbg.setLocalZOrder(10);
            b.addChild(a, 1)
        }
        var b = ParseUIJson.parseJsonToUI(fightRes.res_up_rank_node_json);
        b.uprank.setVisible(!1);
        var c = this.data[1].name;
        11 < c.length && (c = c.substr(0, 10) + "...");
        b.nametxt.setString(c);
        b.item.aw_fnttype31_lv.setString(this.data[1].level.toString());
        b.downrank.aw_fnttype1_ranknum.setString("" + this.data[1].rankNum);
        b.x = 313;
        b.y = 855;
        this.addChild(b, 1);
        a(res.iconren);
        if (null != cc.spriteFrameCache.getSpriteFrame(this.data[1].photo))
            a("#" + this.data[1].photo);
        else {
            var d = new Image;
            d.crossOrigin = "anonymous";
            d.src = this.data[1].photo;
            d.onload = function() {
                a(d)
            }
        }
        c = cc.sequence(cc.delayTime(4 / 24), cc.moveBy(4 / 24, cc.p(0, 30)), cc.moveTo(0.375, cc.p(405, 533)));
        b.runAction(c)
    }
})
  , NoHeartNode = cc.Node.extend({
    mainUI: null,
    data: null,
    lv: 1,
    ctor: function(a) {
        this._super();
        this.mainUI = null;
        this.data = a || 1
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_no_heart_node_json);
        this.addChild(this.mainUI);
        this.mainUI.desTxt = new cc.LabelTTF("","jellyboom_font",36);
        this.mainUI.desTxt.x = 0;
        this.mainUI.desTxt.y = this.mainUI.toolsbg.y - 5;
        this.mainUI.addChild(this.mainUI.desTxt);
        this.refreshPowerText();
        this.mainUI.powerNode.btnContinue.setVisible(!1);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.powerNode.btnContinue, this.onContinue.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.powerNode.btnWatch, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.invitebtn, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.gembtn, this.onGembtn.bind(this), buttonScalingType);
        var a = new cc.LabelTTF("" + Global.powerPrice,"jellyboom_font",34);
        a.setAnchorPoint(0.5, 0.5);
        a.setColor(cc.color(255, 255, 255, 255));
        a.enableStroke(cc.color(213, 84, 14), 2);
        a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        a.x = 145;
        a.y = this.mainUI.gembtn.relivediamond_6.y;
        this.mainUI.gembtn.addChild(a);
        !0 == checkShareOrWatchByCount() ? (this.mainUI.desTxt.setString(Global.watchdes1),
        this.mainUI.powerNode.btnWatch.setVisible(!1),
        this.mainUI.invitebtn.setVisible(!1),
        this.mainUI.watchbtn.setVisible(!0),
        this.mainUI.gembtn.setVisible(!0),
        engine.gameEvent.createMouseUp(this.mainUI.watchbtn, this.onWatch.bind(this), buttonScalingType)) : (this.mainUI.desTxt.setString(Global.watchdes1),
        this.mainUI.powerNode.btnWatch.setVisible(!0),
        this.mainUI.invitebtn.setVisible(!1),
        this.mainUI.watchbtn.setVisible(!1),
        this.mainUI.gembtn.setVisible(!0),
        engine.gameEvent.createMouseUp(this.mainUI.watchbtn, this.onInvite.bind(this), buttonScalingType));
        1 != gameUserData.isBuyOtherAD && 1 != gameUserData.isAllAD || this.mainUI.watchbtn.n_watchdes.setSpriteFrame("choose_map/n_collect.png");
        this.mainUI.powerNode.setVisible(!0);
        this.refreshInviteInfo();
        inSceneByScale(this)
    },
    onGembtn: function() {
        if (gameUserData.gold >= Global.powerPrice)
            gameUserData.gold -= Global.powerPrice,
            this.removeFromParent(),
            gameUserData.power += 2,
            gameUserData.recoveryPowerNum -= 1,
            gameUserData.limitPowerCount -= 1,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO),
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT),
            gameSDK.saveUserData(getSaveFBData(), null);
        else if (!1 == gameSDK.isCanPay())
            this.not_enough ? this.not_enough.inAction() : (this.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.addChild(this.not_enough, 1001));
        else {
            var a = this;
            createGameMaskLayer("loadUIMask");
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var b = new FacebookPaymentShopLayer;
                createMaskLayer(b);
                a.getParent().addChild(b, 1002);
                removeGameMaskLayer("loadUIMask")
            })
        }
    },
    onInvite: function() {
        var a = this
          , b = function() {
            add_watchAD_share_count_Fun();
            gameUserData.power += 2;
            gameUserData.limitPowerCount -= 1;
            gameUserData.recoveryPowerNum -= 1;
            2 == a.data ? (a.mainUI.powerNode.btnContinue.setVisible(!0),
            a.mainUI.powerNode.btnWatch.setVisible(!1),
            a.mainUI.invitebtn.setVisible(!1),
            a.mainUI.watchbtn.setVisible(!1),
            a.mainUI.gembtn.setVisible(!1)) : a.removeFromParent();
            gameSDK.saveUserData(getSaveFBData(), null);
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)
        };
        if (1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD)
            b();
        else if (0 >= gameUserData.recoveryPowerNum)
            EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.noheartDes);
        else {
            var c = {};
            c.pngData = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 213,
                posY: 55,
                imgWidth: 162,
                imgHeight: 162
            }, {
                url: "res/invicon.png",
                posX: 171,
                posY: 14,
                imgWidth: 235,
                imgHeight: 235
            }];
            c.fontData = [{
                des: "" + gameUserData.stars,
                posX: 290,
                posY: 300,
                font: "40px Microsoft YaHei",
                lineWidth: 2,
                fillStyle: "rgb(249,227,113)",
                textAlign: "center",
                strokeStyle: "#000000"
            }];
            c.width = 750;
            c.height = 380;
            gameSDK.sendFaceBookFriend(b, c)
        }
    },
    refreshInviteInfo: function() {},
    onContinue: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        0 < gameUserData.power && (Global.isInfinite || (gameUserData.power -= 1,
        gameUserData.usePowerNum += 1),
        gameSDK.saveUserData(getSaveFBData(), null),
        this.removeFromParent());
        EventMgr.emit(EVENTMGR_ID.REPLAY)
    },
    onAdd: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        cc.log(" on add !!!");
        var a = {};
        a.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        a.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        a.width = 750;
        a.height = 380;
        gameSDK.sendFaceBookFriend(null, a)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        2 == this.data ? transitions(ChooseScene, g_resources, LoadScene) : this.removeFromParent()
    },
    refreshPowerText: function() {
        this.mainUI.desTxt.setString("" + Global.watchPowerStr + "2")
    },
    onWatch: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        0 < gameUserData.recoveryPowerNum ? 1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD ? (gameUserData.power += 2,
        gameUserData.recoveryPowerNum -= 1,
        gameUserData.limitPowerCount -= 1,
        EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO),
        gameSDK.saveUserData(getSaveFBData(), null),
        2 == this.data ? (this.mainUI.powerNode.btnContinue.setVisible(!0),
        this.mainUI.powerNode.btnWatch.setVisible(!1),
        this.mainUI.invitebtn.setVisible(!1),
        this.mainUI.watchbtn.setVisible(!1),
        this.mainUI.gembtn.setVisible(!1)) : this.removeFromParent()) : this.showRewardAd() : EventMgr.emit(EVENTMGR_ID.SHOW_TIPS, Global.noheartDes)
    },
    showRewardAd: function() {
        var a = this;
        if (isNotFbGame)
            gameUserData.power += 2,
            add_watchAD_share_count_Fun(),
            Global.isWatchAD = !0,
            gameUserData.recoveryPowerNum -= 1,
            gameUserData.limitPowerCount -= 1,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO),
            gameSDK.saveUserData(getSaveFBData(), null),
            2 == a.data ? (a.mainUI.powerNode.btnContinue.setVisible(!0),
            a.mainUI.powerNode.btnWatch.setVisible(!1),
            a.mainUI.invitebtn.setVisible(!1),
            a.mainUI.watchbtn.setVisible(!1),
            a.mainUI.gembtn.setVisible(!1)) : a.removeFromParent();
        else if (!isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var b = null
              , a = this;
            FBInstant.getRewardedVideoAsync(rewardedVideoID2).then(function(a) {
                b = a;
                return b.loadAsync()
            }).then(function() {
                return b.showAsync()
            }).then(function() {
                isAdLoading = !1;
                add_watchAD_share_count_Fun();
                Global.isWatchAD = !0;
                gameUserData.power += 2;
                gameUserData.recoveryPowerNum -= 1;
                gameUserData.limitPowerCount -= 1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO);
                gameSDK.saveUserData(getSaveFBData(), null);
                2 == a.data ? (a.mainUI.powerNode.btnContinue.setVisible(!0),
                a.mainUI.powerNode.btnWatch.setVisible(!1),
                a.mainUI.invitebtn.setVisible(!1),
                a.mainUI.watchbtn.setVisible(!1),
                a.mainUI.gembtn.setVisible(!1)) : a.removeFromParent()
            }).catch(function(a) {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b)
            })
        }
    },
    rewardFailToInter: function() {
        if (!isNotFbGame) {
            var a = null
              , b = this;
            FBInstant.getInterstitialAdAsync("1219338561447280_1625270030854129").then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                gameUserData.power += 2;
                gameUserData.recoveryPowerNum -= 1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO);
                gameSDK.saveUserData(getSaveFBData(), null);
                2 == b.data ? (b.mainUI.powerNode.btnContinue.setVisible(!0),
                b.mainUI.powerNode.btnWatch.setVisible(!1)) : b.removeFromParent()
            }).catch(function(a) {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b)
            })
        }
    }
});
var SignInLayer = cc.Layer.extend({
    mainUI: null,
    day: -1,
    callFun: null,
    selectType: null,
    ctor: function(a) {
        this._super();
        this.day = -1;
        this.selectType = !0;
        this.callFun = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super();
        null != this.callFun && this.callFun()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_sign_in_layer);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        this.mainUI.btnGet.setVisible(!0);
        this.mainUI.btnInvite.setVisible(!1);
        this.mainUI.btnWatch.setVisible(!1);
        this.isCanSign() ? (engine.gameEvent.createMouseUp(this.mainUI.btnInvite, this.onGet.bind(this), buttonScalingType),
        engine.gameEvent.createMouseUp(this.mainUI.btnWatch, this.onWatch.bind(this), buttonScalingType),
        engine.gameEvent.createMouseUp(this.mainUI.btnGet, this.onGet.bind(this), buttonScalingType)) : (this.mainUI.btnInvite.setVisible(!1),
        this.mainUI.btnWatch.setVisible(!1),
        this.mainUI.btnGet.setVisible(!1));
        this.initSign();
        1 > gameUserData.lv && (this.selectType = !1,
        this.mainUI.btnInvite.setVisible(!1),
        this.mainUI.btnWatch.setVisible(!1),
        this.isCanSign() ? this.mainUI.btnGet.setVisible(!0) : this.mainUI.btnGet.setVisible(!1));
        this.selectType = !1;
        inSceneByScale(this)
    },
    selectbtn: function() {
        this.selectType = !0 == this.selectType ? !1 : !0;
        this.mainUI.select.setVisible(this.selectType)
    },
    isCanSign: function() {
        if (0 >= Global.severTime || 7 <= gameUserData.signNum)
            return !1;
        this.day = (new Date(1E3 * Global.severTime)).getDate();
        return this.day !== gameUserData.signDay ? !0 : !1
    },
    initSign: function() {
        for (var a = 1; 7 >= a; ++a)
            if (this.mainUI["itembg" + a].black.setVisible(a <= gameUserData.signNum),
            gameUserData.signNum + 1 == a && this.isCanSign() && (this.mainUI["itembg" + a].titleimg.setSpriteFrame("sign/n_dayy" + a + ".png"),
            7 == a ? this.mainUI["itembg" + a].headbg.setSpriteFrame("sign/n_itemtitleb2.png") : this.mainUI["itembg" + a].headbg.setSpriteFrame("sign/n_itemtitle2.png")),
            7 != a) {
                var b = Global.signReward[a - 1][0]
                  , c = DataMgr.getElementDataByID(b.id).uiIcon;
                Utils.changeTexture(this.mainUI["itembg" + a].icon, "element/" + c + ".png");
                this.mainUI["itembg" + a].aw_fnttype1_num.setString("x" + b.num)
            } else
                for (var b = Global.signReward[a - 1], d = 0; 3 > d; d++)
                    c = DataMgr.getElementDataByID(b[d].id).uiIcon,
                    Utils.changeTexture(this.mainUI["itembg" + a]["icon" + (d + 1)], "element/" + c + ".png"),
                    this.mainUI["itembg" + a]["aw_fnttype1_num" + (d + 1)].setString("x" + b[d].num)
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.removeFromParent()
    },
    onWatch: function() {
        if (!1 != this.isCanSign()) {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var a = this
              , b = function(b) {
                7 > gameUserData.signNum && (a.getReward(Global.signReward[gameUserData.signNum], b),
                a.addGetRewardAction(Global.signReward[gameUserData.signNum]),
                gameUserData.signNum += 1,
                a.updateShowLayer(gameUserData.signNum),
                gameUserData.signDay = a.day,
                7 <= gameUserData.signNum && (gameUserData.signDayLimit = gameUserData.signDay),
                gameSDK.saveUserData(getSaveFBData(), null),
                EventMgr.emit(EVENTMGR_ID.REFRESH_POT),
                a.removeFromParent())
            };
            if (!0 == this.selectType) {
                if (!isAdLoading) {
                    EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
                    isAdLoading = !0;
                    var c = null;
                    FBInstant.getRewardedVideoAsync("319647368564919_437136566815998").then(function(a) {
                        c = a;
                        return c.loadAsync()
                    }).then(function() {
                        return c.showAsync()
                    }).then(function() {
                        isAdLoading = !1;
                        b(2)
                    }).catch(function(a) {
                        isAdLoading = !1;
                        EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                        var b = Global.noAdds;
                        "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                        EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b)
                    })
                }
            } else
                b(1)
        }
    },
    onGet: function() {
        if (!1 != this.isCanSign()) {
            engine.gameSound.playEffect(soundRes.sound_normal_touch);
            var a = this
              , b = function(b) {
                7 > gameUserData.signNum && (a.getReward(Global.signReward[gameUserData.signNum], b),
                a.addGetRewardAction(Global.signReward[gameUserData.signNum]),
                gameUserData.signNum += 1,
                a.updateShowLayer(gameUserData.signNum),
                gameUserData.signDay = a.day,
                7 <= gameUserData.signNum && (gameUserData.signDayLimit = gameUserData.signDay),
                gameSDK.saveUserData(getSaveFBData(), null),
                EventMgr.emit(EVENTMGR_ID.REFRESH_POT),
                a.removeFromParent())
            }
              , c = function() {
                b(2)
            };
            if (!0 == this.selectType) {
                var d = {};
                d.pngData = [{
                    url: "res/invbg.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 380
                }, {
                    url: selfData.myurl,
                    posX: 213,
                    posY: 55,
                    imgWidth: 162,
                    imgHeight: 162
                }, {
                    url: "res/invicon.png",
                    posX: 171,
                    posY: 14,
                    imgWidth: 235,
                    imgHeight: 235
                }];
                d.fontData = [{
                    des: "" + gameUserData.stars,
                    posX: 290,
                    posY: 300,
                    font: "40px Microsoft YaHei",
                    lineWidth: 2,
                    fillStyle: "rgb(249,227,113)",
                    textAlign: "center",
                    strokeStyle: "#000000"
                }];
                d.width = 750;
                d.height = 380;
                gameSDK.sendFaceBookFriend(c, d)
            } else
                b(1)
        }
    },
    addGetRewardAction: function(a) {
        this.setVisible(!1);
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 100001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(300, 700), cc.p(420, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    },
    updateShowLayer: function(a) {
        this.mainUI["itembg" + a].black.setVisible(!0);
        7 == a ? this.mainUI["itembg" + a].headbg.setSpriteFrame("sign/n_itemtitleb1.png") : this.mainUI["itembg" + a].headbg.setSpriteFrame("sign/n_itemtitle1.png");
        this.mainUI["itembg" + a].titleimg.setSpriteFrame("sign/n_dayg" + a + ".png")
    },
    getReward: function(a, b) {
        for (var c = 0; c < a.length; ++c)
            2006 === a[c].id ? (gameUserData.gold += a[c].num * b,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === a[c].id ? (gameUserData.power += a[c].num * b,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : 2009 === a[c].id ? (gameUserData.freeLotteyNum += a[c].num * b,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POT)) : DataMgr.addItemByID(a[c].id, a[c].num * b)
    }
})
  , InfiniteNode = cc.Layer.extend({
    mainUI: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_infinite_node);
        this.addChild(this.mainUI, 1001);
        engine.gameEvent.createMouseUp(this.mainUI.btnOk, this.onOk.bind(this), buttonScalingType)
    },
    onOk: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        gameUserData.getInfinitePowerTime = Math.floor((new Date).getTime() / 1E3);
        Global.isInfinite = !0;
        Global.isSecondDay = !1;
        gameSDK.saveUserData(getSaveFBData(), null);
        EventMgr.emit(EVENTMGR_ID.INFINITE_POWER);
        this.removeFromParent()
    }
})
  , ParachuteLayer = cc.Layer.extend({
    mainUI: null,
    type: 1,
    ctor: function(a) {
        this._super();
        this.type = a || 1
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_parachute_layer);
        this.addChild(this.mainUI);
        this.mainUI.text = new cc.LabelTTF("","jellyboom_font",35);
        this.mainUI.addChild(this.mainUI.text);
        this.mainUI.text.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.text.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        this.mainUI.text.x = 360;
        this.mainUI.text.y = 527;
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.btnWatch, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.invitebtn, this.onInvite.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.watchbtn, this.onWatch.bind(this), buttonScalingType);
        !0 == checkShareOrWatchByCount() ? (this.mainUI.text.setString(Global.watchdes),
        this.mainUI.btnWatch.setVisible(!1),
        this.mainUI.invitebtn.setVisible(!1),
        this.mainUI.watchbtn.setVisible(!0)) : (this.mainUI.text.setString(Global.watchdes),
        this.mainUI.btnWatch.setVisible(!1),
        this.mainUI.invitebtn.setVisible(!0),
        this.mainUI.watchbtn.setVisible(!1),
        this.mainUI.invitebtn.x = 360);
        1 != gameUserData.isBuyOtherAD && 1 != gameUserData.isAllAD || this.mainUI.watchbtn.n_watchdes.setSpriteFrame("choose_map/n_collect.png")
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        this.removeFromParent()
    },
    onWatch: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        1 == gameUserData.isBuyOtherAD || 1 == gameUserData.isAllAD ? (this.removeFromParent(),
        1 === this.type ? (EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            id: 2006,
            num: 50
        }),
        gameUserData.gold += 50) : EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            id: 2010,
            num: 5
        }),
        gameUserData.watchParachuteAd_count--,
        null != this.chooseLevelLayer && null != this.chooseLevelLayer.removeGift && this.chooseLevelLayer.removeGift()) : this.showRewardAd()
    },
    onInvite: function() {
        var a = this
          , b = {};
        b.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 303,
            posY: 135,
            imgWidth: 144,
            imgHeight: 144
        }, {
            url: "res/invicon.png",
            posX: 281,
            posY: 114,
            imgWidth: 187,
            imgHeight: 187
        }];
        b.fontData = [{
            des: "" + gameUserData.stars,
            posX: 400,
            posY: 340,
            font: "45px Microsoft YaHei",
            lineWidth: 5,
            fillStyle: "rgb(255,255,255)",
            textAlign: "center",
            strokeStyle: "#8e1910"
        }];
        b.width = 750;
        b.height = 380;
        gameSDK.sendFaceBookFriend(function() {
            a.removeFromParent();
            add_watchAD_share_count_Fun();
            1 === a.type ? (EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                id: 2006,
                num: 50
            }),
            gameUserData.gold += 50) : EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                id: 2010,
                num: 5
            });
            gameUserData.watchParachuteAd_count--;
            null != a.chooseLevelLayer && null != this.chooseLevelLayer.removeGift && a.chooseLevelLayer.removeGift()
        }, b)
    },
    showRewardAd: function() {
        var a = this;
        if (isNotFbGame)
            a.removeFromParent(),
            add_watchAD_share_count_Fun(),
            Global.isWatchAD = !0,
            1 === a.type ? (EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                id: 2006,
                num: 50
            }),
            gameUserData.gold += 50) : EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                id: 2010,
                num: 3
            }),
            gameUserData.watchParachuteAd_count--,
            null != a.chooseLevelLayer && null != a.chooseLevelLayer.removeGift && a.chooseLevelLayer.removeGift();
        else if (!isAdLoading) {
            isAdLoading = !0;
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            var b = null;
            FBInstant.getRewardedVideoAsync(rewardedVideoID3).then(function(a) {
                b = a;
                return b.loadAsync()
            }).then(function() {
                return b.showAsync()
            }).then(function() {
                isAdLoading = !1;
                a.removeFromParent();
                add_watchAD_share_count_Fun();
                Global.isWatchAD = !0;
                1 === a.type ? (EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                    id: 2006,
                    num: 50
                }),
                gameUserData.gold += 50) : EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                    id: 2010,
                    num: 3
                });
                gameUserData.watchParachuteAd_count--;
                null != a.chooseLevelLayer && null != a.chooseLevelLayer.removeGift && a.chooseLevelLayer.removeGift();
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1)
            }).catch(function(a) {
                isAdLoading = !1;
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0)
            })
        }
    },
    rewardFailToInter: function() {
        if (!isNotFbGame) {
            var a = null
              , b = this;
            FBInstant.getInterstitialAdAsync("1219338561447280_1625271200854012").then(function(b) {
                a = b;
                return a.loadAsync()
            }).then(function() {
                return a.showAsync()
            }).then(function() {
                isAdLoading = !1;
                b.removeFromParent();
                1 === b.type ? (EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                    id: 2006,
                    num: 100
                }),
                gameUserData.gold += 100) : (PieceMgr.lvData.step += 5,
                EventMgr.emit(EVENTMGR_ID.STEP, PieceMgr.lvData.step),
                EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
                    id: 2010,
                    num: 1
                }));
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1)
            }).catch(function(a) {
                isAdLoading = !1;
                b.removeFromParent();
                var d = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (d = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, d);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0)
            })
        }
    }
});
var TargetBoxLayer = cc.Layer.extend({
    boxAction: null,
    callFun: null,
    ctor: function(a) {
        this._super();
        this.callFun = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super();
        null != this.callFun && this.callFun()
    },
    initUI: function() {
        var a = new ccui.ImageView("public/scalesprite7.png",ccui.Widget.PLIST_TEXTURE);
        a.setScale9Enabled(!0);
        a.setContentSize(cc.size(720, 236));
        this.addChild(a);
        a.x = 360;
        a.y = 700;
        this.boxAction = createGameAnimation(res.res_starbox_json, "boxshake", 24);
        this.addChild(this.boxAction);
        this.boxAction.x = 140;
        this.boxAction.y = 700;
        a = cc.formatStr(Global.targetTxt, gameUserData.tagetlvl - gameUserData.lv);
        a = new cc.LabelTTF(a,"jellyboom_font",38);
        this.addChild(a);
        a.setHorizontalAlignment(cc.TEXT_ALIGNMENT_LEFT);
        a.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        a.setAnchorPoint(cc.p(0, 0.5));
        a.boundingWidth = 520;
        a.x = 230;
        a.y = 690;
        var b = this
          , c = function() {
            b.removeFromParent()
        };
        this.runAction(cc.sequence(cc.delayTime(2), cc.callFunc(function() {
            b.boxAction.gotoAndStop(0);
            b.boxAction.runAction(cc.sequence(cc.moveTo(0.5, cc.p(655, 860)), cc.callFunc(c)))
        })))
    }
});
var TargetBoxGetLayer = cc.Layer.extend({
    mainUI: null,
    chooseLevelLayer: null,
    ctor: function() {
        this._super();
        this.mainUI = this.chooseLevelLayer = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_target_box_layer_json);
        this.addChild(this.mainUI);
        this.mainUI.aw_fnttype1_num1.setString("x1");
        this.mainUI.aw_fnttype1_num2.setString("x1");
        this.mainUI.aw_fnttype1_num3.setString("x50");
        engine.gameEvent.createMouseUp(this.mainUI.btnreward, this.clickGetReward.bind(this), buttonScalingType, cc.rect(0, 0, viewGameWidth, viewGameHeigh))
    },
    clickGetReward: function() {
        gameUserData.power += 1;
        gameUserData.gold += 50;
        gameUserData.boxget = 1;
        gameSDK.saveUserData(getSaveFBData(), null);
        this.chooseLevelLayer.targetBoxRewardAction();
        this.removeFromParent()
    }
});
var GameMonsterLayer = cc.Layer.extend({
    animation: null,
    mosterPos: null,
    isPlayComplete: null,
    ctor: function() {
        this._super();
        this.mosterPos = cc.p(220, 1010);
        this.isPlayComplete = !1
    },
    onEnter: function() {
        this._super();
        this.animation = createGameAnimation(res.res_monster_json, "monster_wait", 31);
        this.animation.setPosition(this.mosterPos);
        this.animation.playCount = -1;
        this.addChild(this.animation, 30);
        var a = this;
        [EVENTMGR_ID.MONSTER_V, EVENTMGR_ID.MONSTER_HINT, EVENTMGR_ID.MONSTER_NO_STEP, EVENTMGR_ID.MONSTER_WAIT].forEach(function(b) {
            EventMgr.register(b, function() {
                a.play_monster(b)
            }, null)
        })
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.MONSTER_V, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_F, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_HINT, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_NO_STEP, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_WAIT, null);
        EventMgr.remove(EVENTMGR_ID.MONSTER_DANCE, null)
    },
    play_monster: function(a) {
        var b = ["res/pngdata/monster2/monster2.json", "res/pngdata/monster1/monster1.json", "res/pngdata/monster4/monster4.json", "res/pngdata/monster3/monster3.json", res.res_monster_json, "res/pngdata/monster2/monster2.json"];
        this.animation.removeFromParent();
        this.animation = null;
        var b = b[a - 100]
          , c = "monster_v monster_f monster_hint monster_step_over_new monster_wait monster_dance".split(" ")[a - 100];
        b != res.res_monster_json && null == cc.loader.getRes(b) && (b = res.res_monster_json,
        c = "monster_wait",
        a = EVENTMGR_ID.MONSTER_WAIT);
        this.animation = createGameAnimation(b, c, 30);
        this.animation.setPosition(this.mosterPos);
        this.animation.playCount = -1;
        var d = this;
        a == EVENTMGR_ID.MONSTER_F && (this.animation.playCount = -1);
        a == EVENTMGR_ID.MONSTER_HINT && (this.animation.playCount = 1,
        this.animation.frameCompleteFun = function() {
            d.isPlayComplete = !1;
            d.play_monster(EVENTMGR_ID.MONSTER_WAIT)
        }
        );
        a == EVENTMGR_ID.MONSTER_NO_STEP && (this.animation.playCount = 1,
        this.animation.frameCompleteFun = function() {
            d.isPlayComplete = !1;
            d.play_monster(EVENTMGR_ID.MONSTER_NO_STEP)
        }
        );
        a == EVENTMGR_ID.MONSTER_DANCE && (this.animation.playCount = 1,
        this.animation.frameCompleteFun = function() {
            d.isPlayComplete = !1;
            d.play_monster(EVENTMGR_ID.MONSTER_WAIT)
        }
        );
        a == EVENTMGR_ID.MONSTER_V && (this.animation.playCount = -1,
        this.animation.frameCompleteFun = function() {}
        );
        this.addChild(this.animation, 30)
    }
});
var nextResComplete = !1
  , GoToNextPageLayer = cc.Layer.extend({
    mainUI: null,
    ctor: function() {
        this._super();
        this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_goto_next_page_layer_json);
        this.addChild(this.mainUI);
        this.mainUI.destxt.setString(Global.gotoNextTxt);
        engine.gameEvent.createMouseUp(this.mainUI.returnbtn, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.confimebtn, this.onContinue.bind(this), buttonScalingType)
    },
    onClose: function() {
        this.removeFromParent()
    },
    onContinue: function() {
        this.removeFromParent();
        transitionsF(ChooseScene, g_mapRes, LoadScene, function() {
            nextResComplete = !0
        })
    }
});
var WeekGameGiftRewardLayer = cc.Layer.extend({
    mainUI: null,
    moveLayer: null,
    isClick: null,
    touchY: null,
    clickDownPoint: null,
    progressTxt: null,
    ctor: function() {
        this._super();
        this.progressTxt = this.clickDownPoint = this.touchY = this.isClick = this.moveLayer = this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_gift_reward_json);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun.bind(this), buttonScalingType);
        this.updateRewardNumber();
        this.mainUI.bg2.destxt.setString(Global.getRewardDes);
        var a = new cc.DrawNode;
        a.drawRect(cc.p(80, 290), cc.p(680, 680), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        a = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
        this.mainUI.addChild(a);
        a.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(a, this.clickDownFun.bind(this), null, cc.rect(80, 290, 600, 390));
        engine.gameEvent.createMouseMove(a, this.clickMoveFun.bind(this), null, cc.rect(80, 290, 600, 390));
        engine.gameEvent.createMouseUp(a, this.clickUpFun.bind(this), null, cc.rect(80, 290, 600, 390));
        this.moveLayer = new cc.Layer;
        a.addChild(this.moveLayer);
        this.addRewardNode()
    },
    updateRewardNumber: function() {
        for (var a = 0; a < Global.weekReward.length; a++) {
            this.mainUI.bg2["rewardbg" + (a + 1)].aw_fnttype1_rewardnum.setString("x" + Global.weekReward[a][0].num);
            var b = DataMgr.getElementDataByID(Global.weekReward[a][0].id);
            this.mainUI.bg2["rewardbg" + (a + 1)].rewardicon.setSpriteFrame("element/" + b.uiIcon + ".png")
        }
    },
    addRewardNode: function() {
        for (var a = 0; a < Global.hurtReward.length; a++) {
            var b = new WeekGameGiftRewardNode(a + 1);
            this.moveLayer.addChild(b);
            b.x = 250;
            b.y = 680 - 128 * a - 10
        }
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        var c = a.getLocation()
          , d = this.touchY - c.y
          , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
        5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
        d = this.moveLayer.y - d;
        this.touchY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        var b = Global.hurtReward.length - 3;
        0 > b && (b = 0);
        a > 128 * b + 50 && (a = 128 * b + 50);
        this.moveLayer.y = a
    },
    clickUpFun: function() {},
    closeFun: function() {
        this.removeFromParent()
    }
})
  , WeekGameGiftRewardNode = cc.Sprite.extend({
    index: null,
    ctor: function(a) {
        this._super();
        this.index = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.setCascadeOpacityEnabled(!0);
        this.setContentSize(cc.size(512, 124));
        var a = new cc.Sprite("#weekgame/weekgameendbg.png");
        this.addChild(a);
        a.x = 180;
        a = new ccui.ImageView("public/scalesprite15.png",ccui.Widget.PLIST_TEXTURE);
        a.setScale9Enabled(!0);
        a.setContentSize(cc.size(365, 90));
        this.addChild(a);
        a.x = 435;
        var a = Global.hurtReward[this.index - 1]
          , b = ""
          , b = 1 == gameUserData.hurt_gift_package[this.index - 1] ? "#weekgame/n_hurtgray.png" : "#weekgame/n_hurtimg.png"
          , b = new cc.Sprite(b);
        this.addChild(b);
        b.x = 170;
        b.y = 2;
        b = new GameArtWord("fnttype1");
        b.alignmentType = artWordMiddle;
        b.setString("x" + a.hurtNum);
        b.x = 175;
        b.y = -30;
        this.addChild(b);
        this.updateShow()
    },
    updateShow: function() {
        for (var a = Global.hurtReward[this.index - 1].reward, b = [], c = [], d = 0; d < a.length; d++) {
            var e = "#element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , e = new cc.Sprite(e);
            this.addChild(e);
            b.push(e);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            this.addChild(e);
            c.push(e)
        }
        a = {};
        a.spArr = b;
        a.spWidth = 148;
        a.p = cc.p(420, 2);
        a.settingType = centerSetting;
        gameSpSettingFun(a);
        b = {};
        b.spArr = c;
        b.spWidth = 148;
        b.p = cc.p(444, -24);
        b.settingType = centerSetting;
        gameSpSettingFun(b)
    }
});
var WeekGameHelpLayer = cc.Layer.extend({
    mainUI: null,
    ctor: function() {
        this._super();
        this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_help_json);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun.bind(this), buttonScalingType)
    },
    closeFun: function() {
        this.removeFromParent()
    }
});
var WeekGameRankLayer = cc.Layer.extend({
    mainUI: null,
    moveLayer: null,
    isClick: null,
    touchY: null,
    clickDownPoint: null,
    rankNodeArray: null,
    proTxtArray: null,
    bgImg: null,
    ctor: function() {
        this._super();
        this.clickDownPoint = this.touchY = this.isClick = this.moveLayer = this.mainUI = null;
        this.rankNodeArray = [];
        this.proTxtArray = [];
        this.bgImg = null
    },
    onEnter: function() {
        this._super();
        this.initUI();
        EventMgr.register(EVENTMGR_ID.WEEKGAME_TICKETS_PUSH, function() {
            this.updateBtnPush()
        }, this)
    },
    onExit: function() {
        this._super();
        this.unscheduleUpdate();
        EventMgr.remove(EVENTMGR_ID.WEEKGAME_TICKETS_PUSH, this)
    },
    initUI: function() {
        var a = new cc.Layer
          , b = new cc.DrawNode;
        b.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        a.addChild(b);
        this.addChild(a, -1);
        engine.gameEvent.createMouseDown(a, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
        a = 0;
        a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        b = new cc.Sprite("res/game/playbg/resultbg.jpg");
        b.x = a - uiOfferX;
        b.y = viewGameHeigh / 2;
        b.setScale(2);
        this.addChild(b);
        var c = new cc.Sprite("res/game/playbg/cloud.png");
        c.x = 230;
        c.y = 60;
        b.addChild(c);
        c = new cc.DrawNode;
        c.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 80), 0, cc.color(0, 0, 0, 80));
        b.addChild(c);
        this.bgImg = b;
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_rank_json);
        this.addChild(this.mainUI);
        b = new cc.Sprite("res/weekgame/weekgameimg.png");
        this.mainUI.addChild(b);
        b.x = a - uiOfferX;
        b.y = 940;
        this.mainUI.rewarddes.setString(Global.getRewardDes);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.playbtn, this.clickPlayFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.helpbtn, this.clickHelpFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.boxicon, this.clickBoxIconFun.bind(this), buttonScalingType);
        a = new cc.DrawNode;
        a.drawRect(cc.p(20, 405), cc.p(700, 790), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        a = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
        this.mainUI.addChild(a);
        a.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(a, this.clickDownFun.bind(this), null, cc.rect(20, 405, 680, 385));
        engine.gameEvent.createMouseMove(a, this.clickMoveFun.bind(this), null, cc.rect(20, 405, 680, 385));
        engine.gameEvent.createMouseUp(a, this.clickUpFun.bind(this), null, cc.rect(20, 405, 680, 385));
        this.moveLayer = new cc.Layer;
        a.addChild(this.moveLayer);
        this.addRankNode();
        this.mainUI.protxtbg.progressTxt.setString("" + gameUserData.myHurt);
        this.proTxtArray.push(this.mainUI.protxtbg.progressTxt);
        this.addRewardTxt();
        this.updateProgress();
        this.updateBtnPush();
        this.updateGiftBoxPush();
        this.addWeekReward();
        a = gameUserData.week_refresh - getCheckoutServerTime();
        86400 < a ? this.mainUI.cleardday.setString(Math.floor(a / 86400) + " " + Global.dayTxt) : (this.mainUI.cleardday.setString(getComputeTime(a)),
        this.scheduleUpdate());
        a = this.mainUI.cleardday.getContentSize().width + this.mainUI.rankdes_1.getContentSize().width + 5;
        this.mainUI.rankdes_1.x = 385 - a / 2 + this.mainUI.rankdes_1.getContentSize().width;
        this.mainUI.cleardday.x = this.mainUI.rankdes_1.x + 5
    },
    showInAction: function() {
        for (var a = this.mainUI.getChildren(), b = 0; b < a.length; b++)
            a[b].setCascadeOpacityEnabled(!0),
            a[b].setOpacity(0);
        for (b = 0; b < this.rankNodeArray.length; b++)
            this.rankNodeArray[b].mainUI.setVisible(!1);
        for (b = 0; b < this.proTxtArray.length; b++)
            this.proTxtArray[b].setOpacity(0);
        this.bgImg.setCascadeOpacityEnabled(!0);
        this.bgImg.setScale(0);
        this.bgImg.x = 645;
        this.bgImg.y = 945
    },
    update: function() {
        var a = gameUserData.week_refresh - getCheckoutServerTime();
        this.mainUI.cleardday.setString(getComputeTime(a));
        0 >= a && this.unscheduleUpdate()
    },
    updateWeekGameTime: function() {
        var a = new Date
          , b = a.getDay()
          , c = 0
          , c = 1 <= b ? a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400 + 86400 * (7 - b) : a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400;
        gameUserData.week_refresh = c;
        gameUserData.week_gift = 0;
        gameSDK.saveUserData(getSaveFBData(), null)
    },
    addWeekReward: function() {
        Math.floor((new Date).getTime() / 1E3) >= gameUserData.week_refresh && (gameUserData.week_gift = 1);
        if (1 == gameUserData.week_gift && 0 == gameUserData.week_gift_reveived)
            if (3 > Global.weekRank.length)
                this.updateWeekGameTime();
            else {
                var a = getWeekGameLastRanking();
                0 == a || 3 < a ? this.updateWeekGameTime() : !1 == getWeekGameLastScore() ? this.updateWeekGameTime() : (a = new WeekGameRankRewardLayer,
                this.addChild(a))
            }
    },
    updateBtnPush: function() {
        0 < gameUserData.free_count ? (this.mainUI.playbtn.redpush.setVisible(!0),
        this.mainUI.playbtn.redpush.txt.setString(gameUserData.free_count)) : this.mainUI.playbtn.redpush.setVisible(!1)
    },
    updateGiftBoxPush: function() {
        var a = this.getBoxRewardNum();
        0 < a ? (this.mainUI.boxicon.redpush.setVisible(!0),
        this.mainUI.boxicon.redpush.txt.setString(a)) : this.mainUI.boxicon.redpush.setVisible(!1)
    },
    getBoxRewardNum: function() {
        for (var a = 0, b = 0; b < Global.hurtReward.length; b++)
            gameUserData.myHurt >= Global.hurtReward[b].hurtNum && (a = b + 1);
        for (var c = 0, b = 0; b < a; b++)
            0 == gameUserData.hurt_gift_package[b] && c++;
        return c
    },
    addRewardTxt: function() {
        for (var a = this.mainUI.boxprobg.getContentSize().width, b = this.mainUI.boxprobg.x - a / 2, c = 0; c < Global.hurtReward.length; c++) {
            var d = new cc.LabelTTF(Global.hurtReward[c].hurtNum,"jellyboom_font",22);
            this.addChild(d);
            d.setColor(cc.color(142, 203, 235));
            d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            d.x = b + Global.hurtReward[c].hurtNum / Global.hurtAllReward * a;
            650 < d.x && (d.x = 650);
            d.y = 263;
            var e = new cc.Sprite("#weekgame/arrows.png");
            this.addChild(e);
            e.x = d.x;
            e.y = d.y - 20;
            this.proTxtArray.push(d)
        }
    },
    updateProgress: function() {
        var a = this.mainUI.boxprobg.getContentSize().width
          , b = this.mainUI.boxprobg.x - a / 2 + 4;
        this.mainUI.protxtbg.progressTxt.setString("" + gameUserData.myHurt);
        this.mainUI.protxtbg.x = b + gameUserData.myHurt / Global.hurtAllReward * a;
        123 > this.mainUI.protxtbg.x && (this.mainUI.protxtbg.x = 123);
        658 < this.mainUI.protxtbg.x && (this.mainUI.protxtbg.x = 658);
        this.mainUI.boxprogress.setPercent(gameUserData.myHurt / Global.hurtAllReward * 100)
    },
    addRankNode: function() {
        this.rankNodeArray = [];
        for (var a = 0; a < Global.weekRank.length; a++) {
            var b = new WeekGameRankNode(a + 1);
            this.moveLayer.addChild(b);
            b.x = 360;
            b.y = 665 - 128 * a;
            this.rankNodeArray.push(b)
        }
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        var c = a.getLocation()
          , d = this.touchY - c.y
          , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
        5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
        d = this.moveLayer.y - d;
        this.touchY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        var b = Global.weekRank.length - 3;
        0 > b && (b = 0);
        a > 128 * b + 50 && (a = 128 * b + 50);
        this.moveLayer.y = a
    },
    clickUpFun: function() {},
    getBoxRewardIndex: function() {
        for (var a = 0, b = 0; b < Global.hurtReward.length; b++)
            gameUserData.myHurt >= Global.hurtReward[b].hurtNum && (a = b + 1);
        for (var c = 0, b = 0; b < a; b++)
            if (0 == gameUserData.hurt_gift_package[b]) {
                c = b + 1;
                break
            }
        return c
    },
    clickBoxIconFun: function() {
        var a = this.getBoxRewardIndex();
        if (0 < a) {
            for (var b = Global.hurtReward[a - 1].reward, c = 0; c < b.length; c++)
                2006 === b[c].id ? (gameUserData.gold += b[c].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === b[c].id ? (gameUserData.power += b[c].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : 2009 === b[c].id ? (gameUserData.freeLotteyNum += b[c].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POT)) : DataMgr.addItemByID(b[c].id, b[c].num);
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
            this.playGetAction(b);
            gameUserData.hurt_gift_package[a - 1] = 1;
            this.updateGiftBoxPush();
            gameSDK.saveUserData(getSaveFBData(), null);
            a = {};
            a.gift_package = gameUserData.hurt_gift_package;
            HttpFun.updateWeekGameHurtGiftState(a)
        } else
            null == this.getChildByName("weekGameGiftRewardLayer") && (a = new WeekGameGiftRewardLayer,
            a.setName("weekGameGiftRewardLayer"),
            this.addChild(a))
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    },
    clickHelpFun: function() {
        if (null == this.getChildByName("weekGameHelpLayer")) {
            var a = new WeekGameHelpLayer;
            a.setName("weekGameHelpLayer");
            this.addChild(a)
        }
    },
    clickPlayFun: function() {
        if (0 >= gameUserData.free_count) {
            if (null == this.getChildByName("weekGameTicketsLayer")) {
                var a = new WeekGameTicketsLayer;
                a.setName("weekGameTicketsLayer");
                this.addChild(a)
            }
        } else
            Global.gameType = 2,
            Global.gameWeekLv = Math.ceil(4 * Math.random()),
            transitions(GameFightScene, fightResFun(!0), LoadScene, function() {
                multiplePNGToSpriteFrame(fightRes.fightelementimglist1_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist2_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist5_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist6_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist7_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist8_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist9_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist10_plist);
                multiplePNGToSpriteFrame("res/csi/stoneplist.plist")
            }),
            gameUserData.free_count--,
            a = {},
            a.pay_count = gameUserData.pay_count,
            a.free_count = gameUserData.free_count,
            HttpFun.updateFreeOrPayCount(a)
    },
    closeFun: function() {
        this.removeFromParent()
    }
})
  , WeekGameRankNode = cc.Sprite.extend({
    index: null,
    mainUI: null,
    ctor: function(a) {
        this._super();
        this.index = a;
        this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.setCascadeOpacityEnabled(!0);
        this.setContentSize(cc.size(686, 121));
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_rank_node_json);
        this.mainUI.x = 343;
        this.mainUI.y = 121;
        this.addChild(this.mainUI);
        this.updateShow()
    },
    updateShow: function() {
        function a(a) {
            a = new cc.Sprite(a);
            a.setScale(70 / a.getContentSize().width);
            a.x = c.mainUI.headbg.x;
            a.y = c.mainUI.headbg.y;
            c.mainUI.headbg.setLocalZOrder(10);
            c.mainUI.addChild(a, 0)
        }
        4 > this.index ? this.mainUI.rankicon.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("weekgame/rank" + this.index + ".png")) : this.mainUI.aw_fnttype40_ranknum.setString(this.index.toString());
        var b = Global.weekRank[this.index - 1]
          , c = this;
        a(res.iconren);
        var d = new Image;
        d.crossOrigin = "anonymous";
        d.src = b.imageurl;
        d.onload = function() {
            a(d)
        }
        ;
        var e = b.name;
        null == e && (e = "");
        11 < e.length && (e = e.substr(0, 10) + "...");
        this.mainUI.nametxt.setString(e);
        this.mainUI.nametxt.setFontName("Arial Bold");
        b.playerid == gameSDK.sdkPlayInfo.id ? (this.mainUI.headbg.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("weekgame/icon1.png")),
        this.mainUI.ownbg.setVisible(!0),
        this.mainUI.otherbg.setVisible(!1),
        this.mainUI.nametxt.setColor(cc.color(154, 75, 22))) : (this.mainUI.headbg.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("weekgame/icon2.png")),
        this.mainUI.ownbg.setVisible(!1),
        this.mainUI.otherbg.setVisible(!0));
        this.mainUI.otherbg.aw_fnttype2_score.setString("" + b.hurt);
        this.mainUI.ownbg.aw_fnttype2_score.setString("" + b.hurt)
    }
});
var WeekGameRankRewardLayer = cc.Layer.extend({
    mainUI: null,
    curRanking: null,
    ctor: function() {
        this._super();
        this.mainUI = null;
        this.curRanking = 0
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.curRanking = getWeekGameLastRanking();
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_ranking_reward_json);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.getbtn, this.clickGetBtnFun.bind(this), buttonScalingType);
        this.mainUI.rewardnum.setSpriteFrame("weekgame/weekgamerewarddes" + this.curRanking + ".png");
        for (var a = Global.weekReward[this.curRanking - 1], b = [], c = 0; c < a.length; c++) {
            var d = this.addRewardItem(a[c]);
            b.push(d)
        }
        a = {};
        a.spArr = b;
        a.spWidth = 150;
        a.p = cc.p(360, 665);
        a.settingType = centerSetting;
        gameSpSettingFun(a)
    },
    addRewardItem: function(a) {
        var b = new cc.Sprite("#weekgame/hurtrank" + this.curRanking + ".png");
        this.addChild(b);
        var c = "#element/" + DataMgr.getElementDataByID(a.id).uiIcon + ".png"
          , c = new cc.Sprite(c);
        b.addChild(c);
        c.x = 65;
        c.y = 65;
        c = new GameArtWord("fnttype1");
        c.alignmentType = artWordMiddle;
        c.x = 65;
        c.y = 22;
        b.addChild(c);
        c.setString(a.num + "");
        return b
    },
    clickGetBtnFun: function() {
        for (var a = Global.weekReward[this.curRanking - 1], b = 0; b < a.length; b++)
            2006 === a[b].id ? (gameUserData.gold += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === a[b].id ? (gameUserData.power += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : 2009 === a[b].id ? (gameUserData.freeLotteyNum += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POT)) : DataMgr.addItemByID(a[b].id, a[b].num);
        EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
        this.playGetAction(a);
        gameUserData.week_gift_reveived = 0;
        gameUserData.week_gift = 0;
        var a = new Date
          , b = a.getDay()
          , c = 0
          , c = 1 <= b ? a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400 + 86400 * (7 - b) : a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400;
        gameUserData.week_refresh = c;
        gameSDK.saveUserData(getSaveFBData(), null);
        this.closeFun()
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    },
    closeFun: function() {
        this.removeFromParent()
    }
});
var WeekGameResultLayer = cc.Layer.extend({
    mainUI: null,
    monsterAni: null,
    ctor: function() {
        this._super();
        this.monsterAni = this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = new cc.Layer
          , c = new cc.Sprite("res/game/playbg/resultbg.jpg");
        c.setAnchorPoint(0.5, 0);
        c.x = a - uiOfferX;
        c.y = 0;
        c.setScale(2);
        b.addChild(c);
        b.bake();
        this.addChild(b);
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_result_json);
        this.addChild(this.mainUI);
        this.mainUI.scorebg.fistbg1.y -= 40;
        b = PieceMgr.bossMaxHp - PieceMgr.bossCurHp;
        this.mainUI.scorebg.aw_fnttype41_credits.setString("" + b);
        this.mainUI.scorebg.scoretxt.setString(Global.scoreEn + ":" + Global.curLevelScore);
        gameUserData.myHurt += b;
        updateWeekGameRank();
        b = {};
        b.hurt = gameUserData.myHurt;
        b.last_hurt = 0;
        gameSDK.setScoreAsync(FB_HURT_RANK_KEY, gameUserData.myHurt, b, function(a) {});
        gameSDK.saveUserData(getSaveFBData(), null);
        var d = createGameAnimation(weekGameRes.res_weekgamewin_json, "weekganmewinmc", 30);
        d.playCount = 1;
        d.x = 0;
        d.y = 1280;
        d.frameFun = function(a) {
            34 == a && (d.frameFun = null,
            d.playCount = -1,
            d.fromFrameIndexToPlayFrameIndex(34, 114))
        }
        ;
        this.addChild(d);
        this.monsterAni = createGameAnimation(weekGameRes.res_weekgameboss_json, "weekgameboss_fail", 30);
        this.monsterAni.playCount = -1;
        this.monsterAni.x = a - uiOfferX;
        this.monsterAni.y = 650;
        this.monsterAni.setScale(0.9);
        this.addChild(this.monsterAni);
        this.showInAction()
    },
    showInAction: function() {
        var a = this;
        this.mainUI.scorebg.aw_fnttype41_credits.setVisible(!1);
        this.mainUI.scorebg.setCascadeOpacityEnabled(!0);
        this.mainUI.scorebg.setOpacity(0);
        this.mainUI.scorebg.setScale(0.5);
        this.mainUI.scorebg.y -= 428;
        var b = cc.spawn(cc.fadeIn(0.2), cc.moveBy(0.2, 0, 438), cc.scaleTo(0.2, 1.08, 0.88))
          , c = cc.spawn(cc.moveBy(4 / 30, 0, -18.7), cc.scaleTo(4 / 30, 0.99, 1.12))
          , d = cc.spawn(cc.moveBy(4 / 30, 0, 8.7), cc.scaleTo(4 / 30, 1.04, 1))
          , e = cc.spawn(cc.moveBy(4 / 30, 0, 0), cc.scaleTo(4 / 30, 1, 1));
        this.mainUI.scorebg.runAction(cc.sequence(b, cc.callFunc(function() {
            a.mainUI.scorebg.aw_fnttype41_credits.setVisible(!0)
        }), c, d, e));
        this.monsterAni.setScale(0.4);
        this.monsterAni.setVisible(!1);
        this.monsterAni.setAnchorPoint(0.5, 0);
        b = cc.delayTime(4 / 30);
        c = cc.scaleTo(4 / 30, 1, 1.2);
        d = cc.scaleTo(0.2, 0.9, 0.9);
        this.monsterAni.runAction(cc.sequence(b, cc.callFunc(function() {
            a.monsterAni.setVisible(!0)
        }), c, d));
        var b = cc.delayTime(0.2)
          , d = cc.spawn(cc.fadeIn(0.2), cc.moveBy(0.2, 0, 172), cc.scaleTo(0.2, 1.05, 1.05))
          , e = cc.spawn(cc.moveBy(4 / 30, 0, -8.3), cc.scaleTo(4 / 30, 0.95, 0.95))
          , f = cc.spawn(cc.moveBy(4 / 30, 0, 4.3), cc.scaleTo(4 / 30, 1, 1))
          , c = function() {
            engine.gameEvent.createMouseUp(a.mainUI.confirmbtn, a.closeFun.bind(a), buttonScalingType)
        };
        this.mainUI.confirmbtn.setCascadeOpacityEnabled(!0);
        this.mainUI.confirmbtn.setOpacity(0);
        this.mainUI.confirmbtn.setScale(0.35);
        this.mainUI.confirmbtn.y -= 156;
        this.mainUI.confirmbtn.runAction(cc.sequence(b, d, e, f, cc.callFunc(c)))
    },
    closeFun: function() {
        Global.isOpenWeekLayer = !0;
        this.removeFromParent();
        engine.gameSound.playEffect(soundRes.sound_normal_touch);
        transitions(ChooseScene, [], LoadScene)
    }
});
var WeekGameTicketsLayer = cc.Layer.extend({
    mainUI: null,
    ctor: function() {
        this._super();
        this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(weekGameRes.res_week_tickets_json);
        this.addChild(this.mainUI);
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.closeFun.bind(this), buttonScalingType);
        for (var a = 1; 4 > a; a++)
            this.mainUI["ticket_" + a].addticketbtn.index = a,
            this.mainUI["ticket_" + a].addticketbtn.layer = this,
            1 != a && (this.mainUI["ticket_" + a].addticketbtn_share.index = a,
            this.mainUI["ticket_" + a].addticketbtn_share.layer = this),
            1 == a ? (this.mainUI["ticket_" + a].addticketbtn.setVisible(!0),
            engine.gameEvent.createMouseUp(this.mainUI["ticket_" + a].addticketbtn, this.clickAddTicketBtnFun, buttonScalingType)) : 2 == a ? gameUserData.week_share_num >= Global.shareAddWeekTicMax ? (this.mainUI["ticket_gray" + a].setVisible(!0),
            this.mainUI["ticket_" + a].setVisible(!1)) : (this.mainUI["ticket_gray" + a].setVisible(!1),
            this.mainUI["ticket_" + a].setVisible(!0),
            !0 == checkShareOrWatchByCount() ? (this.mainUI["ticket_" + a].addticketbtn.setVisible(!0),
            this.mainUI["ticket_" + a].addticketbtn_share.setVisible(!1),
            engine.gameEvent.createMouseUp(this.mainUI["ticket_" + a].addticketbtn, this.clickAddTicketBtnFun, buttonScalingType)) : (this.mainUI["ticket_" + a].addticketbtn.setVisible(!1),
            this.mainUI["ticket_" + a].addticketbtn_share.setVisible(!0),
            engine.gameEvent.createMouseUp(this.mainUI["ticket_" + a].addticketbtn_share, this.clickAddTicketBtnFun, buttonScalingType))) : gameUserData.week_invite_num >= Global.inviteAddWeekTicMax ? (this.mainUI["ticket_gray" + a].setVisible(!0),
            this.mainUI["ticket_" + a].setVisible(!1)) : (this.mainUI["ticket_gray" + a].setVisible(!1),
            this.mainUI["ticket_" + a].setVisible(!0),
            !0 == checkShareOrWatchByCount() ? (this.mainUI["ticket_" + a].addticketbtn.setVisible(!0),
            this.mainUI["ticket_" + a].addticketbtn_share.setVisible(!1),
            engine.gameEvent.createMouseUp(this.mainUI["ticket_" + a].addticketbtn, this.clickAddTicketBtnFun, buttonScalingType)) : (this.mainUI["ticket_" + a].addticketbtn.setVisible(!1),
            this.mainUI["ticket_" + a].addticketbtn_share.setVisible(!0),
            engine.gameEvent.createMouseUp(this.mainUI["ticket_" + a].addticketbtn_share, this.clickAddTicketBtnFun, buttonScalingType)));
        var a = this.mainUI.ticket_1.addticketbtn.aw_fnttype4_gemnum
          , b = this.mainUI.ticket_1.addticketbtn.gemicon;
        a.setString("" + (Global.weekInitPrice + gameUserData.pay_count * Global.addPriceEvery));
        var c = a.stringSize.width + b.getContentSize().width;
        a.x = this.mainUI.ticket_1.addticketbtn.getContentSize().width / 2 - c / 2 + 2;
        b.x = a.x + a.stringSize.width + b.getContentSize().width / 2
    },
    clickAddTicketBtnFun: function() {
        var a = this;
        switch (this.index) {
        case 1:
            var b = Global.weekInitPrice + gameUserData.pay_count * Global.addPriceEvery;
            b > gameUserData.gold ? !1 == gameSDK.isCanPay() ? this.layer.not_enough ? this.layer.not_enough.inAction() : (this.layer.not_enough = new GoldDialogNode(cc.p(360, 110)),
            this.layer.addChild(this.layer.not_enough, 1001)) : (a = this,
            createGameMaskLayer("loadUIMask"),
            loadUIFun(getPayShopRes(), function() {
                multiplePNGToSpriteFrame(payShopUIRes.res_pay_shop_plist);
                var b = new FacebookPaymentShopLayer;
                createMaskLayer(b);
                a.layer.addChild(b, 10);
                removeGameMaskLayer("loadUIMask")
            })) : (Global.gameType = 2,
            Global.gameWeekLv = Math.ceil(4 * Math.random()),
            transitions(GameFightScene, fightResFun(!0), LoadScene, function() {
                multiplePNGToSpriteFrame(fightRes.fightelementimglist1_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist2_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightelementimglist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist3_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist4_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist5_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist6_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist7_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist8_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist9_plist);
                multiplePNGToSpriteFrame(fightRes.fightanimatelist10_plist);
                multiplePNGToSpriteFrame("res/csi/stoneplist.plist")
            }),
            gameUserData.gold -= b,
            gameUserData.pay_count++,
            gameSDK.saveUserData(getSaveFBData(), null));
            break;
        case 2:
            b = function() {
                add_watchAD_share_count_Fun();
                gameUserData.free_count++;
                EventMgr.emit(EVENTMGR_ID.WEEKGAME_TICKETS_PUSH);
                gameUserData.week_share_num++;
                gameSDK.saveUserData(getSaveFBData(), null);
                a.layer.closeFun()
            }
            ;
            if (!0 == checkShareOrWatchByCount())
                this.layer.showRewardAd(b);
            else {
                var c = {};
                c.pngData = [{
                    url: "res/invbg.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 380
                }, {
                    url: selfData.myurl,
                    posX: 213,
                    posY: 55,
                    imgWidth: 162,
                    imgHeight: 162
                }, {
                    url: "res/invicon.png",
                    posX: 171,
                    posY: 14,
                    imgWidth: 235,
                    imgHeight: 235
                }];
                c.fontData = [{
                    des: "" + gameUserData.stars,
                    posX: 290,
                    posY: 300,
                    font: "40px Microsoft YaHei",
                    lineWidth: 2,
                    fillStyle: "rgb(249,227,113)",
                    textAlign: "center",
                    strokeStyle: "#000000"
                }];
                c.width = 750;
                c.height = 380;
                gameSDK.sendFaceBookFriend(b, c)
            }
            break;
        case 3:
            b = function() {
                add_watchAD_share_count_Fun();
                gameUserData.free_count++;
                EventMgr.emit(EVENTMGR_ID.WEEKGAME_TICKETS_PUSH);
                gameUserData.week_invite_num++;
                gameSDK.saveUserData(getSaveFBData(), null);
                a.layer.closeFun()
            }
            ,
            !0 == checkShareOrWatchByCount() ? this.layer.showRewardAd(b) : (c = {},
            c.pngData = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 213,
                posY: 55,
                imgWidth: 162,
                imgHeight: 162
            }, {
                url: "res/invicon.png",
                posX: 171,
                posY: 14,
                imgWidth: 235,
                imgHeight: 235
            }],
            c.fontData = [{
                des: "" + gameUserData.stars,
                posX: 290,
                posY: 300,
                font: "40px Microsoft YaHei",
                lineWidth: 2,
                fillStyle: "rgb(249,227,113)",
                textAlign: "center",
                strokeStyle: "#000000"
            }],
            c.width = 750,
            c.height = 380,
            gameSDK.sendFaceBookFriend(b, c))
        }
    },
    closeFun: function() {
        this.removeFromParent()
    },
    showRewardAd: function(a) {
        if (isNotFbGame)
            a(),
            Global.isWatchAD = !0;
        else if (!isAdLoading) {
            EventMgr.emit(EVENTMGR_ID.SHOW_LOADING);
            isAdLoading = !0;
            var b = null;
            FBInstant.getRewardedVideoAsync(rewardedVideoID5).then(function(a) {
                b = a;
                return b.loadAsync()
            }).then(function() {
                return b.showAsync()
            }).then(function() {
                isAdLoading = !1;
                gameSDK.saveUserData(getSaveFBData(), null);
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 1);
                Global.isWatchAD = !0;
                a()
            }).catch(function(a) {
                isAdLoading = !1;
                EventMgr.emit(EVENTMGR_ID.CLOSE_LOADING, 0);
                var b = Global.noAdds;
                "CLIENT_UNSUPPORTED_OPERATION" == a.code && (b = Global.noAdds1);
                EventMgr.emit(EVENTMGR_ID.ADS_TIPS, b)
            })
        }
    }
});
var GameWeekGameBossLayer = cc.Layer.extend({
    bossAnimation: null,
    mosterPos: null,
    mosterPos1: null,
    bossPos: null,
    monsterAnimation: null,
    isBossAngry: null,
    curBossAnimationID: null,
    isEnd: null,
    ctor: function() {
        this._super();
        this.bossPos = cc.p(360, 1050);
        this.mosterPos = cc.p(100, 1025);
        this.mosterPos1 = cc.p(300, 1025);
        this.bossCurHp = 0;
        this.isBossAngry = !1;
        this.curBossAnimationID = null;
        this.isEnd = !1
    },
    onEnter: function() {
        this._super();
        var a = this
          , b = [EVENTMGR_ID.WEEKMONSTER_DANCE, EVENTMGR_ID.WEEKMONSTER_ESCAPE, EVENTMGR_ID.WEEKMONSTER_ENTER];
        [EVENTMGR_ID.WEEKBOSS_READY, EVENTMGR_ID.WEEKBOSS_FAIL, EVENTMGR_ID.WEEKBOSS_MENUFAIL, EVENTMGR_ID.WEEKBOSS_ENTER, EVENTMGR_ID.WEEKBOSS_HIT, EVENTMGR_ID.WEEKBOSS_ATTACK, EVENTMGR_ID.WEEKBOSS_ANGRY, EVENTMGR_ID.WEEKBOSS_WAIT].forEach(function(b) {
            EventMgr.register(b, function() {
                a.play_bossMonster(b)
            }, null)
        });
        b.forEach(function(b) {
            EventMgr.register(b, function() {
                a.play_monster(b)
            }, null)
        });
        this.monsterAnimation = createGameAnimation(weekGameRes.res_weekgamemonster5_json, "weekgamemonster_dance", 30);
        this.monsterAnimation.setPosition(this.mosterPos);
        this.monsterAnimation.playCount = -1;
        this.addChild(this.monsterAnimation, 31);
        this.monsterAnimation.frameFun = function(b) {
            40 == b && (a.bossAnimation = createGameAnimation(weekGameRes.res_weekgameboss_json, "weekgameboss_enter", 30),
            a.bossAnimation.setPosition(a.bossPos),
            a.bossAnimation.playCount = 1,
            a.addChild(a.bossAnimation, 30),
            a.bossAnimation.setScale(0.7),
            a.bossAnimation.frameFun = function(a) {
                10 == a && (EventMgr.emit(EVENTMGR_ID.WEEKMONSTER_ESCAPE),
                currentScene.gameLogicLayer.x = 0,
                currentScene.gameLogicLayer.y = 11);
                11 == a && (currentScene.gameLogicLayer.x = 0,
                currentScene.gameLogicLayer.y = -13);
                12 == a && (currentScene.gameLogicLayer.x = 11,
                currentScene.gameLogicLayer.y = 3);
                13 == a && (currentScene.gameLogicLayer.x = 0,
                currentScene.gameLogicLayer.y = 0)
            }
            ,
            a.bossAnimation.frameCompleteFun = function() {
                Global.isGameStart = !0;
                EventMgr.emit(EVENTMGR_ID.WEEKBOSS_WAIT)
            }
            )
        }
    },
    onExit: function() {
        this._super();
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_READY, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_FAIL, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_MENUFAIL, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_ENTER, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_HIT, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_ATTACK, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_ANGRY, null);
        EventMgr.remove(EVENTMGR_ID.WEEKBOSS_WAIT, null);
        EventMgr.remove(EVENTMGR_ID.WEEKMONSTER_DANCE, null);
        EventMgr.remove(EVENTMGR_ID.WEEKMONSTER_ESCAPE, null);
        EventMgr.remove(EVENTMGR_ID.WEEKMONSTER_ENTER, null)
    },
    play_monster: function(a) {
        var b = this;
        this.monsterAnimation.removeFromParent();
        this.monsterAnimation = null;
        this.monsterAnimation = createGameAnimation([weekGameRes.res_weekgamemonster5_json, weekGameRes.res_weekgamemonster7_json, weekGameRes.res_weekgamemonster6_json][a - 74], ["weekgamemonster_dance", "weekgamemonster_escape", "weekgamemonster_enter"][a - 74], 30);
        this.monsterAnimation.setPosition(this.mosterPos);
        this.monsterAnimation.playCount = -1;
        a == EVENTMGR_ID.WEEKMONSTER_DANCE && (!1 == b.isEnd ? this.monsterAnimation.playCount = -1 : (this.monsterAnimation.playCount = 1,
        this.monsterAnimation.setPosition(250, 1025)),
        this.monsterAnimation.frameCompleteFun = function() {
            !0 == b.isEnd && EventMgr.emit(EVENTMGR_ID.WEEKBOSS_OPEN_FAIL_VIEW)
        }
        );
        a == EVENTMGR_ID.WEEKMONSTER_ESCAPE && (this.monsterAnimation.playCount = 1,
        this.monsterAnimation.frameFun = function(a) {
            40 == a && cc.log("-----------------------游戏开始")
        }
        ,
        this.monsterAnimation.frameCompleteFun = function() {}
        );
        a == EVENTMGR_ID.WEEKMONSTER_ENTER && (this.monsterAnimation.playCount = 1,
        this.monsterAnimation.setPosition(250, 1025),
        this.monsterAnimation.frameCompleteFun = function() {
            b.isEnd = !0;
            EventMgr.emit(EVENTMGR_ID.WEEKMONSTER_DANCE)
        }
        );
        this.addChild(this.monsterAnimation, 31)
    },
    play_bossMonster: function(a) {
        if ((this.curBossAnimationID != EVENTMGR_ID.WEEKBOSS_ATTACK || a == EVENTMGR_ID.WEEKBOSS_MENUFAIL) && this.curBossAnimationID != EVENTMGR_ID.WEEKBOSS_MENUFAIL) {
            this.curBossAnimationID = a;
            this.bossAnimation.removeFromParent();
            this.bossAnimation = null;
            this.bossAnimation = createGameAnimation(weekGameRes.res_weekgameboss_json, "weekgameboss_ready weekgameboss_fail weekgameboss_fail weekgameboss_enter weekgameboss_hit weekgameboss_attack weekgameboss_angry weekgameboss_wait".split(" ")[a - 66], 30);
            this.bossAnimation.setPosition(this.mosterPos);
            this.bossAnimation.playCount = -1;
            this.bossAnimation.setScale(0.7);
            var b = this;
            a == EVENTMGR_ID.WEEKBOSS_READY && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameCompleteFun = function() {
                b.bossAnimation.gotoAndPlay(50)
            }
            );
            a == EVENTMGR_ID.WEEKBOSS_FAIL && (this.bossAnimation.playCount = -1,
            this.bossAnimation.frameCompleteFun = function() {}
            );
            a == EVENTMGR_ID.WEEKBOSS_MENUFAIL && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameCompleteFun = function() {
                EventMgr.emit(EVENTMGR_ID.WEEKMONSTER_ENTER);
                b.curBossAnimationID = EVENTMGR_ID.WEEKBOSS_FAIL;
                EventMgr.emit(EVENTMGR_ID.WEEKBOSS_FAIL)
            }
            );
            a == EVENTMGR_ID.WEEKBOSS_ENTER && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameCompleteFun = function() {}
            );
            a == EVENTMGR_ID.WEEKBOSS_HIT && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameCompleteFun = function() {
                EventMgr.emit(EVENTMGR_ID.WEEKBOSS_WAIT)
            }
            );
            a == EVENTMGR_ID.WEEKBOSS_ATTACK && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameFun = function(a) {
                if (27 == a) {
                    a = PieceMgr.getBossHasTagElements();
                    for (var b = 0; b < a.length; b++)
                        a[b].playBossChangeEffect();
                    this.scheduleOnce(function() {
                        EventMgr.emit(EVENTMGR_ID.WEEKBOSS_CHANGE_ELEMENT)
                    }, 0.7)
                }
            }
            ,
            this.bossAnimation.frameCompleteFun = function() {
                b.curBossAnimationID = EVENTMGR_ID.WEEKBOSS_WAIT;
                EventMgr.emit(EVENTMGR_ID.WEEKBOSS_WAIT);
                EventMgr.emit(EVENTMGR_ID.WEEKBOSS_REMOVE_MASK);
                Global.isBossAttackStopOntouch = !1;
                Global.costWeekStep = 0
            }
            );
            a == EVENTMGR_ID.WEEKBOSS_ANGRY && (this.bossAnimation.playCount = 1,
            this.bossAnimation.frameCompleteFun = function() {}
            );
            a == EVENTMGR_ID.WEEKBOSS_WAIT && (this.bossAnimation.playCount = -1);
            this.bossAnimation.setPosition(this.bossPos);
            this.addChild(this.bossAnimation, 30)
        }
    }
});
var HonorLotteryLayer = cc.Layer.extend({
    mainUI: null,
    data: null,
    rotateTime: null,
    during: null,
    rewardID: null,
    rewardIDArray: null,
    isRun: null,
    starLotteryAni: null,
    lightingAni: null,
    turnNum: null,
    rewardPool: null,
    drawSp: null,
    pointer: null,
    shadowArray: null,
    stopAngle: null,
    pointerTime: null,
    fadeInEnd: !1,
    ctor: function() {
        this._super();
        this.mainUI = null;
        this.data = Global.honorLotteyRewards;
        this.rotateTime = 2;
        this.rewardID = this.uniform = this.decelerateTime = this.uniformTime = this.acceleratedTime = this.during = 0;
        this.rewardIDArray = [];
        this.isRun = !1;
        this.lightingAni = this.starLotteryAni = null;
        this.turnNum = 0;
        this.rewardPool = [];
        this.pointer = this.drawSp = null;
        this.shadowArray = [];
        this.stopAngle = 0;
        this.pointerTime = null;
        this.fadeInEnd = !1
    },
    onEnter: function() {
        this._super();
        this.initUI();
        this.initListener()
    },
    onExit: function() {
        this._super();
        this.unscheduleUpdate()
    },
    initUI: function() {
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = new cc.Layer
          , c = new cc.DrawNode;
        c.drawRect(cc.p(-offetGameWidth, 0), cc.p(2 * a, viewGameHeigh), cc.color(0, 0, 0, 0), 0, cc.color(0, 0, 0, 0));
        b.addChild(c);
        this.addChild(b, -1);
        engine.gameEvent.createMouseDown(b, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
        this.drawSp = new ccui.ImageView("public/scalesprite18.png",ccui.Widget.PLIST_TEXTURE);
        this.drawSp.setContentSize(cc.size(2 * a, viewGameHeigh));
        this.drawSp.setScale9Enabled(!0);
        this.drawSp.x = 360;
        this.drawSp.y = viewGameHeigh / 2;
        this.addChild(this.drawSp, -1);
        this.mainUI = ParseUIJson.parseJsonToUI(honorUIRes.res_honor_lottery_layer_json);
        this.addChild(this.mainUI);
        this.initLotteryIcon();
        this.updateLotteryNum();
        this.rewardPool = [];
        for (a = 0; a < Global.honorLotteyRewards.length; a++)
            b = {},
            b.index = a,
            b.probability = Global.honorLotteyRewards[a].probability,
            this.rewardPool.push(b);
        this.uiOpenAction()
    },
    uiOpenAction: function() {
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = this;
        this.drawSp.setOpacity(0);
        this.drawSp.setCascadeOpacityEnabled(!0);
        this.drawSp.runAction(cc.fadeIn(0.25));
        this.mainUI.circle.setOpacity(0);
        this.mainUI.small_circle.setOpacity(0);
        this.mainUI.circle.setCascadeOpacityEnabled(!0);
        for (var c = 1; 8 >= c; c++)
            this.mainUI.circle["aw_fnttype2_text" + c].setVisible(!1);
        c = function() {
            for (var a = 1; 8 >= a; a++)
                b.mainUI.circle["aw_fnttype2_text" + a].setVisible(!0)
        }
        ;
        this.mainUI.circle.setScale(0.36);
        this.mainUI.small_circle.setScale(0.36);
        this.mainUI.circle.runAction(cc.sequence(cc.delayTime(0.25), cc.spawn(cc.scaleTo(4 / 24, 1.1, 1.1), cc.fadeIn(4 / 24)), cc.scaleTo(5 / 24, 0.95, 0.95), cc.scaleTo(5 / 24, 1, 1), cc.callFunc(function() {
            b.addPointerAction();
            b.lightingAnimation();
            b.fadeInEnd = !0
        })));
        this.mainUI.small_circle.runAction(cc.sequence(cc.delayTime(0.25), cc.spawn(cc.scaleTo(4 / 24, 1.1, 1.1), cc.callFunc(c), cc.fadeIn(4 / 24)), cc.scaleTo(5 / 24, 0.95, 0.95), cc.scaleTo(5 / 24, 1, 1)));
        this.mainUI.titlebg.setOpacity(0);
        this.mainUI.titlebg.setScale(0.19, 0.64);
        this.mainUI.titlesp.setOpacity(0);
        this.mainUI.titlesp.setScale(0.19, 0.64);
        this.mainUI.titlebg.runAction(cc.sequence(cc.delayTime(0.25), cc.spawn(cc.scaleTo(4 / 24, 1.15, 1.1), cc.fadeIn(4 / 24)), cc.scaleTo(5 / 24, 0.95, 0.95), cc.scaleTo(5 / 24, 1, 1)));
        this.mainUI.titlesp.runAction(cc.sequence(cc.delayTime(0.25), cc.spawn(cc.scaleTo(4 / 24, 1.15, 1.1), cc.fadeIn(4 / 24)), cc.scaleTo(5 / 24, 0.95, 0.95), cc.scaleTo(5 / 24, 1, 1)));
        this.mainUI.lotterybtn.setOpacity(0);
        this.mainUI.lotterybtn.setCascadeOpacityEnabled(!0);
        this.mainUI.lotterybtn.y -= 36;
        this.mainUI.lotterybtn.runAction(cc.sequence(cc.delayTime(0.25), cc.spawn(cc.moveBy(4 / 24, 0, 50), cc.fadeIn(4 / 24)), cc.moveBy(5 / 24, 0, -19), cc.moveBy(5 / 24, 0, 5)));
        c = function() {
            var c = new cc.Layer
              , e = new cc.DrawNode;
            e.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, 110), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
            c.addChild(e);
            b.addChild(c);
            c = new cc.LabelTTF(Global.honorLotteryDes,"jellyboom_font",40);
            b.addChild(c);
            c.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            c.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
            c.x = a - uiOfferX;
            c.y = 55
        }
        ;
        this.runAction(cc.sequence(cc.delayTime(0.25), cc.callFunc(c)))
    },
    addPointerAction: function() {
        this.pointer = createGameAnimation(honorUIRes.res_honorlottery_json, "hoblick", 24);
        this.pointer.setAnchorPoint(cc.p(0.5, 0));
        this.pointer.setPosition(cc.p(357, 683));
        this.mainUI.pointernode.addChild(this.pointer)
    },
    lightingAnimation: function() {
        this.lightingAni = createGameAnimation(honorUIRes.res_honorlottery_json, "holight", 24);
        this.lightingAni.setPosition(cc.p(315, 900));
        this.mainUI.addChild(this.lightingAni)
    },
    initListener: function() {
        engine.gameEvent.createMouseUp(this.mainUI.lotterybtn, this.onLottery.bind(this), buttonScalingType)
    },
    updateLotteryNum: function() {},
    initLotteryIcon: function() {
        for (var a = 0; a < this.data.length; ++a) {
            var b = this.mainUI.circle["item" + (a + 1)]
              , c = this.mainUI.circle["aw_fnttype2_text" + (a + 1)];
            c.setScale(0.9);
            var d = DataMgr.getElementIconNameByID(this.data[a].id);
            c.setString("x" + this.data[a].num);
            Utils.changeTexture(b, d)
        }
    },
    lottery: function() {
        this.rewardID = this.getRewardID();
        this.rewardIDArray.push(this.rewardID);
        cc.log("reward ID = " + this.rewardID);
        this.getStopAngle();
        this.rotateCircleAction()
    },
    getStopAngle: function() {
        this.stopAngle = 1440 + 45 * this.rewardID
    },
    rotateCircleAction: function() {
        for (var a = 0; 3 > a; a++) {
            var b = createGameAnimation(honorUIRes.res_honorlottery_json, "hoblick", 24);
            b.setAnchorPoint(cc.p(0.5, 0));
            b.setPosition(cc.p(357, 683));
            this.mainUI.pointernode.addChild(b);
            b.setOpacity(255 - 70 * (a + 1));
            this.shadowArray.push(b)
        }
        this.during = 0;
        this.isRun = !0;
        this.pointerTime = 0;
        this.scheduleUpdate();
        null != this.starLotteryAni && (this.starLotteryAni.removeFromParent(),
        this.starLotteryAni = null);
        this.starLotteryAni = createGameAnimation(res.res_lotterylight_json, "lotterylight_bg", 24);
        this.starLotteryAni.playCount = -1;
        this.starLotteryAni.setPosition(cc.p(330, 860));
        this.mainUI.lightlayer.addChild(this.starLotteryAni, -1)
    },
    update: function(a) {
        this.during += a;
        if (this.during >= this.pointerTime + this.rotateTime / (this.stopAngle / 45))
            for (this.pointerTime = this.during,
            this.pointer.getRotation() < this.stopAngle && this.pointer.setRotation(this.pointer.getRotation() + 45),
            a = 0; a < this.shadowArray.length; a++)
                this.during >= this.rotateTime / (this.stopAngle / 45) * (a + 2) && this.shadowArray[a].getRotation() < this.stopAngle && this.shadowArray[a].setRotation(this.shadowArray[a].getRotation() + 45),
                a == this.shadowArray.length - 1 && this.shadowArray[a].getRotation() == this.stopAngle && this.rotateEnd()
    },
    rotateEnd: function() {
        this.unscheduleUpdate();
        this.stopAngle = 0;
        null != this.starLotteryAni && (this.starLotteryAni.removeFromParent(),
        this.starLotteryAni = null);
        for (var a = 0; a < this.shadowArray.length; a++)
            this.shadowArray[a].removeFromParent();
        this.shadowArray = [];
        this.pointer.gotoAndStop(0);
        var b = this;
        this.runAction(cc.sequence(cc.delayTime(0.5), cc.callFunc(function() {
            b.addPointerAction();
            b.turnNum >= Global.honorLetteryMax ? (b.isRun = !1,
            b.createReward()) : (b.lottery(),
            b.turnNum += 1,
            b.updateLotteryNum())
        })))
    },
    getRewardID: function() {
        for (var a = 0, b = 0; b < this.rewardPool.length; b++)
            a += this.rewardPool[b].probability;
        for (var a = Utils.getRandomNum(a), c = 0, d = 0, b = 0; b < this.rewardPool.length; ++b) {
            var e = this.rewardPool[b].probability;
            if (c < a && a <= c + e) {
                d = this.rewardPool[b].index;
                this.rewardPool.splice(b, 1);
                break
            }
            c += e
        }
        return d
    },
    onLottery: function() {
        this.isRun || !0 != this.fadeInEnd || (engine.gameSound.playEffect(soundRes.sound_normal_touch),
        this.lottery(),
        this.turnNum += 1,
        this.updateLotteryNum())
    },
    onClose: function() {
        engine.gameSound.playEffect(soundRes.sound_normal_close);
        this.isRun || this.removeFromParent()
    },
    createReward: function() {
        for (var a = [], b = 0; b < this.rewardIDArray.length; b++) {
            var c = Global.honorLotteyRewards[this.rewardIDArray[b]]
              , d = {};
            d.id = c.id;
            d.num = c.num;
            a.push(d)
        }
        for (b = 0; b < a.length; b++)
            2006 === a[b].id ? (gameUserData.gold += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === a[b].id ? (gameUserData.power += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : 2009 === a[b].id ? (gameUserData.freeLotteyNum += a[b].num,
            EventMgr.emit(EVENTMGR_ID.REFRESH_POT)) : DataMgr.addItemByID(a[b].id, a[b].num);
        EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
        gameUserData.honor = 0;
        gameSDK.saveUserData(getSaveFBData(), null);
        HttpFun.uploadSelfInfo();
        this.playGetAction(a);
        gameUserData.honor_reward_index < Global.honorRewardList.length - 1 && (gameUserData.honor_reward_index++,
        gameSDK.saveUserData(getSaveFBData(), null));
        currentScene.chooseLevelLayer.refreshHonorPush();
        null != this.parent && this.parent.refreshHonorReward();
        this.removeFromParent()
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    }
});
var HonorLayer = cc.Layer.extend({
    mainUI: null,
    rankData: null,
    curPage: null,
    moveLayer: null,
    isClick: null,
    touchY: null,
    clickDownPoint: null,
    rankNodeArray: null,
    serverTomorrow: null,
    honorRewardType: null,
    ctor: function() {
        this._super();
        this.rankData = this.mainUI = null;
        this.curPage = 1;
        this.clickDownPoint = this.touchY = this.isClick = this.moveLayer = null;
        this.rankNodeArray = [];
        this.honorRewardType = this.serverTomorrow = null
    },
    onEnter: function() {
        this._super();
        this.getRankData();
        this.initUI()
    },
    onExit: function() {
        this._super();
        this.unscheduleUpdate()
    },
    getRankData: function() {
        this.rankData = getHonorRankByType(this.curPage);
        cc.log("荣誉排行榜：", this.rankData)
    },
    initUI: function() {
        createMaskLayer(this);
        var a = 0
          , a = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , b = new cc.Sprite("res/game/playbg/resultbg.jpg");
        b.x = a - uiOfferX;
        b.y = viewGameHeigh / 2;
        b.setScale(2);
        this.addChild(b);
        a = new cc.Sprite("res/game/playbg/cloud.png");
        a.x = 230;
        a.y = 60;
        b.addChild(a);
        this.mainUI = ParseUIJson.parseJsonToUI(honorUIRes.res_honor_layer);
        this.addChild(this.mainUI);
        b = new cc.DrawNode;
        b.drawRect(cc.p(10, 405), cc.p(710, 945), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        b = createClippingNode(0.5, 0.5, 0, 0, 1, !1, b);
        this.mainUI.addChild(b);
        b.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(b, this.clickDownFun.bind(this), null, cc.rect(20, 405, 680, 540));
        engine.gameEvent.createMouseMove(b, this.clickMoveFun.bind(this), null, cc.rect(20, 405, 680, 540));
        engine.gameEvent.createMouseUp(b, this.clickUpFun.bind(this), null, cc.rect(20, 405, 680, 540));
        this.moveLayer = new cc.Layer;
        b.addChild(this.moveLayer);
        this.addRankNode();
        this.refreshPage();
        this.mainUI.freepackbg.remaintimetxt.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.freepackbg.remaintimetxt.enableStroke(cc.color(42, 106, 156), 2);
        this.refreshFreeBox();
        this.mainUI.invitefriendbtn.gethonortxt.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.invitefriendbtn.gethonortxt.enableStroke(cc.color(39, 131, 20), 2);
        this.mainUI.invitefriendbtn.gethonortxt.setString("x" + Global.getHonorByAdd);
        this.refreshInviteBtn();
        this.refreshHonorReward();
        engine.gameEvent.createMouseUp(this.mainUI.closebtn, this.onClose.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.globalbtn, this.onGlobal.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.friendbtn, this.onFriends.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.freepackbg.rewardbtn, this.onFreeReward.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.hopackbg.honorbtn, this.onHonor.bind(this), buttonScalingType);
        engine.gameEvent.createMouseUp(this.mainUI.invitefriendbtn, this.onInviteFriend.bind(this), buttonScalingType)
    },
    addRankNode: function() {
        this.rankNodeArray = [];
        for (var a = 0; a < this.rankData.length; a++) {
            var b = new HonorRankNode(a + 1,this.curPage,this.rankData[a]);
            b.honorLayer = this;
            this.moveLayer.addChild(b);
            b.x = 360;
            b.y = 820 - 128 * a;
            this.rankNodeArray.push(b)
        }
    },
    refreshPage: function() {
        1 == this.curPage ? (this.mainUI.globalbtn.setVisible(!1),
        this.mainUI.globalbtn2.setVisible(!0),
        this.mainUI.friendbtn.setVisible(!0),
        this.mainUI.friendbtn2.setVisible(!1),
        this.mainUI.dessprite.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("honor/honorrewardtxt.png"))) : (this.mainUI.globalbtn.setVisible(!0),
        this.mainUI.globalbtn2.setVisible(!1),
        this.mainUI.friendbtn.setVisible(!1),
        this.mainUI.friendbtn2.setVisible(!0),
        this.mainUI.dessprite.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame("honor/playwithfritxt.png")));
        this.refreshInviteBtn()
    },
    refreshFreeBox: function() {
        if (0 == gameUserData.honor_free_box)
            this.mainUI.freepackbg.remaintimetxt.setVisible(!1),
            this.mainUI.freepackbg.rewardbtn.setVisible(!0);
        else {
            this.mainUI.freepackbg.remaintimetxt.setVisible(!0);
            this.mainUI.freepackbg.rewardbtn.setVisible(!1);
            this.serverTomorrow = getServerTomorrow();
            var a = this.serverTomorrow - getCheckoutServerTime();
            0 >= a && (a = 0);
            this.mainUI.freepackbg.remaintimetxt.setString(getComputeTime(a));
            this.scheduleUpdate()
        }
    },
    refreshHonorReward: function() {
        var a = Global.honorRewardList[gameUserData.honor_reward_index].honorNum;
        this.honorRewardType = gameUserData.honor < a ? 0 : 1;
        this.mainUI.hopackbg.honorprotxt.setString(gameUserData.honor + "/" + a);
        this.mainUI.hopackbg.honorpro.setPercent(gameUserData.honor / a * 100);
        1 == this.honorRewardType ? (this.mainUI.hopackbg.honorbtn.setSpriteFrame("public/publicbtn21.png"),
        this.mainUI.hopackbg.honorbtn.honorbtnsp.setSpriteFrame("honor/collcetreward.png")) : (this.mainUI.hopackbg.honorbtn.setSpriteFrame("public/publicbtn22.png"),
        this.mainUI.hopackbg.honorbtn.honorbtnsp.setSpriteFrame("honor/addfriends.png"))
    },
    update: function() {
        var a = this.serverTomorrow - getCheckoutServerTime();
        this.mainUI.freepackbg.remaintimetxt.setString(getComputeTime(a));
        0 >= a && this.unscheduleUpdate()
    },
    refreshInviteBtn: function() {
        2 == this.curPage && 1 > friendList.length ? (this.mainUI.invitefriendbtn.setVisible(!0),
        0 == gameUserData.honor_invite_type ? (this.mainUI.invitefriendbtn.honorsp.setVisible(!0),
        this.mainUI.invitefriendbtn.gethonortxt.setVisible(!0),
        this.mainUI.invitefriendbtn.addfriend.y = 88) : (this.mainUI.invitefriendbtn.honorsp.setVisible(!1),
        this.mainUI.invitefriendbtn.gethonortxt.setVisible(!1),
        this.mainUI.invitefriendbtn.addfriend.y = 63)) : this.mainUI.invitefriendbtn.setVisible(!1)
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        var c = a.getLocation()
          , d = this.touchY - c.y
          , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
        5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
        d = this.moveLayer.y - d;
        this.touchY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        var b = this.rankData.length - 4;
        0 > b && (b = 0);
        a > 128 * b + 50 && (a = 128 * b + 50);
        this.moveLayer.y = a
    },
    clickUpFun: function() {},
    onGlobal: function() {
        1 != this.curPage && (this.curPage = 1,
        this.refreshPage(),
        this.getRankData(),
        this.moveLayer.removeAllChildren(),
        this.moveLayer.y = 0,
        this.addRankNode())
    },
    onFriends: function() {
        2 != this.curPage && (this.curPage = 2,
        this.refreshPage(),
        this.getRankData(),
        this.moveLayer.removeAllChildren(),
        this.moveLayer.y = 0,
        this.addRankNode())
    },
    onFreeReward: function() {
        if (1 != gameUserData.honor_free_box) {
            gameUserData.honor_free_box = 1;
            currentScene.chooseLevelLayer.refreshHonorPush();
            this.refreshFreeBox();
            HttpFun.refreshHonorBoxHttp();
            for (var a = getRandomInt(0, Global.HonorFreeBoxReward.length - 1), a = Global.HonorFreeBoxReward[a], b = 0; b < a.length; b++)
                2006 === a[b].id ? (gameUserData.gold += a[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD)) : 2007 === a[b].id ? (gameUserData.power += a[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO)) : 2009 === a[b].id ? (gameUserData.freeLotteyNum += a[b].num,
                EventMgr.emit(EVENTMGR_ID.REFRESH_POT)) : 2011 === a[b].id ? (addHonorFun(a[b].num),
                this.refreshHonorReward()) : DataMgr.addItemByID(a[b].id, a[b].num);
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
            gameSDK.saveUserData(getSaveFBData(), null);
            HttpFun.uploadSelfInfo();
            this.playGetAction(a)
        }
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    },
    onHonor: function() {
        if (1 == this.honorRewardType) {
            if (null == this.getChildByName("HonorLottery")) {
                var a = new HonorLotteryLayer;
                this.addChild(a);
                a.setName("HonorLottery")
            }
        } else
            a = {},
            a.pngData = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 213,
                posY: 55,
                imgWidth: 162,
                imgHeight: 162
            }, {
                url: "res/invicon.png",
                posX: 171,
                posY: 14,
                imgWidth: 235,
                imgHeight: 235
            }],
            a.fontData = [{
                des: "" + gameUserData.stars,
                posX: 290,
                posY: 300,
                font: "40px Microsoft YaHei",
                lineWidth: 2,
                fillStyle: "rgb(249,227,113)",
                textAlign: "center",
                strokeStyle: "#000000"
            }],
            a.width = 750,
            a.height = 380,
            gameSDK.sendFaceBookFriend(function() {}, a)
    },
    addHonorAction: function(a, b) {
        var c = 0
          , c = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2
          , d = new cc.Layer;
        createMaskLayer(d);
        currentScene.addChild(d, 10001);
        var e = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
        e.playCount = 1;
        e.playFrameIndex = 27;
        e.setPosition(cc.p(c, viewGameHeigh / 2 + 50));
        e.getBitmapByUrlName("sbg6.png").setSpriteFrame("element/honor.png");
        d.addChild(e);
        c = new GameArtWord("fnttype1");
        c.alignmentType = artWordMiddle;
        c.setString("x" + a);
        c.x = 0;
        c.y = -80;
        c.setScale(1.2);
        e.addChild(c, 3);
        e.layer = d;
        var d = (gameUserData.honor - b) / Global.honorRewardList[gameUserData.honor_reward_index].honorNum
          , f = 401 + this.mainUI.hopackbg.honorprobg.getContentSize().width * d
          , g = this;
        e.frameCompleteFun = function() {
            e.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.5, 0.1), cc.moveTo(0.5, f, 158)), cc.callFunc(function() {
                e.layer.removeFromParent();
                g.refreshHonorReward()
            })))
        }
    },
    onInviteFriend: function() {
        if (!(2 != this.curPage || 0 < friendList.length)) {
            var a = {};
            a.pngData = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 213,
                posY: 55,
                imgWidth: 162,
                imgHeight: 162
            }, {
                url: "res/invicon.png",
                posX: 171,
                posY: 14,
                imgWidth: 235,
                imgHeight: 235
            }];
            a.fontData = [{
                des: "" + gameUserData.stars,
                posX: 290,
                posY: 300,
                font: "40px Microsoft YaHei",
                lineWidth: 2,
                fillStyle: "rgb(249,227,113)",
                textAlign: "center",
                strokeStyle: "#000000"
            }];
            a.width = 750;
            a.height = 380;
            gameSDK.sendFaceBookFriend(function() {}, a)
        }
    },
    onClose: function() {
        this.removeFromParent()
    }
})
  , HonorRankNode = cc.Sprite.extend({
    index: null,
    curType: null,
    curData: null,
    mainUI: null,
    honorLayer: null,
    ctor: function(a, b, c) {
        this._super();
        this.index = a;
        this.curType = b;
        this.curData = c;
        this.honorLayer = this.mainUI = null
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    onExit: function() {
        this._super()
    },
    initUI: function() {
        this.setCascadeOpacityEnabled(!0);
        this.setContentSize(cc.size(686, 121));
        this.mainUI = ParseUIJson.parseJsonToUI(honorUIRes.res_honor_rank_node);
        this.mainUI.x = 343;
        this.mainUI.y = 121;
        this.addChild(this.mainUI);
        this.updateShow();
        this.updateVsBtn()
    },
    updateVsBtn: function() {
        1 == this.curType ? this.curData.level > gameUserData.lv ? (engine.gameEvent.createMouseUp(this.mainUI.otherbg.vsbtn, this.onRobotVsBtn.bind(this), buttonScalingType),
        this.mainUI.otherbg.vsbtn.setVisible(!0),
        this.mainUI.otherbg.vsbtn_g.setVisible(!1)) : (this.mainUI.otherbg.vsbtn.setVisible(!1),
        this.mainUI.otherbg.vsbtn_g.setVisible(!0)) : !1 == checkFriendIsInvite(this.curData.playerid) ? (engine.gameEvent.createMouseUp(this.mainUI.otherbg.vsbtn, this.onFriendVsBtn.bind(this), buttonScalingType),
        this.mainUI.otherbg.vsbtn.setVisible(!0),
        this.mainUI.otherbg.vsbtn_g.setVisible(!1)) : (this.mainUI.otherbg.vsbtn.setVisible(!1),
        this.mainUI.otherbg.vsbtn_g.setVisible(!0))
    },
    updateShow: function() {
        function a(a) {
            a = new cc.Sprite(a);
            a.setScale(80 / a.getContentSize().width);
            a.x = b.mainUI.headbg.x + 1;
            a.y = b.mainUI.headbg.y + 2;
            b.mainUI.headbg.setLocalZOrder(10);
            b.mainUI.addChild(a)
        }
        var b = this;
        a(res.iconren);
        var c = this.curData.photo;
        if (null != cc.spriteFrameCache.getSpriteFrame(c))
            a("#" + c);
        else {
            var d = new Image;
            d.crossOrigin = "anonymous";
            d.src = c;
            d.onload = function() {
                a(d)
            }
        }
        this.mainUI.nametxt.setString(this.curData.name);
        this.mainUI.nametxt.setFontName("Arial Bold");
        this.curData.playerid == gameSDK.sdkPlayInfo.id ? (this.mainUI.ownbg.setVisible(!0),
        this.mainUI.otherbg.setVisible(!1),
        this.mainUI.nametxt.setColor(cc.color(154, 75, 22))) : (this.mainUI.ownbg.setVisible(!1),
        this.mainUI.otherbg.setVisible(!0));
        c = 0;
        c = 300 <= this.curData.level ? 300 : this.curData.level + 1;
        this.mainUI.otherbg.aw_fnttype2_lv.setString("" + c);
        this.mainUI.ownbg.aw_fnttype2_lv.setString("" + c);
        1 == this.curType ? (this.mainUI.otherbg.vsbtn.gethonortxt.setVisible(!0),
        this.mainUI.otherbg.vsbtn.vssp.setVisible(!0),
        this.mainUI.otherbg.vsbtn.honorsp.setVisible(!0),
        this.mainUI.otherbg.vsbtn.honorsp2.setVisible(!1),
        this.mainUI.otherbg.vsbtn.gethonortxt2.setVisible(!1)) : (this.mainUI.otherbg.vsbtn.gethonortxt.setVisible(!1),
        this.mainUI.otherbg.vsbtn.vssp.setVisible(!1),
        this.mainUI.otherbg.vsbtn.honorsp.setVisible(!1),
        this.mainUI.otherbg.vsbtn.honorsp2.setVisible(!0),
        this.mainUI.otherbg.vsbtn.gethonortxt2.setVisible(!0));
        this.mainUI.otherbg.vsbtn.gethonortxt2.setString("x" + Global.getHonorByInvite);
        this.mainUI.otherbg.vsbtn.gethonortxt.setString("x" + this.curData.getHonor);
        this.mainUI.otherbg.vsbtn.gethonortxt.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.otherbg.vsbtn.gethonortxt.enableStroke(cc.color(39, 131, 20), 2);
        this.mainUI.otherbg.vsbtn.gethonortxt2.setFontFillColor(cc.color(255, 255, 255));
        this.mainUI.otherbg.vsbtn.gethonortxt2.enableStroke(cc.color(39, 131, 20), 2)
    },
    onRobotVsBtn: function() {
        var a = this.curData.level;
        this.honorLayer.removeFromParent();
        currentScene.chooseLevelLayer.moveToTargetBtn(a, !0)
    },
    onFriendVsBtn: function() {
        var a = this
          , b = {};
        b.pngData = [{
            url: "res/invbg.jpg",
            posX: 0,
            posY: 0,
            imgWidth: 750,
            imgHeight: 380
        }, {
            url: selfData.myurl,
            posX: 213,
            posY: 55,
            imgWidth: 162,
            imgHeight: 162
        }, {
            url: "res/invicon.png",
            posX: 171,
            posY: 14,
            imgWidth: 235,
            imgHeight: 235
        }];
        b.fontData = [{
            des: "" + gameUserData.stars,
            posX: 290,
            posY: 300,
            font: "40px Microsoft YaHei",
            lineWidth: 2,
            fillStyle: "rgb(249,227,113)",
            textAlign: "center",
            strokeStyle: "#000000"
        }];
        b.width = 750;
        b.height = 380;
        b.playerid = this.curData.playerid;
        b.updateAsyncTemplate = "play_turn";
        b.updateAsyncText = "Your friends is challenging you";
        gameSDK.appointFaceBookFriend(function() {
            a.mainUI.otherbg.vsbtn.setVisible(!1);
            a.mainUI.otherbg.vsbtn_g.setVisible(!0);
            var b = addHonorFun(Global.getHonorByInvite);
            currentScene.chooseLevelLayer.refreshHonorPush();
            gameUserData.invite_ids.push(a.curData.playerid);
            a.honorLayer.addHonorAction(Global.getHonorByInvite, b)
        }, b)
    }
});
var NewJellyLandLayer = cc.Layer.extend({
    moveLayer: null,
    isClick: null,
    clickDownPoint: null,
    isLandNum: null,
    ctor: function(a) {
        this._super();
        this.clickDownPoint = this.moveLayer = null;
        this.isClick = !0;
        this.isLandNum = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(79, 102, 219, 255), 0, cc.color(0, 0, 0, 170));
        this.addChild(a);
        this.moveLayer = new cc.Layer;
        this.addChild(this.moveLayer);
        this.moveLayer.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(this.moveLayer, this.clickDownFun.bind(this), null, cc.rect(0, 0, 720, 6E3));
        engine.gameEvent.createMouseMove(this.moveLayer, this.clickMoveFun.bind(this), null, cc.rect(0, 0, 720, 6E3));
        this.addIsLand();
        a = new cc.Sprite("#public/returnbtn.png");
        this.addChild(a);
        a.x = 60 - uiOfferX;
        a.y = 1200;
        engine.gameEvent.createMouseUp(a, this.onClose.bind(this), buttonScalingType);
        this.moveLayer.y = -Global.newMapInfo["land_" + this.isLandNum].isLandPos.y + 600;
        0 < this.moveLayer.y && (this.moveLayer.y = 0);
        -4700 > this.moveLayer.y && (this.moveLayer.y = -4700)
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        var c = a.getLocation()
          , d = this.touchY - c.y
          , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
        5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
        d = this.moveLayer.y - d;
        this.touchY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 < a && (a = 0);
        -4700 > a && (a = -4700);
        this.moveLayer.y = a
    },
    addIsLand: function() {
        var a = 0, b;
        for (b in Global.newMapInfo) {
            var c = Global.newMapInfo[b]
              , d = this.createIsLandNode(c);
            this.moveLayer.addChild(d);
            d.x = c.isLandPos.x;
            d.y = c.isLandPos.y;
            a++
        }
    },
    createIsLandNode: function(a) {
        var b = new cc.Sprite
          , c = new cc.Sprite("res/choose_map/" + a.landIcon + ".png");
        b.addChild(c);
        c.setScale(0.85);
        c.isLandData = a;
        var d = new cc.LabelTTF(a.landName.toString(),"jellyboom_font",40);
        d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        d.setColor(cc.color(255, 255, 255, 255));
        d.enableStroke(cc.color(218, 96, 42), 2);
        b.addChild(d, 10);
        var e = new cc.Sprite;
        b.addChild(e, 2);
        var f = new cc.LabelTTF(a.levelRangedDes.toString(),"jellyboom_font",40);
        f.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        f.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER);
        f.setColor(cc.color(255, 255, 255, 255));
        b.addChild(f, 2);
        if (!1 == this.checkLandLock(a))
            if (c = new cc.Sprite("res/choose_map/cloud.png"),
            b.addChild(c, 1),
            c.setScale(1.3),
            d.x = a.unLockNamePos.x,
            d.y = a.unLockNamePos.y,
            e.setSpriteFrame("choose_map/tipsbg1.png"),
            e.x = a.unLockDesBgPos.x,
            e.y = a.unLockDesBgPos.y,
            f.enableStroke(cc.color(14, 127, 155), 2),
            f.x = a.unLockDesPos.x,
            f.y = a.unLockDesPos.y,
            0 < a.newElementIcon.length)
                for (d = new cc.LabelTTF("New element:","jellyboom_font",32),
                d.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER),
                d.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER),
                d.setColor(cc.color(255, 255, 255, 255)),
                d.enableStroke(cc.color(14, 127, 155), 2),
                b.addChild(d, 2),
                d.x = a.newElementPos.x,
                d.y = a.newElementPos.y,
                d = 70,
                1 == a.newElementIcon.length && (d = 90),
                3 == a.newElementIcon.length && (d = 50),
                e = 0; e < a.newElementIcon.length; e++)
                    f = new cc.Sprite("#element/" + a.newElementIcon[e].icon + ".png"),
                    b.addChild(f, 2),
                    f.setScale(0.5),
                    f.x = d + 50 * e,
                    f.y = -30;
            else
                f.y = a.unLockDesPos.y - 25;
        else
            d.x = a.lockNamePos.x,
            d.y = a.lockNamePos.y,
            e.setSpriteFrame("choose_map/tipsbg2.png"),
            e.x = a.lockDesBgPos.x,
            e.y = a.lockDesBgPos.y,
            f.x = a.lockDesPos.x,
            f.y = a.lockDesPos.y,
            c.isSwallowTouches = !1,
            engine.gameEvent.createMouseUp(c, this.onIsLandSp.bind(this), buttonScalingType);
        return b
    },
    onIsLandSp: function(a, b) {
        if (!0 == this.isClick) {
            var c = new LandContentLayer(b.getCurrentTarget().isLandData);
            this.addChild(c)
        }
    },
    onClose: function() {
        this.removeFromParent()
    },
    checkLandLock: function(a) {
        var b = !1;
        gameUserData.lv > a.lockLevel && (b = !0);
        0 == a.lockLevel && (b = !0);
        return b
    }
})
  , LandContentLayer = cc.Layer.extend({
    mainUI: null,
    data: null,
    moveLayer: null,
    isClick: null,
    touchY: null,
    clickDownPoint: null,
    ctor: function(a) {
        this._super();
        this.data = a
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(res.res_new_level_layer);
        this.addChild(this.mainUI);
        var a = "#choose_map/islandname_" + this.data.landIcon.split("_")[1] + ".png"
          , a = new cc.Sprite(a);
        this.addChild(a);
        a.x = 360;
        a.y = 1010;
        a = new cc.DrawNode;
        a.drawRect(cc.p(10, 270), cc.p(710, 900), cc.color(0, 0, 0, 120), 0, cc.color(0, 0, 0, 120));
        a = createClippingNode(0.5, 0.5, 0, 0, 1, !1, a);
        this.mainUI.addChild(a);
        a.isSwallowTouches = !1;
        engine.gameEvent.createMouseDown(a, this.clickDownFun.bind(this), null, cc.rect(20, 270, 680, 630));
        engine.gameEvent.createMouseMove(a, this.clickMoveFun.bind(this), null, cc.rect(20, 270, 680, 630));
        engine.gameEvent.createMouseUp(a, this.clickUpFun.bind(this), null, cc.rect(20, 270, 680, 630));
        engine.gameEvent.createMouseUp(this.mainUI.btnClose, this.onClose.bind(this), buttonScalingType);
        this.moveLayer = new cc.Layer;
        a.addChild(this.moveLayer);
        this.createLevel()
    },
    onClose: function() {
        this.removeFromParent()
    },
    createLevel: function() {
        for (var a = 1, b = this.data.levelRange[0]; b <= this.data.levelRange[1]; b++) {
            var c = {};
            c.lv = b;
            c = this.createLevelItem(c);
            this.moveLayer.addChild(c);
            c.x = 170 + 130 * Math.floor((a - 1) % 4);
            c.y = 840 - 130 * Math.floor((a - 1) / 4);
            a++
        }
    },
    createLevelItem: function(a) {
        var b = new cc.Sprite("#choose_map/choose_btn.png");
        b.setTag(a.lv);
        var c = "";
        if (null != Global.levelTarget["level" + a.lv].special && 1 === Global.levelTarget["level" + a.lv].special)
            for (var c = "fnttype35", d = 1; 5 > d; d++) {
                var e = new cc.Sprite("#choose_map/star1.png");
                b.addChild(e);
                1 === d ? (e.setRotation(-37),
                e.setPosition(15, 94),
                e.setScale(0.87)) : 2 === d ? (e.setRotation(-10),
                e.setPosition(40, 109)) : 3 === d ? (e.setRotation(10),
                e.setPosition(71, 109)) : 4 === d && (e.setRotation(30),
                e.setPosition(95, 94),
                e.setScale(0.87));
                b["star" + d] = e
            }
        else
            for (c = "fnttype34",
            d = 1; 4 > d; d++)
                e = new cc.Sprite("#choose_map/star1.png"),
                b.addChild(e),
                1 === d ? (e.setRotation(-30),
                e.setPosition(11, 85),
                e.setScale(0.87)) : 2 === d ? e.setPosition(40, 95) : 3 === d && (e.setRotation(30),
                e.setPosition(70, 85),
                e.setScale(0.87)),
                b["star" + d] = e;
        c = new GameArtWord(c);
        c.alignmentType = artWordMiddle;
        b.addChild(c);
        c.setPosition(44, 22);
        b.lv = c;
        b.lv.setString(b.getTag() + "");
        a = new cc.Sprite("#choose_map/blue_" + Global.levelTarget["level" + a.lv].showElement + "_1.png");
        b.addChild(a);
        a.setPosition(40, 62);
        b.collectIcon = a;
        this.initLevelIcon(b);
        return b
    },
    initSpecialIcon: function(a) {
        var b = a.getTag();
        1 === Global.levelTarget["level" + b].special && (a.setSpriteFrame("choose_map/choose_btn_red.png"),
        a.lv.x = 55,
        a.lv.y = 26,
        Utils.changeTexture(a.collectIcon, "choose_map/purple_" + Global.levelTarget["level" + a.getTag()].showElement + "_1.png"),
        a.collectIcon.x = 54,
        a.collectIcon.y = 72)
    },
    initLevelIcon: function(a) {
        var b = a.getTag();
        if (b <= gameUserData.lv + 1)
            this.initSpecialIcon(a),
            this.initStar(a, b),
            a.isSwallowTouches = !1,
            engine.gameEvent.createMouseUp(a, this.onChoose.bind(this), buttonScalingType);
        else {
            a.star1.setVisible(!1);
            a.star2.setVisible(!1);
            a.star3.setVisible(!1);
            a.lv.setVisible(!1);
            Utils.changeTexture(a, "choose_map/gray_choose.png");
            Utils.changeTexture(a.collectIcon, "choose_map/blue_" + Global.levelTarget["level" + a.getTag()].showElement + "_2.png");
            1 === Global.levelTarget["level" + b].special && (Utils.changeTexture(a, "choose_map/gray_choose1.png"),
            Utils.changeTexture(a.collectIcon, "choose_map/purple_" + Global.levelTarget["level" + a.getTag()].showElement + "_2.png"));
            var c = new GameArtWord("fnttype34");
            c.alignmentType = artWordMiddle;
            a.addChild(c);
            c.setPosition(44, 20);
            a.lv = c;
            a.lv.setString(a.getTag() + "");
            1 === Global.levelTarget["level" + b].special && (a.lv.x = 55,
            a.lv.y = 26,
            a.collectIcon.x = 54,
            a.collectIcon.y = 72,
            null != a.star4 && a.star4.setVisible(!1))
        }
    },
    initStar: function(a, b) {
        for (var c = gameUserData.levelStar[b - 1] || 0, d = 1; 3 >= d; ++d)
            a["star" + d].setVisible(d <= c);
        1 === Global.levelTarget["level" + b].special && a.star4.setVisible(!1);
        4 <= c && 1 === Global.levelTarget["level" + b].special ? null != a.star4 && a.star4.setVisible(!0) : 4 <= c && null != a.star4 && a.star4.setVisible(!0)
    },
    onChoose: function(a, b) {
        !0 == this.isClick && EventMgr.emit(EVENTMGR_ID.ENTER_GAME, b.getCurrentTarget().getTag())
    },
    clickDownFun: function(a, b) {
        this.isClick = !0;
        this.touchY = a.getLocation().y;
        this.clickDownPoint = b.getCurrentTarget().convertToNodeSpace(a.getLocation())
    },
    clickMoveFun: function(a, b) {
        var c = a.getLocation()
          , d = this.touchY - c.y
          , e = b.getCurrentTarget().convertToNodeSpace(a.getLocation());
        5 <= cc.pDistance(this.clickDownPoint, e) && (this.isClick = !1);
        d = this.moveLayer.y - d;
        this.touchY = c.y;
        this.moveSetY(d)
    },
    moveSetY: function(a) {
        0 > a && (a = 0);
        600 < a && (a = 600);
        this.moveLayer.y = a
    },
    clickUpFun: function() {}
});
var MessageLayer = cc.Layer.extend({
    boxAnimation: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super();
        this.initUI()
    },
    initUI: function() {
        createMaskLayer(this);
        this.mainUI = ParseUIJson.parseJsonToUI(res.message_layer_json);
        this.addChild(this.mainUI);
        var a = createGameAnimation(res.msg_box_json, "boxlight", 24);
        a.setPosition(350, 740);
        a.playCount = -1;
        this.addChild(a);
        a = createGameAnimation(res.msg_box_json, "boxopen", 24);
        a.setPosition(350, 740);
        a.gotoAndStop(1);
        this.addChild(a);
        this.boxAnimation = a;
        this.initListener()
    },
    initListener: function() {
        engine.gameEvent.createMouseUp(this.mainUI.openbtn, this.openMessageFun.bind(this), buttonScalingType)
    },
    closeFun: function() {
        this.removeFromParent()
    },
    openMessageFun: function() {
        var a = this
          , b = function() {
            gameSDK.sdkMessage.getBotData().openSubscribeBot = 1;
            gameSDK.sdkMessage.sendMessengerRobot(function() {});
            EventMgr.emit(EVENTMGR_ID.CLOSE_MESSAGE_BTN);
            gameUserData.isSelectMessage = 1;
            gameUserData.gold += 500;
            EventMgr.emit(EVENTMGR_ID.CHOOSE_TEXT);
            gameUserData.getMsgAwardDate = (new Date).getDate();
            gameSDK.saveUserData(getSaveFBData(), null);
            a.playGetAction([{
                id: 2006,
                num: 500
            }]);
            a.removeFromParent()
        }
          , c = function() {
            gameSDK.sdkMessage.getBotData().openSubscribeBot = 0;
            gameSDK.sdkMessage.sendMessengerRobot(function() {});
            EventMgr.emit(EVENTMGR_ID.CLOSE_MESSAGE_BTN);
            a.removeFromParent()
        };
        myLogEventFun("new_playeropen");
        this.boxAnimation.playCount = 1;
        this.boxAnimation.gotoAndPlay(1);
        this.boxAnimation.frameFun = function(a) {
            22 == a && gameSDK.sdkMessage.subscribeBotAsync(b, c)
        }
    },
    playGetAction: function(a) {
        var b = new cc.Layer;
        createMaskLayer(b);
        currentScene.addChild(b, 10001);
        for (var c = [], c = 1 == a.length ? [cc.p(360, 700)] : 2 == a.length ? [cc.p(250, 700), cc.p(470, 700)] : [cc.p(160, 700), cc.p(360, 700), cc.p(560, 700)], d = 0; d < a.length; d++) {
            var e = "element/" + DataMgr.getElementDataByID(a[d].id).uiIcon + ".png"
              , f = createGameAnimation(res.res_heart_json, "shopbuyget", 24);
            f.playCount = 1;
            f.setPosition(c[d]);
            f.getBitmapByUrlName("sbg6.png").setSpriteFrame(e);
            b.addChild(f);
            e = new GameArtWord("fnttype1");
            e.alignmentType = artWordMiddle;
            e.setString("x" + a[d].num);
            e.x = 0;
            e.y = -80;
            e.setScale(1.2);
            f.addChild(e, 3);
            f.isRemoveFromComplete = !0;
            f.layer = b;
            f.frameCompleteFun = function() {
                f.layer.removeFromParent()
            }
        }
    }
});
var EVENTMGR_ID = {
    REWARD_NODE: 1,
    GAME_ITEMS: 2,
    CHOOSE_TEXT: 3,
    ENTER_GAME: 4,
    TOUCH_CELL: 5,
    REFRESH_TARGET: 6,
    REPLAY: 7,
    NEW_ELEMENT: 8,
    ADD_SCORE: 9,
    STEP: 10,
    PAUSE_LAYER: 11,
    EAT_FOOD: 12,
    KILL_MONSTER: 13,
    SHOP_LAYER: 14,
    ITEM_KILL: 15,
    FORBID_DROP: 16,
    CAN_TOUCH: 17,
    AUTO_KILL: 18,
    ADD_SCORE_ACTION: 19,
    ADD_STEP: 20,
    FAILED: 21,
    TRIGGER_SPECIAL: 22,
    TARGET_MOVE_FINISH: 23,
    LOTTERY_COMPLETE: 24,
    SHOW_BUCKET: 25,
    HIDE_BUCKET: 26,
    SHOW_ADD: 27,
    REFRESH_POWER_INFO: 28,
    REFRESH_GOLD: 29,
    REFRESH_POWER: 30,
    REFRESH_POT: 31,
    SHOW_TIPS: 32,
    SHOW_LOADING: 33,
    CLOSE_LOADING: 34,
    STEP_OVER: 35,
    INFINITE_POWER: 36,
    REFRESH_LITTLE_RANK: 37,
    GET_CUR_TIME: 38,
    PARACHUTE_GIFT: 39,
    ADS_TIPS: 40,
    GET_LEVEL_INFO_COMPLETE: 41,
    REFRESH_WEEK_FREE: 42,
    MONSTER_V: 100,
    MONSTER_F: 101,
    MONSTER_HINT: 102,
    MONSTER_NO_STEP: 103,
    MONSTER_WAIT: 104,
    MONSTER_DANCE: 105,
    CHOOSE_NUM_LAYER: 55,
    SCALE_TARGET: 56,
    REFRESH_SELF_IMG: 57,
    LOTTERY_MONSTER_W: 58,
    LOTTERY_MONSTER_C: 59,
    LOTTERY_MONSTER_Z: 60,
    LOTTERY_MONSTER_E: 61,
    LOTTERY_MONSTER_J: 62,
    LOTTERY_LIGHTING_N: 63,
    LOTTERY_LIGHTING_F: 64,
    LOTTERY_LIGHTING_S: 65,
    WEEKBOSS_READY: 66,
    WEEKBOSS_FAIL: 67,
    WEEKBOSS_MENUFAIL: 68,
    WEEKBOSS_ENTER: 69,
    WEEKBOSS_HIT: 70,
    WEEKBOSS_ATTACK: 71,
    WEEKBOSS_ANGRY: 72,
    WEEKBOSS_WAIT: 73,
    WEEKMONSTER_DANCE: 74,
    WEEKMONSTER_ESCAPE: 75,
    WEEKMONSTER_ENTER: 76,
    WEEKBOSS_CHANGE_ELEMENT: 78,
    WEEKGAME_TICKETS_PUSH: 79,
    OPEN_WEEKGAME: 80,
    WEEKBOSS_UPDATE_HP: 81,
    WEEKBOSS_UPDATE_HP_PRO: 82,
    WEEKBOSS_REMOVE_MASK: 83,
    WEEKBOSS_ADD_MASK: 84,
    WEEKBOSS_OPEN_FAIL_VIEW: 200,
    CLAIM_ITEM: 201,
    PAYMENT_SUCCESS: 202,
    REDUCE_STEP: 203,
    RESURGENCE_ADD_STEP: 204,
    CLOSE_MESSAGE_BTN: 1E3
}
  , EventMgr = {
    events: {},
    register: function(a, b, c) {
        if (a && b)
            if (this.checkIsExist(a, c))
                cc.log("already exist in event!!!");
            else {
                var d = {};
                d.self = c || null;
                d.func = b || null;
                this.events[a] || (this.events[a] = []);
                this.events[a].push(d)
            }
        else
            cc.log("register error param !!!")
    },
    checkIsExist: function(a, b) {
        var c = this.events[a];
        if (!c)
            return !1;
        for (var d = 0; d < c.length; ++d)
            if (_.isEqual(c[d].self, b))
                return !0;
        return !1
    },
    emit: function(a, b) {
        var c = this.events[a];
        if (c)
            for (var d = 0; d < c.length; ++d)
                this.callBack(c[d], b || null);
        else
            cc.log("event num is out !!!", a)
    },
    broad: function(a) {
        for (var b in this.events)
            for (var c = 0; c < this.events[b].length; ++c)
                this.callBack(this.events[b][c], a)
    },
    callBack: function(a, b) {
        var c = a.self
          , d = a.func;
        c && c.func ? c.func(b) : d.call(c, b)
    },
    remove: function(a, b) {
        var c = this.events[a];
        if (c)
            for (var d = 0; d < c.length; ++d)
                _.isEqual(c[d].self, b) && c.splice(d, 1)
    },
    clean: function() {
        this.events = {}
    }
};
(function() {
    var a = "object" == typeof self && self.self === self && self || "object" == typeof global && global.global === global && global || this
      , b = a._
      , c = Array.prototype
      , d = Object.prototype
      , e = "undefined" !== typeof Symbol ? Symbol.prototype : null
      , f = c.push
      , g = c.slice
      , h = d.toString
      , k = d.hasOwnProperty
      , m = Array.isArray
      , p = Object.keys
      , s = Object.create
      , t = function() {}
      , r = function(a) {
        if (a instanceof r)
            return a;
        if (!(this instanceof r))
            return new r(a);
        this._wrapped = a
    };
    "undefined" == typeof exports || exports.nodeType ? a._ = r : ("undefined" != typeof module && !module.nodeType && module.exports && (exports = module.exports = r),
    exports._ = r);
    r.VERSION = "1.8.3";
    var u = function(a, b, c) {
        if (void 0 === b)
            return a;
        switch (null == c ? 3 : c) {
        case 1:
            return function(c) {
                return a.call(b, c)
            }
            ;
        case 3:
            return function(c, d, e) {
                return a.call(b, c, d, e)
            }
            ;
        case 4:
            return function(c, d, e, f) {
                return a.call(b, c, d, e, f)
            }
        }
        return function() {
            return a.apply(b, arguments)
        }
    }, v, y = function(a, b, c) {
        return r.iteratee !== v ? r.iteratee(a, b) : null == a ? r.identity : r.isFunction(a) ? u(a, b, c) : r.isObject(a) ? r.matcher(a) : r.property(a)
    };
    r.iteratee = v = function(a, b) {
        return y(a, b, Infinity)
    }
    ;
    var w = function(a, b) {
        b = null == b ? a.length - 1 : +b;
        return function() {
            for (var c = Math.max(arguments.length - b, 0), d = Array(c), e = 0; e < c; e++)
                d[e] = arguments[e + b];
            switch (b) {
            case 0:
                return a.call(this, d);
            case 1:
                return a.call(this, arguments[0], d);
            case 2:
                return a.call(this, arguments[0], arguments[1], d)
            }
            c = Array(b + 1);
            for (e = 0; e < b; e++)
                c[e] = arguments[e];
            c[b] = d;
            return a.apply(this, c)
        }
    }
      , x = function(a) {
        if (!r.isObject(a))
            return {};
        if (s)
            return s(a);
        t.prototype = a;
        a = new t;
        t.prototype = null;
        return a
    }
      , C = function(a) {
        return function(b) {
            return null == b ? void 0 : b[a]
        }
    }
      , A = Math.pow(2, 53) - 1
      , z = C("length")
      , D = function(a) {
        a = z(a);
        return "number" == typeof a && 0 <= a && a <= A
    };
    r.each = r.forEach = function(a, b, c) {
        b = u(b, c);
        var d;
        if (D(a))
            for (c = 0,
            d = a.length; c < d; c++)
                b(a[c], c, a);
        else {
            var e = r.keys(a);
            c = 0;
            for (d = e.length; c < d; c++)
                b(a[e[c]], e[c], a)
        }
        return a
    }
    ;
    r.map = r.collect = function(a, b, c) {
        b = y(b, c);
        c = !D(a) && r.keys(a);
        for (var d = (c || a).length, e = Array(d), f = 0; f < d; f++) {
            var g = c ? c[f] : f;
            e[f] = b(a[g], g, a)
        }
        return e
    }
    ;
    var B = function(a) {
        return function(b, c, d, e) {
            var f = 3 <= arguments.length
              , g = u(c, e, 4)
              , h = d
              , k = !D(b) && r.keys(b)
              , m = (k || b).length
              , p = 0 < a ? 0 : m - 1;
            f || (h = b[k ? k[p] : p],
            p += a);
            for (; 0 <= p && p < m; p += a)
                f = k ? k[p] : p,
                h = g(h, b[f], f, b);
            return h
        }
    };
    r.reduce = r.foldl = r.inject = B(1);
    r.reduceRight = r.foldr = B(-1);
    r.find = r.detect = function(a, b, c) {
        b = (D(a) ? r.findIndex : r.findKey)(a, b, c);
        if (void 0 !== b && -1 !== b)
            return a[b]
    }
    ;
    r.filter = r.select = function(a, b, c) {
        var d = [];
        b = y(b, c);
        r.each(a, function(a, c, e) {
            b(a, c, e) && d.push(a)
        });
        return d
    }
    ;
    r.reject = function(a, b, c) {
        return r.filter(a, r.negate(y(b)), c)
    }
    ;
    r.every = r.all = function(a, b, c) {
        b = y(b, c);
        c = !D(a) && r.keys(a);
        for (var d = (c || a).length, e = 0; e < d; e++) {
            var f = c ? c[e] : e;
            if (!b(a[f], f, a))
                return !1
        }
        return !0
    }
    ;
    r.some = r.any = function(a, b, c) {
        b = y(b, c);
        c = !D(a) && r.keys(a);
        for (var d = (c || a).length, e = 0; e < d; e++) {
            var f = c ? c[e] : e;
            if (b(a[f], f, a))
                return !0
        }
        return !1
    }
    ;
    r.contains = r.includes = r.include = function(a, b, c, d) {
        D(a) || (a = r.values(a));
        if ("number" != typeof c || d)
            c = 0;
        return 0 <= r.indexOf(a, b, c)
    }
    ;
    r.invoke = w(function(a, b, c) {
        var d = r.isFunction(b);
        return r.map(a, function(a) {
            var e = d ? b : a[b];
            return null == e ? e : e.apply(a, c)
        })
    });
    r.pluck = function(a, b) {
        return r.map(a, r.property(b))
    }
    ;
    r.where = function(a, b) {
        return r.filter(a, r.matcher(b))
    }
    ;
    r.findWhere = function(a, b) {
        return r.find(a, r.matcher(b))
    }
    ;
    r.max = function(a, b, c) {
        var d = -Infinity, e = -Infinity, f;
        if (null == b || "number" == typeof b && "object" != typeof a[0] && null != a) {
            a = D(a) ? a : r.values(a);
            for (var g = 0, h = a.length; g < h; g++)
                c = a[g],
                null != c && c > d && (d = c)
        } else
            b = y(b, c),
            r.each(a, function(a, c, g) {
                f = b(a, c, g);
                if (f > e || -Infinity === f && -Infinity === d)
                    d = a,
                    e = f
            });
        return d
    }
    ;
    r.min = function(a, b, c) {
        var d = Infinity, e = Infinity, f;
        if (null == b || "number" == typeof b && "object" != typeof a[0] && null != a) {
            a = D(a) ? a : r.values(a);
            for (var g = 0, h = a.length; g < h; g++)
                c = a[g],
                null != c && c < d && (d = c)
        } else
            b = y(b, c),
            r.each(a, function(a, c, g) {
                f = b(a, c, g);
                if (f < e || Infinity === f && Infinity === d)
                    d = a,
                    e = f
            });
        return d
    }
    ;
    r.shuffle = function(a) {
        return r.sample(a, Infinity)
    }
    ;
    r.sample = function(a, b, c) {
        if (null == b || c)
            return D(a) || (a = r.values(a)),
            a[r.random(a.length - 1)];
        a = D(a) ? r.clone(a) : r.values(a);
        c = z(a);
        b = Math.max(Math.min(b, c), 0);
        c -= 1;
        for (var d = 0; d < b; d++) {
            var e = r.random(d, c)
              , f = a[d];
            a[d] = a[e];
            a[e] = f
        }
        return a.slice(0, b)
    }
    ;
    r.sortBy = function(a, b, c) {
        var d = 0;
        b = y(b, c);
        return r.pluck(r.map(a, function(a, c, e) {
            return {
                value: a,
                index: d++,
                criteria: b(a, c, e)
            }
        }).sort(function(a, b) {
            var c = a.criteria
              , d = b.criteria;
            if (c !== d) {
                if (c > d || void 0 === c)
                    return 1;
                if (c < d || void 0 === d)
                    return -1
            }
            return a.index - b.index
        }), "value")
    }
    ;
    B = function(a, b) {
        return function(c, d, e) {
            var f = b ? [[], []] : {};
            d = y(d, e);
            r.each(c, function(b, e) {
                var g = d(b, e, c);
                a(f, b, g)
            });
            return f
        }
    }
    ;
    r.groupBy = B(function(a, b, c) {
        r.has(a, c) ? a[c].push(b) : a[c] = [b]
    });
    r.indexBy = B(function(a, b, c) {
        a[c] = b
    });
    r.countBy = B(function(a, b, c) {
        r.has(a, c) ? a[c]++ : a[c] = 1
    });
    var E = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
    r.toArray = function(a) {
        return a ? r.isArray(a) ? g.call(a) : r.isString(a) ? a.match(E) : D(a) ? r.map(a, r.identity) : r.values(a) : []
    }
    ;
    r.size = function(a) {
        return null == a ? 0 : D(a) ? a.length : r.keys(a).length
    }
    ;
    r.partition = B(function(a, b, c) {
        a[c ? 0 : 1].push(b)
    }, !0);
    r.first = r.head = r.take = function(a, b, c) {
        return null == a || 1 > a.length ? void 0 : null == b || c ? a[0] : r.initial(a, a.length - b)
    }
    ;
    r.initial = function(a, b, c) {
        return g.call(a, 0, Math.max(0, a.length - (null == b || c ? 1 : b)))
    }
    ;
    r.last = function(a, b, c) {
        return null == a || 1 > a.length ? void 0 : null == b || c ? a[a.length - 1] : r.rest(a, Math.max(0, a.length - b))
    }
    ;
    r.rest = r.tail = r.drop = function(a, b, c) {
        return g.call(a, null == b || c ? 1 : b)
    }
    ;
    r.compact = function(a) {
        return r.filter(a, Boolean)
    }
    ;
    var F = function(a, b, c, d) {
        d = d || [];
        for (var e = d.length, f = 0, g = z(a); f < g; f++) {
            var h = a[f];
            if (D(h) && (r.isArray(h) || r.isArguments(h)))
                if (b)
                    for (var k = 0, m = h.length; k < m; )
                        d[e++] = h[k++];
                else
                    F(h, b, c, d),
                    e = d.length;
            else
                c || (d[e++] = h)
        }
        return d
    };
    r.flatten = function(a, b) {
        return F(a, b, !1)
    }
    ;
    r.without = w(function(a, b) {
        return r.difference(a, b)
    });
    r.uniq = r.unique = function(a, b, c, d) {
        r.isBoolean(b) || (d = c,
        c = b,
        b = !1);
        null != c && (c = y(c, d));
        d = [];
        for (var e = [], f = 0, g = z(a); f < g; f++) {
            var h = a[f]
              , k = c ? c(h, f, a) : h;
            b ? (f && e === k || d.push(h),
            e = k) : c ? r.contains(e, k) || (e.push(k),
            d.push(h)) : r.contains(d, h) || d.push(h)
        }
        return d
    }
    ;
    r.union = w(function(a) {
        return r.uniq(F(a, !0, !0))
    });
    r.intersection = function(a) {
        for (var b = [], c = arguments.length, d = 0, e = z(a); d < e; d++) {
            var f = a[d];
            if (!r.contains(b, f)) {
                var g;
                for (g = 1; g < c && r.contains(arguments[g], f); g++)
                    ;
                g === c && b.push(f)
            }
        }
        return b
    }
    ;
    r.difference = w(function(a, b) {
        b = F(b, !0, !0);
        return r.filter(a, function(a) {
            return !r.contains(b, a)
        })
    });
    r.unzip = function(a) {
        for (var b = a && r.max(a, z).length || 0, c = Array(b), d = 0; d < b; d++)
            c[d] = r.pluck(a, d);
        return c
    }
    ;
    r.zip = w(r.unzip);
    r.object = function(a, b) {
        for (var c = {}, d = 0, e = z(a); d < e; d++)
            b ? c[a[d]] = b[d] : c[a[d][0]] = a[d][1];
        return c
    }
    ;
    B = function(a) {
        return function(b, c, d) {
            c = y(c, d);
            d = z(b);
            for (var e = 0 < a ? 0 : d - 1; 0 <= e && e < d; e += a)
                if (c(b[e], e, b))
                    return e;
            return -1
        }
    }
    ;
    r.findIndex = B(1);
    r.findLastIndex = B(-1);
    r.sortedIndex = function(a, b, c, d) {
        c = y(c, d, 1);
        b = c(b);
        d = 0;
        for (var e = z(a); d < e; ) {
            var f = Math.floor((d + e) / 2);
            c(a[f]) < b ? d = f + 1 : e = f
        }
        return d
    }
    ;
    B = function(a, b, c) {
        return function(d, e, f) {
            var h = 0
              , k = z(d);
            if ("number" == typeof f)
                0 < a ? h = 0 <= f ? f : Math.max(f + k, h) : k = 0 <= f ? Math.min(f + 1, k) : f + k + 1;
            else if (c && f && k)
                return f = c(d, e),
                d[f] === e ? f : -1;
            if (e !== e)
                return f = b(g.call(d, h, k), r.isNaN),
                0 <= f ? f + h : -1;
            for (f = 0 < a ? h : k - 1; 0 <= f && f < k; f += a)
                if (d[f] === e)
                    return f;
            return -1
        }
    }
    ;
    r.indexOf = B(1, r.findIndex, r.sortedIndex);
    r.lastIndexOf = B(-1, r.findLastIndex);
    r.range = function(a, b, c) {
        null == b && (b = a || 0,
        a = 0);
        c || (c = b < a ? -1 : 1);
        b = Math.max(Math.ceil((b - a) / c), 0);
        for (var d = Array(b), e = 0; e < b; e++,
        a += c)
            d[e] = a;
        return d
    }
    ;
    r.chunk = function(a, b) {
        if (null == b || 1 > b)
            return [];
        for (var c = [], d = 0, e = a.length; d < e; )
            c.push(g.call(a, d, d += b));
        return c
    }
    ;
    var J = function(a, b, c, d, e) {
        if (!(d instanceof b))
            return a.apply(c, e);
        b = x(a.prototype);
        a = a.apply(b, e);
        return r.isObject(a) ? a : b
    };
    r.bind = w(function(a, b, c) {
        if (!r.isFunction(a))
            throw new TypeError("Bind must be called on a function");
        var d = w(function(e) {
            return J(a, d, b, this, c.concat(e))
        });
        return d
    });
    r.partial = w(function(a, b) {
        var c = r.partial.placeholder
          , d = function() {
            for (var e = 0, f = b.length, g = Array(f), h = 0; h < f; h++)
                g[h] = b[h] === c ? arguments[e++] : b[h];
            for (; e < arguments.length; )
                g.push(arguments[e++]);
            return J(a, d, this, this, g)
        };
        return d
    });
    r.partial.placeholder = r;
    r.bindAll = w(function(a, b) {
        b = F(b, !1, !1);
        var c = b.length;
        if (1 > c)
            throw Error("bindAll must be passed function names");
        for (; c--; ) {
            var d = b[c];
            a[d] = r.bind(a[d], a)
        }
    });
    r.memoize = function(a, b) {
        var c = function(d) {
            var e = c.cache
              , f = "" + (b ? b.apply(this, arguments) : d);
            r.has(e, f) || (e[f] = a.apply(this, arguments));
            return e[f]
        };
        c.cache = {};
        return c
    }
    ;
    r.delay = w(function(a, b, c) {
        return setTimeout(function() {
            return a.apply(null, c)
        }, b)
    });
    r.defer = r.partial(r.delay, r, 1);
    r.throttle = function(a, b, c) {
        var d, e, f, g, h = 0;
        c || (c = {});
        var k = function() {
            h = !1 === c.leading ? 0 : r.now();
            d = null;
            g = a.apply(e, f);
            d || (e = f = null)
        }
          , m = function() {
            var m = r.now();
            h || !1 !== c.leading || (h = m);
            var p = b - (m - h);
            e = this;
            f = arguments;
            0 >= p || p > b ? (d && (clearTimeout(d),
            d = null),
            h = m,
            g = a.apply(e, f),
            d || (e = f = null)) : d || !1 === c.trailing || (d = setTimeout(k, p));
            return g
        };
        m.cancel = function() {
            clearTimeout(d);
            h = 0;
            d = e = f = null
        }
        ;
        return m
    }
    ;
    r.debounce = function(a, b, c) {
        var d, e, f = function(b, c) {
            d = null;
            c && (e = a.apply(b, c))
        }, g = w(function(g) {
            d && clearTimeout(d);
            if (c) {
                var h = !d;
                d = setTimeout(f, b);
                h && (e = a.apply(this, g))
            } else
                d = r.delay(f, b, this, g);
            return e
        });
        g.cancel = function() {
            clearTimeout(d);
            d = null
        }
        ;
        return g
    }
    ;
    r.wrap = function(a, b) {
        return r.partial(b, a)
    }
    ;
    r.negate = function(a) {
        return function() {
            return !a.apply(this, arguments)
        }
    }
    ;
    r.compose = function() {
        var a = arguments
          , b = a.length - 1;
        return function() {
            for (var c = b, d = a[b].apply(this, arguments); c--; )
                d = a[c].call(this, d);
            return d
        }
    }
    ;
    r.after = function(a, b) {
        return function() {
            if (1 > --a)
                return b.apply(this, arguments)
        }
    }
    ;
    r.before = function(a, b) {
        var c;
        return function() {
            0 < --a && (c = b.apply(this, arguments));
            1 >= a && (b = null);
            return c
        }
    }
    ;
    r.once = r.partial(r.before, 2);
    r.restArgs = w;
    var I = !{
        toString: null
    }.propertyIsEnumerable("toString")
      , K = "valueOf isPrototypeOf toString propertyIsEnumerable hasOwnProperty toLocaleString".split(" ")
      , L = function(a, b) {
        var c = K.length
          , e = a.constructor
          , e = r.isFunction(e) && e.prototype || d
          , f = "constructor";
        for (r.has(a, f) && !r.contains(b, f) && b.push(f); c--; )
            f = K[c],
            f in a && a[f] !== e[f] && !r.contains(b, f) && b.push(f)
    };
    r.keys = function(a) {
        if (!r.isObject(a))
            return [];
        if (p)
            return p(a);
        var b = [], c;
        for (c in a)
            r.has(a, c) && b.push(c);
        I && L(a, b);
        return b
    }
    ;
    r.allKeys = function(a) {
        if (!r.isObject(a))
            return [];
        var b = [], c;
        for (c in a)
            b.push(c);
        I && L(a, b);
        return b
    }
    ;
    r.values = function(a) {
        for (var b = r.keys(a), c = b.length, d = Array(c), e = 0; e < c; e++)
            d[e] = a[b[e]];
        return d
    }
    ;
    r.mapObject = function(a, b, c) {
        b = y(b, c);
        c = r.keys(a);
        for (var d = c.length, e = {}, f = 0; f < d; f++) {
            var g = c[f];
            e[g] = b(a[g], g, a)
        }
        return e
    }
    ;
    r.pairs = function(a) {
        for (var b = r.keys(a), c = b.length, d = Array(c), e = 0; e < c; e++)
            d[e] = [b[e], a[b[e]]];
        return d
    }
    ;
    r.invert = function(a) {
        for (var b = {}, c = r.keys(a), d = 0, e = c.length; d < e; d++)
            b[a[c[d]]] = c[d];
        return b
    }
    ;
    r.functions = r.methods = function(a) {
        var b = [], c;
        for (c in a)
            r.isFunction(a[c]) && b.push(c);
        return b.sort()
    }
    ;
    B = function(a, b) {
        return function(c) {
            var d = arguments.length;
            b && (c = Object(c));
            if (2 > d || null == c)
                return c;
            for (var e = 1; e < d; e++)
                for (var f = arguments[e], g = a(f), h = g.length, k = 0; k < h; k++) {
                    var m = g[k];
                    b && void 0 !== c[m] || (c[m] = f[m])
                }
            return c
        }
    }
    ;
    r.extend = B(r.allKeys);
    r.extendOwn = r.assign = B(r.keys);
    r.findKey = function(a, b, c) {
        b = y(b, c);
        c = r.keys(a);
        for (var d, e = 0, f = c.length; e < f; e++)
            if (d = c[e],
            b(a[d], d, a))
                return d
    }
    ;
    var M = function(a, b, c) {
        return b in c
    };
    r.pick = w(function(a, b) {
        var c = {}
          , d = b[0];
        if (null == a)
            return c;
        r.isFunction(d) ? (1 < b.length && (d = u(d, b[1])),
        b = r.allKeys(a)) : (d = M,
        b = F(b, !1, !1),
        a = Object(a));
        for (var e = 0, f = b.length; e < f; e++) {
            var g = b[e]
              , h = a[g];
            d(h, g, a) && (c[g] = h)
        }
        return c
    });
    r.omit = w(function(a, b) {
        var c = b[0], d;
        r.isFunction(c) ? (c = r.negate(c),
        1 < b.length && (d = b[1])) : (b = r.map(F(b, !1, !1), String),
        c = function(a, c) {
            return !r.contains(b, c)
        }
        );
        return r.pick(a, c, d)
    });
    r.defaults = B(r.allKeys, !0);
    r.create = function(a, b) {
        var c = x(a);
        b && r.extendOwn(c, b);
        return c
    }
    ;
    r.clone = function(a) {
        return r.isObject(a) ? r.isArray(a) ? a.slice() : r.extend({}, a) : a
    }
    ;
    r.tap = function(a, b) {
        b(a);
        return a
    }
    ;
    r.isMatch = function(a, b) {
        var c = r.keys(b)
          , d = c.length;
        if (null == a)
            return !d;
        for (var e = Object(a), f = 0; f < d; f++) {
            var g = c[f];
            if (b[g] !== e[g] || !(g in e))
                return !1
        }
        return !0
    }
    ;
    var N, O;
    N = function(a, b, c, d) {
        if (a === b)
            return 0 !== a || 1 / a === 1 / b;
        if (null == a || null == b)
            return a === b;
        if (a !== a)
            return b !== b;
        var e = typeof a;
        return "function" !== e && "object" !== e && "object" != typeof b ? !1 : O(a, b, c, d)
    }
    ;
    O = function(a, b, c, d) {
        a instanceof r && (a = a._wrapped);
        b instanceof r && (b = b._wrapped);
        var f = h.call(a);
        if (f !== h.call(b))
            return !1;
        switch (f) {
        case "[object RegExp]":
        case "[object String]":
            return "" + a === "" + b;
        case "[object Number]":
            return +a !== +a ? +b !== +b : 0 === +a ? 1 / +a === 1 / b : +a === +b;
        case "[object Date]":
        case "[object Boolean]":
            return +a === +b;
        case "[object Symbol]":
            return e.valueOf.call(a) === e.valueOf.call(b)
        }
        f = "[object Array]" === f;
        if (!f) {
            if ("object" != typeof a || "object" != typeof b)
                return !1;
            var g = a.constructor
              , k = b.constructor;
            if (g !== k && !(r.isFunction(g) && g instanceof g && r.isFunction(k) && k instanceof k) && "constructor"in a && "constructor"in b)
                return !1
        }
        c = c || [];
        d = d || [];
        for (g = c.length; g--; )
            if (c[g] === a)
                return d[g] === b;
        c.push(a);
        d.push(b);
        if (f) {
            g = a.length;
            if (g !== b.length)
                return !1;
            for (; g--; )
                if (!N(a[g], b[g], c, d))
                    return !1
        } else {
            f = r.keys(a);
            g = f.length;
            if (r.keys(b).length !== g)
                return !1;
            for (; g--; )
                if (k = f[g],
                !r.has(b, k) || !N(a[k], b[k], c, d))
                    return !1
        }
        c.pop();
        d.pop();
        return !0
    }
    ;
    r.isEqual = function(a, b) {
        return N(a, b)
    }
    ;
    r.isEmpty = function(a) {
        return null == a ? !0 : D(a) && (r.isArray(a) || r.isString(a) || r.isArguments(a)) ? 0 === a.length : 0 === r.keys(a).length
    }
    ;
    r.isElement = function(a) {
        return !(!a || 1 !== a.nodeType)
    }
    ;
    r.isArray = m || function(a) {
        return "[object Array]" === h.call(a)
    }
    ;
    r.isObject = function(a) {
        var b = typeof a;
        return "function" === b || "object" === b && !!a
    }
    ;
    r.each("Arguments Function String Number Date RegExp Error Symbol Map WeakMap Set WeakSet".split(" "), function(a) {
        r["is" + a] = function(b) {
            return h.call(b) === "[object " + a + "]"
        }
    });
    r.isArguments(arguments) || (r.isArguments = function(a) {
        return r.has(a, "callee")
    }
    );
    m = a.document && a.document.childNodes;
    "function" != typeof /./ && "object" != typeof Int8Array && "function" != typeof m && (r.isFunction = function(a) {
        return "function" == typeof a || !1
    }
    );
    r.isFinite = function(a) {
        return !r.isSymbol(a) && isFinite(a) && !isNaN(parseFloat(a))
    }
    ;
    r.isNaN = function(a) {
        return r.isNumber(a) && isNaN(a)
    }
    ;
    r.isBoolean = function(a) {
        return !0 === a || !1 === a || "[object Boolean]" === h.call(a)
    }
    ;
    r.isNull = function(a) {
        return null === a
    }
    ;
    r.isUndefined = function(a) {
        return void 0 === a
    }
    ;
    r.has = function(a, b) {
        return null != a && k.call(a, b)
    }
    ;
    r.noConflict = function() {
        a._ = b;
        return this
    }
    ;
    r.identity = function(a) {
        return a
    }
    ;
    r.constant = function(a) {
        return function() {
            return a
        }
    }
    ;
    r.noop = function() {}
    ;
    r.property = C;
    r.propertyOf = function(a) {
        return null == a ? function() {}
        : function(b) {
            return a[b]
        }
    }
    ;
    r.matcher = r.matches = function(a) {
        a = r.extendOwn({}, a);
        return function(b) {
            return r.isMatch(b, a)
        }
    }
    ;
    r.times = function(a, b, c) {
        var d = Array(Math.max(0, a));
        b = u(b, c, 1);
        for (c = 0; c < a; c++)
            d[c] = b(c);
        return d
    }
    ;
    r.random = function(a, b) {
        null == b && (b = a,
        a = 0);
        return a + Math.floor(Math.random() * (b - a + 1))
    }
    ;
    r.now = Date.now || function() {
        return (new Date).getTime()
    }
    ;
    C = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    m = r.invert(C);
    B = function(a) {
        var b = function(b) {
            return a[b]
        }
          , c = "(?:" + r.keys(a).join("|") + ")"
          , d = RegExp(c)
          , e = RegExp(c, "g");
        return function(a) {
            a = null == a ? "" : "" + a;
            return d.test(a) ? a.replace(e, b) : a
        }
    }
    ;
    r.escape = B(C);
    r.unescape = B(m);
    r.result = function(a, b, c) {
        b = null == a ? void 0 : a[b];
        void 0 === b && (b = c);
        return r.isFunction(b) ? b.call(a) : b
    }
    ;
    var S = 0;
    r.uniqueId = function(a) {
        var b = ++S + "";
        return a ? a + b : b
    }
    ;
    r.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var Q = /(.)^/
      , T = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "": "u2028",
        "": "u2029"
    }
      , U = /\\|'|\r|\n|\u2028|\u2029/g
      , V = function(a) {
        return "\\" + T[a]
    };
    r.template = function(a, b, c) {
        !b && c && (b = c);
        b = r.defaults({}, b, r.templateSettings);
        c = RegExp([(b.escape || Q).source, (b.interpolate || Q).source, (b.evaluate || Q).source].join("|") + "|$", "g");
        var d = 0
          , e = "__p+='";
        a.replace(c, function(b, c, f, g, h) {
            e += a.slice(d, h).replace(U, V);
            d = h + b.length;
            c ? e += "'+\n((__t=(" + c + "))==null?'':_.escape(__t))+\n'" : f ? e += "'+\n((__t=(" + f + "))==null?'':__t)+\n'" : g && (e += "';\n" + g + "\n__p+='");
            return b
        });
        e += "';\n";
        b.variable || (e = "with(obj||{}){\n" + e + "}\n");
        var e = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + e + "return __p;\n", f;
        try {
            f = new Function(b.variable || "obj","_",e)
        } catch (g) {
            throw g.source = e,
            g;
        }
        c = function(a) {
            return f.call(this, a, r)
        }
        ;
        c.source = "function(" + (b.variable || "obj") + "){\n" + e + "}";
        return c
    }
    ;
    r.chain = function(a) {
        a = r(a);
        a._chain = !0;
        return a
    }
    ;
    var W = function(a, b) {
        return a._chain ? r(b).chain() : b
    };
    r.mixin = function(a) {
        r.each(r.functions(a), function(b) {
            var c = r[b] = a[b];
            r.prototype[b] = function() {
                var a = [this._wrapped];
                f.apply(a, arguments);
                return W(this, c.apply(r, a))
            }
        });
        return r
    }
    ;
    r.mixin(r);
    r.each("pop push reverse shift sort splice unshift".split(" "), function(a) {
        var b = c[a];
        r.prototype[a] = function() {
            var c = this._wrapped;
            b.apply(c, arguments);
            "shift" !== a && "splice" !== a || 0 !== c.length || delete c[0];
            return W(this, c)
        }
    });
    r.each(["concat", "join", "slice"], function(a) {
        var b = c[a];
        r.prototype[a] = function() {
            return W(this, b.apply(this._wrapped, arguments))
        }
    });
    r.prototype.value = function() {
        return this._wrapped
    }
    ;
    r.prototype.valueOf = r.prototype.toJSON = r.prototype.value;
    r.prototype.toString = function() {
        return String(this._wrapped)
    }
    ;
    "function" == typeof define && define.amd && define("underscore", [], function() {
        return r
    })
}
)();
var Algorithm = {
    scoreArray: [],
    chooseElement: function(a) {
        var b = a.id;
        if (5 >= b) {
            if (!a.isChoose && (this.fourDirectionAlgorithm(a),
            5 >= a.id && 1 < PieceMgr.chooseElements.length)) {
                var c = DataMgr.getScoreByNum(PieceMgr.chooseElements.length)
                  , c = {
                    score: c,
                    target: a,
                    num: PieceMgr.chooseElements.length
                };
                a.data = c
            }
        } else
            23 === b && 0 === Math.round(a.getRotation()) ? (this.scoreArray = [],
            !0 != isColorPuddingAndColorPudding && (this.verticalChoose(a.curGrid.col, a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c)) : 23 === b && 90 === Math.round(a.getRotation()) ? (this.scoreArray = [],
            !0 != isColorPuddingAndColorPudding && (this.horizontalChoose(a.curGrid.row, a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c)) : 10 === b ? (this.scoreArray = [],
            !0 != isColorPuddingAndColorPudding && (this.rangeChoose(a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c,
            !0 != isShowBombBomb && !0 != isShowBombStar && this.bombChoose(a))) : 11 === b ? (b = this.chooseSameColor(a),
            !b || 1 >= b.length ? a.disappearAction() : (EventMgr.emit(EVENTMGR_ID.FORBID_DROP),
            c = DataMgr.getScoreByNum(b.length),
            c = {
                score: c,
                target: a,
                num: b.length
            },
            a.data = c,
            a.killAction(b))) : 24 === b ? (this.scoreArray = [],
            this.verticalChoose(a.curGrid.col, a),
            this.horizontalChoose(a.curGrid.row, a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c) : 25 === b ? (this.scoreArray = [],
            this.getThreeVH(a.curGrid.row, a.curGrid.col, a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c) : 26 === b ? (PieceMgr.chooseElements = [],
            this.scoreArray = [],
            a.isChoose = !0,
            a.delayTime = 0,
            PieceMgr.chooseElements.push(a),
            this.scoreArray.push(a),
            this.bigRangeChoose(a),
            c = DataMgr.getScoreByNum(this.scoreArray.length),
            c = {
                score: c,
                target: a,
                num: this.scoreArray.length
            },
            a.data = c) : 28 === b ? (PieceMgr.chooseElements = [],
            this.allElementsChoose(a),
            c = DataMgr.getScoreByNum(PieceMgr.chooseElements.length),
            c = {
                score: c,
                target: a,
                num: PieceMgr.chooseElement.length
            },
            a.data = c) : 27 === b && (PieceMgr.chooseElements = [],
            b = this.chooseSameColor(a)) && (c = DataMgr.getScoreByNum(b.length),
            c = {
                score: c,
                target: a,
                num: b.length
            },
            a.data = c,
            a.killAction(b))
    },
    fourDirectionAlgorithm: function(a) {
        if (!a.isChoose) {
            PieceMgr.chooseElements.push(a);
            a.isChoose = !0;
            var b = a.curGrid.row;
            a = a.curGrid.col;
            var c = null;
            b < Global.maxRow - 1 && (c = PieceMgr.elements[b + 1][a],
            PieceMgr.isHaveElement(b + 1, a) && PieceMgr.isCanChoose(b + 1, a) && PieceMgr.isSameElement(PieceMgr.chooseElement, c[0]) && this.fourDirectionAlgorithm(c[0]));
            0 < b && (c = PieceMgr.elements[b - 1][a],
            PieceMgr.isHaveElement(b - 1, a) && PieceMgr.isCanChoose(b - 1, a) && PieceMgr.isSameElement(PieceMgr.chooseElement, c[0]) && this.fourDirectionAlgorithm(c[0]));
            0 < a && (c = PieceMgr.elements[b][a - 1],
            PieceMgr.isHaveElement(b, a - 1) && PieceMgr.isCanChoose(b, a - 1) && PieceMgr.isSameElement(PieceMgr.chooseElement, c[0]) && this.fourDirectionAlgorithm(c[0]));
            a < Global.maxCol - 1 && (c = PieceMgr.elements[b][a + 1],
            PieceMgr.isHaveElement(b, a + 1) && PieceMgr.isCanChoose(b, a + 1) && PieceMgr.isSameElement(PieceMgr.chooseElement, c[0]) && this.fourDirectionAlgorithm(c[0]))
        }
    },
    hiddenTipsIcon: function() {
        for (var a = 0; a < Global.maxRow; ++a)
            for (var b = 0; b < Global.maxCol; ++b)
                if (PieceMgr.isHaveElement(a, b)) {
                    var c = PieceMgr.elements[a][b];
                    5 >= c[0].id && c[0].changeTipIcon && c[0].changeTipIcon(!1, "fly")
                }
    },
    getTipsIconList: function() {
        for (var a = 0; a < Global.maxRow; ++a)
            for (var b = 0; b < Global.maxCol; ++b)
                if (PieceMgr.isHaveElement(a, b)) {
                    var c = PieceMgr.elements[a][b];
                    5 >= c[0].id && (c = this.getNormalElementReturnArr(c),
                    PieceMgr.tipIconList.push(c))
                }
        this.changeTipIcon()
    },
    changeTipIcon: function() {
        for (var a = 0; a < PieceMgr.tipIconList.length; a++) {
            var b = PieceMgr.tipIconList[a];
            if (5 > b.length)
                for (var c = 0; c < b.length; c++)
                    b[c].changeTipIcon && b[c].changeTipIcon(!1, "fly");
            else {
                var d = "fly";
                5 <= b.length && 6 >= b.length ? d = "fly" : 7 <= b.length && 8 >= b.length ? (d = "boom",
                1 >= gameUserData.lv && (d = "fly")) : (d = "color",
                1 >= gameUserData.lv && (d = "fly"),
                2 == gameUserData.lv && (d = "boom"));
                for (c = 0; c < b.length; c++)
                    b[c].changeTipIcon && b[c].changeTipIcon(!0, d)
            }
        }
    },
    resetTipsIconList: function() {
        PieceMgr.tipIconList = [];
        for (var a = 0; a < Global.maxRow; ++a)
            for (var b = 0; b < Global.maxCol; ++b)
                if (PieceMgr.isHaveElement(a, b)) {
                    var c = PieceMgr.elements[a][b];
                    5 >= c[0].id && (c[0].tipSelect = !1)
                }
    },
    getNormalElementReturnArr: function(a) {
        var b = [];
        this.getNormalElementByTipIconType(b, a);
        return b
    },
    getNormalElementByTipIconType: function(a, b) {
        if (!(null == b[0] || b[0].tipSelect || 1 < b.length && 19 === b[1].id)) {
            a.push(b[0]);
            b[0].tipSelect = !0;
            var c = b[0].curGrid.row
              , d = b[0].curGrid.col
              , e = null;
            c < Global.maxRow - 1 && (e = PieceMgr.elements[c + 1][d],
            PieceMgr.isHaveElement(c + 1, d) && PieceMgr.isSameElement(b[0], e[0]) && this.getNormalElementByTipIconType(a, e));
            0 < c && (e = PieceMgr.elements[c - 1][d],
            PieceMgr.isHaveElement(c - 1, d) && PieceMgr.isSameElement(b[0], e[0]) && this.getNormalElementByTipIconType(a, e));
            0 < d && (e = PieceMgr.elements[c][d - 1],
            PieceMgr.isHaveElement(c, d - 1) && PieceMgr.isSameElement(b[0], e[0]) && this.getNormalElementByTipIconType(a, e));
            d < Global.maxCol - 1 && (e = PieceMgr.elements[c][d + 1],
            PieceMgr.isHaveElement(c, d + 1) && PieceMgr.isSameElement(b[0], e[0]) && this.getNormalElementByTipIconType(a, e))
        }
    },
    tipsFourDirectionAlgorithm: function(a, b) {
        if (!a.isTips) {
            b.push(a);
            a.isTips = !0;
            var c = a.curGrid.row
              , d = a.curGrid.col
              , e = null;
            c < Global.maxRow - 1 && (e = PieceMgr.elements[c + 1][d],
            PieceMgr.isHaveElement(c + 1, d) && PieceMgr.isCanTips(c + 1, d) && PieceMgr.isSameElement(a, e[0]) && this.tipsFourDirectionAlgorithm(e[0], b));
            0 < c && (e = PieceMgr.elements[c - 1][d],
            PieceMgr.isHaveElement(c - 1, d) && PieceMgr.isCanTips(c - 1, d) && PieceMgr.isSameElement(a, e[0]) && this.tipsFourDirectionAlgorithm(e[0], b));
            0 < d && (e = PieceMgr.elements[c][d - 1],
            PieceMgr.isHaveElement(c, d - 1) && PieceMgr.isCanTips(c, d - 1) && PieceMgr.isSameElement(a, e[0]) && this.tipsFourDirectionAlgorithm(e[0], b));
            d < Global.maxCol - 1 && (e = PieceMgr.elements[c][d + 1],
            PieceMgr.isHaveElement(c, d + 1) && PieceMgr.isCanTips(c, d + 1) && PieceMgr.isSameElement(a, e[0]) && this.tipsFourDirectionAlgorithm(e[0], b))
        }
    },
    chooseSpecialElement: function(a) {
        if (!a.isChoose) {
            PieceMgr.chooseElements.push(a);
            a.isChoose = !0;
            var b = a.curGrid.row;
            a = a.curGrid.col;
            var c = null;
            b < Global.maxRow - 1 && (c = PieceMgr.elements[b + 1][a],
            PieceMgr.isHaveElement(b + 1, a) && PieceMgr.isCanChoose(b + 1, a) && PieceMgr.isSpecialElement(c[0].id) && this.chooseSpecialElement(c[0]));
            0 < b && (c = PieceMgr.elements[b - 1][a],
            PieceMgr.isHaveElement(b - 1, a) && PieceMgr.isCanChoose(b - 1, a) && PieceMgr.isSpecialElement(c[0].id) && this.chooseSpecialElement(c[0]));
            0 < a && (c = PieceMgr.elements[b][a - 1],
            PieceMgr.isHaveElement(b, a - 1) && PieceMgr.isCanChoose(b, a - 1) && PieceMgr.isSpecialElement(c[0].id) && this.chooseSpecialElement(c[0]));
            a < Global.maxCol - 1 && (c = PieceMgr.elements[b][a + 1],
            PieceMgr.isHaveElement(b, a + 1) && PieceMgr.isCanChoose(b, a + 1) && PieceMgr.isSpecialElement(c[0].id) && this.chooseSpecialElement(c[0]))
        }
    },
    verticalChoose: function(a, b) {
        for (var c = 0; c < Global.maxRow; ++c)
            this.selectElement(c, a, b)
    },
    horizontalChoose: function(a, b) {
        for (var c = 0; c < Global.maxCol; ++c)
            this.selectElement(a, c, b)
    },
    rangeChoose: function(a) {
        for (var b = a.curGrid.row, c = a.curGrid.col, d = b - 1; d <= b + 1; d += 1)
            for (var e = c - 1; e <= c + 1; e += 1)
                0 > d || d > Global.maxRow - 1 || 0 > e || e > Global.maxCol - 1 || this.selectElement(d, e, a)
    },
    bombChoose: function(a) {
        if (!0 != currentScene.gameLogicLayer.isGameWin) {
            var b = a.curGrid.row;
            a = a.curGrid.col;
            for (var c = b - 2; c <= b + 2; c += 1)
                for (var d = a - 2; d <= a + 2; d += 1)
                    if (!(0 > c || c > Global.maxRow - 1 || 0 > d || d > Global.maxCol - 1 || b == c && a == d)) {
                        var e = PieceMgr.elements[c][d];
                        if (!1 != PieceMgr.isHaveElement(c, d)) {
                            var f = d - a
                              , g = c - b
                              , h = e[0].x
                              , k = e[0].y
                              , m = null
                              , p = null
                              , s = null
                              , t = null
                              , r = null
                              , u = 0
                              , u = 0.72;
                            0 == f && (2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h, k + 22)),
                            p = cc.moveTo(0.2, cc.p(h, k - 5.4)),
                            s = cc.moveTo(0.2, cc.p(h, k + 4)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h, k - 22)),
                            p = cc.moveTo(0.2, cc.p(h, k + 5.4)),
                            s = cc.moveTo(0.2, cc.p(h, k - 4)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0));
                            1 == f && (2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 2.6, k + 6.5)),
                            p = cc.moveTo(0.2, cc.p(h, k - 4)),
                            s = cc.moveTo(0.2, cc.p(h, k + 3)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 2.6, k - 6.5)),
                            p = cc.moveTo(0.2, cc.p(h, k + 4)),
                            s = cc.moveTo(0.2, cc.p(h, k - 3)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0));
                            2 == f && (0 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 22, k)),
                            p = cc.moveTo(0.2, cc.p(h - 5.4, k)),
                            s = cc.moveTo(0.2, cc.p(h + 4, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            1 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 11.6, k + 1.3)),
                            p = cc.moveTo(0.2, cc.p(h - 2.7, k)),
                            s = cc.moveTo(0.2, cc.p(h + 2.7, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -1 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 11.6, k - 1.3)),
                            p = cc.moveTo(0.2, cc.p(h - 2.7, k)),
                            s = cc.moveTo(0.2, cc.p(h + 2.7, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 3.9, k + 1.3)),
                            p = cc.moveTo(0.2, cc.p(h - 2.8, k - 1.3)),
                            s = cc.moveTo(0.2, cc.p(h, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h + 3.9, k - 1.3)),
                            p = cc.moveTo(0.2, cc.p(h - 2.8, k + 1.3)),
                            s = cc.moveTo(0.2, cc.p(h, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0));
                            -1 == f && (2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 2.6, k + 6.5)),
                            p = cc.moveTo(0.2, cc.p(h, k - 4)),
                            s = cc.moveTo(0.2, cc.p(h, k + 3)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 2.6, k - 6.5)),
                            p = cc.moveTo(0.2, cc.p(h, k + 4)),
                            s = cc.moveTo(0.2, cc.p(h, k - 3)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0));
                            -2 == f && (0 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 22, k)),
                            p = cc.moveTo(0.2, cc.p(h + 5.4, k)),
                            s = cc.moveTo(0.2, cc.p(h - 4, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            1 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 11.6, k + 1.3)),
                            p = cc.moveTo(0.2, cc.p(h + 2.7, k)),
                            s = cc.moveTo(0.2, cc.p(h - 2.7, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -1 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 11.6, k - 1.3)),
                            p = cc.moveTo(0.2, cc.p(h + 2.7, k)),
                            s = cc.moveTo(0.2, cc.p(h - 2.7, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 3.9, k + 1.3)),
                            p = cc.moveTo(0.2, cc.p(h + 2.8, k - 1.3)),
                            s = cc.moveTo(0.2, cc.p(h, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0),
                            -2 === g && !1 == e[0].bombeffect && (r = cc.delayTime(u),
                            m = cc.moveTo(0.12, cc.p(h - 3.9, k - 1.3)),
                            p = cc.moveTo(0.2, cc.p(h + 2.8, k + 1.3)),
                            s = cc.moveTo(0.2, cc.p(h, k)),
                            t = cc.moveTo(0.2, cc.p(h, k)),
                            e[0].runAction(cc.sequence(r, m, p, s, t, cc.callFunc(function() {
                                e[0].bombeffect = !1
                            }))),
                            e[0].bombeffect = !0))
                        }
                    }
        }
    },
    chooseSameColor: function(a) {
        if (!a.isChoose) {
            var b = [];
            b.push(a);
            a.isChoose = !0;
            a = PieceMgr.getNormalElements();
            if (1 > a.length)
                return null;
            a = this.getNormalID(a);
            for (var c = 0; c < PieceMgr.elements.length; ++c)
                for (var d = 0; d < PieceMgr.elements[0].length; ++d) {
                    var e = PieceMgr.elements[c][d];
                    PieceMgr.isHaveElement(c, d) && !e[0].isChoose && e[0].state === ELEMENT_STATE.STATIC && (1 === e.length && e[0].id === a || 1 < e.length && e[0].id === a && 17 === e[1].id) && (e[0].isChoose = !0,
                    b.push(e[0]))
                }
            return b
        }
    },
    getNormalID: function(a) {
        for (var b = Utils.getRandomNum(5), c = 0; c < a.length; ++c)
            if (b === a[c].id)
                return b;
        return a[0].id
    },
    selectElement: function(a, b, c) {
        var d = PieceMgr.elements[a][b];
        if (PieceMgr.isHaveElement(a, b) && PieceMgr.isCanKill(a, b))
            if (1 < d.length && 17 !== d[1].id && !d[1].isChoose)
                d[1].isChoose = !0,
                d[1].delayTime = this.getDelayTime(c, d[1]),
                PieceMgr.chooseElements.push(d[1]),
                this.scoreArray.push(d[1]),
                d[1].beKillElement = c;
            else if (1 < d.length && 17 === d[1].id && d[0].isCanBeKill() && !d[0].isChoose && 11 !== d[0].id)
                PieceMgr.chooseElements.push(d[0]),
                this.scoreArray.push(d[0]),
                d[0].delayTime = this.getDelayTime(c, d[0]),
                d[0].isChoose = !0,
                d[0].beKillElement = c;
            else if (d[0].isCanBeKill() && (!d[0].isChoose || 12 === d[0].id && 1 <= d[0].hp) && (11 !== d[0].id && (PieceMgr.chooseElements.push(d[0]),
            this.scoreArray.push(d[0]),
            d[0].beKillElement = c,
            d[0].delayTime = this.getDelayTime(c, d[0]),
            d[0].isChoose = !0),
            d[0].curGrid.row !== c.curGrid.row || d[0].curGrid.col !== c.curGrid.col))
                if (11 === d[0].id && (d[0].delayTime = this.getDelayTime(c, d[0])),
                23 === d[0].id && 23 === c.id && Math.round(d[0].getRotation()) === Math.round(c.getRotation())) {
                    if (d[0].curGrid.row !== c.curGrid.row || d[0].curGrid.col !== c.curGrid.col)
                        d[0].isLost = !0
                } else
                    this.chooseElement(d[0])
    },
    getDelayTime: function(a, b) {
        if (!a || !b)
            return 0;
        46 === b.id && cc.log("1111");
        var c = 0;
        if (10 === a.id && 10 !== b.id) {
            if (c = a.delayTime + 0.8,
            18 == b.id || 45 == b.id)
                c = a.delayTime + 0.1
        } else if (23 === a.id)
            c = a.delayTime + Math.abs(cc.pDistance(a.getPosition(), b.getPosition())) / Global.flySpeed + 0.2,
            10 == b.id && (c = Math.abs(cc.pDistance(a.getPosition(), b.getPosition())) / Global.flySpeed + 1.1),
            19 == b.id && (c = Math.abs(cc.pDistance(a.getPosition(), b.getPosition())) / Global.flySpeed + 0.2),
            1 == a.autoKill && (c = 0.2);
        else if (24 === a.id)
            c = a.delayTime + 0.1;
        else if (28 === a.id)
            c = Math.abs(cc.pDistance(a.getPosition(), b.getPosition())) / 1E3;
        else if (25 === a.id)
            1 >= Math.abs(b.curGrid.col - a.curGrid.col) ? c = a.delayTime + Math.abs(a.getPositionY() - b.getPositionY()) / Global.flySpeed : (c = Math.max((1380 - a.y) / Global.flySpeed, (a.y + 200) / Global.flySpeed),
            c = a.delayTime + Math.abs(a.getPositionX() - b.getPositionX()) / Global.flySpeed + c);
        else if (0 < a.delayTime)
            return a.delayTime;
        return c
    },
    getAroundElement: function(a, b, c) {
        !PieceMgr.isHaveElement(a - 1, b) || PieceMgr.isAlreadyBeChoose(a - 1, b) || this.isAlreadyInArray(a - 1, b, c) || c.push(PieceMgr.elements[a - 1][b]);
        !PieceMgr.isHaveElement(a, b - 1) || PieceMgr.isAlreadyBeChoose(a, b - 1) || this.isAlreadyInArray(a, b - 1, c) || c.push(PieceMgr.elements[a][b - 1]);
        !PieceMgr.isHaveElement(a, b + 1) || PieceMgr.isAlreadyBeChoose(a, b + 1) || this.isAlreadyInArray(a, b + 1, c) || c.push(PieceMgr.elements[a][b + 1]);
        !PieceMgr.isHaveElement(a + 1, b) || PieceMgr.isAlreadyBeChoose(a + 1, b) || this.isAlreadyInArray(a + 1, b, c) || c.push(PieceMgr.elements[a + 1][b]);
        return c
    },
    getThreeVH: function(a, b, c) {
        for (var d = a - 1; d <= a + 1; ++d)
            0 <= d && d <= Global.maxRow - 1 && this.horizontalChoose(d, c);
        for (a = b - 1; a <= b + 1; ++a)
            0 <= a && a <= Global.maxCol - 1 && this.verticalChoose(a, c)
    },
    bigRangeChoose: function(a) {
        for (var b = a.curGrid.row, c = a.curGrid.col, d = b - 2; d <= b + 2; d += 1)
            for (var e = c - 2; e <= c + 2; e += 1)
                0 > d || d > Global.maxRow - 1 || 0 > e || e > Global.maxCol - 1 || this.selectElement(d, e, a)
    },
    allElementsChoose: function(a) {
        for (var b = 0; b < PieceMgr.elements.length; ++b)
            for (var c = 0; c < PieceMgr.elements[0].length; ++c)
                this.selectElement(b, c, a)
    },
    allElementsAutoEmit: function() {
        for (var a = PieceMgr.elements.length - 1; 0 <= a; --a)
            for (var b = PieceMgr.elements[0].length - 1; 0 <= b; --b) {
                var c = PieceMgr.elements[a][b];
                c[0].autoKill && !c[0].isChoose && (EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !1),
                PieceMgr.chooseElements = [],
                Algorithm.chooseElement(c[0]),
                PieceMgr.chooseElement = c[0],
                this.killChooseElements(PieceMgr.chooseElements))
            }
        EventMgr.emit(EVENTMGR_ID.ITEM_KILL);
        EventMgr.emit(EVENTMGR_ID.CAN_TOUCH, !0)
    },
    killChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 >= a[b].hp && a[b].disappearAction();
            PieceMgr.killElement(c, d)
        }
    },
    isAlreadyInArray: function(a, b, c) {
        for (var d = 0; d < c.length; ++d)
            if (a === c[d][0].curGrid.row && b === c[d][0].curGrid.col)
                return !0;
        return !1
    }
};
var ParseUIJson = {
    parseJsonToUI: function(a) {
        var b = cc.loader.getRes(a);
        cc.log("加载的json：" + a);
        a = this.parseRootNode(b);
        return this.parseNodeToUI(b.Content.Content.ObjectData, a)
    },
    parseRootNode: function(a) {
        switch (a.Type) {
        case "Node":
            return this.parseNode();
        case "Layer":
            return this.parseLayer();
        default:
            cc.log("is out of root node !!!!")
        }
    },
    parseLayer: function() {
        return new cc.Layer
    },
    parseNode: function(a) {
        var b = new cc.Node;
        if (!a)
            return b;
        b.attr({
            x: a.Position.X,
            y: a.Position.Y,
            tag: a.Tag,
            anchorX: a.AnchorPoint.ScaleX || 0,
            anchorY: a.AnchorPoint.ScaleY || 0,
            scaleX: a.Scale.ScaleX,
            scaleY: a.Scale.ScaleY,
            visible: !1 === a.VisibleForFrame ? !1 : !0
        });
        return b
    },
    parseNodeToUI: function(a, b) {
        var c = a.Children;
        b || (b = this.parseNode(a));
        if (!c)
            return b;
        this.parseChildren(b, c);
        return b
    },
    parseNodeToUIByData: function(a, b) {
        if (!b)
            return this.parseNode(a)
    },
    parseChildren: function(a, b) {
        for (var c = 0; c < b.length; ++c) {
            var d = this.parseData(b[c]);
            d && !a[b[c].Name] && (a[b[c].Name] = d,
            a.addChild(d));
            b[c].Children && this.parseChildren(d, b[c].Children)
        }
    },
    parseData: function(a) {
        var b = null;
        switch (a.ctype) {
        case "SpriteObjectData":
            b = this.parseSprite(a);
            break;
        case "TextBMFontObjectData":
            b = this.parseFontBMP(a);
            break;
        case "SingleNodeObjectData":
            b = this.parseNodeToUIByData(a);
            break;
        case "TextObjectData":
            b = this.parseLabel(a);
            break;
        case "LoadingBarObjectData":
            b = this.parseLoadingBar(a);
            break;
        case "ImageViewObjectData":
            b = this.parseImageView(a);
            break;
        default:
            cc.log("out of id ~~~~~" + a.ctype)
        }
        return b
    },
    parseImageView: function(a) {
        var b = new ccui.ImageView(a.FileData.Path,ccui.Widget.PLIST_TEXTURE);
        b.setScale9Enabled(a.Scale9Enable);
        b.setContentSize(cc.size(a.Size.X, a.Size.Y));
        b.setAnchorPoint(cc.p(a.AnchorPoint.ScaleX, a.AnchorPoint.ScaleY));
        b.x = a.Position.X;
        b.y = a.Position.Y;
        b.setScaleX(a.Scale.ScaleX);
        b.setScaleY(a.Scale.ScaleY);
        b.setContentSize(cc.size(a.Size.X, a.Size.Y));
        b.setName(a.Name);
        return b
    },
    parseLoadingBar: function(a) {
        var b = new ccui.LoadingBar("res/" + a.ImageFileData.Path,a.ProgressInfo);
        b.attr({
            x: a.Position.X,
            y: a.Position.Y,
            tag: a.Tag,
            anchorX: a.AnchorPoint.ScaleX || 0,
            anchorY: a.AnchorPoint.ScaleY || 0,
            scaleX: a.Scale.ScaleX,
            scaleY: a.Scale.ScaleY,
            visible: !1 === a.VisibleForFrame ? !1 : !0
        });
        b.setName(a.Name);
        return b
    },
    parseLabel: function(a) {
        var b = null;
        if (0 > a.Name.indexOf("aw"))
            b = new cc.LabelTTF(a.LabelText),
            b.attr({
                x: a.Position.X,
                y: a.Position.Y,
                tag: a.Tag,
                anchorX: a.AnchorPoint.ScaleX || 0,
                anchorY: a.AnchorPoint.ScaleY || 0,
                scaleX: a.Scale.ScaleX,
                scaleY: a.Scale.ScaleY,
                visible: !1 === a.VisibleForFrame ? !1 : !0,
                color: cc.color(a.CColor.R || 255, a.CColor.G || 255, a.CColor.B || 255, a.Alpha || 255)
            }),
            b.setName(a.Name),
            b.setFontSize(a.FontSize),
            a.HorizontalAlignmentType && "HT_Center" === a.HorizontalAlignmentType && b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER),
            a.VerticalAlignmentType && "VT_Center" === a.VerticalAlignmentType && b.setVerticalAlignment(cc.VERTICAL_TEXT_ALIGNMENT_CENTER),
            a.IsCustomSize && b.setDimensions(cc.size(a.Size.X, a.Size.Y)),
            a.FontResource && "Normal" === a.FontResource.Type && b.setFontName("jellyboom_font");
        else {
            b = a.Name.split("_");
            b = new GameArtWord(b[1]);
            switch (a.HorizontalAlignmentType) {
            case "HT_Center":
                b.alignmentType = artWordMiddle;
                break;
            case "HT_Left":
                b.alignmentType = artWordLeft;
                break;
            case "HT_Right":
                b.alignmentType = artWordRight
            }
            b.x = a.Position.X;
            b.y = a.Position.Y;
            b.visible = !1 === a.VisibleForFrame ? !1 : !0;
            a.Scale.ScaleX && b.setScaleX(a.Scale.ScaleX);
            a.Scale.ScaleY && b.setScaleY(a.Scale.ScaleY);
            a.RotationSkewX && b.setRotationX(a.RotationSkewX);
            a.RotationSkewY && b.setRotationY(a.RotationSkewY);
            a.FlipX && b.setFlippedX(a.FlipX);
            a.FlipY && b.setFlippedY(a.FlipY)
        }
        return b
    },
    parseSprite: function(a) {
        var b = null
          , b = "Normal" === a.FileData.Type ? new cc.Sprite("res/" + a.FileData.Path) : new cc.Sprite("#" + a.FileData.Path);
        b.attr({
            x: a.Position.X || 0,
            y: a.Position.Y || 0,
            tag: a.Tag,
            anchorX: a.AnchorPoint.ScaleX || 0,
            anchorY: a.AnchorPoint.ScaleY || 0,
            scaleX: a.Scale.ScaleX,
            scaleY: a.Scale.ScaleY,
            visible: !1 === a.VisibleForFrame ? !1 : !0
        });
        a.RotationSkewX && b.setRotationX(a.RotationSkewX);
        a.RotationSkewY && b.setRotationY(a.RotationSkewY);
        a.FlipX && b.setFlippedX(a.FlipX);
        a.FlipY && b.setFlippedY(a.FlipY);
        b.setName(a.Name);
        return b
    },
    parseFontBMP: function(a) {
        var b = new cc.LabelBMFont(a.LabelText,"res/" + a.LabelBMFontFile_CNB.Path);
        b.attr({
            x: a.Position.X,
            y: a.Position.Y,
            tag: a.Tag,
            anchorX: a.AnchorPoint.ScaleX || 0,
            anchorY: a.AnchorPoint.ScaleY,
            scaleX: a.Scale.ScaleX,
            scaleY: a.Scale.ScaleY,
            visible: !1 === a.VisibleForFrame ? !1 : !0
        });
        b.setName(a.Name);
        a.RotationSkewX && b.setRotationX(a.RotationSkewX);
        a.RotationSkewY && b.setRotationY(a.RotationSkewY);
        return b
    }
};
var PieceMgr = {
    elements: [],
    chooseElements: [],
    chooseElement: null,
    lvData: null,
    nextGrid: {},
    isIceBeKill: !1,
    monsters: [],
    isHaveMergeElement: !1,
    killNum: 0,
    costNum: 0,
    changeElements: [],
    autoKillNum: 0,
    soundNum: 0,
    curSpecialElement: 0,
    bossCurHp: null,
    bossMaxHp: null,
    obtainTargetCount: null,
    tipIconList: null,
    initElements: function() {
        for (var a = 0; a < Global.maxRow; ++a) {
            this.elements[a] = [];
            for (var b = 0; b < Global.maxCol; ++b)
                this.elements[a][b] = [],
                this.elements[a][b][0] = "0"
        }
        this.nextGrid = {
            r: -1,
            c: -1
        };
        this.isIceBeKill = !1;
        this.monsters = [];
        this.isHaveMergeElement = !1;
        this.obtainTargetCount = this.soundNum = this.autoKillNum = 0;
        this.tipIconList = []
    },
    isCanChoose: function(a, b) {
        var c = this.elements[a][b];
        if (c && "0" !== c[0] && -1 !== c[0]) {
            for (var d = c.length - 1; 0 <= d; --d)
                if (!c[d].isCanBeChoose() || c[d].isChoose || c[d].state === ELEMENT_STATE.MOVE)
                    return !1;
            return !0
        }
    },
    isCanTips: function(a, b) {
        var c = this.elements[a][b];
        if (c && "0" !== c[0] && -1 !== c[0]) {
            for (var d = c.length - 1; 0 <= d; --d)
                if (!c[d].isCanBeChoose() || c[d].isChoose)
                    return !1;
            return !0
        }
    },
    isAlreadyBeChoose: function(a, b) {
        var c = this.elements[a][b];
        if (!c || "0" === c[0] || -1 === c[0])
            return !0;
        for (var d = c.length - 1; 0 <= d; --d)
            if (c[d].isChoose || c[d].state === ELEMENT_STATE.MOVE)
                return !0;
        return !1
    },
    isCanKill: function(a, b) {
        var c = this.elements[a][b];
        if (!c || "0" === c[0] || -1 === c[0])
            return !1;
        for (var d = c.length - 1; 0 <= d; --d)
            if (c[d].isCanBeKill() && (!c[d].isChoose || 12 === c[d].id && 1 <= c[d].hp) && c[d].state === ELEMENT_STATE.STATIC)
                return !0;
        return !1
    },
    isCanBeItemKill: function(a, b) {
        var c = this.elements[a][b];
        return 1 < c.length && 17 === c[1].id && c[0].isCanBeKill() || 5 >= c[0].id || 12 === c[0].id || 18 === c[0].id || 20 === c[0].id || 21 === c[0].id || 45 === c[0].id || 46 === c[0].id ? !0 : !1
    },
    isCanKillByItem: function(a, b) {
        return this.elements[a][b][0].isCanBeItemKill ? !0 : !1
    },
    isIce: function(a, b) {
        return this.isHaveElement(a, b) && 1 < this.elements[a][b].length && (19 === this.elements[a][b][1].id || 20 === this.elements[a][b][1].id || 21 === this.elements[a][b][1].id) ? !0 : !1
    },
    isCanTouch: function(a, b) {
        if (null == this.elements[a][b] || this.elements[a][b][0].isChoose)
            return !1;
        var c = this.elements[a][b];
        if (!c || "0" === c[0] || -1 === c[0])
            return !1;
        for (var d = c.length - 1; 0 <= d; --d)
            if (!c[d].isCanBeTouch())
                return !1;
        return !0
    },
    isCanDown: function(a, b) {
        if (a >= Global.maxRow)
            return !1;
        var c = this.elements[a][b];
        if (!c || "0" === c[0] || -1 === c[0])
            return !1;
        if (1 < c.length && 17 === c[1].id && c[0].isCanMove)
            return !0;
        for (var d = c.length - 1; 0 <= d; --d)
            if (!c[d].isCanMove)
                return !1;
        return !0
    },
    isSameElement: function(a, b) {
        return null == a || null == b ? !1 : a.id === b.id ? !0 : !1
    },
    isHaveElement: function(a, b) {
        return this.elements[a] && this.elements[a][b] && "0" !== this.elements[a][b][0] && -1 !== this.elements[a][b][0] ? !0 : !1
    },
    isObstacleElement: function(a, b) {
        return this.isHaveElement(a, b) && (!this.elements[a][b][0].isCanMove || 13 === this.elements[a][b][0].id && this.elements[a][b][0].state === ELEMENT_STATE.STATIC) ? !0 : !1
    },
    isNullGrid: function(a, b) {
        return a < Global.maxRow && 0 <= a && 0 <= b && b < Global.maxCol && "0" === this.elements[a][b][0] ? !0 : !1
    },
    isCanDropDown: function(a, b) {
        return this.elements[a] && this.elements[a][b] && -1 === this.elements[a][b][0] ? !0 : !1
    },
    createNewElement: function(a, b, c, d) {
        c || (c = DataMgr.getNewElementData());
        return this.createNewElementByData(c, a, b, d)
    },
    createNewElementByData: function(a, b, c, d) {
        d = d || !1;
        var e = [];
        a = Utils.strToNumber(a, "+");
        for (var f = 0; f < a.length; ++f) {
            var g = createElementByID(a[f]);
            g.setCurGridPos(b, c);
            g.attr({
                x: g.curPos.x,
                y: g.curPos.y
            });
            e.push(g);
            EventMgr.emit(EVENTMGR_ID.NEW_ELEMENT, g);
            b < Global.maxRow && (PieceMgr.elements[b][c][f] = g);
            g.isCanMove && !d && this.checkElementDrop(g)
        }
        return e
    },
    killChooseElements: function(a) {
        if (0 !== a.length)
            if (1 === a.length && 5 >= a[0].id)
                a[0].isChoose = !1;
            else {
                var b = this.isMergeSpecialElement(a.length);
                b && this.findMostFarFromTouch(a);
                this.isIceBeKill = !1;
                for (var c = 0; c < a.length; ++c) {
                    var d = a[c].curGrid.row
                      , e = a[c].curGrid.col;
                    1 >= a[c].hp && a[c].disappearAction(c, a.length, b);
                    this.killElement(d, e);
                    if (20 === a[c].id || 21 === a[c].id)
                        this.isIceBeKill = !0
                }
                this.chooseElement && 9 >= this.chooseElement.id && this.killAroundElement(a);
                this.isIceBeKill || this.infectAroundElement();
                5 >= this.chooseElement.id && this.createSpecialElement(a.length)
            }
    },
    isMergeSpecialElement: function(a) {
        return 5 <= a && 5 >= PieceMgr.chooseElement.id ? !0 : !1
    },
    findMostFarFromTouch: function(a) {
        for (var b = 0, c = 0, d = 0; d < a.length; ++d) {
            var e = Math.abs(a[d].curGrid.row - PieceMgr.chooseElement.curGrid.row) + Math.abs(a[d].curGrid.col - PieceMgr.chooseElement.curGrid.col);
            b < e && (c = d,
            b = e)
        }
        a[c].isMostFar = !0
    },
    createSpecialElement: function(a) {
        var b = PieceMgr.chooseElement.curGrid;
        1 >= gameUserData.lv ? (a = this.createNewElement(b.row, b.col, "23"),
        1 === this.lvData.step % 2 && a[0].setRotation(90),
        a[0].setVisible(!1),
        a[0].isCanMove = !1) : 2 == gameUserData.lv ? 5 === a || 6 === a ? (a = this.createNewElement(b.row, b.col, "23"),
        1 === this.lvData.step % 2 && a[0].setRotation(90),
        a[0].setVisible(!1),
        a[0].isCanMove = !1) : 7 <= a && (a = this.createNewElement(b.row, b.col, "10"),
        a[0].setVisible(!1),
        a[0].isCanMove = !1) : 5 === a || 6 === a ? (a = this.createNewElement(b.row, b.col, "23"),
        1 === this.lvData.step % 2 && a[0].setRotation(90),
        a[0].setVisible(!1),
        a[0].isCanMove = !1) : 7 === a || 8 === a ? (a = this.createNewElement(b.row, b.col, "10"),
        a[0].setVisible(!1),
        a[0].isCanMove = !1) : 8 < a && (a = this.createNewElement(b.row, b.col, "11"),
        a[0].setVisible(!1),
        a[0].isCanMove = !1)
    },
    killElement: function(a, b) {
        var c = null;
        null != PieceMgr.elements[a] && (c = PieceMgr.elements[a][b]);
        null == c ? cc.log("逻辑错误:" + a + "|" + b) : 1 < c.length && 17 !== c[1].id ? c.splice(1, 1) : 1 < c.length && null != c[1] && 17 === c[1].id ? (5 >= c[0].id && (c[1].delayTime = c[0].delayTime,
        c[1].disappearAction(),
        c.splice(1, 1)),
        1 >= c[0].hp || -1 !== c[0] && c[0].disappearAction()) : 1 === c.length && 12 === c[0].id && 1 < c[0].hp && c[0].disappearAction()
    },
    getAllAroundElements: function(a) {
        for (var b = [], c = 0; c < a.length; ++c)
            Algorithm.getAroundElement(a[c].curGrid.row, a[c].curGrid.col, b);
        return b
    },
    killAroundElement: function(a) {
        a = this.getAllAroundElements(a);
        for (var b = 0; b < a.length; ++b)
            20 !== a[b][0].id && 21 !== a[b][0].id || a[b][0].isChoose ? 1 < a[b].length && 19 === a[b][1].id && a[b][0].id === PieceMgr.chooseElement.id && !a[b][1].isChoose ? (a[b][1].disappearAction(),
            a[b][1].isChoose = !0,
            a[b].splice(1, 1)) : 45 !== a[b][0].id && 18 !== a[b][0].id && 46 !== a[b][0].id || a[b][0].isChoose ? 12 !== a[b][0].id || a[b][0].isChoose ? 1 === a[b].length && 22 === a[b][0].id && a[b][0].disappearAction() : (1 < a[b][0].hp && (a[b][0].isChoose = !1),
            a[b][0].disappearAction()) : (a[b][0].disappearAction(),
            46 !== a[b][0].id && (a[b][0].isChoose = !0)) : (a[b][0].disappearAction(),
            this.isIceBeKill = a[b][0].isChoose = !0)
    },
    itemKillChooseElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 === PieceMgr.elements[c][d].length && (PieceMgr.elements[c][d][0] = -1,
            a[b].disappearAction())
        }
    },
    getNextGrid: function(a, b) {
        if (PieceMgr.isHaveElement(a, b) && 13 === PieceMgr.elements[a][b][0].id && this.isCanDropDown(a + 1, b))
            for (var c = a + 1; c < Global.maxRow; ++c) {
                if (this.isHaveElement(c, b) || "0" === PieceMgr.elements[c][b][0])
                    return this.nextGrid.r = c - 1,
                    this.nextGrid.c = b,
                    this.nextGrid;
                if (c >= Global.maxRow - 1)
                    return this.nextGrid.r = c,
                    this.nextGrid.c = b,
                    this.nextGrid
            }
        else if (PieceMgr.isHaveElement(a, b) && 13 === PieceMgr.elements[a][b][0].id)
            return null;
        return this.isCanDropDown(a - 1, b) ? (this.nextGrid.r = a - 1,
        this.nextGrid.c = b,
        this.nextGrid) : null
    },
    checkElementDrop: function(a) {
        var b = a.curGrid.row
          , c = a.curGrid.col;
        if (a.state === ELEMENT_STATE.MOVE || !this.getNextGrid(b, c))
            return !1;
        b < Global.maxRow && (PieceMgr.elements[b][c][0] = -1);
        PieceMgr.elements[this.nextGrid.r][this.nextGrid.c][0] = a;
        a.setNextGridPos(this.nextGrid.r, this.nextGrid.c);
        a.setElementMoveState();
        return !0
    },
    infectAroundElement: function() {
        for (var a = 0; a < PieceMgr.elements.length; ++a)
            for (var b = 0; b < PieceMgr.elements[0].length; ++b) {
                var c = PieceMgr.elements[a][b];
                if (null != c && (20 === c[0].id || 21 === c[0].id) && (c = Algorithm.getAroundElement(a, b, []),
                this.infectElement(c)))
                    return
            }
    },
    createIceElement: function(a, b) {
        var c = createElementByID(21);
        c.setCurGridPos(a, b);
        c.attr({
            x: c.curPos.x,
            y: c.curPos.y
        });
        PieceMgr.elements[a][b].push(c);
        EventMgr.emit(EVENTMGR_ID.NEW_ELEMENT, c)
    },
    infectElement: function(a) {
        for (var b = 0; b < a.length; ++b)
            if (!(1 < a[b].length) && a[b][0].state === ELEMENT_STATE.STATIC && 5 >= a[b][0].id && !a[b][0].isChoose)
                return this.turnToOtherElement(a[b][0], 21),
                !0;
        return !1
    },
    turnToOtherElement: function(a, b, c) {
        var d = a.curGrid.row
          , e = a.curGrid.col;
        a.removeFromParent();
        return this.createNewElement(d, e, "" + b, c)
    },
    isSpecialElement: function(a) {
        return 10 === a || 11 === a || 23 === a ? !0 : !1
    },
    triggerMergeElement: function(a) {
        PieceMgr.chooseElement.isChoose = !1;
        PieceMgr.chooseElements = [];
        Algorithm.chooseElement(a);
        PieceMgr.killChooseElements(PieceMgr.chooseElements)
    },
    killSpecialElements: function(a) {
        for (var b = 0; b < a.length; ++b) {
            var c = a[b].curGrid.row
              , d = a[b].curGrid.col;
            1 >= a[b].hp && a[b].disappearAction(b, a.length, 1);
            this.killElement(c, d)
        }
        this.mergeSpecialElements(a)
    },
    mergeSpecialElements: function(a) {
        a = a.sort(function(a, b) {
            return a.weightValue - b.weightValue
        });
        var b = parseInt(10 * a[a.length - 1].weightValue) + parseInt(a[a.length - 2].weightValue)
          , c = this.specialElement(b);
        25 === c && (this.curSpecialElement = 1);
        var d = this.createNewElement(PieceMgr.chooseElement.curGrid.row, PieceMgr.chooseElement.curGrid.col, "" + c);
        27 === c && (isflyBomeStar = a[a.length - 1].id + a[a.length - 2].id);
        31 === b && (d[0].specialID = 23);
        PieceMgr.chooseElement = d[0]
    },
    specialElement: function(a) {
        var b = 25;
        switch (a) {
        case 11:
            b = 24;
            break;
        case 21:
            b = 25;
            break;
        case 22:
            b = 26;
            break;
        case 31:
            b = 27;
            break;
        case 32:
            b = 27;
            break;
        case 33:
            b = 28
        }
        return b
    },
    checkDeath: function() {
        for (var a = 0; a < Global.maxRow; ++a)
            for (var b = 0; b < Global.maxCol; ++b) {
                var c = this.elements[a][b];
                if (0 < c[0].weightValue)
                    return !1;
                if (!(5 < c[0].id || 1 < c.length && 17 !== c[1].id)) {
                    var d = Algorithm.getAroundElement(a, b, []);
                    if (this.isSameElementAround(c[0], d))
                        return !1
                }
            }
        return !0
    },
    isSameElementAround: function(a, b) {
        for (var c = 0; c < b.length; ++c)
            if (this.isSameElement(a, b[c][0]) && (2 === b[c].length && 17 === b[c][1].id || 1 >= b[c].length))
                return !0;
        return !1
    },
    refreshData: function() {
        var a = this.getChangeData();
        this.resetData(a)
    },
    getChangeData: function() {
        for (var a = [], b = [], c = 0; c < Global.maxRow; ++c)
            for (var d = 0; d < Global.maxCol; ++d) {
                var e = this.elements[c][d];
                5 >= e[0].id && !(1 < e.length && 19 === e[1].id) && (a.push(e[0]),
                b.push(e[0].curGrid),
                this.elements[c][d][0] = -1)
            }
        return {
            array: a,
            grid: b
        }
    },
    resetData: function(a) {
        for (var b = 0; b < a.grid.length; ++b) {
            var c = a.grid[b];
            if (1 > a.array.length)
                break;
            if (c && 1 <= a.array.length) {
                var d = this.getRandomElement(a.array);
                PieceMgr.elements[c.row][c.col][0] = d;
                d.nextGrid.row = c.row;
                d.nextGrid.col = c.col;
                d.nextPos = DataMgr.getPosByGrid(c.row, c.col);
                d.isReset = !0;
                d.state = ELEMENT_STATE.MOVE;
                d.resetElement()
            }
        }
    },
    getRandomElement: function(a) {
        var b = Utils.getRandomNum(a.length) - 1
          , c = a[b];
        c && a.splice(b, 1);
        return c
    },
    getNormalElements: function() {
        for (var a = [], b = 0; b < Global.maxRow; ++b)
            for (var c = 0; c < Global.maxCol; ++c) {
                var d = this.elements[b][c];
                PieceMgr.isHaveElement(b, c) && 1 === d.length && 5 >= d[0].id && a.push(d[0])
            }
        return a
    },
    getBossNormalElements: function() {
        for (var a = [], b = 0; b < Global.maxRow; ++b)
            for (var c = 0; c < Global.maxCol; ++c) {
                var d = this.elements[b][c];
                PieceMgr.isHaveElement(b, c) && 1 === d.length && 5 >= d[0].id && !1 == d[0].isBossSelect && a.push(d[0])
            }
        return a
    },
    getBossHasTagElements: function() {
        for (var a = [], b = 0; b < Global.maxRow; ++b)
            for (var c = 0; c < Global.maxCol; ++c) {
                var d = this.elements[b][c];
                PieceMgr.isHaveElement(b, c) && 1 === d.length && 5 >= d[0].id && !0 == d[0].isBossSelect && a.push(d[0])
            }
        return a
    },
    turnNormalToFly: function(a, b) {
        this.autoKillNum = b;
        for (var c = 0; c < b; ++c) {
            var d = PieceMgr.getRandomElement(a)
              , d = PieceMgr.turnToOtherElement(d, 23);
            d[0].autoKill = 1;
            1 === c % 2 && d[0].setRotation(90)
        }
        EventMgr.emit(EVENTMGR_ID.AUTO_KILL)
    },
    turnNormalOneByOne: function(a, b, c) {
        this.autoKillNum = b;
        for (var d = 0; d < b; ++d)
            c.scheduleOnce(function(d) {
                var f = PieceMgr.getRandomElement(a);
                this.resultAction(c, f, d, b)
            }
            .bind(this, d), 0.2 * d);
        EventMgr.emit(EVENTMGR_ID.AUTO_KILL)
    },
    resultAction: function(a, b, c, d) {
        engine.gameSound.playEffect(soundRes.sound_result_step);
        if (cc._renderType === cc.game.RENDER_TYPE_WEBGL) {
            var e = new cc.Node;
            e.setCascadeOpacityEnabled(!0);
            e.setAnchorPoint(cc.p(0.5, 0));
            e.setPosition(cc.p(98, 1166));
            a.addChild(e, 4);
            a = new cc.ParticleSystem("res/effect/remainsteptrailing/remainsteptrailing1.plist");
            a.x = 0;
            a.y = 0;
            a.setAutoRemoveOnFinish(!0);
            e.addChild(a, 4);
            a = new cc.ParticleSystem("res/effect/remainsteptrailing/remainsteptrailing2.plist");
            a.x = 0;
            a.y = 0;
            a.setAutoRemoveOnFinish(!0);
            e.addChild(a, 4);
            a = cc.pDistance(e.getPosition(), b.getPosition());
            var f;
            a = cc.moveTo(a / 1500, b.getPosition());
            c = {
                index: c,
                animationNode: e
            };
            c = cc.sequence(a, cc.callFunc(function(a, c) {
                this.turnToFlyPudding(b, c.index, d);
                c.animationNode.removeFromParent()
            }, this, c))
        } else {
            e = new cc.Sprite("#game/result_light.png");
            e.setCascadeOpacityEnabled(!0);
            e.setAnchorPoint(cc.p(0.5, 0));
            e.setScale(0.5);
            e.setPosition(cc.p(98, 1166));
            a.addChild(e, 4);
            a = cc.pDistance(e.getPosition(), b.getPosition());
            f = a / 2E3;
            a = Utils.getAngleByLength(b.getPositionX() - 98, b.getPositionY() - 1166);
            e.setRotation(a + 180);
            a = cc.moveTo(f, b.getPosition());
            f = cc.scaleTo(f, 1, 4);
            c = {
                index: c,
                sprite: e
            };
            var g = cc.spawn(cc.scaleTo(0.2, 1, 0.1), cc.fadeOut(0.2));
            c = cc.sequence(cc.spawn(a, f), g, cc.callFunc(function(a, c) {
                this.turnToFlyPudding(b, c.index, d);
                c.sprite.removeFromParent()
            }, this, c))
        }
        e.runAction(c)
    },
    turnToFlyPudding: function(a, b, c) {
        a = PieceMgr.turnToOtherElement(a, 23);
        a[0].autoKill = 1;
        1 === b % 2 && a[0].setRotation(90);
        if (b === c - 1) {
            c < PieceMgr.lvData.step && (PieceMgr.lvData.score += 500 * (c - PieceMgr.lvData.step),
            EventMgr.emit(EVENTMGR_ID.ADD_SCORE, PieceMgr.lvData.score));
            for (b = PieceMgr.elements.length - 1; 0 <= b; --b)
                for (c = PieceMgr.elements[0].length - 1; 0 <= c; --c)
                    if (a = PieceMgr.elements[b][c],
                    23 == a[0].id || 10 == a[0].id || 11 == a[0].id)
                        a[0].autoKill = !0;
            PieceMgr.lvData.step = 0;
            isColorPuddingAndColorPudding = !1;
            EventMgr.emit(EVENTMGR_ID.AUTO_KILL)
        } else
            PieceMgr.lvData.step -= 1,
            EventMgr.emit(EVENTMGR_ID.ADD_SCORE_ACTION, {
                score: 500,
                target: a[0]
            });
        EventMgr.emit(EVENTMGR_ID.STEP, PieceMgr.lvData.step)
    }
};
var SoundMgr = {
    isOpen: !0,
    id: 0,
    playMusic: function(a, b) {
        this.isOpen && cc.audioEngine.playMusic(a, b || !1)
    },
    pauseMusic: function() {
        this.isOpen && cc.audioEngine.pauseMusic()
    },
    isMusicPlaying: function() {
        if (this.isOpen)
            return cc.audioEngine.isMusicPlaying() ? !0 : !1
    },
    stopMusic: function(a) {
        cc.audioEngine.stopMusic(a || !1)
    },
    playEffect: function(a, b) {
        if (this.isOpen)
            return cc.audioEngine.playEffect(a, b || !1)
    },
    stopEffect: function(a) {
        cc.audioEngine.stopEffect(a)
    },
    stopAllEffects: function() {
        cc.audioEngine.stopAllEffects()
    },
    pauseEffect: function(a) {
        cc.audioEngine.pauseEffect(a)
    },
    resumeEffect: function(a) {
        cc.audioEngine.resumeEffect(a)
    },
    setMusicVolume: function(a) {
        cc.audioEngine.setMusicVolume(a || 0)
    },
    setEffectVolume: function(a) {
        cc.audioEngine.setEffectsVolume(a || 0)
    }
};
var Utils = {
    getDataByID: function(a, b) {
        for (var c = 0; c < a.length; c += 1)
            if (b === a[c].id)
                return a[c];
        return !1
    },
    getDataIndexByID: function(a, b) {
        for (var c = 0; c < a.length; c += 1)
            if (b === a[c])
                return c;
        return -1
    },
    removeData: function(a, b) {
        for (var c = 0; c < a.length; c += 1)
            if (b === a[c])
                return a.splice(c, 1);
        return -1
    },
    changeTexture: function(a, b) {
        if (a && b) {
            var c = cc.spriteFrameCache.getSpriteFrame(b);
            c && a.initWithSpriteFrame(c)
        }
    },
    strToNumber: function(a, b) {
        for (var c = a.split(b), d = [], e = 0; e < c.length; e += 1)
            d.push(Number(c[e]));
        return d
    },
    randomFromArray: function(a) {
        var b = Utils.getRandomNum(a.length) - 1;
        return a[b]
    },
    drawNode: function(a) {
        var b = new cc.DrawNode;
        b.drawRect(cc.p(a.x, a.y), cc.p(a.width + a.x, a.height + a.y), cc.color(0, 0, 0, 0), 2, cc.color(255, 0, 0, 255));
        return b
    },
    getNumberFromString: function(a) {
        return Number(/\d+/g.exec(a))
    },
    getRandomNum: function(a) {
        a = a || 100;
        return Math.floor(Math.random() * a) + 1
    },
    removeDataFromArray: function(a, b) {
        for (var c = 0; c < a.length; c += 1)
            a[c] === b && a.splice(c, 1)
    },
    getPercent: function(a, b) {
        return a / b
    },
    getTwoNumWithOneNum: function(a) {
        return [Math.floor(a / 10), a % 10]
    },
    deepCopy: function(a) {
        var b = {}, c;
        for (c in a)
            b[c] = "object" === typeof a[c] ? this.deepCopy(a[c]) : a[c];
        return b
    },
    getAngleByLength: function(a, b) {
        return 0 === b && 0 < a ? 90 : 0 === b && 0 > a ? -90 : 0 === a && 0 > b ? 180 : a && b ? 180 * Math.atan2(a, b) / Math.PI : -1
    },
    formatTime: function(a) {
        if (0 >= a)
            return "00:00";
        var b = Math.floor(a / 60);
        a %= 60;
        10 > b && (b = "0" + b);
        10 > a && (a = "0" + a);
        return b + ":" + a
    },
    shareForReward: function() {
        1 === gameUserData.isDailyGift && (1 === Math.round(Math.random()) ? (gameUserData.power += 2,
        EventMgr.emit(EVENTMGR_ID.REFRESH_POWER_INFO),
        EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            id: 2007,
            num: 2
        })) : (gameUserData.gold += 50,
        EventMgr.emit(EVENTMGR_ID.REFRESH_GOLD),
        EventMgr.emit(EVENTMGR_ID.REWARD_NODE, {
            id: 2006,
            num: 50
        })),
        gameUserData.isDailyGift = 0,
        gameSDK.saveUserData(getSaveFBData(), null))
    },
    sendFaceBookFriend: function(a, b) {
        if (isNotFbGame) {
            null != a && a(b);
            var c = {};
            c.pngArr = [{
                url: "res/invbg.jpg",
                posX: 0,
                posY: 0,
                imgWidth: 750,
                imgHeight: 380
            }, {
                url: selfData.myurl,
                posX: 303,
                posY: 135,
                imgWidth: 144,
                imgHeight: 144
            }, {
                url: "res/invicon.png",
                posX: 281,
                posY: 114,
                imgWidth: 187,
                imgHeight: 187
            }];
            c.fontData = [{
                des: "" + gameUserData.stars,
                posX: 400,
                posY: 340,
                font: "45px Microsoft YaHei",
                fillStyle: "rgb(252,100,132)",
                textAlign: "center"
            }];
            c.canvasWidth = 750;
            c.canvasHeight = 380;
            Utils.getBase64Image(c)
        } else
            FBInstant.context.chooseAsync({
                filters: ["NEW_CONTEXT_ONLY", "INCLUDE_EXISTING_CHALLENGES", "NEW_PLAYERS_ONLY"]
            }).then(function() {
                null != a && (cc.log("查找好友回调---------------------------------5"),
                a(b));
                var c = {};
                c.pngArr = [{
                    url: "res/invbg.jpg",
                    posX: 0,
                    posY: 0,
                    imgWidth: 750,
                    imgHeight: 380
                }, {
                    url: selfData.myurl,
                    posX: 303,
                    posY: 135,
                    imgWidth: 144,
                    imgHeight: 144
                }, {
                    url: "res/invicon.png",
                    posX: 281,
                    posY: 114,
                    imgWidth: 187,
                    imgHeight: 187
                }];
                c.fontData = [{
                    des: "" + gameUserData.stars,
                    posX: 400,
                    posY: 340,
                    font: "45px Microsoft YaHei",
                    fillStyle: "rgb(252,100,132)",
                    textAlign: "center"
                }];
                c.canvasWidth = 750;
                c.canvasHeight = 380;
                Utils.getBase64Image(c)
            })
    },
    getBase64Image: function(a) {
        Utils.loadPng(a, 0, [])
    },
    loadPng: function(a, b, c) {
        if (a.pngArr.length <= b) {
            var d = document.createElement("canvas");
            d.width = a.canvasWidth;
            d.height = a.canvasHeight;
            for (var e = 0; e < c.length; e++) {
                var f = c[e]
                  , g = d.getContext("2d");
                g.drawImage(f, a.pngArr[e].posX, a.pngArr[e].posY, f.width, f.height)
            }
            if (null != a.fontData)
                for (e = 0; e < a.fontData.length; e++)
                    f = a.fontData[e],
                    g.font = f.font,
                    g.lineWidth = 5,
                    g.fillStyle = f.fillStyle,
                    g.textAlign = f.textAlign,
                    g.strokeStyle = "#8e1910",
                    g.strokeText("" + f.des, f.posX, f.posY),
                    g.fillText("" + f.des, f.posX, f.posY);
            d = d.toDataURL("image/png");
            if (isNotFbGame) {
                var h = new Image;
                h.crossOrigin = "anonymous";
                h.src = d;
                h.onload = function() {
                    var a = new cc.Sprite(h);
                    currentScene.addChild(a);
                    a.x = 375;
                    a.y = 667
                }
            } else
                FBInstant.updateAsync({
                    action: "CUSTOM",
                    cta: "Play",
                    template: "play_turn",
                    image: d,
                    text: "I can't stop playing this game,Let's play together!",
                    data: {},
                    strategy: "LAST",
                    notification: "PUSH"
                }).then(function() {})
        } else {
            var k = new Image;
            k.crossOrigin = "anonymous";
            k.src = a.pngArr[b].url;
            k.onload = function() {
                k.width = a.pngArr[b].imgWidth;
                k.height = a.pngArr[b].imgHeight;
                c.push(k);
                b++;
                Utils.loadPng(a, b, c)
            }
        }
    },
    getShareBase64Image: function(a) {
        var b = document.createElement("canvas");
        b.width = a.width;
        b.height = a.height;
        b.getContext("2d").drawImage(a, 0, 0, a.width, a.height);
        return b.toDataURL("image/jpeg")
    },
    sendShareUploadImage: function(a, b) {
        if (isNotFbGame)
            null != a && a(b);
        else {
            cc.log("facebook share");
            var c = document.createElement("img");
            c.crossOrigin = "anonymous";
            c.src = "res/sharebg.jpg";
            c.onload = function() {
                cc.log("img.onload");
                var d = Utils.getShareBase64Image(c);
                cc.log("uploadImage:" + d);
                FBInstant.shareAsync({
                    intent: "SHARE",
                    image: d,
                    text: "I have passed many levels. Can you surpass me?",
                    data: {
                        myReplayData: "..."
                    }
                }).then(function() {
                    cc.log("shareAsync end");
                    null != a && a(b)
                })
            }
        }
    }
}
  , sendServerLevelUrl = "https://jeli2.9191youxi.com:8080/log_recv?opcode=80001"
  , sendServerLevelInfo = function(a) {
    var b = cc.loader.getXMLHttpRequest()
      , c = sendServerLevelUrl
      , d = {};
    d.player_id = a.playerid;
    d.prj = a.prj;
    d.type = a.type;
    d.info = a.info;
    a = JSON.stringify(d);
    b.open("POST", c);
    b.setRequestHeader("Content-Type", "text/plain;charset=UTF-8")
};
var AnimationMgr = {
    getActionByArray: function(a, b) {
        for (var c = [], d = 0; d < a.length; d += 1) {
            var e = cc.spriteFrameCache.getSpriteFrame(a[d]);
            if (e)
                c.push(e);
            else if (e = cc.textureCache.addImage(a[d])) {
                var f = cc.rect(0, 0, 0, 0);
                f.width = e.width;
                f.height = e.height;
                e = new cc.SpriteFrame(e,f);
                c.push(e)
            }
        }
        c = new cc.Animation(c,b || 1 / 12);
        return cc.animate(c)
    },
    getAnimationArray: function(a, b, c) {
        for (var d = []; b <= c; b += 1)
            d.push(a + b + ".png");
        return d
    },
    getFrameAnimation: function(a, b, c, d) {
        return this.getActionByArray(this.getAnimationArray(a, b, c), d)
    },
    getDefaultFrameAnimation: function(a, b, c) {
        return this.getActionByArray(this.getAnimationArray(a, 1, b), c)
    },
    getDefaultFrameAnimation1: function(a, b, c) {
        return this.getActionByArray(this.getAnimationArray(a, 2, b), c)
    },
    getChooseItemAction: function() {
        return cc.sequence(cc.rotateBy(1.5, 360)).repeatForever()
    },
    obtainAction: function(a, b, c, d) {
        var e = Object.getOwnPropertyNames(PieceMgr.lvData.targets).length
          , f = 0.2;
        if (null != a.beKillElement && 10 == a.beKillElement.id) {
            f = 1;
            !0 == isShowBombBomb && (f = 0.2);
            !0 == isShowBombStar && (21 == isflyBomeStar ? (f = 1,
            17 === a.id && (f = 0.4)) : f = 0.8,
            15 === a.id && (f = 0.2),
            14 === a.id && (f = 0.2));
            if (18 === a.id || 45 === a.id)
                f = 0.8;
            12 === a.id && (f = 0.2);
            !0 == a.beKillElement.isFlyBomb && (f = 0.2 + a.delayTime - 0.3);
            a.scheduleOnce(function() {
                if (6 > a.id && cc._renderType === cc.game.RENDER_TYPE_WEBGL && !1 == isColorPuddingAndColorPudding) {
                    var b = new cc.ParticleSystem("res/effect/elementtrailing/elementtrailing.plist");
                    b.x = 10;
                    b.y = -30;
                    b.setAutoRemoveOnFinish(!0);
                    a.addChild(b, 10)
                }
            }, f)
        } else if (!0 == isShowBombStar && null != isflyBomeStar && (21 == isflyBomeStar ? (f = 1,
        17 === a.id && (f = 0.4)) : f = 0.6,
        15 === a.id && (f = 0.2),
        14 === a.id && (f = 0.2)),
        6 > a.id && cc._renderType === cc.game.RENDER_TYPE_WEBGL && !1 == isColorPuddingAndColorPudding) {
            var g = new cc.ParticleSystem("res/effect/elementtrailing/elementtrailing.plist");
            g.x = 10;
            g.y = -30;
            g.setAutoRemoveOnFinish(!0);
            a.addChild(g, 10)
        }
        var g = 0
          , g = 1 == Global.gameType ? Global.targetItemPos[e - 1].posArr[b] : Global.weekBossHittedPos
          , h = cc.pAdd(a.curPos, a.target.getPosition())
          , k = Math.sqrt(Math.pow(g.y - h.y, 2) + Math.pow(Math.abs(g.x - h.x), 2));
        cc.moveBy(k / 700, cc.p(g.x - h.x, g.y - h.y - 29)).easing(cc.easeBackInOut());
        k /= 700;
        k = 0.7;
        null != d && 5 > d && (k += 0.2 * c);
        var m = cc.p(0, 0)
          , p = cc.p(0, 0);
        2 > a.curGrid.col ? 2 > a.curGrid.row ? (m = cc.p(20, 210),
        p = cc.p(-240, 860)) : 5 > a.curGrid.row ? (m = cc.p(20, 170),
        p = cc.p(-190, 790)) : (m = cc.p(20, 70),
        p = cc.p(-200, 460)) : 5 > a.curGrid.col ? 2 > a.curGrid.row ? (m = cc.p(-230, 210),
        p = cc.p(-380, 800)) : 5 > a.curGrid.row ? (m = cc.p(-140, 170),
        p = cc.p(-290, 740)) : (m = cc.p(-190, 60),
        p = cc.p(-340, 440)) : 2 > a.curGrid.row ? (m = cc.p(-370, 210),
        p = cc.p(-420, 760)) : 5 > a.curGrid.row ? (m = cc.p(-280, 170),
        p = cc.p(-330, 700)) : (m = cc.p(-330, 40),
        p = cc.p(-380, 400));
        var s = cc.p(g.x - h.x + 15, g.y - h.y - 25);
        15 === a.id && (s = cc.p(g.x - h.x, g.y - h.y - 25));
        var h = cc.bezierBy(k, [m, p, s]).easing(cc.easeIn(1))
          , t = cc.rotateBy(k - 0.5, 360);
        a.target.stopAllActions();
        a.stopAllActions();
        46 !== a.id && a.target.runAction(cc.sequence(cc.delayTime(f), cc.callFunc(function() {
            a.target.setAnchorPoint(0.5, 0.5);
            a.target.y += 42;
            a.target.setOpacity(0);
            a.target.setVisible(!0);
            a.target.setCascadeOpacityEnabled(!0)
        }), cc.spawn(cc.moveBy(0.1, cc.p(-20, -20))), cc.fadeIn(0.2), cc.callFunc(function() {
            a.target.setVisible(!0);
            a.target.runAction(cc.sequence(cc.delayTime(f), t))
        })));
        null != a && a.isChoose && 19 !== a.id && 17 !== a.id && 46 !== a.id ? a.isClean || (a.removeElementData(),
        a.isClean = !0) : 18 !== a.id && 22 !== a.id && 45 !== a.id || a.isClean || (a.removeElementData(),
        a.isClean = !0);
        m = 0;
        m = 1 == Global.gameType ? Global.targetItemPos[e - 1].scale : 0.7;
        e = cc.spawn(h, cc.scaleTo(k - 0.5, m), cc.callFunc(function() {
            a.scheduleOnce(function() {
                null != a && a.isChoose && 19 !== a.id && 17 !== a.id && 46 !== a.id ? a.isClean || (a.removeElementData(),
                a.isClean = !0) : 18 !== a.id && 22 !== a.id && 45 !== a.id || a.isClean || (a.removeElementData(),
                a.isClean = !0)
            }, 0.3)
        }));
        f += 0.1;
        k = 0;
        null != d && 5 > d && (k += 0.05 * c);
        cc.moveTo(k, cc.p(g.x + 20, g.y - 29));
        e = cc.sequence(cc.delayTime(f), e, cc.callFunc(function() {
            EventMgr.emit(EVENTMGR_ID.SCALE_TARGET, b);
            EventMgr.emit(EVENTMGR_ID.REFRESH_TARGET, b);
            PieceMgr.obtainTargetCount--
        }), cc.delayTime(0.1), cc.callFunc(function() {
            1 != Global.gameType && c != d - 1 && EventMgr.emit(EVENTMGR_ID.WEEKBOSS_HIT);
            this.removeFromParent()
        }, a));
        PieceMgr.obtainTargetCount++;
        a.runAction(e)
    },
    getElementNormalAction: function() {
        var a = cc.spawn(cc.scaleTo(0.0625, 1.16, 0.77), cc.skewTo(0.0625, 1.9, 0))
          , b = cc.spawn(cc.scaleTo(0.125, 0.96, 1.07), cc.skewTo(0.125, -3, 0))
          , c = cc.spawn(cc.scaleTo(0.125, 1.03, 0.89), cc.skewTo(0.125, 0, 0))
          , d = cc.spawn(cc.scaleTo(0.125, 0.99, 1.01), cc.skewTo(0.125, 2.5, 0))
          , e = cc.spawn(cc.scaleTo(0.25, 1, 1), cc.skewTo(0.25, 0, 0));
        return cc.sequence(a, b, c, d, e)
    },
    getTipElementNormalAction: function() {
        var a = cc.spawn(cc.scaleTo(0.125, 1.16, 0.77), cc.skewTo(0.125, 1.9, 0))
          , b = cc.spawn(cc.scaleTo(0.1875, 0.96, 1.07), cc.skewTo(0.1875, -3, 0))
          , c = cc.spawn(cc.scaleTo(0.1875, 1.03, 0.89), cc.skewTo(0.1875, 0, 0))
          , d = cc.spawn(cc.scaleTo(0.1875, 0.99, 1.01), cc.skewTo(0.1875, 2.5, 0))
          , e = cc.spawn(cc.scaleTo(0.3125, 1, 1), cc.skewTo(0.3125, 0, 0));
        return cc.sequence(a, b, c, d, e)
    },
    getAddScoreAction: function(a) {
        a.setScale(0.01);
        a.setCascadeOpacityEnabled(!0);
        a = cc.moveBy(0.35, cc.p(10, 80));
        return cc.sequence(cc.scaleTo(0.2, 1), cc.delayTime(0.1), a)
    },
    createElementAction: function(a) {
        a.state = ELEMENT_STATE.CREATE;
        var b = cc.sequence(cc.scaleTo(0.05, 1), cc.callFunc(function() {
            this.state = ELEMENT_STATE.STATIC
        }, a));
        a.runAction(b)
    },
    evilAction: function(a) {
        for (var b = 0; 6 > b; ++b) {
            var c = new cc.Sprite("#result/light.png");
            a.addChild(c, 1);
            c.setCascadeOpacityEnabled(!0);
            c.setOpacity(0);
            c.setScale(2);
            c.runAction(cc.sequence(cc.delayTime(0.2 * b), cc.spawn(cc.fadeIn(0.2), cc.scaleTo(0.6, 0).easing(cc.easeSineIn()))))
        }
    }
};
var isNotFbGame = "FaceBookTest" == sdkName
  , isAdLoading = !1
  , rankJsonData = null
  , selfJsonData = null
  , hasLoadedData = !1
  , friendList = []
  , selfData = {}
  , serverTimer = 0
  , hasGetingServerTime = !1;
getInfiniteServerTimer = function() {
    var a = cc.loader.getXMLHttpRequest()
      , b = serverUrl + HttpID.getPowerTime
      , c = JSON.stringify({
        playerID: 0
    });
    a.open("POST", b);
    a.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
    a.onreadystatechange = function() {
        if (4 == a.readyState && 200 <= a.status && 207 >= a.status) {
            var b = a.responseText
              , c = parseInt(JSON.parse(b).time);
            0 >= gameUserData.firstEnterGameTime && (gameUserData.firstEnterGameTime = c,
            gameSDK.saveUserData(getSaveFBData(), null));
            if (0 < gameUserData.getInfinitePowerTime)
                c = gameUserData.getInfinitePowerTime + Global.endInfiniteTime - c,
                Global.endInfiniteTime = 0 >= c ? 0 : c,
                0 >= Global.endInfiniteTime ? (Global.isInfinite = !1,
                gameUserData.isInfiniteOver = 1,
                gameSDK.saveUserData(getSaveFBData(), null)) : Global.isInfinite = !0,
                EventMgr.emit(EVENTMGR_ID.INFINITE_POWER);
            else {
                var c = (new Date(1E3 * c)).getDate()
                  , f = (new Date(1E3 * gameUserData.firstEnterGameTime)).getDate()
                  , g = f + 1;
                c === (31 < g ? g - 31 : g) ? (Global.isSecondDay = !0,
                EventMgr.emit(EVENTMGR_ID.INFINITE_POWER)) : 1 < Math.abs(c - f) && (gameUserData.isInfiniteOver = 1,
                gameSDK.saveUserData(getSaveFBData(), null))
            }
            console.log("firstEnterGameTime: " + b)
        }
    }
    ;
    a.send(c)
}
;
parseRankJson = function(a) {
    if ("false" != a) {
        a = JSON.parse(a);
        var b = [];
        if (a.list)
            for (var c = a.list.length, d = 0; d < c; d++) {
                var e = a.list[d]
                  , f = {};
                f.name = e.name;
                f.imageurl = e.imageurl;
                f.grade = e.grade;
                f.maxStars = e.maxStars;
                f.beRanked = !1;
                f.pid = 0;
                b.push(f)
            }
        e = a.rank;
        if (20 <= b.length && null != selfJsonData && null != selfJsonData.maxStars && (parseInt(selfJsonData.maxStars),
        c = parseInt(b[b.length - 1].maxStars),
        d = parseInt(b[b.length - 1].maxStars) - parseInt(selfJsonData.maxStars),
        20 < a.rank)) {
            if (5 < d && 0 != a.lastlist.length) {
                var g = 0
                  , e = 0;
                null != selfJsonData && null != selfJsonData.maxStars && (g = parseInt(selfJsonData.maxStars),
                e = parseInt(selfJsonData.grade));
                f = g + 2;
                cc.log("temp.lastlist------------------------------" + a.lastlist.length);
                for (var h = 0; 3 > h; h++) {
                    var k = a.lastlist[h]
                      , m = {};
                    m.name = k.name;
                    m.imageurl = k.imageurl;
                    m.grade = e + Math.floor(1E4 * Math.random());
                    m.maxStars = f + Math.floor(4 * Math.random());
                    f = m.maxStars + 2;
                    m.pid = 0;
                    m.beRanked = !1;
                    b.push(m)
                }
                f = g - 2;
                if (3 < a.lastlist.length)
                    for (g = 3; 4 > g; g++)
                        h = a.lastlist[g],
                        k = {},
                        k.maxStars = f - Math.floor(4 * Math.random()),
                        0 < k.maxStars && (f = k.maxStars - 2,
                        k.name = h.name,
                        k.imageurl = h.imageurl,
                        k.grade = e + Math.floor(3E3 * Math.random()),
                        k.pid = 0,
                        k.beRanked = !0,
                        b.push(k))
            }
            e = Math.floor(c * d / 2E3 + 21)
        }
        b.sort(function(a, b) {
            return a.maxStars === b.maxStars ? parseInt(b.grade) - parseInt(a.grade) : parseInt(b.maxStars) - parseInt(a.maxStars)
        });
        rankJsonData = {};
        rankJsonData.rank = e;
        rankJsonData.list = b
    }
}
;
parsePlayerJson = function(a) {}
;
parseSelfJson = function(a) {
    if ("false" != a) {
        if (a = JSON.parse(a),
        gameSDK.logEvent("getSeverUserData", 1, {
            getSeverUserData: "getSeverUserData"
        }),
        selfJsonData = a,
        selfJsonData.stars = a.maxStars,
        selfJsonData.levelStar = a.star,
        null != gameUserData && (gameUserData.lv = ~~selfJsonData.level,
        gameUserData.tagetlvl = parseInt(selfJsonData.tagetlvl),
        gameUserData.boxget = parseInt(selfJsonData.boxget)),
        0 == gameUserData.lv && (selfJsonData = null),
        null != selfJsonData) {
            null == gameUserData && initGameUserData();
            a = selfJsonData.levelStar;
            for (var b = 0; b < a.length; b++)
                gameUserData.levelStar[b] = parseInt(a[b]);
            gameUserData.stars = parseInt(selfJsonData.stars);
            gameUserData.lv = parseInt(selfJsonData.level);
            gameUserData.gold = parseInt(selfJsonData.gold);
            gameUserData.power = parseInt(selfJsonData.power);
            gameUserData.beSupportNum = parseInt(selfJsonData.dianzan);
            gameUserData.totalScore = parseInt(selfJsonData.grade);
            gameUserData.tagetlvl = parseInt(selfJsonData.tagetlvl);
            gameUserData.boxget = parseInt(selfJsonData.boxget);
            1 < Global.mapIndex && (Global.mapIndex = Math.ceil(gameUserData.lv / 100),
            Global.mapIndex = 0 < Global.mapIndex ? Global.mapIndex : 1);
            gameUserData.pay_count = parseInt(selfJsonData.pay_count);
            gameUserData.free_count = parseInt(selfJsonData.free_count);
            gameUserData.week_gift_reveived = parseInt(selfJsonData.week_gift_reveived);
            gameUserData.week_gift = parseInt(selfJsonData.week_gift);
            gameUserData.hurt_gift_package = selfJsonData.hurt_gift_package;
            gameUserData.myHurt = parseInt(selfJsonData.hurt);
            gameUserData.lastHurt = parseInt(selfJsonData.last_hurt);
            gameUserData.week_refresh = parseInt(selfJsonData.week_refresh);
            gameUserData.week_share_num = parseInt(selfJsonData.week_share_num);
            gameUserData.week_invite_num = parseInt(selfJsonData.week_invite_num);
            gameUserData.honor = parseInt(selfJsonData.honor);
            gameUserData.honor_free_box = parseInt(selfJsonData.honor_free_box);
            gameUserData.invite_ids = selfJsonData.invite_ids;
            gameUserData.honor_reward_index = parseInt(selfJsonData.honor_reward_index);
            gameUserData.honor_reward_index > Global.honorRewardList.length - 1 && (gameUserData.honor_reward_index = Global.honorRewardList.length - 1);
            a = Global.honorRewardList[gameUserData.honor_reward_index].honorNum;
            gameUserData.honor > a && (gameUserData.honor = a);
            gameUserData.honor_invite_type = parseInt(selfJsonData.honor_invite_type);
            gameUserData.is_today_first_login = selfJsonData.is_today_first_login;
            gameUserData.todayInitLv = parseInt(selfJsonData.today_init_lv);
            1 == gameUserData.is_today_first_login && 0 != gameUserData.honor_invite_type && (gameUserData.honor_invite_type = 0);
            parseTargetPeople(selfJsonData.tarStr);
            gameUserData.tarStr = selfJsonData.tarStr;
            gameSDK.saveUserData(getSaveFBData(), null)
        }
    } else
        Global.isNewPlayer = !0,
        gameUserData.seeTargetDate = -1;
    EventMgr.emit(EVENTMGR_ID.GET_LEVEL_INFO_COMPLETE)
}
;
parseSaveSelfJson = function(a) {
    "false" != a ? (selfJsonData = JSON.parse(a),
    null != gameUserData && (gameUserData.lv = ~~selfJsonData.level,
    gameUserData.tagetlvl = parseInt(selfJsonData.tagetlvl),
    gameUserData.boxget = parseInt(selfJsonData.boxget),
    gameUserData.week_refresh = parseInt(selfJsonData.week_refresh)),
    0 == gameUserData.lv && (selfJsonData = null),
    null != selfJsonData && parseTargetPeople(selfJsonData.tarStr)) : (Global.isNewPlayer = !0,
    gameUserData.seeTargetDate = -1);
    HttpFun.getRankInfo(selfData.mypid)
}
;
parseWeekRankJson = function(a) {
    "false" != a && (a = JSON.parse(a),
    Global.weekRank = a.rank,
    Global.weekRank.sort(function(a, c) {
        return parseInt(c.hurt) - parseInt(a.hurt)
    }))
}
;
checkGlobe = function() {
    if (0 >= gameUserData.lv)
        return null;
    for (var a = [], b = 0; b < Global.addMapFriendData.length; b++)
        a.push(Global.addMapFriendData[b]);
    for (b = 0; b < Global.targetPeople.length; b++)
        a.push(Global.targetPeople[b]);
    a.sort(function(a, b) {
        return parseInt(a.getHonor) - parseInt(b.getHonor)
    });
    for (b = 0; b < a.length; b++) {
        var c = a[b];
        if (c.level > gameUserData.lv)
            return c
    }
    return null
}
;
initMaxPower = function(a) {
    0 >= gameUserData.baseFriendNum && (gameUserData.baseFriendNum = a,
    gameSDK.saveUserData(getSaveFBData(), null));
    a -= gameUserData.baseFriendNum;
    5 < a ? a = 5 : 0 > a && (a = 0);
    cc.log("Global.addFriendsNum", Global.addFriendsNum);
    Global.addFriendsNum = a
}
;
var SeverHttpMaskLayer = cc.Layer.extend({
    key: null,
    ctor: function() {
        this._super()
    },
    onEnter: function() {
        this._super()
    },
    initialize: function(a) {
        if ("loadUIMask" == a) {
            var b = new cc.Layer
              , c = new cc.DrawNode;
            c.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(0, 0, 0, 170), 0, cc.color(0, 0, 0, 170));
            var d = new cc.Sprite;
            d.addChild(c);
            b.addChild(d);
            b.setScale(1.5);
            b.runAction(cc.scaleTo(0.5, 1));
            this.maskLayer = b;
            this.addChild(b, -1);
            engine.gameEvent.createMouseDown(b, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh))
        }
        b = new cc.Sprite("#rank/circle.png");
        b.setAnchorPoint(0.5, 0.5);
        c = 0;
        c = viewGameWidth > mainGameBgWidth ? mainGameBgWidth / 2 : viewGameWidth / 2;
        b.setPosition(c - uiOfferX, viewGameHeigh / 2);
        this.addChild(b);
        c = cc.rotateBy(2, 360);
        c.repeatForever();
        b.runAction(c);
        this.key = a;
        this.setTag(this.key)
    },
    removeGameLayer: function(a) {
        this.key == a && this.removeFromParent()
    }
})
  , createGameMaskLayer = function(a) {
    if (null != currentScene && null == currentScene.getChildByTag(a)) {
        var b = new SeverHttpMaskLayer;
        b.initialize(a);
        currentScene.addChild(b, 100001)
    }
}
  , removeGameMaskLayer = function(a) {
    null != currentScene && null != currentScene.getChildByTag(a) && currentScene.getChildByTag(a).removeGameLayer(a)
};
var TurnToOtherGameLayer = cc.Layer.extend({
    JellyCrush: {
        name: "Jelly Crush",
        id: "1219338561447280",
        icon: "#jctg/jctg_1.png"
    },
    JellyBoom: {
        name: "Jelly Boom",
        id: "319647368564919",
        icon: "#jctg/jctg_3.png"
    },
    PopStone: {
        name: "Pop Stone",
        id: "1394792680649041",
        icon: "#jctg/jctg_2.png"
    },
    StoneDash: {
        name: "Stone Dash",
        id: "1943850945671989",
        icon: "#jctg/jctg_4.png"
    },
    PetsCrush: {
        name: "Pets Crush",
        id: "147579912728683",
        icon: "#jctg/jctg_5.png"
    },
    IdleFish: {
        name: "Idle Fish",
        id: "2246661838950056",
        icon: "#jctg/jctg_6.png"
    },
    MergeBirds: {
        name: "Merge Birds",
        id: "1296780957130469",
        icon: "#jctg/jctg_7.png"
    },
    showIcon: [],
    ctor: function() {
        this._super();
        gameSDK.goToOtherGame = function(a) {
            switch (sdkName) {
            case "FaceBookTest":
                cc.log("跳转成功。", a);
                break;
            case "FaceBook":
                FBInstant.switchGameAsync(a).then(function() {
                    cc.log("跳转其他游戏成功")
                }).catch(function(a) {
                    null != a && (gameSDK.logEvent("gameTurnOtherFail", 1, {
                        gameTurnOtherFail: "gameTurnOtherFail"
                    }),
                    cc.log("跳转其他游戏失败，失败编码为:"),
                    cc.warn(a))
                })
            }
        }
        ;
        this.showIcon = [this.JellyCrush, this.PopStone, this.PetsCrush, this.StoneDash, this.IdleFish];
        this.initUI()
    },
    onExit: function() {
        this._super();
        this.showIcon = [];
        gameSDK.goToOtherGame = null
    },
    initUI: function() {
        var a = new cc.DrawNode;
        a.drawRect(cc.p(-offetGameWidth, 0), cc.p(viewGameWidth, viewGameHeigh), cc.color(255, 255, 255, 255), 0, cc.color(255, 255, 255, 255));
        this.addChild(a);
        engine.gameEvent.createMouseUp(a, function() {}, null, cc.rect(0, 0, viewGameWidth, viewGameHeigh));
        var b = new cc.LabelTTF("More Games","Arial",32);
        b.setColor(cc.color(47, 46, 47, 255));
        b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        b.setPosition(360, 1210);
        this.addChild(b);
        for (a = 0; a < this.showIcon.length; a++) {
            var c = this.showIcon[a]
              , d = 1050 - 150 * a
              , b = new cc.LabelTTF(c.name,"Arial",28);
            b.setColor(cc.color(47, 46, 47, 255));
            b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
            b.setPosition(250, d);
            this.addChild(b);
            b = new cc.Sprite(c.icon);
            b.setPosition(100, d);
            this.addChild(b);
            b = new cc.Sprite("#jctg/jctg_play.png");
            b.gamedata = c;
            b.setPosition(600, d);
            this.addChild(b);
            engine.gameEvent.createMouseUp(b, this.openGame.bind(this, b), buttonScalingType)
        }
        b = new cc.LabelTTF("Cancel","Arial",28);
        b.setColor(cc.color(41, 148, 255, 255));
        b.setHorizontalAlignment(cc.TEXT_ALIGNMENT_CENTER);
        b.setPosition(70, 1210);
        this.addChild(b);
        engine.gameEvent.createMouseUp(b, this.closeLayer.bind(this), buttonScalingType, cc.rect(-20, -20, 140, 80))
    },
    clickCDTime: 0,
    openGame: function(a) {
        var b = (new Date).getTime();
        if (!(2E3 > b - this.clickCDTime)) {
            this.clickCDTime = b;
            var b = a.gamedata.name
              , b = b.replace(" ", "_")
              , b = "goOther_" + b
              , c = {};
            c[b] = b;
            gameSDK.logEvent(b, 1, c);
            gameSDK.goToOtherGame(a.gamedata.id)
        }
    },
    closeLayer: function() {
        this.removeFromParent()
    }
});
var gameDianZanDataKey = "DianZanKey"
  , gameDianZanData = []
  , initGameDianZanData = function() {
    null == gameDianZanData && (gameDianZanData = {});
    var a = readGameDianZanData(), b;
    for (b in a)
        gameDianZanData[b] = a[b]
}
  , readGameDianZanData = function() {
    var a;
    try {
        a = cc.sys.localStorage.getItem(gameDianZanDataKey),
        a = JSON.parse(a)
    } catch (b) {}
    return a
}
  , saveDianZanData = function() {
    try {
        cc.sys.localStorage.setItem(gameDianZanDataKey, JSON.stringify(gameDianZanData))
    } catch (a) {}
}
  , isDianZan = function(a) {
    null == gameUserData.dianZanList && (gameUserData.dianZanList = [],
    gameSDK.saveUserData(getSaveFBData(), null));
    for (var b = 0; b < gameUserData.dianZanList.length; b++)
        if (gameUserData.dianZanList[b].id == a)
            return !0;
    return !1
}
  , updateDianZan = function(a) {
    null == gameUserData.dianZanList && (gameUserData.dianZanList = []);
    if (!(20 <= gameUserData.dianZanList.length))
        if (!0 == isDianZan(a.id))
            getDianZan(a.id).support = a.support;
        else {
            var b = {};
            b.id = a.id;
            b.support = 1;
            gameUserData.dianZanList.push(b)
        }
}
  , getDianZan = function(a) {
    null == gameUserData.dianZanList && (gameUserData.dianZanList = []);
    for (var b = 0; b < gameUserData.dianZanList.length; b++) {
        var c = gameUserData.dianZanList[b];
        if (c.id == a)
            return c
    }
    b = {};
    b.id = a;
    b.support = 0;
    return b
};
var sceneOfferX = 0
  , sceneOfferY = 0
  , designHeight = 1280
  , designWidth = 720
  , viewGameWidth = designWidth
  , viewGameHeigh = designHeight
  , offetGameWidth = 0
  , offetGameHeigh = 0
  , mainGameBgWidth = 920
  , uiOfferX = 0
  , downOfferX = 0
  , isFirstEnterGame = !1;
cc.game.onStart = function() {
    Global.startGameLocalTime = getCurrencyTime();
    if (!1 == cc.sys.isMobile) {
        var a = document.getElementById("gameCanvas");
        a.style.width = 720;
        a.style.height = 1280;
        viewGameWidth = designWidth;
        viewGameHeigh = designHeight;
        downOfferX = uiOfferX = sceneOfferY = sceneOfferX = offetGameHeigh = offetGameWidth = 0
    } else
        sceneOfferX = 100,
        a = document.documentElement.clientHeight / document.documentElement.clientWidth,
        designHeight / designWidth > a && (viewGameWidth = designHeight / a,
        viewGameHeigh = designHeight,
        uiOfferX = (viewGameWidth - designWidth) / 2,
        downOfferX = (viewGameWidth - designWidth) / 2,
        viewGameWidth > mainGameBgWidth && (uiOfferX = (mainGameBgWidth - designWidth) / 2)),
        offetGameWidth = viewGameWidth - 720,
        offetGameHeigh = viewGameHeigh - 1280,
        a = document.getElementById("gameCanvas"),
        a.style.width = viewGameHeigh,
        a.style.height = viewGameWidth;
    cc.view.enableRetina(!0);
    cc.view.adjustViewPort(!0);
    console.log();
    cc.view.setDesignResolutionSize(viewGameWidth, viewGameHeigh, cc.ResolutionPolicy.EXACT_FIT);
    cc.view.resizeWithBrowserSize(!0);
    cc.view._orientationChanging = false;
    initEngine();
    engine.gameBackgroundLoad.backgroundLoadCompleteParsingPlistFun = parsingPlistFun;
    initGameSDK();
    serverTimer = Math.floor((new Date).getTime() / 1E3);
    Global.severTime = serverTimer;
    Global.curGameRunTime = engineGameRunTime();
    sendBugLog.bugInfoHttp("进入onStart-------");
    gameSDK.runSDK(iniGame)
}
;
function parsingPlistFun(a) {
    "res/csi/transmissionplist.plist" != a && "res/csi/transmissionplist.png" != a || null == cc.loader.getRes("res/csi/transmissionplist.plist") || null == cc.loader.getRes("res/csi/transmissionplist.png") || cc.spriteFrameCache.addSpriteFrames("res/csi/transmissionplist.plist");
    "res/csi/sceneeffectplist.plist" != a && "res/csi/sceneeffectplist.png" != a || null == cc.loader.getRes("res/csi/sceneeffectplist.plist") || null == cc.loader.getRes("res/csi/sceneeffectplist.png") || cc.spriteFrameCache.addSpriteFrames("res/csi/sceneeffectplist.plist");
    "res/csi/stoneplist.plist" != a && "res/csi/stoneplist.png" != a || null == cc.loader.getRes("res/csi/stoneplist.plist") || null == cc.loader.getRes("res/csi/stoneplist.png") || cc.spriteFrameCache.addSpriteFrames("res/csi/stoneplist.plist");
    null != currentScene && null != currentScene.chooseLevelLayerEffect && currentScene.chooseLevelLayerEffect(a)
}
function iniGame() {
    selfData.mypid = gameSDK.sdkPlayInfo.id;
    console.log("playerID: " + selfData.mypid);
    console.log("...........版本号.........." + gameServerVersion);
    gameSDK.logEvent("initializeAsync", 1, {
        initializeAsync: "initializeAsync"
    });
    EventMgr.register(EVENTMGR_ID.GET_LEVEL_INFO_COMPLETE, init_getLevelData, null);
    gameSDK.getUserData([fbSaveDataKey], function(a) {
        if (null == a)
            isFirstEnterGame = !0,
            selfJsonData = null;
        else {
            switch (sdkName) {
            case "FaceBookTest":
                gameUserData = selfJsonData = a;
                break;
            case "FaceBook":
                for (var b in a[fbSaveDataKey])
                    null == selfJsonData && (selfJsonData = {}),
                    selfJsonData[b] = a[fbSaveDataKey][b],
                    gameUserData[b] = a[fbSaveDataKey][b]
            }
            parseTargetPeople(gameUserData.tarStr);
            gameUserData.honor_reward_index > Global.honorRewardList.length - 1 && (gameUserData.honor_reward_index = Global.honorRewardList.length - 1);
            a = Global.honorRewardList[gameUserData.honor_reward_index].honorNum;
            gameUserData.honor > a && (gameUserData.honor = a);
            1 == gameUserData.is_today_first_login && 0 != gameUserData.honor_invite_type && (gameUserData.honor_invite_type = 0);
            a = new Date;
            b = a.getDay();
            var c = 0
              , c = 1 <= b ? a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400 + 86400 * (7 - b) : a.getTime() / 1E3 - a.getTime() / 1E3 % 86400 + 86400;
            if (0 == gameUserData.week_refresh || null == gameUserData.week_refresh)
                gameUserData.week_refresh = c;
            cc.log("useData.data:", gameUserData)
        }
        EventMgr.emit(EVENTMGR_ID.GET_LEVEL_INFO_COMPLETE)
    })
}
function init_getLevelData() {
    SoundMgr.setEffectVolume(gameUserData.effectVolume);
    SoundMgr.setMusicVolume(gameUserData.musicVolume);
    EventMgr.remove(EVENTMGR_ID.GET_LEVEL_INFO_COMPLETE, null);
    cc.log("gameUserData:", gameUserData);
    Global.mapIndex = ~~(gameUserData.lv / 100 + 1);
    3 < Global.mapIndex && (Global.mapIndex = 3);
    1 < Global.mapIndex && (g_resources = g_resources.concat(g_mapRes),
    nextResComplete = !0);
    if (10 <= gameUserData.lv) {
        var a = getFightRes();
        g_resources = g_resources.concat(a)
    }
    for (var b in font)
        g_resources.push(font[b]);
    transitionsF(ChooseScene, g_resources, LoadScene, function() {
        gameSDK.logEvent("loadComplete", 1, {
            loadComplete: "loadComplete"
        });
        isNotFbGame || FBInstant.setLoadingProgress(100);
        for (var a = 1; 8 >= a; ++a)
            multiplePNGToSpriteFrame("res/csi/csi_" + a + ".plist");
        multiplePNGToSpriteFrame(res.scaleplist_plist);
        multiplePNGToSpriteFrame(res.fntplist_plist);
        multiplePNGToSpriteFrame(res.fightanimatelist1_plist);
        multiplePNGToSpriteFrame(res.fightanimatelist2_plist);
        multiplePNGToSpriteFrame(res.elementtrailing_plist);
        multiplePNGToSpriteFrame(res.remainsteptrailing1_plist);
        multiplePNGToSpriteFrame(res.remainsteptrailing2_plist)
    })
}
cc.game.run();
